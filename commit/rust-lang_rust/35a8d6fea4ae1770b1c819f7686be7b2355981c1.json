{"sha": "35a8d6fea4ae1770b1c819f7686be7b2355981c1", "node_id": "C_kwDOAAsO6NoAKDM1YThkNmZlYTRhZTE3NzBiMWM4MTlmNzY4NmJlN2IyMzU1OTgxYzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T06:53:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T06:53:23Z"}, "message": "Rollup merge of #106836 - ibraheemdev:sync-sender-spin, r=Amanieu\n\nRemove optimistic spinning from `mpsc::SyncSender`\n\nPer https://github.com/rust-lang/rust/pull/106701#issuecomment-1381649679.\nCloses #106804\n\nr? `@Amanieu`", "tree": {"sha": "71f941a0bf13e7aeca3644701f751374efc8500d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f941a0bf13e7aeca3644701f751374efc8500d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a8d6fea4ae1770b1c819f7686be7b2355981c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0iNjCRBK7hj4Ov3rIwAAWqUIADQzCmJZqltT37C5S/4MSknm\nuLGjrRzK0PkPKd0WsDl95sNA3w+Z0nVxijzUDbllhQUeWykljyEr9a7agIqPNiKw\n6hHEd9zmej4zlB03Lm20jcyXUakTSoHuk8b1N3RXnkawLjuTsjGOG0UI3rSmhDfd\nYvlmk85b2M8xI/Bm7kWXqExBSjSmhAEPTx7TCSzHNaELNj/YmocPKsGOE64fYiAg\nNI8TkAjpeVfE6IAT90l+m0lKewgViFUjdsaP1VgSiOYYre4iRC2pnKPGzdTL8C2A\nWfzjlFgBARQ/9eacD1BIChOzZunrDeMAqe8eqBdUdc+l2S7R8O6hk19QhUQWUlQ=\n=WzmS\n-----END PGP SIGNATURE-----\n", "payload": "tree 71f941a0bf13e7aeca3644701f751374efc8500d\nparent 59fcb7a2ce15f96fb4a0ce82f42503cf135aa81e\nparent ab20f8d5ba164510a4a782bcf305b7005bc88b15\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674716003 +0100\ncommitter GitHub <noreply@github.com> 1674716003 +0100\n\nRollup merge of #106836 - ibraheemdev:sync-sender-spin, r=Amanieu\n\nRemove optimistic spinning from `mpsc::SyncSender`\n\nPer https://github.com/rust-lang/rust/pull/106701#issuecomment-1381649679.\nCloses #106804\n\nr? `@Amanieu`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a8d6fea4ae1770b1c819f7686be7b2355981c1", "html_url": "https://github.com/rust-lang/rust/commit/35a8d6fea4ae1770b1c819f7686be7b2355981c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a8d6fea4ae1770b1c819f7686be7b2355981c1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59fcb7a2ce15f96fb4a0ce82f42503cf135aa81e", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fcb7a2ce15f96fb4a0ce82f42503cf135aa81e", "html_url": "https://github.com/rust-lang/rust/commit/59fcb7a2ce15f96fb4a0ce82f42503cf135aa81e"}, {"sha": "ab20f8d5ba164510a4a782bcf305b7005bc88b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab20f8d5ba164510a4a782bcf305b7005bc88b15", "html_url": "https://github.com/rust-lang/rust/commit/ab20f8d5ba164510a4a782bcf305b7005bc88b15"}], "stats": {"total": 30, "additions": 7, "deletions": 23}, "files": [{"sha": "c6bb09b0417f3c918fd06b2b3a377b9829d2f592", "filename": "library/std/src/sync/mpmc/array.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35a8d6fea4ae1770b1c819f7686be7b2355981c1/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a8d6fea4ae1770b1c819f7686be7b2355981c1/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs?ref=35a8d6fea4ae1770b1c819f7686be7b2355981c1", "patch": "@@ -319,19 +319,10 @@ impl<T> Channel<T> {\n     ) -> Result<(), SendTimeoutError<T>> {\n         let token = &mut Token::default();\n         loop {\n-            // Try sending a message several times.\n-            let backoff = Backoff::new();\n-            loop {\n-                if self.start_send(token) {\n-                    let res = unsafe { self.write(token, msg) };\n-                    return res.map_err(SendTimeoutError::Disconnected);\n-                }\n-\n-                if backoff.is_completed() {\n-                    break;\n-                } else {\n-                    backoff.spin_light();\n-                }\n+            // Try sending a message.\n+            if self.start_send(token) {\n+                let res = unsafe { self.write(token, msg) };\n+                return res.map_err(SendTimeoutError::Disconnected);\n             }\n \n             if let Some(d) = deadline {\n@@ -379,6 +370,7 @@ impl<T> Channel<T> {\n     pub(crate) fn recv(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError> {\n         let token = &mut Token::default();\n         loop {\n+            // Try receiving a message.\n             if self.start_recv(token) {\n                 let res = unsafe { self.read(token) };\n                 return res.map_err(|_| RecvTimeoutError::Disconnected);"}, {"sha": "d053d69e26eeeb819c9da040bf8141870fc914b1", "filename": "library/std/src/sync/mpmc/utils.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35a8d6fea4ae1770b1c819f7686be7b2355981c1/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a8d6fea4ae1770b1c819f7686be7b2355981c1/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Futils.rs?ref=35a8d6fea4ae1770b1c819f7686be7b2355981c1", "patch": "@@ -105,10 +105,8 @@ impl Backoff {\n \n     /// Backs off using lightweight spinning.\n     ///\n-    /// This method should be used for:\n-    ///     - Retrying an operation because another thread made progress. i.e. on CAS failure.\n-    ///     - Waiting for an operation to complete by spinning optimistically for a few iterations\n-    ///     before falling back to parking the thread (see `Backoff::is_completed`).\n+    /// This method should be used for retrying an operation because another thread made\n+    /// progress. i.e. on CAS failure.\n     #[inline]\n     pub fn spin_light(&self) {\n         let step = self.step.get().min(SPIN_LIMIT);\n@@ -134,10 +132,4 @@ impl Backoff {\n \n         self.step.set(self.step.get() + 1);\n     }\n-\n-    /// Returns `true` if quadratic backoff has completed and parking the thread is advised.\n-    #[inline]\n-    pub fn is_completed(&self) -> bool {\n-        self.step.get() > SPIN_LIMIT\n-    }\n }"}]}