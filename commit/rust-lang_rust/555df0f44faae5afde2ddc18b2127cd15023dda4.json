{"sha": "555df0f44faae5afde2ddc18b2127cd15023dda4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWRmMGY0NGZhYWU1YWZkZTJkZGMxOGIyMTI3Y2QxNTAyM2RkYTQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-25T12:31:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-25T12:31:14Z"}, "message": "Rollup merge of #55282 - sinkuu:redundant_clone, r=estebank\n\nRemove redundant clone", "tree": {"sha": "08e511f830181c4fb4a977da356131efda597d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e511f830181c4fb4a977da356131efda597d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555df0f44faae5afde2ddc18b2127cd15023dda4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0beTCRBK7hj4Ov3rIwAAdHIIAFx8yGxI2rABnONoLoSzvtzW\n4kpLNbldDFGifr/9DvAcg5Blo9e4lMhrn8w1XgyXRg9QOKQ7hK02xOXJBHS87FWQ\nb/4t/0xjrygqx82YaRLY0lmwrcRSTvLrtlTZy8zRvXviWhXrviuU4tHK5ptevIoh\n8tH2CpyKIlGELxNTyTG+wuZXuTQTTTM54kRtg5MdBcYxMZwzP4xPjzBK0sVr7WSr\n+mHjtdTUaUVlqdBbZlLGpOVNX6gIU5DqUrNzx7yVoy40o7mld5WkDu3At69JWrza\n4G0qNgiFkttTVZMdcEoAJHQGKuE+zJCO8Sm96s0QvZ3RynrWCS4rahfzzWZ9+oQ=\n=sD0S\n-----END PGP SIGNATURE-----\n", "payload": "tree 08e511f830181c4fb4a977da356131efda597d57\nparent 4f14bfdc73338d9b49eebb3f905bfc3df47d6891\nparent fda3326a5a34fd365e20f0dd2632cec27233d060\nauthor Pietro Albini <pietro@pietroalbini.org> 1540470674 +0200\ncommitter GitHub <noreply@github.com> 1540470674 +0200\n\nRollup merge of #55282 - sinkuu:redundant_clone, r=estebank\n\nRemove redundant clone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555df0f44faae5afde2ddc18b2127cd15023dda4", "html_url": "https://github.com/rust-lang/rust/commit/555df0f44faae5afde2ddc18b2127cd15023dda4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555df0f44faae5afde2ddc18b2127cd15023dda4/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "html_url": "https://github.com/rust-lang/rust/commit/4f14bfdc73338d9b49eebb3f905bfc3df47d6891"}, {"sha": "fda3326a5a34fd365e20f0dd2632cec27233d060", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda3326a5a34fd365e20f0dd2632cec27233d060", "html_url": "https://github.com/rust-lang/rust/commit/fda3326a5a34fd365e20f0dd2632cec27233d060"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ad2fa48610b0ea650ca55e38b96a5facbeb92619", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=555df0f44faae5afde2ddc18b2127cd15023dda4", "patch": "@@ -180,7 +180,7 @@ impl<'a> State<'a> {\n         State {\n             s: pp::mk_printer(out, default_columns),\n             cm: Some(cm),\n-            comments: comments.clone(),\n+            comments,\n             literals: literals.unwrap_or_default().into_iter().peekable(),\n             cur_cmnt: 0,\n             boxes: Vec::new(),"}, {"sha": "fbf4297222f9bd9109374f432b1cd5f25a744b34", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=555df0f44faae5afde2ddc18b2127cd15023dda4", "patch": "@@ -44,7 +44,7 @@ impl<'cm> CachingSourceMapView<'cm> {\n \n         CachingSourceMapView {\n             source_map,\n-            line_cache: [entry.clone(), entry.clone(), entry.clone()],\n+            line_cache: [entry.clone(), entry.clone(), entry],\n             time_stamp: 0,\n         }\n     }"}, {"sha": "b266fbe0d11458e08829a3c721407eb82b78343f", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=555df0f44faae5afde2ddc18b2127cd15023dda4", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n         let value = self.selcx.infcx().resolve_type_vars_if_possible(value);\n \n         if !value.has_projections() {\n-            value.clone()\n+            value\n         } else {\n             value.fold_with(self)\n         }"}, {"sha": "62e38ad9bfa662a84ecd25a2356fce2828332e74", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=555df0f44faae5afde2ddc18b2127cd15023dda4", "patch": "@@ -967,7 +967,7 @@ impl<'tcx> PolyFnSig<'tcx> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)\n     }\n     pub fn output(&self) -> ty::Binder<Ty<'tcx>> {\n-        self.map_bound_ref(|fn_sig| fn_sig.output().clone())\n+        self.map_bound_ref(|fn_sig| fn_sig.output())\n     }\n     pub fn variadic(&self) -> bool {\n         self.skip_binder().variadic"}, {"sha": "77483ad184ba6cda0688d9e17336c7bc18804ea9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=555df0f44faae5afde2ddc18b2127cd15023dda4", "patch": "@@ -1048,7 +1048,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     if let Some(constructors) = pat_constructors(cx, v[0], pcx) {\n         debug!(\"is_useful - expanding constructors: {:#?}\", constructors);\n         split_grouped_constructors(cx.tcx, constructors, matrix, pcx.ty).into_iter().map(|c|\n-            is_useful_specialized(cx, matrix, v, c.clone(), pcx.ty, witness)\n+            is_useful_specialized(cx, matrix, v, c, pcx.ty, witness)\n         ).find(|result| result.is_useful()).unwrap_or(NotUseful)\n     } else {\n         debug!(\"is_useful - expanding wildcard\");\n@@ -1096,7 +1096,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n         if missing_ctors.is_empty() && !is_non_exhaustive {\n             split_grouped_constructors(cx.tcx, all_ctors, matrix, pcx.ty).into_iter().map(|c| {\n-                is_useful_specialized(cx, matrix, v, c.clone(), pcx.ty, witness)\n+                is_useful_specialized(cx, matrix, v, c, pcx.ty, witness)\n             }).find(|result| result.is_useful()).unwrap_or(NotUseful)\n         } else {\n             let matrix = rows.iter().filter_map(|r| {"}, {"sha": "18d5970462f63ccd6aaf582f9c5c3362a28eaacf", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555df0f44faae5afde2ddc18b2127cd15023dda4/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=555df0f44faae5afde2ddc18b2127cd15023dda4", "patch": "@@ -965,7 +965,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             polarity,\n             defaultness,\n             folder.fold_generics(generics),\n-            ifce.map(|trait_ref| folder.fold_trait_ref(trait_ref.clone())),\n+            ifce.map(|trait_ref| folder.fold_trait_ref(trait_ref)),\n             folder.fold_ty(ty),\n             impl_items.move_flat_map(|item| folder.fold_impl_item(item)),\n         ),"}]}