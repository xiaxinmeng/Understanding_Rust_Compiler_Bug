{"sha": "3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "node_id": "C_kwDOAAsO6NoAKDNlOGYzMmUxYzUyY2E0OTNjODYyZmFjYjdhNjllN2MzZjFmOTdhMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-27T11:10:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-27T11:10:40Z"}, "message": "Auto merge of #89263 - TaKO8Ki:suggest-both-immutable-and-mutable-trait-implementations, r=estebank\n\nSuggest both of immutable and mutable trait implementations\n\ncloses #85865", "tree": {"sha": "859d14b539ac951123407c51007bb78496efb559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859d14b539ac951123407c51007bb78496efb559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "html_url": "https://github.com/rust-lang/rust/commit/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "583437a6dd58ee266839d2dac940642a0752a6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/583437a6dd58ee266839d2dac940642a0752a6dd", "html_url": "https://github.com/rust-lang/rust/commit/583437a6dd58ee266839d2dac940642a0752a6dd"}, {"sha": "3bab36357cf21766b50946b64345f771ede0e2be", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bab36357cf21766b50946b64345f771ede0e2be", "html_url": "https://github.com/rust-lang/rust/commit/3bab36357cf21766b50946b64345f771ede0e2be"}], "stats": {"total": 303, "additions": 211, "deletions": 92}, "files": [{"sha": "2a51e01471398861252d3b3d96fdf31f88d40154", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -714,22 +714,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut_substs = self.tcx.mk_substs_trait(mut_borrowed_found_ty, &[]);\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |new_trait_ref: ty::TraitRef<'tcx>,\n+        let mut try_borrowing = |new_imm_trait_ref: ty::TraitRef<'tcx>,\n+                                 new_mut_trait_ref: ty::TraitRef<'tcx>,\n                                  expected_trait_ref: ty::TraitRef<'tcx>,\n-                                 mtbl: bool,\n                                  blacklist: &[DefId]|\n          -> bool {\n             if blacklist.contains(&expected_trait_ref.def_id) {\n                 return false;\n             }\n \n-            let new_obligation = Obligation::new(\n+            let imm_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                ty::Binder::dummy(new_trait_ref).without_const().to_predicate(self.tcx),\n-            );\n+                ty::Binder::dummy(new_imm_trait_ref).without_const().to_predicate(self.tcx),\n+            ));\n \n-            if self.predicate_must_hold_modulo_regions(&new_obligation) {\n+            let mut_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n+                ObligationCause::dummy(),\n+                param_env,\n+                ty::Binder::dummy(new_mut_trait_ref).without_const().to_predicate(self.tcx),\n+            ));\n+\n+            if imm_result || mut_result {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     // We have a very specific type of error, where just borrowing this argument\n                     // might solve the problem. In cases like this, the important part is the\n@@ -773,15 +779,24 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // }\n                         // ```\n \n-                        err.span_suggestion(\n-                            span,\n-                            &format!(\n-                                \"consider{} borrowing here\",\n-                                if mtbl { \" mutably\" } else { \"\" }\n-                            ),\n-                            format!(\"&{}{}\", if mtbl { \"mut \" } else { \"\" }, snippet),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        if imm_result && mut_result {\n+                            err.span_suggestions(\n+                                span.shrink_to_lo(),\n+                                \"consider borrowing here\",\n+                                [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                &format!(\n+                                    \"consider{} borrowing here\",\n+                                    if mut_result { \" mutably\" } else { \"\" }\n+                                ),\n+                                format!(\"&{}\", if mut_result { \"mut \" } else { \"\" }),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n                     }\n                     return true;\n                 }\n@@ -795,29 +810,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs);\n             let new_mut_trait_ref =\n                 ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs);\n-            if try_borrowing(new_imm_trait_ref, expected_trait_ref, false, &[]) {\n-                return true;\n-            } else {\n-                return try_borrowing(new_mut_trait_ref, expected_trait_ref, true, &[]);\n-            }\n+            return try_borrowing(new_imm_trait_ref, new_mut_trait_ref, expected_trait_ref, &[]);\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n         | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n-            if try_borrowing(\n+            return try_borrowing(\n                 ty::TraitRef::new(trait_ref.def_id, imm_substs),\n+                ty::TraitRef::new(trait_ref.def_id, mut_substs),\n                 trait_ref,\n-                false,\n                 &never_suggest_borrow[..],\n-            ) {\n-                return true;\n-            } else {\n-                return try_borrowing(\n-                    ty::TraitRef::new(trait_ref.def_id, mut_substs),\n-                    trait_ref,\n-                    true,\n-                    &never_suggest_borrow[..],\n-                );\n-            }\n+            );\n         } else {\n             false\n         }"}, {"sha": "1d0554ad0477fe28db53563b08749dfeb00693a0", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -2,10 +2,8 @@ error[E0277]: the trait bound `C: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL |     is_copy(B { a: 1, b: C });\n-   |     ------- ^^^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       expected an implementor of trait `Copy`\n-   |     |       help: consider borrowing here: `&B { a: 1, b: C }`\n+   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Copy`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Copy` for `B<C>`\n@@ -19,15 +17,17 @@ note: required by a bound in `is_copy`\n LL | fn is_copy<T: Copy>(_: T) {}\n    |               ^^^^ required by this bound in `is_copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider borrowing here\n+   |\n+LL |     is_copy(&B { a: 1, b: C });\n+   |             +\n \n error[E0277]: the trait bound `C: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL |     is_clone(B { a: 1, b: C });\n-   |     -------- ^^^^^^^^^^^^^^^^\n-   |     |        |\n-   |     |        expected an implementor of trait `Clone`\n-   |     |        help: consider borrowing here: `&B { a: 1, b: C }`\n+   |     -------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Clone`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Clone` for `B<C>`\n@@ -41,15 +41,17 @@ note: required by a bound in `is_clone`\n LL | fn is_clone<T: Clone>(_: T) {}\n    |                ^^^^^ required by this bound in `is_clone`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider borrowing here\n+   |\n+LL |     is_clone(&B { a: 1, b: C });\n+   |              +\n \n error[E0277]: the trait bound `D: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL |     is_copy(B { a: 1, b: D });\n-   |     ------- ^^^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       expected an implementor of trait `Copy`\n-   |     |       help: consider borrowing here: `&B { a: 1, b: D }`\n+   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Copy`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Copy` for `B<D>`\n@@ -63,6 +65,10 @@ note: required by a bound in `is_copy`\n LL | fn is_copy<T: Copy>(_: T) {}\n    |               ^^^^ required by this bound in `is_copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider borrowing here\n+   |\n+LL |     is_copy(&B { a: 1, b: D });\n+   |             +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5a67aead75a73d44f9de286329e756c0d393b76f", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -2,10 +2,7 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^\n-   |                 |\n-   |                 expected an implementor of trait `IntoIterator`\n-   |                 help: consider mutably borrowing here: `&mut *things`\n+   |                 ^^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n@@ -14,6 +11,10 @@ note: required by `into_iter`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider mutably borrowing here\n+   |\n+LL |     for item in &mut *things { *item = 0 }\n+   |                 ++++\n \n error: aborting due to previous error\n "}, {"sha": "001af27b2484e9415844e8a628579f54c5fb4e47", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -22,17 +22,19 @@ error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7\n    |\n LL |   foo(s);\n-   |   --- ^\n-   |   |   |\n-   |   |   expected an implementor of trait `Trait`\n-   |   |   help: consider mutably borrowing here: `&mut s`\n+   |   --- ^ expected an implementor of trait `Trait`\n+   |   |\n    |   required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/imm-ref-trait-object-literal.rs:7:11\n    |\n LL | fn foo<X: Trait>(_: X) {}\n    |           ^^^^^ required by this bound in `foo`\n+help: consider mutably borrowing here\n+   |\n+LL |   foo(&mut s);\n+   |       ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29ba39cbe109c5ecf84f32459c8b4d60e493ffbc", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -2,14 +2,16 @@ error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                           ---- ^^^^^^^\n-   |                           |    |\n-   |                           |    expected an implementor of trait `Pattern<'_>`\n-   |                           |    help: consider borrowing here: `&pattern`\n+   |                           ---- ^^^^^^^ expected an implementor of trait `Pattern<'_>`\n+   |                           |\n    |                           required by a bound introduced by this call\n    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\n+help: consider borrowing here\n+   |\n+LL |     println!(\"{:?}\", line.find(&pattern));\n+   |                                +\n \n error: aborting due to previous error\n "}, {"sha": "2c54ea6724505f9217ec07e9aebe5423c8c5b826", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -2,17 +2,19 @@ error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-2.rs:11:9\n    |\n LL |     foo(a);\n-   |     --- ^\n-   |     |   |\n-   |     |   expected an implementor of trait `Tr`\n-   |     |   help: consider mutably borrowing here: `&mut a`\n+   |     --- ^ expected an implementor of trait `Tr`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/issue-84973-2.rs:7:11\n    |\n LL | fn foo<T: Tr>(i: T) {}\n    |           ^^ required by this bound in `foo`\n+help: consider mutably borrowing here\n+   |\n+LL |     foo(&mut a);\n+   |         ++++\n \n error: aborting due to previous error\n "}, {"sha": "1f33374eb29dbf9c050c88e5fa4babd9c4a61a92", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -16,17 +16,19 @@ error[E0277]: the trait bound `f32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:11:9\n    |\n LL |     bar(b);\n-   |     --- ^\n-   |     |   |\n-   |     |   expected an implementor of trait `Tr`\n-   |     |   help: consider borrowing here: `&b`\n+   |     --- ^ expected an implementor of trait `Tr`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n note: required by a bound in `bar`\n   --> $DIR/issue-84973-negative.rs:5:11\n    |\n LL | fn bar<T: Tr>(t: T) {}\n    |           ^^ required by this bound in `bar`\n+help: consider borrowing here\n+   |\n+LL |     bar(&b);\n+   |         +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "16a28c73aa7247db0184c755bfb8ab880f9359d1", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -2,17 +2,19 @@ error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n   --> $DIR/issue-84973.rs:6:24\n    |\n LL |     let o = Other::new(f);\n-   |             ---------- ^\n-   |             |          |\n-   |             |          expected an implementor of trait `SomeTrait`\n-   |             |          help: consider borrowing here: `&f`\n+   |             ---------- ^ expected an implementor of trait `SomeTrait`\n+   |             |\n    |             required by a bound introduced by this call\n    |\n note: required by `Other::<'a, G>::new`\n   --> $DIR/issue-84973.rs:27:5\n    |\n LL |     pub fn new(g: G) -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider borrowing here\n+   |\n+LL |     let o = Other::new(&f);\n+   |                        +\n \n error: aborting due to previous error\n "}, {"sha": "0275fd475d8c6a1f5363b5ba7a807884a90c6fa2", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -2,10 +2,7 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^\n-   |            |\n-   |            expected an implementor of trait `IntoIterator`\n-   |            help: consider borrowing here: `&v[1..]`\n+   |            ^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n@@ -14,15 +11,18 @@ note: required by `into_iter`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider borrowing here\n+   |\n+LL |   for _ in &v[1..] {\n+   |            +\n+LL |   for _ in &mut v[1..] {\n+   |            ++++\n \n error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^\n-   |            |\n-   |            expected an implementor of trait `IntoIterator`\n-   |            help: consider borrowing here: `&v[1..]`\n+   |            ^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n@@ -31,15 +31,18 @@ note: required by `into_iter`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider borrowing here\n+   |\n+LL |   for _ in &v[1..] {\n+   |            +\n+LL |   for _ in &mut v[1..] {\n+   |            ++++\n \n error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^\n-   |             |\n-   |             expected an implementor of trait `IntoIterator`\n-   |             help: consider borrowing here: `&v2[1..]`\n+   |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n@@ -48,15 +51,18 @@ note: required by `into_iter`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider borrowing here\n+   |\n+LL |   for i2 in &v2[1..] {\n+   |             +\n+LL |   for i2 in &mut v2[1..] {\n+   |             ++++\n \n error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^\n-   |             |\n-   |             expected an implementor of trait `IntoIterator`\n-   |             help: consider borrowing here: `&v2[1..]`\n+   |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n@@ -65,6 +71,12 @@ note: required by `into_iter`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider borrowing here\n+   |\n+LL |   for i2 in &v2[1..] {\n+   |             +\n+LL |   for i2 in &mut v2[1..] {\n+   |             ++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a62669d5b2d8f7ec50dabd074256da16bd72a7ea", "filename": "src/test/ui/suggestions/suggest-imm-mut-trait-implementations.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.rs?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -0,0 +1,23 @@\n+trait Trait {}\n+\n+struct A;\n+struct B;\n+struct C;\n+\n+impl Trait for &A {}\n+impl Trait for &mut A {}\n+\n+impl Trait for &B {}\n+\n+impl Trait for &mut C {}\n+\n+fn foo<X: Trait>(_: X) {}\n+\n+fn main() {\n+    let a = A;\n+    let b = B;\n+    let c = C;\n+    foo(a); //~ ERROR the trait bound `A: Trait` is not satisfied\n+    foo(b); //~ ERROR the trait bound `B: Trait` is not satisfied\n+    foo(c); //~ ERROR the trait bound `C: Trait` is not satisfied\n+}"}, {"sha": "6583cabe18489b698f7103773edf31d33d32cf4f", "filename": "src/test/ui/suggestions/suggest-imm-mut-trait-implementations.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -0,0 +1,59 @@\n+error[E0277]: the trait bound `A: Trait` is not satisfied\n+  --> $DIR/suggest-imm-mut-trait-implementations.rs:20:9\n+   |\n+LL |     foo(a);\n+   |     --- ^ expected an implementor of trait `Trait`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/suggest-imm-mut-trait-implementations.rs:14:11\n+   |\n+LL | fn foo<X: Trait>(_: X) {}\n+   |           ^^^^^ required by this bound in `foo`\n+help: consider borrowing here\n+   |\n+LL |     foo(&a);\n+   |         +\n+LL |     foo(&mut a);\n+   |         ++++\n+\n+error[E0277]: the trait bound `B: Trait` is not satisfied\n+  --> $DIR/suggest-imm-mut-trait-implementations.rs:21:9\n+   |\n+LL |     foo(b);\n+   |     --- ^ expected an implementor of trait `Trait`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/suggest-imm-mut-trait-implementations.rs:14:11\n+   |\n+LL | fn foo<X: Trait>(_: X) {}\n+   |           ^^^^^ required by this bound in `foo`\n+help: consider borrowing here\n+   |\n+LL |     foo(&b);\n+   |         +\n+\n+error[E0277]: the trait bound `C: Trait` is not satisfied\n+  --> $DIR/suggest-imm-mut-trait-implementations.rs:22:9\n+   |\n+LL |     foo(c);\n+   |     --- ^ expected an implementor of trait `Trait`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/suggest-imm-mut-trait-implementations.rs:14:11\n+   |\n+LL | fn foo<X: Trait>(_: X) {}\n+   |           ^^^^^ required by this bound in `foo`\n+help: consider mutably borrowing here\n+   |\n+LL |     foo(&mut c);\n+   |         ++++\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8059a8ca71e43b0697eda08692317a7f2c6564f2", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f32e1c52ca493c862facb7a69e7c3f1f97a18/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18", "patch": "@@ -61,10 +61,8 @@ error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL |     is_send(Box::new(TestType));\n-   |     ------- ^^^^^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       expected an implementor of trait `Send`\n-   |     |       help: consider borrowing here: `&Box::new(TestType)`\n+   |     ------- ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `Send`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n    = note: the trait bound `dummy2::TestType: Send` is not satisfied\n@@ -75,6 +73,10 @@ note: required by a bound in `is_send`\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n+help: consider borrowing here\n+   |\n+LL |     is_send(&Box::new(TestType));\n+   |             +\n \n error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:56:13\n@@ -102,10 +104,8 @@ error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL |     is_sync(Outer2(TestType));\n-   |     ------- ^^^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       expected an implementor of trait `Sync`\n-   |     |       help: consider borrowing here: `&Outer2(TestType)`\n+   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Sync`\n+   |     |\n    |     required by a bound introduced by this call\n    |\n    = note: the trait bound `main::TestType: Sync` is not satisfied\n@@ -119,6 +119,12 @@ note: required by a bound in `is_sync`\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    |               ^^^^ required by this bound in `is_sync`\n+help: consider borrowing here\n+   |\n+LL |     is_sync(&Outer2(TestType));\n+   |             +\n+LL |     is_sync(&mut Outer2(TestType));\n+   |             ++++\n \n error: aborting due to 7 previous errors\n "}]}