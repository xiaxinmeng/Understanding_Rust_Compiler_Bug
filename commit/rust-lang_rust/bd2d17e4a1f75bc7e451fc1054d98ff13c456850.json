{"sha": "bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMmQxN2U0YTFmNzViYzdlNDUxZmMxMDU0ZDk4ZmYxM2M0NTY4NTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-07T23:44:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:35:58Z"}, "message": "libsyntax: Stop parsing bare functions in preparation for switching them over", "tree": {"sha": "4786d560c72b34b8725be337a677c4c6b8a47508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4786d560c72b34b8725be337a677c4c6b8a47508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "html_url": "https://github.com/rust-lang/rust/commit/bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18f7854578e8c2e1d7dce90db6e3b5cf9befba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18f7854578e8c2e1d7dce90db6e3b5cf9befba9", "html_url": "https://github.com/rust-lang/rust/commit/d18f7854578e8c2e1d7dce90db6e3b5cf9befba9"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "2adcee495a738e8fbe69cbb3ee0dbcea41b78b3c", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -599,7 +599,9 @@ pub mod linear {\n         }\n \n         /// Visit the values representing the intersection\n-        pure fn intersection(&self, other: &LinearSet<T>, f: &fn(&T) -> bool) {\n+        pure fn intersection(&self,\n+                             other: &LinearSet<T>,\n+                             f: &fn(&T) -> bool) {\n             for self.each |v| {\n                 if other.contains(v) {\n                     if !f(v) { return }"}, {"sha": "9abbfb03d7a567a8578f9291c296fd0e9343c6c6", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -67,7 +67,10 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n  * Iterate over the range [`start`,`start`+`step`..`stop`)\n  *\n  */\n-pub pure fn range_step(start: T, stop: T, step: T_SIGNED, it: &fn(T) -> bool) {\n+pub pure fn range_step(start: T,\n+                       stop: T,\n+                       step: T_SIGNED,\n+                       it: &fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n         fail!(~\"range_step called with step == 0\");"}, {"sha": "ae778cb7649b7844bff122836f845ea18cb1db5d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -491,7 +491,10 @@ pub pure fn split(s: &str, sepfn: &fn(char) -> bool) -> ~[~str] {\n  * Splits a string into substrings using a character function, cutting at\n  * most `count` times.\n  */\n-pub pure fn splitn(s: &str, sepfn: &fn(char) -> bool, count: uint) -> ~[~str] {\n+pub pure fn splitn(s: &str,\n+                   sepfn: &fn(char) -> bool,\n+                   count: uint)\n+                -> ~[~str] {\n     split_inner(s, sepfn, count, true)\n }\n \n@@ -1246,8 +1249,11 @@ pub pure fn find_from(s: &str, start: uint, f: &fn(char)\n  * or equal to `len(s)`. `start` must be the index of a character\n  * boundary, as defined by `is_char_boundary`.\n  */\n-pub pure fn find_between(s: &str, start: uint, end: uint, f: &fn(char) -> bool)\n-    -> Option<uint> {\n+pub pure fn find_between(s: &str,\n+                         start: uint,\n+                         end: uint,\n+                         f: &fn(char) -> bool)\n+                      -> Option<uint> {\n     fail_unless!(start <= end);\n     fail_unless!(end <= len(s));\n     fail_unless!(is_char_boundary(s, start));"}, {"sha": "7dc85cba297f1d843cae0583a033f88ba1431eb3", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -81,7 +81,10 @@ impl<T> Map<uint, T> for TrieMap<T> {\n \n     /// Visit all values in order\n     #[inline(always)]\n-    pure fn each_value(&self, f: &fn(&T) -> bool) { self.each(|&(_, v)| f(v)) }\n+    pure fn each_value(&self,\n+                       f: &fn(&T) -> bool) {\n+        self.each(|&(_, v)| f(v))\n+    }\n \n     /// Return the value corresponding to the key in the map\n     #[inline(hint)]"}, {"sha": "a8b25767ce59563046669b6bc4f424ce0dad4c56", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -68,7 +68,7 @@ pub unsafe fn read(prompt: ~str) -> Option<~str> {\n     }\n }\n \n-pub type CompletionCb = @fn(~str, fn(~str));\n+pub type CompletionCb<'self> = @fn(~str, &'self fn(~str));\n \n fn complete_key(_v: @CompletionCb) {}\n "}, {"sha": "72351aac33975addf8ffa215c49f7c9ddc80d817", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -138,7 +138,9 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n     pure fn each_key(&self, f: &fn(&K) -> bool) { self.each(|&(k, _)| f(k)) }\n \n     /// Visit all values in order\n-    pure fn each_value(&self, f: &fn(&V) -> bool) { self.each(|&(_, v)| f(v)) }\n+    pure fn each_value(&self, f: &fn(&V) -> bool) {\n+        self.each(|&(_, v)| f(v))\n+    }\n \n     /// Return the value corresponding to the key in the map\n     pure fn find(&self, key: &K) -> Option<&self/V> {"}, {"sha": "757df713fc05317698d54debadc00e662d6573a1", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -53,6 +53,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteRecordPattern,\n     ObsoleteAssertion,\n     ObsoletePostFnTySigil,\n+    ObsoleteBareFnType,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -166,6 +167,10 @@ pub impl Parser {\n                 \"Rather than `fn@`, `fn~`, or `fn&`, \\\n                  write `@fn`, `~fn`, and `&fn` respectively\"\n             ),\n+            ObsoleteBareFnType => (\n+                \"bare function type\",\n+                \"use `&fn` or `extern fn` instead\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "1c3d906e1648a7fc5a66b95be75f3da2773acc4e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2d17e4a1f75bc7e451fc1054d98ff13c456850/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bd2d17e4a1f75bc7e451fc1054d98ff13c456850", "patch": "@@ -76,7 +76,11 @@ use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n+<<<<<<< HEAD\n use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n+=======\n+use parse::obsolete::{ObsoleteAssertion, ObsoleteBareFnType};\n+>>>>>>> libsyntax: Stop parsing bare functions in preparation for switching them over\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -647,8 +651,14 @@ pub impl Parser {\n         } else if self.eat_keyword(&~\"extern\") {\n             self.parse_ty_bare_fn()\n         } else if self.token_is_closure_keyword(&copy *self.token) {\n+<<<<<<< HEAD\n             // self.warn(fmt!(\"Old-school closure keyword\"));\n             self.parse_ty_closure(ast::BorrowedSigil, None)\n+=======\n+            let result = self.parse_ty_closure(None, None);\n+            self.obsolete(*self.last_span, ObsoleteBareFnType);\n+            result\n+>>>>>>> libsyntax: Stop parsing bare functions in preparation for switching them over\n         } else if *self.token == token::MOD_SEP\n             || is_ident_or_path(&*self.token) {\n             let path = self.parse_path_with_tps(colons_before_params);\n@@ -2813,7 +2823,7 @@ pub impl Parser {\n     fn parse_fn_decl_with_self(\n         &self,\n         parse_arg_fn:\n-        fn(&Parser) -> arg_or_capture_item\n+        &fn(&Parser) -> arg_or_capture_item\n     ) -> (self_ty, fn_decl) {\n         fn maybe_parse_self_ty(\n             cnstr: &fn(+v: mutability) -> ast::self_ty_,"}]}