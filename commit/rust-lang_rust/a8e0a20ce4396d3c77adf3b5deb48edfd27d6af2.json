{"sha": "a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "node_id": "C_kwDOAAsO6NoAKGE4ZTBhMjBjZTQzOTZkM2M3N2FkZjNiNWRlYjQ4ZWRmZDI3ZDZhZjI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-20T19:12:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-20T19:14:36Z"}, "message": "internal: Properly handle language configuration config changes", "tree": {"sha": "1e640105869a45c4346730c26d24a5aa0c57e9e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e640105869a45c4346730c26d24a5aa0c57e9e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "html_url": "https://github.com/rust-lang/rust/commit/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3cce5feea047e61af84f371072a021a333ba69f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cce5feea047e61af84f371072a021a333ba69f", "html_url": "https://github.com/rust-lang/rust/commit/f3cce5feea047e61af84f371072a021a333ba69f"}], "stats": {"total": 170, "additions": 89, "deletions": 81}, "files": [{"sha": "61125d7a83eb8dd87a179d77f914f60e1c6ba3db", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 77, "deletions": 25, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "patch": "@@ -11,23 +11,17 @@ export type RunnableEnvCfg =\n \n export class Config {\n     readonly extensionId = \"rust-lang.rust-analyzer\";\n+    configureLang: vscode.Disposable | undefined;\n \n     readonly rootSection = \"rust-analyzer\";\n-    private readonly requiresWorkspaceReloadOpts = [\n-        // FIXME: This shouldn't be here, changing this setting should reload\n-        // `continueCommentsOnNewline` behavior without restart\n-        \"typing\",\n-    ].map((opt) => `${this.rootSection}.${opt}`);\n     private readonly requiresReloadOpts = [\n         \"cargo\",\n         \"procMacro\",\n         \"serverPath\",\n         \"server\",\n         \"files\",\n         \"lens\", // works as lens.*\n-    ]\n-        .map((opt) => `${this.rootSection}.${opt}`)\n-        .concat(this.requiresWorkspaceReloadOpts);\n+    ].map((opt) => `${this.rootSection}.${opt}`);\n \n     readonly package: {\n         version: string;\n@@ -45,6 +39,11 @@ export class Config {\n             ctx.subscriptions\n         );\n         this.refreshLogging();\n+        this.configureLanguage();\n+    }\n+\n+    dispose() {\n+        this.configureLang?.dispose();\n     }\n \n     private refreshLogging() {\n@@ -58,33 +57,86 @@ export class Config {\n     private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {\n         this.refreshLogging();\n \n+        this.configureLanguage();\n+\n         const requiresReloadOpt = this.requiresReloadOpts.find((opt) =>\n             event.affectsConfiguration(opt)\n         );\n \n         if (!requiresReloadOpt) return;\n \n-        const requiresWorkspaceReloadOpt = this.requiresWorkspaceReloadOpts.find((opt) =>\n-            event.affectsConfiguration(opt)\n-        );\n-\n-        if (!requiresWorkspaceReloadOpt && this.restartServerOnConfigChange) {\n+        if (this.restartServerOnConfigChange) {\n             await vscode.commands.executeCommand(\"rust-analyzer.reload\");\n             return;\n         }\n \n-        const message = requiresWorkspaceReloadOpt\n-            ? `Changing \"${requiresWorkspaceReloadOpt}\" requires a window reload`\n-            : `Changing \"${requiresReloadOpt}\" requires a reload`;\n-        const userResponse = await vscode.window.showInformationMessage(message, \"Reload now\");\n-\n-        if (userResponse === \"Reload now\") {\n-            const command = requiresWorkspaceReloadOpt\n-                ? \"workbench.action.reloadWindow\"\n-                : \"rust-analyzer.reload\";\n-            if (userResponse === \"Reload now\") {\n-                await vscode.commands.executeCommand(command);\n-            }\n+        const message = `Changing \"${requiresReloadOpt}\" requires a server restart`;\n+        const userResponse = await vscode.window.showInformationMessage(message, \"Restart now\");\n+\n+        if (userResponse) {\n+            const command = \"rust-analyzer.reload\";\n+            await vscode.commands.executeCommand(command);\n+        }\n+    }\n+\n+    /**\n+     * Sets up additional language configuration that's impossible to do via a\n+     * separate language-configuration.json file. See [1] for more information.\n+     *\n+     * [1]: https://github.com/Microsoft/vscode/issues/11514#issuecomment-244707076\n+     */\n+    private configureLanguage() {\n+        if (this.typingContinueCommentsOnNewline && !this.configureLang) {\n+            const indentAction = vscode.IndentAction.None;\n+\n+            this.configureLang = vscode.languages.setLanguageConfiguration(\"rust\", {\n+                onEnterRules: [\n+                    {\n+                        // Doc single-line comment\n+                        // e.g. ///|\n+                        beforeText: /^\\s*\\/{3}.*$/,\n+                        action: { indentAction, appendText: \"/// \" },\n+                    },\n+                    {\n+                        // Parent doc single-line comment\n+                        // e.g. //!|\n+                        beforeText: /^\\s*\\/{2}\\!.*$/,\n+                        action: { indentAction, appendText: \"//! \" },\n+                    },\n+                    {\n+                        // Begins an auto-closed multi-line comment (standard or parent doc)\n+                        // e.g. /** | */ or /*! | */\n+                        beforeText: /^\\s*\\/\\*(\\*|\\!)(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n+                        afterText: /^\\s*\\*\\/$/,\n+                        action: {\n+                            indentAction: vscode.IndentAction.IndentOutdent,\n+                            appendText: \" * \",\n+                        },\n+                    },\n+                    {\n+                        // Begins a multi-line comment (standard or parent doc)\n+                        // e.g. /** ...| or /*! ...|\n+                        beforeText: /^\\s*\\/\\*(\\*|\\!)(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n+                        action: { indentAction, appendText: \" * \" },\n+                    },\n+                    {\n+                        // Continues a multi-line comment\n+                        // e.g.  * ...|\n+                        beforeText: /^(\\ \\ )*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n+                        action: { indentAction, appendText: \"* \" },\n+                    },\n+                    {\n+                        // Dedents after closing a multi-line comment\n+                        // e.g.  */|\n+                        beforeText: /^(\\ \\ )*\\ \\*\\/\\s*$/,\n+                        action: { indentAction, removeText: 1 },\n+                    },\n+                ],\n+            });\n+        }\n+        if (!this.typingContinueCommentsOnNewline && this.configureLang) {\n+            this.configureLang.dispose();\n+            this.configureLang = undefined;\n         }\n     }\n "}, {"sha": "75c6d4698c1717f876170022168291e3af7ba680", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "patch": "@@ -38,6 +38,7 @@ export class Ctx {\n                 this.dispose();\n             },\n         });\n+        extCtx.subscriptions.push(this);\n         this.statusBar.text = \"rust-analyzer\";\n         this.statusBar.tooltip = \"ready\";\n         this.statusBar.command = \"rust-analyzer.analyzerStatus\";\n@@ -48,10 +49,15 @@ export class Ctx {\n         this.config = new Config(extCtx);\n     }\n \n+    dispose() {\n+        this.config.dispose();\n+    }\n+\n     clientFetcher() {\n+        const self = this;\n         return {\n             get client(): lc.LanguageClient | undefined {\n-                return this.client;\n+                return self.client;\n             },\n         };\n     }"}, {"sha": "fa7dc6fe304ebabbeeaf553ab5b5c9f8470d2d56", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 5, "deletions": 55, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=a8e0a20ce4396d3c77adf3b5deb48edfd27d6af2", "patch": "@@ -77,10 +77,6 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n \n     await initCommonContext(ctx);\n \n-    if (ctx.config.typingContinueCommentsOnNewline) {\n-        ctx.pushExtCleanup(configureLanguage());\n-    }\n-\n     vscode.workspace.onDidChangeConfiguration(\n         async (_) => {\n             await ctx\n@@ -129,6 +125,11 @@ async function initCommonContext(ctx: Ctx) {\n     ctx.registerCommand(\"stopServer\", (_) => async () => {\n         // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n         await ctx.disposeClient();\n+        ctx.setServerStatus({\n+            health: \"ok\",\n+            quiescent: true,\n+            message: \"server is not running\",\n+        });\n     });\n     ctx.registerCommand(\"analyzerStatus\", commands.analyzerStatus);\n     ctx.registerCommand(\"memoryUsage\", commands.memoryUsage);\n@@ -172,54 +173,3 @@ async function initCommonContext(ctx: Ctx) {\n     defaultOnEnter.dispose();\n     ctx.registerCommand(\"onEnter\", commands.onEnter);\n }\n-\n-/**\n- * Sets up additional language configuration that's impossible to do via a\n- * separate language-configuration.json file. See [1] for more information.\n- *\n- * [1]: https://github.com/Microsoft/vscode/issues/11514#issuecomment-244707076\n- */\n-function configureLanguage(): vscode.Disposable {\n-    const indentAction = vscode.IndentAction.None;\n-    return vscode.languages.setLanguageConfiguration(\"rust\", {\n-        onEnterRules: [\n-            {\n-                // Doc single-line comment\n-                // e.g. ///|\n-                beforeText: /^\\s*\\/{3}.*$/,\n-                action: { indentAction, appendText: \"/// \" },\n-            },\n-            {\n-                // Parent doc single-line comment\n-                // e.g. //!|\n-                beforeText: /^\\s*\\/{2}\\!.*$/,\n-                action: { indentAction, appendText: \"//! \" },\n-            },\n-            {\n-                // Begins an auto-closed multi-line comment (standard or parent doc)\n-                // e.g. /** | */ or /*! | */\n-                beforeText: /^\\s*\\/\\*(\\*|\\!)(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n-                afterText: /^\\s*\\*\\/$/,\n-                action: { indentAction: vscode.IndentAction.IndentOutdent, appendText: \" * \" },\n-            },\n-            {\n-                // Begins a multi-line comment (standard or parent doc)\n-                // e.g. /** ...| or /*! ...|\n-                beforeText: /^\\s*\\/\\*(\\*|\\!)(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n-                action: { indentAction, appendText: \" * \" },\n-            },\n-            {\n-                // Continues a multi-line comment\n-                // e.g.  * ...|\n-                beforeText: /^(\\ \\ )*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n-                action: { indentAction, appendText: \"* \" },\n-            },\n-            {\n-                // Dedents after closing a multi-line comment\n-                // e.g.  */|\n-                beforeText: /^(\\ \\ )*\\ \\*\\/\\s*$/,\n-                action: { indentAction, removeText: 1 },\n-            },\n-        ],\n-    });\n-}"}]}