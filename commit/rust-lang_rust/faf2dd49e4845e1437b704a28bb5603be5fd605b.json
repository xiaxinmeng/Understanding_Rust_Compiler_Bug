{"sha": "faf2dd49e4845e1437b704a28bb5603be5fd605b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjJkZDQ5ZTQ4NDVlMTQzN2I3MDRhMjhiYjU2MDNiZTVmZDYwNWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T18:46:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T19:15:56Z"}, "message": "Fix code_model::Type::walk not walking all types", "tree": {"sha": "f3183d296fada9a5847687f5bbdf0c336ed65504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3183d296fada9a5847687f5bbdf0c336ed65504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf2dd49e4845e1437b704a28bb5603be5fd605b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf2dd49e4845e1437b704a28bb5603be5fd605b", "html_url": "https://github.com/rust-lang/rust/commit/faf2dd49e4845e1437b704a28bb5603be5fd605b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf2dd49e4845e1437b704a28bb5603be5fd605b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f5491a1a312393429a44028e7496fe0a12f8c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f5491a1a312393429a44028e7496fe0a12f8c2", "html_url": "https://github.com/rust-lang/rust/commit/a3f5491a1a312393429a44028e7496fe0a12f8c2"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "cdb54eca2af3407e7acba3041450c22522944e17", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/faf2dd49e4845e1437b704a28bb5603be5fd605b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf2dd49e4845e1437b704a28bb5603be5fd605b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=faf2dd49e4845e1437b704a28bb5603be5fd605b", "patch": "@@ -1924,21 +1924,18 @@ impl Type {\n         fn walk_type(db: &dyn HirDatabase, type_: &Type, cb: &mut impl FnMut(Type)) {\n             let ty = type_.ty.value.strip_references();\n             match ty {\n-                Ty::Adt(_, parameters) => {\n+                Ty::Adt(..) => {\n                     cb(type_.derived(ty.clone()));\n-                    walk_substs(db, type_, parameters, cb);\n                 }\n-                Ty::AssociatedType(_, parameters) => {\n+                Ty::AssociatedType(..) => {\n                     if let Some(_) = ty.associated_type_parent_trait(db) {\n                         cb(type_.derived(ty.clone()));\n                     }\n-                    walk_substs(db, type_, parameters, cb);\n                 }\n-                Ty::OpaqueType(_, parameters) => {\n+                Ty::OpaqueType(..) => {\n                     if let Some(bounds) = ty.impl_trait_bounds(db) {\n                         walk_bounds(db, &type_.derived(ty.clone()), &bounds, cb);\n                     }\n-                    walk_substs(db, type_, parameters, cb);\n                 }\n                 Ty::Opaque(opaque_ty) => {\n                     if let Some(bounds) = ty.impl_trait_bounds(db) {\n@@ -1956,7 +1953,10 @@ impl Type {\n                     walk_bounds(db, &type_.derived(ty.clone()), bounds.as_ref(), cb);\n                 }\n \n-                _ => (),\n+                _ => {}\n+            }\n+            if let Some(substs) = ty.substs() {\n+                walk_substs(db, type_, &substs, cb);\n             }\n         }\n "}, {"sha": "cd9dcf6c0a553af36d8b4780bbee6ce17994c21f", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/faf2dd49e4845e1437b704a28bb5603be5fd605b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf2dd49e4845e1437b704a28bb5603be5fd605b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=faf2dd49e4845e1437b704a28bb5603be5fd605b", "patch": "@@ -341,11 +341,12 @@ impl HirDisplay for Ty {\n                     write!(f, \")\")?;\n                 }\n             }\n-            &Ty::FnPtr { is_varargs, ref substs, .. } => {\n-                let sig = FnSig::from_fn_ptr_substs(&substs, is_varargs);\n+            Ty::FnPtr { is_varargs, substs, .. } => {\n+                let sig = FnSig::from_fn_ptr_substs(&substs, *is_varargs);\n                 sig.hir_fmt(f)?;\n             }\n-            &Ty::FnDef(def, ref parameters) => {\n+            Ty::FnDef(def, parameters) => {\n+                let def = *def;\n                 let sig = f.db.callable_item_signature(def).subst(parameters);\n                 match def {\n                     CallableDefId::FunctionId(ff) => {\n@@ -383,10 +384,10 @@ impl HirDisplay for Ty {\n                     write!(f, \" -> {}\", ret_display)?;\n                 }\n             }\n-            &Ty::Adt(def_id, ref parameters) => {\n+            Ty::Adt(def_id, parameters) => {\n                 match f.display_target {\n                     DisplayTarget::Diagnostics | DisplayTarget::Test => {\n-                        let name = match def_id {\n+                        let name = match *def_id {\n                             AdtId::StructId(it) => f.db.struct_data(it).name.clone(),\n                             AdtId::UnionId(it) => f.db.union_data(it).name.clone(),\n                             AdtId::EnumId(it) => f.db.enum_data(it).name.clone(),\n@@ -396,7 +397,7 @@ impl HirDisplay for Ty {\n                     DisplayTarget::SourceCode { module_id } => {\n                         if let Some(path) = find_path::find_path(\n                             f.db.upcast(),\n-                            ItemInNs::Types(def_id.into()),\n+                            ItemInNs::Types((*def_id).into()),\n                             module_id,\n                         ) {\n                             write!(f, \"{}\", path)?;\n@@ -447,13 +448,13 @@ impl HirDisplay for Ty {\n                     }\n                 }\n             }\n-            &Ty::AssociatedType(type_alias, ref parameters) => {\n+            Ty::AssociatedType(type_alias, parameters) => {\n                 let trait_ = match type_alias.lookup(f.db.upcast()).container {\n                     AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_ = f.db.trait_data(trait_);\n-                let type_alias_data = f.db.type_alias_data(type_alias);\n+                let type_alias_data = f.db.type_alias_data(*type_alias);\n \n                 // Use placeholder associated types when the target is test (https://rust-lang.github.io/chalk/book/clauses/type_equality.html#placeholder-associated-types)\n                 if f.display_target.is_test() {\n@@ -465,23 +466,23 @@ impl HirDisplay for Ty {\n                     }\n                 } else {\n                     let projection_ty =\n-                        ProjectionTy { associated_ty: type_alias, parameters: parameters.clone() };\n+                        ProjectionTy { associated_ty: *type_alias, parameters: parameters.clone() };\n \n                     projection_ty.hir_fmt(f)?;\n                 }\n             }\n-            &Ty::ForeignType(type_alias, ref parameters) => {\n-                let type_alias = f.db.type_alias_data(type_alias);\n+            Ty::ForeignType(type_alias, parameters) => {\n+                let type_alias = f.db.type_alias_data(*type_alias);\n                 write!(f, \"{}\", type_alias.name)?;\n                 if parameters.len() > 0 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&*parameters.0, \", \")?;\n                     write!(f, \">\")?;\n                 }\n             }\n-            &Ty::OpaqueType(opaque_ty_id, ref parameters) => {\n+            Ty::OpaqueType(opaque_ty_id, parameters) => {\n                 match opaque_ty_id {\n-                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                    &OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)"}, {"sha": "117d69f01f36e40587ee7711017bab8f9c8e5a07", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/faf2dd49e4845e1437b704a28bb5603be5fd605b/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf2dd49e4845e1437b704a28bb5603be5fd605b/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=faf2dd49e4845e1437b704a28bb5603be5fd605b", "patch": "@@ -726,11 +726,11 @@ impl Ty {\n \n     pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n         match self {\n-            &Ty::FnPtr { is_varargs, substs: ref parameters, .. } => {\n-                Some(FnSig::from_fn_ptr_substs(&parameters, is_varargs))\n+            Ty::FnPtr { is_varargs, substs: parameters, .. } => {\n+                Some(FnSig::from_fn_ptr_substs(&parameters, *is_varargs))\n             }\n-            &Ty::FnDef(def, ref parameters) => {\n-                let sig = db.callable_item_signature(def);\n+            Ty::FnDef(def, parameters) => {\n+                let sig = db.callable_item_signature(*def);\n                 Some(sig.subst(&parameters))\n             }\n             Ty::Closure { substs: parameters, .. } => {\n@@ -783,7 +783,6 @@ impl Ty {\n             | Ty::AssociatedType(_, substs)\n             | Ty::ForeignType(_, substs)\n             | Ty::Closure { substs, .. } => Some(substs),\n-\n             _ => None,\n         }\n     }\n@@ -802,7 +801,6 @@ impl Ty {\n             | Ty::AssociatedType(_, substs)\n             | Ty::ForeignType(_, substs)\n             | Ty::Closure { substs, .. } => Some(substs),\n-\n             _ => None,\n         }\n     }"}]}