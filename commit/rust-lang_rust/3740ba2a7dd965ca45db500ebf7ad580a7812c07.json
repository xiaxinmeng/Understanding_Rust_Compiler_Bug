{"sha": "3740ba2a7dd965ca45db500ebf7ad580a7812c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDBiYTJhN2RkOTY1Y2E0NWRiNTAwZWJmN2FkNTgwYTc4MTJjMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T09:13:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T09:13:59Z"}, "message": "Auto merge of #84863 - ABouttefeux:libtest, r=m-ou-se\n\nShow test type during prints\n\nTest output can sometimes be confusing. For example doctest with the no_run argument are displayed the same way than test that are run.\n\nDuring #83857 I got the feedback that test output can be confusing.\n\nFor the moment test output is\n```\ntest $DIR/test-type.rs - f (line 12) ... ignored\ntest $DIR/test-type.rs - f (line 15) ... ok\ntest $DIR/test-type.rs - f (line 21) ... ok\ntest $DIR/test-type.rs - f (line 6) ... ok\n```\n\nI propose to change output by indicating the test type as\n```\ntest $DIR/test-type.rs - f (line 12) ... ignored\ntest $DIR/test-type.rs - f (line 15) - compile ... ok\ntest $DIR/test-type.rs - f (line 21) - compile fail ... ok\ntest $DIR/test-type.rs - f (line 6) ... ok\n```\nby indicating the test type after the test name (and in the case of doctest after the function name and line) and before the \"...\".\n\n------------\n\nNote: this is a proof of concept, the implementation is probably not optimal as the properties added in `TestDesc` are only use in the display and does not represent actual change of behavior, maybe `TestType::DocTest` could have fields", "tree": {"sha": "03e3f6532aa38d33f9ce21646c4316593f213a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e3f6532aa38d33f9ce21646c4316593f213a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3740ba2a7dd965ca45db500ebf7ad580a7812c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3740ba2a7dd965ca45db500ebf7ad580a7812c07", "html_url": "https://github.com/rust-lang/rust/commit/3740ba2a7dd965ca45db500ebf7ad580a7812c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3740ba2a7dd965ca45db500ebf7ad580a7812c07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a576175cc9a0aecb85d0764a4f66ee29e26e155", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a576175cc9a0aecb85d0764a4f66ee29e26e155", "html_url": "https://github.com/rust-lang/rust/commit/9a576175cc9a0aecb85d0764a4f66ee29e26e155"}, {"sha": "6de13c3ffc969ceac87f2a8466c5cd850288721c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de13c3ffc969ceac87f2a8466c5cd850288721c", "html_url": "https://github.com/rust-lang/rust/commit/6de13c3ffc969ceac87f2a8466c5cd850288721c"}], "stats": {"total": 237, "additions": 219, "deletions": 18}, "files": [{"sha": "99544ddb66e66f4445d7fec260b46aa435055017", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -254,6 +254,10 @@ pub fn expand_test_or_bench(\n                                         \"allow_fail\",\n                                         cx.expr_bool(sp, should_fail(&cx.sess, &item)),\n                                     ),\n+                                    // compile_fail: true | false\n+                                    field(\"compile_fail\", cx.expr_bool(sp, false)),\n+                                    // no_run: true | false\n+                                    field(\"no_run\", cx.expr_bool(sp, false)),\n                                     // should_panic: ...\n                                     field(\n                                         \"should_panic\","}, {"sha": "e17fc08a9ae993b0a65eb150bf6d43308d145500", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -169,7 +169,11 @@ impl<T: Write> PrettyFormatter<T> {\n \n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n-        self.write_plain(&format!(\"test {} ... \", name))?;\n+        if let Some(test_mode) = desc.test_mode() {\n+            self.write_plain(&format!(\"test {} - {} ... \", name, test_mode))?;\n+        } else {\n+            self.write_plain(&format!(\"test {} ... \", name))?;\n+        }\n \n         Ok(())\n     }"}, {"sha": "a2c223c494c293dca5c9ef13bb82269a47d1dded", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -158,7 +158,11 @@ impl<T: Write> TerseFormatter<T> {\n \n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n-        self.write_plain(&format!(\"test {} ... \", name))?;\n+        if let Some(test_mode) = desc.test_mode() {\n+            self.write_plain(&format!(\"test {} - {} ... \", name, test_mode))?;\n+        } else {\n+            self.write_plain(&format!(\"test {} ... \", name))?;\n+        }\n \n         Ok(())\n     }"}, {"sha": "5a4a540b04eb04c92eb2a0b4b8c092194ac65770", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -61,6 +61,10 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n+                #[cfg(not(bootstrap))]\n+                compile_fail: false,\n+                #[cfg(not(bootstrap))]\n+                no_run: false,\n                 test_type: TestType::Unknown,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n@@ -71,6 +75,10 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n+                #[cfg(not(bootstrap))]\n+                compile_fail: false,\n+                #[cfg(not(bootstrap))]\n+                no_run: false,\n                 test_type: TestType::Unknown,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n@@ -89,6 +97,10 @@ pub fn do_not_run_ignored_tests() {\n             ignore: true,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -108,6 +120,10 @@ pub fn ignored_tests_result_in_ignored() {\n             ignore: true,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -131,6 +147,10 @@ fn test_should_panic() {\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -154,6 +174,10 @@ fn test_should_panic_good_message() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -182,6 +206,10 @@ fn test_should_panic_bad_message() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -214,6 +242,10 @@ fn test_should_panic_non_string_message_type() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -238,6 +270,10 @@ fn test_should_panic_but_succeeds() {\n                 ignore: false,\n                 should_panic,\n                 allow_fail: false,\n+                #[cfg(not(bootstrap))]\n+                compile_fail: false,\n+                #[cfg(not(bootstrap))]\n+                no_run: false,\n                 test_type: TestType::Unknown,\n             },\n             testfn: DynTestFn(Box::new(f)),\n@@ -270,6 +306,10 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             ignore: false,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -303,6 +343,10 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             ignore: false,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type,\n         },\n         testfn: DynTestFn(Box::new(f)),\n@@ -340,6 +384,10 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n+        compile_fail: false,\n+        #[cfg(not(bootstrap))]\n+        no_run: false,\n         test_type,\n     }\n }\n@@ -451,6 +499,10 @@ pub fn exclude_should_panic_option() {\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n+            compile_fail: false,\n+            #[cfg(not(bootstrap))]\n+            no_run: false,\n             test_type: TestType::Unknown,\n         },\n         testfn: DynTestFn(Box::new(move || {})),\n@@ -473,6 +525,10 @@ pub fn exact_filter_match() {\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n+                    #[cfg(not(bootstrap))]\n+                    compile_fail: false,\n+                    #[cfg(not(bootstrap))]\n+                    no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n                 testfn: DynTestFn(Box::new(move || {})),\n@@ -565,6 +621,10 @@ pub fn sort_tests() {\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n+                    #[cfg(not(bootstrap))]\n+                    compile_fail: false,\n+                    #[cfg(not(bootstrap))]\n+                    no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n                 testfn: DynTestFn(Box::new(testfn)),\n@@ -642,6 +702,10 @@ pub fn test_bench_no_iter() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n+        compile_fail: false,\n+        #[cfg(not(bootstrap))]\n+        no_run: false,\n         test_type: TestType::Unknown,\n     };\n \n@@ -662,6 +726,10 @@ pub fn test_bench_iter() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n+        compile_fail: false,\n+        #[cfg(not(bootstrap))]\n+        no_run: false,\n         test_type: TestType::Unknown,\n     };\n \n@@ -676,6 +744,10 @@ fn should_sort_failures_before_printing_them() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n+        compile_fail: false,\n+        #[cfg(not(bootstrap))]\n+        no_run: false,\n         test_type: TestType::Unknown,\n     };\n \n@@ -684,6 +756,10 @@ fn should_sort_failures_before_printing_them() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n+        compile_fail: false,\n+        #[cfg(not(bootstrap))]\n+        no_run: false,\n         test_type: TestType::Unknown,\n     };\n "}, {"sha": "63907c71ea7cc618b9d08602d4a51c41f32d6b66", "filename": "library/test/src/types.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -124,6 +124,10 @@ pub struct TestDesc {\n     pub ignore: bool,\n     pub should_panic: options::ShouldPanic,\n     pub allow_fail: bool,\n+    #[cfg(not(bootstrap))]\n+    pub compile_fail: bool,\n+    #[cfg(not(bootstrap))]\n+    pub no_run: bool,\n     pub test_type: TestType,\n }\n \n@@ -140,6 +144,36 @@ impl TestDesc {\n             }\n         }\n     }\n+\n+    /// Returns None for ignored test or that that are just run, otherwise give a description of the type of test.\n+    /// Descriptions include \"should panic\", \"compile fail\" and \"compile\".\n+    #[cfg(not(bootstrap))]\n+    pub fn test_mode(&self) -> Option<&'static str> {\n+        if self.ignore {\n+            return None;\n+        }\n+        match self.should_panic {\n+            options::ShouldPanic::Yes | options::ShouldPanic::YesWithMessage(_) => {\n+                return Some(\"should panic\");\n+            }\n+            options::ShouldPanic::No => {}\n+        }\n+        if self.allow_fail {\n+            return Some(\"allow fail\");\n+        }\n+        if self.compile_fail {\n+            return Some(\"compile fail\");\n+        }\n+        if self.no_run {\n+            return Some(\"compile\");\n+        }\n+        None\n+    }\n+\n+    #[cfg(bootstrap)]\n+    pub fn test_mode(&self) -> Option<&'static str> {\n+        None\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "88e2f6048e9c700d3d66088bd7b183540b63d98d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -880,6 +880,7 @@ impl Tester for Collector {\n         let target = self.options.target.clone();\n         let target_str = target.to_string();\n         let unused_externs = self.unused_extern_reports.clone();\n+        let no_run = config.no_run || options.no_run;\n         if !config.compile_fail {\n             self.compiling_test_count.fetch_add(1, Ordering::SeqCst);\n         }\n@@ -941,13 +942,16 @@ impl Tester for Collector {\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n                 allow_fail: config.allow_fail,\n+                #[cfg(not(bootstrap))]\n+                compile_fail: config.compile_fail,\n+                #[cfg(not(bootstrap))]\n+                no_run,\n                 test_type: testing::TestType::DocTest,\n             },\n             testfn: testing::DynTestFn(box move || {\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };\n-                let no_run = config.no_run || options.no_run;\n                 let res = run_test(\n                     &test,\n                     &cratename,"}, {"sha": "af3a90a74100f9bde4126829ae5524403552c864", "filename": "src/test/rustdoc-ui/failed-doctest-compile-fail.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/failed-doctest-compile-fail.rs - Foo (line 9) ... FAILED\n+test $DIR/failed-doctest-compile-fail.rs - Foo (line 9) - compile fail ... FAILED\n \n failures:\n "}, {"sha": "bacbb47b5f9ff4ad28b94258e85b953376413889", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/failed-doctest-missing-codes.rs - Foo (line 9) ... FAILED\n+test $DIR/failed-doctest-missing-codes.rs - Foo (line 9) - compile fail ... FAILED\n \n failures:\n "}, {"sha": "d2b1cd1d550cf2a4201be07e5c7aea366073a1ee", "filename": "src/test/rustdoc-ui/issue-80992.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Fissue-80992.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Fissue-80992.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-80992.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/issue-80992.rs - test (line 7) ... ok\n+test $DIR/issue-80992.rs - test (line 7) - compile fail ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "02f28aaf60da054a6040cb29927dd9b3ea3af28f", "filename": "src/test/rustdoc-ui/no-run-flag.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Fno-run-flag.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Fno-run-flag.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fno-run-flag.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -1,12 +1,12 @@\n \n running 7 tests\n-test $DIR/no-run-flag.rs - f (line 11) ... ok\n+test $DIR/no-run-flag.rs - f (line 11) - compile ... ok\n test $DIR/no-run-flag.rs - f (line 14) ... ignored\n-test $DIR/no-run-flag.rs - f (line 17) ... ok\n-test $DIR/no-run-flag.rs - f (line 23) ... ok\n-test $DIR/no-run-flag.rs - f (line 28) ... ok\n-test $DIR/no-run-flag.rs - f (line 32) ... ok\n-test $DIR/no-run-flag.rs - f (line 8) ... ok\n+test $DIR/no-run-flag.rs - f (line 17) - compile ... ok\n+test $DIR/no-run-flag.rs - f (line 23) - compile fail ... ok\n+test $DIR/no-run-flag.rs - f (line 28) - compile ... ok\n+test $DIR/no-run-flag.rs - f (line 32) - compile ... ok\n+test $DIR/no-run-flag.rs - f (line 8) - compile ... ok\n \n test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "882da5c2503fed8ef748755ac25e509969405a42", "filename": "src/test/rustdoc-ui/test-type.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ftest-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ftest-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-type.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: --test --test-args=--test-threads=1\n+// check-pass\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+\n+/// ```\n+/// let a = true;\n+/// ```\n+/// ```should_panic\n+/// panic!()\n+/// ```\n+/// ```ignore (incomplete-code)\n+/// fn foo() {\n+/// ```\n+/// ```no_run\n+/// loop {\n+///     println!(\"Hello, world\");\n+/// }\n+/// ```\n+/// fails to compile\n+/// ```compile_fail\n+/// let x = 5;\n+/// x += 2; // shouldn't compile!\n+/// ```\n+\n+pub fn f() {}"}, {"sha": "a66fd240d34c49c3af71529ca2c218c2d5fd91c2", "filename": "src/test/rustdoc-ui/test-type.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ftest-type.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Frustdoc-ui%2Ftest-type.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-type.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -0,0 +1,10 @@\n+\n+running 5 tests\n+test $DIR/test-type.rs - f (line 12) ... ignored\n+test $DIR/test-type.rs - f (line 15) - compile ... ok\n+test $DIR/test-type.rs - f (line 21) - compile fail ... ok\n+test $DIR/test-type.rs - f (line 6) ... ok\n+test $DIR/test-type.rs - f (line 9) ... ok\n+\n+test result: ok. 4 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "3f0fa81373f10ffe1b40e3e220bb1020e4f231ff", "filename": "src/test/ui/test-attrs/test-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-type.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: --test\n+// run-flags: --test-threads=1\n+// check-run-results\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// ignore-emscripten no threads support\n+// run-pass\n+\n+\n+#[test]\n+fn test_ok() {\n+    let _a = true;\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_panic() {\n+    panic!();\n+}\n+\n+#[test]\n+#[ignore]\n+fn test_no_run() {\n+    loop{\n+        println!(\"Hello, world\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "be2fd8ae68c36420287241ba1820c5c0ef8f0895", "filename": "src/test/ui/test-attrs/test-type.run.stdout", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-type.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-type.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-type.run.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -0,0 +1,8 @@\n+\n+running 3 tests\n+test test_no_run ... ignored\n+test test_ok ... ok\n+test test_panic - should panic ... ok\n+\n+test result: ok. 2 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "8a91732a754ac56a4b837fe09d1599155ce3d34f", "filename": "src/test/ui/test-panic-abort-nocapture.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -2,7 +2,7 @@\n running 4 tests\n test it_fails ... about to fail\n FAILED\n-test it_panics ... about to panic\n+test it_panics - should panic ... about to panic\n ok\n test it_works ... about to succeed\n ok"}, {"sha": "f608a8cdc55692fe6904f4471f16d9eb67633bd9", "filename": "src/test/ui/test-panic-abort.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -2,7 +2,7 @@\n running 5 tests\n test it_exits ... FAILED\n test it_fails ... FAILED\n-test it_panics ... ok\n+test it_panics - should panic ... ok\n test it_works ... ok\n test no_residual_environment ... ok\n "}, {"sha": "08ee8fc984ddf3f3b1fa45abd761a21db8e64ac3", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -664,6 +664,10 @@ fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test\n                     ignore,\n                     should_panic,\n                     allow_fail: false,\n+                    #[cfg(not(bootstrap))]\n+                    compile_fail: false,\n+                    #[cfg(not(bootstrap))]\n+                    no_run: false,\n                     test_type: test::TestType::Unknown,\n                 },\n                 testfn: make_test_closure(config, testpaths, revision),"}, {"sha": "931c822ffe265b63f68eb3a08d4a60642aaf7b1e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3740ba2a7dd965ca45db500ebf7ad580a7812c07/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3740ba2a7dd965ca45db500ebf7ad580a7812c07", "patch": "@@ -2676,12 +2676,11 @@ impl<'test> TestCx<'test> {\n \n         let mut tested = 0;\n         for _ in res.stdout.split('\\n').filter(|s| s.starts_with(\"test \")).inspect(|s| {\n-            let tmp: Vec<&str> = s.split(\" - \").collect();\n-            if tmp.len() == 2 {\n-                let path = tmp[0].rsplit(\"test \").next().unwrap();\n+            if let Some((left, right)) = s.split_once(\" - \") {\n+                let path = left.rsplit(\"test \").next().unwrap();\n                 if let Some(ref mut v) = files.get_mut(&path.replace('\\\\', \"/\")) {\n                     tested += 1;\n-                    let mut iter = tmp[1].split(\"(line \");\n+                    let mut iter = right.split(\"(line \");\n                     iter.next();\n                     let line = iter\n                         .next()"}]}