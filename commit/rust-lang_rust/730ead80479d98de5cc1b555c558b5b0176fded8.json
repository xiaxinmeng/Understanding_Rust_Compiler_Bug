{"sha": "730ead80479d98de5cc1b555c558b5b0176fded8", "node_id": "C_kwDOAAsO6NoAKDczMGVhZDgwNDc5ZDk4ZGU1Y2MxYjU1NWM1NThiNWIwMTc2ZmRlZDg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-24T18:53:53Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-25T23:03:15Z"}, "message": "Only generate closure def id for async fns with body", "tree": {"sha": "2d924b9b48414a7be2fca06b1ef3becf81551b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d924b9b48414a7be2fca06b1ef3becf81551b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730ead80479d98de5cc1b555c558b5b0176fded8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730ead80479d98de5cc1b555c558b5b0176fded8", "html_url": "https://github.com/rust-lang/rust/commit/730ead80479d98de5cc1b555c558b5b0176fded8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730ead80479d98de5cc1b555c558b5b0176fded8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5193a9fcc73dc09e41a90c5a2c97fc9acc16032", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5193a9fcc73dc09e41a90c5a2c97fc9acc16032", "html_url": "https://github.com/rust-lang/rust/commit/f5193a9fcc73dc09e41a90c5a2c97fc9acc16032"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "7e83f2a72210765b5559e03805e29881ff685c41", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/730ead80479d98de5cc1b555c558b5b0176fded8/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730ead80479d98de5cc1b555c558b5b0176fded8/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=730ead80479d98de5cc1b555c558b5b0176fded8", "patch": "@@ -1,6 +1,5 @@\n use crate::{ImplTraitContext, Resolver};\n use rustc_ast::visit::{self, FnKind};\n-use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n@@ -148,8 +147,13 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n                 self.with_parent(return_impl_trait_id, |this| {\n                     this.visit_fn_ret_ty(&sig.decl.output)\n                 });\n-                let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n-                self.with_parent(closure_def, |this| walk_list!(this, visit_block, body));\n+                // If this async fn has no body (i.e. it's an async fn signature in a trait)\n+                // then the closure_def will never be used, and we should avoid generating a\n+                // def-id for it.\n+                if let Some(body) = body {\n+                    let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n+                    self.with_parent(closure_def, |this| this.visit_block(body));\n+                }\n                 return;\n             }\n         }"}, {"sha": "9a35f6515cb1a5042d347347dca5a8cc8508fff3", "filename": "src/test/ui/async-await/in-trait/issue-102219.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/730ead80479d98de5cc1b555c558b5b0176fded8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730ead80479d98de5cc1b555c558b5b0176fded8/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs?ref=730ead80479d98de5cc1b555c558b5b0176fded8", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags:--crate-type=lib\n+// edition:2021\n+// check-pass\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait T {\n+    async fn foo();\n+}"}]}