{"sha": "bab2b37fd0d1491397736d9adc2317ffc06624ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYjJiMzdmZDBkMTQ5MTM5NzczNmQ5YWRjMjMxN2ZmYzA2NjI0ZWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T18:57:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T18:57:01Z"}, "message": "rustc: Use consistent error handling in main", "tree": {"sha": "f36a1af109346c1a7f108a0e95ea1514261e673c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36a1af109346c1a7f108a0e95ea1514261e673c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bab2b37fd0d1491397736d9adc2317ffc06624ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bab2b37fd0d1491397736d9adc2317ffc06624ef", "html_url": "https://github.com/rust-lang/rust/commit/bab2b37fd0d1491397736d9adc2317ffc06624ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bab2b37fd0d1491397736d9adc2317ffc06624ef/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3", "html_url": "https://github.com/rust-lang/rust/commit/8da8a4a018bad826940fa3d5617e54f4b9ec8fb3"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "34b172ed4fc9a8d5126f108220d33dbd0ccea29e", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bab2b37fd0d1491397736d9adc2317ffc06624ef/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab2b37fd0d1491397736d9adc2317ffc06624ef/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=bab2b37fd0d1491397736d9adc2317ffc06624ef", "patch": "@@ -279,7 +279,7 @@ fn get_os(triple: str) -> session::os {\n             session::os_macos\n         } else if str::find(triple, \"linux\") >= 0 {\n             session::os_linux\n-        } else { log_err \"Unknown operating system!\"; fail };\n+        } else { early_error(\"Unknown operating system!\") };\n }\n \n fn get_arch(triple: str) -> session::arch {\n@@ -293,7 +293,7 @@ fn get_arch(triple: str) -> session::arch {\n         } else if str::find(triple, \"arm\") >= 0 ||\n                       str::find(triple, \"xscale\") >= 0 {\n             session::arch_arm\n-        } else { log_err \"Unknown architecture! \" + triple; fail };\n+        } else { early_error(\"Unknown architecture! \" + triple) };\n }\n \n fn build_target_config(sopts: @session::options) -> @session::config {\n@@ -348,8 +348,7 @@ fn build_session_options(match: getopts::match)\n     let opt_level: uint =\n         if opt_present(match, \"O\") {\n             if opt_present(match, \"OptLevel\") {\n-                log_err \"error: -O and --OptLevel both provided\";\n-                fail;\n+                early_error(\"-O and --OptLevel both provided\");\n             }\n             2u\n         } else if opt_present(match, \"OptLevel\") {\n@@ -359,9 +358,8 @@ fn build_session_options(match: getopts::match)\n               \"2\" { 2u }\n               \"3\" { 3u }\n               _ {\n-                log_err \"error: optimization level needs \" +\n-                            \"to be between 0-3\";\n-                fail\n+                early_error(\"optimization level needs \" +\n+                            \"to be between 0-3\")\n               }\n             }\n         } else { 0u };\n@@ -485,14 +483,18 @@ fn build_output_filenames(ifile: str, ofile: option::t<str>,\n     ret @{out_filename: saved_out_filename, obj_filename: obj_filename};\n }\n \n+fn early_error(msg: str) -> ! {\n+    codemap::print_diagnostic(\"\", codemap::error, msg);\n+    fail;\n+}\n+\n fn main(args: [str]) {\n     let binary = vec::shift(args);\n     let match =\n         alt getopts::getopts(args, opts()) {\n           getopts::success(m) { m }\n           getopts::failure(f) {\n-            log_err #fmt[\"error: %s\", getopts::fail_str(f)];\n-            fail\n+            early_error(getopts::fail_str(f))\n           }\n         };\n     if opt_present(match, \"h\") || opt_present(match, \"help\") {\n@@ -503,16 +505,15 @@ fn main(args: [str]) {\n         version(binary);\n         ret;\n     }\n+    let ifile = alt vec::len(match.free) {\n+      0u { early_error(\"No input filename given.\") }\n+      1u { match.free[0] }\n+      _ { early_error(\"Multiple input filenames provided.\") }\n+    };\n+\n     let sopts = build_session_options(match);\n     let sess = build_session(sopts);\n-    let n_inputs = vec::len::<str>(match.free);\n-    if n_inputs == 0u {\n-        sess.fatal(\"No input filename given.\");\n-    } else if n_inputs > 1u {\n-        sess.fatal(\"Multiple input filenames provided.\");\n-    }\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n-    let ifile = match.free[0];\n     let outputs = build_output_filenames(ifile, ofile, sopts);\n     let cfg = build_configuration(sess, binary, ifile);\n     let pretty ="}]}