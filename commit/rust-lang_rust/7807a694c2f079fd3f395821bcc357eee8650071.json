{"sha": "7807a694c2f079fd3f395821bcc357eee8650071", "node_id": "C_kwDOAAsO6NoAKDc4MDdhNjk0YzJmMDc5ZmQzZjM5NTgyMWJjYzM1N2VlZTg2NTAwNzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-14T02:24:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-14T02:24:52Z"}, "message": "Auto merge of #89815 - GuillaumeGomez:associated-consts-sidebar, r=notriddle\n\nAssociated consts sidebar\n\nFixes #89354.\n\nA screenshot with `f32`:\n\n![Screenshot from 2021-10-12 15-07-57](https://user-images.githubusercontent.com/3050060/136962078-5faf7b87-7ea5-4d7a-99a4-b2afd77b78e2.png)", "tree": {"sha": "1bab403de724b69aeeb0f78c253f074b46c46c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bab403de724b69aeeb0f78c253f074b46c46c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7807a694c2f079fd3f395821bcc357eee8650071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7807a694c2f079fd3f395821bcc357eee8650071", "html_url": "https://github.com/rust-lang/rust/commit/7807a694c2f079fd3f395821bcc357eee8650071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7807a694c2f079fd3f395821bcc357eee8650071/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c852bc15a058022c9d4175e8ed60da628960800", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c852bc15a058022c9d4175e8ed60da628960800", "html_url": "https://github.com/rust-lang/rust/commit/8c852bc15a058022c9d4175e8ed60da628960800"}, {"sha": "38f6c07b112ce2c17cc60bc497d84d0268da3580", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f6c07b112ce2c17cc60bc497d84d0268da3580", "html_url": "https://github.com/rust-lang/rust/commit/38f6c07b112ce2c17cc60bc497d84d0268da3580"}], "stats": {"total": 126, "additions": 110, "deletions": 16}, "files": [{"sha": "69c5c2c4abc2a4bcfd085fa68dd07c15c3a9419f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 79, "deletions": 16, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7807a694c2f079fd3f395821bcc357eee8650071/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7807a694c2f079fd3f395821bcc357eee8650071/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7807a694c2f079fd3f395821bcc357eee8650071", "patch": "@@ -1811,23 +1811,53 @@ fn get_next_url(used_links: &mut FxHashSet<String>, url: String) -> String {\n     format!(\"{}-{}\", url, add)\n }\n \n+struct SidebarLink {\n+    name: Symbol,\n+    url: String,\n+}\n+\n+impl fmt::Display for SidebarLink {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"<a href=\\\"#{}\\\">{}</a>\", self.url, self.name)\n+    }\n+}\n+\n+impl PartialEq for SidebarLink {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.url == other.url\n+    }\n+}\n+\n+impl Eq for SidebarLink {}\n+\n+impl PartialOrd for SidebarLink {\n+    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for SidebarLink {\n+    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\n+        self.url.cmp(&other.url)\n+    }\n+}\n+\n fn get_methods(\n     i: &clean::Impl,\n     for_deref: bool,\n     used_links: &mut FxHashSet<String>,\n     deref_mut: bool,\n     tcx: TyCtxt<'_>,\n-) -> Vec<String> {\n+) -> Vec<SidebarLink> {\n     i.items\n         .iter()\n         .filter_map(|item| match item.name {\n-            Some(ref name) if !name.is_empty() && item.is_method() => {\n+            Some(name) if !name.is_empty() && item.is_method() => {\n                 if !for_deref || should_render_item(item, deref_mut, tcx) {\n-                    Some(format!(\n-                        \"<a href=\\\"#{}\\\">{}</a>\",\n-                        get_next_url(used_links, format!(\"method.{}\", name)),\n-                        name\n-                    ))\n+                    Some(SidebarLink {\n+                        name,\n+                        url: get_next_url(used_links, format!(\"method.{}\", name)),\n+                    })\n                 } else {\n                     None\n                 }\n@@ -1837,6 +1867,22 @@ fn get_methods(\n         .collect::<Vec<_>>()\n }\n \n+fn get_associated_constants(\n+    i: &clean::Impl,\n+    used_links: &mut FxHashSet<String>,\n+) -> Vec<SidebarLink> {\n+    i.items\n+        .iter()\n+        .filter_map(|item| match item.name {\n+            Some(name) if !name.is_empty() && item.is_associated_const() => Some(SidebarLink {\n+                name,\n+                url: get_next_url(used_links, format!(\"associatedconstant.{}\", name)),\n+            }),\n+            _ => None,\n+        })\n+        .collect::<Vec<_>>()\n+}\n+\n // The point is to url encode any potential character from a type with genericity.\n fn small_url_encode(s: String) -> String {\n     let mut st = String::new();\n@@ -1881,23 +1927,40 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n \n         {\n             let used_links_bor = &mut used_links;\n-            let mut ret = v\n+            let mut assoc_consts = v\n+                .iter()\n+                .flat_map(|i| get_associated_constants(i.inner_impl(), used_links_bor))\n+                .collect::<Vec<_>>();\n+            if !assoc_consts.is_empty() {\n+                // We want links' order to be reproducible so we don't use unstable sort.\n+                assoc_consts.sort();\n+\n+                out.push_str(\n+                    \"<h3 class=\\\"sidebar-title\\\">\\\n+                        <a href=\\\"#implementations\\\">Associated Constants</a>\\\n+                     </h3>\\\n+                     <div class=\\\"sidebar-links\\\">\",\n+                );\n+                for line in assoc_consts {\n+                    write!(out, \"{}\", line);\n+                }\n+                out.push_str(\"</div>\");\n+            }\n+            let mut methods = v\n                 .iter()\n                 .filter(|i| i.inner_impl().trait_.is_none())\n-                .flat_map(move |i| {\n-                    get_methods(i.inner_impl(), false, used_links_bor, false, cx.tcx())\n-                })\n+                .flat_map(|i| get_methods(i.inner_impl(), false, used_links_bor, false, cx.tcx()))\n                 .collect::<Vec<_>>();\n-            if !ret.is_empty() {\n+            if !methods.is_empty() {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n-                ret.sort();\n+                methods.sort();\n \n                 out.push_str(\n                     \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementations\\\">Methods</a></h3>\\\n                      <div class=\\\"sidebar-links\\\">\",\n                 );\n-                for line in ret {\n-                    out.push_str(&line);\n+                for line in methods {\n+                    write!(out, \"{}\", line);\n                 }\n                 out.push_str(\"</div>\");\n             }\n@@ -2032,7 +2095,7 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n                 ret.sort();\n                 out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n                 for link in ret {\n-                    out.push_str(&link);\n+                    write!(out, \"{}\", link);\n                 }\n                 out.push_str(\"</div>\");\n             }"}, {"sha": "6ae5e20632e521b212bdec85b90e29337f13cb04", "filename": "src/test/rustdoc/associated-consts.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7807a694c2f079fd3f395821bcc357eee8650071/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7807a694c2f079fd3f395821bcc357eee8650071/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassociated-consts.rs?ref=7807a694c2f079fd3f395821bcc357eee8650071", "patch": "@@ -0,0 +1,31 @@\n+#![crate_name = \"foo\"]\n+\n+pub trait Trait {\n+    const FOO: u32 = 12;\n+\n+    fn foo();\n+}\n+\n+pub struct Bar;\n+\n+// @has 'foo/struct.Bar.html'\n+// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//div[@class=\"sidebar-links\"]/a' 'FOO'\n+impl Trait for Bar {\n+    const FOO: u32 = 1;\n+\n+    fn foo() {}\n+}\n+\n+pub enum Foo {\n+    A,\n+}\n+\n+// @has 'foo/enum.Foo.html'\n+// @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n+// @has - '//div[@class=\"sidebar-elems\"]//div[@class=\"sidebar-links\"]/a' 'FOO'\n+impl Trait for Foo {\n+    const FOO: u32 = 1;\n+\n+    fn foo() {}\n+}"}]}