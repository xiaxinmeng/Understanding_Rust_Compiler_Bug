{"sha": "e36a33fac779458b65ae6b45c692a1700b08e506", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNmEzM2ZhYzc3OTQ1OGI2NWFlNmI0NWM2OTJhMTcwMGIwOGU1MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T08:10:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T08:10:56Z"}, "message": "Auto merge of #5059 - JohnTitor:rustup-0118, r=llogiq\n\nRustup to rust-lang/rust#68204\n\nchangelog: none", "tree": {"sha": "7cb03a8e34b62102aae2cc83d9f0b8162b1811d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb03a8e34b62102aae2cc83d9f0b8162b1811d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36a33fac779458b65ae6b45c692a1700b08e506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36a33fac779458b65ae6b45c692a1700b08e506", "html_url": "https://github.com/rust-lang/rust/commit/e36a33fac779458b65ae6b45c692a1700b08e506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36a33fac779458b65ae6b45c692a1700b08e506/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd05808874812ae2f02b4e0a5563766a3b671aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd05808874812ae2f02b4e0a5563766a3b671aa", "html_url": "https://github.com/rust-lang/rust/commit/6bd05808874812ae2f02b4e0a5563766a3b671aa"}, {"sha": "e72f0e61c6cc42004cbe6e38fb03d28d03ee636a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72f0e61c6cc42004cbe6e38fb03d28d03ee636a", "html_url": "https://github.com/rust-lang/rust/commit/e72f0e61c6cc42004cbe6e38fb03d28d03ee636a"}], "stats": {"total": 103, "additions": 75, "deletions": 28}, "files": [{"sha": "720ff6bac9a265b9e24356e373bde0def1a91d85", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -33,7 +33,11 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.kind {\n+        if let ItemKind::Impl {\n+            of_trait: Some(ref trait_ref),\n+            ..\n+        } = item.kind\n+        {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n \n             if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {"}, {"sha": "efb44ab6dbb91157be999fec1bd803a3de4d70d1", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -66,7 +66,11 @@ declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.kind {\n+        if let ItemKind::Impl {\n+            of_trait: Some(ref trait_ref),\n+            ..\n+        } = item.kind\n+        {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n "}, {"sha": "5db1886bb52d3b89389547f08c079b7852f8f344", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -159,15 +159,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n                     lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n                 }\n             },\n-            hir::ItemKind::Impl(_, _, _, _, ref trait_ref, ..) => {\n+            hir::ItemKind::Impl {\n+                of_trait: ref trait_ref,\n+                ..\n+            } => {\n                 self.in_trait_impl = trait_ref.is_some();\n             },\n             _ => {},\n         }\n     }\n \n     fn check_item_post(&mut self, _cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl(..) = item.kind {\n+        if let hir::ItemKind::Impl { .. } = item.kind {\n             self.in_trait_impl = false;\n         }\n     }"}, {"sha": "6d0a1f673e77e6d46ce39bd887f3d03d79616ea9", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n         let parent_node = cx.tcx.hir().find(parent_id);\n \n         if let Some(Node::Item(item)) = parent_node {\n-            if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.kind {\n+            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n                 return;\n             }\n         }"}, {"sha": "87792b9fba479363f4494e0dbabc8f47fb0144ac", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n-            if let hir::ItemKind::Impl(.., impl_items) = item.kind;\n+            if let hir::ItemKind::Impl{ items: impl_items, .. } = item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {"}, {"sha": "5a5431f47a07b64215d38cd71178fffef5e05105", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         let is_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            matches!(item.kind, hir::ItemKind::Impl(_, _, _, _, Some(_), _, _))\n+            matches!(item.kind, hir::ItemKind::Impl{ of_trait: Some(_), .. })\n         } else {\n             false\n         };"}, {"sha": "058ee7265fbcabd2ce46d39b4a08ca417588a0b7", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -49,7 +49,12 @@ impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n     fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(_, _, _, ref generics, None, _, _) = item.kind {\n+        if let ItemKind::Impl {\n+            ref generics,\n+            of_trait: None,\n+            ..\n+        } = item.kind\n+        {\n             // Remember for each inherent implementation encoutered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro"}, {"sha": "b522a74fb0e8601acd496c6d48fdb2c7261dcdc9", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -78,7 +78,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n \n         match item.kind {\n             ItemKind::Trait(_, _, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n-            ItemKind::Impl(_, _, _, _, None, _, ref impl_items) => check_impl_items(cx, item, impl_items),\n+            ItemKind::Impl {\n+                of_trait: None,\n+                items: ref impl_items,\n+                ..\n+            } => check_impl_items(cx, item, impl_items),\n             _ => (),\n         }\n     }"}, {"sha": "ed37d3411b5aef304f0cb4fd61c78b6c8837cd17", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -1335,7 +1335,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         if_chain! {\n             if let hir::ImplItemKind::Method(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n-            if let hir::ItemKind::Impl(_, _, _, _, None, _, _) = item.kind;\n+            if let hir::ItemKind::Impl{ of_trait: None, .. } = item.kind;\n \n             let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let method_sig = cx.tcx.fn_sig(method_def_id);"}, {"sha": "5ebc8a4d6479f3cb361c101af62036bbe4788b70", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::ForeignMod(..)\n             | hir::ItemKind::GlobalAsm(..)\n-            | hir::ItemKind::Impl(..)\n+            | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => return,\n         };\n "}, {"sha": "407321effb8083b22cc44e87ad283c20db785103", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::ForeignMod(..)\n-            | hir::ItemKind::Impl(..)\n+            | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => {},\n         };\n     }"}, {"sha": "8af5c3009e95e4cb89fefdfb718ad21cf3f7c7fe", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Exclude non-inherent impls\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            if matches!(item.kind, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n+            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. } |\n                 ItemKind::Trait(..))\n             {\n                 return;"}, {"sha": "303ba1e68087f75c488bf128ee3e8b34302025d5", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -93,8 +93,12 @@ pub struct NewWithoutDefault {\n impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n+    #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl(_, _, _, _, None, _, items) = item.kind {\n+        if let hir::ItemKind::Impl {\n+            of_trait: None, items, ..\n+        } = item.kind\n+        {\n             for assoc_item in items {\n                 if let hir::AssocItemKind::Method { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);"}, {"sha": "48ffc113546f422448fc3cd6feb8af411d025a84", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n             let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n             // Ensure the impl is an inherent impl.\n-            if let ItemKind::Impl(_, _, _, _, None, _, _) = item.kind {\n+            if let ItemKind::Impl { of_trait: None, .. } = item.kind {\n                 let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                 verify_ty_bound(\n                     cx,"}, {"sha": "dfd25f1c9db6b4b8764d909b1edccd361ee6fb6d", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -33,7 +33,7 @@ declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, impl_items) = item.kind;\n+            if let ItemKind::Impl{ of_trait: Some(ref trait_ref), items: impl_items, .. } = item.kind;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;"}, {"sha": "445f065aaced22c33aa7a6c9f99a4e1823507249", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n         if let ImplItemKind::Method(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n-                if let ItemKind::Impl(_, _, _, _, Some(_), _, _) = it.kind {\n+                if let ItemKind::Impl { of_trait: Some(_), .. } = it.kind {\n                     return; // ignore trait impls\n                 }\n             }"}, {"sha": "63fdd599b51e9153a05809179e031ac29fdf8d63", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -22,7 +22,12 @@ declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, items) = item.kind {\n+        if let ItemKind::Impl {\n+            of_trait: Some(ref trait_ref),\n+            items,\n+            ..\n+        } = item.kind\n+        {\n             let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {\n                 if did == visit_did {"}, {"sha": "1bacb4683c3855c1e2cccbe75144b5e2353f63d7", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n \n         // Exclude non-inherent impls\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            if matches!(item.kind, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n+            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. } |\n                 ItemKind::Trait(..))\n             {\n                 return;"}, {"sha": "52ced27c4775616613688f3e090a198b80517ca9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     ) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n-            if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.kind {\n+            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n                 return;\n             }\n         }\n@@ -2106,7 +2106,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n         }\n \n         match item.kind {\n-            ItemKind::Impl(_, _, _, ref generics, _, ref ty, ref items) => {\n+            ItemKind::Impl {\n+                ref generics,\n+                self_ty: ref ty,\n+                ref items,\n+                ..\n+            } => {\n                 let mut vis = ImplicitHasherTypeVisitor::new(cx);\n                 vis.visit_ty(ty);\n "}, {"sha": "71f7f8d0af082ce3734c98b9f4c5400ffbb04464", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -44,7 +44,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n         if item.span.from_expansion() {\n             return;\n         }\n-        if let ItemKind::Impl(_, _, _, _, None, _, impl_item_refs) = item.kind {\n+        if let ItemKind::Impl {\n+            of_trait: None,\n+            items: impl_item_refs,\n+            ..\n+        } = item.kind\n+        {\n             for impl_item_ref in impl_item_refs {\n                 if_chain! {\n                     if let ImplItemRef {"}, {"sha": "4160370dd15a604e635da7b2fb9405a7c1454fe5", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             return;\n         }\n         if_chain! {\n-            if let ItemKind::Impl(.., ref item_type, refs) = item.kind;\n+            if let ItemKind::Impl{ self_ty: ref item_type, items: refs, .. } = item.kind;\n             if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n@@ -269,7 +269,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n             | ItemKind::Enum(..)\n             | ItemKind::Struct(..)\n             | ItemKind::Union(..)\n-            | ItemKind::Impl(..)\n+            | ItemKind::Impl { .. }\n             | ItemKind::Fn(..) => {\n                 // Don't check statements that shadow `Self` or where `Self` can't be used\n             },"}, {"sha": "aa76ada7b4841e86a5b2abe2afaac844776f2fdf", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -388,10 +388,13 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         hir::ItemKind::TraitAlias(..) => {\n             println!(\"trait alias\");\n         },\n-        hir::ItemKind::Impl(_, _, _, _, Some(ref _trait_ref), _, _) => {\n+        hir::ItemKind::Impl {\n+            of_trait: Some(ref _trait_ref),\n+            ..\n+        } => {\n             println!(\"trait impl\");\n         },\n-        hir::ItemKind::Impl(_, _, _, _, None, _, _) => {\n+        hir::ItemKind::Impl { of_trait: None, .. } => {\n             println!(\"impl\");\n         },\n     }"}, {"sha": "1723f7863b302c6ffacfac30760c1aea4338a7d9", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -219,7 +219,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n         } else if is_expn_of(item.span, \"impl_lint_pass\").is_some()\n             || is_expn_of(item.span, \"declare_lint_pass\").is_some()\n         {\n-            if let hir::ItemKind::Impl(.., None, _, ref impl_item_refs) = item.kind {\n+            if let hir::ItemKind::Impl {\n+                of_trait: None,\n+                items: ref impl_item_refs,\n+                ..\n+            } = item.kind\n+            {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,\n                     cx,"}, {"sha": "9150d189f2380c721c1ced6a43ab356be60ca061", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36a33fac779458b65ae6b45c692a1700b08e506/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e36a33fac779458b65ae6b45c692a1700b08e506", "patch": "@@ -357,7 +357,7 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'_, 'tcx>, hir_id: HirId) -> O\n     if_chain! {\n         if parent_impl != hir::CRATE_HIR_ID;\n         if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n-        if let hir::ItemKind::Impl(_, _, _, _, trait_ref, _, _) = &item.kind;\n+        if let hir::ItemKind::Impl{ of_trait: trait_ref, .. } = &item.kind;\n         then { return trait_ref.as_ref(); }\n     }\n     None"}]}