{"sha": "5ec49c7924e7ef756e767bcecd4a3de1147c3545", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYzQ5Yzc5MjRlN2VmNzU2ZTc2N2JjZWNkNGEzZGUxMTQ3YzM1NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-05T23:41:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-05T23:41:53Z"}, "message": "auto merge of #14641 : darnuria/rust/add_documentation_to_std_os, r=alexcrichton\n\nJust opening a pull request for adding code examples and documentation to std::os.\r\n\r\nMore to come soon.", "tree": {"sha": "561ac2656e065244203dc405fd04e16fc955134f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/561ac2656e065244203dc405fd04e16fc955134f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ec49c7924e7ef756e767bcecd4a3de1147c3545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec49c7924e7ef756e767bcecd4a3de1147c3545", "html_url": "https://github.com/rust-lang/rust/commit/5ec49c7924e7ef756e767bcecd4a3de1147c3545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ec49c7924e7ef756e767bcecd4a3de1147c3545/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3ba002d528d1e187a835a7afde6b5f51659d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3ba002d528d1e187a835a7afde6b5f51659d68", "html_url": "https://github.com/rust-lang/rust/commit/ba3ba002d528d1e187a835a7afde6b5f51659d68"}, {"sha": "85adc09b19a437dab822fe67db908207aaa541b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/85adc09b19a437dab822fe67db908207aaa541b9", "html_url": "https://github.com/rust-lang/rust/commit/85adc09b19a437dab822fe67db908207aaa541b9"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "1f75754f4d53e5832b04c984aaf396c4e08534f4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5ec49c7924e7ef756e767bcecd4a3de1147c3545/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec49c7924e7ef756e767bcecd4a3de1147c3545/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=5ec49c7924e7ef756e767bcecd4a3de1147c3545", "patch": "@@ -66,7 +66,24 @@ pub fn close(fd: int) -> int {\n pub static TMPBUF_SZ : uint = 1000u;\n static BUF_BYTES : uint = 2048u;\n \n-/// Returns the current working directory.\n+/// Returns the current working directory as a Path.\n+///\n+/// # Failure\n+///\n+/// Fails if the current working directory value is invalid:\n+/// Possibles cases:\n+///\n+/// * Current directory does not exist.\n+/// * There are insufficient permissions to access the current directory.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// // We assume that we are in a valid directory like \"/home\".\n+/// let current_working_directory = std::os::getcwd();\n+/// println!(\"The current directory is {}\", current_working_directory.display());\n+/// // /home\n+/// ```\n #[cfg(unix)]\n pub fn getcwd() -> Path {\n     use c_str::CString;\n@@ -80,7 +97,24 @@ pub fn getcwd() -> Path {\n     }\n }\n \n-/// Returns the current working directory.\n+/// Returns the current working directory as a Path.\n+///\n+/// # Failure\n+///\n+/// Fails if the current working directory value is invalid.\n+/// Possibles cases:\n+///\n+/// * Current directory does not exist.\n+/// * There are insufficient permissions to access the current directory.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// // We assume that we are in a valid directory like \"C:\\\\Windows\".\n+/// let current_working_directory = std::os::getcwd();\n+/// println!(\"The current directory is {}\", current_working_directory.display());\n+/// // C:\\\\Windows\n+/// ```\n #[cfg(windows)]\n pub fn getcwd() -> Path {\n     use libc::DWORD;\n@@ -171,11 +205,20 @@ fn with_env_lock<T>(f: || -> T) -> T {\n     }\n }\n \n-/// Returns a vector of (variable, value) pairs for all the environment\n-/// variables of the current process.\n+/// Returns a vector of (variable, value) pairs as a Vec<(String, String)>,\n+/// for all the environment variables of the current process.\n ///\n /// Invalid UTF-8 bytes are replaced with \\uFFFD. See `str::from_utf8_lossy()`\n /// for details.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// // We will iterate through the references to the element returned by std::os::env();\n+/// for &(ref key, ref value) in std::os::env().iter() {\n+///     println!(\"'{}': '{}'\", key, value );\n+/// }\n+/// ```\n pub fn env() -> Vec<(String,String)> {\n     env_as_bytes().move_iter().map(|(k,v)| {\n         let k = str::from_utf8_lossy(k.as_slice()).to_string();\n@@ -276,6 +319,16 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>,Vec<u8>)> {\n /// # Failure\n ///\n /// Fails if `n` has any interior NULs.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// let key = \"HOME\";\n+/// match std::os::getenv(key) {\n+///     Some(val) => println!(\"{}: {}\", key, val),\n+///     None => println!(\"{} is not defined in the environnement.\", key)\n+/// }\n+/// ```\n pub fn getenv(n: &str) -> Option<String> {\n     getenv_as_bytes(n).map(|v| str::from_utf8_lossy(v.as_slice()).to_string())\n }"}]}