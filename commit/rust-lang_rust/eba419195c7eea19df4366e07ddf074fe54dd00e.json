{"sha": "eba419195c7eea19df4366e07ddf074fe54dd00e", "node_id": "C_kwDOAAsO6NoAKGViYTQxOTE5NWM3ZWVhMTlkZjQzNjZlMDdkZGYwNzRmZTU0ZGQwMGU", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T10:55:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-16T10:55:38Z"}, "message": "Rollup merge of #110345 - nnethercote:rm-Super-impls-for-Region, r=compiler-errors\n\nRemove `TypeSuper{Foldable,Visitable}` impls for `Region`.\n\nThese traits exist so that folders/visitors can recurse into types of interest: binders, types, regions, predicates, and consts. But `Region` is non-recursive and cannot contain other types of interest, so its methods in these traits are trivial.\n\nThis commit inlines and removes those trivial methods.\n\nr? `@compiler-errors`", "tree": {"sha": "273ca45232745c7ad8bdf1d960b803335a2842aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273ca45232745c7ad8bdf1d960b803335a2842aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba419195c7eea19df4366e07ddf074fe54dd00e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkO9QqCRBK7hj4Ov3rIwAAUAQIAC2Jn2raU2ROsqo5JIM4W1Oz\n/kh7UDkR8PzHq8wtDbC18D4xmBXzKQFy2vypo0/MPFuNleyk2ktu66+E7dygtdSo\nxBHOp6Otm0dOYbvoNG8nbWZKQxsQ4+3jTWUMr8fdBccF2dTiTeQQl54EpmFe81aH\nsghHY7cl5dydkrUNDtsVf4o4lDdwVZ6z2fyJKfXi3iyOs8l7vZR7/pyG1M5lTBF0\n2mY57cWsDyKm+XaHc7OyOEo25Vqh6NbyxfTuRy4+BsfeeOvTIQXOUdGAMDMLCw5Q\nnopuQ+4QQGJqTU9jvAeGfa1UauZ37mrZQuRHAyJNoOk4ulpAECgsgt2NT+Qp5P4=\n=zj22\n-----END PGP SIGNATURE-----\n", "payload": "tree 273ca45232745c7ad8bdf1d960b803335a2842aa\nparent a5136f14aee8447820a81141631cd6e5919631a5\nparent 4460a1dc28a10cd74a6e5636d6e2cd8c8f06ba4b\nauthor fee1-dead <ent3rm4n@gmail.com> 1681642538 +0800\ncommitter GitHub <noreply@github.com> 1681642538 +0800\n\nRollup merge of #110345 - nnethercote:rm-Super-impls-for-Region, r=compiler-errors\n\nRemove `TypeSuper{Foldable,Visitable}` impls for `Region`.\n\nThese traits exist so that folders/visitors can recurse into types of interest: binders, types, regions, predicates, and consts. But `Region` is non-recursive and cannot contain other types of interest, so its methods in these traits are trivial.\n\nThis commit inlines and removes those trivial methods.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba419195c7eea19df4366e07ddf074fe54dd00e", "html_url": "https://github.com/rust-lang/rust/commit/eba419195c7eea19df4366e07ddf074fe54dd00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba419195c7eea19df4366e07ddf074fe54dd00e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5136f14aee8447820a81141631cd6e5919631a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5136f14aee8447820a81141631cd6e5919631a5", "html_url": "https://github.com/rust-lang/rust/commit/a5136f14aee8447820a81141631cd6e5919631a5"}, {"sha": "4460a1dc28a10cd74a6e5636d6e2cd8c8f06ba4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4460a1dc28a10cd74a6e5636d6e2cd8c8f06ba4b", "html_url": "https://github.com/rust-lang/rust/commit/4460a1dc28a10cd74a6e5636d6e2cd8c8f06ba4b"}], "stats": {"total": 117, "additions": 51, "deletions": 66}, "files": [{"sha": "4d240e90b143ddbe4e1de80b3a58048de78c7075", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -105,7 +105,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {\n                 self.variances[ebr.index as usize] = ty::Invariant;\n             }\n-            r.super_visit_with(self)\n+            ControlFlow::Continue(())\n         }\n \n         #[instrument(level = \"trace\", skip(self), ret)]"}, {"sha": "ce70bcc5c8511635415b7d6dfc8e7a8651d1411b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::RegionHighlightMode;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n use rustc_span::Span;\n \n use std::ops::ControlFlow;\n@@ -81,7 +81,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     self.highlight.highlighting_region(r, self.counter);\n                     self.counter += 1;\n                 }\n-                r.super_visit_with(self)\n+                ControlFlow::Continue(())\n             }\n         }\n "}, {"sha": "25890eb15cde49d0e01b0ae908822cd624ccfafa", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -37,7 +37,8 @@ where\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        let r = r.super_fold_with(self);\n+        // This one is a little different, because `super_fold_with` is not\n+        // implemented on non-recursive `Region`.\n         (self.lt_op)(r)\n     }\n "}, {"sha": "af76cf7cc4e0d78b3396ab4f2de7d8a81aff5c7f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -2518,7 +2518,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     self.used_region_names.insert(name);\n                 }\n \n-                r.super_visit_with(self)\n+                ControlFlow::Continue(())\n             }\n \n             // We collect types in order to prevent really large types from compiling for"}, {"sha": "619fcea8b7d4b6e9f8ca5b894e52c74a9781b6c9", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -583,24 +583,6 @@ impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n-        self,\n-        _folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n-        &self,\n-        _visitor: &mut V,\n-    ) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::Continue(())\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,"}, {"sha": "24a1f04c7e3887d06047121168758bcaf6e8d638", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -364,7 +364,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n             _ => (),\n         };\n \n-        r.super_visit_with(self)\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "ed82b9c0152778dc4a4ac4b64f687e1ab451da29", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -450,7 +450,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n             {\n                 return ControlFlow::Break(());\n             }\n-            r.super_visit_with(self)\n+            ControlFlow::Continue(())\n         }\n         fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Param(param) = ct.kind()"}, {"sha": "31eea22d72b880809ab0b7293cca490e951ef7d9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -998,7 +998,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n             _ => (),\n         };\n \n-        r.super_visit_with(self)\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -1048,7 +1048,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n             _ => (),\n         };\n \n-        r.super_fold_with(self)\n+        r\n     }\n }\n \n@@ -1142,7 +1142,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                 }\n             },\n \n-            _ => r.super_fold_with(self),\n+            _ => r,\n         }\n     }\n }\n@@ -1223,6 +1223,6 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n             _ => (),\n         };\n \n-        r.super_visit_with(self)\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "371c611912286bca3d10af8840b54ce72e55559b", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -16,8 +16,10 @@\n //!   - Types of interest, for which the methods delegate to the folder.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n //!     It defines a \"skeleton\" of how they should be folded.\n-//! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n-//!   and defines the folding \"skeleton\" for these types.\n+//! - `TypeSuperFoldable`. This is implemented only for recursive types of\n+//!   interest, and defines the folding \"skeleton\" for these types. (This\n+//!   excludes `Region` because it is non-recursive, i.e. it never contains\n+//!   other types of interest.)\n //! - `TypeFolder`/`FallibleTypeFolder`. One of these is implemented for each\n //!   folder. This defines how types of interest are folded.\n //!\n@@ -72,9 +74,9 @@ pub trait TypeFoldable<I: Interner>: TypeVisitable<I> {\n \n // This trait is implemented for types of interest.\n pub trait TypeSuperFoldable<I: Interner>: TypeFoldable<I> {\n-    /// Provides a default fold for a type of interest. This should only be\n-    /// called within `TypeFolder` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n+    /// Provides a default fold for a recursive type of interest. This should\n+    /// only be called within `TypeFolder` methods, when a non-custom traversal\n+    /// is desired for the value of the type of interest passed to that method.\n     /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n     /// `ty.try_super_fold_with(self)`, but any other folding should be done\n     /// with `xyz.try_fold_with(self)`.\n@@ -118,11 +120,11 @@ pub trait TypeFolder<I: Interner>: FallibleTypeFolder<I, Error = !> {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_region(&mut self, r: I::Region) -> I::Region\n-    where\n-        I::Region: TypeSuperFoldable<I>,\n-    {\n-        r.super_fold_with(self)\n+    // The default region folder is a no-op because `Region` is non-recursive\n+    // and has no `super_visit_with` method to call. That also explains the\n+    // lack of `I::Region: TypeSuperFoldable<I>` bound on this method.\n+    fn fold_region(&mut self, r: I::Region) -> I::Region {\n+        r\n     }\n \n     fn fold_const(&mut self, c: I::Const) -> I::Const\n@@ -167,11 +169,11 @@ pub trait FallibleTypeFolder<I: Interner>: Sized {\n         t.try_super_fold_with(self)\n     }\n \n-    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, Self::Error>\n-    where\n-        I::Region: TypeSuperFoldable<I>,\n-    {\n-        r.try_super_fold_with(self)\n+    // The default region folder is a no-op because `Region` is non-recursive\n+    // and has no `super_visit_with` method to call. That also explains the\n+    // lack of `I::Region: TypeSuperFoldable<I>` bound on this method.\n+    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, Self::Error> {\n+        Ok(r)\n     }\n \n     fn try_fold_const(&mut self, c: I::Const) -> Result<I::Const, Self::Error>\n@@ -216,10 +218,7 @@ where\n         Ok(self.fold_ty(t))\n     }\n \n-    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, !>\n-    where\n-        I::Region: TypeSuperFoldable<I>,\n-    {\n+    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, !> {\n         Ok(self.fold_region(r))\n     }\n "}, {"sha": "878c7aec6c18e4aa65221424f6fa51d504e499ec", "filename": "compiler/rustc_type_ir/src/visit.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -13,8 +13,11 @@\n //!   - Types of interest, for which the methods delegate to the visitor.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n //!     It defines a \"skeleton\" of how they should be visited.\n-//! - `TypeSuperVisitable`. This is implemented only for each type of interest,\n-//!   and defines the visiting \"skeleton\" for these types.\n+//! - `TypeSuperVisitable`. This is implemented only for recursive types of\n+//!   interest, and defines the visiting \"skeleton\" for these types. (This\n+//!   excludes `Region` because it is non-recursive, i.e. it never contains\n+//!   other types of interest.)\n+//!\n //! - `TypeVisitor`. This is implemented for each visitor. This defines how\n //!   types of interest are visited.\n //!\n@@ -62,12 +65,13 @@ pub trait TypeVisitable<I: Interner>: fmt::Debug + Clone {\n     fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n \n+// This trait is implemented for types of interest.\n pub trait TypeSuperVisitable<I: Interner>: TypeVisitable<I> {\n-    /// Provides a default visit for a type of interest. This should only be\n-    /// called within `TypeVisitor` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n-    /// `ty.super_visit_with(self)`, but any other visiting should be done\n+    /// Provides a default visit for a recursive type of interest. This should\n+    /// only be called within `TypeVisitor` methods, when a non-custom\n+    /// traversal is desired for the value of the type of interest passed to\n+    /// that method. For example, in `MyVisitor::visit_ty(ty)`, it is valid to\n+    /// call `ty.super_visit_with(self)`, but any other visiting should be done\n     /// with `xyz.visit_with(self)`.\n     fn super_visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n@@ -92,11 +96,11 @@ pub trait TypeVisitor<I: Interner>: Sized {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: I::Region) -> ControlFlow<Self::BreakTy>\n-    where\n-        I::Region: TypeSuperVisitable<I>,\n-    {\n-        r.super_visit_with(self)\n+    // The default region visitor is a no-op because `Region` is non-recursive\n+    // and has no `super_visit_with` method to call. That also explains the\n+    // lack of `I::Region: TypeSuperVisitable<I>` bound.\n+    fn visit_region(&mut self, _r: I::Region) -> ControlFlow<Self::BreakTy> {\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_const(&mut self, c: I::Const) -> ControlFlow<Self::BreakTy>"}, {"sha": "f6088f4e64a4114e853b55df697864ec078dc3db", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba419195c7eea19df4366e07ddf074fe54dd00e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba419195c7eea19df4366e07ddf074fe54dd00e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=eba419195c7eea19df4366e07ddf074fe54dd00e", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable};\n use rustc_trait_selection::traits::auto_trait::{self, AutoTraitResult};\n use thin_vec::ThinVec;\n \n@@ -740,10 +740,9 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        (match *r {\n-            ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned(),\n-            _ => None,\n-        })\n-        .unwrap_or_else(|| r.super_fold_with(self))\n+        match *r {\n+            ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned().unwrap_or(r),\n+            _ => r,\n+        }\n     }\n }"}]}