{"sha": "489ec310d2eadbdbdafc172fb09e9d598c01c93e", "node_id": "C_kwDOAAsO6NoAKDQ4OWVjMzEwZDJlYWRiZGJkYWZjMTcyZmIwOWU5ZDU5OGMwMWM5M2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T09:17:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T09:17:39Z"}, "message": "Auto merge of #90577 - matthiaskrgr:clippy_perf_nov, r=petrochenkov\n\nclippy::perf fixes", "tree": {"sha": "fe443ad481b38cbbbf8026831b52a5db11348e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe443ad481b38cbbbf8026831b52a5db11348e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/489ec310d2eadbdbdafc172fb09e9d598c01c93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/489ec310d2eadbdbdafc172fb09e9d598c01c93e", "html_url": "https://github.com/rust-lang/rust/commit/489ec310d2eadbdbdafc172fb09e9d598c01c93e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/489ec310d2eadbdbdafc172fb09e9d598c01c93e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "html_url": "https://github.com/rust-lang/rust/commit/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd"}, {"sha": "28ef4169ccc62f3f1a35b6b002c29ea9bc6b2334", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ef4169ccc62f3f1a35b6b002c29ea9bc6b2334", "html_url": "https://github.com/rust-lang/rust/commit/28ef4169ccc62f3f1a35b6b002c29ea9bc6b2334"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "a9471f7b7716052c60f0228c13bfd793c1c52361", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -832,7 +832,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // FIXME(rcvalle): Add support for generalized identifiers.\n             // FIXME(rcvalle): Create distinct unnamed MDNodes for internal identifiers.\n             let typeid = typeid_for_fnabi(bx.tcx(), fn_abi);\n-            let typeid_metadata = bx.typeid_metadata(typeid.clone());\n+            let typeid_metadata = bx.typeid_metadata(typeid);\n \n             // Test whether the function pointer is associated with the type identifier.\n             let cond = bx.type_test(fn_ptr, typeid_metadata);"}, {"sha": "1ef863e84af7fe757b691c6fb0167bcda350f489", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -250,7 +250,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     // is associated with a type identifier).\n     if cx.tcx().sess.is_sanitizer_cfi_enabled() {\n         let typeid = typeid_for_fnabi(cx.tcx(), fn_abi);\n-        bx.type_metadata(llfn, typeid.clone());\n+        bx.type_metadata(llfn, typeid);\n     }\n }\n "}, {"sha": "1260c691e7844cfb1fc1447c51d938114233f280", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -632,11 +632,11 @@ fn tooltip<'tcx>(\n     for statement in statements {\n         let source_range = source_range_no_file(tcx, &statement.source_info.span);\n         text.push(format!(\n-            \"\\n{}{}: {}: {}\",\n+            \"\\n{}{}: {}: {:?}\",\n             TOOLTIP_INDENT,\n             source_range,\n             statement_kind_name(&statement),\n-            format!(\"{:?}\", statement)\n+            statement\n         ));\n     }\n     if let Some(term) = terminator {"}, {"sha": "4392c02f874d4da47001ca3f167f7baf37a85dda", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -67,7 +67,7 @@ crate fn dump_closure_profile(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx\n             src_file.prefer_local(),\n             line_nos\n         ) {\n-            eprintln!(\"Error writting to file {}\", e.to_string())\n+            eprintln!(\"Error writing to file {}\", e)\n         }\n     }\n }"}, {"sha": "f1a5282b08871323aa2b0a18be0103481ae1fffd", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -236,7 +236,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                             id,\n                             span,\n                             name: ident.to_string(),\n-                            qualname: format!(\"{}::{}\", qualname, ident.to_string()),\n+                            qualname: format!(\"{}::{}\", qualname, ident),\n                             value: typ,\n                             parent: None,\n                             children: vec![],\n@@ -889,7 +889,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n                     // Rust uses the id of the pattern for var lookups, so we'll use it too.\n                     if !self.span.filter_generated(ident.span) {\n-                        let qualname = format!(\"{}${}\", ident.to_string(), hir_id);\n+                        let qualname = format!(\"{}${}\", ident, hir_id);\n                         let id = id_from_hir_id(hir_id, &self.save_ctxt);\n                         let span = self.span_from_span(ident.span);\n "}, {"sha": "a9125b9fd2280ed259e52e0dcffccc54ce941169", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -1838,7 +1838,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 post.iter().map(|p| format!(\"- {}\", p)).take(4).collect::<Vec<_>>().join(\"\\n\"),\n                 post.len() - 4,\n             )\n-        } else if post.len() > 1 || (post.len() == 1 && post[0].contains(\"\\n\")) {\n+        } else if post.len() > 1 || (post.len() == 1 && post[0].contains('\\n')) {\n             format!(\":\\n{}\", post.iter().map(|p| format!(\"- {}\", p)).collect::<Vec<_>>().join(\"\\n\"),)\n         } else if post.len() == 1 {\n             format!(\": `{}`\", post[0])"}, {"sha": "84327a2880e18c6499eb4eaa82c41beaae735124", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -344,7 +344,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                             \"reorder the arguments: {}: `<{}>`\",\n                                             param_types_present\n                                                 .into_iter()\n-                                                .map(|ord| format!(\"{}s\", ord.to_string()))\n+                                                .map(|ord| format!(\"{}s\", ord))\n                                                 .collect::<Vec<String>>()\n                                                 .join(\", then \"),\n                                             ordered_params"}, {"sha": "a6ea8abdf3fa6af554918f4a4aeceb51101a1d9d", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -772,7 +772,7 @@ fn infer_placeholder_type<'a>(\n                 } else {\n                     err.span_note(\n                         tcx.hir().body(body_id).value.span,\n-                        &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                        &format!(\"however, the inferred type `{}` cannot be named\", ty),\n                     );\n                 }\n             }\n@@ -796,7 +796,7 @@ fn infer_placeholder_type<'a>(\n                 } else {\n                     diag.span_note(\n                         tcx.hir().body(body_id).value.span,\n-                        &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                        &format!(\"however, the inferred type `{}` cannot be named\", ty),\n                     );\n                 }\n             }"}, {"sha": "fa23cf2689671c14d8b7da1e14225bd8334d19d1", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489ec310d2eadbdbdafc172fb09e9d598c01c93e/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489ec310d2eadbdbdafc172fb09e9d598c01c93e/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=489ec310d2eadbdbdafc172fb09e9d598c01c93e", "patch": "@@ -55,8 +55,8 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         _stdout: &[u8],\n         _state: &ConsoleTestState,\n     ) -> io::Result<()> {\n-        // Because the testsuit node holds some of the information as attributes, we can't write it\n-        // until all of the tests has ran. Instead of writting every result as they come in, we add\n+        // Because the testsuite node holds some of the information as attributes, we can't write it\n+        // until all of the tests have finished. Instead of writing every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n         let duration = exec_time.map(|t| t.0).unwrap_or_default();\n         self.results.push((desc.clone(), result.clone(), duration));"}]}