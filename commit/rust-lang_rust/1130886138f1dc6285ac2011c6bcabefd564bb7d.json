{"sha": "1130886138f1dc6285ac2011c6bcabefd564bb7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzA4ODYxMzhmMWRjNjI4NWFjMjAxMWM2YmNhYmVmZDU2NGJiN2Q=", "commit": {"author": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-12T11:50:01Z"}, "committer": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-12T12:33:52Z"}, "message": "extra::ebml: Add unit test for vuint_at()", "tree": {"sha": "650bd7149e01876bd6cc59374178e95bfa3559af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/650bd7149e01876bd6cc59374178e95bfa3559af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1130886138f1dc6285ac2011c6bcabefd564bb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1130886138f1dc6285ac2011c6bcabefd564bb7d", "html_url": "https://github.com/rust-lang/rust/commit/1130886138f1dc6285ac2011c6bcabefd564bb7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1130886138f1dc6285ac2011c6bcabefd564bb7d/comments", "author": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b188a590cbfad840126ecad131eaa718ce6f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b188a590cbfad840126ecad131eaa718ce6f5f", "html_url": "https://github.com/rust-lang/rust/commit/e9b188a590cbfad840126ecad131eaa718ce6f5f"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "4449de342d72fc813f4e23ddc2ea4f0649b913be", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1130886138f1dc6285ac2011c6bcabefd564bb7d/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1130886138f1dc6285ac2011c6bcabefd564bb7d/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=1130886138f1dc6285ac2011c6bcabefd564bb7d", "patch": "@@ -938,6 +938,54 @@ mod tests {\n     use std::io::mem::MemWriter;\n     use std::option::{None, Option, Some};\n \n+    #[test]\n+    fn test_vuint_at() {\n+        let data = [\n+            0x80,\n+            0xff,\n+            0x40, 0x00,\n+            0x7f, 0xff,\n+            0x20, 0x00, 0x00,\n+            0x3f, 0xff, 0xff,\n+            0x10, 0x00, 0x00, 0x00,\n+            0x1f, 0xff, 0xff, 0xff\n+        ];\n+\n+        let mut res: reader::Res;\n+\n+        // Class A\n+        res = reader::vuint_at(data, 0);\n+        assert_eq!(res.val, 0);\n+        assert_eq!(res.next, 1);\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, (1 << 7) - 1);\n+        assert_eq!(res.next, 2);\n+\n+        // Class B\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, 0);\n+        assert_eq!(res.next, 4);\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, (1 << 14) - 1);\n+        assert_eq!(res.next, 6);\n+\n+        // Class C\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, 0);\n+        assert_eq!(res.next, 9);\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, (1 << 21) - 1);\n+        assert_eq!(res.next, 12);\n+\n+        // Class D\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, 0);\n+        assert_eq!(res.next, 16);\n+        res = reader::vuint_at(data, res.next);\n+        assert_eq!(res.val, (1 << 28) - 1);\n+        assert_eq!(res.next, 20);\n+    }\n+\n     #[test]\n     fn test_option_int() {\n         fn test_v(v: Option<int>) {"}]}