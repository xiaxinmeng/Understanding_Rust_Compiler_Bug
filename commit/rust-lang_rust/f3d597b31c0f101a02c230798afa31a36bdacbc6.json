{"sha": "f3d597b31c0f101a02c230798afa31a36bdacbc6", "node_id": "C_kwDOAAsO6NoAKGYzZDU5N2IzMWMwZjEwMWEwMmMyMzA3OThhZmEzMWEzNmJkYWNiYzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T10:12:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T10:12:46Z"}, "message": "Auto merge of #111807 - erikdesjardins:noalias, r=oli-obk\n\n[rustc_ty_utils] Treat `drop_in_place`'s *mut argument like &mut when adding LLVM attributes\n\nThis resurrects PR #103614, which has sat idle for a while.\n\nThis could probably use a new perf run, since we're on a new LLVM version now.\n\nr? `@oli-obk`\ncc `@RalfJung`\n\n---\n\nLLVM can make use of the `noalias` parameter attribute on the parameter to `drop_in_place` in areas like argument promotion. Because the Rust compiler fully controls the code for `drop_in_place`, it can soundly deduce parameter attributes on it.\n\nIn #103957, Miri was changed to retag `drop_in_place`'s argument as if it was `&mut`, matching this change.", "tree": {"sha": "e1155c3755cf98eb4c0a85607099171616930ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1155c3755cf98eb4c0a85607099171616930ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d597b31c0f101a02c230798afa31a36bdacbc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d597b31c0f101a02c230798afa31a36bdacbc6", "html_url": "https://github.com/rust-lang/rust/commit/f3d597b31c0f101a02c230798afa31a36bdacbc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d597b31c0f101a02c230798afa31a36bdacbc6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda5becc27cbc7106646fbc40aacea5e7896d954", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda5becc27cbc7106646fbc40aacea5e7896d954", "html_url": "https://github.com/rust-lang/rust/commit/cda5becc27cbc7106646fbc40aacea5e7896d954"}, {"sha": "fb7f1d220c28dd86000d52f846ceb9055ae0ace4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7f1d220c28dd86000d52f846ceb9055ae0ace4", "html_url": "https://github.com/rust-lang/rust/commit/fb7f1d220c28dd86000d52f846ceb9055ae0ace4"}], "stats": {"total": 94, "additions": 84, "deletions": 10}, "files": [{"sha": "15c19104616665d893436ab3b73b9f0c2644d88a", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f3d597b31c0f101a02c230798afa31a36bdacbc6/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d597b31c0f101a02c230798afa31a36bdacbc6/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=f3d597b31c0f101a02c230798afa31a36bdacbc6", "patch": "@@ -238,6 +238,7 @@ fn adjust_for_rust_scalar<'tcx>(\n     layout: TyAndLayout<'tcx>,\n     offset: Size,\n     is_return: bool,\n+    drop_target_pointee: Option<Ty<'tcx>>,\n ) {\n     // Booleans are always a noundef i1 that needs to be zero-extended.\n     if scalar.is_bool() {\n@@ -251,14 +252,24 @@ fn adjust_for_rust_scalar<'tcx>(\n     }\n \n     // Only pointer types handled below.\n-    let Scalar::Initialized { value: Pointer(_), valid_range} = scalar else { return };\n+    let Scalar::Initialized { value: Pointer(_), valid_range } = scalar else { return };\n \n-    if !valid_range.contains(0) {\n+    // Set `nonnull` if the validity range excludes zero, or for the argument to `drop_in_place`,\n+    // which must be nonnull per its documented safety requirements.\n+    if !valid_range.contains(0) || drop_target_pointee.is_some() {\n         attrs.set(ArgAttribute::NonNull);\n     }\n \n     if let Some(pointee) = layout.pointee_info_at(&cx, offset) {\n-        if let Some(kind) = pointee.safe {\n+        let kind = if let Some(kind) = pointee.safe {\n+            Some(kind)\n+        } else if let Some(pointee) = drop_target_pointee {\n+            // The argument to `drop_in_place` is semantically equivalent to a mutable reference.\n+            Some(PointerKind::MutableRef { unpin: pointee.is_unpin(cx.tcx, cx.param_env()) })\n+        } else {\n+            None\n+        };\n+        if let Some(kind) = kind {\n             attrs.pointee_align = Some(pointee.align);\n \n             // `Box` are not necessarily dereferenceable for the entire duration of the function as\n@@ -362,10 +373,18 @@ fn fn_abi_new_uncached<'tcx>(\n     use SpecAbi::*;\n     let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n+    let is_drop_in_place =\n+        fn_def_id.is_some() && fn_def_id == cx.tcx.lang_items().drop_in_place_fn();\n+\n     let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {\n         let span = tracing::debug_span!(\"arg_of\");\n         let _entered = span.enter();\n         let is_return = arg_idx.is_none();\n+        let is_drop_target = is_drop_in_place && arg_idx == Some(0);\n+        let drop_target_pointee = is_drop_target.then(|| match ty.kind() {\n+            ty::RawPtr(ty::TypeAndMut { ty, .. }) => *ty,\n+            _ => bug!(\"argument to drop_in_place is not a raw ptr: {:?}\", ty),\n+        });\n \n         let layout = cx.layout_of(ty)?;\n         let layout = if force_thin_self_ptr && arg_idx == Some(0) {\n@@ -379,7 +398,15 @@ fn fn_abi_new_uncached<'tcx>(\n \n         let mut arg = ArgAbi::new(cx, layout, |layout, scalar, offset| {\n             let mut attrs = ArgAttributes::new();\n-            adjust_for_rust_scalar(*cx, &mut attrs, scalar, *layout, offset, is_return);\n+            adjust_for_rust_scalar(\n+                *cx,\n+                &mut attrs,\n+                scalar,\n+                *layout,\n+                offset,\n+                is_return,\n+                drop_target_pointee,\n+            );\n             attrs\n         });\n "}, {"sha": "ff9fa48f31136297dd1dbb1d1a9d486cf010abc4", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3d597b31c0f101a02c230798afa31a36bdacbc6/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d597b31c0f101a02c230798afa31a36bdacbc6/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=f3d597b31c0f101a02c230798afa31a36bdacbc6", "patch": "@@ -441,19 +441,25 @@ mod mut_ptr;\n ///\n /// * `to_drop` must be [valid] for both reads and writes.\n ///\n-/// * `to_drop` must be properly aligned.\n+/// * `to_drop` must be properly aligned, even if `T` has size 0.\n ///\n-/// * The value `to_drop` points to must be valid for dropping, which may mean it must uphold\n-///   additional invariants - this is type-dependent.\n+/// * `to_drop` must be nonnull, even if `T` has size 0.\n+///\n+/// * The value `to_drop` points to must be valid for dropping, which may mean\n+///   it must uphold additional invariants. These invariants depend on the type\n+///   of the value being dropped. For instance, when dropping a Box, the box's\n+///   pointer to the heap must be valid.\n+///\n+/// * While `drop_in_place` is executing, the only way to access parts of\n+///   `to_drop` is through the `&mut self` references supplied to the\n+///   `Drop::drop` methods that `drop_in_place` invokes.\n ///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n /// foo` counts as a use because it will cause the value to be dropped\n /// again. [`write()`] can be used to overwrite data without causing it to be\n /// dropped.\n ///\n-/// Note that even if `T` has size `0`, the pointer must be non-null and properly aligned.\n-///\n /// [valid]: self#safety\n ///\n /// # Examples"}, {"sha": "725e6fc048dfffb596a20355d94e9781d084afbf", "filename": "tests/codegen/drop-in-place-noalias.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f3d597b31c0f101a02c230798afa31a36bdacbc6/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d597b31c0f101a02c230798afa31a36bdacbc6/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdrop-in-place-noalias.rs?ref=f3d597b31c0f101a02c230798afa31a36bdacbc6", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: -O -C no-prepopulate-passes\n+\n+// Tests that the compiler can apply `noalias` and other &mut attributes to `drop_in_place`.\n+// Note that non-Unpin types should not get `noalias`, matching &mut behavior.\n+\n+#![crate_type=\"lib\"]\n+\n+use std::marker::PhantomPinned;\n+\n+// CHECK: define internal void @{{.*}}core{{.*}}ptr{{.*}}drop_in_place{{.*}}StructUnpin{{.*}}({{.*\\*|ptr}} noalias noundef align 4 dereferenceable(12) %{{.+}})\n+\n+// CHECK: define internal void @{{.*}}core{{.*}}ptr{{.*}}drop_in_place{{.*}}StructNotUnpin{{.*}}({{.*\\*|ptr}} noundef nonnull align 4 %{{.+}})\n+\n+pub struct StructUnpin {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+}\n+\n+impl Drop for StructUnpin {\n+    fn drop(&mut self) {}\n+}\n+\n+pub struct StructNotUnpin {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    p: PhantomPinned,\n+}\n+\n+impl Drop for StructNotUnpin {\n+    fn drop(&mut self) {}\n+}\n+\n+pub unsafe fn main(x: StructUnpin, y: StructNotUnpin) {\n+    drop(x);\n+    drop(y);\n+}"}, {"sha": "c82c53b2a489682d1d8823e0c84824245548ff9b", "filename": "tests/codegen/noalias-box-off.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3d597b31c0f101a02c230798afa31a36bdacbc6/tests%2Fcodegen%2Fnoalias-box-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d597b31c0f101a02c230798afa31a36bdacbc6/tests%2Fcodegen%2Fnoalias-box-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnoalias-box-off.rs?ref=f3d597b31c0f101a02c230798afa31a36bdacbc6", "patch": "@@ -4,5 +4,8 @@\n \n // CHECK-LABEL: @box_should_not_have_noalias_if_disabled(\n // CHECK-NOT: noalias\n+// CHECK-SAME: %foo)\n #[no_mangle]\n-pub fn box_should_not_have_noalias_if_disabled(_b: Box<u8>) {}\n+pub fn box_should_not_have_noalias_if_disabled(foo: Box<u8>) {\n+    drop(foo);\n+}"}]}