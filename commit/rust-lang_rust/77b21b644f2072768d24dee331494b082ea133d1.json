{"sha": "77b21b644f2072768d24dee331494b082ea133d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YjIxYjY0NGYyMDcyNzY4ZDI0ZGVlMzMxNDk0YjA4MmVhMTMzZDE=", "commit": {"author": {"name": "Vincent Dal Maso", "email": "vincent.dalmaso.ext@delair-tech.com", "date": "2019-06-17T15:36:42Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-08-05T11:23:30Z"}, "message": "Move expression check to LateLintPass\n\nChanges:\n- Move from EarlyLintPass\n- Fix entrypoint check with function path def_id.", "tree": {"sha": "bb338a23a6dc4677d845df39f01b6b555a04412b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb338a23a6dc4677d845df39f01b6b555a04412b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b21b644f2072768d24dee331494b082ea133d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl1IEbIACgkQaTCGhp1Q\nZjcagw/9HC+pFn45wVyAGILc+qGkvfgCw8urDtxEkyCheEFlsS/tbjFZ6Q0kaeaK\nN0WgA2DGxVi9qpuIVxCiBtfnIvar25/+yBxz/NJ7ZPy/7zwbKw8FzS8nVOtdCsAy\nItJ6Pa3wTyv+c0abn5To5egiQ+9nTQbja3quCJdajE7C++uMYuyhzEnwCUvEt0mL\nMFXgDmAQRV4hEHOireDYKV6C3XRGfizK5iu3pmkaTtoHh2SooybmhkTq/5tCpOLo\nVowFVnFWGUuNH9gll7xzT3kkQ55mjgBoyOYEvpa2gHAyTelBPGSykk6yw/M+E1Zt\nuHpqJc/SX0DQm45oiP1bRaCIv0zXsKrJC8dDohc6Msn/OBji1RsrcLk2LfTCzwiq\ngzcsbaSJjb28OqVZK/GJULO48RInvs/oruyIY7v5uMjYlPdVldTZe/C7FQTDvdym\nVoVgmdq1aoX6YBq7J+pqbEs37v/VFIvpVWPawujoZPYsCkXBLbYcnHQ3obUfUyAX\nQH8f6bDkfU8JFjrXBQmb3entbiUhxozR+i+OX8naRY4B7gW3EvhKTJ4WO9SQr+Wy\nUgnbaD4Xx963yyso1axJaGY1QgpAIUI3YIGGHWiiGLoywima7PAv0xM3yWc4YREl\nPurYNEBppvLGZ9kdm6oWjgaHmPITV6BnORfYzoifqcIzZRDd0As=\n=qTlQ\n-----END PGP SIGNATURE-----", "payload": "tree bb338a23a6dc4677d845df39f01b6b555a04412b\nparent 4eab691db63c11ffeaea79c4ad4f3ff8b17564ef\nauthor Vincent Dal Maso <vincent.dalmaso.ext@delair-tech.com> 1560785802 +0200\ncommitter flip1995 <hello@philkrones.com> 1565004210 +0200\n\nMove expression check to LateLintPass\n\nChanges:\n- Move from EarlyLintPass\n- Fix entrypoint check with function path def_id.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b21b644f2072768d24dee331494b082ea133d1", "html_url": "https://github.com/rust-lang/rust/commit/77b21b644f2072768d24dee331494b082ea133d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b21b644f2072768d24dee331494b082ea133d1/comments", "author": null, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eab691db63c11ffeaea79c4ad4f3ff8b17564ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eab691db63c11ffeaea79c4ad4f3ff8b17564ef", "html_url": "https://github.com/rust-lang/rust/commit/4eab691db63c11ffeaea79c4ad4f3ff8b17564ef"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "e4a1a602c4393292907cd474d050403094e0b351", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -1000,6 +1000,7 @@ Released 2018-09-13\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n+[`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names"}, {"sha": "258be38e48b16c79f80206359466bd304e6e695b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -474,7 +474,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box types::LetUnitValue);\n     reg.register_late_lint_pass(box types::UnitCmp);\n     reg.register_late_lint_pass(box loops::Loops);\n-    reg.register_early_lint_pass(box main_recursion::MainRecursion::new());\n+    reg.register_late_lint_pass(box main_recursion::MainRecursion::default());\n     reg.register_late_lint_pass(box lifetimes::Lifetimes);\n     reg.register_late_lint_pass(box entry::HashMapPass);\n     reg.register_late_lint_pass(box ranges::Ranges);\n@@ -762,6 +762,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::WHILE_IMMUTABLE_CONDITION,\n         loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        main_recursion::MAIN_RECURSION,\n         map_clone::MAP_CLONE,\n         map_unit_fn::OPTION_MAP_UNIT_FN,\n         map_unit_fn::RESULT_MAP_UNIT_FN,\n@@ -935,6 +936,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::FOR_KV_MAP,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        main_recursion::MAIN_RECURSION,\n         map_clone::MAP_CLONE,\n         matches::MATCH_BOOL,\n         matches::MATCH_OVERLAPPING_ARM,"}, {"sha": "88f1e685ced3b3e4726f09d2efc9a68cc73effe3", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -1,53 +1,60 @@\n-\n-use syntax::ast::{Crate, Expr, ExprKind};\n-use syntax::symbol::sym;\n-use rustc::lint::{LintArray, LintPass, EarlyLintPass, EarlyContext};\n+use rustc::hir::{Crate, Expr, ExprKind, QPath};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n+use syntax::symbol::sym;\n \n+use crate::utils::{is_entrypoint_fn, snippet, span_help_and_lint};\n use if_chain::if_chain;\n-use crate::utils::span_help_and_lint;\n \n declare_clippy_lint! {\n+    /// **What it does:** Checks for recursion using the entrypoint.\n+    ///\n+    /// **Why is this bad?** Apart from special setups (which we could detect following attributes like #![no_std]),\n+    /// recursing into main() seems like an unintuitive antipattern we should be able to detect.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// fn main() {\n+    ///     main();\n+    /// }\n+    /// ```\n     pub MAIN_RECURSION,\n-    pedantic,\n-    \"function named `foo`, which is not a descriptive name\"\n+    style,\n+    \"recursion using the entrypoint\"\n }\n \n+#[derive(Default)]\n pub struct MainRecursion {\n-    has_no_std_attr: bool\n+    has_no_std_attr: bool,\n }\n \n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n-impl MainRecursion {\n-    pub fn new() -> MainRecursion {\n-        MainRecursion {\n-            has_no_std_attr: false\n-        }\n-    }\n-}\n-\n-impl EarlyLintPass for MainRecursion {\n-    fn check_crate(&mut self, _: &EarlyContext<'_>, krate: &Crate) {\n+impl LateLintPass<'_, '_> for MainRecursion {\n+    fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate) {\n         self.has_no_std_attr = krate.attrs.iter().any(|attr| attr.path == sym::no_std);\n     }\n \n-    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+    fn check_expr_post(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {\n         if self.has_no_std_attr {\n             return;\n         }\n \n         if_chain! {\n             if let ExprKind::Call(func, _) = &expr.node;\n-            if let ExprKind::Path(_, path) = &func.node;\n-            if *path == sym::main;\n+            if let ExprKind::Path(path) = &func.node;\n+            if let QPath::Resolved(_, path) = &path;\n+            if let Some(def_id) = path.res.opt_def_id();\n+            if is_entrypoint_fn(cx, def_id);\n             then {\n                 span_help_and_lint(\n                     cx,\n                     MAIN_RECURSION,\n-                    expr.span,\n-                    \"You are recursing into main()\",\n-                    \"Consider using another function for this recursion\"\n+                    func.span,\n+                    &format!(\"recursing into entrypoint `{}`\", snippet(cx, func.span, \"main\")),\n+                    \"consider using another function for this recursion\"\n                 )\n             }\n         }"}, {"sha": "802ba60b9f1c7360393d7f411911649e60f66e74", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -917,6 +917,13 @@ pub const ALL_LINTS: [Lint; 309] = [\n         deprecation: None,\n         module: \"booleans\",\n     },\n+    Lint {\n+        name: \"main_recursion\",\n+        group: \"style\",\n+        desc: \"recursion using the entrypoint\",\n+        deprecation: None,\n+        module: \"main_recursion\",\n+    },\n     Lint {\n         name: \"manual_memcpy\",\n         group: \"perf\","}, {"sha": "995787c5336688d9283fc8e6ca5ff806faf54133", "filename": "tests/ui/crate_level_checks/entrypoint_recursion.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -0,0 +1,12 @@\n+// ignore-macos\n+// ignore-windows\n+\n+#![feature(main)]\n+\n+#[warn(clippy::main_recursion)]\n+#[allow(unconditional_recursion)]\n+#[main]\n+fn a() {\n+    println!(\"Hello, World!\");\n+    a();\n+}"}, {"sha": "f52fc949f6c3e7a4d7e933518969079efac7711d", "filename": "tests/ui/crate_level_checks/entrypoint_recursion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -0,0 +1,11 @@\n+error: recursing into entrypoint `a`\n+  --> $DIR/entrypoint_recursion.rs:11:5\n+   |\n+LL |     a();\n+   |     ^\n+   |\n+   = note: `-D clippy::main-recursion` implied by `-D warnings`\n+   = help: consider using another function for this recursion\n+\n+error: aborting due to previous error\n+"}, {"sha": "4d19f38e2d0a1b6ee829cee4361bb7aea94acbd7", "filename": "tests/ui/crate_level_checks/no_std_main_recursion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -1,5 +1,5 @@\n #![feature(lang_items, link_args, start, libc)]\n-#![link_args=\"-nostartfiles\"]\n+#![link_args = \"-nostartfiles\"]\n #![no_std]\n \n use core::panic::PanicInfo;\n@@ -8,7 +8,6 @@ use core::sync::atomic::{AtomicUsize, Ordering};\n static N: AtomicUsize = AtomicUsize::new(0);\n \n #[warn(clippy::main_recursion)]\n-#[allow(unconditional_recursion)]\n #[start]\n fn main(argc: isize, argv: *const *const u8) -> isize {\n     let x = N.load(Ordering::Relaxed);\n@@ -28,4 +27,4 @@ fn panic(_info: &PanicInfo) -> ! {\n }\n \n #[lang = \"eh_personality\"]\n-extern fn eh_personality() {}\n+extern \"C\" fn eh_personality() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/crate_level_checks/no_std_main_recursion.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4eab691db63c11ffeaea79c4ad4f3ff8b17564ef/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eab691db63c11ffeaea79c4ad4f3ff8b17564ef/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.stderr?ref=4eab691db63c11ffeaea79c4ad4f3ff8b17564ef"}, {"sha": "89ff6609934d2cac98f83f5a4d4ddc6e91b1e6c0", "filename": "tests/ui/crate_level_checks/std_main_recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.rs?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -1,5 +1,6 @@\n #[warn(clippy::main_recursion)]\n #[allow(unconditional_recursion)]\n fn main() {\n+    println!(\"Hello, World!\");\n     main();\n }"}, {"sha": "0a260f9d2309ea9a5cf39e9003a8f580d235f8bb", "filename": "tests/ui/crate_level_checks/std_main_recursion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77b21b644f2072768d24dee331494b082ea133d1/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr?ref=77b21b644f2072768d24dee331494b082ea133d1", "patch": "@@ -1,11 +1,11 @@\n-error: You are recursing into main()\n-  --> $DIR/std_main_recursion.rs:4:5\n+error: recursing into entrypoint `main`\n+  --> $DIR/std_main_recursion.rs:5:5\n    |\n LL |     main();\n-   |     ^^^^^^\n+   |     ^^^^\n    |\n    = note: `-D clippy::main-recursion` implied by `-D warnings`\n-   = help: Consider using another function for this recursion\n+   = help: consider using another function for this recursion\n \n error: aborting due to previous error\n "}]}