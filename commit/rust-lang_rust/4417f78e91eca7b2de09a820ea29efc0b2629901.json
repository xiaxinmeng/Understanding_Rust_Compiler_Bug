{"sha": "4417f78e91eca7b2de09a820ea29efc0b2629901", "node_id": "C_kwDOAAsO6NoAKDQ0MTdmNzhlOTFlY2E3YjJkZTA5YTgyMGVhMjllZmMwYjI2Mjk5MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T16:07:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T16:07:59Z"}, "message": "Auto merge of #8474 - Alexendoo:paths, r=Manishearth\n\nReplace some more paths with diagnostic items\n\ncc #5393\n\nReplaces the macro & mem paths, and catches a couple others that were unused\n\nchangelog: none", "tree": {"sha": "0a73405da1020a3eaa20a64301b92529aa8178bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a73405da1020a3eaa20a64301b92529aa8178bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4417f78e91eca7b2de09a820ea29efc0b2629901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4417f78e91eca7b2de09a820ea29efc0b2629901", "html_url": "https://github.com/rust-lang/rust/commit/4417f78e91eca7b2de09a820ea29efc0b2629901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4417f78e91eca7b2de09a820ea29efc0b2629901/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95897bfcf2658ecb4238d45ace941fc34289ec48", "url": "https://api.github.com/repos/rust-lang/rust/commits/95897bfcf2658ecb4238d45ace941fc34289ec48", "html_url": "https://github.com/rust-lang/rust/commit/95897bfcf2658ecb4238d45ace941fc34289ec48"}, {"sha": "2955db493ef9ceaf4cc9bcd3b83680c0206d001d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2955db493ef9ceaf4cc9bcd3b83680c0206d001d", "html_url": "https://github.com/rust-lang/rust/commit/2955db493ef9ceaf4cc9bcd3b83680c0206d001d"}], "stats": {"total": 149, "additions": 63, "deletions": 86}, "files": [{"sha": "5c4b35fd4b9d2e572b155fb29e85b3cf7019ecf3", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::ty::is_copy;\n-use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -128,14 +128,16 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n                 let arg_ty = cx.typeck_results().expr_ty(arg);\n \n                 if let ty::Ref(..) = arg_ty.kind() {\n-                    if match_def_path(cx, def_id, &paths::DROP) {\n-                        lint = DROP_REF;\n-                        msg = DROP_REF_SUMMARY.to_string();\n-                    } else if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n-                        lint = FORGET_REF;\n-                        msg = FORGET_REF_SUMMARY.to_string();\n-                    } else {\n-                        return;\n+                    match cx.tcx.get_diagnostic_name(def_id) {\n+                        Some(sym::mem_drop) => {\n+                            lint = DROP_REF;\n+                            msg = DROP_REF_SUMMARY.to_string();\n+                        },\n+                        Some(sym::mem_forget) => {\n+                            lint = FORGET_REF;\n+                            msg = FORGET_REF_SUMMARY.to_string();\n+                        },\n+                        _ => return,\n                     }\n                     span_lint_and_note(cx,\n                                        lint,\n@@ -144,14 +146,16 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n                                        Some(arg.span),\n                                        &format!(\"argument has type `{}`\", arg_ty));\n                 } else if is_copy(cx, arg_ty) {\n-                    if match_def_path(cx, def_id, &paths::DROP) {\n-                        lint = DROP_COPY;\n-                        msg = DROP_COPY_SUMMARY.to_string();\n-                    } else if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n-                        lint = FORGET_COPY;\n-                        msg = FORGET_COPY_SUMMARY.to_string();\n-                    } else {\n-                        return;\n+                    match cx.tcx.get_diagnostic_name(def_id) {\n+                        Some(sym::mem_drop) => {\n+                            lint = DROP_COPY;\n+                            msg = DROP_COPY_SUMMARY.to_string();\n+                        },\n+                        Some(sym::mem_forget) => {\n+                            lint = FORGET_COPY;\n+                            msg = FORGET_COPY_SUMMARY.to_string();\n+                        },\n+                        _ => return,\n                     }\n                     span_lint_and_note(cx,\n                                        lint,"}, {"sha": "dcf44303cf449f2a0b83322414643fdd7243e6db", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,13 +1,14 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -99,7 +100,7 @@ fn get_size_of_ty<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<\n         if let Some(GenericArg::Type(real_ty)) = args.args.get(0);\n \n         if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n-        if match_def_path(cx, def_id, &paths::MEM_SIZE_OF);\n+        if cx.tcx.is_diagnostic_item(sym::mem_size_of, def_id);\n         then {\n             cx.typeck_results().node_substs(count_func.hir_id).types().next().map(|resolved_ty| (real_ty, resolved_ty))\n         } else {"}, {"sha": "d6c235b5a693a96975c006c3f5ee123f17a82fa5", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_def_path, paths};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -32,7 +32,7 @@ impl<'tcx> LateLintPass<'tcx> for MemForget {\n         if let ExprKind::Call(path_expr, [ref first_arg, ..]) = e.kind {\n             if let ExprKind::Path(ref qpath) = path_expr.kind {\n                 if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n-                    if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n+                    if cx.tcx.is_diagnostic_item(sym::mem_forget, def_id) {\n                         let forgot_ty = cx.typeck_results().expr_ty(first_arg);\n \n                         if forgot_ty.ty_adt_def().map_or(false, |def| def.has_dtor(cx.tcx)) {"}, {"sha": "054937e3e36b9970bb8b9a2f0da0c6a1a61c4ff6", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_non_aggregate_primitive_type;\n-use clippy_utils::{is_default_equivalent, is_lang_ctor, match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{is_default_equivalent, is_lang_ctor, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n@@ -249,7 +249,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             if let ExprKind::Call(func, func_args) = expr.kind;\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n             if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-            if match_def_path(cx, def_id, &paths::MEM_REPLACE);\n+            if cx.tcx.is_diagnostic_item(sym::mem_replace, def_id);\n             if let [dest, src] = func_args;\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);"}, {"sha": "77d21f1d3730c66afeb7ac64f42ea735dd1e611e", "filename": "clippy_lints/src/methods/uninit_assumed_init.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,8 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{is_expr_path_def_path, paths, ty::is_uninit_value_valid_for_ty};\n+use clippy_utils::{is_expr_diagnostic_item, ty::is_uninit_value_valid_for_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::UNINIT_ASSUMED_INIT;\n \n@@ -11,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     if_chain! {\n         if let hir::ExprKind::Call(callee, args) = recv.kind;\n         if args.is_empty();\n-        if is_expr_path_def_path(cx, callee, &paths::MEM_MAYBEUNINIT_UNINIT);\n+        if is_expr_diagnostic_item(cx, callee, sym::maybe_uninit_uninit);\n         if !is_uninit_value_valid_for_ty(cx, cx.typeck_results().expr_ty_adjusted(expr));\n         then {\n             span_lint("}, {"sha": "b3988973256c4c16cad3c8306c6e43cf4916b062", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             }\n \n             if let ty::Adt(def, _) = arg_ty.kind() {\n-                if match_def_path(cx, def.did, &paths::MEM_MANUALLY_DROP) {\n+                if def.is_manually_drop() {\n                     continue;\n                 }\n             }"}, {"sha": "3d7dc49b406a6cec8f294dbfb9ef99332279c5ad", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -44,8 +45,7 @@ fn get_size_of_ty<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted:\n                 if !inverted;\n                 if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n                 if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n-                if match_def_path(cx, def_id, &paths::MEM_SIZE_OF)\n-                    || match_def_path(cx, def_id, &paths::MEM_SIZE_OF_VAL);\n+                if matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::mem_size_of | sym::mem_size_of_val));\n                 then {\n                     cx.typeck_results().node_substs(count_func.hir_id).types().next()\n                 } else {"}, {"sha": "db652766705c4989532ee74bcdc07c50045f9f0e", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::path_res;\n use clippy_utils::ty::is_type_lang_item;\n-use clippy_utils::{match_function_call, paths};\n-use rustc_hir::{lang_items, Expr};\n+use rustc_hir::{lang_items, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -38,9 +39,12 @@ declare_lint_pass!(UndroppedManuallyDrops => [UNDROPPED_MANUALLY_DROPS]);\n \n impl<'tcx> LateLintPass<'tcx> for UndroppedManuallyDrops {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some([arg_0, ..]) = match_function_call(cx, expr, &paths::DROP) {\n+        if_chain! {\n+            if let ExprKind::Call(fun, [arg_0, ..]) = expr.kind;\n+            if path_res(cx, fun).opt_def_id() == cx.tcx.get_diagnostic_item(sym::mem_drop);\n             let ty = cx.typeck_results().expr_ty(arg_0);\n-            if is_type_lang_item(cx, ty, lang_items::LangItem::ManuallyDrop) {\n+            if is_type_lang_item(cx, ty, lang_items::LangItem::ManuallyDrop);\n+            then {\n                 span_lint_and_help(\n                     cx,\n                     UNDROPPED_MANUALLY_DROPS,"}, {"sha": "e7d4c5a49521d9ae21cec7b51e7512a5606630c0", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -1,7 +1,6 @@\n #![allow(clippy::similar_names)] // `expr` and `expn`\n \n use crate::visitors::expr_visitor_no_bodies;\n-use crate::{match_def_path, paths};\n \n use arrayvec::ArrayVec;\n use if_chain::if_chain;\n@@ -14,29 +13,31 @@ use rustc_span::hygiene::{self, MacroKind, SyntaxContext};\n use rustc_span::{sym, ExpnData, ExpnId, ExpnKind, Span, Symbol};\n use std::ops::ControlFlow;\n \n-const FORMAT_MACRO_PATHS: &[&[&str]] = &[\n-    &paths::FORMAT_ARGS_MACRO,\n-    &paths::ASSERT_EQ_MACRO,\n-    &paths::ASSERT_MACRO,\n-    &paths::ASSERT_NE_MACRO,\n-    &paths::EPRINT_MACRO,\n-    &paths::EPRINTLN_MACRO,\n-    &paths::PRINT_MACRO,\n-    &paths::PRINTLN_MACRO,\n-    &paths::WRITE_MACRO,\n-    &paths::WRITELN_MACRO,\n+const FORMAT_MACRO_DIAG_ITEMS: &[Symbol] = &[\n+    sym::assert_eq_macro,\n+    sym::assert_macro,\n+    sym::assert_ne_macro,\n+    sym::debug_assert_eq_macro,\n+    sym::debug_assert_macro,\n+    sym::debug_assert_ne_macro,\n+    sym::eprint_macro,\n+    sym::eprintln_macro,\n+    sym::format_args_macro,\n+    sym::format_macro,\n+    sym::print_macro,\n+    sym::println_macro,\n+    sym::std_panic_macro,\n+    sym::write_macro,\n+    sym::writeln_macro,\n ];\n \n-const FORMAT_MACRO_DIAG_ITEMS: &[Symbol] = &[sym::format_macro, sym::std_panic_macro];\n-\n /// Returns true if a given Macro `DefId` is a format macro (e.g. `println!`)\n pub fn is_format_macro(cx: &LateContext<'_>, macro_def_id: DefId) -> bool {\n-    FORMAT_MACRO_PATHS\n-        .iter()\n-        .any(|path| match_def_path(cx, macro_def_id, path))\n-        || FORMAT_MACRO_DIAG_ITEMS\n-            .iter()\n-            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, macro_def_id))\n+    if let Some(name) = cx.tcx.get_diagnostic_name(macro_def_id) {\n+        FORMAT_MACRO_DIAG_ITEMS.contains(&name)\n+    } else {\n+        false\n+    }\n }\n \n /// A macro call, like `vec![1, 2, 3]`."}, {"sha": "2778e30388e263ae9aca921617cf023cb69ef2bf", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4417f78e91eca7b2de09a820ea29efc0b2629901/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=4417f78e91eca7b2de09a820ea29efc0b2629901", "patch": "@@ -16,44 +16,27 @@ pub const APPLICABILITY_VALUES: [[&str; 3]; 4] = [\n #[cfg(feature = \"internal\")]\n pub const DIAGNOSTIC_BUILDER: [&str; 3] = [\"rustc_errors\", \"diagnostic_builder\", \"DiagnosticBuilder\"];\n pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const ASSERT_EQ_MACRO: [&str; 3] = [\"core\", \"macros\", \"assert_eq\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const ASSERT_MACRO: [&str; 4] = [\"core\", \"macros\", \"builtin\", \"assert\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const ASSERT_NE_MACRO: [&str; 3] = [\"core\", \"macros\", \"assert_ne\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n-/// Preferably use the diagnostic item `sym::Borrow` where possible\n-pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n-pub const BORROW_MUT_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"BorrowMut\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n-pub const DEBUG_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Debug\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n /// Preferably use the diagnostic item `sym::deref_method` where possible\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DIR_BUILDER: [&str; 3] = [\"std\", \"fs\", \"DirBuilder\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n-pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n #[cfg(feature = \"internal\")]\n pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const EPRINT_MACRO: [&str; 3] = [\"std\", \"macros\", \"eprint\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const EPRINTLN_MACRO: [&str; 3] = [\"std\", \"macros\", \"eprintln\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n pub const F64_EPSILON: [&str; 4] = [\"core\", \"f64\", \"<impl f64>\", \"EPSILON\"];\n pub const FILE: [&str; 3] = [\"std\", \"fs\", \"File\"];\n pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const FORMAT_ARGS_MACRO: [&str; 4] = [\"core\", \"macros\", \"builtin\", \"format_args\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\", \"from_iter\"];\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n@@ -85,17 +68,8 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n #[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n-pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n-pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n-pub const MEM_MANUALLY_DROP: [&str; 4] = [\"core\", \"mem\", \"manually_drop\", \"ManuallyDrop\"];\n-pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n-pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n-pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n-pub const MEM_SIZE_OF: [&str; 3] = [\"core\", \"mem\", \"size_of\"];\n-pub const MEM_SIZE_OF_VAL: [&str; 3] = [\"core\", \"mem\", \"size_of_val\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n-pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n /// Preferably use the diagnostic item `sym::Option` where possible\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n@@ -116,10 +90,6 @@ pub const PERMISSIONS_FROM_MODE: [&str; 6] = [\"std\", \"os\", \"unix\", \"fs\", \"Permis\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const PRINT_MACRO: [&str; 3] = [\"std\", \"macros\", \"print\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const PRINTLN_MACRO: [&str; 3] = [\"std\", \"macros\", \"println\"];\n pub const PTR_COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const PTR_COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n@@ -200,8 +170,4 @@ pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const WRITE_MACRO: [&str; 3] = [\"core\", \"macros\", \"write\"];\n-#[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n-pub const WRITELN_MACRO: [&str; 3] = [\"core\", \"macros\", \"writeln\"];\n pub const PTR_NON_NULL: [&str; 4] = [\"core\", \"ptr\", \"non_null\", \"NonNull\"];"}]}