{"sha": "771c2c6986add82216ff3900d42b5d0762d7917f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MWMyYzY5ODZhZGQ4MjIxNmZmMzkwMGQ0MmI1ZDA3NjJkNzkxN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T04:37:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T04:37:12Z"}, "message": "Auto merge of #88559 - bjorn3:archive_logic_dedup, r=cjgillot\n\nMove add_rlib and add_native_library to cg_ssa\n\nThis deduplicates logic between codegen backends.\n\ncc `@antoyo` and `@khyperia` for cg_gcc and rust-gpu.", "tree": {"sha": "f9d4288cac4117db747eb473d2e480b85d6f5da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d4288cac4117db747eb473d2e480b85d6f5da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/771c2c6986add82216ff3900d42b5d0762d7917f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/771c2c6986add82216ff3900d42b5d0762d7917f", "html_url": "https://github.com/rust-lang/rust/commit/771c2c6986add82216ff3900d42b5d0762d7917f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/771c2c6986add82216ff3900d42b5d0762d7917f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e930360c4a4596bec4440a9bfb91757054b0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e930360c4a4596bec4440a9bfb91757054b0b3", "html_url": "https://github.com/rust-lang/rust/commit/e7e930360c4a4596bec4440a9bfb91757054b0b3"}, {"sha": "677c786109a5b47b3f143847e278689687d63abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/677c786109a5b47b3f143847e278689687d63abb", "html_url": "https://github.com/rust-lang/rust/commit/677c786109a5b47b3f143847e278689687d63abb"}], "stats": {"total": 83, "additions": 19, "deletions": 64}, "files": [{"sha": "0fa228fc944a160c226f21c2ebec660c1192ba7c", "filename": "src/archive.rs", "status": "modified", "additions": 19, "deletions": 64, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/771c2c6986add82216ff3900d42b5d0762d7917f/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771c2c6986add82216ff3900d42b5d0762d7917f/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=771c2c6986add82216ff3900d42b5d0762d7917f", "patch": "@@ -4,8 +4,7 @@ use std::collections::BTreeMap;\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n-use rustc_codegen_ssa::METADATA_FILENAME;\n+use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n use rustc_session::Session;\n \n use object::{Object, ObjectSymbol, SymbolKind};\n@@ -19,7 +18,6 @@ enum ArchiveEntry {\n pub(crate) struct ArArchiveBuilder<'a> {\n     sess: &'a Session,\n     dst: PathBuf,\n-    lib_search_paths: Vec<PathBuf>,\n     use_gnu_style_archive: bool,\n     no_builtin_ranlib: bool,\n \n@@ -31,8 +29,6 @@ pub(crate) struct ArArchiveBuilder<'a> {\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n-        use rustc_codegen_ssa::back::link::archive_search_paths;\n-\n         let (src_archives, entries) = if let Some(input) = input {\n             let mut archive = ar::Archive::new(File::open(input).unwrap());\n             let mut entries = Vec::new();\n@@ -55,7 +51,6 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ArArchiveBuilder {\n             sess,\n             dst: output.to_path_buf(),\n-            lib_search_paths: archive_search_paths(sess),\n             use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n             no_builtin_ranlib: sess.target.is_like_osx,\n@@ -85,42 +80,27 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ));\n     }\n \n-    fn add_native_library(&mut self, name: rustc_span::symbol::Symbol, verbatim: bool) {\n-        let location = find_library(name, verbatim, &self.lib_search_paths, self.sess);\n-        self.add_archive(location.clone(), |_| false).unwrap_or_else(|e| {\n-            panic!(\"failed to add native library {}: {}\", location.to_string_lossy(), e);\n-        });\n-    }\n-\n-    fn add_rlib(\n-        &mut self,\n-        rlib: &Path,\n-        name: &str,\n-        lto: bool,\n-        skip_objects: bool,\n-    ) -> std::io::Result<()> {\n-        let obj_start = name.to_owned();\n-\n-        self.add_archive(rlib.to_owned(), move |fname: &str| {\n-            // Ignore metadata files, no matter the name.\n-            if fname == METADATA_FILENAME {\n-                return true;\n-            }\n-\n-            // Don't include Rust objects if LTO is enabled\n-            if lto && fname.starts_with(&obj_start) && fname.ends_with(\".o\") {\n-                return true;\n-            }\n+    fn add_archive<F>(&mut self, archive_path: &Path, mut skip: F) -> std::io::Result<()>\n+    where\n+        F: FnMut(&str) -> bool + 'static,\n+    {\n+        let mut archive = ar::Archive::new(std::fs::File::open(&archive_path)?);\n+        let archive_index = self.src_archives.len();\n \n-            // Otherwise if this is *not* a rust object and we're skipping\n-            // objects then skip this file\n-            if skip_objects && (!fname.starts_with(&obj_start) || !fname.ends_with(\".o\")) {\n-                return true;\n+        let mut i = 0;\n+        while let Some(entry) = archive.next_entry() {\n+            let entry = entry?;\n+            let file_name = String::from_utf8(entry.header().identifier().to_vec())\n+                .map_err(|err| std::io::Error::new(std::io::ErrorKind::InvalidData, err))?;\n+            if !skip(&file_name) {\n+                self.entries\n+                    .push((file_name, ArchiveEntry::FromArchive { archive_index, entry_index: i }));\n             }\n+            i += 1;\n+        }\n \n-            // ok, don't skip this\n-            false\n-        })\n+        self.src_archives.push((archive_path.to_owned(), archive));\n+        Ok(())\n     }\n \n     fn update_symbols(&mut self) {}\n@@ -264,28 +244,3 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         bug!(\"injecting dll imports is not supported\");\n     }\n }\n-\n-impl<'a> ArArchiveBuilder<'a> {\n-    fn add_archive<F>(&mut self, archive_path: PathBuf, mut skip: F) -> std::io::Result<()>\n-    where\n-        F: FnMut(&str) -> bool + 'static,\n-    {\n-        let mut archive = ar::Archive::new(std::fs::File::open(&archive_path)?);\n-        let archive_index = self.src_archives.len();\n-\n-        let mut i = 0;\n-        while let Some(entry) = archive.next_entry() {\n-            let entry = entry?;\n-            let file_name = String::from_utf8(entry.header().identifier().to_vec())\n-                .map_err(|err| std::io::Error::new(std::io::ErrorKind::InvalidData, err))?;\n-            if !skip(&file_name) {\n-                self.entries\n-                    .push((file_name, ArchiveEntry::FromArchive { archive_index, entry_index: i }));\n-            }\n-            i += 1;\n-        }\n-\n-        self.src_archives.push((archive_path, archive));\n-        Ok(())\n-    }\n-}"}]}