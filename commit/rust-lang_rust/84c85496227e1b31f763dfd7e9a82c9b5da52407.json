{"sha": "84c85496227e1b31f763dfd7e9a82c9b5da52407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Yzg1NDk2MjI3ZTFiMzFmNzYzZGZkN2U5YTgyYzliNWRhNTI0MDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-22T23:35:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T21:21:15Z"}, "message": "core: Replace future_pipe with pipe::oneshot", "tree": {"sha": "80d3a00d359d247b77be539d945238d0b450801a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d3a00d359d247b77be539d945238d0b450801a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c85496227e1b31f763dfd7e9a82c9b5da52407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c85496227e1b31f763dfd7e9a82c9b5da52407", "html_url": "https://github.com/rust-lang/rust/commit/84c85496227e1b31f763dfd7e9a82c9b5da52407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c85496227e1b31f763dfd7e9a82c9b5da52407/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f9925fabbc738f7be0df8148c99fae3e975bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f9925fabbc738f7be0df8148c99fae3e975bb1", "html_url": "https://github.com/rust-lang/rust/commit/50f9925fabbc738f7be0df8148c99fae3e975bb1"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "503e915cf8783f78b191864bf2ce047005c648bb", "filename": "src/libcore/future.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84c85496227e1b31f763dfd7e9a82c9b5da52407/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c85496227e1b31f763dfd7e9a82c9b5da52407/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=84c85496227e1b31f763dfd7e9a82c9b5da52407", "patch": "@@ -17,7 +17,7 @@\n  */\n \n use either::Either;\n-use pipes::recv;\n+use pipes::{recv, oneshot, ChanOne, PortOne, send_one, recv_one};\n use cast::copy_lifetime;\n \n #[doc = \"The future type\"]\n@@ -67,7 +67,7 @@ pub fn from_value<A>(val: A) -> Future<A> {\n     Future {state: Forced(~(move val))}\n }\n \n-pub fn from_port<A:Send>(port: future_pipe::server::waiting<A>) ->\n+pub fn from_port<A:Send>(port: PortOne<A>) ->\n         Future<A> {\n     /*!\n      * Create a future from a port\n@@ -82,7 +82,7 @@ pub fn from_port<A:Send>(port: future_pipe::server::waiting<A>) ->\n         port_ <-> *port;\n         let port = option::unwrap(move port_);\n         match recv(move port) {\n-            future_pipe::completed(move data) => move data\n+            oneshot::send(move data) => move data\n         }\n     }\n }\n@@ -107,12 +107,12 @@ pub fn spawn<A:Send>(blk: fn~() -> A) -> Future<A> {\n      * value of the future.\n      */\n \n-    let (chan, port) = future_pipe::init();\n+    let (chan, port) = oneshot::init();\n \n     let chan = ~mut Some(move chan);\n     do task::spawn |move blk, move chan| {\n         let chan = option::swap_unwrap(&mut *chan);\n-        future_pipe::client::completed(move chan, blk());\n+        send_one(move chan, blk());\n     }\n \n     return from_port(move port);\n@@ -168,12 +168,6 @@ pub fn with<A,B>(future: &Future<A>, blk: fn((&A)) -> B) -> B {\n     blk(get_ref(future))\n }\n \n-proto! future_pipe (\n-    waiting:send<T:Send> {\n-        completed(T) -> !\n-    }\n-)\n-\n #[allow(non_implicitly_copyable_typarams)]\n pub mod test {\n     #[test]\n@@ -184,8 +178,8 @@ pub mod test {\n \n     #[test]\n     pub fn test_from_port() {\n-        let (ch, po) = future_pipe::init();\n-        future_pipe::client::completed(move ch, ~\"whale\");\n+        let (ch, po) = oneshot::init();\n+        send_one(move ch, ~\"whale\");\n         let f = from_port(move po);\n         assert get(&f) == ~\"whale\";\n     }"}]}