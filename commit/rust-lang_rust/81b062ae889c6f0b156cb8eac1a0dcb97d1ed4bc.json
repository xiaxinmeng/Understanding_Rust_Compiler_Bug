{"sha": "81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjA2MmFlODg5YzZmMGIxNTZjYjhlYWMxYTBkY2I5N2QxZWQ0YmM=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-07T22:47:32Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-09T14:00:21Z"}, "message": "Fix wording", "tree": {"sha": "c032195c07f8bd5b06df2d3bae096a226b44ef9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c032195c07f8bd5b06df2d3bae096a226b44ef9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "html_url": "https://github.com/rust-lang/rust/commit/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36eb5442bd79b199b506e7912f72aade202a1ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/36eb5442bd79b199b506e7912f72aade202a1ee1", "html_url": "https://github.com/rust-lang/rust/commit/36eb5442bd79b199b506e7912f72aade202a1ee1"}], "stats": {"total": 647, "additions": 250, "deletions": 397}, "files": [{"sha": "635b411f0e4f0d88972bf84f554707f5bcc3f6ca", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -498,10 +498,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let local_def_id = closure_def_id.expect_local();\n             let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+            let closure_span = self.tcx.hir().span(closure_hir_id);\n+            let closure_head_span = self.tcx.sess.source_map().guess_head_span(closure_span);\n             self.tcx.struct_span_lint_hir(\n                 lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n                 closure_hir_id,\n-                span,\n+                closure_head_span,\n                 |lint| {\n                     let mut diagnostics_builder = lint.build(\n                         format!(\n@@ -512,6 +514,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                     for (var_hir_id, diagnostics_info) in need_migrations.iter() {\n                         let mut captured_names = format!(\"\");\n+                        // Label every Span which are responsible for the captured values\n                         for (captured_hir_id, captured_name) in diagnostics_info.iter() {\n                             if let Some(captured_hir_id) = captured_hir_id {\n                                 let cause_span = self.tcx.hir().span(*captured_hir_id);\n@@ -527,6 +530,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n \n+                        // Add a label pointing to where a closure and it's captured variables affected by drop order are dropped\n                         if reasons.contains(\"drop order\") {\n                             let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n \n@@ -536,13 +540,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ));\n                         }\n \n-                        if reasons.contains(\"closure trait implementation\") {\n-                            let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n-                            let closure_ending_span = self.tcx.sess.source_map().guess_head_span(closure_body_span).shrink_to_lo();\n+                        // Add a label explaining why a closure no longer implements a trait\n+                        if reasons.contains(\"trait implementation\") {\n+                            let missing_trait = &reasons[..reasons.find(\"trait implementation\").unwrap() - 1];\n \n-                            let missing_trait = &reasons[..reasons.find(\"closure trait implementation\").unwrap() - 1];\n-\n-                            diagnostics_builder.span_label(closure_ending_span, format!(\"in Rust 2018, this closure would implement {} as `{}` implements {}, but in Rust 2021, this closure will no longer implement {} as {} does not implement {}\",\n+                            diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure would implement {} as `{}` implements {}, but in Rust 2021, this closure would no longer implement {} as {} does not implement {}\",\n                                 missing_trait,\n                                 self.tcx.hir().name(*var_hir_id),\n                                 missing_trait,\n@@ -598,7 +600,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if auto_trait_reasons.len() > 0 {\n             reasons = format!(\n-                \"{} closure trait implementation\",\n+                \"{} trait implementation for closure\",\n                 auto_trait_reasons.clone().into_iter().collect::<Vec<&str>>().join(\", \")\n             );\n         }\n@@ -1386,24 +1388,19 @@ fn drop_location_span(tcx: TyCtxt<'tcx>, hir_id: &hir::HirId) -> Span {\n     let owner_id = tcx.hir().get_enclosing_scope(*hir_id).unwrap();\n \n     let owner_node = tcx.hir().get(owner_id);\n-    match owner_node {\n+    let owner_span = match owner_node {\n         hir::Node::Item(item) => match item.kind {\n-            hir::ItemKind::Fn(_, _, owner_id) => {\n-                let owner_span = tcx.hir().span(owner_id.hir_id);\n-                tcx.sess.source_map().end_point(owner_span)\n-            }\n+            hir::ItemKind::Fn(_, _, owner_id) => tcx.hir().span(owner_id.hir_id),\n             _ => {\n                 bug!(\"Drop location span error: need to handle more ItemKind {:?}\", item.kind);\n             }\n         },\n-        hir::Node::Block(block) => {\n-            let owner_span = tcx.hir().span(block.hir_id);\n-            tcx.sess.source_map().end_point(owner_span)\n-        }\n+        hir::Node::Block(block) => tcx.hir().span(block.hir_id),\n         _ => {\n             bug!(\"Drop location span error: need to handle more Node {:?}\", owner_node);\n         }\n-    }\n+    };\n+    tcx.sess.source_map().end_point(owner_span)\n }\n \n struct InferBorrowKind<'a, 'tcx> {"}, {"sha": "42863b440fc1d4cdf9f50c21476add1ce0e26702", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -12,8 +12,8 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Send` closure trait implementation\n-        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n+        //~^ ERROR: `Send` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n@@ -32,8 +32,8 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Sync`, `Send` closure trait implementation\n-        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n@@ -56,8 +56,8 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || { let _ = &f; \n-        //~^ ERROR: `Clone` closure trait implementation, and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n+        //~^ ERROR: `Clone` trait implementation for closure, and drop order\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;"}, {"sha": "ae987f526d044d2538ea32d4e5385f7ee40d6410", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -12,8 +12,8 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Send` closure trait implementation\n-        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n+        //~^ ERROR: `Send` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n@@ -32,8 +32,8 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Sync`, `Send` closure trait implementation\n-        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n@@ -56,8 +56,8 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || {\n-        //~^ ERROR: `Clone` closure trait implementation, and drop order\n-        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n+        //~^ ERROR: `Clone` trait implementation for closure, and drop order\n+        //~| NOTE: in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;"}, {"sha": "2af85852c01a01e17060fcbfa371f9c0be953c9c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,19 +1,11 @@\n-error: changes to closure capture in Rust 2021 will affect `Send` closure trait implementation\n+error: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure\n   --> $DIR/auto_traits.rs:14:19\n    |\n-LL |       thread::spawn(move || unsafe {\n-   |                     ^       - in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n-   |  ___________________|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         *fptr.0 = 20;\n-   | |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     thread::spawn(move || unsafe {\n+   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n+...\n+LL |         *fptr.0 = 20;\n+   |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n    |\n note: the lint level is defined here\n   --> $DIR/auto_traits.rs:2:9\n@@ -31,22 +23,14 @@ LL |\n LL |         *fptr.0 = 20;\n  ...\n \n-error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` closure trait implementation\n+error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n   --> $DIR/auto_traits.rs:34:19\n    |\n-LL |       thread::spawn(move || unsafe {\n-   |                     ^       - in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n-   |  ___________________|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         *fptr.0.0 = 20;\n-   | |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     thread::spawn(move || unsafe {\n+   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+...\n+LL |         *fptr.0.0 = 20;\n+   |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n@@ -59,26 +43,17 @@ LL |\n LL |         *fptr.0.0 = 20;\n  ...\n \n-error: changes to closure capture in Rust 2021 will affect `Clone` closure trait implementation, and drop order\n+error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure, and drop order\n   --> $DIR/auto_traits.rs:58:13\n    |\n-LL |       let c = || {\n-   |               ^  - in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n-   |  _____________|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let f_1 = f.1;\n-   | |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n-LL | |\n-LL | |         println!(\"{:?}\", f_1.0);\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^ in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`\n+...\n+LL |         let f_1 = f.1;\n+   |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n ...\n-LL |   }\n-   |   - in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured"}, {"sha": "e9e4794cff5f797c76a2af945130ebf14ebc871a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 70, "deletions": 111, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,30 +1,24 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:15:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         let _t1 = t1.0;\n-   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n-LL | |\n-LL | |         let _t2 = t2.0;\n-   | |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   -\n-   |   |\n-   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-   |   in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL |\n+LL |         let _t1 = t1.0;\n+   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+LL |\n+LL |         let _t2 = t2.0;\n+   |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+...\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/insignificant_drop.rs:3:9\n@@ -45,26 +39,20 @@ LL |         let _t = t.0;\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:41:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         let _t1 = t1.0;\n-   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n-LL | |\n-LL | |         let _t2 = t2;\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   -\n-   |   |\n-   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL |\n+LL |         let _t1 = t1.0;\n+   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+...\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -80,20 +68,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:62:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         println!(\"{}\", t1.1);\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -109,20 +91,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:83:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         let _t1 = t1.0;\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -138,20 +114,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:104:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         let _s = s.0;\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -167,25 +137,19 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:122:13\n    |\n-LL |       let c = move || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         println!(\"{} {}\", t1.1, t.1);\n-   | |                           ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n-   | |                           |\n-   | |                           in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n-LL | |\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = move || {\n+   |             ^^^^^^^\n ...\n-LL |   }\n-   |   -\n-   |   |\n-   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n-   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+LL |         println!(\"{} {}\", t1.1, t.1);\n+   |                           ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   |                           |\n+   |                           in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n+...\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -201,19 +165,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop.rs:142:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "1e97ca34d162e3f3c58f4ac27514a3f9701ab15c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,19 +1,14 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop_attr_migrations.rs:37:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n@@ -34,19 +29,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/insignificant_drop_attr_migrations.rs:57:13\n    |\n-LL |       let c = move || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.1;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = move || {\n+   |             ^^^^^^^\n+...\n+LL |         let _t = t.1;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "f8f72d1580ca9df798300436768020562789e41e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,19 +1,14 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/migrations_rustfix.rs:19:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9"}, {"sha": "f24804018cd85ca10427cb560f13c865089cfd43", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -18,8 +18,8 @@ where\n {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || { let _ = &f; \n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` closure trait implementation\n-        //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()"}, {"sha": "6a6a51c51322d8a3c163eb0a49e8ab378153be06", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -18,8 +18,8 @@ where\n {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` closure trait implementation\n-        //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n+        //~| NOTE: in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()"}, {"sha": "6ee0d0d252aba783b11a1747133ca92481651fbe", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,19 +1,11 @@\n-error: changes to closure capture in Rust 2021 will affect `UnwindSafe`, `RefUnwindSafe` closure trait implementation\n+error: changes to closure capture in Rust 2021 will affect `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n   --> $DIR/mir_calls_to_shims.rs:20:38\n    |\n-LL |       let result = panic::catch_unwind(move || {\n-   |                                        ^       - in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n-   |  ______________________________________|\n-   | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         f.0()\n-   | |         --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     let result = panic::catch_unwind(move || {\n+   |                                      ^^^^^^^ in Rust 2018, this closure would implement `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure would no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+...\n+LL |         f.0()\n+   |         --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n    |\n note: the lint level is defined here\n   --> $DIR/mir_calls_to_shims.rs:3:9"}, {"sha": "153c0d6b686710460c4c3b171d7b3fa4bb28ab71", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,18 +1,14 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/precise.rs:19:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |         let _t = &t.1;\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n@@ -33,21 +29,18 @@ LL |     };\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/precise.rs:41:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |         let _x = u.0.0;\n-   | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n-LL | |         let _x = u.0.1;\n-   | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n-LL | |         let _x = u.1.0;\n-   | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _x = u.0.0;\n+   |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.0`\n+LL |         let _x = u.0.1;\n+   |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.0.1`\n+LL |         let _x = u.1.0;\n+   |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n ...\n-LL |   }\n-   |   - in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1`, `u.0.0`, `u.1.0` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1`, `u.0.0`, `u.1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured"}, {"sha": "b2b9ae8fd12f51b4274ea3b549821e2443d26b36", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 84, "deletions": 132, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=81b062ae889c6f0b156cb8eac1a0dcb97d1ed4bc", "patch": "@@ -1,29 +1,24 @@\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:25:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         let _t1 = t1.0;\n-   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n-LL | |\n-LL | |         let _t2 = t2.0;\n-   | |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   -\n-   |   |\n-   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n-   |   in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL |\n+LL |         let _t1 = t1.0;\n+   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+LL |\n+LL |         let _t2 = t2.0;\n+   |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`\n+...\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n@@ -44,26 +39,20 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:50:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         let _t1 = t1.0;\n-   | |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n-LL | |\n-LL | |         let _t2 = t2;\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   -\n-   |   |\n-   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n-   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+LL |\n+LL |         let _t1 = t1.0;\n+   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`\n+...\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -79,20 +68,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:71:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |         println!(\"{:?}\", t1.1);\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -108,19 +91,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:91:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n+...\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -136,19 +114,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:109:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.0;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+LL |         let _t = t.0;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -164,19 +137,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:125:13\n    |\n-LL |       let c = || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         let _t = t.1;\n-   | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = || {\n+   |             ^^\n ...\n-LL |   }\n-   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+LL |         let _t = t.1;\n+   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -192,25 +160,19 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:143:13\n    |\n-LL |       let c = move || {\n-   |  _____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         println!(\"{:?} {:?}\", t1.1, t.1);\n-   | |                               ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n-   | |                               |\n-   | |                               in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n-LL | |\n-LL | |\n-LL | |     };\n-   | |_____^\n+LL |     let c = move || {\n+   |             ^^^^^^^\n+...\n+LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n+   |                               ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`\n+   |                               |\n+   |                               in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`\n ...\n-LL |   }\n-   |   -\n-   |   |\n-   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n-   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+LL | }\n+   | -\n+   | |\n+   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -226,19 +188,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:163:21\n    |\n-LL |               let c = || {\n-   |  _____________________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |                 tuple.0;\n-   | |                 ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n-LL | |\n-LL | |             };\n-   | |_____________^\n+LL |             let c = || {\n+   |                     ^^\n+...\n+LL |                 tuple.0;\n+   |                 ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n ...\n-LL |           }\n-   |           - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+LL |         }\n+   |         - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured\n@@ -254,19 +211,14 @@ LL |\n error: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/significant_drop.rs:181:17\n    |\n-LL |           let c = || {\n-   |  _________________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |             tuple.0;\n-   | |             ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n-LL | |\n-LL | |         };\n-   | |_________^\n+LL |         let c = || {\n+   |                 ^^\n+...\n+LL |             tuple.0;\n+   |             ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n ...\n-LL |       };\n-   |       - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+LL |     };\n+   |     - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `tuple` to be fully captured"}]}