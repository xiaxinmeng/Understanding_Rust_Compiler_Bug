{"sha": "f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTg2YmFjMmFiODNiNDE5NTZmZGIyYTIyYzhhM2VhMjU2MDJhODA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-24T10:46:36Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T09:01:34Z"}, "message": "Handle comment at the last element in write_list", "tree": {"sha": "2ed87cabd3c9779b2d332ded8a4c19c6b70cac90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ed87cabd3c9779b2d332ded8a4c19c6b70cac90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "html_url": "https://github.com/rust-lang/rust/commit/f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "html_url": "https://github.com/rust-lang/rust/commit/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb"}], "stats": {"total": 203, "additions": 72, "deletions": 131}, "files": [{"sha": "4bea5f4c0e1994ae479b24e0a727d68865809098", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "patch": "@@ -16,12 +16,12 @@ use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic, ListItem, format_item_list, struct_lit_shape,\n+            DefinitiveListTactic, definitive_tactic, ListItem, struct_lit_shape,\n             struct_lit_tactic, shape_for_tactic, struct_lit_formatting};\n use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n-            colon_spaces, contains_skip, mk_sp, last_line_extendable};\n+            colon_spaces, contains_skip, mk_sp, last_line_extendable, paren_overhead};\n use visitor::FmtVisitor;\n use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -2217,7 +2217,7 @@ where\n             context.config.trailing_comma()\n         },\n         shape: shape,\n-        ends_with_newline: false,\n+        ends_with_newline: context.use_block_indent() && tactic == DefinitiveListTactic::Vertical,\n         config: context.config,\n     };\n \n@@ -2436,14 +2436,6 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n     }\n }\n \n-fn paren_overhead(context: &RewriteContext) -> usize {\n-    if context.config.spaces_within_parens() {\n-        4\n-    } else {\n-        2\n-    }\n-}\n-\n pub fn wrap_args_with_parens(\n     context: &RewriteContext,\n     args_str: &str,\n@@ -2813,7 +2805,21 @@ where\n         list_lo,\n         span.hi - BytePos(1),\n     );\n-    let list_str = try_opt!(format_item_list(items, nested_shape, context.config));\n+    let item_vec: Vec<_> = items.collect();\n+    let tactic = definitive_tactic(\n+        &item_vec,\n+        ListTactic::HorizontalVertical,\n+        nested_shape.width,\n+    );\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        shape: shape,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n+    let list_str = try_opt!(write_list(&item_vec, &fmt));\n \n     if context.config.spaces_within_parens() && list_str.len() > 0 {\n         Some(format!(\"( {} )\", list_str))\n@@ -3023,3 +3029,14 @@ impl<'a> ToExpr for TuplePatField<'a> {\n         can_be_overflowed_pat(context, self, len)\n     }\n }\n+\n+impl<'a> ToExpr for ast::StructField {\n+    fn to_expr(&self) -> Option<&ast::Expr> {\n+        None\n+    }\n+\n+    #[allow(unused_variables)]\n+    fn can_be_overflowed(&self, context: &RewriteContext, len: usize) -> bool {\n+        false\n+    }\n+}"}, {"sha": "aa19e4238a500a2674638bf0d27957e6ee6bfc41", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 90, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "patch": "@@ -15,9 +15,10 @@ use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n             last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n             trimmed_last_line_width, colon_spaces, mk_sp};\n-use lists::{write_list, itemize_list, definitive_tactic, ListItem, ListFormatting,\n-            SeparatorTactic, DefinitiveListTactic, ListTactic};\n-use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, ExprType};\n+use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n+            DefinitiveListTactic, ListTactic, definitive_tactic};\n+use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n+           rewrite_call_inner, ExprType};\n use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n@@ -1216,91 +1217,19 @@ fn format_tuple_struct(\n         }\n         result.push(')');\n     } else {\n-        let (tactic, item_indent) = match context.config.fn_args_layout() {\n-            IndentStyle::Visual => {\n-                // 1 = `(`\n-                (\n-                    ListTactic::HorizontalVertical,\n-                    offset.block_only() + result.len() + 1,\n-                )\n-            }\n-            IndentStyle::Block => {\n-                (\n-                    if result.contains('\\n') {\n-                        ListTactic::Vertical\n-                    } else {\n-                        ListTactic::HorizontalVertical\n-                    },\n-                    offset.block_only().block_indent(&context.config),\n-                )\n-            }\n-        };\n         // 3 = `();`\n-        let item_budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(item_indent.width() + 3)\n-        );\n-\n-        let items = itemize_list(\n-            context.codemap,\n-            fields.iter(),\n-            \")\",\n-            |field| {\n-                // Include attributes and doc comments, if present\n-                if !field.attrs.is_empty() {\n-                    field.attrs[0].span.lo\n-                } else {\n-                    field.span.lo\n-                }\n-            },\n-            |field| field.ty.span.hi,\n-            |field| {\n-                rewrite_struct_field(context, field, Shape::legacy(item_budget, item_indent), 0)\n-            },\n-            context.codemap.span_after(span, \"(\"),\n-            span.hi,\n-        );\n-        let body_budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(offset.block_only().width() + last_line_width(&result) + 3)\n+        let body = try_opt!(\n+            rewrite_call_inner(\n+                context,\n+                \"\",\n+                &fields.iter().map(|field| field).collect::<Vec<_>>()[..],\n+                span,\n+                Shape::legacy(context.budget(last_line_width(&result) + 3), offset),\n+                context.config.fn_call_width(),\n+                false,\n+            ).ok()\n         );\n-\n-        let item_vec: Vec<_> = items.collect();\n-        let tactic = definitive_tactic(&item_vec, tactic, body_budget);\n-        let fmt = ListFormatting {\n-            tactic: tactic,\n-            separator: \",\",\n-            trailing_separator: context.config.trailing_comma(),\n-            shape: Shape::indented(item_indent, context.config),\n-            ends_with_newline: false,\n-            config: context.config,\n-        };\n-        let body = try_opt!(write_list(&item_vec, &fmt));\n-\n-        if context.config.fn_args_layout() == IndentStyle::Visual || !body.contains('\\n') {\n-            result.push('(');\n-            if context.config.spaces_within_parens() && body.len() > 0 {\n-                result.push(' ');\n-            }\n-\n-            result.push_str(&body);\n-\n-            if context.config.spaces_within_parens() && body.len() > 0 {\n-                result.push(' ');\n-            }\n-            result.push(')');\n-        } else {\n-            result.push_str(\"(\\n\");\n-            result.push_str(&item_indent.to_string(&context.config));\n-            result.push_str(&body);\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(&context.config));\n-            result.push(')');\n-        }\n+        result.push_str(&body);\n     }\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n@@ -2422,7 +2351,7 @@ fn rewrite_generics(\n     span: Span,\n ) -> Option<String> {\n     let g_shape = try_opt!(generics_shape_from_config(context.config, shape, 0));\n-    let one_line_width = try_opt!(shape.width.checked_sub(2));\n+    let one_line_width = shape.width.checked_sub(2).unwrap_or(0);\n     rewrite_generics_inner(context, generics, g_shape, one_line_width, span).or_else(|| {\n         rewrite_generics_inner(context, generics, g_shape, 0, span)\n     })\n@@ -2497,16 +2426,19 @@ where\n {\n     let item_vec = items.collect::<Vec<_>>();\n \n+    let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget);\n+    let ends_with_newline = context.config.generics_indent() == IndentStyle::Block &&\n+        tactic == DefinitiveListTactic::Vertical;\n     let fmt = ListFormatting {\n-        tactic: definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget),\n+        tactic: tactic,\n         separator: \",\",\n         trailing_separator: if context.config.generics_indent() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         shape: shape,\n-        ends_with_newline: false,\n+        ends_with_newline: ends_with_newline,\n         config: context.config,\n     };\n \n@@ -2735,8 +2667,9 @@ fn format_generics(\n     force_same_line_brace: bool,\n     offset: Indent,\n     span: Span,\n+    used_width: usize,\n ) -> Option<String> {\n-    let shape = Shape::indented(offset, context.config);\n+    let shape = Shape::legacy(context.budget(used_width + offset.width()), offset);\n     let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {"}, {"sha": "5e3d00076f7900f0e39a205eb9aa94afe0e447df", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "patch": "@@ -14,7 +14,7 @@ use std::iter::Peekable;\n use syntax::codemap::{CodeMap, BytePos};\n \n use {Indent, Shape};\n-use comment::{FindUncommented, rewrite_comment, find_comment_end};\n+use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n use utils::mk_sp;\n@@ -68,31 +68,6 @@ pub struct ListFormatting<'a> {\n     pub config: &'a Config,\n }\n \n-pub fn format_item_list<I>(items: I, shape: Shape, config: &Config) -> Option<String>\n-where\n-    I: Iterator<Item = ListItem>,\n-{\n-    list_helper(items, shape, config, ListTactic::HorizontalVertical)\n-}\n-\n-pub fn list_helper<I>(items: I, shape: Shape, config: &Config, tactic: ListTactic) -> Option<String>\n-where\n-    I: Iterator<Item = ListItem>,\n-{\n-    let item_vec: Vec<_> = items.collect();\n-    let tactic = definitive_tactic(&item_vec, tactic, shape.width);\n-    let fmt = ListFormatting {\n-        tactic: tactic,\n-        separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        shape: shape,\n-        ends_with_newline: false,\n-        config: config,\n-    };\n-\n-    write_list(&item_vec, &fmt)\n-}\n-\n impl AsRef<ListItem> for ListItem {\n     fn as_ref(&self) -> &ListItem {\n         self\n@@ -118,10 +93,13 @@ impl ListItem {\n                 .map_or(false, |s| s.contains('\\n'))\n     }\n \n-    pub fn has_line_pre_comment(&self) -> bool {\n+    pub fn has_comment(&self) -> bool {\n         self.pre_comment\n             .as_ref()\n-            .map_or(false, |comment| comment.starts_with(\"//\"))\n+            .map_or(false, |comment| comment.starts_with(\"//\")) ||\n+            self.post_comment\n+                .as_ref()\n+                .map_or(false, |comment| comment.starts_with(\"//\"))\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n@@ -150,7 +128,7 @@ where\n     let pre_line_comments = items\n         .clone()\n         .into_iter()\n-        .any(|item| item.as_ref().has_line_pre_comment());\n+        .any(|item| item.as_ref().has_comment());\n \n     let limit = match tactic {\n         _ if pre_line_comments => return DefinitiveListTactic::Vertical,"}, {"sha": "6a7167537c97893fb98b0e50af68856270d011d2", "filename": "src/rewrite.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "patch": "@@ -45,4 +45,8 @@ impl<'a> RewriteContext<'a> {\n     pub fn use_block_indent(&self) -> bool {\n         self.config.fn_call_style() == IndentStyle::Block || self.use_block\n     }\n+\n+    pub fn budget(&self, used_width: usize) -> usize {\n+        self.config.max_width().checked_sub(used_width).unwrap_or(0)\n+    }\n }"}, {"sha": "bc46316d39b8d364436d0e0a66036f5e5328cdf7", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8586bac2ab83b41956fdb2a22c8a3ea25602a80/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f8586bac2ab83b41956fdb2a22c8a3ea25602a80", "patch": "@@ -393,6 +393,15 @@ pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n     }\n }\n \n+#[inline]\n+pub fn paren_overhead(context: &RewriteContext) -> usize {\n+    if context.config.spaces_within_parens() {\n+        4\n+    } else {\n+        2\n+    }\n+}\n+\n #[test]\n fn bin_search_test() {\n     let closure = |i| match i {"}]}