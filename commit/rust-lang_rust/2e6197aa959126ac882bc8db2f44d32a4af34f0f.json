{"sha": "2e6197aa959126ac882bc8db2f44d32a4af34f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjE5N2FhOTU5MTI2YWM4ODJiYzhkYjJmNDRkMzJhNGFmMzRmMGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-19T18:56:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-19T18:57:15Z"}, "message": "rustc: Report how much time was spent to translate each function when --stats is on", "tree": {"sha": "62916352d549db5f83f45e58d5eb6669fcd546dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62916352d549db5f83f45e58d5eb6669fcd546dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6197aa959126ac882bc8db2f44d32a4af34f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6197aa959126ac882bc8db2f44d32a4af34f0f", "html_url": "https://github.com/rust-lang/rust/commit/2e6197aa959126ac882bc8db2f44d32a4af34f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6197aa959126ac882bc8db2f44d32a4af34f0f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82c9c9e79ffc01dc658f921fbae058572250cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82c9c9e79ffc01dc658f921fbae058572250cf6", "html_url": "https://github.com/rust-lang/rust/commit/b82c9c9e79ffc01dc658f921fbae058572250cf6"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "0fba8ccd2b17acad888344bbb636403c6b2a5822", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2e6197aa959126ac882bc8db2f44d32a4af34f0f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6197aa959126ac882bc8db2f44d32a4af34f0f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2e6197aa959126ac882bc8db2f44d32a4af34f0f", "patch": "@@ -22,6 +22,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n import std::fs;\n+import std::time;\n import syntax::ast;\n import syntax::walk;\n import driver::session;\n@@ -113,7 +114,8 @@ type stats =\n         mutable uint n_derived_tydescs,\n         mutable uint n_glues_created,\n         mutable uint n_null_glues,\n-        mutable uint n_real_glues);\n+        mutable uint n_real_glues,\n+        @mutable (tup(str,int)[]) fn_times);\n \n \n // Crate context.  Every crate we compile has one of these.\n@@ -693,6 +695,14 @@ fn sanitize(&str s) -> str {\n }\n \n \n+fn log_fn_time(&@crate_ctxt ccx, str name, &time::timeval start,\n+               &time::timeval end) {\n+    auto elapsed = 1000 * ((end.sec - start.sec) as int) +\n+        ((end.usec as int) - (start.usec as int)) / 1000;\n+    *ccx.stats.fn_times += ~[tup(name, elapsed)];\n+}\n+\n+\n fn decl_fn(ModuleRef llmod, &str name, uint cc, TypeRef llty) -> ValueRef {\n     let ValueRef llfn = llvm::LLVMAddFunction(llmod, str::buf(name), llty);\n     llvm::LLVMSetFunctionCallConv(llfn, cc);\n@@ -1475,9 +1485,9 @@ fn declare_generic_glue(&@local_ctxt cx, &ty::t t, TypeRef llfnty, &str name)\n     ret llfn;\n }\n \n-fn make_generic_glue(&@local_ctxt cx, &span sp, &ty::t t, ValueRef llfn,\n-                     &make_generic_glue_helper_fn helper,\n-                     &uint[] ty_params) -> ValueRef {\n+fn make_generic_glue_inner(&@local_ctxt cx, &span sp, &ty::t t, ValueRef llfn,\n+                           &make_generic_glue_helper_fn helper,\n+                           &uint[] ty_params) -> ValueRef {\n     auto fcx = new_fn_ctxt(cx, sp, llfn);\n     llvm::LLVMSetLinkage(llfn,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -1526,6 +1536,21 @@ fn make_generic_glue(&@local_ctxt cx, &span sp, &ty::t t, ValueRef llfn,\n     ret llfn;\n }\n \n+fn make_generic_glue(&@local_ctxt cx, &span sp, &ty::t t, ValueRef llfn,\n+                     &make_generic_glue_helper_fn helper,\n+                     &uint[] ty_params, &str name) -> ValueRef {\n+    if !cx.ccx.sess.get_opts().stats {\n+        ret make_generic_glue_inner(cx, sp, t, llfn, helper, ty_params);\n+    }\n+\n+    auto start = time::get_time();\n+    auto llval = make_generic_glue_inner(cx, sp, t, llfn, helper, ty_params);\n+    auto end = time::get_time();\n+    log_fn_time(cx.ccx, \"glue \" + name + \" \" + ty_to_short_str(cx.ccx.tcx, t),\n+                start, end);\n+    ret llval;\n+}\n+\n fn emit_tydescs(&@crate_ctxt ccx) {\n     for each (@tup(ty::t, @tydesc_info) pair in ccx.tydescs.items()) {\n         auto glue_fn_ty = T_ptr(T_glue_fn(*ccx));\n@@ -2579,7 +2604,8 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                         ti.copy_glue = some[ValueRef](glue_fn);\n                         auto tg = make_copy_glue;\n                         make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n-                                          mgghf_single(tg), ti.ty_params);\n+                                          mgghf_single(tg), ti.ty_params,\n+                                          \"take\");\n                         log #fmt(\"--- lazily_emit_tydesc_glue TAKE %s\",\n                                  ty_to_str(cx.fcx.lcx.ccx.tcx, ti.ty));\n                     }\n@@ -2598,7 +2624,7 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                         ti.drop_glue = some[ValueRef](glue_fn);\n                         make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n                                           mgghf_single(make_drop_glue),\n-                                          ti.ty_params);\n+                                          ti.ty_params, \"drop\");\n                         log #fmt(\"--- lazily_emit_tydesc_glue DROP %s\",\n                                  ty_to_str(cx.fcx.lcx.ccx.tcx, ti.ty));\n                     }\n@@ -2617,7 +2643,8 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                         ti.free_glue = some[ValueRef](glue_fn);\n                         auto dg = make_free_glue;\n                         make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n-                                          mgghf_single(dg), ti.ty_params);\n+                                          mgghf_single(dg), ti.ty_params,\n+                                          \"free\");\n                         log #fmt(\"--- lazily_emit_tydesc_glue FREE %s\",\n                                  ty_to_str(cx.fcx.lcx.ccx.tcx, ti.ty));\n                     }\n@@ -2635,7 +2662,7 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                                                  \"cmp\");\n                         ti.cmp_glue = some[ValueRef](glue_fn);\n                         make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n-                                          mgghf_cmp, ti.ty_params);\n+                                          mgghf_cmp, ti.ty_params, \"cmp\");\n                         log #fmt(\"--- lazily_emit_tydesc_glue CMP %s\",\n                                  ty_to_str(cx.fcx.lcx.ccx.tcx, ti.ty));\n                     }\n@@ -7060,11 +7087,9 @@ fn finish_fn(&@fn_ctxt fcx, BasicBlockRef lltop) {\n }\n \n \n-// trans_fn: creates an LLVM function corresponding to a source language\n-// function.\n-fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n-            option::t[ty::t] ty_self, &ast::ty_param[] ty_params,\n-            ast::node_id id) {\n+fn trans_fn_inner(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n+                  option::t[ty::t] ty_self, &ast::ty_param[] ty_params,\n+                  ast::node_id id) {\n     set_uwtable(llfndecl);\n \n     // Set up arguments to the function.\n@@ -7114,6 +7139,22 @@ fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n     finish_fn(fcx, lltop);\n }\n \n+\n+// trans_fn: creates an LLVM function corresponding to a source language\n+// function.\n+fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n+            option::t[ty::t] ty_self, &ast::ty_param[] ty_params,\n+            ast::node_id id) {\n+    if !cx.ccx.sess.get_opts().stats {\n+        trans_fn_inner(cx, sp, f, llfndecl, ty_self, ty_params, id);\n+    }\n+\n+    auto start = time::get_time();\n+    trans_fn_inner(cx, sp, f, llfndecl, ty_self, ty_params, id);\n+    auto end = time::get_time();\n+    log_fn_time(cx.ccx, str::connect_ivec(cx.path, \"::\"), start, end);\n+}\n+\n // process_fwding_mthd: Create the forwarding function that appears in a\n // vtable slot for method calls that \"fall through\" to an inner object.  A\n // helper function for create_vtbl.\n@@ -8649,7 +8690,8 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n                        mutable n_derived_tydescs=0u,\n                        mutable n_glues_created=0u,\n                        mutable n_null_glues=0u,\n-                       mutable n_real_glues=0u),\n+                       mutable n_real_glues=0u,\n+                       fn_times=@mutable ~[]),\n              upcalls=upcall::declare_upcalls(tn, tydesc_type, taskptr_type,\n                                              llmod),\n              rust_object_type=T_rust_object(),\n@@ -8672,6 +8714,10 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n         log_err #fmt(\"n_glues_created: %u\", ccx.stats.n_glues_created);\n         log_err #fmt(\"n_null_glues: %u\", ccx.stats.n_null_glues);\n         log_err #fmt(\"n_real_glues: %u\", ccx.stats.n_real_glues);\n+\n+        for (tup(str,int) timing in *ccx.stats.fn_times) {\n+            log_err #fmt(\"time: %s took %d ms\", timing._0, timing._1);\n+        }\n     }\n     ret llmod;\n }"}]}