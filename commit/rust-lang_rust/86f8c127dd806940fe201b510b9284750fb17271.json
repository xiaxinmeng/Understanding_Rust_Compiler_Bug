{"sha": "86f8c127dd806940fe201b510b9284750fb17271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZjhjMTI3ZGQ4MDY5NDBmZTIwMWI1MTBiOTI4NDc1MGZiMTcyNzE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:32:24Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "libsyntax: use `#[deriving(Copy)]`", "tree": {"sha": "02f8e94f8651256b8ea305e4aa0af48fcab54062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f8e94f8651256b8ea305e4aa0af48fcab54062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f8c127dd806940fe201b510b9284750fb17271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f8c127dd806940fe201b510b9284750fb17271", "html_url": "https://github.com/rust-lang/rust/commit/86f8c127dd806940fe201b510b9284750fb17271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f8c127dd806940fe201b510b9284750fb17271/comments", "author": null, "committer": null, "parents": [{"sha": "a77e8a63d5d4c0fa04a878995824e727870135f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77e8a63d5d4c0fa04a878995824e727870135f9", "html_url": "https://github.com/rust-lang/rust/commit/a77e8a63d5d4c0fa04a878995824e727870135f9"}], "stats": {"total": 293, "additions": 77, "deletions": 216}, "files": [{"sha": "70bad90aea1c0e0149637b3e5fe008730491bc4a", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -26,9 +26,7 @@ pub enum Os {\n     OsDragonfly,\n }\n \n-impl Copy for Os {}\n-\n-#[deriving(PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)\n@@ -48,10 +46,8 @@ pub enum Abi {\n     RustCall,\n }\n \n-impl Copy for Abi {}\n-\n #[allow(non_camel_case_types)]\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Architecture {\n     X86,\n     X86_64,\n@@ -60,17 +56,15 @@ pub enum Architecture {\n     Mipsel\n }\n \n-impl Copy for Architecture {}\n-\n+#[deriving(Copy)]\n pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n     name: &'static str,\n }\n \n-impl Copy for AbiData {}\n-\n+#[deriving(Copy)]\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n     RustArch,\n@@ -80,9 +74,6 @@ pub enum AbiArchitecture {\n     Archs(u32)\n }\n \n-#[allow(non_upper_case_globals)]\n-impl Copy for AbiArchitecture {}\n-\n #[allow(non_upper_case_globals)]\n static AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs"}, {"sha": "be8f32bc4d5d8e58a640b0b461e817613391c8d0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 30, "deletions": 90, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -80,14 +80,12 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n /// table) and a SyntaxContext to track renaming and\n /// macro expansion per Flatt et al., \"Macros\n /// That Work Together\"\n-#[deriving(Clone, Hash, PartialOrd, Eq, Ord)]\n+#[deriving(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n pub struct Ident {\n     pub name: Name,\n     pub ctxt: SyntaxContext\n }\n \n-impl Copy for Ident {}\n-\n impl Ident {\n     /// Construct an identifier with the given name and an empty context:\n     pub fn new(name: Name) -> Ident { Ident {name: name, ctxt: EMPTY_CTXT}}\n@@ -160,11 +158,9 @@ pub const ILLEGAL_CTXT : SyntaxContext = 1;\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n /// the result of interning.\n-#[deriving(Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n+#[deriving(Copy, Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n pub struct Name(pub u32);\n \n-impl Copy for Name {}\n-\n impl Name {\n     pub fn as_str<'a>(&'a self) -> &'a str {\n         unsafe {\n@@ -201,15 +197,13 @@ impl<D:Decoder<E>, E> Decodable<D, E> for Ident {\n /// Function name (not all functions have names)\n pub type FnIdent = Option<Ident>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n     pub name: Name\n }\n \n-impl Copy for Lifetime {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n@@ -353,14 +347,12 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, Eq, Ord, PartialOrd, PartialEq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, Encodable, Decodable, Hash, Show)]\n pub struct DefId {\n     pub krate: CrateNum,\n     pub node: NodeId,\n }\n \n-impl Copy for DefId {}\n-\n /// Item definitions in the currently-compiled crate would have the CrateNum\n /// LOCAL_CRATE in their DefId.\n pub const LOCAL_CRATE: CrateNum = 0;\n@@ -513,15 +505,13 @@ pub struct FieldPat {\n     pub is_shorthand: bool,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BindingMode {\n     BindByRef(Mutability),\n     BindByValue(Mutability),\n }\n \n-impl Copy for BindingMode {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PatWildKind {\n     /// Represents the wildcard pattern `_`\n     PatWildSingle,\n@@ -530,8 +520,6 @@ pub enum PatWildKind {\n     PatWildMulti,\n }\n \n-impl Copy for PatWildKind {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Pat_ {\n     /// Represents a wildcard pattern (either `_` or `..`)\n@@ -561,15 +549,13 @@ pub enum Pat_ {\n     PatMac(Mac),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Mutability {\n     MutMutable,\n     MutImmutable,\n }\n \n-impl Copy for Mutability {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BinOp {\n     BiAdd,\n     BiSub,\n@@ -591,18 +577,14 @@ pub enum BinOp {\n     BiGt,\n }\n \n-impl Copy for BinOp {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnOp {\n     UnUniq,\n     UnDeref,\n     UnNot,\n     UnNeg\n }\n \n-impl Copy for UnOp {}\n-\n pub type Stmt = Spanned<Stmt_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -634,14 +616,12 @@ pub enum MacStmtStyle {\n \n /// Where a local declaration came from: either a true `let ... =\n /// ...;`, or one desugared from the pattern of a for loop.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum LocalSource {\n     LocalLet,\n     LocalFor,\n }\n \n-impl Copy for LocalSource {}\n-\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -683,22 +663,18 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n }\n \n-impl Copy for BlockCheckMode {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n }\n \n-impl Copy for UnsafeSource {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Expr {\n     pub id: NodeId,\n@@ -775,23 +751,19 @@ pub struct QPath {\n     pub item_name: Ident,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MatchSource {\n     MatchNormal,\n     MatchIfLetDesugar,\n     MatchWhileLetDesugar,\n }\n \n-impl Copy for MatchSource {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n-impl Copy for CaptureClause {}\n-\n /// A delimited sequence of token trees\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Delimited {\n@@ -842,14 +814,12 @@ pub struct SequenceRepetition {\n \n /// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum KleeneOp {\n     ZeroOrMore,\n     OneOrMore,\n }\n \n-impl Copy for KleeneOp {}\n-\n /// When the main rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token-tree. This is a very\n /// loose structure, such that all sorts of different AST-fragments can\n@@ -959,24 +929,20 @@ pub enum Mac_ {\n     MacInvocTT(Path, Vec<TokenTree> , SyntaxContext),   // new macro-invocation\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum StrStyle {\n     CookedStr,\n     RawStr(uint)\n }\n \n-impl Copy for StrStyle {}\n-\n pub type Lit = Spanned<Lit_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Sign {\n     Minus,\n     Plus\n }\n \n-impl Copy for Sign {}\n-\n impl<T> Sign where T: Int {\n     pub fn new(n: T) -> Sign {\n         if n < Int::zero() {\n@@ -987,15 +953,13 @@ impl<T> Sign where T: Int {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum LitIntType {\n     SignedIntLit(IntTy, Sign),\n     UnsignedIntLit(UintTy),\n     UnsuffixedIntLit(Sign)\n }\n \n-impl Copy for LitIntType {}\n-\n impl LitIntType {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n@@ -1082,7 +1046,7 @@ pub struct Typedef {\n     pub typ: P<Ty>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum IntTy {\n     TyI,\n     TyI8,\n@@ -1091,8 +1055,6 @@ pub enum IntTy {\n     TyI64,\n }\n \n-impl Copy for IntTy {}\n-\n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::int_ty_to_string(*self, None))\n@@ -1109,7 +1071,7 @@ impl IntTy {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum UintTy {\n     TyU,\n     TyU8,\n@@ -1118,8 +1080,6 @@ pub enum UintTy {\n     TyU64,\n }\n \n-impl Copy for UintTy {}\n-\n impl UintTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n@@ -1136,14 +1096,12 @@ impl fmt::Show for UintTy {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum FloatTy {\n     TyF32,\n     TyF64,\n }\n \n-impl Copy for FloatTy {}\n-\n impl fmt::Show for FloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::float_ty_to_string(*self))\n@@ -1177,7 +1135,7 @@ pub struct Ty {\n }\n \n /// Not represented directly in the AST, referred to by name through a ty_path.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PrimTy {\n     TyInt(IntTy),\n     TyUint(UintTy),\n@@ -1187,16 +1145,12 @@ pub enum PrimTy {\n     TyChar\n }\n \n-impl Copy for PrimTy {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum Onceness {\n     Once,\n     Many\n }\n \n-impl Copy for Onceness {}\n-\n impl fmt::Show for Onceness {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -1259,14 +1213,12 @@ pub enum Ty_ {\n     TyInfer,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum AsmDialect {\n     AsmAtt,\n     AsmIntel\n }\n \n-impl Copy for AsmDialect {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n@@ -1433,14 +1385,12 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PathListItem_ {\n     PathListIdent { name: Ident, id: NodeId },\n     PathListMod { id: NodeId }\n }\n \n-impl Copy for PathListItem_ {}\n-\n impl PathListItem_ {\n     pub fn id(&self) -> NodeId {\n         match *self {\n@@ -1494,19 +1444,15 @@ pub type Attribute = Spanned<Attribute_>;\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum AttrStyle {\n     AttrOuter,\n     AttrInner,\n }\n \n-impl Copy for AttrStyle {}\n-\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct AttrId(pub uint);\n \n-impl Copy for AttrId {}\n-\n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Attribute_ {\n@@ -1536,14 +1482,12 @@ pub struct PolyTraitRef {\n     pub trait_ref: TraitRef\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Visibility {\n     Public,\n     Inherited,\n }\n \n-impl Copy for Visibility {}\n-\n impl Visibility {\n     pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n         match self {\n@@ -1572,15 +1516,13 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n     UnnamedField(Visibility),\n }\n \n-impl Copy for StructFieldKind {}\n-\n impl StructFieldKind {\n     pub fn is_unnamed(&self) -> bool {\n         match *self {\n@@ -1682,15 +1624,13 @@ impl ForeignItem_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,\n     FnMutUnboxedClosureKind,\n     FnOnceUnboxedClosureKind,\n }\n \n-impl Copy for UnboxedClosureKind {}\n-\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans."}, {"sha": "7c89245f53ef71edcac54e274376a12af508bb52", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -41,10 +41,9 @@ use visit;\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n+#[deriving(Copy)]\n pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }\n \n-impl<'a> Copy for FnLikeNode<'a> {}\n-\n /// MaybeFnLike wraps a method that indicates if an object\n /// corresponds to some FnLikeNode.\n pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }\n@@ -82,13 +81,12 @@ impl MaybeFnLike for ast::Expr {\n /// Carries either an FnLikeNode or a Block, as these are the two\n /// constructs that correspond to \"code\" (as in, something from which\n /// we can construct a control-flow graph).\n+#[deriving(Copy)]\n pub enum Code<'a> {\n     FnLikeCode(FnLikeNode<'a>),\n     BlockCode(&'a Block),\n }\n \n-impl<'a> Copy for Code<'a> {}\n-\n impl<'a> Code<'a> {\n     pub fn id(&self) -> ast::NodeId {\n         match *self {"}, {"sha": "a95c9e199060b787253bae86f4cd5138e834b9ec", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -32,14 +32,12 @@ use std::slice;\n \n pub mod blocks;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum PathElem {\n     PathMod(Name),\n     PathName(Name)\n }\n \n-impl Copy for PathElem {}\n-\n impl PathElem {\n     pub fn name(&self) -> Name {\n         match *self {\n@@ -102,7 +100,7 @@ pub fn path_to_string<PI: Iterator<PathElem>>(path: PI) -> String {\n     }).to_string()\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),\n@@ -122,11 +120,9 @@ pub enum Node<'ast> {\n     NodeLifetime(&'ast Lifetime),\n }\n \n-impl<'ast> Copy for Node<'ast> {}\n-\n /// Represents an entry and its parent Node ID\n /// The odd layout is to bring down the total size.\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n enum MapEntry<'ast> {\n     /// Placeholder for holes in the map.\n     NotPresent,\n@@ -151,8 +147,6 @@ enum MapEntry<'ast> {\n     RootInlinedParent(&'ast InlinedParent)\n }\n \n-impl<'ast> Copy for MapEntry<'ast> {}\n-\n impl<'ast> Clone for MapEntry<'ast> {\n     fn clone(&self) -> MapEntry<'ast> {\n         *self"}, {"sha": "02771809ae6a75199007c380d2b054d1c039b533", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -343,14 +343,12 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[deriving(Encodable, Decodable, Show)]\n+#[deriving(Copy, Encodable, Decodable, Show)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,\n }\n \n-impl Copy for IdRange {}\n-\n impl IdRange {\n     pub fn max() -> IdRange {\n         IdRange {"}, {"sha": "127cc5ed51d1143ea593eca9ebe29e2e7fd7cb09", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -277,16 +277,14 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum InlineAttr {\n     InlineNone,\n     InlineHint,\n     InlineAlways,\n     InlineNever,\n }\n \n-impl Copy for InlineAttr {}\n-\n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n@@ -349,7 +347,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[deriving(Encodable,Decodable,PartialEq,PartialOrd,Clone,Show)]\n+#[deriving(Copy,Encodable,Decodable,PartialEq,PartialOrd,Clone,Show)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,\n@@ -359,8 +357,6 @@ pub enum StabilityLevel {\n     Locked\n }\n \n-impl Copy for StabilityLevel {}\n-\n pub fn find_stability_generic<'a,\n                               AM: AttrMetaMethods,\n                               I: Iterator<&'a AM>>\n@@ -468,16 +464,14 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[deriving(PartialEq, Show, Encodable, Decodable)]\n+#[deriving(Copy, PartialEq, Show, Encodable, Decodable)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n     ReprExtern,\n     ReprPacked,\n }\n \n-impl Copy for ReprAttr {}\n-\n impl ReprAttr {\n     pub fn is_ffi_safe(&self) -> bool {\n         match *self {\n@@ -489,14 +483,12 @@ impl ReprAttr {\n     }\n }\n \n-#[deriving(Eq, Hash, PartialEq, Show, Encodable, Decodable)]\n+#[deriving(Copy, Eq, Hash, PartialEq, Show, Encodable, Decodable)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)\n }\n \n-impl Copy for IntType {}\n-\n impl IntType {\n     #[inline]\n     pub fn is_signed(self) -> bool {"}, {"sha": "b7c0678cf139c4f0b79d1f5b1755a71137948016", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -31,19 +31,15 @@ pub trait Pos {\n \n /// A byte offset. Keep this small (currently 32-bits), as AST contains\n /// a lot of them.\n-#[deriving(Clone, PartialEq, Eq, Hash, PartialOrd, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Show)]\n pub struct BytePos(pub u32);\n \n-impl Copy for BytePos {}\n-\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[deriving(PartialEq, Hash, PartialOrd, Show)]\n+#[deriving(Copy, PartialEq, Hash, PartialOrd, Show)]\n pub struct CharPos(pub uint);\n \n-impl Copy for CharPos {}\n-\n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful\n \n@@ -121,7 +117,7 @@ impl Sub<CharPos, CharPos> for CharPos {\n /// are *absolute* positions from the beginning of the codemap, not positions\n /// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n /// to the original source.\n-#[deriving(Clone, Show, Hash)]\n+#[deriving(Clone, Copy, Show, Hash)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -130,18 +126,14 @@ pub struct Span {\n     pub expn_id: ExpnId\n }\n \n-impl Copy for Span {}\n-\n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Spanned<T> {\n     pub node: T,\n     pub span: Span,\n }\n \n-impl<T:Copy> Copy for Spanned<T> {}\n-\n impl PartialEq for Span {\n     fn eq(&self, other: &Span) -> bool {\n         return (*self).lo == (*other).lo && (*self).hi == (*other).hi;\n@@ -219,16 +211,14 @@ pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: uint }\n pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n /// The syntax with which a macro was invoked.\n-#[deriving(Clone, Hash, Show)]\n+#[deriving(Clone, Copy, Hash, Show)]\n pub enum MacroFormat {\n     /// e.g. #[deriving(...)] <item>\n     MacroAttribute,\n     /// e.g. `format!()`\n     MacroBang\n }\n \n-impl Copy for MacroFormat {}\n-\n #[deriving(Clone, Hash, Show)]\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n@@ -264,11 +254,9 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[deriving(PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n pub struct ExpnId(u32);\n \n-impl Copy for ExpnId {}\n-\n pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n \n impl ExpnId {\n@@ -290,15 +278,14 @@ pub struct FileLines {\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n+#[deriving(Copy)]\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n     pub pos: BytePos,\n     /// The number of bytes, >=2\n     pub bytes: uint,\n }\n \n-impl Copy for MultiByteChar {}\n-\n /// A single source in the CodeMap\n pub struct FileMap {\n     /// The name of the file that the source came from, source that doesn't"}, {"sha": "4d765f49acabdc21793748d9ca1cd8971b6ae7f0", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -28,7 +28,7 @@ use term;\n /// maximum number of lines we will print for each error; arbitrary.\n static MAX_LINES: uint = 6u;\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -40,8 +40,6 @@ pub enum RenderSpan {\n     FileLine(Span),\n }\n \n-impl Copy for RenderSpan {}\n-\n impl RenderSpan {\n     fn span(self) -> Span {\n         match self {\n@@ -56,15 +54,13 @@ impl RenderSpan {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum ColorConfig {\n     Auto,\n     Always,\n     Never\n }\n \n-impl Copy for ColorConfig {}\n-\n pub trait Emitter {\n     fn emit(&mut self, cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str, code: Option<&str>, lvl: Level);\n@@ -75,16 +71,14 @@ pub trait Emitter {\n /// This structure is used to signify that a task has panicked with a fatal error\n /// from the diagnostics. You can use this with the `Any` trait to figure out\n /// how a rustc task died (if so desired).\n+#[deriving(Copy)]\n pub struct FatalError;\n \n-impl Copy for FatalError {}\n-\n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n+#[deriving(Copy)]\n pub struct ExplicitBug;\n \n-impl Copy for ExplicitBug {}\n-\n /// A span-handler is like a handler but also\n /// accepts span information for source-location\n /// reporting.\n@@ -228,7 +222,7 @@ pub fn mk_handler(e: Box<Emitter + Send>) -> Handler {\n     }\n }\n \n-#[deriving(PartialEq, Clone)]\n+#[deriving(Copy, PartialEq, Clone)]\n pub enum Level {\n     Bug,\n     Fatal,\n@@ -238,8 +232,6 @@ pub enum Level {\n     Help,\n }\n \n-impl Copy for Level {}\n-\n impl fmt::Show for Level {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use std::fmt::Show;"}, {"sha": "3947a602809e69529e481ba6425a28c824d8c3fe", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -223,13 +223,12 @@ impl MacResult for MacItems {\n \n /// Fill-in macro expansion result, to allow compilation to continue\n /// after hitting errors.\n+#[deriving(Copy)]\n pub struct DummyResult {\n     expr_only: bool,\n     span: Span\n }\n \n-impl Copy for DummyResult {}\n-\n impl DummyResult {\n     /// Create a default MacResult that can be anything.\n     ///"}, {"sha": "10e14e0c97564aacf1256452acf0ec16836b440b", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -83,12 +83,11 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n+#[deriving(Copy)]\n pub enum OrderingOp {\n     PartialCmpOp, LtOp, LeOp, GtOp, GeOp,\n }\n \n-impl Copy for OrderingOp {}\n-\n pub fn some_ordering_collapsed(cx: &mut ExtCtxt,\n                                span: Span,\n                                op: OrderingOp,"}, {"sha": "ae979020bc7e5351cb09d16258852970fbf217e5", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -39,7 +39,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[deriving(PartialEq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Copy, PartialEq, Encodable, Decodable, Hash, Show)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),\n@@ -56,8 +56,6 @@ pub enum SyntaxContext_ {\n     IllegalCtxt\n }\n \n-impl Copy for SyntaxContext_ {}\n-\n /// A list of ident->name renamings\n pub type RenameList = Vec<(Ident, Name)>;\n "}, {"sha": "0e0a87c74f849e63ff3db47487eac9cab27f0ff9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -97,6 +97,7 @@ enum Status {\n }\n \n /// A set of features to be used by later passes.\n+#[deriving(Copy)]\n pub struct Features {\n     pub default_type_params: bool,\n     pub unboxed_closures: bool,\n@@ -107,8 +108,6 @@ pub struct Features {\n     pub opt_out_copy: bool,\n }\n \n-impl Copy for Features {}\n-\n impl Features {\n     pub fn new() -> Features {\n         Features {"}, {"sha": "95bae63f58f65d25c12d1e014ebfacde070e91e0", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -24,7 +24,7 @@ use std::str;\n use std::string::String;\n use std::uint;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum CommentStyle {\n     /// No code on either side of each line of the comment\n     Isolated,\n@@ -36,8 +36,6 @@ pub enum CommentStyle {\n     BlankLine,\n }\n \n-impl Copy for CommentStyle {}\n-\n #[deriving(Clone)]\n pub struct Comment {\n     pub style: CommentStyle,"}, {"sha": "a6ddcbf9ac41e205d3b8bc1fa20c135ba6cc0f08", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -22,7 +22,7 @@ use parse::token;\n use ptr::P;\n \n /// The specific types of unsupported syntax\n-#[deriving(PartialEq, Eq, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n     ObsoleteOwnedType,\n     ObsoleteOwnedExpr,\n@@ -36,8 +36,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteProcExpr,\n }\n \n-impl Copy for ObsoleteSyntax {}\n-\n pub trait ParserObsoleteMethods {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax);"}, {"sha": "3ad224b93ce9625920b5638d9729890c7332515b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -104,7 +104,7 @@ type ItemInfo = (Ident, Item_, Option<Vec<Attribute> >);\n \n /// How to parse a path. There are four different kinds of paths, all of which\n /// are parsed somewhat differently.\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum PathParsingMode {\n     /// A path with no type parameters; e.g. `foo::bar::Baz`\n     NoTypesAllowed,\n@@ -116,8 +116,6 @@ pub enum PathParsingMode {\n     LifetimeAndTypesWithColons,\n }\n \n-impl Copy for PathParsingMode {}\n-\n enum ItemOrViewItem {\n     /// Indicates a failure to parse any kind of item. The attributes are\n     /// returned."}, {"sha": "dad369792d7a1954cc1974ee2228f3e16a03e093", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -28,7 +28,7 @@ use std::path::BytesContainer;\n use std::rc::Rc;\n \n #[allow(non_camel_case_types)]\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum BinOpToken {\n     Plus,\n     Minus,\n@@ -42,10 +42,8 @@ pub enum BinOpToken {\n     Shr,\n }\n \n-impl Copy for BinOpToken {}\n-\n /// A delimeter token\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum DelimToken {\n     /// A round parenthesis: `(` or `)`\n     Paren,\n@@ -55,16 +53,14 @@ pub enum DelimToken {\n     Brace,\n }\n \n-impl Copy for DelimToken {}\n-\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum IdentStyle {\n     /// `::` follows the identifier with no whitespace in-between.\n     ModName,\n     Plain,\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum Lit {\n     Byte(ast::Name),\n     Char(ast::Name),\n@@ -89,10 +85,6 @@ impl Lit {\n     }\n }\n \n-impl Copy for Lit {}\n-\n-impl Copy for IdentStyle {}\n-\n #[allow(non_camel_case_types)]\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum Token {\n@@ -438,13 +430,12 @@ macro_rules! declare_special_idents_and_keywords {(\n         pub use self::Keyword::*;\n         use ast;\n \n+        #[deriving(Copy)]\n         pub enum Keyword {\n             $( $sk_variant, )*\n             $( $rk_variant, )*\n         }\n \n-        impl Copy for Keyword {}\n-\n         impl Keyword {\n             pub fn to_name(&self) -> ast::Name {\n                 match *self {"}, {"sha": "bfa47a46e7465747074d9c13fb81b0f2885992c1", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -66,30 +66,24 @@ pub use self::Token::*;\n use std::io;\n use std::string;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum Breaks {\n     Consistent,\n     Inconsistent,\n }\n \n-impl Copy for Breaks {}\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct BreakToken {\n     offset: int,\n     blank_space: int\n }\n \n-impl Copy for BreakToken {}\n-\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct BeginToken {\n     offset: int,\n     breaks: Breaks\n }\n \n-impl Copy for BeginToken {}\n-\n #[deriving(Clone)]\n pub enum Token {\n     String(string::String, int),\n@@ -153,20 +147,18 @@ pub fn buf_str(toks: Vec<Token>,\n     return s.into_string();\n }\n \n+#[deriving(Copy)]\n pub enum PrintStackBreak {\n     Fits,\n     Broken(Breaks),\n }\n \n-impl Copy for PrintStackBreak {}\n-\n+#[deriving(Copy)]\n pub struct PrintStackElem {\n     offset: int,\n     pbreak: PrintStackBreak\n }\n \n-impl Copy for PrintStackElem {}\n-\n static SIZE_INFINITY: int = 0xffff;\n \n pub fn mk_printer(out: Box<io::Writer+'static>, linewidth: uint) -> Printer {"}, {"sha": "d2cc0cba3173cf7b3011cfc6fb04a55f52f6418c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -45,19 +45,17 @@ pub trait PpAnn {\n     fn post(&self, _state: &mut State, _node: AnnNode) -> IoResult<()> { Ok(()) }\n }\n \n+#[deriving(Copy)]\n pub struct NoAnn;\n \n-impl Copy for NoAnn {}\n-\n impl PpAnn for NoAnn {}\n \n+#[deriving(Copy)]\n pub struct CurrentCommentAndLiteral {\n     cur_cmnt: uint,\n     cur_lit: uint,\n }\n \n-impl Copy for CurrentCommentAndLiteral {}\n-\n pub struct State<'a> {\n     pub s: pp::Printer,\n     cm: Option<&'a CodeMap>,"}, {"sha": "b89e9a59349ce3e341ae7276e96eba8e612c1843", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f8c127dd806940fe201b510b9284750fb17271/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=86f8c127dd806940fe201b510b9284750fb17271", "patch": "@@ -32,6 +32,7 @@ use codemap::Span;\n use ptr::P;\n use owned_slice::OwnedSlice;\n \n+#[deriving(Copy)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n     FkItemFn(Ident, &'a Generics, Unsafety, Abi),\n@@ -44,8 +45,6 @@ pub enum FnKind<'a> {\n     FkFnBlock,\n }\n \n-impl<'a> Copy for FnKind<'a> {}\n-\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden.  Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;"}]}