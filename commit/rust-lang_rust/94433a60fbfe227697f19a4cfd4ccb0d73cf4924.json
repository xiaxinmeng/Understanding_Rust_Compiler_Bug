{"sha": "94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NDMzYTYwZmJmZTIyNzY5N2YxOWE0Y2ZkNGNjYjBkNzNjZjQ5MjQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-04-30T22:23:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T22:23:10Z"}, "message": "Rollup merge of #71465 - oli-obk:is_thread_local_cleanup, r=matthewjasper\n\nAdd a convenience method on `TyCtxt` for checking for thread locals\n\nThis PR extracts the cleanup part of #71192\n\nr? @bjorn3", "tree": {"sha": "a440c47354a417042fa15fa853d4fa1beee4a0fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a440c47354a417042fa15fa853d4fa1beee4a0fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeq0/OCRBK7hj4Ov3rIwAAdHIIAF8q86LbkZKXaJqDan6ZP3Tu\nWwQd9jVlVDZkCjKeIQU5aVG+wszIukEX1GIdYBY6vMnLlTzXB2vnxTPFq5Me6ios\nA8qq+M+UwYjg7UABPFXACw73zSprs4yFp1Jshpf6xXbiCtRWZMgLDlBiJzzWjGao\nZqNRR9hSCL3QoKBWz4R1un3u/MCB/b8crY/FF1Wn932Ibwh7cjElSjI2FxEpCcou\npGOzLtn2kxl6/V+sr+3/59XEwZwgNPQUvxycKpvUMyWAvuH9qOR0d6ZtVLBfjrAi\nPedzGKu/sXwE16UKEXvY5MykELbntjqZgY5OBbdMDqP+C1et94cG44pj01IgddA=\n=MuPd\n-----END PGP SIGNATURE-----\n", "payload": "tree a440c47354a417042fa15fa853d4fa1beee4a0fa\nparent 4adebb9f29d862a0723ab982944a2909ea2fdcc1\nparent 8079dd8afe711d736736c522626d3e6052fb0ea4\nauthor Tyler Mandry <tmandry@gmail.com> 1588285390 -0700\ncommitter GitHub <noreply@github.com> 1588285390 -0700\n\nRollup merge of #71465 - oli-obk:is_thread_local_cleanup, r=matthewjasper\n\nAdd a convenience method on `TyCtxt` for checking for thread locals\n\nThis PR extracts the cleanup part of #71192\n\nr? @bjorn3\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "html_url": "https://github.com/rust-lang/rust/commit/94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4adebb9f29d862a0723ab982944a2909ea2fdcc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4adebb9f29d862a0723ab982944a2909ea2fdcc1", "html_url": "https://github.com/rust-lang/rust/commit/4adebb9f29d862a0723ab982944a2909ea2fdcc1"}, {"sha": "8079dd8afe711d736736c522626d3e6052fb0ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8079dd8afe711d736736c522626d3e6052fb0ea4", "html_url": "https://github.com/rust-lang/rust/commit/8079dd8afe711d736736c522626d3e6052fb0ea4"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "9d9b53fc4a87c5adcead1140055b56d1a6676881", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -212,6 +212,7 @@ impl CodegenCx<'ll, 'tcx> {\n         let g = if let Some(def_id) = def_id.as_local() {\n             let id = self.tcx.hir().as_local_hir_id(def_id);\n             let llty = self.layout_of(ty).llvm_type(self);\n+            // FIXME: refactor this to work without accessing the HIR\n             let (g, attrs) = match self.tcx.hir().get(id) {\n                 Node::Item(&hir::Item { attrs, span, kind: hir::ItemKind::Static(..), .. }) => {\n                     let sym_str = sym.as_str();"}, {"sha": "7b222121245d619472eac86f317be181d27dca75", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -438,10 +438,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n /// Error information for when the program did something that might (or might not) be correct\n /// to do according to the Rust spec, but due to limitations in the interpreter, the\n /// operation could not be carried out. These limitations can differ between CTFE and the\n-/// Miri engine, e.g., CTFE does not support casting pointers to \"real\" integers.\n-///\n-/// Currently, we also use this as fall-back error kind for errors that have not been\n-/// categorized yet.\n+/// Miri engine, e.g., CTFE does not support dereferencing pointers at integral addresses.\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n@@ -451,6 +448,9 @@ pub enum UnsupportedOpInfo {\n     NoMirFor(DefId),\n     /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n+    //\n+    // The variants below are only reachable from CTFE/const prop, miri will never emit them.\n+    //\n     /// Encountered raw bytes where we needed a pointer.\n     ReadBytesAsPointer,\n }"}, {"sha": "a89927ecfb72c7a08b7d426ab4c1eb9c328134c5", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -1,6 +1,7 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n use crate::ich::NodeIdHashingMode;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::interpret::{sign_extend, truncate};\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n@@ -528,6 +529,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.static_mutability(def_id).is_some()\n     }\n \n+    /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.\n+    pub fn is_thread_local_static(&self, def_id: DefId) -> bool {\n+        self.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n+    }\n+\n     /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n     pub fn is_mutable_static(&self, def_id: DefId) -> bool {\n         self.static_mutability(def_id) == Some(hir::Mutability::Mut)"}, {"sha": "e7d4b5f5f91a29a7b9cb5537f33e6ef9e2c6706a", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceC\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::{self, Instance, InstanceDef, TyCtxt};\n-use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n@@ -224,7 +223,7 @@ impl Validator<'mir, 'tcx> {\n \n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n         let should_check_for_sync =\n-            const_kind == Some(ConstKind::Static) && !tcx.has_attr(def_id, sym::thread_local);\n+            const_kind == Some(ConstKind::Static) && !tcx.is_thread_local_static(def_id);\n \n         if should_check_for_sync {\n             let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n@@ -267,8 +266,7 @@ impl Validator<'mir, 'tcx> {\n     }\n \n     fn check_static(&mut self, def_id: DefId, span: Span) {\n-        let is_thread_local = self.tcx.has_attr(def_id, sym::thread_local);\n-        if is_thread_local {\n+        if self.tcx.is_thread_local_static(def_id) {\n             self.check_op_spanned(ops::ThreadLocalAccess, span)\n         } else {\n             self.check_op_spanned(ops::StaticAccess, span)"}, {"sha": "ad98920eb63b9353a455e2ea7116f54c24663932", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -522,7 +522,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         return Err(Unpromotable);\n                     }\n \n-                    let is_thread_local = self.tcx.has_attr(def_id, sym::thread_local);\n+                    let is_thread_local = self.tcx.is_thread_local_static(def_id);\n                     if is_thread_local {\n                         return Err(Unpromotable);\n                     }"}, {"sha": "b4ef536afb7409ba9de0168d1a5354585915d583", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -3,10 +3,9 @@\n use crate::build::scope::DropKind;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n+use rustc_hir as hir;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n-use rustc_hir as hir;\n-use rustc_span::symbol::sym;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building\n@@ -60,7 +59,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 local_decl = local_decl.block_tail(tail_info);\n             }\n             if let ExprKind::StaticRef { def_id, .. } = expr.kind {\n-                let is_thread_local = this.hir.tcx().has_attr(def_id, sym::thread_local);\n+                let is_thread_local = this.hir.tcx().is_thread_local_static(def_id);\n                 local_decl.internal = true;\n                 local_decl.local_info = LocalInfo::StaticRef { def_id, is_thread_local };\n             }"}, {"sha": "e91dbf675d35ffa1ef115e9cc19d7e3f1e95421d", "filename": "src/test/ui/linkage-attr/linkage3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94433a60fbfe227697f19a4cfd4ccb0d73cf4924/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs?ref=94433a60fbfe227697f19a4cfd4ccb0d73cf4924", "patch": "@@ -1,6 +1,6 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n \n-// build-fail\n+// check-fail\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n "}]}