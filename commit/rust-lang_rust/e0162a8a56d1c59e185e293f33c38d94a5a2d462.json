{"sha": "e0162a8a56d1c59e185e293f33c38d94a5a2d462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTYyYThhNTZkMWM1OWUxODVlMjkzZjMzYzM4ZDk0YTVhMmQ0NjI=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-05-02T12:48:28Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-18T19:57:55Z"}, "message": "rustdoc: Render `for<'_>` lifetimes in front of where bound", "tree": {"sha": "068b7709ff8b46d74e5872d460038a34699c8f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/068b7709ff8b46d74e5872d460038a34699c8f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0162a8a56d1c59e185e293f33c38d94a5a2d462", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmDM+s0ACgkQjGL+mKYv\nxGKXqBAAwaAnBtlxZHlrGWHEuX62Scubgw24MT8J7ooad+2qCXTAU72QJtDTEktV\nDQKHZR2QoQ3Cbf9RX8i9d9KnIiwo/lCtfchA2WQwzsFtsIj9BAXAwF7jxl50Oc7S\nBjWoVp5hoFg+ByLnClrB/DAA4qKKELKBHRv6HDC9b57Yt2s5BAyxeEVkYJ9jGsiL\n0pM/+KNANBFnJVE6+8JCwn218r+MFFWO/jdtNUi0ywdOPxvrKsawbpudOiwa8804\njarFk5JCF+a+CoYfRNcZfqBz4XPsC39QfZSKYYcQdf5hdfqAz1IPng+cOPkADcoh\nuvbM5bCOz4c1wfK+s4+9kteN6uAR6bQPzcP2rCuNvyIl6y4pj1MmFuLOUhaxa2vi\nB4+n9CmAnb/VFjZ2weYAFHphLEvXlqpHY8wJ22J0+xqLuvcSVjnqkqO9T6WZE8ue\ntszVDlsT1q2Nezewfddr4yfvydaSv7T9mTXbaGFUch2NNwxaogBfMN+qzeGcJPSF\np/+A47+kJxpx9ouPqfgok9oJXseOBuwKJX042CQGIJ2O89AGYZXyp4+TgPb6cz4b\nQUz5N8bVOZMjPZPJ9l4hEpTkrp3EQrHkGOKelbWkpynzUUkFRCxqg1hk0W0bO24A\n7lG7x9ZovQ0NvjoWxZx85ZefxYSslvMn03f3C6Eb574NvbnyU84=\n=RODD\n-----END PGP SIGNATURE-----", "payload": "tree 068b7709ff8b46d74e5872d460038a34699c8f57\nparent 312b894cc12240a3fcc645474c3daa14f7d568ea\nauthor Justus K <justus.k@protonmail.com> 1619959708 +0200\ncommitter Justus K <justus.k@protonmail.com> 1624046275 +0200\n\nrustdoc: Render `for<'_>` lifetimes in front of where bound\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0162a8a56d1c59e185e293f33c38d94a5a2d462", "html_url": "https://github.com/rust-lang/rust/commit/e0162a8a56d1c59e185e293f33c38d94a5a2d462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0162a8a56d1c59e185e293f33c38d94a5a2d462/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312b894cc12240a3fcc645474c3daa14f7d568ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/312b894cc12240a3fcc645474c3daa14f7d568ea", "html_url": "https://github.com/rust-lang/rust/commit/312b894cc12240a3fcc645474c3daa14f7d568ea"}], "stats": {"total": 126, "additions": 104, "deletions": 22}, "files": [{"sha": "0828f0b3e518c45178a6c9f6f8e87eeadf354cdf", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -414,7 +414,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 let mut bounds_vec = bounds.into_iter().collect();\n                 self.sort_where_bounds(&mut bounds_vec);\n \n-                Some(WherePredicate::BoundPredicate { ty, bounds: bounds_vec })\n+                Some(WherePredicate::BoundPredicate {\n+                    ty,\n+                    bounds: bounds_vec,\n+                    bound_params: Vec::new(),\n+                })\n             })\n             .chain(\n                 lifetime_to_bounds.into_iter().filter(|&(_, ref bounds)| !bounds.is_empty()).map(\n@@ -492,7 +496,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             }\n             let p = p.unwrap();\n             match p {\n-                WherePredicate::BoundPredicate { ty, mut bounds } => {\n+                WherePredicate::BoundPredicate { ty, mut bounds, .. } => {\n                     // Writing a projection trait bound of the form\n                     // <T as Trait>::Name : ?Sized\n                     // is illegal, because ?Sized bounds can only"}, {"sha": "e8f0960da79cb250669d31f5f1869f3dd9502a3b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -566,9 +566,11 @@ fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::Item\n fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean::Generics {\n     for pred in &mut g.where_predicates {\n         match *pred {\n-            clean::WherePredicate::BoundPredicate { ty: clean::Generic(ref s), ref mut bounds }\n-                if *s == kw::SelfUpper =>\n-            {\n+            clean::WherePredicate::BoundPredicate {\n+                ty: clean::Generic(ref s),\n+                ref mut bounds,\n+                ..\n+            } if *s == kw::SelfUpper => {\n                 bounds.retain(|bound| match *bound {\n                     clean::GenericBound::TraitBound(\n                         clean::PolyTrait { trait_: clean::ResolvedPath { did, .. }, .. },\n@@ -591,6 +593,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n                     ..\n                 },\n             ref bounds,\n+            ..\n         } => !(bounds.is_empty() || *s == kw::SelfUpper && did == trait_did),\n         _ => true,\n     });\n@@ -605,7 +608,7 @@ fn separate_supertrait_bounds(\n ) -> (clean::Generics, Vec<clean::GenericBound>) {\n     let mut ty_bounds = Vec::new();\n     g.where_predicates.retain(|pred| match *pred {\n-        clean::WherePredicate::BoundPredicate { ty: clean::Generic(ref s), ref bounds }\n+        clean::WherePredicate::BoundPredicate { ty: clean::Generic(ref s), ref bounds, .. }\n             if *s == kw::SelfUpper =>\n         {\n             ty_bounds.extend(bounds.iter().cloned());"}, {"sha": "634a8dae76382dffd0d1e9ca32be52ed51b86372", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -330,6 +330,7 @@ impl Clean<WherePredicate> for hir::WherePredicate<'_> {\n             hir::WherePredicate::BoundPredicate(ref wbp) => WherePredicate::BoundPredicate {\n                 ty: wbp.bounded_ty.clean(cx),\n                 bounds: wbp.bounds.clean(cx),\n+                bound_params: wbp.bound_generic_params.into_iter().map(|x| x.clean(cx)).collect(),\n             },\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n@@ -370,6 +371,7 @@ impl<'a> Clean<WherePredicate> for ty::PolyTraitPredicate<'a> {\n         WherePredicate::BoundPredicate {\n             ty: poly_trait_ref.skip_binder().self_ty().clean(cx),\n             bounds: vec![poly_trait_ref.clean(cx)],\n+            bound_params: Vec::new(),\n         }\n     }\n }\n@@ -402,6 +404,7 @@ impl<'tcx> Clean<Option<WherePredicate>> for ty::OutlivesPredicate<Ty<'tcx>, ty:\n         Some(WherePredicate::BoundPredicate {\n             ty: ty.clean(cx),\n             bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n+            bound_params: Vec::new(),\n         })\n     }\n }\n@@ -567,7 +570,9 @@ impl Clean<Generics> for hir::Generics<'_> {\n         // to where predicates when such cases occur.\n         for where_pred in &mut generics.where_predicates {\n             match *where_pred {\n-                WherePredicate::BoundPredicate { ty: Generic(ref name), ref mut bounds } => {\n+                WherePredicate::BoundPredicate {\n+                    ty: Generic(ref name), ref mut bounds, ..\n+                } => {\n                     if bounds.is_empty() {\n                         for param in &mut generics.params {\n                             match param.kind {\n@@ -721,7 +726,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // handled in cleaning associated types\n         let mut sized_params = FxHashSet::default();\n         where_predicates.retain(|pred| match *pred {\n-            WP::BoundPredicate { ty: Generic(ref g), ref bounds } => {\n+            WP::BoundPredicate { ty: Generic(ref g), ref bounds, .. } => {\n                 if bounds.iter().any(|b| b.is_sized_bound(cx)) {\n                     sized_params.insert(*g);\n                     false\n@@ -741,6 +746,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name),\n                     bounds: vec![GenericBound::maybe_sized(cx)],\n+                    bound_params: Vec::new(),\n                 })\n             }\n         }\n@@ -1117,6 +1123,7 @@ impl Clean<Item> for ty::AssocItem {\n                                 WherePredicate::BoundPredicate {\n                                     ty: QPath { ref name, ref self_type, ref trait_, .. },\n                                     ref bounds,\n+                                    ..\n                                 } => (name, self_type, trait_, bounds),\n                                 _ => return None,\n                             };"}, {"sha": "3ec0a22a2c09a4a3f8b91a1f6e85c2180af7a08a", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -24,16 +24,20 @@ use crate::core::DocContext;\n \n crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     // First, partition the where clause into its separate components\n-    let mut params: BTreeMap<_, Vec<_>> = BTreeMap::new();\n+    let mut params: BTreeMap<_, (Vec<_>, Vec<_>)> = BTreeMap::new();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();\n \n     for clause in clauses {\n         match clause {\n-            WP::BoundPredicate { ty, bounds } => match ty {\n-                clean::Generic(s) => params.entry(s).or_default().extend(bounds),\n-                t => tybounds.push((t, bounds)),\n+            WP::BoundPredicate { ty, bounds, bound_params } => match ty {\n+                clean::Generic(s) => {\n+                    let (b, p) = params.entry(s).or_default();\n+                    b.extend(bounds);\n+                    p.extend(bound_params);\n+                }\n+                t => tybounds.push((t, (bounds, bound_params))),\n             },\n             WP::RegionPredicate { lifetime, bounds } => {\n                 lifetimes.push((lifetime, bounds));\n@@ -54,7 +58,7 @@ crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n             clean::Generic(s) => s,\n             _ => return true,\n         };\n-        let bounds = match params.get_mut(generic) {\n+        let (bounds, _) = match params.get_mut(generic) {\n             Some(bound) => bound,\n             None => return true,\n         };\n@@ -67,10 +71,16 @@ crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     clauses.extend(\n         lifetimes.into_iter().map(|(lt, bounds)| WP::RegionPredicate { lifetime: lt, bounds }),\n     );\n-    clauses.extend(\n-        params.into_iter().map(|(k, v)| WP::BoundPredicate { ty: clean::Generic(k), bounds: v }),\n-    );\n-    clauses.extend(tybounds.into_iter().map(|(ty, bounds)| WP::BoundPredicate { ty, bounds }));\n+    clauses.extend(params.into_iter().map(|(k, (bounds, params))| WP::BoundPredicate {\n+        ty: clean::Generic(k),\n+        bounds,\n+        bound_params: params,\n+    }));\n+    clauses.extend(tybounds.into_iter().map(|(ty, (bounds, bound_params))| WP::BoundPredicate {\n+        ty,\n+        bounds,\n+        bound_params,\n+    }));\n     clauses.extend(equalities.into_iter().map(|(lhs, rhs)| WP::EqPredicate { lhs, rhs }));\n     clauses\n }"}, {"sha": "5d036d4d35b9e3bfb7bddf9bfd8be8665e1aa746", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -1193,7 +1193,7 @@ impl Lifetime {\n \n #[derive(Clone, Debug)]\n crate enum WherePredicate {\n-    BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n+    BoundPredicate { ty: Type, bounds: Vec<GenericBound>, bound_params: Vec<Lifetime> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n     EqPredicate { lhs: Type, rhs: Type },\n }"}, {"sha": "a424932d83fb71d516f81ffdc67b735842843c1f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -249,17 +249,33 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n             }\n \n             match pred {\n-                clean::WherePredicate::BoundPredicate { ty, bounds } => {\n+                clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n                     let bounds = bounds;\n+                    let for_prefix = match bound_params.len() {\n+                        0 => String::new(),\n+                        _ if f.alternate() => {\n+                            format!(\n+                                \"for<{:#}> \",\n+                                comma_sep(bound_params.iter().map(|lt| lt.print()))\n+                            )\n+                        }\n+                        _ => format!(\n+                            \"for&lt;{}&gt; \",\n+                            comma_sep(bound_params.iter().map(|lt| lt.print()))\n+                        ),\n+                    };\n+\n                     if f.alternate() {\n                         clause.push_str(&format!(\n-                            \"{:#}: {:#}\",\n+                            \"{}{:#}: {:#}\",\n+                            for_prefix,\n                             ty.print(cx),\n                             print_generic_bounds(bounds, cx)\n                         ));\n                     } else {\n                         clause.push_str(&format!(\n-                            \"{}: {}\",\n+                            \"{}{}: {}\",\n+                            for_prefix,\n                             ty.print(cx),\n                             print_generic_bounds(bounds, cx)\n                         ));"}, {"sha": "c844d91096a738dfc351db9354e63b68445f8e59", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -328,9 +328,10 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n     fn from_tcx(predicate: clean::WherePredicate, tcx: TyCtxt<'_>) -> Self {\n         use clean::WherePredicate::*;\n         match predicate {\n-            BoundPredicate { ty, bounds } => WherePredicate::BoundPredicate {\n+            BoundPredicate { ty, bounds, .. } => WherePredicate::BoundPredicate {\n                 ty: ty.into_tcx(tcx),\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+                // FIXME: add `bound_params` to rustdoc-json-params?\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n                 lifetime: lifetime.0.to_string(),"}, {"sha": "b5c55df287b1431992e2f1e75f1ca73b204ce591", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -0,0 +1,41 @@\n+#![crate_name = \"foo\"]\n+\n+trait A<'x> {}\n+\n+// @has foo/fn.test1.html\n+// @has - '//pre' \"pub fn test1<T>() where for<'a> &'a T: Iterator,\"\n+pub fn test1<T>()\n+where\n+    for<'a> &'a T: Iterator,\n+{\n+}\n+\n+// @has foo/fn.test2.html\n+// @has - '//pre' \"pub fn test2<T>() where for<'a, 'b> &'a T: A<'b>,\"\n+pub fn test2<T>()\n+where\n+    for<'a, 'b> &'a T: A<'b>,\n+{\n+}\n+\n+// @has foo/fn.test3.html\n+// @has - '//pre' \"pub fn test3<F>() where F: for<'a, 'b> Fn(&'a u8, &'b u8),\"\n+pub fn test3<F>()\n+where\n+    F: for<'a, 'b> Fn(&'a u8, &'b u8),\n+{\n+}\n+\n+// @has foo/struct.Foo.html\n+pub struct Foo<'a> {\n+    _x: &'a u8,\n+}\n+\n+impl<'a> Foo<'a> {\n+    // @has - '//code' \"pub fn bar<T>() where T: A<'a>,\"\n+    pub fn bar<T>()\n+    where\n+        T: A<'a>,\n+    {\n+    }\n+}"}]}