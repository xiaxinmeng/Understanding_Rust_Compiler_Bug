{"sha": "26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZjBjZDVkZTdmNzFhMGRiMGJiMzg1N2NlNDlhMTFjZDBmN2Q4NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T02:26:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T02:26:31Z"}, "message": "Auto merge of #26844 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #26599, #26761, #26807, #26809, #26825, #26827, #26828, #26832, #26834, #26835\n- Failed merges: #26796", "tree": {"sha": "aa443527389593fd7edbf0591548d35844e72c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa443527389593fd7edbf0591548d35844e72c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "html_url": "https://github.com/rust-lang/rust/commit/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d71ce536439a9160100259c95c9c252a4061b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d71ce536439a9160100259c95c9c252a4061b86", "html_url": "https://github.com/rust-lang/rust/commit/6d71ce536439a9160100259c95c9c252a4061b86"}, {"sha": "04a85c538a11dbc1c1670db23409f3034ffcbc1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a85c538a11dbc1c1670db23409f3034ffcbc1d", "html_url": "https://github.com/rust-lang/rust/commit/04a85c538a11dbc1c1670db23409f3034ffcbc1d"}], "stats": {"total": 410, "additions": 377, "deletions": 33}, "files": [{"sha": "16113a32d244816308494f4653a95fc18b09c53b", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -83,6 +83,21 @@ feature. We use the 'fork and pull' model described there.\n \n Please make pull requests against the `master` branch.\n \n+Compiling all of `make check` can take a while. When testing your pull request,\n+consider using one of the more specialized `make` targets to cut down on the\n+amount of time you have to wait. You need to have built the compiler at least\n+once before running these will work, but that\u2019s only one full build rather than\n+one each time.\n+\n+    $ make -j8 rustc-stage1 && make check-stage1\n+\n+is one such example, which builds just `rustc`, and then runs the tests. If\n+you\u2019re adding something to the standard library, try\n+\n+    $ make -j8 check-stage1-std NO_REBUILD=1\n+\n+This will not rebuild the compiler, but will run the tests.\n+\n All pull requests are reviewed by another person. We have a bot,\n @rust-highfive, that will automatically assign a random person to review your\n request.\n@@ -108,6 +123,10 @@ will run all the tests on every platform we support. If it all works out,\n \n [merge-queue]: http://buildbot.rust-lang.org/homu/queue/rust\n \n+Speaking of tests, Rust has a comprehensive test suite. More information about\n+it can be found\n+[here](https://github.com/rust-lang/rust-wiki-backup/blob/master/Note-testsuite.md).\n+\n ## Writing Documentation\n \n Documentation improvements are very welcome. The source of `doc.rust-lang.org`"}, {"sha": "060f954274a9dcce032f9fc431252d5bf69cbdbf", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -2515,9 +2515,8 @@ Here are some examples:\n #### Moved and copied types\n \n When a [local variable](#variables) is used as an\n-[rvalue](#lvalues,-rvalues-and-temporaries) the variable will either be moved\n-or copied, depending on its type. All values whose type implements `Copy` are\n-copied, all others are moved.\n+[rvalue](#lvalues,-rvalues-and-temporaries), the variable will be copied\n+if its type implements `Copy`. All others are moved.\n \n ### Literal expressions\n \n@@ -2882,7 +2881,6 @@ operand.\n ```\n # let mut x = 0;\n # let y = 0;\n-\n x = y;\n ```\n "}, {"sha": "cbedf863714146b8e4e8cd4ffe3b4fe4c6890219", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -533,19 +533,10 @@ attribute turns off Rust's name mangling, so that it is easier to link to.\n \n # FFI and panics\n \n-It\u2019s important to be mindful of `panic!`s when working with FFI. This code,\n-when called from C, will `abort`:\n-\n-```rust\n-#[no_mangle]\n-pub extern fn oh_no() -> ! {\n-    panic!(\"Oops!\");\n-}\n-# fn main() {}\n-```\n-\n-If you\u2019re writing code that may panic, you should run it in another thread,\n-so that the panic doesn\u2019t bubble up to C:\n+It\u2019s important to be mindful of `panic!`s when working with FFI. A `panic!`\n+across an FFI boundary is undefined behavior. If you\u2019re writing code that may\n+panic, you should run it in another thread, so that the panic doesn\u2019t bubble up\n+to C:\n \n ```rust\n use std::thread;"}, {"sha": "9603eec7aca712a8808ef6edde3d3647bbb251a3", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -282,6 +282,38 @@ This \u2018destructuring\u2019 behavior works on any compound data type, like\n [tuples]: primitive-types.html#tuples\n [enums]: enums.html\n \n+# Ignoring bindings\n+\n+You can use `_` in a pattern to disregard the value. For example, here\u2019s a\n+`match` against a `Result<T, E>`:\n+\n+```rust\n+# let some_value: Result<i32, &'static str> = Err(\"There was an error\");\n+match some_value {\n+    Ok(value) => println!(\"got a value: {}\", value),\n+    Err(_) => println!(\"an error occurred\"),\n+}\n+```\n+\n+In the first arm, we bind the value inside the `Ok` variant to `value`. But\n+in the `Err` arm, we use `_` to disregard the specific error, and just print\n+a general error message.\n+\n+`_` is valid in any pattern that creates a binding. This can be useful to\n+ignore parts of a larger structure:\n+\n+```rust\n+fn coordinate() -> (i32, i32, i32) {\n+    // generate and return some sort of triple tuple\n+# (1, 2, 3)\n+}\n+\n+let (x, _, z) = coordinate();\n+```\n+\n+Here, we bind the first and last element of the tuple to `x` and `z`, but\n+ignore the middle element.\n+\n # Mix and Match\n \n Whew! That\u2019s a lot of different ways to match things, and they can all be"}, {"sha": "0bb519ec0951925f99ded3f415a855aeb7a50393", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 300, "deletions": 11, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -267,11 +267,16 @@ impl<'a> Display for Arguments<'a> {\n     }\n }\n \n-/// Format trait for the `?` character. Useful for debugging, all types\n-/// should implement this.\n+/// Format trait for the `?` character.\n+///\n+/// `Debug` should format the output in a programmer-facing, debugging context.\n ///\n /// Generally speaking, you should just `derive` a `Debug` implementation.\n ///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n /// # Examples\n ///\n /// Deriving an implementation:\n@@ -327,8 +332,39 @@ pub trait Debug {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// When a value can be semantically expressed as a String, this trait may be\n-/// used. It corresponds to the default format, `{}`.\n+/// Format trait for an empty format, `{}`.\n+///\n+/// `Display` is similar to [`Debug`][debug], but `Display` is for user-facing\n+/// output, and so cannot be derived.\n+///\n+/// [debug]: trait.Debug.html\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Implementing `Display` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n+///\n+/// impl fmt::Display for Point {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         write!(f, \"({}, {})\", self.x, self.y)\n+///     }\n+/// }\n+///\n+/// let origin = Point { x: 0, y: 0 };\n+///\n+/// println!(\"The origin is: {}\", origin);\n+/// ```\n #[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default \\\n                             formatter; try using `:?` instead if you are using \\\n                             a format string\"]\n@@ -339,55 +375,308 @@ pub trait Display {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `o` character\n+/// Format trait for the `o` character.\n+///\n+/// The `Octal` trait should format its output as a number in base-8.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '52' in octal\n+///\n+/// assert_eq!(format!(\"{:o}\", x), \"52\");\n+/// ```\n+///\n+/// Implementing `Octal` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::Octal for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:o}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(9);\n+///\n+/// println!(\"l as octal is: {:o}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `b` character\n+/// Format trait for the `b` character.\n+///\n+/// The `Binary` trait should format its output as a number in binary.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '101010' in binary\n+///\n+/// assert_eq!(format!(\"{:b}\", x), \"101010\");\n+/// ```\n+///\n+/// Implementing `Binary` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::Binary for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:b}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(107);\n+///\n+/// println!(\"l as binary is: {:b}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Binary {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `x` character\n+/// Format trait for the `x` character.\n+///\n+/// The `LowerHex` trait should format its output as a number in hexidecimal, with `a` through `f`\n+/// in lower case.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '2a' in hex\n+///\n+/// assert_eq!(format!(\"{:x}\", x), \"2a\");\n+/// ```\n+///\n+/// Implementing `LowerHex` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::LowerHex for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:x}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(9);\n+///\n+/// println!(\"l as hex is: {:x}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `X` character\n+/// Format trait for the `X` character.\n+///\n+/// The `UpperHex` trait should format its output as a number in hexidecimal, with `A` through `F`\n+/// in upper case.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42; // 42 is '2A' in hex\n+///\n+/// assert_eq!(format!(\"{:X}\", x), \"2A\");\n+/// ```\n+///\n+/// Implementing `UpperHex` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::UpperHex for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///\n+///         write!(f, \"{:X}\", val) // delegate to i32's implementation\n+///     }\n+/// }\n+///\n+/// let l = Length(9);\n+///\n+/// println!(\"l as hex is: {:X}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `p` character\n+/// Format trait for the `p` character.\n+///\n+/// The `Pointer` trait should format its output as a memory location. This is commonly presented\n+/// as hexidecimal.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `&i32`:\n+///\n+/// ```\n+/// let x = &42;\n+///\n+/// let address = format!(\"{:p}\", x); // this produces something like '0x7f06092ac6d0'\n+/// ```\n+///\n+/// Implementing `Pointer` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::Pointer for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n+///\n+///         write!(f, \"{:p}\", self as *const Length)\n+///     }\n+/// }\n+///\n+/// let l = Length(42);\n+///\n+/// println!(\"l is in memory here: {:p}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `e` character\n+/// Format trait for the `e` character.\n+///\n+/// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `i32`:\n+///\n+/// ```\n+/// let x = 42.0; // 42.0 is '4.2e1' in scientific notation\n+///\n+/// assert_eq!(format!(\"{:e}\", x), \"4.2e1\");\n+/// ```\n+///\n+/// Implementing `LowerExp` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::LowerExp for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///         write!(f, \"{}e1\", val / 10)\n+///     }\n+/// }\n+///\n+/// let l = Length(100);\n+///\n+/// println!(\"l in scientific notation is: {:e}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `E` character\n+/// Format trait for the `E` character.\n+///\n+/// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n+///\n+/// For more information on formatters, see [the module-level documentation][module].\n+///\n+/// [module]: ../index.html\n+///\n+/// # Examples\n+///\n+/// Basic usage with `f32`:\n+///\n+/// ```\n+/// let x = 42.0; // 42.0 is '4.2E1' in scientific notation\n+///\n+/// assert_eq!(format!(\"{:E}\", x), \"4.2E1\");\n+/// ```\n+///\n+/// Implementing `UpperExp` on a type:\n+///\n+/// ```\n+/// use std::fmt;\n+///\n+/// struct Length(i32);\n+///\n+/// impl fmt::UpperExp for Length {\n+///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///         let val = self.0;\n+///         write!(f, \"{}E1\", val / 10)\n+///     }\n+/// }\n+///\n+/// let l = Length(100);\n+///\n+/// println!(\"l in scientific notation is: {:E}\", l);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperExp {\n     /// Formats the value using the given formatter."}, {"sha": "2c5ebc25f6bde3ca47c715e34997a5f8eedf1bd3", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -6128,7 +6128,7 @@ pub mod funcs {\n         use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, c_ulong, size_t};\n \n         extern {\n-            pub fn ioctl(d: c_int, request: c_ulong, ...) -> c_int;\n+            pub fn ioctl(fd: c_int, request: c_ulong, ...) -> c_int;\n             pub fn sysctl(name: *mut c_int,\n                           namelen: c_uint,\n                           oldp: *mut c_void,\n@@ -6160,12 +6160,12 @@ pub mod funcs {\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n-        use types::os::arch::c95::{c_uchar, c_int, size_t};\n+        use types::os::arch::c95::{c_uchar, c_int, c_ulong, size_t};\n \n         extern {\n             #[cfg(not(all(target_os = \"android\", target_arch = \"aarch64\")))]\n             pub fn getdtablesize() -> c_int;\n-            pub fn ioctl(d: c_int, request: c_int, ...) -> c_int;\n+            pub fn ioctl(fd: c_int, request: c_ulong, ...) -> c_int;\n             pub fn madvise(addr: *mut c_void, len: size_t, advice: c_int)\n                            -> c_int;\n             pub fn mincore(addr: *mut c_void, len: size_t, vec: *mut c_uchar)"}, {"sha": "936b0070dfccf9cce3d8674075dd964246cfb4df", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -1351,7 +1351,7 @@ fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool\n         reassigned: false\n     };\n     {\n-        let infcx = infer::new_infer_ctxt(bcx.tcx(), &bcx.tcx().tables, None, false);\n+        let infcx = infer::normalizing_infer_ctxt(bcx.tcx(), &bcx.tcx().tables);\n         let mut visitor = euv::ExprUseVisitor::new(&mut rc, &infcx);\n         visitor.walk_expr(body);\n     }"}, {"sha": "a4559708bf4e8144d30ab4e51b2b1ea3a8253847", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -936,7 +936,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n            predicates);\n \n     let tcx = ccx.tcx();\n-    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, true);\n+    let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables);\n     let mut selcx = traits::SelectionContext::new(&infcx);\n     let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n     let cause = traits::ObligationCause::dummy();"}, {"sha": "c996c8f65ac8b777e057d9578acad19232b2ea7b", "filename": "src/test/run-pass/issue-26805.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Ftest%2Frun-pass%2Fissue-26805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876/src%2Ftest%2Frun-pass%2Fissue-26805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26805.rs?ref=26f0cd5de7f71a0db0bb3857ce49a11cd0f7d876", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct NonOrd;\n+\n+fn main() {\n+    let _: Box<Iterator<Item = _>> = Box::new(vec![NonOrd].into_iter());\n+}"}]}