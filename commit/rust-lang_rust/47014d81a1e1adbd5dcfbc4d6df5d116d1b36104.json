{"sha": "47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "node_id": "C_kwDOAAsO6NoAKDQ3MDE0ZDgxYTFlMWFkYmQ1ZGNmYmM0ZDZkZjVkMTE2ZDFiMzYxMDQ", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-09-30T11:40:46Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-10-15T16:44:49Z"}, "message": "Fix adjacent tests", "tree": {"sha": "6260a2e0c40e1256d6164bd941d09a7d64d89ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6260a2e0c40e1256d6164bd941d09a7d64d89ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "html_url": "https://github.com/rust-lang/rust/commit/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9599d79a3b741b7c42353dc45eab6f1c461891f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9599d79a3b741b7c42353dc45eab6f1c461891f", "html_url": "https://github.com/rust-lang/rust/commit/c9599d79a3b741b7c42353dc45eab6f1c461891f"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "cf923a6a5940c3574216eca71be849f9cd89d6e5", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::expect_fun_call)]\n+#![allow(clippy::to_string_in_format_args)]\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n "}, {"sha": "e6f252259df70427e2da39b9ca9a3c6172f51659", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::expect_fun_call)]\n+#![allow(clippy::to_string_in_format_args)]\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n "}, {"sha": "ac48a06671cd2e0d572ecc36637c0237bc90426c", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "patch": "@@ -1,73 +1,73 @@\n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:28:26\n+  --> $DIR/expect_fun_call.rs:29:26\n    |\n LL |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n    |\n    = note: `-D clippy::expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:31:26\n+  --> $DIR/expect_fun_call.rs:32:26\n    |\n LL |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:41:25\n+  --> $DIR/expect_fun_call.rs:42:25\n    |\n LL |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:44:25\n+  --> $DIR/expect_fun_call.rs:45:25\n    |\n LL |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(\"Error {}: fake error\", error_code))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:56:17\n+  --> $DIR/expect_fun_call.rs:57:17\n    |\n LL |     Some(\"foo\").expect(format!(\"{} {}\", 1, 2).as_ref());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{} {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:77:21\n+  --> $DIR/expect_fun_call.rs:78:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:78:21\n+  --> $DIR/expect_fun_call.rs:79:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:79:21\n+  --> $DIR/expect_fun_call.rs:80:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:81:21\n+  --> $DIR/expect_fun_call.rs:82:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_static_str()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:82:21\n+  --> $DIR/expect_fun_call.rs:83:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:86:16\n+  --> $DIR/expect_fun_call.rs:87:16\n    |\n LL |     Some(true).expect(&format!(\"key {}, {}\", 1, 2));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"key {}, {}\", 1, 2))`\n \n error: use of `expect` followed by a function call\n-  --> $DIR/expect_fun_call.rs:92:17\n+  --> $DIR/expect_fun_call.rs:93:17\n    |\n LL |         opt_ref.expect(&format!(\"{:?}\", opt_ref));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{:?}\", opt_ref))`"}, {"sha": "73fc750511c78684cdd8650d03e6ce1dc40582b1", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(clippy::print_literal, clippy::redundant_clone)]\n+#![allow(clippy::print_literal, clippy::redundant_clone, clippy::to_string_in_format_args)]\n #![warn(clippy::useless_format)]\n \n struct Foo(pub String);"}, {"sha": "2f4595650cbf3c8d3cdd716e3ea32a0e24113b58", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(clippy::print_literal, clippy::redundant_clone)]\n+#![allow(clippy::print_literal, clippy::redundant_clone, clippy::to_string_in_format_args)]\n #![warn(clippy::useless_format)]\n \n struct Foo(pub String);"}, {"sha": "3ccdcd1117b5a5d47dcf87f95b30acbdba631e13", "filename": "tests/ui/to_string_in_display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47014d81a1e1adbd5dcfbc4d6df5d116d1b36104/tests%2Fui%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_string_in_display.rs?ref=47014d81a1e1adbd5dcfbc4d6df5d116d1b36104", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::to_string_in_display)]\n-#![allow(clippy::inherent_to_string_shadow_display)]\n+#![allow(clippy::inherent_to_string_shadow_display, clippy::to_string_in_format_args)]\n \n use std::fmt;\n "}]}