{"sha": "760942d7d2a0701f526a5bc634419df7a1e941fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDk0MmQ3ZDJhMDcwMWY1MjZhNWJjNjM0NDE5ZGY3YTFlOTQxZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-20T22:16:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-20T22:16:23Z"}, "message": "auto merge of #10576 : thestinger/rust/gc, r=pcwalton\n\nThis isn't very useful yet, but it does replace most functionality of `@T`. The `Mut<T>` type will make it unnecessary to have a `GcMut<T>` so I haven't included one. Obviously it doesn't work for trait objects but that needs to be figured out for `Rc<T>` too.", "tree": {"sha": "90febe16deca2656ef5254917a96f4a61dd5042b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90febe16deca2656ef5254917a96f4a61dd5042b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760942d7d2a0701f526a5bc634419df7a1e941fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760942d7d2a0701f526a5bc634419df7a1e941fe", "html_url": "https://github.com/rust-lang/rust/commit/760942d7d2a0701f526a5bc634419df7a1e941fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760942d7d2a0701f526a5bc634419df7a1e941fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634", "html_url": "https://github.com/rust-lang/rust/commit/e12bc239b4e85d0dedc5ba6e9f7ffa0b91ade634"}, {"sha": "543cae9a464fda1f1652eb1b103e648472d5dd73", "url": "https://api.github.com/repos/rust-lang/rust/commits/543cae9a464fda1f1652eb1b103e648472d5dd73", "html_url": "https://github.com/rust-lang/rust/commit/543cae9a464fda1f1652eb1b103e648472d5dd73"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "5e2ba808d3115cf5fe5a893c082ceb405f5127d2", "filename": "src/libstd/gc.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/760942d7d2a0701f526a5bc634419df7a1e941fe/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760942d7d2a0701f526a5bc634419df7a1e941fe/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=760942d7d2a0701f526a5bc634419df7a1e941fe", "patch": "@@ -0,0 +1,99 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*! Task-local garbage-collected boxes\n+\n+The `Gc` type provides shared ownership of an immutable value. Destruction is not deterministic, and\n+will occur some time between every `Gc` handle being gone and the end of the task. The garbage\n+collector is task-local so `Gc<T>` is not sendable.\n+\n+*/\n+\n+use kinds::Send;\n+use clone::{Clone, DeepClone};\n+\n+/// Immutable garbage-collected pointer type\n+#[no_send]\n+#[deriving(Clone)]\n+pub struct Gc<T> {\n+    priv ptr: @T\n+}\n+\n+impl<T: 'static> Gc<T> {\n+    /// Construct a new garbage-collected box\n+    #[inline]\n+    pub fn new(value: T) -> Gc<T> {\n+        Gc { ptr: @value }\n+    }\n+}\n+\n+impl<T: 'static> Gc<T> {\n+    /// Borrow the value contained in the garbage-collected box\n+    #[inline]\n+    pub fn borrow<'r>(&'r self) -> &'r T {\n+        &*self.ptr\n+    }\n+}\n+\n+/// The `Send` bound restricts this to acyclic graphs where it is well-defined.\n+///\n+/// A `Freeze` bound would also work, but `Send` *or* `Freeze` cannot be expressed.\n+impl<T: DeepClone + Send + 'static> DeepClone for Gc<T> {\n+    #[inline]\n+    fn deep_clone(&self) -> Gc<T> {\n+        Gc::new(self.borrow().deep_clone())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use cell::Cell;\n+\n+    #[test]\n+    fn test_clone() {\n+        let x = Gc::new(Cell::new(5));\n+        let y = x.clone();\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n+        }\n+        assert_eq!(y.borrow().take(), 20);\n+    }\n+\n+    #[test]\n+    fn test_deep_clone() {\n+        let x = Gc::new(Cell::new(5));\n+        let y = x.deep_clone();\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n+        }\n+        assert_eq!(y.borrow().take(), 5);\n+    }\n+\n+    #[test]\n+    fn test_simple() {\n+        let x = Gc::new(5);\n+        assert_eq!(*x.borrow(), 5);\n+    }\n+\n+    #[test]\n+    fn test_simple_clone() {\n+        let x = Gc::new(5);\n+        let y = x.clone();\n+        assert_eq!(*x.borrow(), 5);\n+        assert_eq!(*y.borrow(), 5);\n+    }\n+\n+    #[test]\n+    fn test_destructor() {\n+        let x = Gc::new(~5);\n+        assert_eq!(**x.borrow(), 5);\n+    }\n+}"}, {"sha": "ffa91df4e8a86e2114b10d7378aa8a97f4ac8186", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760942d7d2a0701f526a5bc634419df7a1e941fe/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760942d7d2a0701f526a5bc634419df7a1e941fe/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=760942d7d2a0701f526a5bc634419df7a1e941fe", "patch": "@@ -133,6 +133,7 @@ pub mod owned;\n pub mod managed;\n pub mod borrow;\n pub mod rc;\n+pub mod gc;\n \n \n /* Core language traits */"}]}