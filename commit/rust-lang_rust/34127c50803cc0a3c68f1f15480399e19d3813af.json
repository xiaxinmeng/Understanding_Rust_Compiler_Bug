{"sha": "34127c50803cc0a3c68f1f15480399e19d3813af", "node_id": "C_kwDOAAsO6NoAKDM0MTI3YzUwODAzY2MwYTNjNjhmMWYxNTQ4MDM5OWUxOWQzODEzYWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T14:40:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T14:59:15Z"}, "message": "no subtyping in the new trait solver", "tree": {"sha": "4b8a25c8457d93a59ca2ec676e5a72500fdc5943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8a25c8457d93a59ca2ec676e5a72500fdc5943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34127c50803cc0a3c68f1f15480399e19d3813af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34127c50803cc0a3c68f1f15480399e19d3813af", "html_url": "https://github.com/rust-lang/rust/commit/34127c50803cc0a3c68f1f15480399e19d3813af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34127c50803cc0a3c68f1f15480399e19d3813af/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685c32fd858acf107108abd6d35782532a0064e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/685c32fd858acf107108abd6d35782532a0064e2", "html_url": "https://github.com/rust-lang/rust/commit/685c32fd858acf107108abd6d35782532a0064e2"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "42f597c781d257e0f97506d931d5121b5d5a83fd", "filename": "compiler/rustc_trait_selection/src/solve/infcx_ext.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/34127c50803cc0a3c68f1f15480399e19d3813af/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34127c50803cc0a3c68f1f15480399e19d3813af/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs?ref=34127c50803cc0a3c68f1f15480399e19d3813af", "patch": "@@ -1,10 +1,10 @@\n use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{InferCtxt, InferOk};\n+use rustc_infer::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_span::DUMMY_SP;\n \n use super::Goal;\n@@ -26,12 +26,10 @@ pub(super) trait InferCtxtExt<'tcx> {\n         rhs: T,\n     ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution>;\n \n-    fn sup<T: ToTrace<'tcx>>(\n+    fn instantiate_bound_vars_with_infer<T: TypeFoldable<'tcx> + Copy>(\n         &self,\n-        param_env: ty::ParamEnv<'tcx>,\n-        lhs: T,\n-        rhs: T,\n-    ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution>;\n+        value: ty::Binder<'tcx, T>,\n+    ) -> T;\n }\n \n impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n@@ -67,22 +65,14 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             })\n     }\n \n-    #[instrument(level = \"debug\", skip(self, param_env), ret)]\n-    fn sup<T: ToTrace<'tcx>>(\n+    fn instantiate_bound_vars_with_infer<T: TypeFoldable<'tcx> + Copy>(\n         &self,\n-        param_env: ty::ParamEnv<'tcx>,\n-        lhs: T,\n-        rhs: T,\n-    ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution> {\n-        self.at(&ObligationCause::dummy(), param_env)\n-            .define_opaque_types(false)\n-            .sup(lhs, rhs)\n-            .map(|InferOk { value: (), obligations }| {\n-                obligations.into_iter().map(|o| o.into()).collect()\n-            })\n-            .map_err(|e| {\n-                debug!(?e, \"failed to sup\");\n-                NoSolution\n-            })\n+        value: ty::Binder<'tcx, T>,\n+    ) -> T {\n+        self.replace_bound_vars_with_fresh_vars(\n+            DUMMY_SP,\n+            LateBoundRegionConversionTime::HigherRankedType,\n+            value,\n+        )\n     }\n }"}, {"sha": "00c7edf0ef8a354d6a038725c9aadf7e62b0830d", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34127c50803cc0a3c68f1f15480399e19d3813af/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34127c50803cc0a3c68f1f15480399e19d3813af/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=34127c50803cc0a3c68f1f15480399e19d3813af", "patch": "@@ -6,7 +6,7 @@ use super::{Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_infer::infer::{InferCtxt, LateBoundRegionConversionTime};\n+use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::specialization_graph::LeafDef;\n use rustc_infer::traits::Reveal;\n@@ -297,12 +297,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         if let Some(poly_projection_pred) = assumption.to_opt_poly_projection_pred() {\n             ecx.infcx.probe(|_| {\n-                let assumption_projection_pred = ecx.infcx.replace_bound_vars_with_fresh_vars(\n-                    DUMMY_SP,\n-                    LateBoundRegionConversionTime::HigherRankedType,\n-                    poly_projection_pred,\n-                );\n-                let nested_goals = ecx.infcx.sup(\n+                let assumption_projection_pred =\n+                    ecx.infcx.instantiate_bound_vars_with_infer(poly_projection_pred);\n+                let nested_goals = ecx.infcx.eq(\n                     goal.param_env,\n                     goal.predicate.projection_ty,\n                     assumption_projection_pred.projection_ty,"}, {"sha": "d89759f4dd4877d0e71292f1e5af91035bac22ed", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34127c50803cc0a3c68f1f15480399e19d3813af/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34127c50803cc0a3c68f1f15480399e19d3813af/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=34127c50803cc0a3c68f1f15480399e19d3813af", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::{Movability, Mutability};\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n+use rustc_middle::ty::TraitPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ToPolyTraitRef, TraitPredicate};\n use rustc_span::DUMMY_SP;\n \n impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n@@ -67,10 +67,12 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         if let Some(poly_trait_pred) = assumption.to_opt_poly_trait_pred() {\n             // FIXME: Constness and polarity\n             ecx.infcx.probe(|_| {\n-                let nested_goals = ecx.infcx.sup(\n+                let assumption_trait_pred =\n+                    ecx.infcx.instantiate_bound_vars_with_infer(poly_trait_pred);\n+                let nested_goals = ecx.infcx.eq(\n                     goal.param_env,\n-                    ty::Binder::dummy(goal.predicate.trait_ref),\n-                    poly_trait_pred.to_poly_trait_ref(),\n+                    goal.predicate.trait_ref,\n+                    assumption_trait_pred.trait_ref,\n                 )?;\n                 ecx.evaluate_all_and_make_canonical_response(nested_goals)\n             })"}]}