{"sha": "a21607d9b504281a00325065955dd825334ad6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTYwN2Q5YjUwNDI4MWEwMDMyNTA2NTk1NWRkODI1MzM0YWQ2ZWY=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-05-05T19:08:24Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-05-07T15:39:00Z"}, "message": "needless_collect: For `BTreeMap` and `HashMap` lint only `is_empty`\n\n- `len` might produce different results than `count`\n- they don't have `contain` but `contains_key` method", "tree": {"sha": "03ee235ba3007d6b05e8bba63cd44146fe9f598a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ee235ba3007d6b05e8bba63cd44146fe9f598a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21607d9b504281a00325065955dd825334ad6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21607d9b504281a00325065955dd825334ad6ef", "html_url": "https://github.com/rust-lang/rust/commit/a21607d9b504281a00325065955dd825334ad6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21607d9b504281a00325065955dd825334ad6ef/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "182a1853c3adfed34b084614c333d4945d5a24f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/182a1853c3adfed34b084614c333d4945d5a24f2", "html_url": "https://github.com/rust-lang/rust/commit/182a1853c3adfed34b084614c333d4945d5a24f2"}], "stats": {"total": 96, "additions": 63, "deletions": 33}, "files": [{"sha": "1ed58faa9252d70caef8077d88d9bc5b2d1a769c", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a21607d9b504281a00325065955dd825334ad6ef/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21607d9b504281a00325065955dd825334ad6ef/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=a21607d9b504281a00325065955dd825334ad6ef", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, GenericArg, GenericArgs, HirId, Local, Pat, PatKind, QPath, StmtKind, Ty};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{MultiSpan, Span};\n \n@@ -28,32 +27,45 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         if let Some(generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n         if let Some(ty) = cx.typeck_results().node_type_opt(ty.hir_id);\n-        if is_type_diagnostic_item(cx, ty, sym::vec_type)\n-            || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n-            || match_type(cx, ty, &paths::BTREEMAP)\n-            || is_type_diagnostic_item(cx, ty, sym::hashmap_type);\n-        if let Some(sugg) = match &*method.ident.name.as_str() {\n-            \"len\" => Some(\"count()\".to_string()),\n-            \"is_empty\" => Some(\"next().is_none()\".to_string()),\n-            \"contains\" => {\n-                let contains_arg = snippet(cx, args[1].span, \"??\");\n-                let (arg, pred) = contains_arg\n-                    .strip_prefix('&')\n-                    .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n-                Some(format!(\"any(|{}| x == {})\", arg, pred))\n-            }\n-            _ => None,\n-        };\n         then {\n-            span_lint_and_sugg(\n-                cx,\n-                NEEDLESS_COLLECT,\n-                method0_span.with_hi(expr.span.hi()),\n-                NEEDLESS_COLLECT_MSG,\n-                \"replace with\",\n-                sugg,\n-                Applicability::MachineApplicable,\n-            );\n+            let is_empty_sugg = Some(\"next().is_none()\".to_string());\n+            let method_name = &*method.ident.name.as_str();\n+            let sugg = if is_type_diagnostic_item(cx, ty, sym::vec_type) || \n+                        is_type_diagnostic_item(cx, ty, sym::vecdeque_type) {\n+                match method_name {\n+                    \"len\" => Some(\"count()\".to_string()),\n+                    \"is_empty\" => is_empty_sugg,\n+                    \"contains\" => {\n+                        let contains_arg = snippet(cx, args[1].span, \"??\");\n+                        let (arg, pred) = contains_arg\n+                            .strip_prefix('&')\n+                            .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n+                        Some(format!(\"any(|{}| x == {})\", arg, pred))\n+                    }\n+                    _ => None,\n+                }\n+            }\n+            else if match_type(cx, ty, &paths::BTREEMAP) ||\n+                is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n+                match method_name {\n+                    \"is_empty\" => is_empty_sugg,\n+                    _ => None,\n+                }\n+            }\n+            else {\n+                None\n+            };\n+            if let Some(sugg) = sugg {\n+                span_lint_and_sugg(\n+                    cx,\n+                    NEEDLESS_COLLECT,\n+                    method0_span.with_hi(expr.span.hi()),\n+                    NEEDLESS_COLLECT_MSG,\n+                    \"replace with\",\n+                    sugg,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "d7595569681a64d7691f094afe9a9e542aef3c6a", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a21607d9b504281a00325065955dd825334ad6ef/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a21607d9b504281a00325065955dd825334ad6ef/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=a21607d9b504281a00325065955dd825334ad6ef", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n-use std::collections::{BTreeSet, HashMap, HashSet};\n+use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n@@ -13,7 +13,13 @@ fn main() {\n         // Empty\n     }\n     sample.iter().cloned().any(|x| x == 1);\n-    sample.iter().map(|x| (x, x)).count();\n+    // #7164 HashMap's and BTreeMap's `len` usage should not be linted\n+    sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+    sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().len();\n+\n+    sample.iter().map(|x| (x, x)).next().is_none();\n+    sample.iter().map(|x| (x, x)).next().is_none();\n+\n     // Notice the `HashSet`--this should not be linted\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this"}, {"sha": "9883c75b745fbf97a49370d998e8b6bc6f77e29d", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a21607d9b504281a00325065955dd825334ad6ef/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21607d9b504281a00325065955dd825334ad6ef/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=a21607d9b504281a00325065955dd825334ad6ef", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused, clippy::suspicious_map, clippy::iter_count)]\n \n-use std::collections::{BTreeSet, HashMap, HashSet};\n+use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n@@ -13,7 +13,13 @@ fn main() {\n         // Empty\n     }\n     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n+    // #7164 HashMap's and BTreeMap's `len` usage should not be linted\n     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n+    sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().len();\n+\n+    sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().is_empty();\n+    sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().is_empty();\n+\n     // Notice the `HashSet`--this should not be linted\n     sample.iter().collect::<HashSet<_>>().len();\n     // Neither should this"}, {"sha": "3acdf66a42e1d37123693dd658a4a999b81e28d4", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a21607d9b504281a00325065955dd825334ad6ef/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21607d9b504281a00325065955dd825334ad6ef/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=a21607d9b504281a00325065955dd825334ad6ef", "patch": "@@ -19,10 +19,16 @@ LL |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == 1)`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:16:35\n+  --> $DIR/needless_collect.rs:20:35\n    |\n-LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n+LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().is_empty();\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n \n-error: aborting due to 4 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:21:35\n+   |\n+LL |     sample.iter().map(|x| (x, x)).collect::<BTreeMap<_, _>>().is_empty();\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+\n+error: aborting due to 5 previous errors\n "}]}