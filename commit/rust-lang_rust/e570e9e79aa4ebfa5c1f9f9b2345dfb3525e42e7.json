{"sha": "e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzBlOWU3OWFhNGViZmE1YzFmOWY5YjIzNDVkZmIzNTI1ZTQyZTc=", "commit": {"author": {"name": "Gilad Naaman", "email": "gilad.naaman@gmail.com", "date": "2017-12-13T19:12:19Z"}, "committer": {"name": "Gilad Naaman", "email": "gilad.naaman@gmail.com", "date": "2018-01-26T17:46:04Z"}, "message": "libtest: JSON formatting is now only available in unstable builds\n\nlibtest: Added the -Z option for unstable options", "tree": {"sha": "0f91fee690778b234df4eb4a545a11296d257ea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f91fee690778b234df4eb4a545a11296d257ea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7", "html_url": "https://github.com/rust-lang/rust/commit/e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7/comments", "author": null, "committer": null, "parents": [{"sha": "588a6a35be4446fbaaa792d08efee51e04e61fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/588a6a35be4446fbaaa792d08efee51e04e61fe8", "html_url": "https://github.com/rust-lang/rust/commit/588a6a35be4446fbaaa792d08efee51e04e61fe8"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "caaa4f7e2b7e521ea952b9d5b5b142d98348c650", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e570e9e79aa4ebfa5c1f9f9b2345dfb3525e42e7", "patch": "@@ -399,7 +399,9 @@ fn optgroups() -> getopts::Options {\n         .optopt(\"\", \"format\", \"Configure formatting of output:\n             pretty = Print verbose output;\n             terse  = Display one character per test;\n-            json   = Output a json document\", \"pretty|terse|json\");\n+            json   = Output a json document\", \"pretty|terse|json\")\n+        .optopt(\"Z\", \"\", \"Enable nightly-only flags:\n+            unstable-options = Allow use of experimental features\", \"unstable-options\");\n     return opts\n }\n \n@@ -435,15 +437,41 @@ Test Attributes:\n              usage = options.usage(&message));\n }\n \n+// FIXME: Copied from libsyntax until linkage errors are resolved.\n+fn is_nightly() -> bool {\n+    // Whether this is a feature-staged build, i.e. on the beta or stable channel\n+    let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+    // Whether we should enable unstable features for bootstrapping\n+    let bootstrap = env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n+\n+    bootstrap || !disable_unstable_features\n+}\n+\n // Parses command line arguments into test options\n pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n+    let mut allow_unstable = false;\n     let opts = optgroups();\n     let args = args.get(1..).unwrap_or(args);\n     let matches = match opts.parse(args) {\n         Ok(m) => m,\n         Err(f) => return Some(Err(f.to_string())),\n     };\n \n+    if let Some(opt) = matches.opt_str(\"Z\") {\n+        if !is_nightly() {\n+            return Some(Err(\"the option `Z` is only accepted on the nightly compiler\".into()));\n+        }\n+\n+        match &*opt {\n+            \"unstable-options\" => {\n+                allow_unstable = true;\n+            }\n+            _ => {\n+                return Some(Err(\"Unrecognized option to `Z`\".into()));\n+            }\n+        }\n+    };\n+\n     if matches.opt_present(\"h\") {\n         usage(&args[0], &opts);\n         return None;\n@@ -504,7 +532,13 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         None if quiet => OutputFormat::Terse,\n         Some(\"pretty\") | None => OutputFormat::Pretty,\n         Some(\"terse\") => OutputFormat::Terse,\n-        Some(\"json\") => OutputFormat::Json,\n+        Some(\"json\") => {\n+            if !allow_unstable {\n+                return Some(\n+                    Err(\"The \\\"json\\\" format is only accepted on the nightly compiler\".into()));\n+            }\n+            OutputFormat::Json\n+        },\n \n         Some(v) => {\n             return Some(Err(format!(\"argument for --format must be pretty, terse, or json (was \\"}]}