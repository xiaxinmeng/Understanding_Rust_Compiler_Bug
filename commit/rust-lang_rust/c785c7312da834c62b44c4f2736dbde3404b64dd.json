{"sha": "c785c7312da834c62b44c4f2736dbde3404b64dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ODVjNzMxMmRhODM0YzYyYjQ0YzRmMjczNmRiZGUzNDA0YjY0ZGQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-08T11:21:07Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-08T11:21:07Z"}, "message": "Fixed infintite loop bug", "tree": {"sha": "5ca5d2f4b007657af05bc3a5706a5a8898be3018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca5d2f4b007657af05bc3a5706a5a8898be3018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c785c7312da834c62b44c4f2736dbde3404b64dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c785c7312da834c62b44c4f2736dbde3404b64dd", "html_url": "https://github.com/rust-lang/rust/commit/c785c7312da834c62b44c4f2736dbde3404b64dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c785c7312da834c62b44c4f2736dbde3404b64dd/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "184e9ea230ecbc468eda9309888e6abefbc70aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/184e9ea230ecbc468eda9309888e6abefbc70aaa", "html_url": "https://github.com/rust-lang/rust/commit/184e9ea230ecbc468eda9309888e6abefbc70aaa"}], "stats": {"total": 34, "additions": 4, "deletions": 30}, "files": [{"sha": "5f20112cec024f4b807385139a97479b0230d6fc", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c785c7312da834c62b44c4f2736dbde3404b64dd/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c785c7312da834c62b44c4f2736dbde3404b64dd/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=c785c7312da834c62b44c4f2736dbde3404b64dd", "patch": "@@ -237,34 +237,13 @@ pub(crate) trait Querier {\n pub(crate) struct WalkerOwner<'a> {\n     walker: RefCell<SubTreeWalker<'a>>,\n     offset: usize,\n-    temp: RefCell<std::collections::HashMap<usize, Option<TtToken>>>,\n }\n \n impl<'a> WalkerOwner<'a> {\n     fn token_idx<'b>(&self, pos: usize) -> Option<TtToken> {\n         self.set_walker_pos(pos);\n         let walker = self.walker.borrow();\n-        let r = walker.current().cloned();\n-\n-        if walker.subtree.token_trees.len() == 1 {\n-            if let tt::TokenTree::Leaf(_) = &walker.subtree.token_trees[0] {\n-                let mut temp = self.temp.borrow_mut();\n-\n-                if r.is_none() {\n-                    if let Some(Some(p)) = temp.get(&pos) {\n-                        unreachable!(\n-                            \"nWWWWWWWWWWWW~~~~~~~~~~~~~~,\\n{:#?}\\n{:#?}\\n{:#?}\",\n-                            pos, p, self\n-                        );\n-                    }\n-                }\n-\n-                // eprintln!(\"===>{:#?}\\n{:#?}\\n{:#?}\", pos, r, self);\n-                temp.insert(pos, r.clone());\n-            }\n-        }\n-\n-        r\n+        walker.current().cloned()\n     }\n \n     fn start_from_nth(&mut self, pos: usize) {\n@@ -275,21 +254,16 @@ impl<'a> WalkerOwner<'a> {\n     fn set_walker_pos(&self, mut pos: usize) {\n         pos += self.offset;\n         let mut walker = self.walker.borrow_mut();\n-        while pos > walker.pos {\n+        while pos > walker.pos && walker.idx != WalkIndex::Eof {\n             walker.forward();\n         }\n         while pos < walker.pos {\n             walker.backward();\n         }\n-        assert!(pos == walker.pos);\n     }\n \n     fn new(subtree: &'a tt::Subtree) -> Self {\n-        WalkerOwner {\n-            walker: RefCell::new(SubTreeWalker::new(subtree)),\n-            offset: 0,\n-            temp: RefCell::new(Default::default()),\n-        }\n+        WalkerOwner { walker: RefCell::new(SubTreeWalker::new(subtree)), offset: 0 }\n     }\n \n     fn collect_token_tree(&mut self, n: usize) -> Vec<&tt::TokenTree> {\n@@ -501,7 +475,7 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n }\n \n fn convert_punct(p: &tt::Punct, parent: &tt::Subtree, next: usize) -> TtToken {\n-    let iter = parent.token_trees[next..].iter();\n+    let iter = parent.token_trees[next + 1..].iter();\n     let mut peek = TokenPeek::new(iter);\n \n     if let Some((kind, is_joint_to_next, text, size)) = convert_multi_char_punct(p, &mut peek) {"}]}