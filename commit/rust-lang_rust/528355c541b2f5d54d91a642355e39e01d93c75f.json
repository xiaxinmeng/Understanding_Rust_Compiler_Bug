{"sha": "528355c541b2f5d54d91a642355e39e01d93c75f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyODM1NWM1NDFiMmY1ZDU0ZDkxYTY0MjM1NWUzOWUwMWQ5M2M3NWY=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-01T10:09:25Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-01T10:09:25Z"}, "message": "add const_allocate intrisic", "tree": {"sha": "bb9cd539f5946fd2f6e0ce0b0453d3ee8d2b2aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb9cd539f5946fd2f6e0ce0b0453d3ee8d2b2aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/528355c541b2f5d54d91a642355e39e01d93c75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/528355c541b2f5d54d91a642355e39e01d93c75f", "html_url": "https://github.com/rust-lang/rust/commit/528355c541b2f5d54d91a642355e39e01d93c75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/528355c541b2f5d54d91a642355e39e01d93c75f/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "html_url": "https://github.com/rust-lang/rust/commit/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "443ef072647cc18497148af13b0912effc92096c", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -104,7 +104,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     // This match is just a canary for future changes to `MemoryKind`, which most likely need\n     // changes in this function.\n     match kind {\n-        MemoryKind::Stack | MemoryKind::Vtable | MemoryKind::CallerLocation => {}\n+        MemoryKind::Stack | MemoryKind::Heap | MemoryKind::Vtable | MemoryKind::CallerLocation => {}\n     }\n     // Set allocation mutability as appropriate. This is used by LLVM to put things into\n     // read-only memory, and also by Miri when evaluating other globals that"}, {"sha": "953c04a1007bfcf28f4a6543dab47e1527c5fcc1", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -14,10 +14,11 @@ use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n+use rustc_target::abi::{Abi, Align, LayoutOf as _, Primitive, Size};\n \n use super::{\n-    util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy,\n+    util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, MemoryKind, OpTy,\n+    PlaceTy,\n };\n \n mod caller_location;\n@@ -337,6 +338,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n+            sym::const_allocate => {\n+                let size = self.read_scalar(args[0])?.to_machine_usize(self)?;\n+                let align = self.read_scalar(args[1])?.to_machine_usize(self)?;\n+\n+                let align = match Align::from_bytes(align) {\n+                    Ok(a) => a,\n+                    Err(err) => bug!(\"align has to power of 2, {}\", err),\n+                };\n+\n+                let ptr =\n+                    self.memory.allocate(Size::from_bytes(size as u64), align, MemoryKind::Heap);\n+                self.write_scalar(Scalar::Ptr(ptr), dest)?;\n+            }\n             sym::offset => {\n                 let ptr = self.read_scalar(args[0])?.check_init()?;\n                 let offset_count = self.read_scalar(args[1])?.to_machine_isize(self)?;"}, {"sha": "ce64923727c3e8eaa8638c08766c2c4bf7d9a4a8", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -27,6 +27,8 @@ use crate::util::pretty;\n pub enum MemoryKind<T> {\n     /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n+    /// Heap memory.\n+    Heap,\n     /// Memory backing vtables. Error if ever deallocated.\n     Vtable,\n     /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.\n@@ -40,6 +42,7 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     fn may_leak(self) -> bool {\n         match self {\n             MemoryKind::Stack => false,\n+            MemoryKind::Heap => true,\n             MemoryKind::Vtable => true,\n             MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak(),\n@@ -51,6 +54,7 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             MemoryKind::Stack => write!(f, \"stack variable\"),\n+            MemoryKind::Heap => write!(f, \"heap variable\"),\n             MemoryKind::Vtable => write!(f, \"vtable\"),\n             MemoryKind::CallerLocation => write!(f, \"caller location\"),\n             MemoryKind::Machine(m) => write!(f, \"{}\", m),"}, {"sha": "91b87fdc482de3f733a13b1896dd9e980850aa42", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -356,6 +356,7 @@ symbols! {\n         concat_idents,\n         conservative_impl_trait,\n         console,\n+        const_allocate,\n         const_compare_raw_pointers,\n         const_constructor,\n         const_eval_limit,"}, {"sha": "e2712a3033995edb92838a8c17fd6a53f5cc00c2", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -286,6 +286,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.bool)\n             }\n \n+            sym::const_allocate => {\n+                (0, vec![tcx.types.usize, tcx.types.usize], tcx.mk_mut_ptr(tcx.types.u8))\n+            }\n+\n             sym::ptr_offset_from => {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.isize)\n             }"}, {"sha": "72282a93b70740ffa5d55cb86892aa189b3b6bad", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -1732,6 +1732,11 @@ extern \"rust-intrinsic\" {\n     /// See documentation of `<*const T>::guaranteed_ne` for details.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n+\n+    /// Allocate at compile time. Should not be called at runtime.\n+    #[rustc_const_unstable(feature = \"const_heap\", issue = \"none\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "bb76683e0fef4e6dcad32efd17ed8c767f8a231c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -68,6 +68,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n #![feature(cfg_target_has_atomic)]\n+#![cfg_attr(not(bootstrap), feature(const_heap))]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]"}, {"sha": "db650f8817fff46d1bfb950a82a5d8869423516c", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: *const i32 = foo();\n+\n+const fn foo() -> &'static i32 {\n+    let t = unsafe {\n+        let i = intrinsics::const_allocate(4, 4) as * mut i32;\n+        *i = 20;\n+        i\n+    };\n+    unsafe { &*t }\n+}\n+fn main() {\n+    assert_eq!(unsafe { *FOO }, 20)\n+}"}, {"sha": "c55cd32d26425b22b41b99a6b2b865eebe124989", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_transient.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_transient.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: i32 = foo();\n+\n+const fn foo() -> i32 {\n+    let t = unsafe {\n+        let i = intrinsics::const_allocate(4, 4) as * mut i32;\n+        *i = 20;\n+        i\n+    };\n+    unsafe { *t }\n+}\n+fn main() {\n+    assert_eq!(FOO, 20);\n+}"}, {"sha": "998b6cef84a729ec2efde54c53909738dc8c4b86", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -0,0 +1,10 @@\n+// compile-test\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n+//~^ error: it is undefined behavior to use this value\n+fn main() {}"}, {"sha": "866f877f54d43e5cc7c32823adaf077ba6e789db", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.stderr?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/alloc_intrinsic_uninit.rs:8:1\n+   |\n+LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .<deref>, but expected initialized plain (non-pointer) bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "625f7670bcd63b5b85bae1dfdf1e7b8a2719b03a", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.rs?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const BAR: *mut i32 = unsafe { intrinsics::const_allocate(4, 4) as *mut i32};\n+//~^ error: untyped pointers are not allowed in constant\n+\n+fn main() {}"}, {"sha": "ee84f8e54f3441d14e9671003e65ddee218ba935", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_untyped.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/528355c541b2f5d54d91a642355e39e01d93c75f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_untyped.stderr?ref=528355c541b2f5d54d91a642355e39e01d93c75f", "patch": "@@ -0,0 +1,8 @@\n+error: untyped pointers are not allowed in constant\n+  --> $DIR/alloc_intrinsic_untyped.rs:7:1\n+   |\n+LL | const BAR: *mut i32 = unsafe { intrinsics::const_allocate(4, 4) as *mut i32};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}