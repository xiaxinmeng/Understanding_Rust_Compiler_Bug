{"sha": "ab99eff7b68ea327c2d327e96e7f8e0119a08516", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOTllZmY3YjY4ZWEzMjdjMmQzMjdlOTZlN2Y4ZTAxMTlhMDg1MTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-09T14:46:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T14:46:10Z"}, "message": "Merge #7940\n\n7940: Cleanup r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1273129880e9c1bc8f6637afec380301dc41a1d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1273129880e9c1bc8f6637afec380301dc41a1d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab99eff7b68ea327c2d327e96e7f8e0119a08516", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR4ozCRBK7hj4Ov3rIwAAdHIIAEau2wyK63X7m1fK+ROxAaRK\nRjOQW3CMDWm3ZU9h4GoyoJnThTvdNWzkexj9sv56PIPXpnjOKGwX4q4qKvAbCukN\nyR7StxZRrIUWcKbIColU2PV0ArtRMIJyuKgI3Aofk+l1IWBTv+jghM2xuFnUJNSj\nOEMt8vHapBcob4+5qAK27kprSTSxXT89cyihWt0ffwJH8Qq9JnrbNF2Gss41IwBS\nYdzsMEFd7EEb4PJriBB+P4Q4lXg+s71UdqDWhr/BfhXZgjfIMt8csxYgR/UJZ1mo\nKL9wSLXJo8amC3uyefoWHaqAWi3DS5ZwAokknt5D8zl/9lAtJ3mtw9t933xKAL8=\n=9BQ5\n-----END PGP SIGNATURE-----\n", "payload": "tree 1273129880e9c1bc8f6637afec380301dc41a1d2\nparent 21913d0fdb848445a908021dbcd4c3accf2ca0a5\nparent abc0ed36bdf4975dc9c5fb2ddd3f960ad2db5494\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615301170 +0000\ncommitter GitHub <noreply@github.com> 1615301170 +0000\n\nMerge #7940\n\n7940: Cleanup r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab99eff7b68ea327c2d327e96e7f8e0119a08516", "html_url": "https://github.com/rust-lang/rust/commit/ab99eff7b68ea327c2d327e96e7f8e0119a08516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab99eff7b68ea327c2d327e96e7f8e0119a08516/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21913d0fdb848445a908021dbcd4c3accf2ca0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21913d0fdb848445a908021dbcd4c3accf2ca0a5", "html_url": "https://github.com/rust-lang/rust/commit/21913d0fdb848445a908021dbcd4c3accf2ca0a5"}, {"sha": "abc0ed36bdf4975dc9c5fb2ddd3f960ad2db5494", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc0ed36bdf4975dc9c5fb2ddd3f960ad2db5494", "html_url": "https://github.com/rust-lang/rust/commit/abc0ed36bdf4975dc9c5fb2ddd3f960ad2db5494"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "b16f0775aa18a209c3512a7ce0345837d4eaed35", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab99eff7b68ea327c2d327e96e7f8e0119a08516/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab99eff7b68ea327c2d327e96e7f8e0119a08516/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=ab99eff7b68ea327c2d327e96e7f8e0119a08516", "patch": "@@ -208,7 +208,7 @@ impl CompletionItem {\n             lookup: None,\n             kind: None,\n             text_edit: None,\n-            deprecated: None,\n+            deprecated: false,\n             trigger_call_info: None,\n             score: None,\n             ref_match: None,\n@@ -308,7 +308,7 @@ pub(crate) struct Builder {\n     lookup: Option<String>,\n     kind: Option<CompletionItemKind>,\n     text_edit: Option<TextEdit>,\n-    deprecated: Option<bool>,\n+    deprecated: bool,\n     trigger_call_info: Option<bool>,\n     score: Option<CompletionScore>,\n     ref_match: Option<(Mutability, CompletionScore)>,\n@@ -355,7 +355,7 @@ impl Builder {\n             lookup,\n             kind: self.kind,\n             completion_kind: self.completion_kind,\n-            deprecated: self.deprecated.unwrap_or(false),\n+            deprecated: self.deprecated,\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n             score: self.score,\n             ref_match: self.ref_match,\n@@ -415,7 +415,7 @@ impl Builder {\n         self\n     }\n     pub(crate) fn set_deprecated(mut self, deprecated: bool) -> Builder {\n-        self.deprecated = Some(deprecated);\n+        self.deprecated = deprecated;\n         self\n     }\n     pub(crate) fn set_score(mut self, score: CompletionScore) -> Builder {\n@@ -430,11 +430,8 @@ impl Builder {\n         self.import_to_add = import_to_add;\n         self\n     }\n-    pub(crate) fn set_ref_match(\n-        mut self,\n-        ref_match: Option<(Mutability, CompletionScore)>,\n-    ) -> Builder {\n-        self.ref_match = ref_match;\n+    pub(crate) fn ref_match(mut self, ref_match: (Mutability, CompletionScore)) -> Builder {\n+        self.ref_match = Some(ref_match);\n         self\n     }\n }"}, {"sha": "0a6ac8804a8afbeebca5bf8117100cf22ad55e54", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab99eff7b68ea327c2d327e96e7f8e0119a08516/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab99eff7b68ea327c2d327e96e7f8e0119a08516/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=ab99eff7b68ea327c2d327e96e7f8e0119a08516", "patch": "@@ -246,7 +246,6 @@ impl<'a> Render<'a> {\n             }\n         };\n \n-        let mut ref_match = None;\n         if let ScopeDef::Local(local) = resolution {\n             if let Some((active_name, active_type)) = self.ctx.active_name_and_type() {\n                 let ty = local.ty(self.ctx.db());\n@@ -255,7 +254,11 @@ impl<'a> Render<'a> {\n                 {\n                     item = item.set_score(score);\n                 }\n-                ref_match = refed_type_matches(&active_type, &active_name, &ty, &local_name);\n+                if let Some(ref_match) =\n+                    refed_type_matches(&active_type, &active_name, &ty, &local_name)\n+                {\n+                    item = item.ref_match(ref_match);\n+                }\n             }\n         }\n \n@@ -285,7 +288,6 @@ impl<'a> Render<'a> {\n         Some(\n             item.kind(kind)\n                 .add_import(import_to_add)\n-                .set_ref_match(ref_match)\n                 .set_documentation(self.docs(resolution))\n                 .set_deprecated(self.is_deprecated(resolution))\n                 .build(),"}, {"sha": "261d9fb180bf3114241cb87f40bd565b463f3af8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ab99eff7b68ea327c2d327e96e7f8e0119a08516/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab99eff7b68ea327c2d327e96e7f8e0119a08516/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=ab99eff7b68ea327c2d327e96e7f8e0119a08516", "patch": "@@ -173,20 +173,20 @@ pub(crate) fn snippet_text_edit_vec(\n \n pub(crate) fn completion_item(\n     line_index: &LineIndex,\n-    completion_item: CompletionItem,\n+    item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n-    fn set_score(res: &mut lsp_types::CompletionItem, label: &str) {\n-        res.preselect = Some(true);\n+    fn set_score(lsp_item: &mut lsp_types::CompletionItem, label: &str) {\n+        lsp_item.preselect = Some(true);\n         // HACK: sort preselect items first\n-        res.sort_text = Some(format!(\" {}\", label));\n+        lsp_item.sort_text = Some(format!(\" {}\", label));\n     }\n \n     let mut additional_text_edits = Vec::new();\n     let mut text_edit = None;\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n     // non-trivial mapping here.\n-    let source_range = completion_item.source_range();\n-    for indel in completion_item.text_edit().iter() {\n+    let source_range = item.source_range();\n+    for indel in item.text_edit().iter() {\n         if indel.delete.contains_range(source_range) {\n             text_edit = Some(if indel.delete == source_range {\n                 self::text_edit(line_index, indel.clone())\n@@ -207,46 +207,46 @@ pub(crate) fn completion_item(\n     }\n     let text_edit = text_edit.unwrap();\n \n-    let mut res = lsp_types::CompletionItem {\n-        label: completion_item.label().to_string(),\n-        detail: completion_item.detail().map(|it| it.to_string()),\n-        filter_text: Some(completion_item.lookup().to_string()),\n-        kind: completion_item.kind().map(completion_item_kind),\n+    let mut lsp_item = lsp_types::CompletionItem {\n+        label: item.label().to_string(),\n+        detail: item.detail().map(|it| it.to_string()),\n+        filter_text: Some(item.lookup().to_string()),\n+        kind: item.kind().map(completion_item_kind),\n         text_edit: Some(text_edit.into()),\n         additional_text_edits: Some(additional_text_edits),\n-        documentation: completion_item.documentation().map(documentation),\n-        deprecated: Some(completion_item.deprecated()),\n+        documentation: item.documentation().map(documentation),\n+        deprecated: Some(item.deprecated()),\n         ..Default::default()\n     };\n \n-    if completion_item.score().is_some() {\n-        set_score(&mut res, completion_item.label());\n+    if item.score().is_some() {\n+        set_score(&mut lsp_item, item.label());\n     }\n \n-    if completion_item.deprecated() {\n-        res.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n+    if item.deprecated() {\n+        lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n     }\n \n-    if completion_item.trigger_call_info() {\n-        res.command = Some(command::trigger_parameter_hints());\n+    if item.trigger_call_info() {\n+        lsp_item.command = Some(command::trigger_parameter_hints());\n     }\n \n-    let mut all_results = match completion_item.ref_match() {\n+    let mut res = match item.ref_match() {\n         Some(ref_match) => {\n-            let mut refed = res.clone();\n+            let mut refed = lsp_item.clone();\n             let (mutability, _score) = ref_match;\n             let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), refed.label);\n             set_score(&mut refed, &label);\n             refed.label = label;\n-            vec![res, refed]\n+            vec![lsp_item, refed]\n         }\n-        None => vec![res],\n+        None => vec![lsp_item],\n     };\n \n-    for mut r in all_results.iter_mut() {\n-        r.insert_text_format = Some(insert_text_format(completion_item.insert_text_format()));\n+    for mut r in res.iter_mut() {\n+        r.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n     }\n-    all_results\n+    res\n }\n \n pub(crate) fn signature_help("}]}