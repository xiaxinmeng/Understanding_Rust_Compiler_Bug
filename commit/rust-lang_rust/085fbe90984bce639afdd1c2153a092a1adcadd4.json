{"sha": "085fbe90984bce639afdd1c2153a092a1adcadd4", "node_id": "C_kwDOAAsO6NoAKDA4NWZiZTkwOTg0YmNlNjM5YWZkZDFjMjE1M2EwOTJhMWFkY2FkZDQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-28T01:51:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-28T01:51:59Z"}, "message": "Rollup merge of #110620 - Nilstrieb:document-the-undocumented, r=thomcc\n\nDocument `const {}` syntax for `std::thread_local`.\n\nIt exists and is pretty cool. More people should use it.\n\nIt was added in #83416 and stabilized in #91355 with the tracking issue #84223.", "tree": {"sha": "274a5a2640b50cf1308531e2d9af732d76e2d5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274a5a2640b50cf1308531e2d9af732d76e2d5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/085fbe90984bce639afdd1c2153a092a1adcadd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSya/CRBK7hj4Ov3rIwAAQJ4IACx6wcmKcNaXYUun+FdbTjhj\nJ4i+/+tL4ieOqD7AN/B/Y5Z+QKBOa1BNTsqh6kGwGoNRyjgdBDUJXuivLRvLWrRU\nGTmQkFRk2WUIyrJqyEo46jlF8idfImPXPJCUh8TAluttCUU+1DMSexH7lASf6RR1\ndeVyBB1sA0qRZTvGgeb1G1//hJMxvdtD39trC8vlDS7Su7spXhoi8fxFcTfLHmo4\nMZfp2I7+aeNdVun4I+sRazLThHP5QjMkfCx6JOhk24sXHZVAn74QzVKTqnqNjBEC\nN5qZ3BMCxFPOuCol3MeuPG4r1+TrB9EZ/O55yYKVDb7FPam9BUlF1OX45U6naFA=\n=3Die\n-----END PGP SIGNATURE-----\n", "payload": "tree 274a5a2640b50cf1308531e2d9af732d76e2d5a0\nparent 6b0da5755159c15ea3d4892664c161c3b2bc2dce\nparent b56d85dc09b774b432c24979d364b7aeb4b75e2f\nauthor Yuki Okushi <jtitor@2k36.org> 1682646719 +0900\ncommitter GitHub <noreply@github.com> 1682646719 +0900\n\nRollup merge of #110620 - Nilstrieb:document-the-undocumented, r=thomcc\n\nDocument `const {}` syntax for `std::thread_local`.\n\nIt exists and is pretty cool. More people should use it.\n\nIt was added in #83416 and stabilized in #91355 with the tracking issue #84223.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/085fbe90984bce639afdd1c2153a092a1adcadd4", "html_url": "https://github.com/rust-lang/rust/commit/085fbe90984bce639afdd1c2153a092a1adcadd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/085fbe90984bce639afdd1c2153a092a1adcadd4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b0da5755159c15ea3d4892664c161c3b2bc2dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0da5755159c15ea3d4892664c161c3b2bc2dce", "html_url": "https://github.com/rust-lang/rust/commit/6b0da5755159c15ea3d4892664c161c3b2bc2dce"}, {"sha": "b56d85dc09b774b432c24979d364b7aeb4b75e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56d85dc09b774b432c24979d364b7aeb4b75e2f", "html_url": "https://github.com/rust-lang/rust/commit/b56d85dc09b774b432c24979d364b7aeb4b75e2f"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "3b7c31826b962bef1003c5be3668121514e5e4cb", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/085fbe90984bce639afdd1c2153a092a1adcadd4/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085fbe90984bce639afdd1c2153a092a1adcadd4/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=085fbe90984bce639afdd1c2153a092a1adcadd4", "patch": "@@ -134,10 +134,28 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// thread_local! {\n ///     pub static FOO: RefCell<u32> = RefCell::new(1);\n ///\n-///     #[allow(unused)]\n ///     static BAR: RefCell<f32> = RefCell::new(1.0);\n /// }\n-/// # fn main() {}\n+///\n+/// FOO.with(|foo| assert_eq!(*foo.borrow(), 1));\n+/// BAR.with(|bar| assert_eq!(*bar.borrow(), 1.0));\n+/// ```\n+///\n+/// This macro supports a special `const {}` syntax that can be used\n+/// when the initialization expression can be evaluated as a constant.\n+/// This can enable a more efficient thread local implementation that\n+/// can avoid lazy initialization. For types that do not\n+/// [need to be dropped][crate::mem::needs_drop], this can enable an\n+/// even more efficient implementation that does not need to\n+/// track any additional state.\n+///\n+/// ```\n+/// use std::cell::Cell;\n+/// thread_local! {\n+///     pub static FOO: Cell<u32> = const { Cell::new(1) };\n+/// }\n+///\n+/// FOO.with(|foo| assert_eq!(foo.get(), 1));\n /// ```\n ///\n /// See [`LocalKey` documentation][`std::thread::LocalKey`] for more"}]}