{"sha": "0d39b1c3fa03a8032ea96be922fd62710f811aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzliMWMzZmEwM2E4MDMyZWE5NmJlOTIyZmQ2MjcxMGY4MTFhYmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-19T18:41:55Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-19T18:41:55Z"}, "message": "Merge #1172\n\n1172: Temporarily disable tt matcher r=edwin0cheng a=edwin0cheng\n\nTemporarily fix for #1170 by disable the `tt` matcher. The reason for that is normally a `$($tt:tt))* wildcard matcher will be added for recurisve macro. If we have any bugs in macro expansion, the macro will infinite expanding recursively. \r\n\r\nLet me add a fused system and add more test in later PR and then re-enable this one\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "1c1e590c5bf75408915e12797b395b7a9d4484ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c1e590c5bf75408915e12797b395b7a9d4484ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d39b1c3fa03a8032ea96be922fd62710f811aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d39b1c3fa03a8032ea96be922fd62710f811aba", "html_url": "https://github.com/rust-lang/rust/commit/0d39b1c3fa03a8032ea96be922fd62710f811aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d39b1c3fa03a8032ea96be922fd62710f811aba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "d15abaa06fe65a01072c74db55786e97d17365b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15abaa06fe65a01072c74db55786e97d17365b4", "html_url": "https://github.com/rust-lang/rust/commit/d15abaa06fe65a01072c74db55786e97d17365b4"}, {"sha": "210c762fe6edbe8382289ac71804bcfd82b251d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/210c762fe6edbe8382289ac71804bcfd82b251d4", "html_url": "https://github.com/rust-lang/rust/commit/210c762fe6edbe8382289ac71804bcfd82b251d4"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "d2115bd67920de685552bbe7f15d2e8b259b50e9", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0d39b1c3fa03a8032ea96be922fd62710f811aba/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d39b1c3fa03a8032ea96be922fd62710f811aba/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=0d39b1c3fa03a8032ea96be922fd62710f811aba", "patch": "@@ -763,29 +763,29 @@ MACRO_ITEMS@[0; 40)\n         );\n     }\n \n-    #[test]\n-    fn test_tt_block() {\n-        let rules = create_rules(\n-            r#\"\n-        macro_rules! foo {\n-            ($ i:tt) => { fn foo() $ i }\n-        }\n-\"#,\n-        );\n-        assert_expansion(&rules, r#\"foo! { { 1; } }\"#, r#\"fn foo () {1 ;}\"#);\n-    }\n-\n-    #[test]\n-    fn test_tt_group() {\n-        let rules = create_rules(\n-            r#\"\n-        macro_rules! foo {\n-             ($($ i:tt)*) => { $($ i)* }\n-        }\n-\"#,\n-        );\n-        assert_expansion(&rules, r#\"foo! { fn foo() {} }\"#, r#\"fn foo () {}\"#);\n-    }\n+    //     #[test]\n+    //     fn test_tt_block() {\n+    //         let rules = create_rules(\n+    //             r#\"\n+    //         macro_rules! foo {\n+    //             ($ i:tt) => { fn foo() $ i }\n+    //         }\n+    // \"#,\n+    //         );\n+    //         assert_expansion(&rules, r#\"foo! { { 1; } }\"#, r#\"fn foo () {1 ;}\"#);\n+    //     }\n+\n+    //     #[test]\n+    //     fn test_tt_group() {\n+    //         let rules = create_rules(\n+    //             r#\"\n+    //         macro_rules! foo {\n+    //              ($($ i:tt)*) => { $($ i)* }\n+    //         }\n+    // \"#,\n+    //         );\n+    //         assert_expansion(&rules, r#\"foo! { fn foo() {} }\"#, r#\"fn foo () {}\"#);\n+    //     }\n \n     #[test]\n     fn test_lifetime() {"}, {"sha": "86867111fd5c503bf0e688ccda3c7e9c2338b47b", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d39b1c3fa03a8032ea96be922fd62710f811aba/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d39b1c3fa03a8032ea96be922fd62710f811aba/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=0d39b1c3fa03a8032ea96be922fd62710f811aba", "patch": "@@ -171,10 +171,14 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                                 input.eat_meta().ok_or(ExpandError::UnexpectedToken)?.clone();\n                             res.inner.insert(text.clone(), Binding::Simple(meta.into()));\n                         }\n-                        \"tt\" => {\n-                            let token = input.eat().ok_or(ExpandError::UnexpectedToken)?.clone();\n-                            res.inner.insert(text.clone(), Binding::Simple(token.into()));\n-                        }\n+                        // FIXME:\n+                        // Enable followiing code when everything is fixed\n+                        // At least we can dogfood itself to not stackoverflow\n+                        //\n+                        // \"tt\" => {\n+                        //     let token = input.eat().ok_or(ExpandError::UnexpectedToken)?.clone();\n+                        //     res.inner.insert(text.clone(), Binding::Simple(token.into()));\n+                        // }\n                         \"item\" => {\n                             let item =\n                                 input.eat_item().ok_or(ExpandError::UnexpectedToken)?.clone();"}]}