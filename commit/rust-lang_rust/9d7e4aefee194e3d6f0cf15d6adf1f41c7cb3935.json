{"sha": "9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkN2U0YWVmZWUxOTRlM2Q2ZjBjZjE1ZDZhZGYxZjQxYzdjYjM5MzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-11T01:32:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-11T18:08:40Z"}, "message": "Add enough tyencode stuff to stop faulting when we hit error messages.", "tree": {"sha": "2adc8cb395a0e723e40dca432c105fa1a156a509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2adc8cb395a0e723e40dca432c105fa1a156a509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935", "html_url": "https://github.com/rust-lang/rust/commit/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeca5bae90cdb0654073babf8799e97675c9bec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca5bae90cdb0654073babf8799e97675c9bec0", "html_url": "https://github.com/rust-lang/rust/commit/aeca5bae90cdb0654073babf8799e97675c9bec0"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "590f3d33d4bef61b76f758b3d7d1c744c009f571", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935", "patch": "@@ -6,6 +6,8 @@ import syntax::ast_util;\n import syntax::ast_util::respan;\n import middle::ty;\n import std::map::hashmap;\n+import driver::session;\n+import session::session;\n \n export parse_ty_data, parse_def_id, parse_ident;\n export parse_bounds_data;\n@@ -176,6 +178,10 @@ fn parse_proto(c: char) -> ast::proto {\n     }\n }\n \n+fn parse_vstore(st: @pstate) -> ty::vstore {\n+    st.tcx.sess.unimpl(\"tydecode::parse_vstore\");\n+}\n+\n fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n     alt check next(st) {\n       'n' { ret ty::mk_nil(st.tcx); }\n@@ -231,6 +237,15 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n       '~' { ret ty::mk_uniq(st.tcx, parse_mt(st, conv)); }\n       '*' { ret ty::mk_ptr(st.tcx, parse_mt(st, conv)); }\n       'I' { ret ty::mk_vec(st.tcx, parse_mt(st, conv)); }\n+      'V' {\n+        let mt = parse_mt(st, conv);\n+        let v = parse_vstore(st);\n+        ret ty::mk_evec(st.tcx, mt, v);\n+      }\n+      'v' {\n+        let v = parse_vstore(st);\n+        ret ty::mk_estr(st.tcx, v);\n+      }\n       'R' {\n         assert (next(st) == '[');\n         let mut fields: [ty::field] = [];"}, {"sha": "47643abf2761249150115f096106a3798cb17293", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=9d7e4aefee194e3d6f0cf15d6adf1f41c7cb3935", "patch": "@@ -145,6 +145,27 @@ fn enc_region(w: io::writer, r: ty::region) {\n       }\n     }\n }\n+\n+fn enc_vstore(w: io::writer, v: ty::vstore) {\n+    w.write_char('/');\n+    alt v {\n+      ty::vstore_fixed(u)  {\n+        w.write_uint(u);\n+        w.write_char('|');\n+      }\n+      ty::vstore_uniq {\n+        w.write_char('~');\n+      }\n+      ty::vstore_box {\n+        w.write_char('@');\n+      }\n+      ty::vstore_slice(r) {\n+        w.write_char('&');\n+        enc_region(w, r);\n+      }\n+    }\n+}\n+\n fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n     alt st {\n       ty::ty_nil { w.write_char('n'); }\n@@ -176,7 +197,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n           ty_f64 { w.write_str(\"MF\"); }\n         }\n       }\n-      ty::ty_estr(_) { cx.tcx.sess.unimpl(\"tyencode::enc_sty on estr\"); }\n       ty::ty_str { w.write_char('S'); }\n       ty::ty_enum(def, tys) {\n         w.write_str(\"t[\");\n@@ -205,7 +225,15 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         enc_region(w, r);\n         enc_mt(w, cx, mt);\n       }\n-      ty::ty_evec(_, _) { cx.tcx.sess.unimpl(\"tyencode::enc_sty on evec\"); }\n+      ty::ty_evec(mt, v) {\n+        w.write_char('V');\n+        enc_mt(w, cx, mt);\n+        enc_vstore(w, v);\n+      }\n+      ty::ty_estr(v) {\n+        w.write_char('v');\n+        enc_vstore(w, v);\n+      }\n       ty::ty_vec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n       ty::ty_rec(fields) {\n         w.write_str(\"R[\");"}]}