{"sha": "1d98fe12a8b2ad954f01935552d23643e96a53af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOThmZTEyYThiMmFkOTU0ZjAxOTM1NTUyZDIzNjQzZTk2YTUzYWY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-21T03:24:31Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-03-21T03:33:23Z"}, "message": "Clean up marker types and Unsafe initialization", "tree": {"sha": "6d44802e6b3867a04cfb32a249f7a4f8dbfa16e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d44802e6b3867a04cfb32a249f7a4f8dbfa16e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d98fe12a8b2ad954f01935552d23643e96a53af", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d98fe12a8b2ad954f01935552d23643e96a53af", "html_url": "https://github.com/rust-lang/rust/commit/1d98fe12a8b2ad954f01935552d23643e96a53af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d98fe12a8b2ad954f01935552d23643e96a53af/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "181875ca50853418abaa525614252cf46bfce10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/181875ca50853418abaa525614252cf46bfce10f", "html_url": "https://github.com/rust-lang/rust/commit/181875ca50853418abaa525614252cf46bfce10f"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "b54396efec505c68c0ca9d13c380e00251c9fb23", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d98fe12a8b2ad954f01935552d23643e96a53af/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d98fe12a8b2ad954f01935552d23643e96a53af/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=1d98fe12a8b2ad954f01935552d23643e96a53af", "patch": "@@ -22,19 +22,17 @@ use ty::Unsafe;\n /// A mutable memory location that admits only `Pod` data.\n pub struct Cell<T> {\n     priv value: Unsafe<T>,\n-    priv marker1: marker::InvariantType<T>,\n-    priv marker2: marker::NoFreeze,\n-    priv marker3: marker::NoShare,\n+    priv marker1: marker::NoFreeze,\n+    priv marker2: marker::NoShare,\n }\n \n impl<T:Pod> Cell<T> {\n     /// Creates a new `Cell` containing the given value.\n     pub fn new(value: T) -> Cell<T> {\n         Cell {\n-            value: Unsafe{value: value, marker1: marker::InvariantType::<T>},\n-            marker1: marker::InvariantType::<T>,\n-            marker2: marker::NoFreeze,\n-            marker3: marker::NoShare,\n+            value: Unsafe::new(value),\n+            marker1: marker::NoFreeze,\n+            marker2: marker::NoShare,\n         }\n     }\n \n@@ -75,10 +73,9 @@ impl<T: fmt::Show> fmt::Show for Cell<T> {\n pub struct RefCell<T> {\n     priv value: Unsafe<T>,\n     priv borrow: BorrowFlag,\n-    priv marker1: marker::InvariantType<T>,\n-    priv marker2: marker::NoFreeze,\n-    priv marker3: marker::NoPod,\n-    priv marker4: marker::NoShare,\n+    priv marker1: marker::NoFreeze,\n+    priv marker2: marker::NoPod,\n+    priv marker3: marker::NoShare,\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n@@ -91,11 +88,10 @@ impl<T> RefCell<T> {\n     /// Create a new `RefCell` containing `value`\n     pub fn new(value: T) -> RefCell<T> {\n         RefCell {\n-            marker1: marker::InvariantType::<T>,\n-            marker2: marker::NoFreeze,\n-            marker3: marker::NoPod,\n-            marker4: marker::NoShare,\n-            value: Unsafe{value: value, marker1: marker::InvariantType::<T>},\n+            marker1: marker::NoFreeze,\n+            marker2: marker::NoPod,\n+            marker3: marker::NoShare,\n+            value: Unsafe::new(value),\n             borrow: UNUSED,\n         }\n     }"}]}