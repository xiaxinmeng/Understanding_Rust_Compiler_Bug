{"sha": "e885f00f24aab657b3a9835818fc96e638e7fb21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ODVmMDBmMjRhYWI2NTdiM2E5ODM1ODE4ZmM5NmU2MzhlN2ZiMjE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-30T12:44:20Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-30T15:16:19Z"}, "message": "Comment out test for generated docs until rustdoc changes its behavior around documenting re-exports", "tree": {"sha": "07454640b81bcac0e25fa193aa69f34f9d36b30e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07454640b81bcac0e25fa193aa69f34f9d36b30e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e885f00f24aab657b3a9835818fc96e638e7fb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e885f00f24aab657b3a9835818fc96e638e7fb21", "html_url": "https://github.com/rust-lang/rust/commit/e885f00f24aab657b3a9835818fc96e638e7fb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e885f00f24aab657b3a9835818fc96e638e7fb21/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b1935452f26593d07fa17ccbe3308901dda891b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1935452f26593d07fa17ccbe3308901dda891b", "html_url": "https://github.com/rust-lang/rust/commit/1b1935452f26593d07fa17ccbe3308901dda891b"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "55d7974a9ef6ca8b1b0c347598db9bfbae1a5d5b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e885f00f24aab657b3a9835818fc96e638e7fb21/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e885f00f24aab657b3a9835818fc96e638e7fb21/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e885f00f24aab657b3a9835818fc96e638e7fb21", "patch": "@@ -592,7 +592,12 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     }\n                     current = parent;\n                 } else {\n-                    debug!(\"{:?} has no parent (kind={:?}, original was {:?})\", current, self.cx.tcx.def_kind(current), item.def_id);\n+                    debug!(\n+                        \"{:?} has no parent (kind={:?}, original was {:?})\",\n+                        current,\n+                        self.cx.tcx.def_kind(current),\n+                        item.def_id\n+                    );\n                     break None;\n                 }\n             }"}, {"sha": "f49edea410d73ee628d525e667dd23afe8699812", "filename": "src/test/rustdoc/intra-link-pub-use.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e885f00f24aab657b3a9835818fc96e638e7fb21/src%2Ftest%2Frustdoc%2Fintra-link-pub-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e885f00f24aab657b3a9835818fc96e638e7fb21/src%2Ftest%2Frustdoc%2Fintra-link-pub-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-pub-use.rs?ref=e885f00f24aab657b3a9835818fc96e638e7fb21", "patch": "@@ -1,8 +1,17 @@\n-#![deny(intra_doc_link_resolution_failure)]\n+#![deny(broken_intra_doc_links)]\n \n /// [std::env] [g]\n-// @has intra_link_pub_use/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/env/fn.var.html\"]' \"std::env\"\n-// @has - '//a[@href=\"../intra_link_pub_use/fn.f.html\"]' \"g\"\n+// FIXME: This can't be tested because rustdoc doesn't show documentation on pub re-exports.\n+// Until then, comment out the `htmldocck` test.\n+// This test still does something; namely check that no incorrect errors are emitted when\n+// documenting the re-export.\n+\n+// @has intra_link_pub_use/index.html\n+// @ has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/env/fn.var.html\"]' \"std::env\"\n+// @ has - '//a[@href=\"../intra_link_pub_use/fn.f.html\"]' \"g\"\n pub use f as g;\n \n+/// [std::env]\n+extern crate self as _;\n+\n pub fn f() {}"}]}