{"sha": "c5e91e70d03ace2c9647e509540a5b6b88aaf801", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZTkxZTcwZDAzYWNlMmM5NjQ3ZTUwOTU0MGE1YjZiODhhYWY4MDE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-04T00:22:57Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-04T00:22:57Z"}, "message": "Use `sugg::Sugg` in transmute links", "tree": {"sha": "581aa2bf27f2c7a48b3d55780f31b6911f195c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/581aa2bf27f2c7a48b3d55780f31b6911f195c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5e91e70d03ace2c9647e509540a5b6b88aaf801", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXeaxsAAoJEF5CfHlMukXoJ0AP/jMFyXq676V5c7+TrjsGfSDQ\nmZyxrBu083YlGu7NRImg4tMCdUdFeu2ZWJBthfHOzTzpNn5Cd4oLMKLeIkSkYXAR\nrFsl2G+sUXStF7Z2Jb4QjqxOUxOlLuGqYiQ3FGpzwKvpxwMyXQm97JPkGx3sGhBI\ncLrJ4cAQR+HsprOP4YGARrwFDy6dKlGL1qTWVOJ/I3HrOhH3frqjXFDSw5ruX4LO\nFDrGSPd1AbeYeVbi7WHAa7uwyxGJDB+ExyOvxRTZnYXrm43LXVMAmci5h98/uQ8K\nSm++fFrUaySEzIfchB1N7oBMdSzaSq0+yubNkVv9oeklxGqPnuG1TEyGSlD42u4W\nJs5BNjsA7NjD1xqpRPruDwFFcNghnzSIOjEE77PxG1YAQ4CoBZ+joI2hwxKowNg1\ni6TsMADlTFCKttMwZcPl1BTBEn8O4XrKC4h/WT91hNiloGrpsg1gdCdlid3PjFX9\nO4Q/9z6LBUt77vv7uzQfGAnx9r9hMn03/Hl3u8E2T718AmdDga+0p/clKQZC8Uqn\njsYPeP1xHSn+uSacJBUM17QvbtH6ISZec842q+Y3INeta6ksnjxKdSyiDjlzMLU3\nFQnbpsBd37pLIvUIDvZlaaVHcweutowU5NKhzaihcLCDZu84JB+NhXiBZ0jiZX7Y\nf40EbYmFS8e8GyRb8S59\n=+JaP\n-----END PGP SIGNATURE-----", "payload": "tree 581aa2bf27f2c7a48b3d55780f31b6911f195c61\nparent 9b79b1022c68b79dbcdf2e51d46843c6e801d1f7\nauthor mcarton <cartonmartin+git@gmail.com> 1467591777 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467591777 +0200\n\nUse `sugg::Sugg` in transmute links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e91e70d03ace2c9647e509540a5b6b88aaf801", "html_url": "https://github.com/rust-lang/rust/commit/c5e91e70d03ace2c9647e509540a5b6b88aaf801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5e91e70d03ace2c9647e509540a5b6b88aaf801/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "html_url": "https://github.com/rust-lang/rust/commit/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "88ed11d26e581b57333c0f223e4e398265d81e52", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5e91e70d03ace2c9647e509540a5b6b88aaf801/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e91e70d03ace2c9647e509540a5b6b88aaf801/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=c5e91e70d03ace2c9647e509540a5b6b88aaf801", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::ty::TypeVariants::{TyRawPtr, TyRef};\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{match_def_path, paths, snippet_opt, span_lint, span_lint_and_then};\n+use utils::{match_def_path, paths, span_lint, span_lint_and_then};\n use utils::sugg;\n \n /// **What it does:** This lint checks for transmutes that can't ever be correct on any architecture\n@@ -93,14 +93,14 @@ impl LateLintPass for Transmute {\n                             e.span,\n                             \"transmute from a reference to a pointer\",\n                             |db| {\n-                                if let Some(arg) = snippet_opt(cx, args[0].span) {\n+                                if let Some(arg) = sugg::Sugg::hir_opt(cx, &*args[0]) {\n                                     let sugg = if ptr_ty == rty {\n-                                        format!(\"{} as {}\", arg, to_ty)\n+                                        arg.as_ty(&to_ty.to_string())\n                                     } else {\n-                                        format!(\"{} as {} as {}\", arg, cx.tcx.mk_ptr(rty), to_ty)\n+                                        arg.as_ty(&format!(\"{} as {}\", cx.tcx.mk_ptr(rty), to_ty))\n                                     };\n \n-                                    db.span_suggestion(e.span, \"try\", sugg);\n+                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n                                 }\n                             },\n                         ),\n@@ -111,8 +111,8 @@ impl LateLintPass for Transmute {\n                             e.span,\n                             \"transmute from an integer to a pointer\",\n                             |db| {\n-                                if let Some(arg) = snippet_opt(cx, args[0].span) {\n-                                    db.span_suggestion(e.span, \"try\", format!(\"{} as {}\", arg, to_ty));\n+                                if let Some(arg) = sugg::Sugg::hir_opt(cx, &*args[0]) {\n+                                    db.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()).to_string());\n                                 }\n                             },\n                         ),\n@@ -157,13 +157,13 @@ impl LateLintPass for Transmute {\n                                 };\n \n \n-                                let sugg = if from_pty.ty == to_rty.ty {\n-                                    sugg::make_unop(deref, arg).to_string()\n+                                let arg = if from_pty.ty == to_rty.ty {\n+                                    arg\n                                 } else {\n-                                    format!(\"{}({} as {} {})\", deref, arg, cast, to_rty.ty)\n+                                    arg.as_ty(&format!(\"{} {}\", cast, to_rty.ty))\n                                 };\n \n-                                db.span_suggestion(e.span, \"try\", sugg);\n+                                db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n                             },\n                         ),\n                         _ => return,"}, {"sha": "4a9543d47c1cbf793b8589847843fa8c07154397", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5e91e70d03ace2c9647e509540a5b6b88aaf801/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e91e70d03ace2c9647e509540a5b6b88aaf801/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=c5e91e70d03ace2c9647e509540a5b6b88aaf801", "patch": "@@ -30,6 +30,7 @@ impl<'a> std::fmt::Display for Sugg<'a> {\n     }\n }\n \n+#[allow(wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     pub fn hir_opt(cx: &LateContext, expr: &hir::Expr) -> Option<Sugg<'a>> {\n         snippet_opt(cx, expr.span).map(|snippet| {\n@@ -124,6 +125,11 @@ impl<'a> Sugg<'a> {\n         make_binop(ast::BinOpKind::And, &self, &rhs)\n     }\n \n+    /// Convenience method to create the `<lhs> as <rhs>` suggestion.\n+    pub fn as_ty(self, rhs: &str) -> Sugg<'static> {\n+        make_assoc(AssocOp::As, &self, &Sugg::NonParen(rhs.into()))\n+    }\n+\n     /// Convenience method to create the `&<expr>` suggestion.\n     pub fn addr(self) -> Sugg<'static> {\n         make_unop(\"&\", self)"}, {"sha": "1344858996e999c7355d2cf740a4ee4d6cd93911", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5e91e70d03ace2c9647e509540a5b6b88aaf801/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e91e70d03ace2c9647e509540a5b6b88aaf801/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=c5e91e70d03ace2c9647e509540a5b6b88aaf801", "patch": "@@ -111,6 +111,13 @@ fn useless() {\n         //~^ ERROR transmute from an integer to a pointer\n         //~| HELP try\n         //~| SUGGESTION 5_isize as *const usize\n+        let _  = 5_isize as *const usize;\n+\n+        let _: *const usize = std::mem::transmute(1+1usize);\n+        //~^ ERROR transmute from an integer to a pointer\n+        //~| HELP try\n+        //~| SUGGESTION (1+1usize) as *const usize\n+        let _  = (1+1_usize) as *const usize;\n     }\n }\n "}]}