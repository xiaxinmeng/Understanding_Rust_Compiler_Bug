{"sha": "e5dda811a9818a3289a3a1354f98731e46730bd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZGRhODExYTk4MThhMzI4OWEzYTEzNTRmOTg3MzFlNDY3MzBiZDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-27T20:53:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-27T20:53:03Z"}, "message": "librustc: Allow expr_repeat to be used with any vstore", "tree": {"sha": "0ed9d458c99fe4edb7fd97fb5f58f691e125cffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed9d458c99fe4edb7fd97fb5f58f691e125cffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5dda811a9818a3289a3a1354f98731e46730bd9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5dda811a9818a3289a3a1354f98731e46730bd9", "html_url": "https://github.com/rust-lang/rust/commit/e5dda811a9818a3289a3a1354f98731e46730bd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5dda811a9818a3289a3a1354f98731e46730bd9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93393e907eddab513fa2be541af4356b8203282", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93393e907eddab513fa2be541af4356b8203282", "html_url": "https://github.com/rust-lang/rust/commit/b93393e907eddab513fa2be541af4356b8203282"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "1a5d99c3404a67c9113a3a0f32359282345029d3", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=e5dda811a9818a3289a3a1354f98731e46730bd9", "patch": "@@ -126,7 +126,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n type Registers = [uint, ..22];\n \n #[cfg(target_arch = \"x86_64\")]\n-fn new_regs() -> ~Registers { ~[0, .. 22] }\n+fn new_regs() -> ~Registers { ~([0, .. 22]) }\n \n #[cfg(target_arch = \"x86_64\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {"}, {"sha": "528eede6a59ddf491cb25269e5fe987e5610ecb5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e5dda811a9818a3289a3a1354f98731e46730bd9", "patch": "@@ -2186,17 +2186,21 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             let count = ty::eval_repeat_count(tcx, count_expr);\n             check_expr_with_hint(fcx, count_expr, ty::mk_uint(tcx));\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, count, vst);\n+            let mutability = match vst {\n+                ast::expr_vstore_mut_box | ast::expr_vstore_mut_slice => {\n+                    ast::m_mutbl\n+                }\n+                _ => mutbl\n+            };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             check_expr_has_type(fcx, element, t);\n             let arg_t = fcx.expr_ty(element);\n             if ty::type_is_error(arg_t) {\n                 ty::mk_err(tcx)\n-            }\n-            else if ty::type_is_bot(arg_t) {\n+            } else if ty::type_is_bot(arg_t) {\n                 ty::mk_bot(tcx)\n-            }\n-            else {\n-                ty::mk_evec(tcx, ty::mt {ty: t, mutbl: mutbl}, tt)\n+            } else {\n+                ty::mk_evec(tcx, ty::mt {ty: t, mutbl: mutability}, tt)\n             }\n           }\n           _ =>"}, {"sha": "1d88ba70e04bdf37424f970923bc5c6828f584ed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e5dda811a9818a3289a3a1354f98731e46730bd9", "patch": "@@ -232,7 +232,7 @@ pub fn Parser(sess: @mut ParseSess,\n         token: @mut copy tok0.tok,\n         span: @mut copy tok0.sp,\n         last_span: @mut copy tok0.sp,\n-        buffer: @mut [copy tok0, .. 4],\n+        buffer: @mut ([copy tok0, .. 4]),\n         buffer_start: @mut 0,\n         buffer_end: @mut 0,\n         tokens_consumed: @mut 0,\n@@ -1660,12 +1660,11 @@ pub impl Parser {\n             hi = e.span.hi;\n             // HACK: turn @[...] into a @-evec\n             ex = match e.node {\n-              expr_vec(*) if m == m_mutbl =>\n+              expr_vec(*) | expr_repeat(*) if m == m_mutbl =>\n                 expr_vstore(e, expr_vstore_mut_box),\n-              expr_vec(*) if m == m_imm => expr_vstore(e, expr_vstore_box),\n-              expr_lit(@codemap::spanned {\n-                  node: lit_str(_), span: _}) if m == m_imm =>\n-                expr_vstore(e, expr_vstore_box),\n+              expr_vec(*) |\n+              expr_lit(@codemap::spanned { node: lit_str(_), span: _}) |\n+              expr_repeat(*) if m == m_imm => expr_vstore(e, expr_vstore_box),\n               _ => expr_unary(box(m), e)\n             };\n           }\n@@ -1680,8 +1679,9 @@ pub impl Parser {\n             hi = e.span.hi;\n             // HACK: turn ~[...] into a ~-evec\n             ex = match e.node {\n-              expr_vec(*) | expr_lit(@codemap::spanned {\n-                node: lit_str(_), span: _})\n+              expr_vec(*) |\n+              expr_lit(@codemap::spanned { node: lit_str(_), span: _}) |\n+              expr_repeat(*)\n               if m == m_imm => expr_vstore(e, expr_vstore_uniq),\n               _ => expr_unary(uniq(m), e)\n             };"}, {"sha": "972b2763b1b5986015d023601f621749873036f1", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dda811a9818a3289a3a1354f98731e46730bd9/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=e5dda811a9818a3289a3a1354f98731e46730bd9", "patch": "@@ -0,0 +1,23 @@\n+use core::io::println;\n+\n+fn main() {\n+    let v: ~[int] = ~[ 1, ..5 ];\n+    println(v[0].to_str());\n+    println(v[1].to_str());\n+    println(v[2].to_str());\n+    println(v[3].to_str());\n+    println(v[4].to_str());\n+    let v: @[int] = @[ 2, ..5 ];\n+    println(v[0].to_str());\n+    println(v[1].to_str());\n+    println(v[2].to_str());\n+    println(v[3].to_str());\n+    println(v[4].to_str());\n+    let v: @mut [int] = @mut [ 3, ..5 ];\n+    println((copy v[0]).to_str());\n+    println((copy v[1]).to_str());\n+    println((copy v[2]).to_str());\n+    println((copy v[3]).to_str());\n+    println((copy v[4]).to_str());\n+}\n+"}]}