{"sha": "3c08be9b48f5a4413a35728a0c392df3b0bed785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDhiZTliNDhmNWE0NDEzYTM1NzI4YTBjMzkyZGYzYjBiZWQ3ODU=", "commit": {"author": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2013-03-29T21:14:08Z"}, "committer": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2013-04-10T16:45:53Z"}, "message": "Add debug info for boxes", "tree": {"sha": "aba767fedd2e881253ca25df337057d04ec378d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba767fedd2e881253ca25df337057d04ec378d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c08be9b48f5a4413a35728a0c392df3b0bed785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c08be9b48f5a4413a35728a0c392df3b0bed785", "html_url": "https://github.com/rust-lang/rust/commit/3c08be9b48f5a4413a35728a0c392df3b0bed785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c08be9b48f5a4413a35728a0c392df3b0bed785/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac9dc69bf3c0e4c46fadeab76229ba35f61d8158", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9dc69bf3c0e4c46fadeab76229ba35f61d8158", "html_url": "https://github.com/rust-lang/rust/commit/ac9dc69bf3c0e4c46fadeab76229ba35f61d8158"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "cf8ecacfb8b37fb71c89890babc4695bf4395e68", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3c08be9b48f5a4413a35728a0c392df3b0bed785/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c08be9b48f5a4413a35728a0c392df3b0bed785/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3c08be9b48f5a4413a35728a0c392df3b0bed785", "patch": "@@ -542,13 +542,23 @@ fn create_tuple(cx: @CrateContext, t: ty::t, elements: &[ty::t], span: span)\n     return mdval;\n }\n \n-fn create_boxed_type(cx: @CrateContext, outer: ty::t, _inner: ty::t,\n+// returns (void* type as a ValueRef, size in bytes, align in bytes)\n+fn voidptr() -> (ValueRef, int, int) {\n+    let null = ptr::null();\n+    let size = sys::size_of::<ValueRef>() as int;\n+    let align = sys::min_align_of::<ValueRef>() as int;\n+    let vp = create_derived_type(PointerTypeTag, null, ~\"\", 0,\n+                                 size, align, 0, null);\n+    return (vp, size, align);\n+}\n+\n+fn create_boxed_type(cx: @CrateContext, contents: ty::t,\n                      span: span, boxed: @Metadata<TyDescMetadata>)\n     -> @Metadata<TyDescMetadata> {\n     //let tg = StructureTypeTag;\n     /*let cache = cx.llmetadata;\n     match cached_metadata::<@Metadata<TyDescMetadata>>(\n-        cache, tg, {|md| ty::hash_ty(outer) == ty::hash_ty(md.data.hash)}) {\n+        cache, tg, {|md| ty::hash_ty(contents) == ty::hash_ty(md.data.hash)}) {\n       option::Some(md) { return md; }\n       option::None {}\n     }*/\n@@ -557,18 +567,23 @@ fn create_boxed_type(cx: @CrateContext, outer: ty::t, _inner: ty::t,\n     //let cu_node = create_compile_unit_metadata(cx, fname);\n     let uint_t = ty::mk_uint(cx.tcx);\n     let refcount_type = create_basic_type(cx, uint_t, span);\n-    let scx = create_structure(file_node,\n-                               @/*bad*/ copy ty_to_str(cx.tcx, outer), 0);\n+    let name = ty_to_str(cx.tcx, contents);\n+    let scx = create_structure(file_node, @fmt!(\"box<%s>\", name), 0);\n     add_member(scx, ~\"refcnt\", 0, sys::size_of::<uint>() as int,\n                sys::min_align_of::<uint>() as int, refcount_type.node);\n-    add_member(scx, ~\"boxed\", 0, 8, //XXX member_size_and_align(??)\n-               8, //XXX just a guess\n-               boxed.node);\n+    // the tydesc and other pointers should be irrelevant to the\n+    // debugger, so treat them as void* types\n+    let (vp, vpsize, vpalign) = voidptr();\n+    add_member(scx, ~\"tydesc\", 0, vpsize, vpalign, vp);\n+    add_member(scx, ~\"prev\", 0, vpsize, vpalign, vp);\n+    add_member(scx, ~\"next\", 0, vpsize, vpalign, vp);\n+    let (size, align) = size_and_align_of(cx, contents);\n+    add_member(scx, ~\"boxed\", 0, size, align, boxed.node);\n     let llnode = finish_structure(scx);\n     let mdval = @Metadata {\n         node: llnode,\n         data: TyDescMetadata {\n-            hash: ty::type_id(outer)\n+            hash: ty::type_id(contents)\n         }\n     };\n     //update_cache(cache, tg, tydesc_metadata(mdval));\n@@ -655,11 +670,10 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n         ty::ty_enum(_did, ref _substs) => {\n             cx.sess.span_bug(span, ~\"debuginfo for enum NYI\")\n         }\n-        ty::ty_box(ref _mt) => {\n-            cx.sess.span_bug(span, ~\"debuginfo for box NYI\")\n-        },\n-        ty::ty_uniq(ref _mt) => {\n-            cx.sess.span_bug(span, ~\"debuginfo for uniq NYI\")\n+        ty::ty_box(ref mt) | ty::ty_uniq(ref mt) => {\n+            let boxed = create_ty(cx, mt.ty, span);\n+            let box_md = create_boxed_type(cx, mt.ty, span, boxed);\n+            create_pointer_type(cx, t, span, box_md)\n         },\n         ty::ty_evec(ref _mt, ref _vstore) => {\n             cx.sess.span_bug(span, ~\"debuginfo for evec NYI\")"}]}