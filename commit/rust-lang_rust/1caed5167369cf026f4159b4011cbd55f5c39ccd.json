{"sha": "1caed5167369cf026f4159b4011cbd55f5c39ccd", "node_id": "C_kwDOAAsO6NoAKDFjYWVkNTE2NzM2OWNmMDI2ZjQxNTliNDAxMWNiZDU1ZjVjMzljY2Q", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-06-11T08:18:56Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-06-13T13:53:56Z"}, "message": "do not use stringly typed diagnostics", "tree": {"sha": "f5a048cd550ddbdd167831ed4f3d92f393efc458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5a048cd550ddbdd167831ed4f3d92f393efc458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1caed5167369cf026f4159b4011cbd55f5c39ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1caed5167369cf026f4159b4011cbd55f5c39ccd", "html_url": "https://github.com/rust-lang/rust/commit/1caed5167369cf026f4159b4011cbd55f5c39ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1caed5167369cf026f4159b4011cbd55f5c39ccd/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e36f7e9ae2a99139cf383193141e1429a20faf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e36f7e9ae2a99139cf383193141e1429a20faf1", "html_url": "https://github.com/rust-lang/rust/commit/1e36f7e9ae2a99139cf383193141e1429a20faf1"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "91c04c67f80b44a2dc76d208bb18f1d921c54e83", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1caed5167369cf026f4159b4011cbd55f5c39ccd/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1caed5167369cf026f4159b4011cbd55f5c39ccd/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=1caed5167369cf026f4159b4011cbd55f5c39ccd", "patch": "@@ -478,13 +478,11 @@ lint_requested_level = requested on the command line with `{$level} {$lint_name}\n lint_supertrait_as_deref_target = `{$t}` implements `Deref` with supertrait `{$target_principal}` as target\n     .label = target type is set here\n \n-lint_suspicious_double_ref_op =\n-    using `.{$call}()` on a double reference, which returns `{$ty}` instead of {$op ->\n-        *[should_not_happen] [{$op}]\n-        [deref] dereferencing\n-        [borrow] borrowing\n-        [clone] cloning\n-    } the inner type\n+lint_suspicious_double_ref_clone =\n+    using `.clone()` on a double reference, which returns `{$ty}` instead of cloning the inner type\n+\n+lint_suspicious_double_ref_deref =\n+    using `.deref()` on a double reference, which returns `{$ty}` instead of dereferencing the inner type\n \n lint_trivial_untranslatable_diag = diagnostic with static strings only\n "}, {"sha": "ad75dd3754a3343e199685b64e0dafc8afc88fd9", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1caed5167369cf026f4159b4011cbd55f5c39ccd/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caed5167369cf026f4159b4011cbd55f5c39ccd/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=1caed5167369cf026f4159b4011cbd55f5c39ccd", "patch": "@@ -1231,11 +1231,15 @@ pub struct NoopMethodCallDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_suspicious_double_ref_op)]\n-pub struct SuspiciousDoubleRefDiag<'a> {\n-    pub call: Symbol,\n+#[diag(lint_suspicious_double_ref_deref)]\n+pub struct SuspiciousDoubleRefDerefDiag<'a> {\n+    pub ty: Ty<'a>,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_suspicious_double_ref_clone)]\n+pub struct SuspiciousDoubleRefCloneDiag<'a> {\n     pub ty: Ty<'a>,\n-    pub op: &'static str,\n }\n \n // pass_by_value.rs"}, {"sha": "d56c35bb677a5ab88d4388d18139b48658fade2a", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1caed5167369cf026f4159b4011cbd55f5c39ccd/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caed5167369cf026f4159b4011cbd55f5c39ccd/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=1caed5167369cf026f4159b4011cbd55f5c39ccd", "patch": "@@ -1,5 +1,7 @@\n use crate::context::LintContext;\n-use crate::lints::{NoopMethodCallDiag, SuspiciousDoubleRefDiag};\n+use crate::lints::{\n+    NoopMethodCallDiag, SuspiciousDoubleRefCloneDiag, SuspiciousDoubleRefDerefDiag,\n+};\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;\n@@ -102,13 +104,6 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };\n \n-        let op = match name {\n-            sym::noop_method_borrow => \"borrow\",\n-            sym::noop_method_clone => \"clone\",\n-            sym::noop_method_deref => \"deref\",\n-            _ => return,\n-        };\n-\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n         let arg_adjustments = cx.typeck_results().expr_adjustments(receiver);\n@@ -129,14 +124,22 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                 NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n             );\n         } else {\n-            if op == \"borrow\" {\n-                return;\n+            match name {\n+                // If `type_of(x) == T` and `x.borrow()` is used to get `&T`,\n+                // then that should be allowed\n+                sym::noop_method_borrow => return,\n+                sym::noop_method_clone => cx.emit_spanned_lint(\n+                    SUSPICIOUS_DOUBLE_REF_OP,\n+                    span,\n+                    SuspiciousDoubleRefCloneDiag { ty: expr_ty },\n+                ),\n+                sym::noop_method_deref => cx.emit_spanned_lint(\n+                    SUSPICIOUS_DOUBLE_REF_OP,\n+                    span,\n+                    SuspiciousDoubleRefDerefDiag { ty: expr_ty },\n+                ),\n+                _ => return,\n             }\n-            cx.emit_spanned_lint(\n-                SUSPICIOUS_DOUBLE_REF_OP,\n-                span,\n-                SuspiciousDoubleRefDiag { call: call.ident.name, ty: expr_ty, op },\n-            )\n         }\n     }\n }"}]}