{"sha": "3d9a1de690c794fc72102d2de2324beeefe81322", "node_id": "C_kwDOAAsO6NoAKDNkOWExZGU2OTBjNzk0ZmM3MjEwMmQyZGUyMzI0YmVlZWZlODEzMjI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-06T00:09:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T00:09:32Z"}, "message": "Rollup merge of #110830 - Freaky:freebsd-cpuset, r=thomcc\n\nAdd FreeBSD cpuset support to `std::thread::available_concurrency`\n\nUse libc::cpuset_getaffinity to determine the CPUs available to the current process.\n\nThe existing sysconf and sysctl paths are left as fallback.", "tree": {"sha": "3cebc537a25d8a021dbce9c92c1be4b41bff1ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cebc537a25d8a021dbce9c92c1be4b41bff1ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9a1de690c794fc72102d2de2324beeefe81322", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVZq8CRBK7hj4Ov3rIwAArF4IAAKFdvhWVfq4rvkfiW8KSijE\nlhSfFvBOVOP7qs5hlkpWZhehXPIKLkMh7wYa9Dq9HQ9kS91fob+v6cCzMYcHgyD3\ntqy+RaAW0DppQT56cgSg32JxEDDeT1bN8VWnTN2JYPc1N/qWiA+huOSF11pwRSWp\n1+mw2/b4+BCqewxeEfwbeP4Yn2NTBgcKqZgoSw7f+u2RTfrsp83NFOmcS4iseP+w\n1+Zc7w4eHY65VOqjJDdiHXbdYNnplbsMPvAcNQFUsQbLD1ywOkVajTaCoiXZUlnX\nzj8toJoBjTakpHNrERciPobasQKA2Li/16pqu0RY330JgVYtXWXsCVVrHU0VP6o=\n=lD2N\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cebc537a25d8a021dbce9c92c1be4b41bff1ddd\nparent 30220be9297e0deac837dca02ab091ecf54ef80f\nparent e5e640cacef51e401286f93388002f41e8ef3328\nauthor Yuki Okushi <jtitor@2k36.org> 1683331772 +0900\ncommitter GitHub <noreply@github.com> 1683331772 +0900\n\nRollup merge of #110830 - Freaky:freebsd-cpuset, r=thomcc\n\nAdd FreeBSD cpuset support to `std::thread::available_concurrency`\n\nUse libc::cpuset_getaffinity to determine the CPUs available to the current process.\n\nThe existing sysconf and sysctl paths are left as fallback.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9a1de690c794fc72102d2de2324beeefe81322", "html_url": "https://github.com/rust-lang/rust/commit/3d9a1de690c794fc72102d2de2324beeefe81322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9a1de690c794fc72102d2de2324beeefe81322/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30220be9297e0deac837dca02ab091ecf54ef80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/30220be9297e0deac837dca02ab091ecf54ef80f", "html_url": "https://github.com/rust-lang/rust/commit/30220be9297e0deac837dca02ab091ecf54ef80f"}, {"sha": "e5e640cacef51e401286f93388002f41e8ef3328", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e640cacef51e401286f93388002f41e8ef3328", "html_url": "https://github.com/rust-lang/rust/commit/e5e640cacef51e401286f93388002f41e8ef3328"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "7307d9b2c86166983d1f9bf555cc6e7cc3d62e18", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3d9a1de690c794fc72102d2de2324beeefe81322/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9a1de690c794fc72102d2de2324beeefe81322/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=3d9a1de690c794fc72102d2de2324beeefe81322", "patch": "@@ -326,6 +326,25 @@ pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n         } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n             use crate::ptr;\n \n+            #[cfg(target_os = \"freebsd\")]\n+            {\n+                let mut set: libc::cpuset_t = unsafe { mem::zeroed() };\n+                unsafe {\n+                    if libc::cpuset_getaffinity(\n+                        libc::CPU_LEVEL_WHICH,\n+                        libc::CPU_WHICH_PID,\n+                        -1,\n+                        mem::size_of::<libc::cpuset_t>(),\n+                        &mut set,\n+                    ) == 0 {\n+                        let count = libc::CPU_COUNT(&set) as usize;\n+                        if count > 0 {\n+                            return Ok(NonZeroUsize::new_unchecked(count));\n+                        }\n+                    }\n+                }\n+            }\n+\n             let mut cpus: libc::c_uint = 0;\n             let mut cpus_size = crate::mem::size_of_val(&cpus);\n "}]}