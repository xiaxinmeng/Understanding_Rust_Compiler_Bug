{"sha": "7cdd02db32bc29de3c046d41b349e98801fe685d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGQwMmRiMzJiYzI5ZGUzYzA0NmQ0MWIzNDllOTg4MDFmZTY4NWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-06T15:17:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-09T00:31:12Z"}, "message": "Tweak region inference to ignore constraints like 'a <= 'static, since they\nhave no value. This also ensures that we can handle some obscure cases of fn\nsubtyping with bound regions that we didn't used to handle correctly.\n\nFixes #13974.", "tree": {"sha": "d8c8f2e613e02bc7e027f537e5b4bb7903fd0445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c8f2e613e02bc7e027f537e5b4bb7903fd0445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cdd02db32bc29de3c046d41b349e98801fe685d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdd02db32bc29de3c046d41b349e98801fe685d", "html_url": "https://github.com/rust-lang/rust/commit/7cdd02db32bc29de3c046d41b349e98801fe685d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cdd02db32bc29de3c046d41b349e98801fe685d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061db52b2b3a68477819fa7709350d3c25bb5741", "url": "https://api.github.com/repos/rust-lang/rust/commits/061db52b2b3a68477819fa7709350d3c25bb5741", "html_url": "https://github.com/rust-lang/rust/commit/061db52b2b3a68477819fa7709350d3c25bb5741"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "5afbb48ca3ca6e6f749a8916c78827924ed934c2", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cdd02db32bc29de3c046d41b349e98801fe685d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdd02db32bc29de3c046d41b349e98801fe685d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=7cdd02db32bc29de3c046d41b349e98801fe685d", "patch": "@@ -299,6 +299,9 @@ impl<'a> RegionVarBindings<'a> {\n                         sub.repr(self.tcx),\n                         sup.repr(self.tcx)));\n           }\n+          (_, ReStatic) => {\n+            // all regions are subregions of static, so we can ignore this\n+          }\n           (ReInfer(ReVar(sub_id)), ReInfer(ReVar(sup_id))) => {\n             self.add_constraint(ConstrainVarSubVar(sub_id, sup_id), origin);\n           }"}, {"sha": "c03040fe0f21189f9a7d7bab314081531c82cffd", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7cdd02db32bc29de3c046d41b349e98801fe685d/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdd02db32bc29de3c046d41b349e98801fe685d/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=7cdd02db32bc29de3c046d41b349e98801fe685d", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In this fn, the type `F` is a function that takes a reference to a\n+// struct and returns another reference with the same lifetime.\n+//\n+// Meanwhile, the bare fn `foo` takes a reference to a struct with\n+// *ANY* lifetime and returns a reference with the 'static lifetime.\n+// This can safely be considered to be an instance of `F` because all\n+// lifetimes are sublifetimes of 'static.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variable)]\n+\n+struct S;\n+\n+// Given 'cx, return 'cx\n+type F = fn<'cx>(&'cx S) -> &'cx S;\n+fn want_F(f: F) { }\n+\n+// Given anything, return 'static\n+type G = fn<'cx>(&'cx S) -> &'static S;\n+fn want_G(f: G) { }\n+\n+// Should meet both.\n+fn foo(x: &S) -> &'static S {\n+    fail!()\n+}\n+\n+// Should meet both.\n+fn bar<'a,'b>(x: &'a S) -> &'b S {\n+    fail!()\n+}\n+\n+// Meets F, but not G.\n+fn baz<'a>(x: &'a S) -> &'a S {\n+    fail!()\n+}\n+\n+fn supply_F() {\n+    want_F(foo);\n+    want_F(bar);\n+    want_F(baz);\n+}\n+\n+fn supply_G() {\n+    want_G(foo);\n+    want_G(bar);\n+    want_G(baz); //~ ERROR expected concrete lifetime\n+}\n+\n+pub fn main() {\n+}"}]}