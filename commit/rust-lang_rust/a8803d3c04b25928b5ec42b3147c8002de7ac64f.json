{"sha": "a8803d3c04b25928b5ec42b3147c8002de7ac64f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ODAzZDNjMDRiMjU5MjhiNWVjNDJiMzE0N2M4MDAyZGU3YWM2NGY=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T16:21:02Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T16:22:10Z"}, "message": "Delete files immediately, instead of collecting into vector", "tree": {"sha": "e4e56e9fec83abe07ff578173aea42d49b4c50d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e56e9fec83abe07ff578173aea42d49b4c50d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8803d3c04b25928b5ec42b3147c8002de7ac64f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8803d3c04b25928b5ec42b3147c8002de7ac64f", "html_url": "https://github.com/rust-lang/rust/commit/a8803d3c04b25928b5ec42b3147c8002de7ac64f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8803d3c04b25928b5ec42b3147c8002de7ac64f/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa359814aab054f4b0c9c764a6d6a36ecf6cde8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa359814aab054f4b0c9c764a6d6a36ecf6cde8", "html_url": "https://github.com/rust-lang/rust/commit/2fa359814aab054f4b0c9c764a6d6a36ecf6cde8"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "9fdf0a56d9de143820b1e8d7f46838e12fef2661", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a8803d3c04b25928b5ec42b3147c8002de7ac64f/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8803d3c04b25928b5ec42b3147c8002de7ac64f/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=a8803d3c04b25928b5ec42b3147c8002de7ac64f", "patch": "@@ -765,7 +765,6 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // Now garbage collect the valid session directories.\n     let mut deletion_candidates = vec![];\n-    let mut definitely_delete = vec![];\n \n     for (lock_file_name, directory_name) in &lock_file_to_session_dir {\n         debug!(\"garbage_collect_session_directories() - inspecting: {}\", directory_name);\n@@ -842,8 +841,11 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n                             successfully acquired lock\"\n                     );\n \n-                    // Note that we are holding on to the lock\n-                    definitely_delete.push((crate_directory.join(directory_name), Some(lock)));\n+                    delete_old(sess, &crate_directory.join(directory_name));\n+\n+                    // Let's make it explicit that the file lock is released at this point,\n+                    // or rather, that we held on to it until here\n+                    mem::drop(lock);\n                 }\n                 Err(_) => {\n                     debug!(\n@@ -880,26 +882,21 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n         mem::drop(lock);\n     }\n \n-    for (path, lock) in definitely_delete {\n-        debug!(\"garbage_collect_session_directories() - deleting `{}`\", path.display());\n+    Ok(())\n+}\n \n-        if let Err(err) = safe_remove_dir_all(&path) {\n-            sess.warn(&format!(\n-                \"Failed to garbage collect incremental \\\n-                                compilation session directory `{}`: {}\",\n-                path.display(),\n-                err\n-            ));\n-        } else {\n-            delete_session_dir_lock_file(sess, &lock_file_path(&path));\n-        }\n+fn delete_old(sess: &Session, path: &Path) {\n+    debug!(\"garbage_collect_session_directories() - deleting `{}`\", path.display());\n \n-        // Let's make it explicit that the file lock is released at this point,\n-        // or rather, that we held on to it until here\n-        mem::drop(lock);\n+    if let Err(err) = safe_remove_dir_all(&path) {\n+        sess.warn(&format!(\n+            \"Failed to garbage collect incremental compilation session directory `{}`: {}\",\n+            path.display(),\n+            err\n+        ));\n+    } else {\n+        delete_session_dir_lock_file(sess, &lock_file_path(&path));\n     }\n-\n-    Ok(())\n }\n \n fn all_except_most_recent("}]}