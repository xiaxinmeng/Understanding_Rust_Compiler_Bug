{"sha": "a634b21563fde802e2424bbef086ce541bb6ad8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MzRiMjE1NjNmZGU4MDJlMjQyNGJiZWYwODZjZTU0MWJiNmFkOGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-30T00:04:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-30T00:08:35Z"}, "message": "rustc: Make parametric return types go through an out pointer", "tree": {"sha": "b666c3d4499fbd2100036ac432dc56f955e3d7d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b666c3d4499fbd2100036ac432dc56f955e3d7d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a634b21563fde802e2424bbef086ce541bb6ad8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a634b21563fde802e2424bbef086ce541bb6ad8c", "html_url": "https://github.com/rust-lang/rust/commit/a634b21563fde802e2424bbef086ce541bb6ad8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a634b21563fde802e2424bbef086ce541bb6ad8c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c6dd18224a926ed0da365511e05fcb8e5e817a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6dd18224a926ed0da365511e05fcb8e5e817a5", "html_url": "https://github.com/rust-lang/rust/commit/2c6dd18224a926ed0da365511e05fcb8e5e817a5"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "0064ba3cb8dbb2d9ca9d33e7e8c55c29685d1481", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a634b21563fde802e2424bbef086ce541bb6ad8c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a634b21563fde802e2424bbef086ce541bb6ad8c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a634b21563fde802e2424bbef086ce541bb6ad8c", "patch": "@@ -75,6 +75,7 @@ state type crate_ctxt = rec(session.session sess,\n state type fn_ctxt = rec(ValueRef llfn,\n                          ValueRef lltaskptr,\n                          mutable option.t[ValueRef] llself,\n+                         mutable option.t[ValueRef] llretptr,\n                          hashmap[ast.def_id, ValueRef] llargs,\n                          hashmap[ast.def_id, ValueRef] lllocals,\n                          hashmap[ast.def_id, ValueRef] lltydescs,\n@@ -306,6 +307,10 @@ fn type_of_fn_full(@crate_ctxt cx,\n         case (_) { }\n     }\n \n+    if (ty.type_has_dynamic_size(output)) {\n+        atys += T_ptr(type_of(cx, output));\n+    }\n+\n     for (ty.arg arg in inputs) {\n         let TypeRef t = type_of(cx, arg.ty);\n         alt (arg.mode) {\n@@ -318,7 +323,7 @@ fn type_of_fn_full(@crate_ctxt cx,\n     }\n \n     auto ret_ty;\n-    if (ty.type_is_nil(output)) {\n+    if (ty.type_is_nil(output) || ty.type_has_dynamic_size(output)) {\n         ret_ty = llvm.LLVMVoidType();\n     } else {\n         ret_ty = type_of(cx, output);\n@@ -2183,8 +2188,17 @@ impure fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n             if (ty.type_is_nil(ty.expr_ty(ex))) {\n                 r.bcx.build.RetVoid();\n                 r.val = C_nil();\n-            } else {\n-                r.val = r.bcx.build.Ret(r.val);\n+                ret r;  // FIXME: early return needed due to typestate bug\n+            }\n+\n+            alt (cx.fcx.llretptr) {\n+                case (some[ValueRef](?llptr)) {\n+                    r.bcx.build.Store(r.val, llptr);\n+                    r.bcx.build.RetVoid();\n+                }\n+                case (none[ValueRef]) {\n+                    r.val = r.bcx.build.Ret(r.val);\n+                }\n             }\n             ret r;\n         }\n@@ -2375,6 +2389,7 @@ fn new_fn_ctxt(@crate_ctxt cx,\n     ret @rec(llfn=llfndecl,\n              lltaskptr=lltaskptr,\n              mutable llself=none[ValueRef],\n+             mutable llretptr=none[ValueRef],\n              llargs=llargs,\n              lllocals=lllocals,\n              lltydescs=lltydescs,\n@@ -2384,6 +2399,7 @@ fn new_fn_ctxt(@crate_ctxt cx,\n \n fn create_llargs_for_fn_args(&@fn_ctxt cx,\n                              option.t[TypeRef] ty_self,\n+                             @ty.t ret_ty,\n                              &vec[ast.arg] args,\n                              &vec[ast.ty_param] ty_params) {\n     let uint arg_n = 1u;\n@@ -2405,6 +2421,11 @@ fn create_llargs_for_fn_args(&@fn_ctxt cx,\n         case (_) { }\n     }\n \n+    if (ty.type_has_dynamic_size(ret_ty)) {\n+        cx.llretptr = some[ValueRef](llvm.LLVMGetParam(cx.llfn, arg_n));\n+        arg_n += 1u;\n+    }\n+\n     for (ast.arg arg in args) {\n         auto llarg = llvm.LLVMGetParam(cx.llfn, arg_n);\n         check (llarg as int != 0);\n@@ -2467,7 +2488,8 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n     cx.item_names.insert(cx.path, llfndecl);\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n-    create_llargs_for_fn_args(fcx, none[TypeRef], f.inputs, ty_params);\n+    create_llargs_for_fn_args(fcx, none[TypeRef], ret_ty_of_fn(ann),\n+                              f.inputs, ty_params);\n \n     auto bcx = new_top_block_ctxt(fcx);\n \n@@ -2528,7 +2550,7 @@ impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n     }\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llctor_decl);\n-    create_llargs_for_fn_args(fcx, none[TypeRef],\n+    create_llargs_for_fn_args(fcx, none[TypeRef], ret_ty_of_fn(ann),\n                               fn_args, ty_params);\n \n     auto bcx = new_top_block_ctxt(fcx);\n@@ -2636,7 +2658,8 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n     cx.item_names.insert(cx.path, llfndecl);\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n-    create_llargs_for_fn_args(fcx, none[TypeRef], fn_args, ty_params);\n+    create_llargs_for_fn_args(fcx, none[TypeRef], ret_ty_of_fn(variant.ann),\n+                              fn_args, ty_params);\n \n     auto bcx = new_top_block_ctxt(fcx);\n \n@@ -2902,6 +2925,7 @@ fn trans_exit_task_glue(@crate_ctxt cx) {\n     auto fcx = @rec(llfn=llfn,\n                     lltaskptr=lltaskptr,\n                     mutable llself=none[ValueRef],\n+                    mutable llretptr=none[ValueRef],\n                     llargs=new_def_hash[ValueRef](),\n                     lllocals=new_def_hash[ValueRef](),\n                     lltydescs=new_def_hash[ValueRef](),"}]}