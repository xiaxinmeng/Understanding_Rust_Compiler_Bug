{"sha": "8c1535f1156cb05eb3976497ac732c01ba4b5048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMTUzNWYxMTU2Y2IwNWViMzk3NjQ5N2FjNzMyYzAxYmE0YjUwNDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-24T17:26:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-24T17:26:37Z"}, "message": "Rollup merge of #49229 - Centril:doc/format_args_display_debug, r=steveklabnik\n\nDocument format_args! / Arguments<'a> behavior wrt. Display and Debug\n\nThis is a follow up PR to #49067 , this documents the behavior of `format_args!` (i.e: `Argument<'a>`) wrt. `Display` and `Debug`.\n\nr? @steveklabnik", "tree": {"sha": "5761242513590c3b66a518574f0840ae32193dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5761242513590c3b66a518574f0840ae32193dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c1535f1156cb05eb3976497ac732c01ba4b5048", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatopNCRBK7hj4Ov3rIwAAdHIIAGEmjEJYu2D0/uKSfmPHjaPA\nCmSm9KWiyqryVNinB4q7TTDYirTNbJ4li4w6ra+KKM0zJe+0CYCm0xX0oqz0GVDr\n89nGpv5Wy/IBAuuN47W/VcqK3AxzlHrKG2c+4lh3QuXjiuOWeVQfSOu10gTh0Pae\nUOm4RgcfCdGCBN0nMsJVtYYxCyz9SR2pfMmv7OOQ54LfDJtN/dzVxvaw4a4OiShS\nGey4bu5sWkzuxnDkbHtFO+Hl1abNgjC+N7b0D2OTGfMGe/Xr/GrL1ydyDI19FbRD\nUTx4ooPLzLAXzVmMo4D0FuOUitCrYw1jlFi1NJHhp6CJ1f4C4T2sCfk+ErNBYMs=\n=ax36\n-----END PGP SIGNATURE-----\n", "payload": "tree 5761242513590c3b66a518574f0840ae32193dfe\nparent 2bd27c97291b198a8491254887f60fe9f79be7a7\nparent 613fb8bc2c5277b9b9a14bdba3939bb6042d91ec\nauthor kennytm <kennytm@gmail.com> 1521912397 +0800\ncommitter GitHub <noreply@github.com> 1521912397 +0800\n\nRollup merge of #49229 - Centril:doc/format_args_display_debug, r=steveklabnik\n\nDocument format_args! / Arguments<'a> behavior wrt. Display and Debug\n\nThis is a follow up PR to #49067 , this documents the behavior of `format_args!` (i.e: `Argument<'a>`) wrt. `Display` and `Debug`.\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1535f1156cb05eb3976497ac732c01ba4b5048", "html_url": "https://github.com/rust-lang/rust/commit/8c1535f1156cb05eb3976497ac732c01ba4b5048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c1535f1156cb05eb3976497ac732c01ba4b5048/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd27c97291b198a8491254887f60fe9f79be7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd27c97291b198a8491254887f60fe9f79be7a7", "html_url": "https://github.com/rust-lang/rust/commit/2bd27c97291b198a8491254887f60fe9f79be7a7"}, {"sha": "613fb8bc2c5277b9b9a14bdba3939bb6042d91ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/613fb8bc2c5277b9b9a14bdba3939bb6042d91ec", "html_url": "https://github.com/rust-lang/rust/commit/613fb8bc2c5277b9b9a14bdba3939bb6042d91ec"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "62994ed15cc6daf708350cf146a249927d1b9ce5", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8c1535f1156cb05eb3976497ac732c01ba4b5048/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1535f1156cb05eb3976497ac732c01ba4b5048/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8c1535f1156cb05eb3976497ac732c01ba4b5048", "patch": "@@ -406,6 +406,18 @@ impl<'a> Arguments<'a> {\n /// macro validates the format string at compile-time so usage of the [`write`]\n /// and [`format`] functions can be safely performed.\n ///\n+/// You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`\n+/// and `Display` contexts as seen below. The example also shows that `Debug`\n+/// and `Display` format to the same thing: the interpolated format string\n+/// in `format_args!`.\n+///\n+/// ```rust\n+/// let display = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n+/// let debug = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n+/// assert_eq!(\"1 foo 2\", display);\n+/// assert_eq!(display, debug);\n+/// ```\n+///\n /// [`format_args!`]: ../../std/macro.format_args.html\n /// [`format`]: ../../std/fmt/fn.format.html\n /// [`write`]: ../../std/fmt/fn.write.html\n@@ -1553,23 +1565,32 @@ impl<'a> Formatter<'a> {\n     ///\n     /// ```rust\n     /// use std::fmt;\n+    /// use std::net::Ipv4Addr;\n     ///\n     /// struct Foo {\n     ///     bar: i32,\n     ///     baz: String,\n+    ///     addr: Ipv4Addr,\n     /// }\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n     ///         fmt.debug_struct(\"Foo\")\n     ///             .field(\"bar\", &self.bar)\n     ///             .field(\"baz\", &self.baz)\n+    ///             .field(\"addr\", &format_args!(\"{}\", self.addr))\n     ///             .finish()\n     ///     }\n     /// }\n     ///\n-    /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n-    /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n+    /// assert_eq!(\n+    ///     \"Foo { bar: 10, baz: \\\"Hello World\\\", addr: 127.0.0.1 }\",\n+    ///     format!(\"{:?}\", Foo {\n+    ///         bar: 10,\n+    ///         baz: \"Hello World\".to_string(),\n+    ///         addr: Ipv4Addr::new(127, 0, 0, 1),\n+    ///     })\n+    /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {\n@@ -1583,20 +1604,24 @@ impl<'a> Formatter<'a> {\n     ///\n     /// ```rust\n     /// use std::fmt;\n+    /// use std::marker::PhantomData;\n     ///\n-    /// struct Foo(i32, String);\n+    /// struct Foo<T>(i32, String, PhantomData<T>);\n     ///\n-    /// impl fmt::Debug for Foo {\n+    /// impl<T> fmt::Debug for Foo<T> {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n     ///         fmt.debug_tuple(\"Foo\")\n     ///             .field(&self.0)\n     ///             .field(&self.1)\n+    ///             .field(&format_args!(\"_\"))\n     ///             .finish()\n     ///     }\n     /// }\n     ///\n-    /// // prints \"Foo(10, \"Hello World\")\"\n-    /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n+    /// assert_eq!(\n+    ///     \"Foo(10, \\\"Hello\\\", _)\",\n+    ///     format!(\"{:?}\", Foo(10, \"Hello\".to_string(), PhantomData::<u8>))\n+    /// );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_tuple<'b>(&'b mut self, name: &str) -> DebugTuple<'b, 'a> {\n@@ -1646,6 +1671,41 @@ impl<'a> Formatter<'a> {\n     /// // prints \"{10, 11}\"\n     /// println!(\"{:?}\", Foo(vec![10, 11]));\n     /// ```\n+    ///\n+    /// [`format_args!`]: ../../std/macro.format_args.html\n+    ///\n+    /// In this more complex example, we use [`format_args!`] and `.debug_set()`\n+    /// to build a list of match arms:\n+    ///\n+    /// ```rust\n+    /// use std::fmt;\n+    ///\n+    /// struct Arm<'a, L: 'a, R: 'a>(&'a (L, R));\n+    /// struct Table<'a, K: 'a, V: 'a>(&'a [(K, V)], V);\n+    ///\n+    /// impl<'a, L, R> fmt::Debug for Arm<'a, L, R>\n+    /// where\n+    ///     L: 'a + fmt::Debug, R: 'a + fmt::Debug\n+    /// {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///         L::fmt(&(self.0).0, fmt)?;\n+    ///         fmt.write_str(\" => \")?;\n+    ///         R::fmt(&(self.0).1, fmt)\n+    ///     }\n+    /// }\n+    ///\n+    /// impl<'a, K, V> fmt::Debug for Table<'a, K, V>\n+    /// where\n+    ///     K: 'a + fmt::Debug, V: 'a + fmt::Debug\n+    /// {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///         fmt.debug_set()\n+    ///         .entries(self.0.iter().map(Arm))\n+    ///         .entry(&Arm(&(format_args!(\"_\"), &self.1)))\n+    ///         .finish()\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_set<'b>(&'b mut self) -> DebugSet<'b, 'a> {\n         builders::debug_set_new(self)"}, {"sha": "47609f17221ef5dd9ce17cb07dfaf9e2b4dc2c4a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c1535f1156cb05eb3976497ac732c01ba4b5048/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1535f1156cb05eb3976497ac732c01ba4b5048/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8c1535f1156cb05eb3976497ac732c01ba4b5048", "patch": "@@ -335,6 +335,18 @@ pub mod builtin {\n     /// proxied through this one.  `format_args!`, unlike its derived macros, avoids\n     /// heap allocations.\n     ///\n+    /// You can use the [`fmt::Arguments`] value that `format_args!` returns\n+    /// in `Debug` and `Display` contexts as seen below. The example also shows\n+    /// that `Debug` and `Display` format to the same thing: the interpolated\n+    /// format string in `format_args!`.\n+    ///\n+    /// ```rust\n+    /// let display = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n+    /// let debug = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n+    /// assert_eq!(\"1 foo 2\", display);\n+    /// assert_eq!(display, debug);\n+    /// ```\n+    ///\n     /// For more information, see the documentation in [`std::fmt`].\n     ///\n     /// [`Display`]: ../std/fmt/trait.Display.html"}]}