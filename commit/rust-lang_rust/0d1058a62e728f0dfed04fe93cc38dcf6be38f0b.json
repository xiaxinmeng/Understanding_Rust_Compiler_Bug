{"sha": "0d1058a62e728f0dfed04fe93cc38dcf6be38f0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTA1OGE2MmU3MjhmMGRmZWQwNGZlOTNjYzM4ZGNmNmJlMzhmMGI=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-01-31T08:12:33Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-01-31T08:12:33Z"}, "message": "Remove `tps` from `trans_enum_def` and `trans_struct_def`", "tree": {"sha": "3b9680b060c75e4c4f38b40c80f763ad8e0b190d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9680b060c75e4c4f38b40c80f763ad8e0b190d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1058a62e728f0dfed04fe93cc38dcf6be38f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1058a62e728f0dfed04fe93cc38dcf6be38f0b", "html_url": "https://github.com/rust-lang/rust/commit/0d1058a62e728f0dfed04fe93cc38dcf6be38f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1058a62e728f0dfed04fe93cc38dcf6be38f0b/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42b462e0765f02fd7bb0f2613240ae2489a47fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b462e0765f02fd7bb0f2613240ae2489a47fee", "html_url": "https://github.com/rust-lang/rust/commit/42b462e0765f02fd7bb0f2613240ae2489a47fee"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "306b90f6e9a733b4dbf07f651894f0a31e8d4d39", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0d1058a62e728f0dfed04fe93cc38dcf6be38f0b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1058a62e728f0dfed04fe93cc38dcf6be38f0b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0d1058a62e728f0dfed04fe93cc38dcf6be38f0b", "patch": "@@ -1986,7 +1986,7 @@ pub fn trans_struct_dtor(ccx: @crate_ctxt,\n }\n \n pub fn trans_enum_def(ccx: @crate_ctxt, enum_definition: ast::enum_def,\n-                      id: ast::node_id, tps: ~[ast::ty_param], degen: bool,\n+                      id: ast::node_id, degen: bool,\n                       path: @ast_map::path, vi: @~[ty::VariantInfo],\n                       i: &mut uint) {\n     for vec::each(enum_definition.variants) |variant| {\n@@ -2003,14 +2003,13 @@ pub fn trans_enum_def(ccx: @crate_ctxt, enum_definition: ast::enum_def,\n                 // Nothing to do.\n             }\n             ast::struct_variant_kind(struct_def) => {\n-                trans_struct_def(ccx, struct_def, /*bad*/copy tps, path,\n+                trans_struct_def(ccx, struct_def, path,\n                                  variant.node.id);\n             }\n             ast::enum_variant_kind(ref enum_definition) => {\n                 trans_enum_def(ccx,\n                                *enum_definition,\n                                id,\n-                               /*bad*/copy tps,\n                                degen,\n                                path,\n                                vi,\n@@ -2062,11 +2061,11 @@ pub fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         trans_mod(ccx, m);\n       }\n       ast::item_enum(ref enum_definition, ref tps) => {\n-        if tps.len() == 0u {\n+        if tps.is_empty() {\n             let degen = (*enum_definition).variants.len() == 1u;\n             let vi = ty::enum_variants(ccx.tcx, local_def(item.id));\n             let mut i = 0;\n-            trans_enum_def(ccx, (*enum_definition), item.id, /*bad*/copy *tps,\n+            trans_enum_def(ccx, (*enum_definition), item.id,\n                            degen, path, vi, &mut i);\n         }\n       }\n@@ -2080,35 +2079,33 @@ pub fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         foreign::trans_foreign_mod(ccx, foreign_mod, abi);\n       }\n       ast::item_struct(struct_def, tps) => {\n-        trans_struct_def(ccx, struct_def, tps, path, item.id);\n+        if tps.is_empty() {\n+            trans_struct_def(ccx, struct_def, path, item.id);\n+        }\n       }\n       _ => {/* fall through */ }\n     }\n }\n \n pub fn trans_struct_def(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n-                        tps: ~[ast::ty_param], path: @ast_map::path,\n+                        path: @ast_map::path,\n                         id: ast::node_id) {\n-    // If there are type parameters, the destructor and constructor will be\n-    // monomorphized, so we don't translate them here.\n-    if tps.len() == 0u {\n-        // Translate the destructor.\n-        do option::iter(&struct_def.dtor) |dtor| {\n-            trans_struct_dtor(ccx, /*bad*/copy *path, dtor.node.body,\n-                             dtor.node.id, None, None, local_def(id));\n-        };\n+    // Translate the destructor.\n+    do option::iter(&struct_def.dtor) |dtor| {\n+        trans_struct_dtor(ccx, /*bad*/copy *path, dtor.node.body,\n+                         dtor.node.id, None, None, local_def(id));\n+    };\n \n-        // If this is a tuple-like struct, translate the constructor.\n-        match struct_def.ctor_id {\n-            // We only need to translate a constructor if there are fields;\n-            // otherwise this is a unit-like struct.\n-            Some(ctor_id) if struct_def.fields.len() > 0 => {\n-                let llfndecl = get_item_val(ccx, ctor_id);\n-                trans_tuple_struct(ccx, /*bad*/copy struct_def.fields,\n-                                   ctor_id, None, llfndecl);\n-            }\n-            Some(_) | None => {}\n+    // If this is a tuple-like struct, translate the constructor.\n+    match struct_def.ctor_id {\n+        // We only need to translate a constructor if there are fields;\n+        // otherwise this is a unit-like struct.\n+        Some(ctor_id) if struct_def.fields.len() > 0 => {\n+            let llfndecl = get_item_val(ccx, ctor_id);\n+            trans_tuple_struct(ccx, /*bad*/copy struct_def.fields,\n+                               ctor_id, None, llfndecl);\n         }\n+        Some(_) | None => {}\n     }\n }\n "}]}