{"sha": "919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOWM0YTY3MDdkYTNhYTJjYzlmZjYzZTMzMDU3ZTFlMmE5MDcyMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-30T09:15:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-30T09:15:21Z"}, "message": "Auto merge of #42782 - cuviper:iterator_for_each, r=alexcrichton\n\nAdd `Iterator::for_each`\n\nThis works like a `for` loop in functional style, applying a closure to\nevery item in the `Iterator`.  It doesn't allow `break`/`continue` like\na `for` loop, nor any other control flow outside the closure, but it may\nbe a more legible style for tying up the end of a long iterator chain.\n\nThis was tried before in #14911, but nobody made the case for using it\nwith longer iterators.  There was also `Iterator::advance` at that time\nwhich was more capable than `for_each`, but that no longer exists.\n\nThe `itertools` crate has `Itertools::foreach` with the same behavior,\nbut thankfully the names won't collide.  The `rayon` crate also has a\n`ParallelIterator::for_each` where simple `for` loops aren't possible.\n\n> I really wish we had `for_each` on seq iterators. Having to use a\n> dummy operation is annoying.  - [@nikomatsakis][1]\n\n[1]: https://github.com/nikomatsakis/rayon/pull/367#issuecomment-308455185", "tree": {"sha": "632c6d954c24235be3944b55305654e4fd66ce8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632c6d954c24235be3944b55305654e4fd66ce8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "html_url": "https://github.com/rust-lang/rust/commit/919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5b437176a65c8686865bd7b8f9bb27c239d37c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5b437176a65c8686865bd7b8f9bb27c239d37c", "html_url": "https://github.com/rust-lang/rust/commit/4c5b437176a65c8686865bd7b8f9bb27c239d37c"}, {"sha": "e72ee6e4ad0511aaf533a492382b84dfa712393f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72ee6e4ad0511aaf533a492382b84dfa712393f", "html_url": "https://github.com/rust-lang/rust/commit/e72ee6e4ad0511aaf533a492382b84dfa712393f"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "72fdac5e40dfaa2a15d7655be5a22ceff35a3ea5", "filename": "src/doc/unstable-book/src/library-features/iterator-for-each.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "raw_url": "https://github.com/rust-lang/rust/raw/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md?ref=919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "patch": "@@ -0,0 +1,17 @@\n+# `iterator_for_each`\n+\n+The tracking issue for this feature is: [#TBD]\n+\n+[#TBD]: https://github.com/rust-lang/rust/issues/TBD\n+\n+------------------------\n+\n+To call a closure on each element of an iterator, you can use `for_each`:\n+\n+```rust\n+#![feature(iterator_for_each)]\n+\n+fn main() {\n+    (0..10).for_each(|i| println!(\"{}\", i));\n+}\n+```"}, {"sha": "5b06229c21f23367f0682273c1926884659afe12", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "patch": "@@ -99,3 +99,50 @@ fn bench_zip_add(b: &mut Bencher) {\n         add_zip(&source, &mut dst)\n     });\n }\n+\n+/// `Iterator::for_each` implemented as a plain loop.\n+fn for_each_loop<I, F>(iter: I, mut f: F) where\n+    I: Iterator, F: FnMut(I::Item)\n+{\n+    for item in iter {\n+        f(item);\n+    }\n+}\n+\n+/// `Iterator::for_each` implemented with `fold` for internal iteration.\n+/// (except when `by_ref()` effectively disables that optimization.)\n+fn for_each_fold<I, F>(iter: I, mut f: F) where\n+    I: Iterator, F: FnMut(I::Item)\n+{\n+    iter.fold((), move |(), item| f(item));\n+}\n+\n+#[bench]\n+fn bench_for_each_chain_loop(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut acc = 0;\n+        let iter = (0i64..1000000).chain(0..1000000).map(black_box);\n+        for_each_loop(iter, |x| acc += x);\n+        acc\n+    });\n+}\n+\n+#[bench]\n+fn bench_for_each_chain_fold(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut acc = 0;\n+        let iter = (0i64..1000000).chain(0..1000000).map(black_box);\n+        for_each_fold(iter, |x| acc += x);\n+        acc\n+    });\n+}\n+\n+#[bench]\n+fn bench_for_each_chain_ref_fold(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut acc = 0;\n+        let mut iter = (0i64..1000000).chain(0..1000000).map(black_box);\n+        for_each_fold(iter.by_ref(), |x| acc += x);\n+        acc\n+    });\n+}"}, {"sha": "26660cb3331abd03da418db6c4877f0468c1187b", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919c4a6707da3aa2cc9ff63e33057e1e2a90720b/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=919c4a6707da3aa2cc9ff63e33057e1e2a90720b", "patch": "@@ -482,6 +482,53 @@ pub trait Iterator {\n         Map{iter: self, f: f}\n     }\n \n+    /// Calls a closure on each element of an iterator.\n+    ///\n+    /// This is equivalent to using a [`for`] loop on the iterator, although\n+    /// `break` and `continue` are not possible from a closure.  It's generally\n+    /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n+    /// when processing items at the end of longer iterator chains.  In some\n+    /// cases `for_each` may also be faster than a loop, because it will use\n+    /// internal iteration on adaptors like `Chain`.\n+    ///\n+    /// [`for`]: ../../book/first-edition/loops.html#for\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_for_each)]\n+    ///\n+    /// use std::sync::mpsc::channel;\n+    ///\n+    /// let (tx, rx) = channel();\n+    /// (0..5).map(|x| x * 2 + 1)\n+    ///       .for_each(move |x| tx.send(x).unwrap());\n+    ///\n+    /// let v: Vec<_> =  rx.iter().collect();\n+    /// assert_eq!(v, vec![1, 3, 5, 7, 9]);\n+    /// ```\n+    ///\n+    /// For such a small example, a `for` loop may be cleaner, but `for_each`\n+    /// might be preferable to keep a functional style with longer iterators:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_for_each)]\n+    ///\n+    /// (0..5).flat_map(|x| x * 100 .. x * 110)\n+    ///       .enumerate()\n+    ///       .filter(|&(i, x)| (i + x) % 3 == 0)\n+    ///       .for_each(|(i, x)| println!(\"{}:{}\", i, x));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_for_each\", issue = \"0\")]\n+    fn for_each<F>(self, mut f: F) where\n+        Self: Sized, F: FnMut(Self::Item),\n+    {\n+        self.fold((), move |(), item| f(item));\n+    }\n+\n     /// Creates an iterator which uses a closure to determine if an element\n     /// should be yielded.\n     ///"}]}