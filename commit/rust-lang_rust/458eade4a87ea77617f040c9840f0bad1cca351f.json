{"sha": "458eade4a87ea77617f040c9840f0bad1cca351f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OGVhZGU0YTg3ZWE3NzYxN2YwNDBjOTg0MGYwYmFkMWNjYTM1MWY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-27T19:57:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-27T19:57:31Z"}, "message": "Merge pull request #2195 from topecongiro/issue-2193\n\nTake into account a trailing comma on variant", "tree": {"sha": "83adb75100c099eb3edfbb82e5926fe87d1cae1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83adb75100c099eb3edfbb82e5926fe87d1cae1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458eade4a87ea77617f040c9840f0bad1cca351f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaHG4rCRBK7hj4Ov3rIwAAdHIIAHysDkKnIGu+Olnzs/3/9Jrs\nQMdT/c8SQ16X+ZWbuQ8GIAnnxs9mlTZVMqyTvEdOW+oNj6PkwWgrFLtDjOK7WMXO\ndGhIUbisw+74hFiX4BnbVe1IqtQnXMLjh/HpNv1JJobTpZMdTz2uvIMYuZmks4Da\nYKrMUfxdJk1ugCM8PMrWHGK72z1jHFxDA4yTFUGEsW9a99MBqjefA8uQP5rXD64b\n1nCHTYdleIo83GX4/KbdFSlpRBYd8eoLgopUmWG6677qiPlccKpNMNMHYVT+zt1e\nLCOBSDnrF1DzZZ8kBI1g4iV4egBJOPhlqBZZCKNgl6ymKharrkOpsoj+tGiIHbI=\n=X0JK\n-----END PGP SIGNATURE-----\n", "payload": "tree 83adb75100c099eb3edfbb82e5926fe87d1cae1c\nparent fcb48786c8b265bf8a3c77c0c49badfdd9c0ad5a\nparent 940758b1bdb9423085c5f761acc724e453d9e826\nauthor Nick Cameron <nrc@ncameron.org> 1511812651 +1300\ncommitter GitHub <noreply@github.com> 1511812651 +1300\n\nMerge pull request #2195 from topecongiro/issue-2193\n\nTake into account a trailing comma on variant"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458eade4a87ea77617f040c9840f0bad1cca351f", "html_url": "https://github.com/rust-lang/rust/commit/458eade4a87ea77617f040c9840f0bad1cca351f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458eade4a87ea77617f040c9840f0bad1cca351f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcb48786c8b265bf8a3c77c0c49badfdd9c0ad5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb48786c8b265bf8a3c77c0c49badfdd9c0ad5a", "html_url": "https://github.com/rust-lang/rust/commit/fcb48786c8b265bf8a3c77c0c49badfdd9c0ad5a"}, {"sha": "940758b1bdb9423085c5f761acc724e453d9e826", "url": "https://api.github.com/repos/rust-lang/rust/commits/940758b1bdb9423085c5f761acc724e453d9e826", "html_url": "https://github.com/rust-lang/rust/commit/940758b1bdb9423085c5f761acc724e453d9e826"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "da110eef93400d003af6112fe80071727e67760d", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/458eade4a87ea77617f040c9840f0bad1cca351f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458eade4a87ea77617f040c9840f0bad1cca351f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=458eade4a87ea77617f040c9840f0bad1cca351f", "patch": "@@ -533,8 +533,8 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let context = self.get_context();\n-        let indent = self.block_indent;\n-        let shape = self.shape();\n+        // 1 = ','\n+        let shape = self.shape().sub_width(1)?;\n         let attrs_str = field.node.attrs.rewrite(&context, shape)?;\n         let lo = field\n             .node\n@@ -544,19 +544,15 @@ impl<'a> FmtVisitor<'a> {\n         let span = mk_sp(lo, field.span.lo());\n \n         let variant_body = match field.node.data {\n-            ast::VariantData::Tuple(..) | ast::VariantData::Struct(..) => {\n-                // FIXME: Should limit the width, as we have a trailing comma\n-                format_struct(\n-                    &context,\n-                    &StructParts::from_variant(field),\n-                    indent,\n-                    Some(one_line_width),\n-                )?\n-            }\n+            ast::VariantData::Tuple(..) | ast::VariantData::Struct(..) => format_struct(\n+                &context,\n+                &StructParts::from_variant(field),\n+                self.block_indent,\n+                Some(one_line_width),\n+            )?,\n             ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {\n                 let lhs = format!(\"{} =\", field.node.name);\n-                // 1 = ','\n-                rewrite_assign_rhs(&context, lhs, &**expr, shape.sub_width(1)?)?\n+                rewrite_assign_rhs(&context, lhs, &**expr, shape)?\n             } else {\n                 field.node.name.to_string()\n             },\n@@ -1312,7 +1308,7 @@ fn format_tuple_struct(\n         }\n         result.push(')');\n     } else {\n-        let shape = Shape::indented(offset, context.config);\n+        let shape = Shape::indented(offset, context.config).sub_width(1)?;\n         let fields = &fields.iter().map(|field| field).collect::<Vec<_>>()[..];\n         let one_line_width = context.config.width_heuristics().fn_call_width;\n         result = rewrite_call_inner(context, &result, fields, span, shape, one_line_width, false)?;"}, {"sha": "f228e5ef64677553e8e80003a36c0fcb6c49435b", "filename": "tests/source/enum.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/458eade4a87ea77617f040c9840f0bad1cca351f/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458eade4a87ea77617f040c9840f0bad1cca351f/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=458eade4a87ea77617f040c9840f0bad1cca351f", "patch": "@@ -172,3 +172,11 @@ enum AnError {\n     #[fail(display = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")]\n     UnexpectedSingleToken { token: syn::Token },\n }\n+\n+// #2193\n+enum WidthOf101 {\n+    #[fail(display = \".....................................................\")] Io(::std::io::Error),\n+    #[fail(display = \".....................................................\")] Ioo(::std::io::Error),\n+    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n+    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n+}"}, {"sha": "78b0fd1b69d03e92403423073cbe825d41bfd120", "filename": "tests/target/enum.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/458eade4a87ea77617f040c9840f0bad1cca351f/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458eade4a87ea77617f040c9840f0bad1cca351f/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=458eade4a87ea77617f040c9840f0bad1cca351f", "patch": "@@ -222,3 +222,14 @@ enum AnError {\n     #[fail(display = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")]\n     UnexpectedSingleToken { token: syn::Token },\n }\n+\n+// #2193\n+enum WidthOf101 {\n+    #[fail(display = \".....................................................\")] Io(::std::io::Error),\n+    #[fail(display = \".....................................................\")]\n+    Ioo(::std::io::Error),\n+    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n+    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+        ::std::io::Error,\n+    ),\n+}"}]}