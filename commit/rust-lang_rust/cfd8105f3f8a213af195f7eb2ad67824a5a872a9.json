{"sha": "cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "node_id": "C_kwDOAAsO6NoAKGNmZDgxMDVmM2Y4YTIxM2FmMTk1ZjdlYjJhZDY3ODI0YTVhODcyYTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T00:22:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T00:22:05Z"}, "message": "Rollup merge of #108986 - fortanix:raoul/sync_lvi_patches, r=cuviper\n\nsync LVI tests\n\nThe LVI tests for the `x86_64-fortanix-unknown-sgx` target have gotten out of sync. LVI is still mitigated correctly, but the LVI tests need minor modifications. Other (non LVI-related) tests fail when the target applies LVI mitigations as they assume the generated code contains forbidden instructions such as `retq`. These tests are ignored for the sgx environment.\n\ncc: `@jethrogb`", "tree": {"sha": "3f37434a45b5c9eaf2feec835ac50fa5019ea218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f37434a45b5c9eaf2feec835ac50fa5019ea218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHO0tCRBK7hj4Ov3rIwAAW5IIAH63zM9OF6UGWGecUVeUuDqG\ny4G54+4EpxCNEfDo3k1P9HmqpknfslQmuAla3te40qOx65sFZRiCOAfqVcmeAIfk\nBCpQBAZ49+DwyAvzkHIY+pQ1bhrBbUQI6mvsPgaTeuTuoAY3TyEvvncwiIpsTqRK\nkfYTRbTL7BilVchC7nli0EI/vFnVJ4bdLQhZ0QaD4rmURcb7GLpQYBdIPUFD3Iki\nMZLXiNaasxme2hw2W1MDCzsQeWzCV6Loq+GYoudNwpR2rZZ+I2d128vngzfvY2jz\nvrDpQUNI/C07AGP5xgNCjS9Lvvlk/M/Qbhvuj5H1UDj78Pp6ysJDpVWhVewdjfM=\n=LeHZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f37434a45b5c9eaf2feec835ac50fa5019ea218\nparent eb82a5a0c8a6cfc9a1665d70315335102f598263\nparent d69ebf7e6cd5e19b9d64a76f8ec31ab225cf13fe\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679617325 +0100\ncommitter GitHub <noreply@github.com> 1679617325 +0100\n\nRollup merge of #108986 - fortanix:raoul/sync_lvi_patches, r=cuviper\n\nsync LVI tests\n\nThe LVI tests for the `x86_64-fortanix-unknown-sgx` target have gotten out of sync. LVI is still mitigated correctly, but the LVI tests need minor modifications. Other (non LVI-related) tests fail when the target applies LVI mitigations as they assume the generated code contains forbidden instructions such as `retq`. These tests are ignored for the sgx environment.\n\ncc: `@jethrogb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "html_url": "https://github.com/rust-lang/rust/commit/cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb82a5a0c8a6cfc9a1665d70315335102f598263", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb82a5a0c8a6cfc9a1665d70315335102f598263", "html_url": "https://github.com/rust-lang/rust/commit/eb82a5a0c8a6cfc9a1665d70315335102f598263"}, {"sha": "d69ebf7e6cd5e19b9d64a76f8ec31ab225cf13fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69ebf7e6cd5e19b9d64a76f8ec31ab225cf13fe", "html_url": "https://github.com/rust-lang/rust/commit/d69ebf7e6cd5e19b9d64a76f8ec31ab225cf13fe"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "148d11ee4d68748305d2003434b80fcbd82bd4d7", "filename": "tests/assembly/is_aligned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fis_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fis_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fis_aligned.rs?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: emit-asm\n // min-llvm-version: 15.0\n // only-x86_64\n+// ignore-sgx\n // revisions: opt-speed opt-size\n // [opt-speed] compile-flags: -Copt-level=1\n // [opt-size] compile-flags: -Copt-level=s"}, {"sha": "24a7c6b5bf101523d71e6d55b669ef76ad0cd78a", "filename": "tests/assembly/strict_provenance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fstrict_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fstrict_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fstrict_provenance.rs?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -1,6 +1,7 @@\n // assembly-output: emit-asm\n // compile-flags: -Copt-level=1\n // only-x86_64\n+// ignore-sgx\n // min-llvm-version: 15.0\n #![crate_type = \"rlib\"]\n "}, {"sha": "0bc6baad47919c5bc78d805d115e0308f1c76cd4", "filename": "tests/assembly/x86_64-floating-point-clamp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-floating-point-clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-floating-point-clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-floating-point-clamp.rs?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -4,6 +4,7 @@\n // assembly-output: emit-asm\n // compile-flags: --crate-type=lib -O -C llvm-args=-x86-asm-syntax=intel\n // only-x86_64\n+// ignore-sgx\n \n // CHECK-LABEL: clamp_demo:\n #[no_mangle]"}, {"sha": "7eb3c6948ac57aa51bd621d1f665521604be1a4d", "filename": "tests/assembly/x86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-generic-load.rs?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -11,7 +11,7 @@ pub extern fn plus_one(r: &mut u64) {\n \n // CHECK: plus_one\n // CHECK: lfence\n-// CHECK-NEXT: addq\n+// CHECK-NEXT: incq\n // CHECK: popq [[REGISTER:%[a-z]+]]\n // CHECK-NEXT: lfence\n // CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "4745ebc4fcd44a9aa6f77513e0b85e3279d0bb86", "filename": "tests/assembly/x86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-fortanix-unknown-sgx-lvi-inline-assembly.rs?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -10,34 +10,25 @@ use std::arch::asm;\n pub extern \"C\" fn get(ptr: *const u64) -> u64 {\n     let value: u64;\n     unsafe {\n-        asm!(\".start_inline_asm:\",\n-            \"mov {}, [{}]\",\n-            \".end_inline_asm:\",\n+        asm!(\"mov {}, [{}]\",\n             out(reg) value,\n             in(reg) ptr);\n     }\n     value\n }\n \n // CHECK: get\n-// CHECK: .start_inline_asm\n-// CHECK-NEXT: movq\n+// CHECK: movq\n // CHECK-NEXT: lfence\n-// CHECK-NEXT: .end_inline_asm\n \n #[no_mangle]\n pub extern \"C\" fn myret() {\n     unsafe {\n-        asm!(\n-            \".start_myret_inline_asm:\",\n-            \"ret\",\n-            \".end_myret_inline_asm:\",\n-        );\n+        asm!(\"ret\");\n     }\n }\n \n // CHECK: myret\n-// CHECK: .start_myret_inline_asm\n-// CHECK-NEXT: shlq $0, (%rsp)\n+// CHECK: shlq $0, (%rsp)\n // CHECK-NEXT: lfence\n // CHECK-NEXT: retq"}, {"sha": "edf4adaad41aa5a95eda9f1e383bf519ee7383c3", "filename": "tests/assembly/x86_64-no-jump-tables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-no-jump-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Fassembly%2Fx86_64-no-jump-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fx86_64-no-jump-tables.rs?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -6,6 +6,7 @@\n // compile-flags: -O\n // [set] compile-flags: -Zno-jump-tables\n // only-x86_64\n+// ignore-sgx\n \n #![crate_type = \"lib\"]\n "}, {"sha": "c6b71f5fbd49fd7f87c2b2f8e8986e65ee2f4216", "filename": "tests/run-make/issue-36710/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-36710%2FMakefile?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -4,6 +4,7 @@\n # ignore-nvptx64-nvidia-cuda FIXME: can't find crate for `std`\n # ignore-musl FIXME: this makefile needs teaching how to use a musl toolchain\n #                    (see dist-i586-gnu-i586-i686-musl Dockerfile)\n+# ignore-sgx\n \n include ../../run-make-fulldeps/tools.mk\n "}, {"sha": "af9bc8c1d62eeab231297d6e222b87c3ce9b9dfc", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/cc_plus_one_asm.checks", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fcc_plus_one_asm.checks?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -1,8 +1,7 @@\n CHECK: cc_plus_one_asm\n CHECK-NEXT: movl\n CHECK-NEXT: lfence\n-CHECK-NEXT: inc\n-CHECK-NEXT: notq (%rsp)\n-CHECK-NEXT: notq (%rsp)\n+CHECK-NEXT: incl\n+CHECK-NEXT: shlq $0, (%rsp)\n CHECK-NEXT: lfence\n CHECK-NEXT: retq"}, {"sha": "885bf461bf3d540ba25ab9f65ef8a0ecf81c39cf", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/jumpto.checks", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fjumpto.checks?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -1,8 +1,24 @@\n-CHECK: libunwind::Registers_x86_64::jumpto\n+CHECK: __libunwind_Registers_x86_64_jumpto\n CHECK:      lfence\n CHECK:      lfence\n CHECK:      lfence\n CHECK:      lfence\n-CHECK:      shlq    $0, (%rsp)\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK:      lfence\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n CHECK-NEXT: lfence\n-CHECK-NEXT: retq\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "8a5493650a72097abfdcc9337c5f70eb6fcf3a27", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/print.checks", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -2,6 +2,5 @@ CHECK: print\n CHECK:      lfence\n CHECK:      lfence\n CHECK:      lfence\n-CHECK:      popq\n CHECK:      callq 0x{{[[:xdigit:]]*}} <_Unwind_Resume>\n CHECK-NEXT: ud2"}, {"sha": "235bb603b842bd91b50b86d7fbaebe2f62c17959", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cfd8105f3f8a213af195f7eb2ad67824a5a872a9/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "patch": "@@ -20,39 +20,38 @@ function build {\n }\n \n function check {\n-    local func=$1\n+    local func_re=\"$1\"\n     local checks=\"${TEST_DIR}/$2\"\n     local asm=$(mktemp)\n-    local objdump=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-objdump\"\n-    local filecheck=\"${BUILD_DIR}/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck\"\n-\n-    ${objdump} --disassemble-symbols=${func} --demangle \\\n-      ${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave > ${asm}\n+    local objdump=\"${LLVM_BIN_DIR}/llvm-objdump\"\n+    local filecheck=\"${LLVM_BIN_DIR}/FileCheck\"\n+    local enclave=${WORK_DIR}/enclave/target/x86_64-fortanix-unknown-sgx/debug/enclave\n+\n+    func=\"$(${objdump} --syms --demangle ${enclave} | \\\n+            grep --only-matching -E \"[[:blank:]]+${func_re}\\$\" | \\\n+            sed -e 's/^[[:space:]]*//' )\"\n+    ${objdump} --disassemble-symbols=\"${func}\" --demangle \\\n+      ${enclave} > ${asm}\n     ${filecheck} --input-file ${asm} ${checks}\n }\n \n build\n \n-check unw_getcontext unw_getcontext.checks\n-check \"libunwind::Registers_x86_64::jumpto()\" jumpto.checks\n-check \"std::io::stdio::_print::h87f0c238421c45bc\" print.checks\n-check rust_plus_one_global_asm rust_plus_one_global_asm.checks \\\n-  || echo \"warning: module level assembly currently not hardened\"\n+check \"unw_getcontext\" unw_getcontext.checks\n+check \"__libunwind_Registers_x86_64_jumpto\" jumpto.checks\n+check 'std::io::stdio::_print::[[:alnum:]]+' print.checks\n+check rust_plus_one_global_asm rust_plus_one_global_asm.checks\n \n check cc_plus_one_c cc_plus_one_c.checks\n check cc_plus_one_c_asm cc_plus_one_c_asm.checks\n check cc_plus_one_cxx cc_plus_one_cxx.checks\n check cc_plus_one_cxx_asm cc_plus_one_cxx_asm.checks\n-check cc_plus_one_asm cc_plus_one_asm.checks \\\n-  || echo \"warning: the cc crate forwards assembly files to the CC compiler.\" \\\n-           \"Clang uses its own integrated assembler, which does not include the LVI passes.\"\n+check cc_plus_one_asm cc_plus_one_asm.checks\n \n check cmake_plus_one_c cmake_plus_one_c.checks\n check cmake_plus_one_c_asm cmake_plus_one_c_asm.checks\n-check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks \\\n-  || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_c_global_asm cmake_plus_one_c_global_asm.checks\n check cmake_plus_one_cxx cmake_plus_one_cxx.checks\n check cmake_plus_one_cxx_asm cmake_plus_one_cxx_asm.checks\n-check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks \\\n-  || echo \"warning: module level assembly currently not hardened\"\n+check cmake_plus_one_cxx_global_asm cmake_plus_one_cxx_global_asm.checks\n check cmake_plus_one_asm cmake_plus_one_asm.checks"}]}