{"sha": "a33939565d40590f92d113aa81c0fb9fd0e4fe55", "node_id": "C_kwDOAAsO6NoAKGEzMzkzOTU2NWQ0MDU5MGY5MmQxMTNhYTgxYzBmYjlmZDBlNGZlNTU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-30T17:12:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-30T17:12:37Z"}, "message": "Simplify", "tree": {"sha": "7c5859e6bca69124f1317b742dedde5d9e1dccd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5859e6bca69124f1317b742dedde5d9e1dccd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a33939565d40590f92d113aa81c0fb9fd0e4fe55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a33939565d40590f92d113aa81c0fb9fd0e4fe55", "html_url": "https://github.com/rust-lang/rust/commit/a33939565d40590f92d113aa81c0fb9fd0e4fe55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a33939565d40590f92d113aa81c0fb9fd0e4fe55/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529b7a4167aab91257da02277c00e5cba245babb", "url": "https://api.github.com/repos/rust-lang/rust/commits/529b7a4167aab91257da02277c00e5cba245babb", "html_url": "https://github.com/rust-lang/rust/commit/529b7a4167aab91257da02277c00e5cba245babb"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "b4331fc09f41b3da1e8f948cdd1a7d37be4984e0", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a33939565d40590f92d113aa81c0fb9fd0e4fe55/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33939565d40590f92d113aa81c0fb9fd0e4fe55/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=a33939565d40590f92d113aa81c0fb9fd0e4fe55", "patch": "@@ -197,7 +197,7 @@ fn traverse(\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n-    let mut current_attr_macro_call = None;\n+    let mut current_attr_call = None;\n     let mut current_macro: Option<ast::Macro> = None;\n     let mut macro_highlighter = MacroHighlighter::default();\n     let mut inside_attribute = false;\n@@ -236,7 +236,7 @@ fn traverse(\n                         },\n                         ast::Item(item) => {\n                             if sema.is_attr_macro_call(&item) {\n-                                current_attr_macro_call = Some(item);\n+                                current_attr_call = Some(item);\n                             }\n                         },\n                         ast::Attr(__) => inside_attribute = true,\n@@ -257,8 +257,8 @@ fn traverse(\n                             macro_highlighter = MacroHighlighter::default();\n                         },\n                         ast::Item(item) => {\n-                            if current_attr_macro_call == Some(item) {\n-                                current_attr_macro_call = None;\n+                            if current_attr_call == Some(item) {\n+                                current_attr_call = None;\n                             }\n                         },\n                         ast::Attr(__) => inside_attribute = false,\n@@ -287,34 +287,28 @@ fn traverse(\n             }\n         }\n \n-        let element_to_highlight = if current_macro_call.is_some() && element.kind() != COMMENT {\n+        let descend_token = (current_macro_call.is_some() || current_attr_call.is_some())\n+            && element.kind() != COMMENT;\n+        let element_to_highlight = if descend_token {\n             // Inside a macro -- expand it first\n             let token = match element.clone().into_token() {\n-                Some(it) if it.parent().map_or(false, |it| it.kind() == TOKEN_TREE) => it,\n-                _ => continue,\n-            };\n-            let token = sema.descend_into_macros(token.clone());\n-            match token.parent() {\n-                Some(parent) => {\n-                    // We only care Name and Name_ref\n-                    match (token.kind(), parent.kind()) {\n-                        (IDENT, NAME | NAME_REF) => parent.into(),\n-                        _ => token.into(),\n+                Some(it) if current_macro_call.is_some() => {\n+                    let not_in_tt = it.parent().map_or(true, |it| it.kind() != TOKEN_TREE);\n+                    if not_in_tt {\n+                        continue;\n                     }\n+                    it\n                 }\n-                None => token.into(),\n-            }\n-        } else if current_attr_macro_call.is_some() {\n-            let token = match element.clone().into_token() {\n                 Some(it) => it,\n                 _ => continue,\n             };\n-            let token = sema.descend_into_macros(token.clone());\n+            let token = sema.descend_into_macros(token);\n             match token.parent() {\n                 Some(parent) => {\n                     // We only care Name and Name_ref\n                     match (token.kind(), parent.kind()) {\n-                        (IDENT, NAME | NAME_REF) => parent.into(),\n+                        (T![ident], NAME | NAME_REF) => parent.into(),\n+                        (T![self] | T![super] | T![crate], NAME_REF) => parent.into(),\n                         _ => token.into(),\n                     }\n                 }\n@@ -324,11 +318,12 @@ fn traverse(\n             element.clone()\n         };\n \n-        if let Some(token) = element.as_token().cloned().and_then(ast::String::cast) {\n+        if let Some(token) = element.into_token().and_then(ast::String::cast) {\n             if token.is_raw() {\n-                let expanded = element_to_highlight.as_token().unwrap().clone();\n-                if inject::ra_fixture(hl, sema, token, expanded).is_some() {\n-                    continue;\n+                if let Some(expanded) = element_to_highlight.as_token() {\n+                    if inject::ra_fixture(hl, sema, token, expanded.clone()).is_some() {\n+                        continue;\n+                    }\n                 }\n             }\n         }\n@@ -351,7 +346,7 @@ fn traverse(\n             hl.add(HlRange { range, highlight, binding_hash });\n         }\n \n-        if let Some(string) = element_to_highlight.as_token().cloned().and_then(ast::String::cast) {\n+        if let Some(string) = element_to_highlight.into_token().and_then(ast::String::cast) {\n             highlight_format_string(hl, &string, range);\n             // Highlight escape sequences\n             if let Some(char_ranges) = string.char_ranges() {\n@@ -376,9 +371,8 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     let range_start = name_ref.syntax().text_range().start();\n     let mut range_end = name_ref.syntax().text_range().end();\n     for sibling in path.syntax().siblings_with_tokens(Direction::Next) {\n-        match sibling.kind() {\n-            T![!] | IDENT => range_end = sibling.text_range().end(),\n-            _ => (),\n+        if let T![!] | T![ident] = sibling.kind() {\n+            range_end = sibling.text_range().end();\n         }\n     }\n "}]}