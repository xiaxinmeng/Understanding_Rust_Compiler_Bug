{"sha": "c236c241e66c786f1d585aec62744d4995b6227b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMzZjMjQxZTY2Yzc4NmYxZDU4NWFlYzYyNzQ0ZDQ5OTViNjIyN2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:19:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:20:01Z"}, "message": "Handle const generics in typeck\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "972a48a222a5f341bea5b800191ee16a75324fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972a48a222a5f341bea5b800191ee16a75324fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c236c241e66c786f1d585aec62744d4995b6227b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c236c241e66c786f1d585aec62744d4995b6227b", "html_url": "https://github.com/rust-lang/rust/commit/c236c241e66c786f1d585aec62744d4995b6227b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c236c241e66c786f1d585aec62744d4995b6227b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e56729b4da52c56c51bbabf35c3999578d0b098", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e56729b4da52c56c51bbabf35c3999578d0b098", "html_url": "https://github.com/rust-lang/rust/commit/8e56729b4da52c56c51bbabf35c3999578d0b098"}], "stats": {"total": 104, "additions": 87, "deletions": 17}, "files": [{"sha": "f7396cbd42f2ff87ecc0e3a3b4a6f68f40ab3bef", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -99,11 +99,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let substs = base_substs.extend_to(self.tcx,expr_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n-                    span_bug!(expr.span, \"closure has region param\")\n+                    span_bug!(expr.span, \"closure has lifetime param\")\n                 }\n-                GenericParamDefKind::Type {..} => {\n-                    self.infcx\n-                        .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)).into()\n+                GenericParamDefKind::Type { .. } => {\n+                    self.infcx.next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)).into()\n+                }\n+                GenericParamDefKind::Const => {\n+                    span_bug!(expr.span, \"closure has const param\")\n                 }\n             }\n         });"}, {"sha": "2184555a07d34e19c7892f392ab32af1bc4de623", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -313,6 +313,9 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n         match kind.unpack() {\n             UnpackedKind::Lifetime(r) => rcx.sub_regions(origin(), parent_scope, r),\n             UnpackedKind::Type(ty) => rcx.type_must_outlive(origin(), ty, parent_scope),\n+            UnpackedKind::Const(_) => {\n+                // Generic consts don't add constraints.\n+            }\n         }\n     }\n     Ok(())"}, {"sha": "e0b96ae884f3a7e7d2b496d8128ca4744c1191c2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -341,6 +341,9 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.to_ty(ty).into()\n                     }\n+                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                        self.to_const(&ct.value, self.tcx.type_of(param.def_id)).into()\n+                    }\n                     _ => unreachable!(),\n                 }\n             },"}, {"sha": "8f27b5b7dc81f746f4048976ebcef9c66534464b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -283,8 +283,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Construct a trait-reference `self_ty : Trait<input_tys>`\n         let substs = InternalSubsts::for_item(self.tcx, trait_def_id, |param, _| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Type {..} => {\n+                GenericParamDefKind::Lifetime | GenericParamDefKind::Const => {}\n+                GenericParamDefKind::Type { .. } => {\n                     if param.index == 0 {\n                         return self_ty.into();\n                     } else if let Some(ref input_types) = opt_input_types {"}, {"sha": "efae870c3c3a9a8dc93ef663cee3f3026c05fe2a", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -1528,7 +1528,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                             // `impl_self_ty()` for an explanation.\n                             self.tcx.types.re_erased.into()\n                         }\n-                        GenericParamDefKind::Type {..} => self.var_for_def(self.span, param),\n+                        GenericParamDefKind::Type { .. }\n+                        | GenericParamDefKind::Const => {\n+                            self.var_for_def(self.span, param)\n+                        }\n                     }\n                 }\n             });\n@@ -1545,10 +1548,13 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         InternalSubsts::for_item(self.tcx, def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.tcx.types.re_erased.into(),\n-                GenericParamDefKind::Type {..} => {\n+                GenericParamDefKind::Type { .. } => {\n                     self.next_ty_var(TypeVariableOrigin::SubstitutionPlaceholder(\n                         self.tcx.def_span(def_id))).into()\n                 }\n+                GenericParamDefKind::Const { .. } => {\n+                    unimplemented!() // FIXME(const_generics)\n+                }\n             }\n         })\n     }"}, {"sha": "301d7d3ac5623f61cca545cf4bc920bb7ff171a5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -2437,6 +2437,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    pub fn to_const(&self, ast_c: &hir::AnonConst, ty: Ty<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n+        AstConv::ast_const_to_const(self, ast_c, ty)\n+    }\n+\n     // If the type given by the user has free regions, save it for later, since\n     // NLL would like to enforce those. Also pass in types that involve\n     // projections, since those can resolve to `'static` bounds (modulo #54940,\n@@ -5501,6 +5505,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.to_ty(ty).into()\n                     }\n+                    (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n+                        self.to_const(&ct.value, self.tcx.type_of(param.def_id)).into()\n+                    }\n                     _ => unreachable!(),\n                 }\n             },\n@@ -5528,6 +5535,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             self.var_for_def(span, param)\n                         }\n                     }\n+                    GenericParamDefKind::Const => {\n+                        // FIXME(const_generics:defaults)\n+                        // No const parameters were provided, we have to infer them.\n+                        self.var_for_def(span, param)\n+                    }\n                 }\n             },\n         );\n@@ -5685,11 +5697,19 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        generics: &ty::Generics,\n                                        ty: Ty<'tcx>) {\n     let own_counts = generics.own_counts();\n-    debug!(\"check_bounds_are_used(n_tps={}, ty={:?})\", own_counts.types, ty);\n+    debug!(\n+        \"check_bounds_are_used(n_tys={}, n_cts={}, ty={:?})\",\n+        own_counts.types,\n+        own_counts.consts,\n+        ty\n+    );\n+\n+    // FIXME(const_generics): we probably want to check the bounds for const parameters too.\n \n     if own_counts.types == 0 {\n         return;\n     }\n+\n     // Make a vector of booleans initially false, set to true when used.\n     let mut types_used = vec![false; own_counts.types];\n "}, {"sha": "4b922c3403886c5e851f144c44c5028e283cf350", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -1,6 +1,7 @@\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FxHashSet;\n+use rustc::mir::interpret::ConstValue;\n use syntax::source_map::Span;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n@@ -14,6 +15,10 @@ impl From<ty::EarlyBoundRegion> for Parameter {\n     fn from(param: ty::EarlyBoundRegion) -> Self { Parameter(param.index) }\n }\n \n+impl From<ty::ParamConst> for Parameter {\n+    fn from(param: ty::ParamConst) -> Self { Parameter(param.index) }\n+}\n+\n /// Returns the set of parameters constrained by the impl header.\n pub fn parameters_for_impl<'tcx>(impl_self_ty: Ty<'tcx>,\n                                  impl_trait_ref: Option<ty::TraitRef<'tcx>>)\n@@ -72,6 +77,16 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         }\n         false\n     }\n+\n+    fn visit_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> bool {\n+        if let ty::LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Param(data),\n+            ..\n+        }) = c {\n+            self.parameters.push(Parameter::from(*data));\n+        }\n+        false\n+    }\n }\n \n pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,"}, {"sha": "5677f2c94d8e26f6402a6cfbbd84fc06d02b22ce", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -120,7 +120,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for param in &impl_generics.params {\n         match param.kind {\n             // Disallow ANY unconstrained type parameters.\n-            ty::GenericParamDefKind::Type {..} => {\n+            ty::GenericParamDefKind::Type { .. } => {\n                 let param_ty = ty::ParamTy::for_def(param);\n                 if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n                     report_unused_parameter(tcx,\n@@ -139,6 +139,15 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             &param.name.to_string());\n                 }\n             }\n+            ty::GenericParamDefKind::Const => {\n+                let param_ct = ty::ParamConst::for_def(param);\n+                if !input_parameters.contains(&ctp::Parameter::from(param_ct)) {\n+                    report_unused_parameter(tcx,\n+                                           tcx.def_span(param.def_id),\n+                                           \"const\",\n+                                           &param_ct.to_string());\n+                }\n+            }\n         }\n     }\n "}, {"sha": "1ab414c1f015f292ae3a5172260713a7d3bca018", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -98,14 +98,22 @@ fn inferred_outlives_crate<'tcx>(\n         .map(|(&def_id, set)| {\n             let vec: Vec<ty::Predicate<'tcx>> = set\n                 .iter()\n-                .map(\n+                .filter_map(\n                     |ty::OutlivesPredicate(kind1, region2)| match kind1.unpack() {\n-                        UnpackedKind::Type(ty1) => ty::Predicate::TypeOutlives(ty::Binder::bind(\n-                            ty::OutlivesPredicate(ty1, region2),\n-                        )),\n-                        UnpackedKind::Lifetime(region1) => ty::Predicate::RegionOutlives(\n-                            ty::Binder::bind(ty::OutlivesPredicate(region1, region2)),\n-                        ),\n+                        UnpackedKind::Type(ty1) => {\n+                            Some(ty::Predicate::TypeOutlives(ty::Binder::bind(\n+                                ty::OutlivesPredicate(ty1, region2)\n+                            )))\n+                        }\n+                        UnpackedKind::Lifetime(region1) => {\n+                            Some(ty::Predicate::RegionOutlives(\n+                                ty::Binder::bind(ty::OutlivesPredicate(region1, region2))\n+                            ))\n+                        }\n+                        UnpackedKind::Const(_) => {\n+                            // Generic consts don't impose any constraints.\n+                            None\n+                        }\n                     },\n                 ).collect();\n             (def_id, Lrc::new(vec))"}, {"sha": "ee552ca9cbb251c669eb5c518c528fcc2be44efb", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c236c241e66c786f1d585aec62744d4995b6227b/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=c236c241e66c786f1d585aec62744d4995b6227b", "patch": "@@ -118,6 +118,10 @@ pub fn insert_outlives_predicate<'tcx>(\n             }\n             required_predicates.insert(ty::OutlivesPredicate(kind, outlived_region));\n         }\n+\n+        UnpackedKind::Const(_) => {\n+            // Generic consts don't impose any constraints.\n+        }\n     }\n }\n "}]}