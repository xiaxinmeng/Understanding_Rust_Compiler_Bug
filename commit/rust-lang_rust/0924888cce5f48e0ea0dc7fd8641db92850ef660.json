{"sha": "0924888cce5f48e0ea0dc7fd8641db92850ef660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MjQ4ODhjY2U1ZjQ4ZTBlYTBkYzdmZDg2NDFkYjkyODUwZWY2NjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-04T15:42:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T15:42:19Z"}, "message": "Merge #8325\n\n8325: Check if bitflags deps pulls its weight r=jonas-schievink a=matklad\n\nBitflags is generally a good dependency -- it's lightweight, well\r\nmaintained and embraced by the ecosystem.\r\n\r\nI wonder, however, do we really need it? Doesn't feel like it adds much\r\nto be honest.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1507aa873ea92a69b3df4ce2d4f51b0c9191c774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1507aa873ea92a69b3df4ce2d4f51b0c9191c774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0924888cce5f48e0ea0dc7fd8641db92850ef660", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgad5bCRBK7hj4Ov3rIwAAdHIIADk1G69Iu5jj23wQ3sBemR6o\naIS0FUpwiaeiOzYdX37dTou5HsFjuzzHwrU5/HPftojGVumXzfufZcWdGYyJIn2n\n8YN68b07Yo7FuxYCI7ZCSuAOdOcwgQBsMKHUp6ioeCgjIJRO0iHIWt3+zQlc6BRu\n6XkslYGZI3FXsD3ex9DmowVaNcdZuhPtxXMbn/GFJPWD7riNCXU2uQBrQj4bngKw\nHUaG6lVxOvvL8J4NtdK6JrF+UaNNYALlPxwHYLCbYlz8XOhC3am/V7oQadxAs3zC\no2Wx07MZxurfGEzGKekta187uKyZI5TcLbjrT8CBd8tFyZqfPgJ12PHNxHzGtcc=\n=NBV4\n-----END PGP SIGNATURE-----\n", "payload": "tree 1507aa873ea92a69b3df4ce2d4f51b0c9191c774\nparent bc8b27884132a4dbfa019f7d3d5fcbbf9f4912af\nparent d1474ae51806cd5382c988fac1cf70a7f2718f4a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617550939 +0000\ncommitter GitHub <noreply@github.com> 1617550939 +0000\n\nMerge #8325\n\n8325: Check if bitflags deps pulls its weight r=jonas-schievink a=matklad\n\nBitflags is generally a good dependency -- it's lightweight, well\r\nmaintained and embraced by the ecosystem.\r\n\r\nI wonder, however, do we really need it? Doesn't feel like it adds much\r\nto be honest.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0924888cce5f48e0ea0dc7fd8641db92850ef660", "html_url": "https://github.com/rust-lang/rust/commit/0924888cce5f48e0ea0dc7fd8641db92850ef660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0924888cce5f48e0ea0dc7fd8641db92850ef660/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8b27884132a4dbfa019f7d3d5fcbbf9f4912af", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8b27884132a4dbfa019f7d3d5fcbbf9f4912af", "html_url": "https://github.com/rust-lang/rust/commit/bc8b27884132a4dbfa019f7d3d5fcbbf9f4912af"}, {"sha": "d1474ae51806cd5382c988fac1cf70a7f2718f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1474ae51806cd5382c988fac1cf70a7f2718f4a", "html_url": "https://github.com/rust-lang/rust/commit/d1474ae51806cd5382c988fac1cf70a7f2718f4a"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "05383d8b7e465621feebc2fa27bdbb2082625f1d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924888cce5f48e0ea0dc7fd8641db92850ef660/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0924888cce5f48e0ea0dc7fd8641db92850ef660/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0924888cce5f48e0ea0dc7fd8641db92850ef660", "patch": "@@ -498,7 +498,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"anymap\",\n  \"base_db\",\n- \"bitflags\",\n  \"cfg\",\n  \"cov-mark\",\n  \"dashmap\","}, {"sha": "43324d8d9b160319a3c6c725383c429db3e12e5d", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=0924888cce5f48e0ea0dc7fd8641db92850ef660", "patch": "@@ -10,7 +10,6 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-bitflags = \"1.2.1\"\n cov-mark = { version = \"1.1\", features = [\"thread-local\"] }\n dashmap = { version = \"4.0.2\", features = [\"raw-api\"] }\n log = \"0.4.8\""}, {"sha": "135a6698e15273411ad785be078c6bc50c2eb67f", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=0924888cce5f48e0ea0dc7fd8641db92850ef660", "patch": "@@ -50,7 +50,7 @@ impl FunctionData {\n \n         let mut flags = func.flags;\n         if is_varargs {\n-            flags |= FnFlags::IS_VARARGS;\n+            flags.bits |= FnFlags::IS_VARARGS;\n         }\n \n         Arc::new(FunctionData {\n@@ -71,37 +71,37 @@ impl FunctionData {\n     }\n \n     pub fn has_body(&self) -> bool {\n-        self.flags.contains(FnFlags::HAS_BODY)\n+        self.flags.bits & FnFlags::HAS_BODY != 0\n     }\n \n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n     pub fn has_self_param(&self) -> bool {\n-        self.flags.contains(FnFlags::HAS_SELF_PARAM)\n+        self.flags.bits & FnFlags::HAS_SELF_PARAM != 0\n     }\n \n     pub fn is_default(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_DEFAULT)\n+        self.flags.bits & FnFlags::IS_DEFAULT != 0\n     }\n \n     pub fn is_const(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_CONST)\n+        self.flags.bits & FnFlags::IS_CONST != 0\n     }\n \n     pub fn is_async(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_ASYNC)\n+        self.flags.bits & FnFlags::IS_ASYNC != 0\n     }\n \n     pub fn is_unsafe(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_UNSAFE)\n+        self.flags.bits & FnFlags::IS_UNSAFE != 0\n     }\n \n     pub fn is_in_extern_block(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_IN_EXTERN_BLOCK)\n+        self.flags.bits & FnFlags::IS_IN_EXTERN_BLOCK != 0\n     }\n \n     pub fn is_varargs(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_VARARGS)\n+        self.flags.bits & FnFlags::IS_VARARGS != 0\n     }\n }\n "}, {"sha": "739906778f97ecc8f49f5a29b6cf117d00e21463", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=0924888cce5f48e0ea0dc7fd8641db92850ef660", "patch": "@@ -569,20 +569,21 @@ pub enum Param {\n     Varargs,\n }\n \n-bitflags::bitflags! {\n-    /// NOTE: Shared with `FunctionData`\n-    pub(crate) struct FnFlags: u8 {\n-        const HAS_SELF_PARAM = 1 << 0;\n-        const HAS_BODY = 1 << 1;\n-        const IS_DEFAULT = 1 << 2;\n-        const IS_CONST = 1 << 3;\n-        const IS_ASYNC = 1 << 4;\n-        const IS_UNSAFE = 1 << 5;\n-        /// Whether the function is located in an `extern` block (*not* whether it is an\n-        /// `extern \"abi\" fn`).\n-        const IS_IN_EXTERN_BLOCK = 1 << 6;\n-        const IS_VARARGS = 1 << 7;\n-    }\n+#[derive(Debug, Clone, Copy, Eq, PartialEq, Default)]\n+pub(crate) struct FnFlags {\n+    pub(crate) bits: u8,\n+}\n+impl FnFlags {\n+    pub(crate) const HAS_SELF_PARAM: u8 = 1 << 0;\n+    pub(crate) const HAS_BODY: u8 = 1 << 1;\n+    pub(crate) const IS_DEFAULT: u8 = 1 << 2;\n+    pub(crate) const IS_CONST: u8 = 1 << 3;\n+    pub(crate) const IS_ASYNC: u8 = 1 << 4;\n+    pub(crate) const IS_UNSAFE: u8 = 1 << 5;\n+    /// Whether the function is located in an `extern` block (*not* whether it is an\n+    /// `extern \"abi\" fn`).\n+    pub(crate) const IS_IN_EXTERN_BLOCK: u8 = 1 << 6;\n+    pub(crate) const IS_VARARGS: u8 = 1 << 7;\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "ab7ad8310203d3e1d7543677662d0c5e78a3a27d", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0924888cce5f48e0ea0dc7fd8641db92850ef660/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=0924888cce5f48e0ea0dc7fd8641db92850ef660", "patch": "@@ -411,24 +411,24 @@ impl Ctx {\n \n         let ast_id = self.source_ast_id_map.ast_id(func);\n \n-        let mut flags = FnFlags::empty();\n+        let mut flags = FnFlags::default();\n         if func.body().is_some() {\n-            flags |= FnFlags::HAS_BODY;\n+            flags.bits |= FnFlags::HAS_BODY;\n         }\n         if has_self_param {\n-            flags |= FnFlags::HAS_SELF_PARAM;\n+            flags.bits |= FnFlags::HAS_SELF_PARAM;\n         }\n         if func.default_token().is_some() {\n-            flags |= FnFlags::IS_DEFAULT;\n+            flags.bits |= FnFlags::IS_DEFAULT;\n         }\n         if func.const_token().is_some() {\n-            flags |= FnFlags::IS_CONST;\n+            flags.bits |= FnFlags::IS_CONST;\n         }\n         if func.async_token().is_some() {\n-            flags |= FnFlags::IS_ASYNC;\n+            flags.bits |= FnFlags::IS_ASYNC;\n         }\n         if func.unsafe_token().is_some() {\n-            flags |= FnFlags::IS_UNSAFE;\n+            flags.bits |= FnFlags::IS_UNSAFE;\n         }\n \n         let mut res = Function {\n@@ -653,9 +653,9 @@ impl Ctx {\n                             let func_id = self.lower_function(&ast)?;\n                             let func = &mut self.data().functions[func_id.index];\n                             if is_intrinsic_fn_unsafe(&func.name) {\n-                                func.flags |= FnFlags::IS_UNSAFE;\n+                                func.flags.bits |= FnFlags::IS_UNSAFE;\n                             }\n-                            func.flags |= FnFlags::IS_IN_EXTERN_BLOCK;\n+                            func.flags.bits |= FnFlags::IS_IN_EXTERN_BLOCK;\n                             func_id.into()\n                         }\n                         ast::ExternItem::Static(ast) => {"}]}