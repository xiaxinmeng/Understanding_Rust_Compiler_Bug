{"sha": "4127c230f086e48cb3214279ef02d3bb15d16cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMjdjMjMwZjA4NmU0OGNiMzIxNDI3OWVmMDJkM2JiMTVkMTZjZGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-11-03T08:25:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-03T08:25:29Z"}, "message": "Merge pull request #2168 from cgm616/master\n\nPrevent linting should_implement_trait on private methods", "tree": {"sha": "2e5f80f41165058a2440b742d249c5543a573af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5f80f41165058a2440b742d249c5543a573af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4127c230f086e48cb3214279ef02d3bb15d16cdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ/Cf5CRBK7hj4Ov3rIwAAdHIIAGfPVhgIY/0YcskWeAf+4k6i\nFipqZCfBd3OCVK73CUB5bGNZMFLAD1ffsibfakhjLSh/k+9FPYNJR/NoDW1p0cva\n6Rk4DKMundUK5y6s42CbLpsU9KRgFjg7wEEP5TxAmqy1ADJHhFSoIvsk0+ydMATi\nHihvbVxXgYrv2dpbJVmKLpEJUaNhoFj+sK5RMgOnsyQjQ0NjcDIgaeL+RAxwKBpT\nHcWFdD/I7yfkWveP3br85pyWZD4QuN2ygO1UukM+QRKMcG/yiIAZX6qQUfgSBDPT\nMYTR3gBOVF5vb6LSOq5qG/0yhd7AG6qz4oAhFqdIClke8Jvs06QJ05MO9mh70Og=\n=556w\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e5f80f41165058a2440b742d249c5543a573af1\nparent 47be6927239cc8dabeb59764581fc4ac73327f22\nparent 3902b836e742e1e914218b1178244dfe2fdb4c84\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1509697529 +0100\ncommitter GitHub <noreply@github.com> 1509697529 +0100\n\nMerge pull request #2168 from cgm616/master\n\nPrevent linting should_implement_trait on private methods"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4127c230f086e48cb3214279ef02d3bb15d16cdc", "html_url": "https://github.com/rust-lang/rust/commit/4127c230f086e48cb3214279ef02d3bb15d16cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4127c230f086e48cb3214279ef02d3bb15d16cdc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47be6927239cc8dabeb59764581fc4ac73327f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/47be6927239cc8dabeb59764581fc4ac73327f22", "html_url": "https://github.com/rust-lang/rust/commit/47be6927239cc8dabeb59764581fc4ac73327f22"}, {"sha": "3902b836e742e1e914218b1178244dfe2fdb4c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/3902b836e742e1e914218b1178244dfe2fdb4c84", "html_url": "https://github.com/rust-lang/rust/commit/3902b836e742e1e914218b1178244dfe2fdb4c84"}], "stats": {"total": 397, "additions": 201, "deletions": 196}, "files": [{"sha": "4f55162e57fa2b3c4934dcb987cbe07e3b73f822", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4127c230f086e48cb3214279ef02d3bb15d16cdc/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4127c230f086e48cb3214279ef02d3bb15d16cdc/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=4127c230f086e48cb3214279ef02d3bb15d16cdc", "patch": "@@ -760,15 +760,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir.body(id)).next();\n             if let hir::ItemImpl(_, _, _, _, None, ref self_ty, _) = item.node;\n             then {\n+                if cx.access_levels.is_exported(implitem.id) {\n                 // check missing trait implementations\n-                for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n-                    if name == method_name &&\n-                       sig.decl.inputs.len() == n_args &&\n-                       out_type.matches(&sig.decl.output) &&\n-                       self_kind.matches(first_arg_ty, first_arg, self_ty, false, &implitem.generics) {\n-                        span_lint(cx, SHOULD_IMPLEMENT_TRAIT, implitem.span, &format!(\n-                            \"defining a method called `{}` on this type; consider implementing \\\n-                             the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n+                    for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n+                        if name == method_name &&\n+                        sig.decl.inputs.len() == n_args &&\n+                        out_type.matches(&sig.decl.output) &&\n+                        self_kind.matches(first_arg_ty, first_arg, self_ty, false, &implitem.generics) {\n+                            span_lint(cx, SHOULD_IMPLEMENT_TRAIT, implitem.span, &format!(\n+                                \"defining a method called `{}` on this type; consider implementing \\\n+                                the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n+                        }\n                     }\n                 }\n     "}, {"sha": "6ecb3963154688353278132b8cc45fcb07769936", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4127c230f086e48cb3214279ef02d3bb15d16cdc/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4127c230f086e48cb3214279ef02d3bb15d16cdc/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=4127c230f086e48cb3214279ef02d3bb15d16cdc", "patch": "@@ -14,11 +14,14 @@ use std::iter::FromIterator;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n-struct T;\n+pub struct T;\n \n impl T {\n-    fn add(self, other: T) -> T { self }\n-    fn drop(&mut self) { }\n+    pub fn add(self, other: T) -> T { self }\n+\n+    pub(crate) fn drop(&mut self) { } // no error, not public interfact\n+    fn neg(self) -> Self { self } // no error, private function\n+    fn eq(&self, other: T) -> bool { true } // no error, private function\n \n     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n     fn div(self) -> T { self } // no error, different #arguments"}, {"sha": "469f81c657a807fd40a18e121f2f9d6a57b08cb6", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 185, "deletions": 185, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/4127c230f086e48cb3214279ef02d3bb15d16cdc/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4127c230f086e48cb3214279ef02d3bb15d16cdc/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=4127c230f086e48cb3214279ef02d3bb15d16cdc", "patch": "@@ -1,503 +1,503 @@\n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:20:25\n+  --> $DIR/methods.rs:20:29\n    |\n-20 |     fn add(self, other: T) -> T { self }\n-   |                         ^ help: use the applicable keyword: `Self`\n+20 |     pub fn add(self, other: T) -> T { self }\n+   |                             ^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:20:31\n+  --> $DIR/methods.rs:20:35\n    |\n-20 |     fn add(self, other: T) -> T { self }\n-   |                               ^ help: use the applicable keyword: `Self`\n+20 |     pub fn add(self, other: T) -> T { self }\n+   |                                   ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:23:26\n+  --> $DIR/methods.rs:24:25\n    |\n-23 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+24 |     fn eq(&self, other: T) -> bool { true } // no error, private function\n+   |                         ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:26:26\n+   |\n+26 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n    |                          ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:23:33\n+  --> $DIR/methods.rs:26:33\n    |\n-23 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+26 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n    |                                 ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:24:21\n+  --> $DIR/methods.rs:27:21\n    |\n-24 |     fn div(self) -> T { self } // no error, different #arguments\n+27 |     fn div(self) -> T { self } // no error, different #arguments\n    |                     ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:25:25\n+  --> $DIR/methods.rs:28:25\n    |\n-25 |     fn rem(self, other: T) { } // no error, wrong return type\n+28 |     fn rem(self, other: T) { } // no error, wrong return type\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n   --> $DIR/methods.rs:20:5\n    |\n-20 |     fn add(self, other: T) -> T { self }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+20 |     pub fn add(self, other: T) -> T { self }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D should-implement-trait` implied by `-D warnings`\n \n-error: defining a method called `drop` on this type; consider implementing the `std::ops::Drop` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:21:5\n-   |\n-21 |     fn drop(&mut self) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:28:17\n+  --> $DIR/methods.rs:31:17\n    |\n-28 |     fn into_u16(&self) -> u16 { 0 }\n+31 |     fn into_u16(&self) -> u16 { 0 }\n    |                 ^^^^^\n    |\n    = note: `-D wrong-self-convention` implied by `-D warnings`\n \n error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:30:21\n+  --> $DIR/methods.rs:33:21\n    |\n-30 |     fn to_something(self) -> u32 { 0 }\n+33 |     fn to_something(self) -> u32 { 0 }\n    |                     ^^^^\n \n error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:32:12\n+  --> $DIR/methods.rs:35:12\n    |\n-32 |     fn new(self) {}\n+35 |     fn new(self) {}\n    |            ^^^^\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:32:5\n+  --> $DIR/methods.rs:35:5\n    |\n-32 |     fn new(self) {}\n+35 |     fn new(self) {}\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:76:24\n+  --> $DIR/methods.rs:79:24\n    |\n-76 |     fn new() -> Option<V<T>> { None }\n+79 |     fn new() -> Option<V<T>> { None }\n    |                        ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:80:19\n+  --> $DIR/methods.rs:83:19\n    |\n-80 |     type Output = T;\n+83 |     type Output = T;\n    |                   ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:81:25\n+  --> $DIR/methods.rs:84:25\n    |\n-81 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+84 |     fn mul(self, other: T) -> T { self } // no error, obviously\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:81:31\n+  --> $DIR/methods.rs:84:31\n    |\n-81 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+84 |     fn mul(self, other: T) -> T { self } // no error, obviously\n    |                               ^ help: use the applicable keyword: `Self`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:100:13\n+   --> $DIR/methods.rs:103:13\n     |\n-100 |       let _ = opt.map(|x| x + 1)\n+103 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-101 | |\n-102 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+104 | |\n+105 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n     | |____________________________^\n     |\n     = note: `-D option-map-unwrap-or` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:104:13\n+   --> $DIR/methods.rs:107:13\n     |\n-104 |       let _ = opt.map(|x| {\n+107 |       let _ = opt.map(|x| {\n     |  _____________^\n-105 | |                         x + 1\n-106 | |                     }\n-107 | |               ).unwrap_or(0);\n+108 | |                         x + 1\n+109 | |                     }\n+110 | |               ).unwrap_or(0);\n     | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:108:13\n+   --> $DIR/methods.rs:111:13\n     |\n-108 |       let _ = opt.map(|x| x + 1)\n+111 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-109 | |                .unwrap_or({\n-110 | |                     0\n-111 | |                 });\n+112 | |                .unwrap_or({\n+113 | |                     0\n+114 | |                 });\n     | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:113:13\n+   --> $DIR/methods.rs:116:13\n     |\n-113 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n+116 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:115:13\n+   --> $DIR/methods.rs:118:13\n     |\n-115 |       let _ = opt.map(|x| {\n+118 |       let _ = opt.map(|x| {\n     |  _____________^\n-116 | |         Some(x + 1)\n-117 | |     }\n-118 | |     ).unwrap_or(None);\n+119 | |         Some(x + 1)\n+120 | |     }\n+121 | |     ).unwrap_or(None);\n     | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:119:13\n+   --> $DIR/methods.rs:122:13\n     |\n-119 |       let _ = opt\n+122 |       let _ = opt\n     |  _____________^\n-120 | |         .map(|x| Some(x + 1))\n-121 | |         .unwrap_or(None);\n+123 | |         .map(|x| Some(x + 1))\n+124 | |         .unwrap_or(None);\n     | |________________________^\n     |\n     = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:127:13\n+   --> $DIR/methods.rs:130:13\n     |\n-127 |       let _ = opt.map(|x| x + 1)\n+130 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-128 | |\n-129 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+131 | |\n+132 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     | |____________________________________^\n     |\n     = note: `-D option-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:131:13\n+   --> $DIR/methods.rs:134:13\n     |\n-131 |       let _ = opt.map(|x| {\n+134 |       let _ = opt.map(|x| {\n     |  _____________^\n-132 | |                         x + 1\n-133 | |                     }\n-134 | |               ).unwrap_or_else(|| 0);\n+135 | |                         x + 1\n+136 | |                     }\n+137 | |               ).unwrap_or_else(|| 0);\n     | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:135:13\n+   --> $DIR/methods.rs:138:13\n     |\n-135 |       let _ = opt.map(|x| x + 1)\n+138 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-136 | |                .unwrap_or_else(||\n-137 | |                     0\n-138 | |                 );\n+139 | |                .unwrap_or_else(||\n+140 | |                     0\n+141 | |                 );\n     | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:144:13\n+   --> $DIR/methods.rs:147:13\n     |\n-144 |     let _ = opt.map_or(None, |x| Some(x + 1));\n+147 |     let _ = opt.map_or(None, |x| Some(x + 1));\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n     |\n     = note: `-D option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:146:13\n+   --> $DIR/methods.rs:149:13\n     |\n-146 |       let _ = opt.map_or(None, |x| {\n+149 |       let _ = opt.map_or(None, |x| {\n     |  _____________^\n-147 | |                         Some(x + 1)\n-148 | |                        }\n-149 | |                 );\n+150 | |                         Some(x + 1)\n+151 | |                        }\n+152 | |                 );\n     | |_________________^\n     |\n help: try using and_then instead\n     |\n-146 |     let _ = opt.and_then(|x| {\n-147 |                         Some(x + 1)\n-148 |                        });\n+149 |     let _ = opt.and_then(|x| {\n+150 |                         Some(x + 1)\n+151 |                        });\n     |\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:159:13\n+   --> $DIR/methods.rs:162:13\n     |\n-159 |       let _ = res.map(|x| x + 1)\n+162 |       let _ = res.map(|x| x + 1)\n     |  _____________^\n-160 | |\n-161 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+163 | |\n+164 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n     | |_____________________________________^\n     |\n     = note: `-D result-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:163:13\n+   --> $DIR/methods.rs:166:13\n     |\n-163 |       let _ = res.map(|x| {\n+166 |       let _ = res.map(|x| {\n     |  _____________^\n-164 | |                         x + 1\n-165 | |                     }\n-166 | |               ).unwrap_or_else(|e| 0);\n+167 | |                         x + 1\n+168 | |                     }\n+169 | |               ).unwrap_or_else(|e| 0);\n     | |_____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:167:13\n+   --> $DIR/methods.rs:170:13\n     |\n-167 |       let _ = res.map(|x| x + 1)\n+170 |       let _ = res.map(|x| x + 1)\n     |  _____________^\n-168 | |                .unwrap_or_else(|e|\n-169 | |                     0\n-170 | |                 );\n+171 | |                .unwrap_or_else(|e|\n+172 | |                     0\n+173 | |                 );\n     | |_________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:196:24\n+   --> $DIR/methods.rs:199:24\n     |\n-196 |     fn filter(self) -> IteratorFalsePositives {\n+199 |     fn filter(self) -> IteratorFalsePositives {\n     |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:200:22\n+   --> $DIR/methods.rs:203:22\n     |\n-200 |     fn next(self) -> IteratorFalsePositives {\n+203 |     fn next(self) -> IteratorFalsePositives {\n     |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:220:32\n+   --> $DIR/methods.rs:223:32\n     |\n-220 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+223 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:230:13\n+   --> $DIR/methods.rs:233:13\n     |\n-230 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+233 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:233:13\n+   --> $DIR/methods.rs:236:13\n     |\n-233 |       let _ = v.iter().filter(|&x| {\n+236 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-234 | |                                 *x < 0\n-235 | |                             }\n-236 | |                    ).next();\n+237 | |                                 *x < 0\n+238 | |                             }\n+239 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:248:13\n+   --> $DIR/methods.rs:251:13\n     |\n-248 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+251 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:251:13\n+   --> $DIR/methods.rs:254:13\n     |\n-251 |       let _ = v.iter().find(|&x| {\n+254 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-252 | |                               *x < 0\n-253 | |                           }\n-254 | |                    ).is_some();\n+255 | |                               *x < 0\n+256 | |                           }\n+257 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:257:13\n+   --> $DIR/methods.rs:260:13\n     |\n-257 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+260 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:260:13\n+   --> $DIR/methods.rs:263:13\n     |\n-260 |       let _ = v.iter().position(|&x| {\n+263 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-261 | |                                   x < 0\n-262 | |                               }\n-263 | |                    ).is_some();\n+264 | |                                   x < 0\n+265 | |                               }\n+266 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:266:13\n+   --> $DIR/methods.rs:269:13\n     |\n-266 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+269 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:269:13\n+   --> $DIR/methods.rs:272:13\n     |\n-269 |       let _ = v.iter().rposition(|&x| {\n+272 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-270 | |                                    x < 0\n-271 | |                                }\n-272 | |                    ).is_some();\n+273 | |                                    x < 0\n+274 | |                                }\n+275 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:286:21\n+   --> $DIR/methods.rs:289:21\n     |\n-286 |         fn new() -> Foo { Foo }\n+289 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:304:5\n+   --> $DIR/methods.rs:307:5\n     |\n-304 |     with_constructor.unwrap_or(make());\n+307 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:307:5\n+   --> $DIR/methods.rs:310:5\n     |\n-307 |     with_new.unwrap_or(Vec::new());\n+310 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:310:5\n+   --> $DIR/methods.rs:313:5\n     |\n-310 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+313 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:313:5\n+   --> $DIR/methods.rs:316:5\n     |\n-313 |     with_err.unwrap_or(make());\n+316 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:5\n+   --> $DIR/methods.rs:319:5\n     |\n-316 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+319 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:319:5\n+   --> $DIR/methods.rs:322:5\n     |\n-319 |     with_default_trait.unwrap_or(Default::default());\n+322 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:322:5\n+   --> $DIR/methods.rs:325:5\n     |\n-322 |     with_default_type.unwrap_or(u64::default());\n+325 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:325:5\n+   --> $DIR/methods.rs:328:5\n     |\n-325 |     with_vec.unwrap_or(vec![]);\n+328 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:330:5\n+   --> $DIR/methods.rs:333:5\n     |\n-330 |     without_default.unwrap_or(Foo::new());\n+333 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:333:5\n+   --> $DIR/methods.rs:336:5\n     |\n-333 |     map.entry(42).or_insert(String::new());\n+336 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:336:5\n+   --> $DIR/methods.rs:339:5\n     |\n-336 |     btree.entry(42).or_insert(String::new());\n+339 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:339:13\n+   --> $DIR/methods.rs:342:13\n     |\n-339 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+342 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:350:23\n+   --> $DIR/methods.rs:353:23\n     |\n-350 |         let bad_vec = some_vec.iter().nth(3);\n+353 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:351:26\n+   --> $DIR/methods.rs:354:26\n     |\n-351 |         let bad_slice = &some_vec[..].iter().nth(3);\n+354 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:352:31\n+   --> $DIR/methods.rs:355:31\n     |\n-352 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+355 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:353:29\n+   --> $DIR/methods.rs:356:29\n     |\n-353 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+356 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:358:23\n+   --> $DIR/methods.rs:361:23\n     |\n-358 |         let bad_vec = some_vec.iter_mut().nth(3);\n+361 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:361:26\n+   --> $DIR/methods.rs:364:26\n     |\n-361 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+364 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:364:29\n+   --> $DIR/methods.rs:367:29\n     |\n-364 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+367 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:376:13\n+   --> $DIR/methods.rs:379:13\n     |\n-376 |     let _ = some_vec.iter().skip(42).next();\n+379 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:377:13\n+   --> $DIR/methods.rs:380:13\n     |\n-377 |     let _ = some_vec.iter().cycle().skip(42).next();\n+380 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:378:13\n+   --> $DIR/methods.rs:381:13\n     |\n-378 |     let _ = (1..10).skip(10).next();\n+381 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:379:14\n+   --> $DIR/methods.rs:382:14\n     |\n-379 |     let _ = &some_vec[..].iter().skip(3).next();\n+382 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:388:13\n+   --> $DIR/methods.rs:391:13\n     |\n-388 |     let _ = opt.unwrap();\n+391 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}