{"sha": "4d840a6e45d464621d098cdefbe3900584d0ee9b", "node_id": "C_kwDOAAsO6NoAKDRkODQwYTZlNDVkNDY0NjIxZDA5OGNkZWZiZTM5MDA1ODRkMGVlOWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-21T07:33:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-21T07:33:40Z"}, "message": "Rollup merge of #91823 - woppopo:const_ptr_as_ref, r=lcnr\n\nMake `PTR::as_ref` and similar methods `const`.\n\nTracking issue: #91822\nFeature gate: `#![feature(const_ptr_as_ref)]`\n\n```rust\n// core::ptr\nimpl<T: ?Sized> *const T {\n    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T>;\n    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n    where\n        T: Sized;\n    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]>;\n}\n\nimpl<T: ?Sized> *mut T {\n    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T>;\n    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n    where\n        T: Sized;\n    pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T>;\n    pub const unsafe fn as_uninit_mut<'a>(self) -> Option<&'a mut MaybeUninit<T>>\n    where\n        T: Sized;\n    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]>;\n    pub const unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]>;\n}\n\nimpl<T: Sized> NonNull<T> {\n    pub const unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T>;\n    pub const unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T>;\n}\n\nimpl<T: ?Sized> NonNull<T> {\n    pub const unsafe fn as_ref<'a>(&self) -> &'a T;\n    pub const unsafe fn as_mut<'a>(&mut self) -> &'a mut T;\n    pub const unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>];\n    pub const unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>];\n}\n```", "tree": {"sha": "4b0f4c09e6935eb0f28cf74f19a69189352dfead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b0f4c09e6935eb0f28cf74f19a69189352dfead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d840a6e45d464621d098cdefbe3900584d0ee9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwYNUCRBK7hj4Ov3rIwAABVkIAB6FmIFFbZaB08buu3pQwV+A\nzXsyzXuMFJx0dzovuixJkhg09gPur468osnunUm2mAjheVMZFYrDEhuOBZp0nrgy\niUqVIjcc1BUgaib/+6n+LjGL58z1XbSQRm7yNdk3CAa04YzSOfgiA2EYau1owpzN\nm/aHedtFErCjOP5FawN+2wRHEUcY+Qxc/OF2CFLbG6GBSRS+DduD42gYvCGpnfii\n5X/4n18la3jWmVtfq7cSQoL0z9Av/OUv/CkKxO4ti2nIGz1xKSX7qEXdAJZa8Ae+\njgGIYRJvgSt0liN1vCgiuNlaM5PbPi3goqou6bc2uCF8jWuuNUXH43igg9QH/Ww=\n=WLHE\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b0f4c09e6935eb0f28cf74f19a69189352dfead\nparent 790950a53039a7eaf6429f81e0ede13ebade46b7\nparent a4b3fe0887144137afed5f676e073c63afe714d2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640072020 +0100\ncommitter GitHub <noreply@github.com> 1640072020 +0100\n\nRollup merge of #91823 - woppopo:const_ptr_as_ref, r=lcnr\n\nMake `PTR::as_ref` and similar methods `const`.\n\nTracking issue: #91822\nFeature gate: `#![feature(const_ptr_as_ref)]`\n\n```rust\n// core::ptr\nimpl<T: ?Sized> *const T {\n    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T>;\n    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n    where\n        T: Sized;\n    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]>;\n}\n\nimpl<T: ?Sized> *mut T {\n    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T>;\n    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n    where\n        T: Sized;\n    pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T>;\n    pub const unsafe fn as_uninit_mut<'a>(self) -> Option<&'a mut MaybeUninit<T>>\n    where\n        T: Sized;\n    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]>;\n    pub const unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]>;\n}\n\nimpl<T: Sized> NonNull<T> {\n    pub const unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T>;\n    pub const unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T>;\n}\n\nimpl<T: ?Sized> NonNull<T> {\n    pub const unsafe fn as_ref<'a>(&self) -> &'a T;\n    pub const unsafe fn as_mut<'a>(&mut self) -> &'a mut T;\n    pub const unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>];\n    pub const unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>];\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d840a6e45d464621d098cdefbe3900584d0ee9b", "html_url": "https://github.com/rust-lang/rust/commit/4d840a6e45d464621d098cdefbe3900584d0ee9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d840a6e45d464621d098cdefbe3900584d0ee9b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790950a53039a7eaf6429f81e0ede13ebade46b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/790950a53039a7eaf6429f81e0ede13ebade46b7", "html_url": "https://github.com/rust-lang/rust/commit/790950a53039a7eaf6429f81e0ede13ebade46b7"}, {"sha": "a4b3fe0887144137afed5f676e073c63afe714d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b3fe0887144137afed5f676e073c63afe714d2", "html_url": "https://github.com/rust-lang/rust/commit/a4b3fe0887144137afed5f676e073c63afe714d2"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "a93327a0132edcf5cb9c8f27932c0f8811e3d0c5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d840a6e45d464621d098cdefbe3900584d0ee9b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d840a6e45d464621d098cdefbe3900584d0ee9b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=4d840a6e45d464621d098cdefbe3900584d0ee9b", "patch": "@@ -163,8 +163,9 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n         // SAFETY: the caller must guarantee that `self` is valid\n         // for a reference if it isn't null.\n         if self.is_null() { None } else { unsafe { Some(&*self) } }\n@@ -211,7 +212,8 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n     where\n         T: Sized,\n     {\n@@ -1068,7 +1070,8 @@ impl<T> *const [T] {\n     /// [allocated object]: crate::ptr#allocated-object\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n         if self.is_null() {\n             None\n         } else {"}, {"sha": "5fd3b2ebc60989567e2a7e8a80452a6ef90d4d49", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d840a6e45d464621d098cdefbe3900584d0ee9b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d840a6e45d464621d098cdefbe3900584d0ee9b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=4d840a6e45d464621d098cdefbe3900584d0ee9b", "patch": "@@ -166,8 +166,9 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n         // SAFETY: the caller must guarantee that `self` is valid for a\n         // reference if it isn't null.\n         if self.is_null() { None } else { unsafe { Some(&*self) } }\n@@ -217,7 +218,8 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n     where\n         T: Sized,\n     {\n@@ -411,8 +413,9 @@ impl<T: ?Sized> *mut T {\n     /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n+    pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n         // SAFETY: the caller must guarantee that `self` is be valid for\n         // a mutable reference if it isn't null.\n         if self.is_null() { None } else { unsafe { Some(&mut *self) } }\n@@ -446,7 +449,8 @@ impl<T: ?Sized> *mut T {\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_mut<'a>(self) -> Option<&'a mut MaybeUninit<T>>\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_mut<'a>(self) -> Option<&'a mut MaybeUninit<T>>\n     where\n         T: Sized,\n     {\n@@ -1335,7 +1339,8 @@ impl<T> *mut [T] {\n     /// [allocated object]: crate::ptr#allocated-object\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n         if self.is_null() {\n             None\n         } else {\n@@ -1386,7 +1391,8 @@ impl<T> *mut [T] {\n     /// [allocated object]: crate::ptr#allocated-object\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]> {\n         if self.is_null() {\n             None\n         } else {"}, {"sha": "3a7e99faccf23d2ff927bf0f1f78e82aec1a96e3", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d840a6e45d464621d098cdefbe3900584d0ee9b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d840a6e45d464621d098cdefbe3900584d0ee9b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=4d840a6e45d464621d098cdefbe3900584d0ee9b", "patch": "@@ -122,7 +122,8 @@ impl<T: Sized> NonNull<T> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.cast().as_ptr() }\n@@ -155,7 +156,8 @@ impl<T: Sized> NonNull<T> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &mut *self.cast().as_ptr() }\n@@ -316,9 +318,10 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(&self) -> &'a T {\n+    pub const unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.as_ptr() }\n@@ -366,9 +369,10 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n+    pub const unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n         unsafe { &mut *self.as_ptr() }\n@@ -534,7 +538,8 @@ impl<T> NonNull<[T]> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n         unsafe { slice::from_raw_parts(self.cast().as_ptr(), self.len()) }\n     }\n@@ -596,7 +601,8 @@ impl<T> NonNull<[T]> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`.\n         unsafe { slice::from_raw_parts_mut(self.cast().as_ptr(), self.len()) }\n     }"}]}