{"sha": "15a644d6063aac86a5eb387412b96b824c67ded3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTY0NGQ2MDYzYWFjODZhNWViMzg3NDEyYjk2YjgyNGM2N2RlZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-11T12:46:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-11T12:46:47Z"}, "message": "Merge #6816\n\n6816: Use natural trait ordering in derive completion r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "92894ee2330fe3112f224b7f41d73147cf31c9b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92894ee2330fe3112f224b7f41d73147cf31c9b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a644d6063aac86a5eb387412b96b824c67ded3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf02o3CRBK7hj4Ov3rIwAAdHIIAFIMoQtZj5ck9jryEm897P2F\nWQItGU3exmG4M8MpHFzRibjxjc9ICrsKBJ34EW0EVQgB50j7clG7V7hkPxCPpI0k\nVgdVEWwfvHMQMcuC0016COfpLVbrhJjxwhwQsPdeLXdbklkqBCZ+7RNyu8+u7v+e\nbTxirCAWgZESOdEkLsGvK5KNYh0U1wRuV1wXjLerMES0+Q00G4w1zVu4P5TJnujE\nd21dlt5LM2To/Ei50M0JR1NSH7tDd391fVaEq73JFczgZ0ywf5gksNZTTL9MFa6c\n9oFcBwv9vMuqRdDaDMrKNEsOYgq6Jy6+RVWHi4XuN07xdF7GycW4ZYuAJgejWQM=\n=r6Dx\n-----END PGP SIGNATURE-----\n", "payload": "tree 92894ee2330fe3112f224b7f41d73147cf31c9b1\nparent 41321d96789ed918eebda02ada76758765d19d16\nparent e179ed6f532e976d50c286c3349f2dddd7de6928\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607690807 +0000\ncommitter GitHub <noreply@github.com> 1607690807 +0000\n\nMerge #6816\n\n6816: Use natural trait ordering in derive completion r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a644d6063aac86a5eb387412b96b824c67ded3", "html_url": "https://github.com/rust-lang/rust/commit/15a644d6063aac86a5eb387412b96b824c67ded3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a644d6063aac86a5eb387412b96b824c67ded3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41321d96789ed918eebda02ada76758765d19d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/41321d96789ed918eebda02ada76758765d19d16", "html_url": "https://github.com/rust-lang/rust/commit/41321d96789ed918eebda02ada76758765d19d16"}, {"sha": "e179ed6f532e976d50c286c3349f2dddd7de6928", "url": "https://api.github.com/repos/rust-lang/rust/commits/e179ed6f532e976d50c286c3349f2dddd7de6928", "html_url": "https://github.com/rust-lang/rust/commit/e179ed6f532e976d50c286c3349f2dddd7de6928"}], "stats": {"total": 154, "additions": 18, "deletions": 136}, "files": [{"sha": "acce2e7e7a5d09c935f45426e130f52bab7c0c37", "filename": "crates/completion/src/completions/attribute.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/15a644d6063aac86a5eb387412b96b824c67ded3/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a644d6063aac86a5eb387412b96b824c67ded3/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=15a644d6063aac86a5eb387412b96b824c67ded3", "patch": "@@ -3,6 +3,7 @@\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n \n+use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode, SyntaxKind};\n \n@@ -162,19 +163,20 @@ const ATTRIBUTES: &[AttrCompletion] = &[\n fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n     if let Ok(existing_derives) = parse_comma_sep_input(derive_input) {\n         for derive_completion in DEFAULT_DERIVE_COMPLETIONS\n-            .into_iter()\n+            .iter()\n             .filter(|completion| !existing_derives.contains(completion.label))\n         {\n-            let mut label = derive_completion.label.to_owned();\n-            for dependency in derive_completion\n-                .dependencies\n-                .into_iter()\n-                .filter(|&&dependency| !existing_derives.contains(dependency))\n-            {\n-                label.push_str(\", \");\n-                label.push_str(dependency);\n-            }\n+            let mut components = vec![derive_completion.label];\n+            components.extend(\n+                derive_completion\n+                    .dependencies\n+                    .iter()\n+                    .filter(|&&dependency| !existing_derives.contains(dependency)),\n+            );\n+            let lookup = components.join(\", \");\n+            let label = components.iter().rev().join(\", \");\n             CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label)\n+                .lookup_by(lookup)\n                 .kind(CompletionItemKind::Attribute)\n                 .add_to(acc)\n         }\n@@ -264,7 +266,6 @@ struct DeriveCompletion {\n \n /// Standard Rust derives and the information about their dependencies\n /// (the dependencies are needed so that the main derive don't break the compilation when added)\n-#[rustfmt::skip]\n const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Clone\", dependencies: &[] },\n     DeriveCompletion { label: \"Copy\", dependencies: &[\"Clone\"] },\n@@ -421,14 +422,14 @@ struct Test {}\n         \"#,\n             expect![[r#\"\n                 at Clone\n-                at Copy, Clone\n+                at Clone, Copy\n                 at Debug\n                 at Default\n-                at Eq, PartialEq\n                 at Hash\n-                at Ord, PartialOrd, Eq, PartialEq\n                 at PartialEq\n-                at PartialOrd, PartialEq\n+                at PartialEq, Eq\n+                at PartialEq, Eq, PartialOrd, Ord\n+                at PartialEq, PartialOrd\n             \"#]],\n         );\n     }\n@@ -453,12 +454,12 @@ struct Test {}\n \"#,\n             expect![[r#\"\n                 at Clone\n-                at Copy, Clone\n+                at Clone, Copy\n                 at Debug\n                 at Default\n                 at Eq\n+                at Eq, PartialOrd, Ord\n                 at Hash\n-                at Ord, PartialOrd, Eq\n                 at PartialOrd\n             \"#]],\n         )"}, {"sha": "ec8581a03cb39d370da3266091b29d155f6944da", "filename": "docs/user/generated_diagnostic.adoc", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/41321d96789ed918eebda02ada76758765d19d16/docs%2Fuser%2Fgenerated_diagnostic.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/41321d96789ed918eebda02ada76758765d19d16/docs%2Fuser%2Fgenerated_diagnostic.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_diagnostic.adoc?ref=41321d96789ed918eebda02ada76758765d19d16", "patch": "@@ -1,119 +0,0 @@\n-//Generated file, do not edit by hand, see `xtask/src/codegen`\n-=== break-outside-of-loop\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L219[diagnostics.rs]\n-\n-This diagnostic is triggered if `break` keyword is used outside of a loop.\n-\n-\n-=== inactive-code\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L98[diagnostics.rs]\n-\n-This diagnostic is shown for code with inactive `#[cfg]` attributes.\n-\n-\n-=== incorrect-ident-case\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L319[diagnostics.rs]\n-\n-This diagnostic is triggered if item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n-\n-\n-=== macro-error\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L167[diagnostics.rs]\n-\n-This diagnostic is shown for macro expansion errors.\n-\n-\n-=== mismatched-arg-count\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L267[diagnostics.rs]\n-\n-This diagnostic is triggered if function is invoked with an incorrect amount of arguments.\n-\n-\n-=== missing-match-arm\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L162[diagnostics.rs]\n-\n-This diagnostic is triggered if `match` block is missing one or more match arms.\n-\n-\n-=== missing-ok-in-tail-expr\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L187[diagnostics.rs]\n-\n-This diagnostic is triggered if block that should return `Result` returns a value not wrapped in `Ok`.\n-\n-Example:\n-\n-```rust\n-fn foo() -> Result<u8, ()> {\n-    10\n-}\n-```\n-\n-\n-=== missing-pat-fields\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L113[diagnostics.rs]\n-\n-This diagnostic is triggered if pattern lacks some fields that exist in the corresponding structure.\n-\n-Example:\n-\n-```rust\n-struct A { a: u8, b: u8 }\n-\n-let a = A { a: 10, b: 20 };\n-\n-if let A { a } = a {\n-    // ...\n-}\n-```\n-\n-\n-=== missing-structure-fields\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L66[diagnostics.rs]\n-\n-This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n-\n-Example:\n-\n-```rust\n-struct A { a: u8, b: u8 }\n-\n-let a = A { a: 10 };\n-```\n-\n-\n-=== missing-unsafe\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L243[diagnostics.rs]\n-\n-This diagnostic is triggered if operation marked as `unsafe` is used outside of `unsafe` function or block.\n-\n-\n-=== no-such-field\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L39[diagnostics.rs]\n-\n-This diagnostic is triggered if created structure does not have field provided in record.\n-\n-\n-=== unresolved-extern-crate\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L43[diagnostics.rs]\n-\n-This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n-\n-\n-=== unresolved-import\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L67[diagnostics.rs]\n-\n-This diagnostic is triggered if rust-analyzer is unable to discover imported module.\n-\n-\n-=== unresolved-module\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L18[diagnostics.rs]\n-\n-This diagnostic is triggered if rust-analyzer is unable to discover referred module.\n-\n-\n-=== unresolved-proc-macro\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L131[diagnostics.rs]\n-\n-This diagnostic is shown when a procedural macro can not be found. This usually means that\n-procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n-but can also indicate project setup problems."}]}