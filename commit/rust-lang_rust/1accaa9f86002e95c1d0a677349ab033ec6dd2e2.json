{"sha": "1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhY2NhYTlmODYwMDJlOTVjMWQwYTY3NzM0OWFiMDMzZWM2ZGQyZTI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-03-28T15:09:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-03-28T15:09:51Z"}, "message": "Fix some typos", "tree": {"sha": "9a65dc2cb6f8a0f38639eed8fbf9902994faa3e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a65dc2cb6f8a0f38639eed8fbf9902994faa3e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "html_url": "https://github.com/rust-lang/rust/commit/1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "227b46bdede794d5c8476b810bb1c30926bd9c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/227b46bdede794d5c8476b810bb1c30926bd9c04", "html_url": "https://github.com/rust-lang/rust/commit/227b46bdede794d5c8476b810bb1c30926bd9c04"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "b4bc66933dde0d688f25b0b594dffc70b5f9fadd", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -404,7 +404,7 @@ case $CFG_OSTYPE in\n         CFG_OSTYPE=pc-windows-gnu\n         ;;\n \n-# Thad's Cygwin identifers below\n+# Thad's Cygwin identifiers below\n \n #   Vista 32 bit\n     CYGWIN_NT-6.0)"}, {"sha": "cd86b273c6de21a952bdbc524cec890d1788728f", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -179,7 +179,7 @@ define CFG_MAKE_TOOLCHAIN\n \n   ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel powerpc),)\n \n-  # On Bitrig, we need the relocation model to be PIC for everthing\n+  # On Bitrig, we need the relocation model to be PIC for everything\n   ifeq (,$(filter $(OSTYPE_$(1)),bitrig))\n     LLVM_MC_RELOCATION_MODEL=\"pic\"\n   else"}, {"sha": "8cc74a9cbfb76f81b77d67843c569725bf7da40c", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -132,7 +132,7 @@ endef\n # on $$(TSREQ$(1)_T_$(2)_H_$(3)), to ensure that no products will be\n # put into the target area until after the get-snapshot.py script has\n # had its chance to clean it out; otherwise the other products will be\n-# inadvertantly included in the clean out.\n+# inadvertently included in the clean out.\n SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n \n define TARGET_HOST_RULES"}, {"sha": "7161cd33f89be90fb147618376e23dc3c81ea7dc", "filename": "src/doc/trpl/associated-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fassociated-types.md?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -170,7 +170,7 @@ let obj = Box::new(graph) as Box<Graph>;\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ```\n \n-We can\u2019t create a trait object like this, becuase we don\u2019t know the associated\n+We can\u2019t create a trait object like this, because we don\u2019t know the associated\n types. Instead, we can write this:\n \n ```rust"}, {"sha": "d591019e9c045fb01d0075b5e8202034689989de", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -529,7 +529,7 @@ This will create documentation for bar both inside the documentation for the\n crate `foo`, as well as the documentation for your crate. It will use the same\n documentation in both places.\n \n-This behavior can be supressed with `no_inline`:\n+This behavior can be suppressed with `no_inline`:\n \n ```ignore\n extern crate foo;"}, {"sha": "47e64547eed3985bc34d1087df708f00a2ec0321", "filename": "src/etc/rustup.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Fetc%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Fetc%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frustup.sh?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -335,7 +335,7 @@ case $CFG_OSTYPE in\n     MINGW32*)\n         CFG_OSTYPE=pc-mingw32\n         ;;\n-# Thad's Cygwin identifers below\n+# Thad's Cygwin identifiers below\n \n #   Vista 32 bit\n     CYGWIN_NT-6.0)\n@@ -437,7 +437,7 @@ CFG_TMP_DIR=$(mktemp -d 2>/dev/null \\\n            || create_tmp_dir)\n \n # If we're saving nightlies and we didn't specify which one, grab the latest\n-# verison from the perspective of the server. Buildbot has typically finished\n+# version from the perspective of the server. Buildbot has typically finished\n # building and uploading by ~8UTC, but we want to include a little buffer.\n #\n # FIXME It would be better to use the known most recent nightly that has been"}, {"sha": "3f4b39da4b3bb1e888cec84aaee71358644b7b0b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -476,7 +476,7 @@ pub struct InvariantType<T>;\n /// particular, thanks to the `Reflect` bound, callers know that a\n /// function declared like `fn bar<T>(...)` will always act in\n /// precisely the same way no matter what type `T` is supplied,\n-/// beacuse there are no bounds declared on `T`. (The ability for a\n+/// because there are no bounds declared on `T`. (The ability for a\n /// caller to reason about what a function may do based solely on what\n /// generic bounds are declared is often called the [\"parametricity\n /// property\"][1].)"}, {"sha": "234b8cf5eb5719eee2eb7305298672cd66eeaffa", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -83,7 +83,7 @@\n //! - `Sub32` (`0d`): 4-byte unsigned integer for supplementary information.\n //!   Those two tags normally occur as the first subdocument of certain tags,\n //!   namely `Enum`, `Vec` and `Map`, to provide a variant or size information.\n-//!   They can be used interchangably.\n+//!   They can be used interchangeably.\n //!\n //! Predefined tags with an explicit length:\n //!"}, {"sha": "07528df97f1334686123652efacf0c9525324fd0", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -157,7 +157,7 @@ pub struct TargetOptions {\n     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n     /// Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\n-    /// only realy used for figuring out how to find libraries, since Windows uses its own\n+    /// only really used for figuring out how to find libraries, since Windows uses its own\n     /// library naming convention. Defaults to false.\n     pub is_like_windows: bool,\n     /// Whether the target toolchain is like Android's. Only useful for compiling against Android."}, {"sha": "f75fced3bc26d0e04faf4f95ed3d4df95bf81eca", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -86,7 +86,7 @@ impl Ord for ModuleSummary {\n     }\n }\n \n-// is the item considered publically visible?\n+// is the item considered publicly visible?\n fn visible(item: &Item) -> bool {\n     match item.inner {\n         ImplItem(_) => true,"}, {"sha": "a3128ef0f8d9543ed5f98c6441aeb03c743e039d", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -1511,7 +1511,7 @@ mod tests {\n         assert_eq!(v, b\"foobar\\0\\0\\0\\0\".to_vec());\n \n         // Truncate to a smaller length, don't seek, and then write something.\n-        // Ensure that the intermediate zeroes are all filled in (we're seeked\n+        // Ensure that the intermediate zeroes are all filled in (we have `seek`ed\n         // past the end of the file).\n         check!(file.set_len(2));\n         assert_eq!(check!(file.metadata()).len(), 2);"}, {"sha": "6aa63c395c62501efb5620a33d9d34996f5a8728", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -1532,7 +1532,7 @@ mod test {\n                    b\"foobar\\0\\0\\0\\0\".to_vec());\n \n         // Truncate to a smaller length, don't seek, and then write something.\n-        // Ensure that the intermediate zeroes are all filled in (we're seeked\n+        // Ensure that the intermediate zeroes are all filled in (we have `seek`ed\n         // past the end of the file).\n         check!(file.truncate(2));\n         assert_eq!(check!(file.stat()).size, 2);"}, {"sha": "226734b84d63840f491057540147030aa62922a5", "filename": "src/test/compile-fail/issue-9814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that single-variant enums cant be de-referenced\n+// Verify that single-variant enums can't be de-referenced\n // Regression test for issue #9814\n \n enum Foo { Bar(isize) }"}, {"sha": "caed4bd181d64ab2d649052d75e74375cea89cae", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -53,7 +53,7 @@ enum Univariant<T> {\n \n fn main() {\n \n-    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // In order to avoid endianness trouble all of the following test values consist of a single\n     // repeated byte. This way each interpretation of the union should look the same, no matter if\n     // this is a big or little endian machine.\n "}, {"sha": "b0f0852c69e46675cda27e18e54e43f72d65aa13", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -71,7 +71,7 @@ enum Univariant<T64> {\n \n fn main() {\n \n-    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // In order to avoid endianness trouble all of the following test values consist of a single\n     // repeated byte. This way each interpretation of the union should look the same, no matter if\n     // this is a big or little endian machine.\n "}, {"sha": "b7956c221224e5d000867b821b84a2dd0c01f9e9", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -66,7 +66,7 @@ enum Univariant {\n \n fn main() {\n \n-    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // In order to avoid endianness trouble all of the following test values consist of a single\n     // repeated byte. This way each interpretation of the union should look the same, no matter if\n     // this is a big or little endian machine.\n "}, {"sha": "43cb48d16bf4b8cb6e8e11f554b9ed43aa42263c", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -68,7 +68,7 @@ enum Univariant {\n \n fn main() {\n \n-    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // In order to avoid endianness trouble all of the following test values consist of a single\n     // repeated byte. This way each interpretation of the union should look the same, no matter if\n     // this is a big or little endian machine.\n "}, {"sha": "6ed231726b163b2c382d24aabb5d90a6d8257d00", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -68,7 +68,7 @@ enum Univariant {\n \n fn main() {\n \n-    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // In order to avoid endianness trouble all of the following test values consist of a single\n     // repeated byte. This way each interpretation of the union should look the same, no matter if\n     // this is a big or little endian machine.\n "}, {"sha": "e450ead009bb25bac4502559a8ade395a24d8274", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -59,7 +59,7 @@ enum Univariant {\n \n fn main() {\n \n-    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // In order to avoid endianness trouble all of the following test values consist of a single\n     // repeated byte. This way each interpretation of the union should look the same, no matter if\n     // this is a big or little endian machine.\n "}, {"sha": "4879fbfe6d34346172d9c0d75a1111829a9cfeaf", "filename": "src/test/run-make/pretty-print-path-suffix/foo_method.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Ffoo_method.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Ffoo_method.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Ffoo_method.pp?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -12,5 +12,5 @@\n \n \n \n-fn foo_method(&self) -> &'static str { return \"i am very similiar to foo.\"; }\n+fn foo_method(&self) -> &'static str { return \"i am very similar to foo.\"; }\n /* nest::S::foo_method */"}, {"sha": "8ea86a94f935e97d30742469f60e772b37229482", "filename": "src/test/run-make/pretty-print-path-suffix/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Finput.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -22,7 +22,7 @@ pub mod nest {\n     struct S;\n     impl S {\n         fn foo_method(&self) -> &'static str {\n-            return \"i am very similiar to foo.\";\n+            return \"i am very similar to foo.\";\n         }\n     }\n }"}, {"sha": "a969f6911545fcf6ac5810a8a33013de1e8d7fa4", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -52,7 +52,7 @@ pub fn sleeper() -> Process {\n \n fn test_destroy_twice() {\n     let mut p = sleeper();\n-    succeed!(p.signal_exit()); // this shouldnt crash...\n+    succeed!(p.signal_exit()); // this shouldn't crash...\n     let _ = p.signal_exit(); // ...and nor should this (and nor should the destructor)\n }\n "}, {"sha": "f176c60346b14d604c29c59bcb4cf6c6d254aadc", "filename": "src/test/run-pass/issue-23485.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-pass%2Fissue-23485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1accaa9f86002e95c1d0a677349ab033ec6dd2e2/src%2Ftest%2Frun-pass%2Fissue-23485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23485.rs?ref=1accaa9f86002e95c1d0a677349ab033ec6dd2e2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test for an ICE that occured when a default method implementation\n+// Test for an ICE that occurred when a default method implementation\n // was applied to a type that did not meet the prerequisites. The\n // problem occurred specifically because normalizing\n // `Self::Item::Target` was impossible in this case."}]}