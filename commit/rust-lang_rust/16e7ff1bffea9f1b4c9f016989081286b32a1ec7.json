{"sha": "16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTdmZjFiZmZlYTlmMWI0YzlmMDE2OTg5MDgxMjg2YjMyYTFlYzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-07T22:40:23Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-08T02:25:05Z"}, "message": "Write and use increment_outstanding_references_for and decrement_outstanding_references_for", "tree": {"sha": "1fa31a14267c8b3cd936ea06808ee2cf41a0d73d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa31a14267c8b3cd936ea06808ee2cf41a0d73d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "html_url": "https://github.com/rust-lang/rust/commit/16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b4dc4b87c6a6afd9116fe8be8f5bf055878314", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b4dc4b87c6a6afd9116fe8be8f5bf055878314", "html_url": "https://github.com/rust-lang/rust/commit/96b4dc4b87c6a6afd9116fe8be8f5bf055878314"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "d311afb23976dbccb7ad9ebe8e9e27077090d38c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "patch": "@@ -16,7 +16,6 @@\n use DefModifiers;\n use resolve_imports::ImportDirective;\n use resolve_imports::ImportDirectiveSubclass::{self, SingleImport, GlobImport};\n-use resolve_imports::NameResolution;\n use Module;\n use Namespace::{self, TypeNS, ValueNS};\n use {NameBinding, NameBindingKind};\n@@ -699,15 +698,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 debug!(\"(building import directive) building import directive: {}::{}\",\n                        names_to_string(&module_.imports.borrow().last().unwrap().module_path),\n                        target);\n-\n-                let mut import_resolutions = module_.import_resolutions.borrow_mut();\n-                for &ns in [TypeNS, ValueNS].iter() {\n-                    let mut resolution = import_resolutions.entry((target, ns)).or_insert(\n-                        NameResolution::default()\n-                    );\n-\n-                    resolution.outstanding_references += 1;\n-                }\n+                module_.increment_outstanding_references_for(target, ValueNS);\n+                module_.increment_outstanding_references_for(target, TypeNS);\n             }\n             GlobImport => {\n                 // Set the glob flag. This tells us that we don't know the"}, {"sha": "0325bcc24c49930583bf11868fafa3919d1e1021", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "patch": "@@ -670,6 +670,13 @@ impl<T> ResolveResult<T> {\n             Success(t) => f(t),\n         }\n     }\n+\n+    fn success(self) -> Option<T> {\n+        match self {\n+            Success(t) => Some(t),\n+            _ => None,\n+        }\n+    }\n }\n \n enum FallbackSuggestion {\n@@ -870,6 +877,19 @@ impl<'a> ModuleS<'a> {\n         }\n     }\n \n+    fn increment_outstanding_references_for(&self, name: Name, ns: Namespace) {\n+        let mut resolutions = self.import_resolutions.borrow_mut();\n+        resolutions.entry((name, ns)).or_insert_with(Default::default).outstanding_references += 1;\n+    }\n+\n+    fn decrement_outstanding_references_for(&self, name: Name, ns: Namespace) {\n+        match self.import_resolutions.borrow_mut().get_mut(&(name, ns)).unwrap()\n+                                                                       .outstanding_references {\n+            0 => panic!(\"No more outstanding references!\"),\n+            ref mut outstanding_references => { *outstanding_references -= 1; }\n+        }\n+    }\n+\n     fn for_each_local_child<F: FnMut(Name, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n         for (&(name, ns), name_binding) in self.children.borrow().iter() {\n             if !name_binding.is_extern_crate() {"}, {"sha": "18404a49a36908c9ec83fdb07a721bde2b7345ca", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e7ff1bffea9f1b4c9f016989081286b32a1ec7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "patch": "@@ -511,9 +511,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         // We've successfully resolved the import. Write the results in.\n-        let mut import_resolutions = module_.import_resolutions.borrow_mut();\n \n         {\n+            let mut import_resolutions = module_.import_resolutions.borrow_mut();\n             let mut check_and_write_import = |namespace, result| {\n                 let result: &ResolveResult<&NameBinding> = result;\n \n@@ -567,26 +567,22 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         let value_def_and_priv = {\n-            let import_resolution_value = import_resolutions.get_mut(&(target, ValueNS)).unwrap();\n-            assert!(import_resolution_value.outstanding_references >= 1);\n-            import_resolution_value.outstanding_references -= 1;\n+            module_.decrement_outstanding_references_for(target, ValueNS);\n \n             // Record what this import resolves to for later uses in documentation,\n             // this may resolve to either a value or a type, but for documentation\n             // purposes it's good enough to just favor one over the other.\n-            import_resolution_value.binding.as_ref().map(|binding| {\n+            value_result.success().map(|binding| {\n                 let def = binding.def().unwrap();\n                 let last_private = if binding.is_public() { lp } else { DependsOn(def.def_id()) };\n                 (def, last_private)\n             })\n         };\n \n         let type_def_and_priv = {\n-            let import_resolution_type = import_resolutions.get_mut(&(target, TypeNS)).unwrap();\n-            assert!(import_resolution_type.outstanding_references >= 1);\n-            import_resolution_type.outstanding_references -= 1;\n+            module_.decrement_outstanding_references_for(target, TypeNS);\n \n-            import_resolution_type.binding.as_ref().map(|binding| {\n+            type_result.success().map(|binding| {\n                 let def = binding.def().unwrap();\n                 let last_private = if binding.is_public() { lp } else { DependsOn(def.def_id()) };\n                 (def, last_private)"}]}