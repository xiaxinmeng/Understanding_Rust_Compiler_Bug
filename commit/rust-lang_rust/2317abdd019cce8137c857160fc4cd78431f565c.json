{"sha": "2317abdd019cce8137c857160fc4cd78431f565c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTdhYmRkMDE5Y2NlODEzN2M4NTcxNjBmYzRjZDc4NDMxZjU2NWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-22T23:44:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Fix quadratic loop in confirm.rs", "tree": {"sha": "38b570e1490c52445c994fa02f1c4de75d9addcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b570e1490c52445c994fa02f1c4de75d9addcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2317abdd019cce8137c857160fc4cd78431f565c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2317abdd019cce8137c857160fc4cd78431f565c", "html_url": "https://github.com/rust-lang/rust/commit/2317abdd019cce8137c857160fc4cd78431f565c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2317abdd019cce8137c857160fc4cd78431f565c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "651215e2837e5f667f412fb28d3c849fbfbd3852", "url": "https://api.github.com/repos/rust-lang/rust/commits/651215e2837e5f667f412fb28d3c849fbfbd3852", "html_url": "https://github.com/rust-lang/rust/commit/651215e2837e5f667f412fb28d3c849fbfbd3852"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "22047d6b6eee27d7be6302d339133f49d45ebef9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2317abdd019cce8137c857160fc4cd78431f565c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2317abdd019cce8137c857160fc4cd78431f565c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2317abdd019cce8137c857160fc4cd78431f565c", "patch": "@@ -824,7 +824,7 @@ impl<'a, 'tcx, 'cl> Visitor<'tcx> for Resolver<'a, 'cl> {\n                 GenericParamKind::Type { ref default, .. } => {\n                     found_default |= default.is_some();\n                     if found_default {\n-                        Some((Ident::with_empty_ctxt(param.ident.name), Def::Err));\n+                        Some((Ident::with_empty_ctxt(param.ident.name), Def::Err))\n                     } else {\n                         None\n                     }"}, {"sha": "ca0467606d438991998727e84699c20ef7155a02", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2317abdd019cce8137c857160fc4cd78431f565c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2317abdd019cce8137c857160fc4cd78431f565c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2317abdd019cce8137c857160fc4cd78431f565c", "patch": "@@ -324,37 +324,34 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         assert_eq!(method_generics.parent_count, parent_substs.len());\n         let provided = &segment.args;\n         let own_counts = method_generics.own_counts();\n+        // FIXME(varkor): Separating out the parameters is messy.\n+        let lifetimes: Vec<_> = provided.iter().flat_map(|data| data.args.iter().filter_map(|arg| match arg {\n+            GenericArg::Lifetime(ty) => Some(ty),\n+            _ => None,\n+        })).collect();\n+        let types: Vec<_> = provided.iter().flat_map(|data| data.args.iter().filter_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            _ => None,\n+        })).collect();\n         Substs::for_item(self.tcx, pick.item.def_id, |param, _| {\n-            let mut i = param.index as usize;\n+            let i = param.index as usize;\n             if i < parent_substs.len() {\n                 parent_substs[i]\n             } else {\n-                let (is_lt, is_ty) = match param.kind {\n-                    GenericParamDefKind::Lifetime => (true, false),\n-                    GenericParamDefKind::Type { .. } => (false, true),\n-                };\n-                provided.as_ref().and_then(|data| {\n-                    for arg in &data.args {\n-                        match arg {\n-                            GenericArg::Lifetime(lt) if is_lt => {\n-                                if i == parent_substs.len() {\n-                                    return Some(AstConv::ast_region_to_region(\n-                                        self.fcx, lt, Some(param)).into());\n-                                }\n-                                i -= 1;\n-                            }\n-                            GenericArg::Lifetime(_) => {}\n-                            GenericArg::Type(ty) if is_ty => {\n-                                if i == parent_substs.len() + own_counts.lifetimes {\n-                                    return Some(self.to_ty(ty).into());\n-                                }\n-                                i -= 1;\n-                            }\n-                            GenericArg::Type(_) => {}\n+                match param.kind {\n+                    GenericParamDefKind::Lifetime => {\n+                        if let Some(lifetime) = lifetimes.get(i - parent_substs.len()) {\n+                            return AstConv::ast_region_to_region(\n+                                self.fcx, lifetime, Some(param)).into();\n                         }\n                     }\n-                    None\n-                }).unwrap_or_else(|| self.var_for_def(self.span, param))\n+                    GenericParamDefKind::Type { .. } => {\n+                        if let Some(ast_ty) = types.get(i - parent_substs.len() - own_counts.lifetimes) {\n+                            return self.to_ty(ast_ty).into();\n+                        }\n+                    }\n+                }\n+                self.var_for_def(self.span, param)\n             }\n         })\n     }"}]}