{"sha": "fc93e260e914aefb6896a65de025fb34127cccaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTNlMjYwZTkxNGFlZmI2ODk2YTY1ZGUwMjVmYjM0MTI3Y2NjYWY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-12T21:53:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T21:53:29Z"}, "message": "Rollup merge of #81479 - osa1:issue24151, r=lcnr\n\nAllow casting mut array ref to mut ptr\n\nAllow casting mut array ref to mut ptr\n\nWe now allow two new casts:\n\n- mut array reference to mut ptr. Example:\n\n      let mut x: [usize; 2] = [0, 0];\n      let p = &mut x as *mut usize;\n\n  We allow casting const array references to const pointers so not\n  allowing mut references to mut pointers was inconsistent.\n\n- mut array reference to const ptr. Example:\n\n      let mut x: [usize; 2] = [0, 0];\n      let p = &mut x as *const usize;\n\n  This was similarly inconsistent as we allow casting mut references to\n  const pointers.\n\nExisting test 'vector-cast-weirdness' updated to test both cases.\n\nFixes #24151", "tree": {"sha": "ea75ad358d946906d138142c1bdc7b566f90afcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea75ad358d946906d138142c1bdc7b566f90afcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc93e260e914aefb6896a65de025fb34127cccaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJvjaCRBK7hj4Ov3rIwAAdHIIAIwa0fuzbR/W5qhLWO2hYpOy\nnJJ3zzJQ3SPQZwP2qNXsR+YOAKOktnuxivqefu3kXM2EerctBuknwrY2jOnNfGTH\nJK37CAI2iod4t/+XeR4dMhdT+bxVBh0VU6WDOOiDOqYNI/9c0oueUZrXzqrJp0UP\naKTEXquPfIOI6mhJ78TuHHjHKqGuqNj6F9b33waHO5GeaOzqMY0UWDln5Y+GMFY+\nPDjdfBiUJlEHOqMzwiaU+Szh+9k7zZv+C4Ot5DWsR16siFwxsGXXCkt319IIcT/c\nmZsJ8x/wp1THX52aBj+rTakjiGRwB3VHYlSDtEBbrzguUik3WEqDyBcjgIyMzfU=\n=WsLS\n-----END PGP SIGNATURE-----\n", "payload": "tree ea75ad358d946906d138142c1bdc7b566f90afcb\nparent 8280abc57b50a08b42cbfec39e6a6840f466c33c\nparent d64b749f2cebcfec942ecbbb87e24a9f8cc28469\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613166809 +0100\ncommitter GitHub <noreply@github.com> 1613166809 +0100\n\nRollup merge of #81479 - osa1:issue24151, r=lcnr\n\nAllow casting mut array ref to mut ptr\n\nAllow casting mut array ref to mut ptr\n\nWe now allow two new casts:\n\n- mut array reference to mut ptr. Example:\n\n      let mut x: [usize; 2] = [0, 0];\n      let p = &mut x as *mut usize;\n\n  We allow casting const array references to const pointers so not\n  allowing mut references to mut pointers was inconsistent.\n\n- mut array reference to const ptr. Example:\n\n      let mut x: [usize; 2] = [0, 0];\n      let p = &mut x as *const usize;\n\n  This was similarly inconsistent as we allow casting mut references to\n  const pointers.\n\nExisting test 'vector-cast-weirdness' updated to test both cases.\n\nFixes #24151\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc93e260e914aefb6896a65de025fb34127cccaf", "html_url": "https://github.com/rust-lang/rust/commit/fc93e260e914aefb6896a65de025fb34127cccaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc93e260e914aefb6896a65de025fb34127cccaf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8280abc57b50a08b42cbfec39e6a6840f466c33c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8280abc57b50a08b42cbfec39e6a6840f466c33c", "html_url": "https://github.com/rust-lang/rust/commit/8280abc57b50a08b42cbfec39e6a6840f466c33c"}, {"sha": "d64b749f2cebcfec942ecbbb87e24a9f8cc28469", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64b749f2cebcfec942ecbbb87e24a9f8cc28469", "html_url": "https://github.com/rust-lang/rust/commit/d64b749f2cebcfec942ecbbb87e24a9f8cc28469"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "52b1ff3877da70fa2d43909b13f0aa08b3654fd0", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e260e914aefb6896a65de025fb34127cccaf/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e260e914aefb6896a65de025fb34127cccaf/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=fc93e260e914aefb6896a65de025fb34127cccaf", "patch": "@@ -2191,19 +2191,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::ArrayToPointer) => {\n                         let ty_from = op.ty(body, tcx);\n \n-                        let opt_ty_elem = match ty_from.kind() {\n-                            ty::RawPtr(ty::TypeAndMut {\n-                                mutbl: hir::Mutability::Not,\n-                                ty: array_ty,\n-                            }) => match array_ty.kind() {\n-                                ty::Array(ty_elem, _) => Some(ty_elem),\n-                                _ => None,\n-                            },\n+                        let opt_ty_elem_mut = match ty_from.kind() {\n+                            ty::RawPtr(ty::TypeAndMut { mutbl: array_mut, ty: array_ty }) => {\n+                                match array_ty.kind() {\n+                                    ty::Array(ty_elem, _) => Some((ty_elem, *array_mut)),\n+                                    _ => None,\n+                                }\n+                            }\n                             _ => None,\n                         };\n \n-                        let ty_elem = match opt_ty_elem {\n-                            Some(ty_elem) => ty_elem,\n+                        let (ty_elem, ty_mut) = match opt_ty_elem_mut {\n+                            Some(ty_elem_mut) => ty_elem_mut,\n                             None => {\n                                 span_mirbug!(\n                                     self,\n@@ -2215,11 +2214,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         };\n \n-                        let ty_to = match ty.kind() {\n-                            ty::RawPtr(ty::TypeAndMut {\n-                                mutbl: hir::Mutability::Not,\n-                                ty: ty_to,\n-                            }) => ty_to,\n+                        let (ty_to, ty_to_mut) = match ty.kind() {\n+                            ty::RawPtr(ty::TypeAndMut { mutbl: ty_to_mut, ty: ty_to }) => {\n+                                (ty_to, *ty_to_mut)\n+                            }\n                             _ => {\n                                 span_mirbug!(\n                                     self,\n@@ -2231,6 +2229,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         };\n \n+                        if ty_to_mut == Mutability::Mut && ty_mut == Mutability::Not {\n+                            span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"ArrayToPointer cast from const {:?} to mut {:?}\",\n+                                ty,\n+                                ty_to\n+                            );\n+                            return;\n+                        }\n+\n                         if let Err(terr) = self.sub_types(\n                             ty_elem,\n                             ty_to,"}, {"sha": "16c344e8e2b9e2bc893bdf6051b112bf13292c90", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e260e914aefb6896a65de025fb34127cccaf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e260e914aefb6896a65de025fb34127cccaf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=fc93e260e914aefb6896a65de025fb34127cccaf", "patch": "@@ -765,9 +765,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         m_expr: ty::TypeAndMut<'tcx>,\n         m_cast: ty::TypeAndMut<'tcx>,\n     ) -> Result<CastKind, CastError> {\n-        // array-ptr-cast.\n-\n-        if m_expr.mutbl == hir::Mutability::Not && m_cast.mutbl == hir::Mutability::Not {\n+        // array-ptr-cast: allow mut-to-mut, mut-to-const, const-to-const\n+        if m_expr.mutbl == hir::Mutability::Mut || m_cast.mutbl == hir::Mutability::Not {\n             if let ty::Array(ety, _) = m_expr.ty.kind() {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of"}, {"sha": "e8f2c71477a5fab5ce27c00d8216d441c7e1304c", "filename": "src/test/ui/array-slice-vec/vector-cast-weirdness.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e260e914aefb6896a65de025fb34127cccaf/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e260e914aefb6896a65de025fb34127cccaf/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.rs?ref=fc93e260e914aefb6896a65de025fb34127cccaf", "patch": "@@ -1,7 +1,11 @@\n // Issue #14893. Tests that casts from vectors don't behave strangely in the\n // presence of the `_` type shorthand notation.\n+//\n // Update: after a change to the way casts are done, we have more type information\n // around and so the errors here are no longer exactly the same.\n+//\n+// Update: With PR #81479 some of the previously rejected cases are now allowed.\n+// New test cases added.\n \n struct X {\n     y: [u8; 2],\n@@ -12,13 +16,19 @@ fn main() {\n \n     // No longer a type mismatch - the `_` can be fully resolved by type inference.\n     let p1: *const u8 = &x1.y as *const _;\n+    let p1: *mut u8 = &x1.y as *mut _;\n+    //~^ ERROR: casting `&[u8; 2]` as `*mut u8` is invalid\n     let t1: *const [u8; 2] = &x1.y as *const _;\n+    let t1: *mut [u8; 2] = &x1.y as *mut _;\n+    //~^ ERROR: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n     let h1: *const [u8; 2] = &x1.y as *const [u8; 2];\n+    let t1: *mut [u8; 2] = &x1.y as *mut [u8; 2];\n+    //~^ ERROR: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n \n     let mut x1 = X { y: [0, 0] };\n \n-    // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n-    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR casting\n+    let p1: *mut u8 = &mut x1.y as *mut _;\n+    let p2: *const u8 = &mut x1.y as *const _;\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }"}, {"sha": "6fdb1ac9e3059bb26d1dd77d2a08d23d50622726", "filename": "src/test/ui/array-slice-vec/vector-cast-weirdness.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fc93e260e914aefb6896a65de025fb34127cccaf/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc93e260e914aefb6896a65de025fb34127cccaf/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvector-cast-weirdness.stderr?ref=fc93e260e914aefb6896a65de025fb34127cccaf", "patch": "@@ -1,9 +1,21 @@\n-error[E0606]: casting `&mut [u8; 2]` as `*mut u8` is invalid\n-  --> $DIR/vector-cast-weirdness.rs:21:23\n+error[E0606]: casting `&[u8; 2]` as `*mut u8` is invalid\n+  --> $DIR/vector-cast-weirdness.rs:19:23\n    |\n-LL |     let p1: *mut u8 = &mut x1.y as *mut _;\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |     let p1: *mut u8 = &x1.y as *mut _;\n+   |                       ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0606]: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n+  --> $DIR/vector-cast-weirdness.rs:22:28\n+   |\n+LL |     let t1: *mut [u8; 2] = &x1.y as *mut _;\n+   |                            ^^^^^^^^^^^^^^^\n+\n+error[E0606]: casting `&[u8; 2]` as `*mut [u8; 2]` is invalid\n+  --> $DIR/vector-cast-weirdness.rs:25:28\n+   |\n+LL |     let t1: *mut [u8; 2] = &x1.y as *mut [u8; 2];\n+   |                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0606`."}]}