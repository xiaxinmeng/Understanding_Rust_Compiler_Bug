{"sha": "951576051bafe03cd6ea36707e4ed8b25355fb58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MTU3NjA1MWJhZmUwM2NkNmVhMzY3MDdlNGVkOGIyNTM1NWZiNTg=", "commit": {"author": {"name": "J. Ryan Stinnett", "email": "jryans@gmail.com", "date": "2020-11-11T22:25:48Z"}, "committer": {"name": "J. Ryan Stinnett", "email": "jryans@gmail.com", "date": "2020-11-12T01:41:49Z"}, "message": "Update thread and futex APIs to work with Emscripten\n\nThis updates the thread and futex APIs in `std` to match the APIs exposed by\nEmscripten. This allows threads to run on `wasm32-unknown-emscripten` and the\nthread parker to compile without errors related to the missing `futex` module.\n\nTo make use of this, Rust code must be compiled with `-C target-feature=atomics`\nand Emscripten must link with `-pthread`.\n\nI have confirmed this works well locally when building multithreaded crates.\nAttempting to enable `std` thread tests currently fails for seemingly obscure\nreasons and Emscripten is currently disabled in CI, so further work is needed to\nhave proper test coverage here.", "tree": {"sha": "97623f631d7ab7d34b9e91a44ff738b8f57335fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97623f631d7ab7d34b9e91a44ff738b8f57335fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/951576051bafe03cd6ea36707e4ed8b25355fb58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/951576051bafe03cd6ea36707e4ed8b25355fb58", "html_url": "https://github.com/rust-lang/rust/commit/951576051bafe03cd6ea36707e4ed8b25355fb58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/951576051bafe03cd6ea36707e4ed8b25355fb58/comments", "author": {"login": "jryans", "id": 279572, "node_id": "MDQ6VXNlcjI3OTU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/279572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jryans", "html_url": "https://github.com/jryans", "followers_url": "https://api.github.com/users/jryans/followers", "following_url": "https://api.github.com/users/jryans/following{/other_user}", "gists_url": "https://api.github.com/users/jryans/gists{/gist_id}", "starred_url": "https://api.github.com/users/jryans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jryans/subscriptions", "organizations_url": "https://api.github.com/users/jryans/orgs", "repos_url": "https://api.github.com/users/jryans/repos", "events_url": "https://api.github.com/users/jryans/events{/privacy}", "received_events_url": "https://api.github.com/users/jryans/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jryans", "id": 279572, "node_id": "MDQ6VXNlcjI3OTU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/279572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jryans", "html_url": "https://github.com/jryans", "followers_url": "https://api.github.com/users/jryans/followers", "following_url": "https://api.github.com/users/jryans/following{/other_user}", "gists_url": "https://api.github.com/users/jryans/gists{/gist_id}", "starred_url": "https://api.github.com/users/jryans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jryans/subscriptions", "organizations_url": "https://api.github.com/users/jryans/orgs", "repos_url": "https://api.github.com/users/jryans/repos", "events_url": "https://api.github.com/users/jryans/events{/privacy}", "received_events_url": "https://api.github.com/users/jryans/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "html_url": "https://github.com/rust-lang/rust/commit/e3051d8c24467b54c81da9d9ad70a3e82e106ec1"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "7ec3794d0b051f306b9586e3ca5077d3edf98f07", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/951576051bafe03cd6ea36707e4ed8b25355fb58/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/951576051bafe03cd6ea36707e4ed8b25355fb58/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=951576051bafe03cd6ea36707e4ed8b25355fb58", "patch": "@@ -1,10 +1,17 @@\n-#![cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#![cfg(any(\n+    target_os = \"linux\",\n+    target_os = \"android\",\n+    all(target_os = \"emscripten\", target_feature = \"atomics\")\n+))]\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n use crate::convert::TryInto;\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n use crate::ptr::null;\n use crate::sync::atomic::AtomicI32;\n use crate::time::Duration;\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n     let timespec = timeout.and_then(|d| {\n         Some(libc::timespec {\n@@ -25,6 +32,29 @@ pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n     }\n }\n \n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n+    extern \"C\" {\n+        fn emscripten_futex_wait(\n+            addr: *const AtomicI32,\n+            val: libc::c_uint,\n+            max_wait_ms: libc::c_double,\n+        ) -> libc::c_int;\n+    }\n+\n+    let timeout_ms = timeout.map(|d| d.as_millis());\n+    unsafe {\n+        emscripten_futex_wait(\n+            futex as *const AtomicI32,\n+            // `val` is declared unsigned to match the Emscripten headers, but since it's used as\n+            // an opaque value, we can ignore the meaning of signed vs. unsigned and cast here.\n+            expected as libc::c_uint,\n+            timeout_ms.map_or(crate::f64::INFINITY, |d| d as libc::c_double),\n+        );\n+    }\n+}\n+\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub fn futex_wake(futex: &AtomicI32) {\n     unsafe {\n         libc::syscall(\n@@ -35,3 +65,14 @@ pub fn futex_wake(futex: &AtomicI32) {\n         );\n     }\n }\n+\n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wake(futex: &AtomicI32) {\n+    extern \"C\" {\n+        fn emscripten_futex_wake(addr: *const AtomicI32, count: libc::c_int) -> libc::c_int;\n+    }\n+\n+    unsafe {\n+        emscripten_futex_wake(futex as *const AtomicI32, 1);\n+    }\n+}"}, {"sha": "b7b72cc392fd324ee2f274a882692b1da9a68a18", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/951576051bafe03cd6ea36707e4ed8b25355fb58/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/951576051bafe03cd6ea36707e4ed8b25355fb58/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=951576051bafe03cd6ea36707e4ed8b25355fb58", "patch": "@@ -22,24 +22,6 @@ pub struct Thread {\n unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n-// The pthread_attr_setstacksize symbol doesn't exist in the emscripten libc,\n-// so we have to not link to it to satisfy emcc's ERROR_ON_UNDEFINED_SYMBOLS.\n-#[cfg(not(target_os = \"emscripten\"))]\n-unsafe fn pthread_attr_setstacksize(\n-    attr: *mut libc::pthread_attr_t,\n-    stack_size: libc::size_t,\n-) -> libc::c_int {\n-    libc::pthread_attr_setstacksize(attr, stack_size)\n-}\n-\n-#[cfg(target_os = \"emscripten\")]\n-unsafe fn pthread_attr_setstacksize(\n-    _attr: *mut libc::pthread_attr_t,\n-    _stack_size: libc::size_t,\n-) -> libc::c_int {\n-    panic!()\n-}\n-\n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n     pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n@@ -50,7 +32,7 @@ impl Thread {\n \n         let stack_size = cmp::max(stack, min_stack_size(&attr));\n \n-        match pthread_attr_setstacksize(&mut attr, stack_size) {\n+        match libc::pthread_attr_setstacksize(&mut attr, stack_size) {\n             0 => {}\n             n => {\n                 assert_eq!(n, libc::EINVAL);"}]}