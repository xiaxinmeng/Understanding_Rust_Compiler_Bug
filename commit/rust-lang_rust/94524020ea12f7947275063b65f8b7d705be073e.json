{"sha": "94524020ea12f7947275063b65f8b7d705be073e", "node_id": "C_kwDOAAsO6NoAKDk0NTI0MDIwZWExMmY3OTQ3Mjc1MDYzYjY1ZjhiN2Q3MDViZTA3M2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T14:26:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T14:26:24Z"}, "message": "Auto merge of #110036 - jackh726:placeholder_boundvar, r=nnethercote\n\nRemove u32 on BrAnon and BoundTyKind::Anon in favor of BoundVar on Placeholder types\n\nr? `@nnethercote`\n\nBetter alternative to #110025", "tree": {"sha": "1a5f78ac4b1b8346308134d503bf9e5c9c5e565a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5f78ac4b1b8346308134d503bf9e5c9c5e565a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94524020ea12f7947275063b65f8b7d705be073e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94524020ea12f7947275063b65f8b7d705be073e", "html_url": "https://github.com/rust-lang/rust/commit/94524020ea12f7947275063b65f8b7d705be073e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94524020ea12f7947275063b65f8b7d705be073e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da140814682407ee326d36f5256bc883899a7388", "url": "https://api.github.com/repos/rust-lang/rust/commits/da140814682407ee326d36f5256bc883899a7388", "html_url": "https://github.com/rust-lang/rust/commit/da140814682407ee326d36f5256bc883899a7388"}, {"sha": "f08f15481afbd122355a6e1223c007fc774825ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f08f15481afbd122355a6e1223c007fc774825ad", "html_url": "https://github.com/rust-lang/rust/commit/f08f15481afbd122355a6e1223c007fc774825ad"}], "stats": {"total": 404, "additions": 204, "deletions": 200}, "files": [{"sha": "84f75caa6928aefa2aa372ddad8db66235a60a38", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -181,8 +181,8 @@ trait TypeOpInfo<'tcx> {\n         };\n \n         let placeholder_region = tcx.mk_re_placeholder(ty::Placeholder {\n-            name: placeholder.name,\n             universe: adjusted_universe.into(),\n+            bound: placeholder.bound,\n         });\n \n         let error_region =\n@@ -191,8 +191,8 @@ trait TypeOpInfo<'tcx> {\n                     error_placeholder.universe.as_u32().checked_sub(base_universe.as_u32());\n                 adjusted_universe.map(|adjusted| {\n                     tcx.mk_re_placeholder(ty::Placeholder {\n-                        name: error_placeholder.name,\n                         universe: adjusted.into(),\n+                        bound: error_placeholder.bound,\n                     })\n                 })\n             } else {"}, {"sha": "110354a20d8393e94ca75f59fb82ea0762847a62", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -467,9 +467,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let ty::Ref(region, ..) = ty.kind() {\n             match **region {\n                 ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n-                | ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n-                    printer.region_highlight_mode.highlighting_bound_region(br, counter)\n-                }\n+                | ty::RePlaceholder(ty::PlaceholderRegion {\n+                    bound: ty::BoundRegion { kind: br, .. },\n+                    ..\n+                }) => printer.region_highlight_mode.highlighting_bound_region(br, counter),\n                 _ => {}\n             }\n         }\n@@ -485,9 +486,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let region = if let ty::Ref(region, ..) = ty.kind() {\n             match **region {\n                 ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n-                | ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n-                    printer.region_highlight_mode.highlighting_bound_region(br, counter)\n-                }\n+                | ty::RePlaceholder(ty::PlaceholderRegion {\n+                    bound: ty::BoundRegion { kind: br, .. },\n+                    ..\n+                }) => printer.region_highlight_mode.highlighting_bound_region(br, counter),\n                 _ => {}\n             }\n             region"}, {"sha": "9fcebeb0acdc7ef670ce658c07afc56126dd1487", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             .regioncx\n             .placeholders_contained_in(lower_bound)\n             .map(|placeholder| {\n-                if let Some(id) = placeholder.name.get_id()\n+                if let Some(id) = placeholder.bound.kind.get_id()\n                     && let Some(placeholder_id) = id.as_local()\n                     && let gat_hir_id = hir.local_def_id_to_hir_id(placeholder_id)\n                     && let Some(generics_impl) = hir.get_parent(gat_hir_id).generics()"}, {"sha": "624a4a00c319fddaded4e5db2aa4f707473703ea", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -1342,9 +1342,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     let region_ctxt_fn = || {\n                         let reg_info = match br.kind {\n-                            ty::BoundRegionKind::BrAnon(_, Some(span)) => {\n-                                BoundRegionInfo::Span(span)\n-                            }\n+                            ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n                             ty::BoundRegionKind::BrAnon(..) => {\n                                 BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n                             }"}, {"sha": "83429f2ddef360e0cb6b1cf48238694e15f5e842", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -123,8 +123,8 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             .constraints\n             .placeholder_region(self.type_checker.infcx, placeholder);\n \n-        let reg_info = match placeholder.name {\n-            ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n+        let reg_info = match placeholder.bound.kind {\n+            ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n             ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n             ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),"}, {"sha": "e0408b36af9e40d25fdc7b45f36d960826d43f35", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -2336,10 +2336,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 FnMutDelegate {\n                     regions: &mut |_| tcx.lifetimes.re_erased,\n                     types: &mut |bv| {\n-                        tcx.mk_placeholder(ty::PlaceholderType { universe, name: bv.kind })\n+                        tcx.mk_placeholder(ty::PlaceholderType { universe, bound: bv })\n                     },\n                     consts: &mut |bv, ty| {\n-                        tcx.mk_const(ty::PlaceholderConst { universe, name: bv }, ty)\n+                        tcx.mk_const(ty::PlaceholderConst { universe, bound: bv }, ty)\n                     },\n                 },\n             );\n@@ -2525,11 +2525,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                             regions: &mut |_| tcx.lifetimes.re_erased,\n                                             types: &mut |bv| tcx.mk_placeholder(ty::PlaceholderType {\n                                                 universe,\n-                                                name: bv.kind,\n+                                                bound: bv,\n                                             }),\n                                             consts: &mut |bv, ty| tcx.mk_const(ty::PlaceholderConst {\n                                                 universe,\n-                                                name: bv\n+                                                bound: bv,\n                                             }, ty),\n                                         })\n                                     )"}, {"sha": "854974d1605a5818f54b8674f5eaacc17f9a555a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -139,14 +139,14 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let name_str = intrinsic_name.as_str();\n \n     let bound_vars = tcx.mk_bound_variable_kinds(&[\n-        ty::BoundVariableKind::Region(ty::BrAnon(0, None)),\n+        ty::BoundVariableKind::Region(ty::BrAnon(None)),\n         ty::BoundVariableKind::Region(ty::BrEnv),\n     ]);\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n             let region = tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n-                ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) },\n+                ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) },\n             );\n             let env_region = tcx.mk_re_late_bound(\n                 ty::INNERMOST,\n@@ -387,8 +387,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 );\n                 let discriminant_def_id = assoc_items[0];\n \n-                let br =\n-                    ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n+                let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) };\n                 (\n                     1,\n                     vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n@@ -440,8 +439,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::nontemporal_store => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)], tcx.mk_unit()),\n \n             sym::raw_eq => {\n-                let br =\n-                    ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(0, None) };\n+                let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) };\n                 let param_ty = tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0));\n                 (1, vec![param_ty; 2], tcx.types.bool)\n             }"}, {"sha": "84ed8f3780e172e5395723296d2140868770b34c", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -240,7 +240,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n             let mut counter = 0;\n             let mut mk_bound_region = |span| {\n-                let kind = ty::BrAnon(counter, span);\n+                let kind = ty::BrAnon(span);\n                 let var = ty::BoundVar::from_u32(counter);\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n@@ -263,7 +263,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                     }\n                     ty::ReLateBound(_, ty::BoundRegion { kind, .. })\n                     | ty::ReFree(ty::FreeRegion { bound_region: kind, .. }) => match kind {\n-                        ty::BoundRegionKind::BrAnon(_, span) => mk_bound_region(span),\n+                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(span),\n                         ty::BoundRegionKind::BrNamed(def_id, _) => {\n                             mk_bound_region(Some(fcx.tcx.def_span(def_id)))\n                         }\n@@ -294,7 +294,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             FnMutDelegate {\n                 regions: &mut |br| {\n                     let kind = match br.kind {\n-                        ty::BrAnon(_, span) => ty::BrAnon(counter, span),\n+                        ty::BrAnon(span) => ty::BrAnon(span),\n                         _ => br.kind,\n                     };\n                     let var = ty::BoundVar::from_usize(bound_vars.len());"}, {"sha": "30f6af74b83ef5b4f6e575588d698ac11c8ea62a", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -90,9 +90,8 @@ impl<'a> DescriptionCtx<'a> {\n                             };\n                             me.span = Some(sp);\n                         }\n-                        ty::BrAnon(idx, span) => {\n-                            me.kind = \"anon_num_here\";\n-                            me.num_arg = idx+1;\n+                        ty::BrAnon(span) => {\n+                            me.kind = \"defined_here\";\n                             me.span = match span {\n                                 Some(_) => span,\n                                 None => Some(tcx.def_span(scope)),"}, {"sha": "e808911a38b12f40a54064ec88bb49decbf4c230", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -772,7 +772,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n-        let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n+        let br = ty::BoundRegion { var, kind: ty::BrAnon(None) };\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n "}, {"sha": "fbb2257bf67c4929473668d5e387da863f60f1d9", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -125,9 +125,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 ty.into()\n             }\n \n-            CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, name }) => {\n+            CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, bound }) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::PlaceholderType { universe: universe_mapped, name };\n+                let placeholder_mapped = ty::PlaceholderType { universe: universe_mapped, bound };\n                 self.tcx.mk_placeholder(placeholder_mapped).into()\n             }\n \n@@ -138,9 +138,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 )\n                 .into(),\n \n-            CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, name }) => {\n+            CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, bound }) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::PlaceholderRegion { universe: universe_mapped, name };\n+                let placeholder_mapped = ty::PlaceholderRegion { universe: universe_mapped, bound };\n                 self.tcx.mk_re_placeholder(placeholder_mapped).into()\n             }\n \n@@ -152,9 +152,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 )\n                 .into(),\n \n-            CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n+            CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, bound }, ty) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n+                let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, bound };\n                 self.tcx.mk_const(placeholder_mapped, ty).into()\n             }\n         }"}, {"sha": "86fca9797d029c73279811e648988f97bb7ca0bd", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -170,15 +170,15 @@ fn msg_span_from_named_region<'tcx>(\n         }\n         ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            name: ty::BoundRegionKind::BrNamed(def_id, name),\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrNamed(def_id, name), .. },\n             ..\n         }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            name: ty::BoundRegionKind::BrAnon(_, Some(span)),\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(Some(span)), .. },\n             ..\n         }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n         ty::RePlaceholder(ty::PlaceholderRegion {\n-            name: ty::BoundRegionKind::BrAnon(_, None),\n+            bound: ty::BoundRegion { kind: ty::BoundRegionKind::BrAnon(None), .. },\n             ..\n         }) => (format!(\"an anonymous lifetime\"), None),\n         _ => bug!(\"{:?}\", region),\n@@ -226,8 +226,8 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n                         };\n                         (text, sp)\n                     }\n-                    ty::BrAnon(idx, span) => (\n-                        format!(\"the anonymous lifetime #{} defined here\", idx + 1),\n+                    ty::BrAnon(span) => (\n+                        \"the anonymous lifetime as defined here\".to_string(),\n                         match span {\n                             Some(span) => span,\n                             None => tcx.def_span(scope)"}, {"sha": "8a78a1956c9972673863f66d2c980609fa8733c5", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -16,22 +16,34 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         match &self.error {\n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::RelateRegionParamBound(span),\n-                Region(Interned(RePlaceholder(ty::Placeholder { name: sub_name, .. }), _)),\n-                Region(Interned(RePlaceholder(ty::Placeholder { name: sup_name, .. }), _)),\n+                Region(Interned(\n+                    RePlaceholder(ty::Placeholder {\n+                        bound: ty::BoundRegion { kind: sub_name, .. },\n+                        ..\n+                    }),\n+                    _,\n+                )),\n+                Region(Interned(\n+                    RePlaceholder(ty::Placeholder {\n+                        bound: ty::BoundRegion { kind: sup_name, .. },\n+                        ..\n+                    }),\n+                    _,\n+                )),\n             )) => {\n                 let span = *span;\n                 let (sub_span, sub_symbol) = match sub_name {\n                     ty::BrNamed(def_id, symbol) => {\n                         (Some(self.tcx().def_span(def_id)), Some(symbol))\n                     }\n-                    ty::BrAnon(_, span) => (*span, None),\n+                    ty::BrAnon(span) => (*span, None),\n                     ty::BrEnv => (None, None),\n                 };\n                 let (sup_span, sup_symbol) = match sup_name {\n                     ty::BrNamed(def_id, symbol) => {\n                         (Some(self.tcx().def_span(def_id)), Some(symbol))\n                     }\n-                    ty::BrAnon(_, span) => (*span, None),\n+                    ty::BrAnon(span) => (*span, None),\n                     ty::BrEnv => (None, None),\n                 };\n                 let diag = match (sub_span, sup_span, sub_symbol, sup_symbol) {"}, {"sha": "a63cfbc919c65caffeb6dae90ffad44136234444", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -82,20 +82,20 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         let delegate = FnMutDelegate {\n             regions: &mut |br: ty::BoundRegion| {\n-                self.tcx.mk_re_placeholder(ty::PlaceholderRegion {\n-                    universe: next_universe,\n-                    name: br.kind,\n-                })\n+                self.tcx\n+                    .mk_re_placeholder(ty::PlaceholderRegion { universe: next_universe, bound: br })\n             },\n             types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n-                    name: bound_ty.kind,\n+                    bound: bound_ty,\n                 })\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n-                self.tcx\n-                    .mk_const(ty::PlaceholderConst { universe: next_universe, name: bound_var }, ty)\n+                self.tcx.mk_const(\n+                    ty::PlaceholderConst { universe: next_universe, bound: bound_var },\n+                    ty,\n+                )\n             },\n         };\n "}, {"sha": "b4f2ad0bb34330b2c6c1b91ea69903145feb7308", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -2130,13 +2130,17 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n \n         fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n             if let ty::Infer(_) = t.kind() {\n+                let idx = {\n+                    let idx = self.idx;\n+                    self.idx += 1;\n+                    idx\n+                };\n                 self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundTyKind::Anon({\n-                        let idx = self.idx;\n-                        self.idx += 1;\n-                        idx\n-                    }),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_u32(idx),\n+                        kind: ty::BoundTyKind::Anon,\n+                    },\n                 })\n             } else {\n                 t.super_fold_with(self)\n@@ -2153,7 +2157,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                 self.tcx.mk_const(\n                     ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from_u32({\n+                        bound: ty::BoundVar::from_u32({\n                             let idx = self.idx;\n                             self.idx += 1;\n                             idx"}, {"sha": "9f7b26b87f459470fe756cf8d0223577a99ba83b", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -296,7 +296,7 @@ where\n                     universe\n                 });\n \n-                let placeholder = ty::PlaceholderRegion { universe, name: br.kind };\n+                let placeholder = ty::PlaceholderRegion { universe, bound: br };\n                 debug!(?placeholder);\n                 let placeholder_reg = nll_delegate.next_placeholder_region(placeholder);\n                 debug!(?placeholder_reg);"}, {"sha": "b8ba98fc0a9f53901f2b75d110c58c394da5c09c", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -290,9 +290,9 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n     ) -> TypeError<'tcx> {\n         debug!(\"error: placeholder={:?}, other_region={:?}\", placeholder, other_region);\n         if self.overly_polymorphic {\n-            TypeError::RegionsOverlyPolymorphic(placeholder.name, other_region)\n+            TypeError::RegionsOverlyPolymorphic(placeholder.bound.kind, other_region)\n         } else {\n-            TypeError::RegionsInsufficientlyPolymorphic(placeholder.name, other_region)\n+            TypeError::RegionsInsufficientlyPolymorphic(placeholder.bound.kind, other_region)\n         }\n     }\n }"}, {"sha": "f668c4e77beaeda2e6c1e1244b74dc7f76b6e2fc", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -149,15 +149,15 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n         }\n     }\n \n-    pub fn expect_anon_placeholder(self) -> u32 {\n+    pub fn expect_placeholder_index(self) -> usize {\n         match self.kind {\n             CanonicalVarKind::Ty(_)\n             | CanonicalVarKind::Region(_)\n             | CanonicalVarKind::Const(_, _) => bug!(\"expected placeholder: {self:?}\"),\n \n-            CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.name.expect_anon(),\n-            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.name.expect_anon(),\n-            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.name.as_u32(),\n+            CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.bound.var.as_usize(),\n+            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.bound.var.as_usize(),\n+            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.bound.as_usize(),\n         }\n     }\n }\n@@ -411,7 +411,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                         CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n                             let br = ty::BoundRegion {\n                                 var: ty::BoundVar::from_usize(i),\n-                                kind: ty::BrAnon(i as u32, None),\n+                                kind: ty::BrAnon(None),\n                             };\n                             tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n                         }"}, {"sha": "cfdf1dcf5c02967f058b38f2494a3ca6f3e7fcab", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -411,10 +411,8 @@ impl<'tcx> ClosureOutlivesSubjectTy<'tcx> {\n     pub fn bind(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n         let inner = tcx.fold_regions(ty, |r, depth| match r.kind() {\n             ty::ReVar(vid) => {\n-                let br = ty::BoundRegion {\n-                    var: ty::BoundVar::new(vid.index()),\n-                    kind: ty::BrAnon(vid.as_u32(), None),\n-                };\n+                let br =\n+                    ty::BoundRegion { var: ty::BoundVar::new(vid.index()), kind: ty::BrAnon(None) };\n                 tcx.mk_re_late_bound(depth, br)\n             }\n             _ => bug!(\"unexpected region in ClosureOutlivesSubjectTy: {r:?}\"),"}, {"sha": "299b1bf1d96e4d962372d9b517d7d837fcef559a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -311,7 +311,7 @@ pub struct CommonLifetimes<'tcx> {\n     pub re_vars: Vec<Region<'tcx>>,\n \n     /// Pre-interned values of the form:\n-    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(v, None) })`\n+    /// `ReLateBound(DebruijnIndex(i), BoundRegion { var: v, kind: BrAnon(None) })`\n     /// for small values of `i` and `v`.\n     pub re_late_bounds: Vec<Vec<Region<'tcx>>>,\n }\n@@ -386,10 +386,7 @@ impl<'tcx> CommonLifetimes<'tcx> {\n                     .map(|v| {\n                         mk(ty::ReLateBound(\n                             ty::DebruijnIndex::from(i),\n-                            ty::BoundRegion {\n-                                var: ty::BoundVar::from(v),\n-                                kind: ty::BrAnon(v, None),\n-                            },\n+                            ty::BoundRegion { var: ty::BoundVar::from(v), kind: ty::BrAnon(None) },\n                         ))\n                     })\n                     .collect()\n@@ -2075,10 +2072,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         bound_region: ty::BoundRegion,\n     ) -> Region<'tcx> {\n         // Use a pre-interned one when possible.\n-        if let ty::BoundRegion { var, kind: ty::BrAnon(v, None) } = bound_region\n-            && var.as_u32() == v\n+        if let ty::BoundRegion { var, kind: ty::BrAnon(None) } = bound_region\n             && let Some(inner) = self.lifetimes.re_late_bounds.get(debruijn.as_usize())\n-            && let Some(re) = inner.get(v as usize).copied()\n+            && let Some(re) = inner.get(var.as_usize()).copied()\n         {\n             re\n         } else {"}, {"sha": "203e16bea27fe9ccbe6603f5717dee40f9401352", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -379,9 +379,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| {\n-                        ty::BoundVariableKind::Region(ty::BrAnon(index as u32, None))\n-                    })\n+                    .or_insert_with(|| ty::BoundVariableKind::Region(ty::BrAnon(None)))\n                     .expect_region();\n                 let br = ty::BoundRegion { var, kind };\n                 self.tcx.mk_re_late_bound(ty::INNERMOST, br)\n@@ -391,9 +389,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let index = entry.index();\n                 let var = ty::BoundVar::from_usize(index);\n                 let kind = entry\n-                    .or_insert_with(|| {\n-                        ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon(index as u32))\n-                    })\n+                    .or_insert_with(|| ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon))\n                     .expect_ty();\n                 self.tcx.mk_bound(ty::INNERMOST, BoundTy { var, kind })\n             }"}, {"sha": "c856bb25e1474c5d96713baa0655092a8ec12ae0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -1454,12 +1454,12 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n #[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct Placeholder<T> {\n     pub universe: UniverseIndex,\n-    pub name: T,\n+    pub bound: T,\n }\n \n-pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n+pub type PlaceholderRegion = Placeholder<BoundRegion>;\n \n-pub type PlaceholderType = Placeholder<BoundTyKind>;\n+pub type PlaceholderType = Placeholder<BoundTy>;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n #[derive(TyEncodable, TyDecodable, PartialOrd, Ord)]"}, {"sha": "bc0ccc1ebc3a9e32c954a7430586be8ed38c6f81", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -701,9 +701,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon(bv) => {\n-                    self.pretty_print_bound_var(debruijn, ty::BoundVar::from_u32(bv))?\n-                }\n+                ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n                 ty::BoundTyKind::Param(_, s) => match self.should_print_verbose() {\n                     true if debruijn == ty::INNERMOST => p!(write(\"^{}\", s)),\n                     true => p!(write(\"^{}_{}\", debruijn.index(), s)),\n@@ -739,8 +737,8 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print(data))\n                 }\n             }\n-            ty::Placeholder(placeholder) => match placeholder.name {\n-                ty::BoundTyKind::Anon(_) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::Placeholder(placeholder) => match placeholder.bound.kind {\n+                ty::BoundTyKind::Anon => p!(write(\"Placeholder({:?})\", placeholder)),\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n@@ -2104,7 +2102,9 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n-            | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+            | ty::RePlaceholder(ty::Placeholder {\n+                bound: ty::BoundRegion { kind: br, .. }, ..\n+            }) => {\n                 if br.is_named() {\n                     return true;\n                 }\n@@ -2181,7 +2181,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n             ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n             | ty::ReFree(ty::FreeRegion { bound_region: br, .. })\n-            | ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+            | ty::RePlaceholder(ty::Placeholder {\n+                bound: ty::BoundRegion { kind: br, .. }, ..\n+            }) => {\n                 if let ty::BrNamed(_, name) = br && br.is_named() {\n                     p!(write(\"{}\", name));\n                     return Ok(self);\n@@ -2259,7 +2261,10 @@ impl<'a, 'tcx> ty::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n             ty::ReLateBound(db, br) if db >= self.current_index => {\n                 *self.region_map.entry(br).or_insert_with(|| name(Some(db), self.current_index, br))\n             }\n-            ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n+            ty::RePlaceholder(ty::PlaceholderRegion {\n+                bound: ty::BoundRegion { kind, .. },\n+                ..\n+            }) => {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n                 match kind {"}, {"sha": "5c604bb6db274297ee6fb3ebe37fabed88616662", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n impl fmt::Debug for ty::BoundRegionKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            ty::BrAnon(n, span) => write!(f, \"BrAnon({n:?}, {span:?})\"),\n+            ty::BrAnon(span) => write!(f, \"BrAnon({span:?})\"),\n             ty::BrNamed(did, name) => {\n                 if did.is_crate_root() {\n                     write!(f, \"BrNamed({})\", name)\n@@ -254,8 +254,8 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AssocKind,\n     crate::ty::AliasKind,\n     crate::ty::AliasRelationDirection,\n-    crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n-    crate::ty::Placeholder<crate::ty::BoundTyKind>,\n+    crate::ty::Placeholder<crate::ty::BoundRegion>,\n+    crate::ty::Placeholder<crate::ty::BoundTy>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,"}, {"sha": "0e2e2a956ec7b8c55eadd4f72b1e48616f0eb535", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -60,7 +60,7 @@ pub struct FreeRegion {\n #[derive(HashStable)]\n pub enum BoundRegionKind {\n     /// An anonymous region parameter for a given fn (&T)\n-    BrAnon(u32, Option<Span>),\n+    BrAnon(Option<Span>),\n \n     /// Named region parameters for functions (a in &'a T)\n     ///\n@@ -107,15 +107,6 @@ impl BoundRegionKind {\n             _ => None,\n         }\n     }\n-\n-    pub fn expect_anon(&self) -> u32 {\n-        match *self {\n-            BoundRegionKind::BrNamed(_, _) | BoundRegionKind::BrEnv => {\n-                bug!(\"expected anon region: {self:?}\")\n-            }\n-            BoundRegionKind::BrAnon(idx, _) => idx,\n-        }\n-    }\n }\n \n pub trait Article {\n@@ -136,10 +127,6 @@ impl<'tcx> Article for TyKind<'tcx> {\n     }\n }\n \n-// `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyKind<'_>, 32);\n-\n /// A closure can be modeled as a struct that looks like:\n /// ```ignore (illustrative)\n /// struct Closure<'l0...'li, T0...Tj, CK, CS, U>(...U);\n@@ -1533,22 +1520,13 @@ pub struct BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundTyKind {\n-    Anon(u32),\n+    Anon,\n     Param(DefId, Symbol),\n }\n \n-impl BoundTyKind {\n-    pub fn expect_anon(self) -> u32 {\n-        match self {\n-            BoundTyKind::Anon(i) => i,\n-            _ => bug!(),\n-        }\n-    }\n-}\n-\n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n-        BoundTy { var, kind: BoundTyKind::Anon(var.as_u32()) }\n+        BoundTy { var, kind: BoundTyKind::Anon }\n     }\n }\n \n@@ -1632,7 +1610,7 @@ impl<'tcx> Region<'tcx> {\n                 ty::ReLateBound(_, br) => br.kind.get_name(),\n                 ty::ReFree(fr) => fr.bound_region.get_name(),\n                 ty::ReStatic => Some(kw::StaticLifetime),\n-                ty::RePlaceholder(placeholder) => placeholder.name.get_name(),\n+                ty::RePlaceholder(placeholder) => placeholder.bound.kind.get_name(),\n                 _ => None,\n             };\n \n@@ -1650,7 +1628,7 @@ impl<'tcx> Region<'tcx> {\n             ty::ReFree(fr) => fr.bound_region.is_named(),\n             ty::ReStatic => true,\n             ty::ReVar(..) => false,\n-            ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n+            ty::RePlaceholder(placeholder) => placeholder.bound.kind.is_named(),\n             ty::ReErased => false,\n             ty::ReError(_) => false,\n         }\n@@ -2514,3 +2492,14 @@ impl<'tcx> VarianceDiagInfo<'tcx> {\n         }\n     }\n }\n+\n+// Some types are used a lot. Make sure they don't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+mod size_asserts {\n+    use super::*;\n+    use rustc_data_structures::static_assert_size;\n+    // tidy-alphabetical-start\n+    static_assert_size!(RegionKind<'_>, 28);\n+    static_assert_size!(TyKind<'_>, 32);\n+    // tidy-alphabetical-end\n+}"}, {"sha": "ee883285531df52f232ced3d6098a3406e53fa38", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::base_n;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -81,9 +81,9 @@ pub(super) fn mangle_typeid_for_trait_ref<'tcx>(\n struct BinderLevel {\n     /// The range of distances from the root of what's\n     /// being printed, to the lifetimes in a binder.\n-    /// Specifically, a `BrAnon(i)` lifetime has depth\n-    /// `lifetime_depths.start + i`, going away from the\n-    /// the root and towards its use site, as `i` increases.\n+    /// Specifically, a `BrAnon` lifetime has depth\n+    /// `lifetime_depths.start + index`, going away from the\n+    /// the root and towards its use site, as the var index increases.\n     /// This is used to flatten rustc's pairing of `BrAnon`\n     /// (intra-binder disambiguation) with a `DebruijnIndex`\n     /// (binder addressing), to \"true\" de Bruijn indices,\n@@ -208,24 +208,15 @@ impl<'tcx> SymbolMangler<'tcx> {\n     where\n         T: TypeVisitable<TyCtxt<'tcx>>,\n     {\n-        // FIXME(non-lifetime-binders): What to do here?\n-        let regions = if value.has_late_bound_regions() {\n-            self.tcx.collect_referenced_late_bound_regions(value)\n-        } else {\n-            FxHashSet::default()\n-        };\n-\n         let mut lifetime_depths =\n             self.binders.last().map(|b| b.lifetime_depths.end).map_or(0..0, |i| i..i);\n \n-        let lifetimes = regions\n-            .into_iter()\n-            .map(|br| match br {\n-                ty::BrAnon(i, _) => i,\n-                _ => bug!(\"symbol_names: non-anonymized region `{:?}` in `{:?}`\", br, value),\n-            })\n-            .max()\n-            .map_or(0, |max| max + 1);\n+        // FIXME(non-lifetime-binders): What to do here?\n+        let lifetimes = value\n+            .bound_vars()\n+            .iter()\n+            .filter(|var| matches!(var, ty::BoundVariableKind::Region(..)))\n+            .count() as u32;\n \n         self.push_opt_integer_62(\"G\", lifetimes as u64);\n         lifetime_depths.end += lifetimes;\n@@ -338,9 +329,9 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n             // Late-bound lifetimes use indices starting at 1,\n             // see `BinderLevel` for more details.\n-            ty::ReLateBound(debruijn, ty::BoundRegion { kind: ty::BrAnon(i, _), .. }) => {\n+            ty::ReLateBound(debruijn, ty::BoundRegion { var, kind: ty::BrAnon(_) }) => {\n                 let binder = &self.binders[self.binders.len() - 1 - debruijn.index()];\n-                let depth = binder.lifetime_depths.start + i;\n+                let depth = binder.lifetime_depths.start + var.as_u32();\n \n                 1 + (self.binders.last().unwrap().lifetime_depths.end - 1 - depth)\n             }"}, {"sha": "55025e2e72b9c9589cdebafcdeb4fd04f3863918", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             self.primitive_var_infos.push(CanonicalVarInfo { kind });\n             var\n         });\n-        let br = ty::BoundRegion { var, kind: BrAnon(var.as_u32(), None) };\n+        let br = ty::BoundRegion { var, kind: BrAnon(None) };\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n \n@@ -300,14 +300,20 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             ty::Placeholder(placeholder) => match self.canonicalize_mode {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderTy(ty::Placeholder {\n                     universe: placeholder.universe,\n-                    name: BoundTyKind::Anon(self.variables.len() as u32),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_usize(self.variables.len()),\n+                        kind: ty::BoundTyKind::Anon,\n+                    },\n                 }),\n                 CanonicalizeMode::Response { .. } => CanonicalVarKind::PlaceholderTy(placeholder),\n             },\n             ty::Param(_) => match self.canonicalize_mode {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderTy(ty::Placeholder {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundTyKind::Anon(self.variables.len() as u32),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_usize(self.variables.len()),\n+                        kind: ty::BoundTyKind::Anon,\n+                    },\n                 }),\n                 CanonicalizeMode::Response { .. } => bug!(\"param ty in response: {t:?}\"),\n             },\n@@ -345,7 +351,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 var\n             }),\n         );\n-        let bt = ty::BoundTy { var, kind: BoundTyKind::Anon(var.index() as u32) };\n+        let bt = ty::BoundTy { var, kind: BoundTyKind::Anon };\n         self.interner().mk_bound(self.binder_index, bt)\n     }\n \n@@ -373,7 +379,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderConst(\n                     ty::Placeholder {\n                         universe: placeholder.universe,\n-                        name: ty::BoundVar::from(self.variables.len()),\n+                        bound: ty::BoundVar::from(self.variables.len()),\n                     },\n                     c.ty(),\n                 ),\n@@ -385,7 +391,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                 CanonicalizeMode::Input => CanonicalVarKind::PlaceholderConst(\n                     ty::Placeholder {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from(self.variables.len()),\n+                        bound: ty::BoundVar::from(self.variables.len()),\n                     },\n                     c.ty(),\n                 ),"}, {"sha": "714b6dfb7176143d439185e8d95eacca437927d1", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 } else {\n                     // For placeholders which were already part of the input, we simply map this\n                     // universal bound variable back the placeholder of the input.\n-                    original_values[info.expect_anon_placeholder() as usize]\n+                    original_values[info.expect_placeholder_index()]\n                 }\n             },\n         ));"}, {"sha": "9e851b788a5430177182a31c162bf7fe7b18dd49", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -95,17 +95,15 @@ fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n     let mut counter = 0;\n     let ty = tcx.fold_regions(ty, |mut r, current_depth| {\n         if let ty::ReErased = r.kind() {\n-            let br = ty::BoundRegion {\n-                var: ty::BoundVar::from_u32(counter),\n-                kind: ty::BrAnon(counter, None),\n-            };\n+            let br =\n+                ty::BoundRegion { var: ty::BoundVar::from_u32(counter), kind: ty::BrAnon(None) };\n             counter += 1;\n             r = tcx.mk_re_late_bound(current_depth, br);\n         }\n         r\n     });\n     let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n-        (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+        (0..counter).map(|_| ty::BoundVariableKind::Region(ty::BrAnon(None))),\n     );\n     ty::Binder::bind_with_vars(ty, bound_vars)\n }"}, {"sha": "826fc63ca06535b76ecadb40afb8a123a73e6027", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderRegion { universe, name: br.kind };\n+                let p = ty::PlaceholderRegion { universe, bound: br };\n                 self.mapped_regions.insert(p, br);\n                 self.infcx.tcx.mk_re_placeholder(p)\n             }\n@@ -790,7 +790,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderType { universe, name: bound_ty.kind };\n+                let p = ty::PlaceholderType { universe, bound: bound_ty };\n                 self.mapped_types.insert(p, bound_ty);\n                 self.infcx.tcx.mk_placeholder(p)\n             }\n@@ -809,7 +809,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::ConstKind::Bound(debruijn, bound_const) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderConst { universe, name: bound_const };\n+                let p = ty::PlaceholderConst { universe, bound: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n                 self.infcx.tcx.mk_const(p, ct.ty())\n             }"}, {"sha": "d2d75d2aa4cc9a892cc6f118411fb12c9f1b395f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -3017,7 +3017,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n                     if let ty::ReErased = r.kind() {\n                         let br = ty::BoundRegion {\n                             var: ty::BoundVar::from_u32(counter),\n-                            kind: ty::BrAnon(counter, None),\n+                            kind: ty::BrAnon(None),\n                         };\n                         counter += 1;\n                         r = tcx.mk_re_late_bound(current_depth, br);\n@@ -3033,7 +3033,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n         debug_assert!(!hidden_types.has_erased_regions());\n     }\n     let bound_vars = tcx.mk_bound_variable_kinds_from_iter(bound_vars.iter().chain(\n-        (num_bound_variables..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+        (num_bound_variables..counter).map(|_| ty::BoundVariableKind::Region(ty::BrAnon(None))),\n     ));\n     ty::Binder::bind_with_vars(hidden_types, bound_vars)\n }"}, {"sha": "9683e48478edcb576ede7d86c60cb9b35b8b9f21", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -730,7 +730,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n         ty::GenericParamDefKind::Lifetime => {\n             let br = ty::BoundRegion {\n                 var: ty::BoundVar::from_usize(substs.len()),\n-                kind: ty::BrAnon(substs.len() as u32, None),\n+                kind: ty::BrAnon(None),\n             };\n             tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n         }"}, {"sha": "2be72879b7b139e860702f2a4ee0c5353119b7aa", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -376,7 +376,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             ty::Placeholder(_placeholder) => {\n                 chalk_ir::TyKind::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: _placeholder.universe.as_usize() },\n-                    idx: _placeholder.name.expect_anon() as usize,\n+                    idx: _placeholder.bound.var.as_usize(),\n                 })\n             }\n             ty::Infer(_infer) => unimplemented!(),\n@@ -479,12 +479,15 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 ty::DebruijnIndex::from_usize(bound.debruijn.depth() as usize),\n                 ty::BoundTy {\n                     var: ty::BoundVar::from_usize(bound.index),\n-                    kind: ty::BoundTyKind::Anon(bound.index as u32),\n+                    kind: ty::BoundTyKind::Anon,\n                 },\n             ),\n             TyKind::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n-                name: ty::BoundTyKind::Anon(placeholder.idx as u32),\n+                bound: ty::BoundTy {\n+                    var: ty::BoundVar::from_usize(placeholder.idx),\n+                    kind: ty::BoundTyKind::Anon,\n+                },\n             }),\n             TyKind::InferenceVar(_, _) => unimplemented!(),\n             TyKind::Dyn(_) => unimplemented!(),\n@@ -530,13 +533,16 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(var.index),\n-                    kind: ty::BrAnon(var.index as u32, None),\n+                    kind: ty::BrAnon(None),\n                 },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n             chalk_ir::LifetimeData::Placeholder(p) => tcx.mk_re_placeholder(ty::Placeholder {\n                 universe: ty::UniverseIndex::from_usize(p.ui.counter),\n-                name: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n+                bound: ty::BoundRegion {\n+                    var: ty::BoundVar::from_usize(p.idx),\n+                    kind: ty::BoundRegionKind::BrAnon(None),\n+                },\n             }),\n             chalk_ir::LifetimeData::Static => tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Erased => tcx.lifetimes.re_erased,\n@@ -685,7 +691,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         let self_ty = interner.tcx.mk_bound(\n             // This is going to be wrapped in a binder\n             ty::DebruijnIndex::from_usize(1),\n-            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon(0) },\n+            ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon },\n         );\n         let where_clauses = predicates.into_iter().map(|predicate| {\n             let (predicate, binders, _named_regions) =\n@@ -970,7 +976,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n                     }\n                 }\n \n-                ty::BoundRegionKind::BrAnon(var, _) => match self.parameters.entry(var) {\n+                ty::BoundRegionKind::BrAnon(_) => match self.parameters.entry(br.var.as_u32()) {\n                     Entry::Vacant(entry) => {\n                         entry.insert(chalk_ir::VariableKind::Lifetime);\n                     }\n@@ -1030,8 +1036,8 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n         match *r {\n             ty::ReLateBound(index, br) if index == self.binder_index => match br.kind {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n-                    Some(idx) => {\n-                        let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx, None) };\n+                    Some(_) => {\n+                        let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(None) };\n                         return self.tcx.mk_re_late_bound(index, new_br);\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n@@ -1090,15 +1096,21 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n                 Some(idx) => self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n-                    name: ty::BoundTyKind::Anon(idx as u32),\n+                    bound: ty::BoundTy {\n+                        var: ty::BoundVar::from_usize(idx),\n+                        kind: ty::BoundTyKind::Anon,\n+                    },\n                 }),\n                 None => {\n                     self.list.push(param);\n                     let idx = self.list.len() - 1 + self.next_ty_placeholder;\n                     self.params.insert(idx as u32, param);\n                     self.tcx.mk_placeholder(ty::PlaceholderType {\n                         universe: ty::UniverseIndex::from_usize(0),\n-                        name: ty::BoundTyKind::Anon(idx as u32),\n+                        bound: ty::BoundTy {\n+                            var: ty::BoundVar::from_usize(idx),\n+                            kind: ty::BoundTyKind::Anon,\n+                        },\n                     })\n                 }\n             },\n@@ -1115,15 +1127,15 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                 Some(idx) => {\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(*idx),\n-                        kind: ty::BrAnon(*idx, None),\n+                        kind: ty::BrAnon(None),\n                     };\n                     self.tcx.mk_re_late_bound(self.binder_index, br)\n                 }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(idx),\n-                        kind: ty::BrAnon(idx, None),\n+                        kind: ty::BrAnon(None),\n                     };\n                     self.named_regions.insert(_re.def_id, idx);\n                     self.tcx.mk_re_late_bound(self.binder_index, br)\n@@ -1156,8 +1168,8 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseParamsSubstitutor<'tcx> {\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n-                match self.params.get(&name.expect_anon()) {\n+            ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, bound }) => {\n+                match self.params.get(&bound.var.as_u32()) {\n                     Some(&ty::ParamTy { index, name }) => self.tcx.mk_ty_param(index, name),\n                     None => t,\n                 }\n@@ -1189,8 +1201,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n-                self.next_ty_placeholder =\n-                    self.next_ty_placeholder.max(p.name.expect_anon() as usize + 1);\n+                self.next_ty_placeholder = self.next_ty_placeholder.max(p.bound.var.as_usize() + 1);\n             }\n \n             _ => (),\n@@ -1202,8 +1213,9 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n-                if let ty::BoundRegionKind::BrAnon(anon, _) = p.name {\n-                    self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);\n+                if let ty::BoundRegionKind::BrAnon(_) = p.bound.kind {\n+                    self.next_anon_region_placeholder =\n+                        self.next_anon_region_placeholder.max(p.bound.var.as_u32());\n                 }\n                 // FIXME: This doesn't seem to handle BrNamed at all?\n             }"}, {"sha": "835f7f765600f5aee8f5db5a452a4399c59cc93f", "filename": "tests/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL | fn a() -> impl Fn(&u8) -> impl Debug {\n LL |     |x| x\n    |     --- ^\n    |     |\n-   |     hidden type `&u8` captures the anonymous lifetime #1 defined here\n+   |     hidden type `&u8` captures the anonymous lifetime as defined here\n \n error: aborting due to previous error\n "}, {"sha": "c0d95ddaa07961df133aebdebaa95a0d4954416b", "filename": "tests/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) i32)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) i32)),\n                (),\n            ]\n "}, {"sha": "61e2a1ea6f0193d0bb238354766d4f4ef8880774", "filename": "tests/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) mut &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32)),\n                (),\n            ]\n "}, {"sha": "5a7b12732df68dd37b9dc1cc0dfad2ea5b97b458", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#4r"}, {"sha": "db2ecc779ef9661db87cd5502f5e64246930f0df", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None)), Region(BrAnon(5, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(5, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "1d9dafbe55f6983f1e8a96cdba623181e9552a95", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n-               for<Region(BrAnon(0, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>)),\n+               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n \n@@ -36,7 +36,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n-               for<Region(BrAnon(0, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>)),\n+               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: number of external vids: 2"}, {"sha": "85f7fe35c0aa82670d2b0024a89d81a36a96bbdf", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "7194843e203fb02a746986fdced3bc49a66d7b69", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None)), Region(BrAnon(5, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(5, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "71f8a1c67c679803d91a800fbc39fc3852faf6f0", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "e1cb97b1c7d909920027d9942658e9febfb4e7f6", "filename": "tests/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |         |_outlives1, _outlives2, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "b66e8391c0136fce1c80bad881518b233628f509", "filename": "tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}, {"sha": "49641fd06fdb45b116a4acd071e79497d34dd2cd", "filename": "tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None)), Region(BrAnon(2, None)), Region(BrAnon(3, None)), Region(BrAnon(4, None)), Region(BrAnon(5, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(4, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(5, None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(3, None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: late-bound region is '_#3r"}, {"sha": "4e34ba5165958f91e3c2c64b5ace092ab5b9eb94", "filename": "tests/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) i32,\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) i32, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) i32)) -> &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) i32,\n                (),\n            ]\n "}, {"sha": "2c4a0597554a3d8573c7b16459998f392335d7c5", "filename": "tests/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94524020ea12f7947275063b65f8b7d705be073e/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=94524020ea12f7947275063b65f8b7d705be073e", "patch": "@@ -6,7 +6,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) T)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n                (),\n            ]\n    = note: number of external vids: 2\n@@ -28,7 +28,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(0, None)), Region(BrAnon(1, None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }) T)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n                (),\n            ]\n    = note: late-bound region is '_#2r"}]}