{"sha": "f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "node_id": "C_kwDOAAsO6NoAKGY1MjIyY2RiZDMyZDljN2EwOGNkNjYzMjhiYzhlNjI2NjNlYzBiOGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-17T06:09:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-17T06:09:39Z"}, "message": "Rollup merge of #110038 - compiler-errors:infer-regions-in-transmutability, r=lcnr\n\nErase regions when confirming transmutability candidate\n\nFixes an ICE where we call `layout_of` on a type with infer regions.", "tree": {"sha": "7c2e971c5eaca115f4264e40a9635b4376162bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2e971c5eaca115f4264e40a9635b4376162bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPOKjCRBK7hj4Ov3rIwAAU5kIAG9WEgGLf6sB94fnHVsNZVbN\n4eXegT8dKOkbh/Z9+NBHjyjmzwib1OY36mNj7L8pg6fGiBTcncMF5rmQ/Qb1KJFE\n8CUjdUQxT+o/bq7rsBOIbcIuglXFnK4WnAnn1rRNBctI82egGbnFRYTsXeLIxhYJ\nwti8gyKBq05d9prp71F4Q5A/1kXtU1aLm5jyNeQKd5eQQDU4ZKF1+a1/KG5b/YlJ\nYzohCeHnHCE6dPbhw8Ns4Uq0ncQ7i/lO53+Nt1F3JrSwwmTCTZZalnVz1a6S048e\nU/Fq7rV/KMckjsMQ2ZliCpErrNc4C2BdJS5dTz+rlH7OgneNiudHxpfN+0MAjZI=\n=fKar\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c2e971c5eaca115f4264e40a9635b4376162bb8\nparent 5546cb64f6fbba70529582bbe58a40ba4a8ed9fc\nparent f6bfb4bf8e62e5f924790e62b4e8321b7658da2b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681711779 +0200\ncommitter GitHub <noreply@github.com> 1681711779 +0200\n\nRollup merge of #110038 - compiler-errors:infer-regions-in-transmutability, r=lcnr\n\nErase regions when confirming transmutability candidate\n\nFixes an ICE where we call `layout_of` on a type with infer regions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "html_url": "https://github.com/rust-lang/rust/commit/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "html_url": "https://github.com/rust-lang/rust/commit/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc"}, {"sha": "f6bfb4bf8e62e5f924790e62b4e8321b7658da2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bfb4bf8e62e5f924790e62b4e8321b7658da2b", "html_url": "https://github.com/rust-lang/rust/commit/f6bfb4bf8e62e5f924790e62b4e8321b7658da2b"}], "stats": {"total": 134, "additions": 89, "deletions": 45}, "files": [{"sha": "bb574954587ea935c9a735747eaa6333d35f9781", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -649,7 +649,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         // FIXME(transmutability): This really should be returning nested goals for `Answer::If*`\n         match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n             ObligationCause::dummy(),\n-            ty::Binder::dummy(src_and_dst),\n+            src_and_dst,\n             scope,\n             assume,\n         ) {"}, {"sha": "0352f0f380db1550b7fec563086a9a89cee394b7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -742,7 +742,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         {\n                             // Recompute the safe transmute reason and use that for the error reporting\n                             self.get_safe_transmute_error_and_reason(\n-                                trait_predicate,\n                                 obligation.clone(),\n                                 trait_ref,\n                                 span,\n@@ -1629,7 +1628,6 @@ trait InferCtxtPrivExt<'tcx> {\n \n     fn get_safe_transmute_error_and_reason(\n         &self,\n-        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n         obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         span: Span,\n@@ -2921,18 +2919,20 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn get_safe_transmute_error_and_reason(\n         &self,\n-        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n         obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         span: Span,\n     ) -> (String, Option<String>) {\n-        let src_and_dst = trait_predicate.map_bound(|p| rustc_transmute::Types {\n-            dst: p.trait_ref.substs.type_at(0),\n-            src: p.trait_ref.substs.type_at(1),\n-        });\n-        let scope = trait_ref.skip_binder().substs.type_at(2);\n+        // Erase regions because layout code doesn't particularly care about regions.\n+        let trait_ref = self.tcx.erase_regions(self.tcx.erase_late_bound_regions(trait_ref));\n+\n+        let src_and_dst = rustc_transmute::Types {\n+            dst: trait_ref.substs.type_at(0),\n+            src: trait_ref.substs.type_at(1),\n+        };\n+        let scope = trait_ref.substs.type_at(2);\n         let Some(assume) =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.skip_binder().substs.const_at(3)) else {\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.substs.const_at(3)) else {\n                 span_bug!(span, \"Unable to construct rustc_transmute::Assume where it was previously possible\");\n             };\n         match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n@@ -2942,8 +2942,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             assume,\n         ) {\n             rustc_transmute::Answer::No(reason) => {\n-                let dst = trait_ref.skip_binder().substs.type_at(0);\n-                let src = trait_ref.skip_binder().substs.type_at(1);\n+                let dst = trait_ref.substs.type_at(0);\n+                let src = trait_ref.substs.type_at(1);\n                 let custom_err_msg = format!(\n                     \"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\"\n                 );"}, {"sha": "3bba11262f5b8d07255a5a83e366caa6e197bf5a", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -275,33 +275,35 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<ImplSourceBuiltinData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         debug!(?obligation, \"confirm_transmutability_candidate\");\n \n-        let predicate = obligation.predicate;\n-\n-        let type_at = |i| predicate.map_bound(|p| p.trait_ref.substs.type_at(i));\n-        let const_at = |i| predicate.skip_binder().trait_ref.substs.const_at(i);\n-\n-        let src_and_dst = predicate.map_bound(|p| rustc_transmute::Types {\n-            dst: p.trait_ref.substs.type_at(0),\n-            src: p.trait_ref.substs.type_at(1),\n-        });\n-\n-        let scope = type_at(2).skip_binder();\n-\n-        let Some(assume) =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3)) else {\n-                return Err(Unimplemented);\n-            };\n-\n-        let cause = obligation.cause.clone();\n+        // We erase regions here because transmutability calls layout queries,\n+        // which does not handle inference regions and doesn't particularly\n+        // care about other regions. Erasing late-bound regions is equivalent\n+        // to instantiating the binder with placeholders then erasing those\n+        // placeholder regions.\n+        let predicate =\n+            self.tcx().erase_regions(self.tcx().erase_late_bound_regions(obligation.predicate));\n+\n+        let Some(assume) = rustc_transmute::Assume::from_const(\n+            self.infcx.tcx,\n+            obligation.param_env,\n+            predicate.trait_ref.substs.const_at(3)\n+        ) else {\n+            return Err(Unimplemented);\n+        };\n \n         let mut transmute_env = rustc_transmute::TransmuteTypeEnv::new(self.infcx);\n-\n-        let maybe_transmutable = transmute_env.is_transmutable(cause, src_and_dst, scope, assume);\n-\n-        use rustc_transmute::Answer;\n+        let maybe_transmutable = transmute_env.is_transmutable(\n+            obligation.cause.clone(),\n+            rustc_transmute::Types {\n+                dst: predicate.trait_ref.substs.type_at(0),\n+                src: predicate.trait_ref.substs.type_at(1),\n+            },\n+            predicate.trait_ref.substs.type_at(2),\n+            assume,\n+        );\n \n         match maybe_transmutable {\n-            Answer::Yes => Ok(ImplSourceBuiltinData { nested: vec![] }),\n+            rustc_transmute::Answer::Yes => Ok(ImplSourceBuiltinData { nested: vec![] }),\n             _ => Err(Unimplemented),\n         }\n     }"}, {"sha": "8be02c1d9888a46ac6c78ba9c83238888bf7e1d4", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -64,7 +64,6 @@ mod rustc {\n     use rustc_infer::infer::InferCtxt;\n     use rustc_macros::{TypeFoldable, TypeVisitable};\n     use rustc_middle::traits::ObligationCause;\n-    use rustc_middle::ty::Binder;\n     use rustc_middle::ty::Const;\n     use rustc_middle::ty::ParamEnv;\n     use rustc_middle::ty::Ty;\n@@ -92,15 +91,13 @@ mod rustc {\n         pub fn is_transmutable(\n             &mut self,\n             cause: ObligationCause<'tcx>,\n-            src_and_dst: Binder<'tcx, Types<'tcx>>,\n+            types: Types<'tcx>,\n             scope: Ty<'tcx>,\n             assume: crate::Assume,\n         ) -> crate::Answer<crate::layout::rustc::Ref<'tcx>> {\n-            let src = src_and_dst.map_bound(|types| types.src).skip_binder();\n-            let dst = src_and_dst.map_bound(|types| types.dst).skip_binder();\n             crate::maybe_transmutable::MaybeTransmutableQuery::new(\n-                src,\n-                dst,\n+                types.src,\n+                types.dst,\n                 scope,\n                 assume,\n                 self.infcx.tcx,"}, {"sha": "819c9b92bc81aecfc1b368b9f7a9ebccf1e78bfc", "filename": "tests/ui/transmutability/references.current.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.current.stderr?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n+error[E0277]: `&Unit` cannot be safely transmuted into `&Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n+   |                                                    ^^^^^^^^^^^^^ `&Unit` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14"}, {"sha": "819c9b92bc81aecfc1b368b9f7a9ebccf1e78bfc", "filename": "tests/ui/transmutability/references.next.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.next.stderr?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n+error[E0277]: `&Unit` cannot be safely transmuted into `&Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n+   |                                                    ^^^^^^^^^^^^^ `&Unit` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14"}, {"sha": "09f60277688c8f5c89c9f65c094e26a600ccd93f", "filename": "tests/ui/transmutability/region-infer.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Fregion-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Fregion-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fregion-infer.rs?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -0,0 +1,22 @@\n+#![feature(transmutability)]\n+\n+use std::mem::{Assume, BikeshedIntrinsicFrom};\n+pub struct Context;\n+\n+#[repr(C)]\n+struct W<'a>(&'a ());\n+\n+fn test<'a>()\n+where\n+    W<'a>: BikeshedIntrinsicFrom<\n+            (),\n+            Context,\n+            { Assume { alignment: true, lifetimes: true, safety: true, validity: true } },\n+        >,\n+{\n+}\n+\n+fn main() {\n+    test();\n+    //~^ ERROR `()` cannot be safely transmuted into `W<'_>`\n+}"}, {"sha": "d6b65e9e4a08b80a96819e5bb0a7b54598d28c5c", "filename": "tests/ui/transmutability/region-infer.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Fregion-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a/tests%2Fui%2Ftransmutability%2Fregion-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fregion-infer.stderr?ref=f5222cdbd32d9c7a08cd66328bc8e62663ec0b8a", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: `()` cannot be safely transmuted into `W<'_>` in the defining scope of `Context`\n+  --> $DIR/region-infer.rs:20:5\n+   |\n+LL |     test();\n+   |     ^^^^ `W<'_>` does not have a well-specified layout\n+   |\n+note: required by a bound in `test`\n+  --> $DIR/region-infer.rs:11:12\n+   |\n+LL |   fn test<'a>()\n+   |      ---- required by a bound in this function\n+LL |   where\n+LL |       W<'a>: BikeshedIntrinsicFrom<\n+   |  ____________^\n+LL | |             (),\n+LL | |             Context,\n+LL | |             { Assume { alignment: true, lifetimes: true, safety: true, validity: true } },\n+LL | |         >,\n+   | |_________^ required by this bound in `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}