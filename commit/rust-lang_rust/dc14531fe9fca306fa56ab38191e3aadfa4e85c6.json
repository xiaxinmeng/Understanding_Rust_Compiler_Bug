{"sha": "dc14531fe9fca306fa56ab38191e3aadfa4e85c6", "node_id": "C_kwDOAAsO6NoAKGRjMTQ1MzFmZTlmY2EzMDZmYTU2YWIzODE5MWUzYWFkZmE0ZTg1YzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T15:37:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T15:37:13Z"}, "message": "Auto merge of #9519 - alessandrod:uninit-set-len-0, r=llogiq\n\nuninit_vec: fix false positive with set_len(0)\n\n`set_len(0)` does not create uninitialized elements. Fixes a false positive with the following pattern:\n\n```rust\nfn copy_slice_into_vec(dst: &mut Vec<u8>, src: &[u8]) {\n    dst.reserve(src.len().saturating_sub(dst.len()));\n    unsafe {\n        dst.set_len(0);\n        std::ptr::copy_nonoverlapping(src.as_ptr(), dst.as_mut_ptr(), src.len());\n        dst.set_len(src.len());\n    }\n}\n```\n\nzulip thread: https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/uninit_vec.20and.20set_len.280.29\n\nchangelog: FP: [`uninit_vec`]: No longer lints `Vec::set_len(0)`", "tree": {"sha": "12e29e6af047c72eccace0230ecac2f0e27cfecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e29e6af047c72eccace0230ecac2f0e27cfecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc14531fe9fca306fa56ab38191e3aadfa4e85c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc14531fe9fca306fa56ab38191e3aadfa4e85c6", "html_url": "https://github.com/rust-lang/rust/commit/dc14531fe9fca306fa56ab38191e3aadfa4e85c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc14531fe9fca306fa56ab38191e3aadfa4e85c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e", "html_url": "https://github.com/rust-lang/rust/commit/61fd2a8c6f8336ea12fe5b6fd1051fcf5a7b915e"}, {"sha": "49319b4206cbde83e0113c024b09275677ab8d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/49319b4206cbde83e0113c024b09275677ab8d74", "html_url": "https://github.com/rust-lang/rust/commit/49319b4206cbde83e0113c024b09275677ab8d74"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "bde7c318f448cc4ed2c612e62464e8189735ce9c", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc14531fe9fca306fa56ab38191e3aadfa4e85c6/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc14531fe9fca306fa56ab38191e3aadfa4e85c6/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=dc14531fe9fca306fa56ab38191e3aadfa4e85c6", "patch": "@@ -2,6 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher::{get_vec_init_kind, VecInitKind};\n use clippy_utils::ty::{is_type_diagnostic_item, is_uninit_value_valid_for_ty};\n use clippy_utils::{is_lint_allowed, path_to_local_id, peel_hir_expr_while, SpanlessEq};\n+use rustc_ast::ast::LitKind;\n use rustc_hir::{Block, Expr, ExprKind, HirId, PatKind, PathSegment, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -211,9 +212,12 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n         }\n     });\n     match expr.kind {\n-        ExprKind::MethodCall(path, self_expr, [_], _) => {\n+        ExprKind::MethodCall(path, self_expr, [arg], _) => {\n             let self_type = cx.typeck_results().expr_ty(self_expr).peel_refs();\n-            if is_type_diagnostic_item(cx, self_type, sym::Vec) && path.ident.name.as_str() == \"set_len\" {\n+            if is_type_diagnostic_item(cx, self_type, sym::Vec)\n+                && path.ident.name.as_str() == \"set_len\"\n+                && !is_literal_zero(arg)\n+            {\n                 Some((self_expr, expr.span))\n             } else {\n                 None\n@@ -222,3 +226,13 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n         _ => None,\n     }\n }\n+\n+fn is_literal_zero(arg: &Expr<'_>) -> bool {\n+    if let ExprKind::Lit(lit) = &arg.kind\n+        && let LitKind::Int(0, _) = lit.node\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "194e4fc157ef1d80bc76206b2b7a0d2ab4995212", "filename": "tests/ui/uninit_vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc14531fe9fca306fa56ab38191e3aadfa4e85c6/tests%2Fui%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc14531fe9fca306fa56ab38191e3aadfa4e85c6/tests%2Fui%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.rs?ref=dc14531fe9fca306fa56ab38191e3aadfa4e85c6", "patch": "@@ -91,4 +91,10 @@ fn main() {\n         vec1.set_len(200);\n         vec2.set_len(200);\n     }\n+\n+    // set_len(0) should not be detected\n+    let mut vec: Vec<u8> = Vec::with_capacity(1000);\n+    unsafe {\n+        vec.set_len(0);\n+    }\n }"}]}