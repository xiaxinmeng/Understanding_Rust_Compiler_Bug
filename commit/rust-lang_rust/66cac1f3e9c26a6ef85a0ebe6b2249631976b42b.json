{"sha": "66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Y2FjMWYzZTljMjZhNmVmODVhMGViZTZiMjI0OTYzMTk3NmI0MmI=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-27T22:58:25Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-05-27T22:58:25Z"}, "message": "Handle pub(restricted) (#1013)\n\n* Handle pub(restricted)\r\n\r\nThis commit properly handles pub(restricted) as introduced in RFC 1422\r\n[0]. The syntax support was added in #971, but they were not correctly\r\nformatted.\r\n\r\n[0] https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md\r\n\r\nFixes #970\r\n\r\n* Drop #[inline] attribute on format_visibility\r\n\r\n* Make newly non-failing functions return String\r\n\r\nThe change to `format_visibiilty` means that `format_header` and\r\n`format_unit_struct` can no longer fail. Their return type is updated to\r\nreflect that.", "tree": {"sha": "28e135a9e213b6bd2e55fbec987cfcfa64311425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e135a9e213b6bd2e55fbec987cfcfa64311425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "html_url": "https://github.com/rust-lang/rust/commit/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e01fac285169c24db8e8c64d3bea0d368197650", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e01fac285169c24db8e8c64d3bea0d368197650", "html_url": "https://github.com/rust-lang/rust/commit/6e01fac285169c24db8e8c64d3bea0d368197650"}], "stats": {"total": 190, "additions": 147, "deletions": 43}, "files": [{"sha": "1999f6c811a6071298fb8e11d86a550483ec766f", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -5,6 +5,7 @@ dependencies = [\n  \"diff 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.4.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.71 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -47,6 +48,11 @@ name = \"getopts\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"itertools\"\n+version = \"0.4.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\""}, {"sha": "b0964c037049057a442379e29078ba07ddf293fe", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -25,3 +25,4 @@ syntex_syntax = \"0.32\"\n log = \"0.3\"\n env_logger = \"0.3\"\n getopts = \"0.2\"\n+itertools = \"0.4.15\""}, {"sha": "b55ecd5c0ef06915a4b9f8a1e321e98cca859cad", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -139,10 +139,7 @@ impl<'a> FmtVisitor<'a> {\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here.\n-                let vis = match format_visibility(&item.vis) {\n-                    Some(s) => s,\n-                    None => return,\n-                };\n+                let vis = format_visibility(&item.vis);\n                 let mut_str = if is_mutable {\n                     \"mut \"\n                 } else {\n@@ -305,11 +302,7 @@ impl<'a> FmtVisitor<'a> {\n                       enum_def: &ast::EnumDef,\n                       generics: &ast::Generics,\n                       span: Span) {\n-        let header_str = match format_header(\"enum \", ident, vis) {\n-            Some(s) => s,\n-            None => return,\n-        };\n-        self.buffer.push_str(&header_str);\n+        self.buffer.push_str(&format_header(\"enum \", ident, vis));\n \n         let enum_snippet = self.snippet(span);\n         let body_start = span.lo + BytePos(enum_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n@@ -453,7 +446,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                                ref self_ty,\n                                ref items) = item.node {\n         let mut result = String::new();\n-        result.push_str(try_opt!(format_visibility(&item.vis)));\n+        result.push_str(&*format_visibility(&item.vis));\n         result.push_str(format_unsafety(unsafety));\n         result.push_str(\"impl\");\n \n@@ -593,7 +586,7 @@ pub fn format_struct(context: &RewriteContext,\n                      one_line_width: Option<usize>)\n                      -> Option<String> {\n     match *struct_def {\n-        ast::VariantData::Unit(..) => format_unit_struct(item_name, ident, vis),\n+        ast::VariantData::Unit(..) => Some(format_unit_struct(item_name, ident, vis)),\n         ast::VariantData::Tuple(ref fields, _) => {\n             format_tuple_struct(context,\n                                 item_name,\n@@ -623,7 +616,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n            item.node {\n         let mut result = String::new();\n         let header = format!(\"{}{}trait {}\",\n-                             try_opt!(format_visibility(&item.vis)),\n+                             format_visibility(&item.vis),\n                              format_unsafety(unsafety),\n                              item.ident);\n \n@@ -744,14 +737,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n     }\n }\n \n-fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> Option<String> {\n-    let mut result = String::with_capacity(1024);\n-\n-    let header_str = try_opt!(format_header(item_name, ident, vis));\n-    result.push_str(&header_str);\n-    result.push(';');\n-\n-    Some(result)\n+fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> String {\n+    format!(\"{};\", format_header(item_name, ident, vis))\n }\n \n fn format_struct_struct(context: &RewriteContext,\n@@ -766,7 +753,7 @@ fn format_struct_struct(context: &RewriteContext,\n                         -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = try_opt!(format_header(item_name, ident, vis));\n+    let header_str = format_header(item_name, ident, vis);\n     result.push_str(&header_str);\n \n     let body_lo = context.codemap.span_after(span, \"{\");\n@@ -859,7 +846,7 @@ fn format_tuple_struct(context: &RewriteContext,\n                        -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = try_opt!(format_header(item_name, ident, vis));\n+    let header_str = format_header(item_name, ident, vis);\n     result.push_str(&header_str);\n \n     // FIXME(#919): don't lose comments on empty tuple structs.\n@@ -945,7 +932,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n                           -> Option<String> {\n     let mut result = String::new();\n \n-    result.push_str(&try_opt!(format_visibility(&vis)));\n+    result.push_str(&format_visibility(&vis));\n     result.push_str(\"type \");\n     result.push_str(&ident.to_string());\n \n@@ -1013,7 +1000,7 @@ impl Rewrite for ast::StructField {\n         }\n \n         let name = self.ident;\n-        let vis = try_opt!(format_visibility(&self.vis));\n+        let vis = format_visibility(&self.vis);\n         let mut attr_str = try_opt!(self.attrs\n             .rewrite(context, context.config.max_width - offset.width(), offset));\n         if !attr_str.is_empty() {\n@@ -1042,7 +1029,7 @@ pub fn rewrite_static(prefix: &str,\n                       context: &RewriteContext)\n                       -> Option<String> {\n     let prefix = format!(\"{}{} {}{}: \",\n-                         try_opt!(format_visibility(vis)),\n+                         format_visibility(vis),\n                          prefix,\n                          format_mutability(mutability),\n                          ident);\n@@ -1260,7 +1247,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     let mut result = String::with_capacity(1024);\n     // Vis unsafety abi.\n-    result.push_str(try_opt!(format_visibility(vis)));\n+    result.push_str(&*format_visibility(vis));\n \n     if let ast::Constness::Const = constness {\n         result.push_str(\"const \");\n@@ -1816,8 +1803,8 @@ fn rewrite_where_clause(context: &RewriteContext,\n     }\n }\n \n-fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> Option<String> {\n-    Some(format!(\"{}{}{}\", try_opt!(format_visibility(vis)), item_name, ident))\n+fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> String {\n+    format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n }\n \n fn format_generics(context: &RewriteContext,"}, {"sha": "e672efb8feacaa6d1275f7e272c162faaa99f8a0", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -24,6 +24,7 @@ extern crate unicode_segmentation;\n extern crate regex;\n extern crate diff;\n extern crate term;\n+extern crate itertools;\n \n use syntax::ast;\n use syntax::codemap::{mk_sp, CodeMap, Span};"}, {"sha": "cb286723cc93e998cad2146a4dfed4413f75c153", "filename": "src/utils.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::borrow::Cow;\n use std::cmp::Ordering;\n \n-use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind};\n+use itertools::Itertools;\n+\n+use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, Path};\n use syntax::codemap::{CodeMap, Span, BytePos};\n use syntax::abi;\n \n@@ -66,14 +69,23 @@ pub fn extra_offset(text: &str, offset: Indent) -> usize {\n     }\n }\n \n-#[inline]\n-pub fn format_visibility(vis: &Visibility) -> Option<&'static str> {\n+// Uses Cow to avoid allocating in the common cases.\n+pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n     match *vis {\n-        Visibility::Public => Some(\"pub \"),\n-        Visibility::Inherited => Some(\"\"),\n-        // FIXME(#970): Handle new visibility types.\n-        Visibility::Crate(_) => None,\n-        Visibility::Restricted { .. } => None,\n+        Visibility::Public => Cow::from(\"pub \"),\n+        Visibility::Inherited => Cow::from(\"\"),\n+        Visibility::Crate(_) => Cow::from(\"pub(crate) \"),\n+        Visibility::Restricted { ref path, .. } => {\n+            let Path { global, ref segments, .. } = **path;\n+            let prefix = if global {\n+                \"::\"\n+            } else {\n+                \"\"\n+            };\n+            let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.as_str());\n+\n+            Cow::from(format!(\"pub({}{}) \", prefix, segments_iter.join(\"::\")))\n+        }\n     }\n }\n "}, {"sha": "8473d1685da7e1baf7f43e9fa531446bd2ca3c0c", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -502,9 +502,7 @@ impl<'a> FmtVisitor<'a> {\n         let local_file_name = self.codemap.span_to_filename(s);\n         let is_internal = local_file_name == self.codemap.span_to_filename(source!(self, m.inner));\n \n-        if let Some(vis) = utils::format_visibility(vis) {\n-            self.buffer.push_str(vis);\n-        }\n+        self.buffer.push_str(&*utils::format_visibility(vis));\n         self.buffer.push_str(\"mod \");\n         self.buffer.push_str(&ident.to_string());\n \n@@ -540,10 +538,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn format_import(&mut self, vis: &ast::Visibility, vp: &ast::ViewPath, span: Span) {\n-        let vis = match utils::format_visibility(vis) {\n-            Some(s) => s,\n-            None => return,\n-        };\n+        let vis = utils::format_visibility(vis);\n         let mut offset = self.block_indent;\n         offset.alignment += vis.len() + \"use \".len();\n         // 1 = \";\""}, {"sha": "77b19b8e746ae93b50894a779a13fb41fb1e86ba", "filename": "tests/source/pub-restricted.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/tests%2Fsource%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/tests%2Fsource%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpub-restricted.rs?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -0,0 +1,51 @@\n+pub(   super   ) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n+pub(  crate  ) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n+pub(  ::global::  path :: to::some_mod  ) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n+pub(  local::  path :: to::some_mod  ) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}"}, {"sha": "388228af814ac367a3d80db8a8e1a6701dcde55b", "filename": "tests/target/pub-restricted.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/tests%2Ftarget%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66cac1f3e9c26a6ef85a0ebe6b2249631976b42b/tests%2Ftarget%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpub-restricted.rs?ref=66cac1f3e9c26a6ef85a0ebe6b2249631976b42b", "patch": "@@ -0,0 +1,51 @@\n+pub(super) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n+pub(crate) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n+pub(::global::path::to::some_mod) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n+pub(local::path::to::some_mod) enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}"}]}