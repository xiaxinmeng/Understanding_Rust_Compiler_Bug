{"sha": "d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZTMyNzI5YzkzNDZjNDdmOTEyOGM1ZmU0YjZiMGFhY2ZlMWQ0ZjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:56:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` the scope map in the region maps", "tree": {"sha": "2fe5f80b3f4e373c6c8033b311b7a405aa9a1798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe5f80b3f4e373c6c8033b311b7a405aa9a1798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4", "html_url": "https://github.com/rust-lang/rust/commit/d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2551344928a7ad30b2ced2b31bf6cdc2eb98554e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2551344928a7ad30b2ced2b31bf6cdc2eb98554e", "html_url": "https://github.com/rust-lang/rust/commit/2551344928a7ad30b2ced2b31bf6cdc2eb98554e"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "187b5766a46670893f1871b849cf87c04ce96b9a", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d5e32729c9346c47f9128c5fe4b6b0aacfe1d4f4", "patch": "@@ -25,6 +25,7 @@ use driver::session::Session;\n use middle::ty::{FreeRegion};\n use middle::ty;\n \n+use std::cell::RefCell;\n use std::hashmap::{HashMap, HashSet};\n use syntax::codemap::Span;\n use syntax::{ast, visit};\n@@ -50,7 +51,7 @@ The region maps encode information about region relationships.\n     necessarily how I think things ought to work\n */\n pub struct RegionMaps {\n-    priv scope_map: HashMap<ast::NodeId, ast::NodeId>,\n+    priv scope_map: RefCell<HashMap<ast::NodeId, ast::NodeId>>,\n     priv free_region_map: HashMap<FreeRegion, ~[FreeRegion]>,\n     priv cleanup_scopes: HashSet<ast::NodeId>\n }\n@@ -93,7 +94,8 @@ impl RegionMaps {\n         debug!(\"record_parent(sub={:?}, sup={:?})\", sub, sup);\n         assert!(sub != sup);\n \n-        self.scope_map.insert(sub, sup);\n+        let mut scope_map = self.scope_map.borrow_mut();\n+        scope_map.get().insert(sub, sup);\n     }\n \n     pub fn record_cleanup_scope(&mut self, scope_id: ast::NodeId) {\n@@ -108,13 +110,15 @@ impl RegionMaps {\n     pub fn opt_encl_scope(&self, id: ast::NodeId) -> Option<ast::NodeId> {\n         //! Returns the narrowest scope that encloses `id`, if any.\n \n-        self.scope_map.find(&id).map(|x| *x)\n+        let scope_map = self.scope_map.borrow();\n+        scope_map.get().find(&id).map(|x| *x)\n     }\n \n     pub fn encl_scope(&self, id: ast::NodeId) -> ast::NodeId {\n         //! Returns the narrowest scope that encloses `id`, if any.\n \n-        match self.scope_map.find(&id) {\n+        let scope_map = self.scope_map.borrow();\n+        match scope_map.get().find(&id) {\n             Some(&r) => r,\n             None => { fail!(\"No enclosing scope for id {:?}\", id); }\n         }\n@@ -157,7 +161,8 @@ impl RegionMaps {\n \n         let mut s = subscope;\n         while superscope != s {\n-            match self.scope_map.find(&s) {\n+            let scope_map = self.scope_map.borrow();\n+            match scope_map.get().find(&s) {\n                 None => {\n                     debug!(\"is_subscope_of({:?}, {:?}, s={:?})=false\",\n                            subscope, superscope, s);\n@@ -298,7 +303,8 @@ impl RegionMaps {\n             let mut result = ~[scope];\n             let mut scope = scope;\n             loop {\n-                match this.scope_map.find(&scope) {\n+                let scope_map = this.scope_map.borrow();\n+                match scope_map.get().find(&scope) {\n                     None => return result,\n                     Some(&superscope) => {\n                         result.push(superscope);\n@@ -497,7 +503,7 @@ pub fn resolve_crate(sess: Session,\n                      crate: &ast::Crate) -> @mut RegionMaps\n {\n     let region_maps = @mut RegionMaps {\n-        scope_map: HashMap::new(),\n+        scope_map: RefCell::new(HashMap::new()),\n         free_region_map: HashMap::new(),\n         cleanup_scopes: HashSet::new(),\n     };"}]}