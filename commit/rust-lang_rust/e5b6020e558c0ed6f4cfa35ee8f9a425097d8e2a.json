{"sha": "e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a", "node_id": "C_kwDOAAsO6NoAKGU1YjYwMjBlNTU4YzBlZDZmNGNmYTM1ZWU4ZjlhNDI1MDk3ZDhlMmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-15T09:29:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-15T09:29:28Z"}, "message": "Merge #11480\n\n11480: fix: keyword hover works on non-keyword tokens if expanded to keyword r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d40bc5cfb72a43afcbfd17ab23eeda44ee42208c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40bc5cfb72a43afcbfd17ab23eeda44ee42208c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiC3J4CRBK7hj4Ov3rIwAAi1QIAI3K0s29tChWo/2P5brByCZp\nbiWu9+6yVTi24nshmApOy5uqoDk9s1dghHjjGMJKrzezfu3j51u+8IkfrhYuY/t7\n0wKOT0QJvuAe2NnWFJBLNuZgdr4ikneRzGvD9ZF2czxd2FjV/Hi87iy9oHHGmP/b\nWabjUFZ7weUOQduNsv2Sq7mlXpowpi8UVFjRSF71nbKLNSK9yY2BqbQPQuafMc/d\neUiGiSEXAsFFtB+RsJGIUrIRRKIaP0TM6Q2RiFBmXAw2gsIbw/tEpuZafMS+JGPe\nngRAN9EPIZ39LNmjsowjIA0EHgfQtLPbbCzHEXeNt+GgcNDdnYCe25jxvSAplm4=\n=dRs+\n-----END PGP SIGNATURE-----\n", "payload": "tree d40bc5cfb72a43afcbfd17ab23eeda44ee42208c\nparent 9bc2ee34b0f67bb84254d5a2178bcfddde6a7924\nparent 95db3c147684ced6b5ddfd4612b21b90d6903b30\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1644917368 +0000\ncommitter GitHub <noreply@github.com> 1644917368 +0000\n\nMerge #11480\n\n11480: fix: keyword hover works on non-keyword tokens if expanded to keyword r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a", "html_url": "https://github.com/rust-lang/rust/commit/e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc2ee34b0f67bb84254d5a2178bcfddde6a7924", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc2ee34b0f67bb84254d5a2178bcfddde6a7924", "html_url": "https://github.com/rust-lang/rust/commit/9bc2ee34b0f67bb84254d5a2178bcfddde6a7924"}, {"sha": "95db3c147684ced6b5ddfd4612b21b90d6903b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/95db3c147684ced6b5ddfd4612b21b90d6903b30", "html_url": "https://github.com/rust-lang/rust/commit/95db3c147684ced6b5ddfd4612b21b90d6903b30"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "0eba0b09ba6e2dfded2f179b785f18c7e1bcd5a0", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=e5b6020e558c0ed6f4cfa35ee8f9a425097d8e2a", "patch": "@@ -94,11 +94,10 @@ pub(crate) fn hover(\n     let sema = &hir::Semantics::new(db);\n     let file = sema.parse(file_id).syntax().clone();\n \n-    let offset = if !range.is_empty() {\n+    if !range.is_empty() {\n         return hover_ranged(&file, range, sema, config);\n-    } else {\n-        range.start()\n-    };\n+    }\n+    let offset = range.start();\n \n     let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n         IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n@@ -118,10 +117,11 @@ pub(crate) fn hover(\n     let descended = sema.descend_into_macros(original_token.clone());\n \n     // FIXME: Definition should include known lints and the like instead of having this special case here\n-    if let Some(res) = descended.iter().find_map(|token| {\n+    let hovered_lint = descended.iter().find_map(|token| {\n         let attr = token.ancestors().find_map(ast::Attr::cast)?;\n         render::try_for_lint(&attr, token)\n-    }) {\n+    });\n+    if let Some(res) = hovered_lint {\n         return Some(RangeInfo::new(original_token.text_range(), res));\n     }\n \n@@ -143,7 +143,9 @@ pub(crate) fn hover(\n \n     if result.is_none() {\n         // fallbacks, show keywords or types\n-        if let Some(res) = render::keyword(sema, config, &original_token) {\n+\n+        let res = descended.iter().find_map(|token| render::keyword(sema, config, &token));\n+        if let Some(res) = res {\n             return Some(RangeInfo::new(original_token.text_range(), res));\n         }\n         let res = descended\n@@ -199,6 +201,7 @@ fn hover_ranged(\n     sema: &Semantics<RootDatabase>,\n     config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n+    // FIXME: make this work in attributes\n     let expr_or_pat = file.covering_element(range).ancestors().find_map(|it| {\n         match_ast! {\n             match it {"}]}