{"sha": "83f1454ade1bfa9a797b4bdccd8bd2432c110641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjE0NTRhZGUxYmZhOWE3OTdiNGJkY2NkOGJkMjQzMmMxMTA2NDE=", "commit": {"author": {"name": "xordi", "email": "jordi.obuades@gmail.com", "date": "2021-08-31T07:06:14Z"}, "committer": {"name": "xordi", "email": "jordi.obuades@gmail.com", "date": "2021-08-31T07:06:14Z"}, "message": "Fix function and variable names", "tree": {"sha": "55797b9666b3346da96ef0f42742ee0c7b152683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55797b9666b3346da96ef0f42742ee0c7b152683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f1454ade1bfa9a797b4bdccd8bd2432c110641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f1454ade1bfa9a797b4bdccd8bd2432c110641", "html_url": "https://github.com/rust-lang/rust/commit/83f1454ade1bfa9a797b4bdccd8bd2432c110641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f1454ade1bfa9a797b4bdccd8bd2432c110641/comments", "author": {"login": "xordi", "id": 915557, "node_id": "MDQ6VXNlcjkxNTU1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/915557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xordi", "html_url": "https://github.com/xordi", "followers_url": "https://api.github.com/users/xordi/followers", "following_url": "https://api.github.com/users/xordi/following{/other_user}", "gists_url": "https://api.github.com/users/xordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/xordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xordi/subscriptions", "organizations_url": "https://api.github.com/users/xordi/orgs", "repos_url": "https://api.github.com/users/xordi/repos", "events_url": "https://api.github.com/users/xordi/events{/privacy}", "received_events_url": "https://api.github.com/users/xordi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xordi", "id": 915557, "node_id": "MDQ6VXNlcjkxNTU1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/915557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xordi", "html_url": "https://github.com/xordi", "followers_url": "https://api.github.com/users/xordi/followers", "following_url": "https://api.github.com/users/xordi/following{/other_user}", "gists_url": "https://api.github.com/users/xordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/xordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xordi/subscriptions", "organizations_url": "https://api.github.com/users/xordi/orgs", "repos_url": "https://api.github.com/users/xordi/repos", "events_url": "https://api.github.com/users/xordi/events{/privacy}", "received_events_url": "https://api.github.com/users/xordi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee4f1fc0cae5ac2c044e4f1b6ff015bbb9405b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee4f1fc0cae5ac2c044e4f1b6ff015bbb9405b4", "html_url": "https://github.com/rust-lang/rust/commit/aee4f1fc0cae5ac2c044e4f1b6ff015bbb9405b4"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "cdc192a47e48abebb325f95437ce48a1ee00dee6", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/83f1454ade1bfa9a797b4bdccd8bd2432c110641/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f1454ade1bfa9a797b4bdccd8bd2432c110641/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=83f1454ade1bfa9a797b4bdccd8bd2432c110641", "patch": "@@ -40,23 +40,23 @@ fn is_bool_lit(e: &Expr<'_>) -> bool {\n     ) && !e.span.from_expansion()\n }\n \n-fn impl_not_trait_with_bool_out(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+fn is_impl_not_trait_with_bool_out(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(e);\n \n     cx.tcx\n         .lang_items()\n         .not_trait()\n-        .filter(|id| implements_trait(cx, ty, *id, &[]))\n-        .and_then(|id| {\n-            cx.tcx.associated_items(id).find_by_name_and_kind(\n+        .filter(|trait_id| implements_trait(cx, ty, *trait_id, &[]))\n+        .and_then(|trait_id| {\n+            cx.tcx.associated_items(trait_id).find_by_name_and_kind(\n                 cx.tcx,\n                 Ident::from_str(\"Output\"),\n                 ty::AssocKind::Type,\n-                id,\n+                trait_id,\n             )\n         })\n-        .map_or(false, |item| {\n-            let proj = cx.tcx.mk_projection(item.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+        .map_or(false, |assoc_item| {\n+            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n             let nty = cx.tcx.normalize_erasing_regions(cx.param_env, proj);\n \n             nty.is_bool()\n@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n                             return;\n                         }\n \n-                        if !impl_not_trait_with_bool_out(cx, a) || !impl_not_trait_with_bool_out(cx, b) {\n+                        if !is_impl_not_trait_with_bool_out(cx, a) || !is_impl_not_trait_with_bool_out(cx, b) {\n                             // At this point the expression which is not a boolean\n                             // literal does not implement Not trait with a bool output,\n                             // so we cannot suggest to rewrite our code"}, {"sha": "ec4d6f3ff840113829343f89f7ff45f2d9e45f8b", "filename": "tests/ui/bool_assert_comparison.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83f1454ade1bfa9a797b4bdccd8bd2432c110641/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f1454ade1bfa9a797b4bdccd8bd2432c110641/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=83f1454ade1bfa9a797b4bdccd8bd2432c110641", "patch": "@@ -16,44 +16,44 @@ macro_rules! b {\n // Implements the Not trait but with an output type\n // that's not bool. Should not suggest a rewrite\n #[derive(Debug)]\n-enum A {\n+enum ImplNotTraitWithoutBool {\n     VariantX(bool),\n     VariantY(u32),\n }\n \n-impl PartialEq<bool> for A {\n+impl PartialEq<bool> for ImplNotTraitWithoutBool {\n     fn eq(&self, other: &bool) -> bool {\n         match *self {\n-            A::VariantX(b) => b == *other,\n+            ImplNotTraitWithoutBool::VariantX(b) => b == *other,\n             _ => false,\n         }\n     }\n }\n \n-impl Not for A {\n+impl Not for ImplNotTraitWithoutBool {\n     type Output = Self;\n \n     fn not(self) -> Self::Output {\n         match self {\n-            A::VariantX(b) => A::VariantX(!b),\n-            A::VariantY(0) => A::VariantY(1),\n-            A::VariantY(_) => A::VariantY(0),\n+            ImplNotTraitWithoutBool::VariantX(b) => ImplNotTraitWithoutBool::VariantX(!b),\n+            ImplNotTraitWithoutBool::VariantY(0) => ImplNotTraitWithoutBool::VariantY(1),\n+            ImplNotTraitWithoutBool::VariantY(_) => ImplNotTraitWithoutBool::VariantY(0),\n         }\n     }\n }\n \n // This type implements the Not trait with an Output of\n // type bool. Using assert!(..) must be suggested\n #[derive(Debug)]\n-struct B;\n+struct ImplNotTraitWithBool;\n \n-impl PartialEq<bool> for B {\n+impl PartialEq<bool> for ImplNotTraitWithBool {\n     fn eq(&self, other: &bool) -> bool {\n         false\n     }\n }\n \n-impl Not for B {\n+impl Not for ImplNotTraitWithBool {\n     type Output = bool;\n \n     fn not(self) -> Self::Output {\n@@ -62,8 +62,8 @@ impl Not for B {\n }\n \n fn main() {\n-    let a = A::VariantX(true);\n-    let b = B {};\n+    let a = ImplNotTraitWithoutBool::VariantX(true);\n+    let b = ImplNotTraitWithBool;\n \n     assert_eq!(\"a\".len(), 1);\n     assert_eq!(\"a\".is_empty(), false);"}]}