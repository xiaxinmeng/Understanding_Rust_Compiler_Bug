{"sha": "99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MjM0YmJlOWU5Zjg5ZGNmZGYyOGI5ZWU1M2ZiY2VjZTVmMTlhYmI=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-02T01:19:33Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-02T15:01:14Z"}, "message": "Add a new non-heap allocated variant to io::Error's representation.\n\nImplement From<ErrorKind> for io::Error, intended for use with errors\nthat should never be exposed to the user.", "tree": {"sha": "efb047771cdd2f47053c9d026f7f88bbe69423d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb047771cdd2f47053c9d026f7f88bbe69423d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb", "html_url": "https://github.com/rust-lang/rust/commit/99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea4b94dab0d526135dd658d3a314cc5462d439b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4b94dab0d526135dd658d3a314cc5462d439b0", "html_url": "https://github.com/rust-lang/rust/commit/ea4b94dab0d526135dd658d3a314cc5462d439b0"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "659c8aa5aeafbf9fd93e609755b7e1bf9ce49ebd", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=99234bbe9e9f89dcfdf28b9ee53fbcece5f19abb", "patch": "@@ -12,6 +12,7 @@ use error;\n use fmt;\n use result;\n use sys;\n+use convert::From;\n \n /// A specialized [`Result`](../result/enum.Result.html) type for I/O\n /// operations.\n@@ -62,6 +63,7 @@ pub struct Error {\n \n enum Repr {\n     Os(i32),\n+    Simple(ErrorKind),\n     Custom(Box<Custom>),\n }\n \n@@ -171,6 +173,43 @@ pub enum ErrorKind {\n     __Nonexhaustive,\n }\n \n+impl ErrorKind {\n+    fn as_str(&self) -> &'static str {\n+        match *self {\n+            ErrorKind::NotFound => \"entity not found\",\n+            ErrorKind::PermissionDenied => \"permission denied\",\n+            ErrorKind::ConnectionRefused => \"connection refused\",\n+            ErrorKind::ConnectionReset => \"connection reset\",\n+            ErrorKind::ConnectionAborted => \"connection aborted\",\n+            ErrorKind::NotConnected => \"not connected\",\n+            ErrorKind::AddrInUse => \"address in use\",\n+            ErrorKind::AddrNotAvailable => \"address not available\",\n+            ErrorKind::BrokenPipe => \"broken pipe\",\n+            ErrorKind::AlreadyExists => \"entity already exists\",\n+            ErrorKind::WouldBlock => \"operation would block\",\n+            ErrorKind::InvalidInput => \"invalid input parameter\",\n+            ErrorKind::InvalidData => \"invalid data\",\n+            ErrorKind::TimedOut => \"timed out\",\n+            ErrorKind::WriteZero => \"write zero\",\n+            ErrorKind::Interrupted => \"operation interrupted\",\n+            ErrorKind::Other => \"other os error\",\n+            ErrorKind::UnexpectedEof => \"unexpected end of file\",\n+            ErrorKind::__Nonexhaustive => unreachable!()\n+        }\n+    }\n+}\n+\n+/// Intended for use for errors not exposed to the user, where allocating onto\n+/// the heap (for normal construction via Error::new) is too costly.\n+#[stable(feature = \"io_error_from_errorkind\", since = \"1.14.0\")]\n+impl From<ErrorKind> for Error {\n+    fn from(kind: ErrorKind) -> Error {\n+        Error {\n+            repr: Repr::Simple(kind)\n+        }\n+    }\n+}\n+\n impl Error {\n     /// Creates a new I/O error from a known kind of error as well as an\n     /// arbitrary error payload.\n@@ -285,6 +324,7 @@ impl Error {\n         match self.repr {\n             Repr::Os(i) => Some(i),\n             Repr::Custom(..) => None,\n+            Repr::Simple(..) => None,\n         }\n     }\n \n@@ -317,6 +357,7 @@ impl Error {\n     pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n+            Repr::Simple(..) => None,\n             Repr::Custom(ref c) => Some(&*c.error),\n         }\n     }\n@@ -387,6 +428,7 @@ impl Error {\n     pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n+            Repr::Simple(..) => None,\n             Repr::Custom(ref mut c) => Some(&mut *c.error),\n         }\n     }\n@@ -420,6 +462,7 @@ impl Error {\n     pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n         match self.repr {\n             Repr::Os(..) => None,\n+            Repr::Simple(..) => None,\n             Repr::Custom(c) => Some(c.error)\n         }\n     }\n@@ -447,6 +490,7 @@ impl Error {\n         match self.repr {\n             Repr::Os(code) => sys::decode_error_kind(code),\n             Repr::Custom(ref c) => c.kind,\n+            Repr::Simple(kind) => kind,\n         }\n     }\n }\n@@ -458,6 +502,7 @@ impl fmt::Debug for Repr {\n                 fmt.debug_struct(\"Os\").field(\"code\", code)\n                    .field(\"message\", &sys::os::error_string(*code)).finish(),\n             Repr::Custom(ref c) => fmt.debug_tuple(\"Custom\").field(c).finish(),\n+            Repr::Simple(kind) => fmt.debug_tuple(\"Kind\").field(&kind).finish(),\n         }\n     }\n }\n@@ -471,6 +516,7 @@ impl fmt::Display for Error {\n                 write!(fmt, \"{} (os error {})\", detail, code)\n             }\n             Repr::Custom(ref c) => c.error.fmt(fmt),\n+            Repr::Simple(kind) => write!(fmt, \"{}\", kind.as_str()),\n         }\n     }\n }\n@@ -479,34 +525,15 @@ impl fmt::Display for Error {\n impl error::Error for Error {\n     fn description(&self) -> &str {\n         match self.repr {\n-            Repr::Os(..) => match self.kind() {\n-                ErrorKind::NotFound => \"entity not found\",\n-                ErrorKind::PermissionDenied => \"permission denied\",\n-                ErrorKind::ConnectionRefused => \"connection refused\",\n-                ErrorKind::ConnectionReset => \"connection reset\",\n-                ErrorKind::ConnectionAborted => \"connection aborted\",\n-                ErrorKind::NotConnected => \"not connected\",\n-                ErrorKind::AddrInUse => \"address in use\",\n-                ErrorKind::AddrNotAvailable => \"address not available\",\n-                ErrorKind::BrokenPipe => \"broken pipe\",\n-                ErrorKind::AlreadyExists => \"entity already exists\",\n-                ErrorKind::WouldBlock => \"operation would block\",\n-                ErrorKind::InvalidInput => \"invalid input parameter\",\n-                ErrorKind::InvalidData => \"invalid data\",\n-                ErrorKind::TimedOut => \"timed out\",\n-                ErrorKind::WriteZero => \"write zero\",\n-                ErrorKind::Interrupted => \"operation interrupted\",\n-                ErrorKind::Other => \"other os error\",\n-                ErrorKind::UnexpectedEof => \"unexpected end of file\",\n-                ErrorKind::__Nonexhaustive => unreachable!()\n-            },\n+            Repr::Os(..) | Repr::Simple(..) => self.kind().as_str(),\n             Repr::Custom(ref c) => c.error.description(),\n         }\n     }\n \n     fn cause(&self) -> Option<&error::Error> {\n         match self.repr {\n             Repr::Os(..) => None,\n+            Repr::Simple(..) => None,\n             Repr::Custom(ref c) => c.error.cause(),\n         }\n     }"}]}