{"sha": "1a226f5807282b79bc27ac46a10f0c2517f067be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjI2ZjU4MDcyODJiNzliYzI3YWM0NmExMGYwYzI1MTdmMDY3YmU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T00:10:48Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T00:10:48Z"}, "message": "Merge pull request #4466 from ScriptDevil/master\n\nRange checking and miscellaneous fixes tin time library", "tree": {"sha": "e68a85a968303655bbcfb4df9e0d96ba8690acf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68a85a968303655bbcfb4df9e0d96ba8690acf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a226f5807282b79bc27ac46a10f0c2517f067be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a226f5807282b79bc27ac46a10f0c2517f067be", "html_url": "https://github.com/rust-lang/rust/commit/1a226f5807282b79bc27ac46a10f0c2517f067be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a226f5807282b79bc27ac46a10f0c2517f067be/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d672671e25855d9ca9813c55cc2fc33252de7b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d672671e25855d9ca9813c55cc2fc33252de7b8", "html_url": "https://github.com/rust-lang/rust/commit/9d672671e25855d9ca9813c55cc2fc33252de7b8"}, {"sha": "e69d491aeaec4402c69d1358d1b64b0bd2847507", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69d491aeaec4402c69d1358d1b64b0bd2847507", "html_url": "https://github.com/rust-lang/rust/commit/e69d491aeaec4402c69d1358d1b64b0bd2847507"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "8e7ffde65ece237ed4e9ae12bc2f29674aa10049", "filename": "src/libstd/time.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1a226f5807282b79bc27ac46a10f0c2517f067be/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a226f5807282b79bc27ac46a10f0c2517f067be/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=1a226f5807282b79bc27ac46a10f0c2517f067be", "patch": "@@ -341,6 +341,16 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         Some((value, pos))\n     }\n \n+    fn match_digits_in_range(ss: &str, pos: uint, digits: uint, ws: bool,\n+                             min: i32, max: i32) -> Option<(i32, uint)> {\n+        match match_digits(ss, pos, digits, ws) {\n+          Some((val, pos)) if val >= min && val <= max => {\n+            Some((val, pos))\n+          }\n+          _ => None\n+        }\n+    }\n+\n     fn parse_char(s: &str, pos: uint, c: char) -> Result<uint, ~str> {\n         let range = str::char_range_at(s, pos);\n \n@@ -414,7 +424,8 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             Some(item) => { let (v, pos) = item; tm.tm_mon = v; Ok(pos) }\n             None => Err(~\"Invalid month\")\n           },\n-          'C' => match match_digits(s, pos, 2u, false) {\n+          'C' => match match_digits_in_range(s, pos, 2u, false, 0_i32,\n+                                             99_i32) {\n             Some(item) => {\n                 let (v, pos) = item;\n                   tm.tm_year += (v * 100_i32) - 1900_i32;\n@@ -440,11 +451,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 .chain(|pos| parse_char(s, pos, '/'))\n                 .chain(|pos| parse_type(s, pos, 'y', &mut *tm))\n           }\n-          'd' => match match_digits(s, pos, 2u, false) {\n+          'd' => match match_digits_in_range(s, pos, 2u, false, 1_i32,\n+                                             31_i32) {\n             Some(item) => { let (v, pos) = item; tm.tm_mday = v; Ok(pos) }\n             None => Err(~\"Invalid day of the month\")\n           },\n-          'e' => match match_digits(s, pos, 2u, true) {\n+          'e' => match match_digits_in_range(s, pos, 2u, true, 1_i32,\n+                                             31_i32) {\n             Some(item) => { let (v, pos) = item; tm.tm_mday = v; Ok(pos) }\n             None => Err(~\"Invalid day of the month\")\n           },\n@@ -456,15 +469,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 .chain(|pos| parse_type(s, pos, 'd', &mut *tm))\n           }\n           'H' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 23_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_hour = v; Ok(pos) }\n               None => Err(~\"Invalid hour\")\n             }\n           }\n           'I' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 1_i32, 12_i32) {\n               Some(item) => {\n                   let (v, pos) = item;\n                   tm.tm_hour = if v == 12_i32 { 0_i32 } else { v };\n@@ -474,26 +485,23 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             }\n           }\n           'j' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 3u, false) {\n+            match match_digits_in_range(s, pos, 3u, false, 1_i32, 366_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_yday = v - 1_i32;\n                 Ok(pos)\n               }\n-              None => Err(~\"Invalid year\")\n+              None => Err(~\"Invalid day of year\")\n             }\n           }\n           'k' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, true) {\n+            match match_digits_in_range(s, pos, 2u, true, 0_i32, 23_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_hour = v; Ok(pos) }\n               None => Err(~\"Invalid hour\")\n             }\n           }\n           'l' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, true) {\n+            match match_digits_in_range(s, pos, 2u, true, 1_i32, 12_i32) {\n               Some(item) => {\n                   let (v, pos) = item;\n                   tm.tm_hour = if v == 12_i32 { 0_i32 } else { v };\n@@ -503,15 +511,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             }\n           }\n           'M' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 59_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_min = v; Ok(pos) }\n               None => Err(~\"Invalid minute\")\n             }\n           }\n           'm' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 1_i32, 12_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_mon = v - 1_i32;\n@@ -548,8 +554,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 .chain(|pos| parse_type(s, pos, 'p', &mut *tm))\n           }\n           'S' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 60_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_sec = v;\n@@ -568,14 +573,13 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           }\n           't' => parse_char(s, pos, '\\t'),\n           'u' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 1u, false) {\n+            match match_digits_in_range(s, pos, 1u, false, 1_i32, 7_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n-                tm.tm_wday = v;\n+                tm.tm_wday = v-1_i32;\n                 Ok(pos)\n               }\n-              None => Err(~\"Invalid weekday\")\n+              None => Err(~\"Invalid day of week\")\n             }\n           }\n           'v' => {\n@@ -587,34 +591,31 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           }\n           //'W' {}\n           'w' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 1u, false) {\n+            match match_digits_in_range(s, pos, 1u, false, 0_i32, 6_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n-              None => Err(~\"Invalid weekday\")\n+              None => Err(~\"Invalid day of week\")\n             }\n           }\n           //'X' {}\n           //'x' {}\n           'Y' => {\n-            // FIXME (#2350): range check.\n             match match_digits(s, pos, 4u, false) {\n               Some(item) => {\n                 let (v, pos) = item;\n                 tm.tm_year = v - 1900_i32;\n                 Ok(pos)\n               }\n-              None => Err(~\"Invalid weekday\")\n+              None => Err(~\"Invalid year\")\n             }\n           }\n           'y' => {\n-            // FIXME (#2350): range check.\n-            match match_digits(s, pos, 2u, false) {\n+            match match_digits_in_range(s, pos, 2u, false, 0_i32, 99_i32) {\n               Some(item) => {\n                 let (v, pos) = item;\n-                tm.tm_year = v - 1900_i32;\n+                tm.tm_year = v;\n                 Ok(pos)\n               }\n-              None => Err(~\"Invalid weekday\")\n+              None => Err(~\"Invalid year\")\n             }\n           }\n           'Z' => {"}]}