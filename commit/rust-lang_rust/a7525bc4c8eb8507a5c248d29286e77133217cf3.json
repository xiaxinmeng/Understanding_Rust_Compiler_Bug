{"sha": "a7525bc4c8eb8507a5c248d29286e77133217cf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTI1YmM0YzhlYjg1MDdhNWMyNDhkMjkyODZlNzcxMzMyMTdjZjM=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-01-20T20:56:59Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-01-20T20:56:59Z"}, "message": "Add more explanation for why the assumes are there", "tree": {"sha": "611f731e8167160457938baa86b610e172b266e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611f731e8167160457938baa86b610e172b266e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7525bc4c8eb8507a5c248d29286e77133217cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7525bc4c8eb8507a5c248d29286e77133217cf3", "html_url": "https://github.com/rust-lang/rust/commit/a7525bc4c8eb8507a5c248d29286e77133217cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7525bc4c8eb8507a5c248d29286e77133217cf3/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbfd681c9fa47f462a89e8f5eedd3fa2a5de2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbfd681c9fa47f462a89e8f5eedd3fa2a5de2e7", "html_url": "https://github.com/rust-lang/rust/commit/9bbfd681c9fa47f462a89e8f5eedd3fa2a5de2e7"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "e651e375e3d5c69cfef8f20e436ea93dafb59689", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7525bc4c8eb8507a5c248d29286e77133217cf3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7525bc4c8eb8507a5c248d29286e77133217cf3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a7525bc4c8eb8507a5c248d29286e77133217cf3", "patch": "@@ -909,6 +909,8 @@ trait RcBoxPtr<T> {\n     fn inc_strong(&self) {\n         let strong = self.strong();\n         // The reference count is always at least one unless we're about to drop the type\n+        // This allows the bulk of the destructor to be omitted in cases where we know that\n+        // the reference count must be > 0.\n         unsafe { assume(strong > 0); }\n         self.inner().strong.set(strong + 1);\n     }\n@@ -917,6 +919,8 @@ trait RcBoxPtr<T> {\n     fn dec_strong(&self) {\n         let strong = self.strong();\n         // The reference count is always at least one unless we're about to drop the type\n+        // This allows the bulk of the destructor to be omitted in cases where we know that\n+        // the reference count must be > 0\n         unsafe { assume(strong > 0); }\n         self.inner().strong.set(strong - 1);\n     }\n@@ -936,7 +940,9 @@ impl<T> RcBoxPtr<T> for Rc<T> {\n     fn inner(&self) -> &RcBox<T> {\n         unsafe {\n             // Safe to assume this here, as if it weren't true, we'd be breaking\n-            // the contract anyway\n+            // the contract anyway.\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n             assume(!self._ptr.is_null());\n             &(**self._ptr)\n         }\n@@ -949,6 +955,8 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n         unsafe {\n             // Safe to assume this here, as if it weren't true, we'd be breaking\n             // the contract anyway\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n             assume(!self._ptr.is_null());\n             &(**self._ptr)\n         }"}]}