{"sha": "041a269bc729c68cbb6d7283332a175c17c529fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MWEyNjliYzcyOWM2OGNiYjZkNzI4MzMzMmExNzVjMTdjNTI5ZmI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-03T13:39:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-03T14:24:52Z"}, "message": "Rollup merge of #33339 - oli-obk:fix/const_eval, r=japaric\n\nfix various const eval errors\n\nThese were found after const_evaluating arbitrary expressions and linting if the const evaluator failed\n\nfixes #33275 (int -> float casts for negative ints)\nfixes #33291 (int -> char casts (new! wasn't allowed in constants until this PR))\n\nr? @eddyb\n\ncc @bluss @japaric", "tree": {"sha": "e833c23cf33076afdc24a2a38b843ab04b6a31ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e833c23cf33076afdc24a2a38b843ab04b6a31ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/041a269bc729c68cbb6d7283332a175c17c529fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXKLS0AAoJEDu/TT4u95+Y9m4QAL7wznLbQMv4du+bohObJmNs\noItaIy2PrR4EyTk2rpKZxhN5aqFYWJ6omQk/WUDVhpqHtW7GgTL3pemRkrRmrVnA\nTXFSbJriEGdUKP101k6XWuDdEE00QiHs6eZcPfqUnwi2PyRf7dBhJp3y45iDfQJ9\nobWzltZRBpR1X3KAWwwuBc0/PYM34lcp0Yngn+Gav6WJoM2JH8hfXT9x8PlWXmOL\n9F+6pVCkvIF9xFwuC+zDmonHXpe7ebx9EIbbR5jJuN9hGbwvpnuRgGEqh2jcD0X4\nFx60fGVn262UHX1Nid6YbKI8t1ZcLfe/ckCZ/cep7IgOMh8GQoMrIJzK+uldWfsA\n7kgL9Qp7yHbYdLnWrhpgv8wbm/g69hEVbWTWU3JAEKr3YJKgmY8KSuFJXNr9xBUj\nZDIPxuSDxWbqdJ1gVsL2OMGMaU31Ccd8qQkbGE/nEbPEjJm4mBaiIhcTn0MBVI7u\n+d+8tswnTW3KJJlMOOWhmHR3DV5lPi6uZ60tH4ALXlmvChZqgq1GS1UsZH3lsFB6\ngFdENA9ERn8nInZn0aZK99Pa7DmIsBPGy8z8p2tcIdBkYxXNHKQ8l4yz6h3Rrmm4\nIT8L3rtGalUIrnQAuUD5hJDOxAKauJXkZp+MXQZTdDs5dYsogWnqn21IPEbXBNw8\nAzqF+549pVMvJ1TRVcUO\n=TpX/\n-----END PGP SIGNATURE-----", "payload": "tree e833c23cf33076afdc24a2a38b843ab04b6a31ae\nparent 2e4474f890bd2a55f3efcfe17e411b902fbfb383\nparent ce6ea47d43e9c646849aad34876a0054da58a1e9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462282748 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462285492 +0530\n\nRollup merge of #33339 - oli-obk:fix/const_eval, r=japaric\n\nfix various const eval errors\n\nThese were found after const_evaluating arbitrary expressions and linting if the const evaluator failed\n\nfixes #33275 (int -> float casts for negative ints)\nfixes #33291 (int -> char casts (new! wasn't allowed in constants until this PR))\n\nr? @eddyb\n\ncc @bluss @japaric\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/041a269bc729c68cbb6d7283332a175c17c529fb", "html_url": "https://github.com/rust-lang/rust/commit/041a269bc729c68cbb6d7283332a175c17c529fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/041a269bc729c68cbb6d7283332a175c17c529fb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4474f890bd2a55f3efcfe17e411b902fbfb383", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4474f890bd2a55f3efcfe17e411b902fbfb383", "html_url": "https://github.com/rust-lang/rust/commit/2e4474f890bd2a55f3efcfe17e411b902fbfb383"}, {"sha": "ce6ea47d43e9c646849aad34876a0054da58a1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6ea47d43e9c646849aad34876a0054da58a1e9", "html_url": "https://github.com/rust-lang/rust/commit/ce6ea47d43e9c646849aad34876a0054da58a1e9"}], "stats": {"total": 122, "additions": 67, "deletions": 55}, "files": [{"sha": "06be29b90497657dd97fe307595605d7fdfade12", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 37, "deletions": 48, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/041a269bc729c68cbb6d7283332a175c17c529fb/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041a269bc729c68cbb6d7283332a175c17c529fb/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=041a269bc729c68cbb6d7283332a175c17c529fb", "patch": "@@ -377,13 +377,6 @@ pub enum ErrKind {\n     NotOn(ConstVal),\n     CallOn(ConstVal),\n \n-    NegateWithOverflow(i64),\n-    AddiWithOverflow(i64, i64),\n-    SubiWithOverflow(i64, i64),\n-    MuliWithOverflow(i64, i64),\n-    AdduWithOverflow(u64, u64),\n-    SubuWithOverflow(u64, u64),\n-    MuluWithOverflow(u64, u64),\n     DivideByZero,\n     DivideWithOverflow,\n     ModuloByZero,\n@@ -415,6 +408,7 @@ pub enum ErrKind {\n     TypeMismatch(String, ConstInt),\n     BadType(ConstVal),\n     ErroneousReferencedConstant(Box<ConstEvalErr>),\n+    CharCast(ConstInt),\n }\n \n impl From<ConstMathErr> for ErrKind {\n@@ -439,13 +433,6 @@ impl ConstEvalErr {\n             NotOn(ref const_val) => format!(\"not on {}\", const_val.description()).into_cow(),\n             CallOn(ref const_val) => format!(\"call on {}\", const_val.description()).into_cow(),\n \n-            NegateWithOverflow(..) => \"attempted to negate with overflow\".into_cow(),\n-            AddiWithOverflow(..) => \"attempted to add with overflow\".into_cow(),\n-            SubiWithOverflow(..) => \"attempted to sub with overflow\".into_cow(),\n-            MuliWithOverflow(..) => \"attempted to mul with overflow\".into_cow(),\n-            AdduWithOverflow(..) => \"attempted to add with overflow\".into_cow(),\n-            SubuWithOverflow(..) => \"attempted to sub with overflow\".into_cow(),\n-            MuluWithOverflow(..) => \"attempted to mul with overflow\".into_cow(),\n             DivideByZero         => \"attempted to divide by zero\".into_cow(),\n             DivideWithOverflow   => \"attempted to divide with overflow\".into_cow(),\n             ModuloByZero         => \"attempted remainder with a divisor of zero\".into_cow(),\n@@ -482,6 +469,9 @@ impl ConstEvalErr {\n             },\n             BadType(ref i) => format!(\"value of wrong type: {:?}\", i).into_cow(),\n             ErroneousReferencedConstant(_) => \"could not evaluate referenced constant\".into_cow(),\n+            CharCast(ref got) => {\n+                format!(\"only `u8` can be cast as `char`, not `{}`\", got.description()).into_cow()\n+            },\n         }\n     }\n }\n@@ -824,7 +814,10 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n           debug!(\"const call({:?})\", call_args);\n           eval_const_expr_partial(tcx, &result, ty_hint, Some(&call_args))?\n       },\n-      hir::ExprLit(ref lit) => lit_to_const(&lit.node, tcx, ety, lit.span)?,\n+      hir::ExprLit(ref lit) => match lit_to_const(&lit.node, tcx, ety, lit.span) {\n+          Ok(val) => val,\n+          Err(err) => signal!(e, err),\n+      },\n       hir::ExprBlock(ref block) => {\n         match block.expr {\n             Some(ref expr) => eval_const_expr_partial(tcx, &expr, ty_hint, fn_args)?,\n@@ -930,7 +923,10 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n     };\n \n     match (ety.map(|t| &t.sty), result) {\n-        (Some(ref ty_hint), Integral(i)) => Ok(Integral(infer(i, tcx, ty_hint, e.span)?)),\n+        (Some(ref ty_hint), Integral(i)) => match infer(i, tcx, ty_hint) {\n+            Ok(inferred) => Ok(Integral(inferred)),\n+            Err(err) => signal!(e, err),\n+        },\n         (_, result) => Ok(result),\n     }\n }\n@@ -939,15 +935,9 @@ fn infer<'tcx>(\n     i: ConstInt,\n     tcx: &TyCtxt<'tcx>,\n     ty_hint: &ty::TypeVariants<'tcx>,\n-    span: Span\n-) -> Result<ConstInt, ConstEvalErr> {\n+) -> Result<ConstInt, ErrKind> {\n     use syntax::ast::*;\n \n-    let err = |e| ConstEvalErr {\n-        span: span,\n-        kind: e,\n-    };\n-\n     match (ty_hint, i) {\n         (&ty::TyInt(IntTy::I8), result @ I8(_)) => Ok(result),\n         (&ty::TyInt(IntTy::I16), result @ I16(_)) => Ok(result),\n@@ -993,17 +983,17 @@ fn infer<'tcx>(\n                 Err(_) => Ok(Usize(ConstUsize::Us32(i as u32))),\n             }\n         },\n-        (&ty::TyUint(_), InferSigned(_)) => Err(err(IntermediateUnsignedNegative)),\n+        (&ty::TyUint(_), InferSigned(_)) => Err(IntermediateUnsignedNegative),\n \n-        (&ty::TyInt(ity), i) => Err(err(TypeMismatch(ity.to_string(), i))),\n-        (&ty::TyUint(ity), i) => Err(err(TypeMismatch(ity.to_string(), i))),\n+        (&ty::TyInt(ity), i) => Err(TypeMismatch(ity.to_string(), i)),\n+        (&ty::TyUint(ity), i) => Err(TypeMismatch(ity.to_string(), i)),\n \n         (&ty::TyEnum(ref adt, _), i) => {\n             let hints = tcx.lookup_repr_hints(adt.did);\n             let int_ty = tcx.enum_repr_type(hints.iter().next());\n-            infer(i, tcx, &int_ty.to_ty(tcx).sty, span)\n+            infer(i, tcx, &int_ty.to_ty(tcx).sty)\n         },\n-        (_, i) => Err(err(BadType(ConstVal::Integral(i)))),\n+        (_, i) => Err(BadType(ConstVal::Integral(i))),\n     }\n }\n \n@@ -1089,23 +1079,22 @@ fn cast_const_int<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstInt, ty: ty::Ty) -> CastRe\n                 Err(_) => Ok(Integral(Usize(ConstUsize::Us32(v as u32)))),\n             }\n         },\n-        ty::TyFloat(ast::FloatTy::F64) if val.is_negative() => {\n-            // FIXME: this could probably be prettier\n-            // there's no easy way to turn an `Infer` into a f64\n-            let val = (-val).map_err(Math)?;\n-            let val = val.to_u64().unwrap() as f64;\n-            let val = -val;\n-            Ok(Float(val))\n+        ty::TyFloat(ast::FloatTy::F64) => match val.erase_type() {\n+            Infer(u) => Ok(Float(u as f64)),\n+            InferSigned(i) => Ok(Float(i as f64)),\n+            _ => bug!(\"ConstInt::erase_type returned something other than Infer/InferSigned\"),\n         },\n-        ty::TyFloat(ast::FloatTy::F64) => Ok(Float(val.to_u64().unwrap() as f64)),\n-        ty::TyFloat(ast::FloatTy::F32) if val.is_negative() => {\n-            let val = (-val).map_err(Math)?;\n-            let val = val.to_u64().unwrap() as f32;\n-            let val = -val;\n-            Ok(Float(val as f64))\n+        ty::TyFloat(ast::FloatTy::F32) => match val.erase_type() {\n+            Infer(u) => Ok(Float(u as f32 as f64)),\n+            InferSigned(i) => Ok(Float(i as f32 as f64)),\n+            _ => bug!(\"ConstInt::erase_type returned something other than Infer/InferSigned\"),\n         },\n-        ty::TyFloat(ast::FloatTy::F32) => Ok(Float(val.to_u64().unwrap() as f32 as f64)),\n         ty::TyRawPtr(_) => Err(ErrKind::UnimplementedConstVal(\"casting an address to a raw ptr\")),\n+        ty::TyChar => match infer(val, tcx, &ty::TyUint(ast::UintTy::U8)) {\n+            Ok(U8(u)) => Ok(Char(u as char)),\n+            // can only occur before typeck, typeck blocks `T as char` for `T` != `u8`\n+            _ => Err(CharCast(val)),\n+        },\n         _ => Err(CannotCast),\n     }\n }\n@@ -1136,36 +1125,36 @@ fn lit_to_const<'tcx>(lit: &ast::LitKind,\n                       tcx: &TyCtxt<'tcx>,\n                       ty_hint: Option<Ty<'tcx>>,\n                       span: Span,\n-                      ) -> Result<ConstVal, ConstEvalErr> {\n+                      ) -> Result<ConstVal, ErrKind> {\n     use syntax::ast::*;\n     use syntax::ast::LitIntType::*;\n     match *lit {\n         LitKind::Str(ref s, _) => Ok(Str((*s).clone())),\n         LitKind::ByteStr(ref data) => Ok(ByteStr(data.clone())),\n         LitKind::Byte(n) => Ok(Integral(U8(n))),\n         LitKind::Int(n, Signed(ity)) => {\n-            infer(InferSigned(n as i64), tcx, &ty::TyInt(ity), span).map(Integral)\n+            infer(InferSigned(n as i64), tcx, &ty::TyInt(ity)).map(Integral)\n         },\n \n         LitKind::Int(n, Unsuffixed) => {\n             match ty_hint.map(|t| &t.sty) {\n                 Some(&ty::TyInt(ity)) => {\n-                    infer(InferSigned(n as i64), tcx, &ty::TyInt(ity), span).map(Integral)\n+                    infer(InferSigned(n as i64), tcx, &ty::TyInt(ity)).map(Integral)\n                 },\n                 Some(&ty::TyUint(uty)) => {\n-                    infer(Infer(n), tcx, &ty::TyUint(uty), span).map(Integral)\n+                    infer(Infer(n), tcx, &ty::TyUint(uty)).map(Integral)\n                 },\n                 None => Ok(Integral(Infer(n))),\n                 Some(&ty::TyEnum(ref adt, _)) => {\n                     let hints = tcx.lookup_repr_hints(adt.did);\n                     let int_ty = tcx.enum_repr_type(hints.iter().next());\n-                    infer(Infer(n), tcx, &int_ty.to_ty(tcx).sty, span).map(Integral)\n+                    infer(Infer(n), tcx, &int_ty.to_ty(tcx).sty).map(Integral)\n                 },\n                 Some(ty_hint) => bug!(\"bad ty_hint: {:?}, {:?}\", ty_hint, lit),\n             }\n         },\n         LitKind::Int(n, Unsigned(ity)) => {\n-            infer(Infer(n), tcx, &ty::TyUint(ity), span).map(Integral)\n+            infer(Infer(n), tcx, &ty::TyUint(ity)).map(Integral)\n         },\n \n         LitKind::Float(ref n, _) |"}, {"sha": "31e1a72967f4dcf4860574ce6f563503a3d2637d", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/041a269bc729c68cbb6d7283332a175c17c529fb/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041a269bc729c68cbb6d7283332a175c17c529fb/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=041a269bc729c68cbb6d7283332a175c17c529fb", "patch": "@@ -15,7 +15,6 @@\n \n #![allow(unused_imports)]\n \n-use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n@@ -26,10 +25,15 @@ const A_I8_T\n     //~| found `u8` [E0250]\n     = [0; (i8::MAX as usize) + 1];\n \n-fn main() {\n-    foo(&A_I8_T[..]);\n-}\n \n-fn foo<T:fmt::Debug>(x: T) {\n-    println!(\"{:?}\", x);\n-}\n+const A_CHAR_USIZE\n+    : [u32; 5u8 as char as usize]\n+    = [0; 5];\n+\n+\n+const A_BAD_CHAR_USIZE\n+    : [u32; 5i8 as char as usize]\n+    //~^ ERROR only `u8` can be cast as `char`, not `i8`\n+    = [0; 5];\n+\n+fn main() {}"}, {"sha": "30641c1cb87b198e7ec30008843cc6a9720fa66e", "filename": "src/test/run-pass/const-err.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/041a269bc729c68cbb6d7283332a175c17c529fb/src%2Ftest%2Frun-pass%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041a269bc729c68cbb6d7283332a175c17c529fb/src%2Ftest%2Frun-pass%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-err.rs?ref=041a269bc729c68cbb6d7283332a175c17c529fb", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check for const_err regressions\n+\n+#![deny(const_err)]\n+\n+\n+fn main() {\n+    let _ = ((-1 as i8) << 8 - 1) as f32;\n+    let _ = 0u8 as char;\n+}"}]}