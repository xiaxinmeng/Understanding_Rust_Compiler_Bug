{"sha": "743a8171a99748890c7922d15c3f63ba180e2de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0M2E4MTcxYTk5NzQ4ODkwYzc5MjJkMTVjM2Y2M2JhMTgwZTJkZTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-10T21:04:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-10T22:09:01Z"}, "message": "rustc: Search all derives for inert attributes\n\nThis commit fixes an apparent mistake in librustc_resolve where when the\n`proc_macro` feature is enabled (or `rust_2018_preview`) the resolution of\ncustom attributes for custom derive was tweaked. Previously when an attribute\nfailed to resolve it was attempted to locate if there is a custom derive also in\nscope which declares the attribute, but only the first custom derive directive\nwas search.\n\nInstead this commit fixes the loop to search all custom derive invocations\nlooking for any which register the attribute in question.\n\nCloses #52219", "tree": {"sha": "a58d94ca6fe4977974b62d09867289f074ca3737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58d94ca6fe4977974b62d09867289f074ca3737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743a8171a99748890c7922d15c3f63ba180e2de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743a8171a99748890c7922d15c3f63ba180e2de8", "html_url": "https://github.com/rust-lang/rust/commit/743a8171a99748890c7922d15c3f63ba180e2de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743a8171a99748890c7922d15c3f63ba180e2de8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90bd83c9fca7b22056ec1ee0f00f095230bdb5c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bd83c9fca7b22056ec1ee0f00f095230bdb5c7", "html_url": "https://github.com/rust-lang/rust/commit/90bd83c9fca7b22056ec1ee0f00f095230bdb5c7"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "3727615386f47fe4a1e9a6b1e1646d87d97d61e8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/743a8171a99748890c7922d15c3f63ba180e2de8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743a8171a99748890c7922d15c3f63ba180e2de8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=743a8171a99748890c7922d15c3f63ba180e2de8", "patch": "@@ -390,6 +390,22 @@ impl<'a> Resolver<'a> {\n             Err(Determinacy::Determined) => {}\n         }\n \n+        // Ok at this point we've determined that the `attr` above doesn't\n+        // actually resolve at this time, so we may want to report an error.\n+        // It could be the case, though, that `attr` won't ever resolve! If\n+        // there's a custom derive that could be used it might declare `attr` as\n+        // a custom attribute accepted by the derive. In this case we don't want\n+        // to report this particular invocation as unresolved, but rather we'd\n+        // want to move on to the next invocation.\n+        //\n+        // This loop here looks through all of the derive annotations in scope\n+        // and tries to resolve them. If they themselves successfully resolve\n+        // *and* the resolve mentions that this attribute's name is a registered\n+        // custom attribute then we flag this attribute as known and update\n+        // `invoc` above to point to the next invocation.\n+        //\n+        // By then returning `Undetermined` we should continue resolution to\n+        // resolve the next attribute.\n         let attr_name = match path.segments.len() {\n             1 => path.segments[0].ident.name,\n             _ => return Err(determinacy),\n@@ -411,8 +427,8 @@ impl<'a> Resolver<'a> {\n                             attrs.push(inert_attr);\n                             attrs\n                         });\n+                        return Err(Determinacy::Undetermined)\n                     }\n-                    return Err(Determinacy::Undetermined);\n                 },\n                 Err(Determinacy::Undetermined) => determinacy = Determinacy::Undetermined,\n                 Err(Determinacy::Determined) => {}"}, {"sha": "4609f57bddfa44c2a620f866c4e6a09b1a802658", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/custom-attr-only-one-derive.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/743a8171a99748890c7922d15c3f63ba180e2de8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcustom-attr-only-one-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743a8171a99748890c7922d15c3f63ba180e2de8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcustom-attr-only-one-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcustom-attr-only-one-derive.rs?ref=743a8171a99748890c7922d15c3f63ba180e2de8", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Foo)]\n+pub fn foo(a: TokenStream) -> TokenStream {\n+    \"\".parse().unwrap()\n+}\n+\n+#[proc_macro_derive(Bar, attributes(custom))]\n+pub fn bar(a: TokenStream) -> TokenStream {\n+    \"\".parse().unwrap()\n+}"}, {"sha": "3b2833a4bcf756fae3545d0305a7efdd21d1b4d0", "filename": "src/test/run-pass-fulldeps/proc-macro/custom-attr-only-one-derive.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/743a8171a99748890c7922d15c3f63ba180e2de8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcustom-attr-only-one-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743a8171a99748890c7922d15c3f63ba180e2de8/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcustom-attr-only-one-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcustom-attr-only-one-derive.rs?ref=743a8171a99748890c7922d15c3f63ba180e2de8", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:custom-attr-only-one-derive.rs\n+\n+#![feature(rust_2018_preview)]\n+\n+#[macro_use]\n+extern crate custom_attr_only_one_derive;\n+\n+#[derive(Bar, Foo)]\n+#[custom = \"test\"]\n+pub enum A {\n+    B,\n+    C,\n+}\n+\n+fn main() {}"}]}