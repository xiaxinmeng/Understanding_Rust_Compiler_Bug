{"sha": "cd936cc812807faddeea04d401f9d76846266d2e", "node_id": "C_kwDOAAsO6NoAKGNkOTM2Y2M4MTI4MDdmYWRkZWVhMDRkNDAxZjlkNzY4NDYyNjZkMmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-08T11:57:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-08T11:57:29Z"}, "message": "Rollup merge of #105120 - solid-rs:patch/kmc-solid/maintainance, r=thomcc\n\nkmc-solid: `std::sys` code maintenance\n\nIncludes a set of changes to fix the [`*-kmc-solid_*`](https://doc.rust-lang.org/nightly/rustc/platform-support/kmc-solid.html) Tier 3 targets and make some other improvements.\n\n- Address `fuzzy_provenance_casts` by using `expose_addr` and `from_exposed_addr` for pointer-integer casts\n- Add a stub implementation of `is_terminal` (#98070)\n- Address `unused_imports` and `unused_unsafe`\n- Stop doing `Box::from_raw(&*(x: Box<T>) as *const T as *mut T)`", "tree": {"sha": "206191e8ff13a096e2d0bfff594f32dba96b5709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206191e8ff13a096e2d0bfff594f32dba96b5709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd936cc812807faddeea04d401f9d76846266d2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjkdEpCRBK7hj4Ov3rIwAAdeUIADDJQ1P+qj/ntuGn5DBMi9AA\nvSmZEHJ6O4h9FG06kY8QzrpE9qLXF6Bjsu4UIzsCivbmG/AiKFeZbe1vZZYDPXcp\nL1RQ6gsik9mgiAZT6I/9Q+NFfr6pD963aGqGZiSEDd40nXqL7OSHTX/KD6lr+Z41\nRh+mNlDRPz0pzngRJO7U01R4BIqKH9yvwFci9E74o/X4Rs/ZeSEoTOh5i8Gp1oCc\nNl8Qxcp9y+qrcBoJjkIEe/jkmahBAz/BYg/pFg+NYiU9YKrwvjy+W77LcznHo8lj\nTFZfQgnaewscwEgeYkN/0zTOZhHahaBbUHzg1wHVgL2OVv+D1adkB+APXh6JHs8=\n=BqWW\n-----END PGP SIGNATURE-----\n", "payload": "tree 206191e8ff13a096e2d0bfff594f32dba96b5709\nparent 086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62\nparent ae7633f434011fe1829b9b235a20d91634479eb5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670500649 +0100\ncommitter GitHub <noreply@github.com> 1670500649 +0100\n\nRollup merge of #105120 - solid-rs:patch/kmc-solid/maintainance, r=thomcc\n\nkmc-solid: `std::sys` code maintenance\n\nIncludes a set of changes to fix the [`*-kmc-solid_*`](https://doc.rust-lang.org/nightly/rustc/platform-support/kmc-solid.html) Tier 3 targets and make some other improvements.\n\n- Address `fuzzy_provenance_casts` by using `expose_addr` and `from_exposed_addr` for pointer-integer casts\n- Add a stub implementation of `is_terminal` (#98070)\n- Address `unused_imports` and `unused_unsafe`\n- Stop doing `Box::from_raw(&*(x: Box<T>) as *const T as *mut T)`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd936cc812807faddeea04d401f9d76846266d2e", "html_url": "https://github.com/rust-lang/rust/commit/cd936cc812807faddeea04d401f9d76846266d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd936cc812807faddeea04d401f9d76846266d2e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "url": "https://api.github.com/repos/rust-lang/rust/commits/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62", "html_url": "https://github.com/rust-lang/rust/commit/086bdbbd73b0f5c2a1b5150d8a352faa07ae3d62"}, {"sha": "ae7633f434011fe1829b9b235a20d91634479eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7633f434011fe1829b9b235a20d91634479eb5", "html_url": "https://github.com/rust-lang/rust/commit/ae7633f434011fe1829b9b235a20d91634479eb5"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "7a47cc6696a34908a0bea6f832dbf14e8b68087d", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=cd936cc812807faddeea04d401f9d76846266d2e", "patch": "@@ -71,7 +71,7 @@ impl Condvar {\n             }\n         }\n \n-        unsafe { mutex.lock() };\n+        mutex.lock();\n     }\n \n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n@@ -109,7 +109,7 @@ impl Condvar {\n         // we woke up because of `notify_*`.\n         let success = self.waiters.with_locked(|waiters| unsafe { !waiters.remove(waiter) });\n \n-        unsafe { mutex.lock() };\n+        mutex.lock();\n         success\n     }\n }"}, {"sha": "1f6cc41947602be1a7f81d443972de6e26b78d69", "filename": "library/std/src/sys/itron/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs?ref=cd936cc812807faddeea04d401f9d76846266d2e", "patch": "@@ -72,7 +72,7 @@ pub(super) struct MutexGuard<'a>(&'a Mutex);\n impl<'a> MutexGuard<'a> {\n     #[inline]\n     pub(super) fn lock(x: &'a Mutex) -> Self {\n-        unsafe { x.lock() };\n+        x.lock();\n         Self(x)\n     }\n }"}, {"sha": "c2b3668087225cdc884a28d3a15660974c16b98d", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=cd936cc812807faddeea04d401f9d76846266d2e", "patch": "@@ -11,18 +11,25 @@ use crate::{\n     ffi::CStr,\n     hint, io,\n     mem::ManuallyDrop,\n+    ptr::NonNull,\n     sync::atomic::{AtomicUsize, Ordering},\n     sys::thread_local_dtor::run_dtors,\n     time::Duration,\n };\n \n pub struct Thread {\n-    inner: ManuallyDrop<Box<ThreadInner>>,\n+    p_inner: NonNull<ThreadInner>,\n \n     /// The ID of the underlying task.\n     task: abi::ID,\n }\n \n+// Safety: There's nothing in `Thread` that ties it to the original creator. It\n+//         can be dropped by any threads.\n+unsafe impl Send for Thread {}\n+// Safety: `Thread` provides no methods that take `&self`.\n+unsafe impl Sync for Thread {}\n+\n /// State data shared between a parent thread and child thread. It's dropped on\n /// a transition to one of the final states.\n struct ThreadInner {\n@@ -90,8 +97,9 @@ impl Thread {\n         });\n \n         unsafe extern \"C\" fn trampoline(exinf: isize) {\n+            let p_inner: *mut ThreadInner = crate::ptr::from_exposed_addr_mut(exinf as usize);\n             // Safety: `ThreadInner` is alive at this point\n-            let inner = unsafe { &*(exinf as *const ThreadInner) };\n+            let inner = unsafe { &*p_inner };\n \n             // Safety: Since `trampoline` is called only once for each\n             //         `ThreadInner` and only `trampoline` touches `start`,\n@@ -119,13 +127,13 @@ impl Thread {\n                     // No one will ever join, so we'll ask the collector task to\n                     // delete the task.\n \n-                    // In this case, `inner`'s ownership has been moved to us,\n-                    // And we are responsible for dropping it. The acquire\n+                    // In this case, `*p_inner`'s ownership has been moved to\n+                    // us, and we are responsible for dropping it. The acquire\n                     // ordering is not necessary because the parent thread made\n                     // no memory access needing synchronization since the call\n                     // to `acre_tsk`.\n                     // Safety: See above.\n-                    let _ = unsafe { Box::from_raw(inner as *const _ as *mut ThreadInner) };\n+                    let _ = unsafe { Box::from_raw(p_inner) };\n \n                     // Safety: There are no pinned references to the stack\n                     unsafe { terminate_and_delete_current_task() };\n@@ -162,13 +170,14 @@ impl Thread {\n             }\n         }\n \n-        let inner_ptr = (&*inner) as *const ThreadInner;\n+        // Safety: `Box::into_raw` returns a non-null pointer\n+        let p_inner = unsafe { NonNull::new_unchecked(Box::into_raw(inner)) };\n \n         let new_task = ItronError::err_if_negative(unsafe {\n             abi::acre_tsk(&abi::T_CTSK {\n                 // Activate this task immediately\n                 tskatr: abi::TA_ACT,\n-                exinf: inner_ptr as abi::EXINF,\n+                exinf: p_inner.as_ptr().expose_addr() as abi::EXINF,\n                 // The entry point\n                 task: Some(trampoline),\n                 // Inherit the calling task's base priority\n@@ -180,7 +189,7 @@ impl Thread {\n         })\n         .map_err(|e| e.as_io_error())?;\n \n-        Ok(Self { inner: ManuallyDrop::new(inner), task: new_task })\n+        Ok(Self { p_inner, task: new_task })\n     }\n \n     pub fn yield_now() {\n@@ -197,8 +206,9 @@ impl Thread {\n         }\n     }\n \n-    pub fn join(mut self) {\n-        let inner = &*self.inner;\n+    pub fn join(self) {\n+        // Safety: `ThreadInner` is alive at this point\n+        let inner = unsafe { self.p_inner.as_ref() };\n         // Get the current task ID. Panicking here would cause a resource leak,\n         // so just abort on failure.\n         let current_task = task::current_task_id_aborting();\n@@ -243,8 +253,8 @@ impl Thread {\n         unsafe { terminate_and_delete_task(self.task) };\n \n         // In either case, we are responsible for dropping `inner`.\n-        // Safety: The contents of `self.inner` will not be accessed hereafter\n-        let _inner = unsafe { ManuallyDrop::take(&mut self.inner) };\n+        // Safety: The contents of `*p_inner` will not be accessed hereafter\n+        let _inner = unsafe { Box::from_raw(self.p_inner.as_ptr()) };\n \n         // Skip the destructor (because it would attempt to detach the thread)\n         crate::mem::forget(self);\n@@ -253,13 +263,16 @@ impl Thread {\n \n impl Drop for Thread {\n     fn drop(&mut self) {\n+        // Safety: `ThreadInner` is alive at this point\n+        let inner = unsafe { self.p_inner.as_ref() };\n+\n         // Detach the thread.\n-        match self.inner.lifecycle.swap(LIFECYCLE_DETACHED_OR_JOINED, Ordering::Acquire) {\n+        match inner.lifecycle.swap(LIFECYCLE_DETACHED_OR_JOINED, Ordering::Acquire) {\n             LIFECYCLE_INIT => {\n                 // [INIT \u2192 DETACHED]\n                 // When the time comes, the child will figure out that no\n                 // one will ever join it.\n-                // The ownership of `self.inner` is moved to the child thread.\n+                // The ownership of `*p_inner` is moved to the child thread.\n                 // However, the release ordering is not necessary because we\n                 // made no memory access needing synchronization since the call\n                 // to `acre_tsk`.\n@@ -278,10 +291,9 @@ impl Drop for Thread {\n                 //         delete by entering the `FINISHED` state.\n                 unsafe { terminate_and_delete_task(self.task) };\n \n-                // Wwe are responsible for dropping `inner`.\n-                // Safety: The contents of `self.inner` will not be accessed\n-                //         hereafter\n-                unsafe { ManuallyDrop::drop(&mut self.inner) };\n+                // Wwe are responsible for dropping `*p_inner`.\n+                // Safety: The contents of `*p_inner` will not be accessed hereafter\n+                let _ = unsafe { Box::from_raw(self.p_inner.as_ptr()) };\n             }\n             _ => unsafe { hint::unreachable_unchecked() },\n         }"}, {"sha": "a862bb7870264e72ece3f8ee5c6bfc2a9ef0992f", "filename": "library/std/src/sys/solid/io.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fio.rs?ref=cd936cc812807faddeea04d401f9d76846266d2e", "patch": "@@ -75,3 +75,7 @@ impl<'a> IoSliceMut<'a> {\n         unsafe { slice::from_raw_parts_mut(self.vec.iov_base as *mut u8, self.vec.iov_len) }\n     }\n }\n+\n+pub fn is_terminal<T>(_: &T) -> bool {\n+    false\n+}"}, {"sha": "6135921f0b5a89a6694d7d151130255981423c73", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd936cc812807faddeea04d401f9d76846266d2e/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=cd936cc812807faddeea04d401f9d76846266d2e", "patch": "@@ -1,7 +1,6 @@\n use super::unsupported;\n-use crate::convert::TryFrom;\n use crate::error::Error as StdError;\n-use crate::ffi::{CStr, CString, OsStr, OsString};\n+use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::os::{"}]}