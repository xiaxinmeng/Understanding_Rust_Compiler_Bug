{"sha": "7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjE3YzEzYmMyNmUyY2YyMGJlZWEzNWE1NzU3ZjhjNTQ4YWM1ZjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T13:52:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T13:52:04Z"}, "message": "Rollup merge of #76910 - lcnr:foreign-item-like, r=oli-obk\n\ntransmute: use diagnostic item\n\ncloses #66075, we now have no remaining uses of `match_def_path`  in the compiler while some uses still remain in `clippy`.\n\ncc @RalfJung", "tree": {"sha": "693af2525d95518a7eef9a332fda44b0b4627fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693af2525d95518a7eef9a332fda44b0b4627fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ16FCRBK7hj4Ov3rIwAAdHIIACd6xsjivbjLVM3pAiil8gjZ\nswTg/6oYJ5kzC19DGOffV0u7Cs77Akl7U2NI0ArxNnMNFXTrqVH3bGf9r5sP2pIx\naFQlnvAAyW5ud+wmtxDf+wfc372oMxB+v70N1kNJvBFOwy3ssAruk9R6DkdLxjMy\nINF12nGbdTsBuFicw43YiEAW//7SUKKBpkDYcImb2BqGoXw7m54wnLlr+pcH8UIx\nlb3SyQeTaFeQLtR+JasmDzRpIc9+Sr2GbUFEV+gVJJTNsIrZ7w78CW5bgzgUkXn9\nP9VzZ3zK/tsEDd+4/F4ZhMY8ILJ2hh+Dotj2CIZlZKurPi8IkHJwQLYERsd/mAQ=\n=StrK\n-----END PGP SIGNATURE-----\n", "payload": "tree 693af2525d95518a7eef9a332fda44b0b4627fd1\nparent 9567b5a9f52f35f1bb127f626a1b14062d735751\nparent bfa2030ccbbabc4944b719c9194e190e1726fc8c\nauthor Ralf Jung <post@ralfj.de> 1600609924 +0200\ncommitter GitHub <noreply@github.com> 1600609924 +0200\n\nRollup merge of #76910 - lcnr:foreign-item-like, r=oli-obk\n\ntransmute: use diagnostic item\n\ncloses #66075, we now have no remaining uses of `match_def_path`  in the compiler while some uses still remain in `clippy`.\n\ncc @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "html_url": "https://github.com/rust-lang/rust/commit/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9567b5a9f52f35f1bb127f626a1b14062d735751", "url": "https://api.github.com/repos/rust-lang/rust/commits/9567b5a9f52f35f1bb127f626a1b14062d735751", "html_url": "https://github.com/rust-lang/rust/commit/9567b5a9f52f35f1bb127f626a1b14062d735751"}, {"sha": "bfa2030ccbbabc4944b719c9194e190e1726fc8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa2030ccbbabc4944b719c9194e190e1726fc8c", "html_url": "https://github.com/rust-lang/rust/commit/bfa2030ccbbabc4944b719c9194e190e1726fc8c"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "c35b6a9aaf4e95b1603096e51b99ff72f85523c5", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "patch": "@@ -2350,13 +2350,6 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n \n         /// Determine if this expression is a \"dangerous initialization\".\n         fn is_dangerous_init(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<InitKind> {\n-            // `transmute` is inside an anonymous module (the `extern` block?);\n-            // `Invalid` represents the empty string and matches that.\n-            // FIXME(#66075): use diagnostic items.  Somehow, that does not seem to work\n-            // on intrinsics right now.\n-            const TRANSMUTE_PATH: &[Symbol] =\n-                &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n-\n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n                 // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n@@ -2366,7 +2359,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         return Some(InitKind::Zeroed);\n                     } else if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, def_id) {\n                         return Some(InitKind::Uninit);\n-                    } else if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n+                    } else if cx.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                         if is_zero(&args[0]) {\n                             return Some(InitKind::Zeroed);\n                         }"}, {"sha": "0265fc323b3b3d23f645507ca1859ab63c1745e3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "patch": "@@ -720,6 +720,10 @@ impl<'tcx> LateContext<'tcx> {\n     /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;\n     /// inherent `impl` blocks are matched with the name of the type.\n     ///\n+    /// Instead of using this method, it is often preferable to instead use\n+    /// `rustc_diagnostic_item` or a `lang_item`. This is less prone to errors\n+    /// as paths get invalidated if the target definition moves.\n+    ///\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)"}, {"sha": "94592935c7f91bfef26e1c19d86c110e95e0bd68", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "patch": "@@ -12,11 +12,11 @@\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n+use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n@@ -100,6 +100,18 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n \n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    // FIXME(visit_all_item_likes): Foreign items are not visited\n+    // here, so we have to manually look at them for now.\n+    for foreign_module in tcx.foreign_modules(LOCAL_CRATE) {\n+        for &foreign_item in foreign_module.foreign_items.iter() {\n+            match tcx.hir().get(tcx.hir().local_def_id_to_hir_id(foreign_item.expect_local())) {\n+                hir::Node::ForeignItem(item) => {\n+                    collector.observe_item(item.attrs, item.hir_id);\n+                }\n+                item => bug!(\"unexpected foreign item {:?}\", item),\n+            }\n+        }\n+    }\n \n     collector.items\n }"}, {"sha": "abb9bfec127be00caf8770413751b42241e446ed", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff17c13bc26e2cf20beea35a5757f8c548ac5f2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=7ff17c13bc26e2cf20beea35a5757f8c548ac5f2", "patch": "@@ -1071,6 +1071,7 @@ extern \"rust-intrinsic\" {\n     // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n     // checks that prevent its use within `const fn`.\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"transmute\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}]}