{"sha": "c0d64711434644e7da02a3be718cd36270d37d0a", "node_id": "C_kwDOAAsO6NoAKGMwZDY0NzExNDM0NjQ0ZTdkYTAyYTNiZTcxOGNkMzYyNzBkMzdkMGE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-05T22:20:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-05T22:20:06Z"}, "message": "fix: Recognize `Self` as a proper keyword", "tree": {"sha": "a9fb307cc92ee84bace45a60f5710c427453978c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9fb307cc92ee84bace45a60f5710c427453978c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d64711434644e7da02a3be718cd36270d37d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d64711434644e7da02a3be718cd36270d37d0a", "html_url": "https://github.com/rust-lang/rust/commit/c0d64711434644e7da02a3be718cd36270d37d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d64711434644e7da02a3be718cd36270d37d0a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f504dc87384b0fa41a55327566f0db9c08eb98c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f504dc87384b0fa41a55327566f0db9c08eb98c", "html_url": "https://github.com/rust-lang/rust/commit/8f504dc87384b0fa41a55327566f0db9c08eb98c"}], "stats": {"total": 147, "additions": 98, "deletions": 49}, "files": [{"sha": "f1b559f4059e547ffb56d14f796be8ca7f0381f0", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -1833,9 +1833,9 @@ checksum = \"0685c84d5d54d1c26f7d3eb96cd41550adb97baed141a761cf335d3d33bcd0ae\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.16.0\"\n+version = \"1.16.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a62374cbbda72c1459ce5e7bfcdf1bd284c812a4faf2324aa083e5d9ea87880f\"\n+checksum = \"a3e5df347f0bf3ec1d670aad6ca5c6a1859cd9ea61d2113125794654ccced68f\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "f99b97178b41d35376de1b772fdd194736b51c1a", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -3,7 +3,7 @@\n use crate::intern::Interned;\n \n use either::Either;\n-use hir_expand::name::{name, AsName};\n+use hir_expand::name::{known, name, AsName};\n use syntax::ast::{self, AstNode, HasTypeBounds};\n \n use super::AssociatedTypeBinding;\n@@ -53,6 +53,10 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                     }\n                 }\n             }\n+            ast::PathSegmentKind::SelfTypeKw => {\n+                segments.push(known::SELF_TYPE);\n+                generic_args.push(None)\n+            }\n             ast::PathSegmentKind::Type { type_ref, trait_ref } => {\n                 assert!(path.qualifier().is_none()); // this can only occur at the first segment\n "}, {"sha": "d1f0b7a87e39a2bb49b031b0a62c60742ab253b8", "filename": "crates/hir_expand/src/mod_path.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -5,7 +5,11 @@ use std::{\n     iter,\n };\n \n-use crate::{db::AstDatabase, hygiene::Hygiene, name::Name};\n+use crate::{\n+    db::AstDatabase,\n+    hygiene::Hygiene,\n+    name::{known, Name},\n+};\n use base_db::CrateId;\n use either::Either;\n use syntax::{ast, AstNode};\n@@ -162,6 +166,15 @@ fn convert_path(\n                 }\n             }\n         }\n+        ast::PathSegmentKind::SelfTypeKw => {\n+            let mut res = prefix.unwrap_or_else(|| {\n+                ModPath::from_kind(\n+                    segment.coloncolon_token().map_or(PathKind::Plain, |_| PathKind::Abs),\n+                )\n+            });\n+            res.segments.push(known::SELF_TYPE);\n+            res\n+        }\n         ast::PathSegmentKind::CrateKw => {\n             if prefix.is_some() {\n                 return None;"}, {"sha": "5520ee55286c959bc4f5c266a66003f27d96c451", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -246,7 +246,7 @@ fn pick_best(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n             WHITESPACE => 0,\n-            IDENT | T![self] | T![super] | T![crate] | LIFETIME_IDENT => 2,\n+            IDENT | T![self] | T![super] | T![crate] | T![Self] | LIFETIME_IDENT => 2,\n             _ => 1,\n         }\n     }"}, {"sha": "cb2cddc20da0f7239876fa981a0020457db3ac40", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn goto_declaration(\n     let file = sema.parse(position.file_id).syntax().clone();\n     let original_token = file\n         .token_at_offset(position.offset)\n-        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n+        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate] | T![Self]))?;\n     let range = original_token.text_range();\n     let info: Vec<NavigationTarget> = sema\n         .descend_into_macros(original_token)"}, {"sha": "d664e2ca6535234089ef12bba371d3db6aeada53", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -30,7 +30,14 @@ pub(crate) fn goto_definition(\n     let file = sema.parse(position.file_id).syntax().clone();\n     let original_token =\n         pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | COMMENT => 2,\n+            IDENT\n+            | INT_NUMBER\n+            | LIFETIME_IDENT\n+            | T![self]\n+            | T![super]\n+            | T![crate]\n+            | T![Self]\n+            | COMMENT => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;"}, {"sha": "30d0d3435814b482a9e11abba657f6fb5fface54", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn hover(\n     let offset = range.start();\n \n     let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n-        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n+        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | T![Self] => 3,\n         T!['('] | T![')'] => 2,\n         kind if kind.is_trivia() => 0,\n         _ => 1,"}, {"sha": "2e93d895f0524b3b6b06cd390a09a76bd60f33ff", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -69,7 +69,14 @@ pub(crate) fn moniker(\n     let file = sema.parse(file_id).syntax().clone();\n     let current_crate = crate_for_file(db, file_id)?;\n     let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n-        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | COMMENT => 2,\n+        IDENT\n+        | INT_NUMBER\n+        | LIFETIME_IDENT\n+        | T![self]\n+        | T![super]\n+        | T![crate]\n+        | T![Self]\n+        | COMMENT => 2,\n         kind if kind.is_trivia() => 0,\n         _ => 1,\n     })?;"}, {"sha": "fb94342a7850aa7baeb91edeb4f2d0bd97dff293", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -126,7 +126,7 @@ impl StaticIndex<'_> {\n         let tokens = tokens.filter(|token| {\n             matches!(\n                 token.kind(),\n-                IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate]\n+                IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | T![Self]\n             )\n         });\n         let mut result = StaticIndexedFile { file_id, inlay_hints, folds, tokens: vec![] };"}, {"sha": "bd6431da815541b2d6bb0bf61e77098b5fcab9ef", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -327,7 +327,7 @@ fn traverse(\n                     // as otherwise we won't ever visit them\n                     match (token.kind(), parent.kind()) {\n                         (T![ident], NAME | NAME_REF) => parent.into(),\n-                        (T![self] | T![super] | T![crate], NAME_REF) => parent.into(),\n+                        (T![self] | T![super] | T![crate] | T![Self], NAME_REF) => parent.into(),\n                         (INT_NUMBER, NAME_REF) => parent.into(),\n                         (LIFETIME_IDENT, LIFETIME) => parent.into(),\n                         _ => token.into(),"}, {"sha": "8501e0ffe58ef7b6448ba443b6c2179ae594ed38", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -59,11 +59,11 @@\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"keyword\">where</span> <span class=\"type_param\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"keyword\">where</span> <span class=\"keyword\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"keyword\">where</span> <span class=\"self_type\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"keyword\">where</span> <span class=\"keyword\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n@@ -210,7 +210,7 @@\n \n <span class=\"keyword\">impl</span> <span class=\"enum public\">Bool</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated consuming declaration public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n-        <span class=\"unresolved_reference\">matches</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"keyword\">self</span><span class=\"comma\">,</span> Self<span class=\"colon\">:</span><span class=\"colon\">:</span>True<span class=\"parenthesis\">)</span>\n+        <span class=\"unresolved_reference\">matches</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"keyword\">self</span><span class=\"comma\">,</span> <span class=\"keyword\">Self</span><span class=\"colon\">:</span><span class=\"colon\">:</span>True<span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n <span class=\"keyword\">const</span> <span class=\"constant declaration\">USAGE_OF_BOOL</span><span class=\"colon\">:</span><span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"enum public\">Bool</span><span class=\"operator\">::</span><span class=\"enum_variant public\">True</span><span class=\"operator\">.</span><span class=\"function associated consuming public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "efb704b253d7c6318681a24f37d2227647eba73d", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -238,7 +238,9 @@ impl ImportGroup {\n                 \"core\" => ImportGroup::Std,\n                 _ => ImportGroup::ExternCrate,\n             },\n-            PathSegmentKind::Type { .. } => unreachable!(),\n+            // these aren't valid use paths, so fall back to something random\n+            PathSegmentKind::SelfTypeKw => ImportGroup::ExternCrate,\n+            PathSegmentKind::Type { .. } => ImportGroup::ExternCrate,\n         }\n     }\n }"}, {"sha": "b4a60574e51ed46259058fd14d96852905ae06b3", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -1,10 +1,10 @@\n use super::*;\n \n pub(super) const PATH_FIRST: TokenSet =\n-    TokenSet::new(&[IDENT, T![self], T![super], T![crate], T![:], T![<]]);\n+    TokenSet::new(&[IDENT, T![self], T![super], T![crate], T![Self], T![:], T![<]]);\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n-    is_use_path_start(p) || p.at(T![<])\n+    is_use_path_start(p) || p.at(T![<]) || p.at(T![Self])\n }\n \n pub(super) fn is_use_path_start(p: &Parser) -> bool {\n@@ -88,7 +88,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n             }\n             // test crate_path\n             // use crate::foo;\n-            T![self] | T![super] | T![crate] => {\n+            T![self] | T![super] | T![crate] | T![Self] => {\n                 let m = p.start();\n                 p.bump_any();\n                 m.complete(p, NAME_REF);"}, {"sha": "ff067f5293d74664c19c9dc1e28f9feba29eef75", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -14,6 +14,7 @@ pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(TokenSet::new(&[\n     T![for],\n     T![impl],\n     T![dyn],\n+    T![Self],\n ]));\n \n const TYPE_RECOVERY_SET: TokenSet = TokenSet::new(&[\n@@ -46,7 +47,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n         T![dyn] => dyn_trait_type(p),\n         // Some path types are not allowed to have bounds (no plus)\n         T![<] => path_type_(p, allow_bounds),\n-        _ if paths::is_use_path_start(p) => path_or_macro_type_(p, allow_bounds),\n+        _ if paths::is_path_start(p) => path_or_macro_type_(p, allow_bounds),\n         _ => {\n             p.err_recover(\"expected type\", TYPE_RECOVERY_SET);\n         }"}, {"sha": "297809976eea9560e055a39c5ab0f880ae4afa23", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -90,6 +90,7 @@ pub enum SyntaxKind {\n     REF_KW,\n     RETURN_KW,\n     SELF_KW,\n+    SELF_TYPE_KW,\n     STATIC_KW,\n     STRUCT_KW,\n     SUPER_KW,\n@@ -264,10 +265,10 @@ impl SyntaxKind {\n             AS_KW | ASYNC_KW | AWAIT_KW | BOX_KW | BREAK_KW | CONST_KW | CONTINUE_KW | CRATE_KW\n             | DYN_KW | ELSE_KW | ENUM_KW | EXTERN_KW | FALSE_KW | FN_KW | FOR_KW | IF_KW\n             | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n-            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n-            | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n-            | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW\n-            | MACRO_RULES_KW => true,\n+            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | SELF_TYPE_KW | STATIC_KW\n+            | STRUCT_KW | SUPER_KW | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW\n+            | WHERE_KW | WHILE_KW | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW\n+            | RAW_KW | MACRO_RULES_KW => true,\n             _ => false,\n         }\n     }\n@@ -319,6 +320,7 @@ impl SyntaxKind {\n             \"ref\" => REF_KW,\n             \"return\" => RETURN_KW,\n             \"self\" => SELF_KW,\n+            \"Self\" => SELF_TYPE_KW,\n             \"static\" => STATIC_KW,\n             \"struct\" => STRUCT_KW,\n             \"super\" => SUPER_KW,\n@@ -383,5 +385,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n pub use T;"}, {"sha": "a0b562629624e186e1b3e732b9ddeddb85b394a0", "filename": "crates/parser/test_data/parser/inline/ok/0018_arb_self_types.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -29,7 +29,7 @@ SOURCE_FILE\n                 PATH\n                   PATH_SEGMENT\n                     NAME_REF\n-                      IDENT \"Self\"\n+                      SELF_TYPE_KW \"Self\"\n           R_PAREN \")\"\n         WHITESPACE \" \"\n         BLOCK_EXPR\n@@ -63,7 +63,7 @@ SOURCE_FILE\n                         PATH\n                           PATH_SEGMENT\n                             NAME_REF\n-                              IDENT \"Self\"\n+                              SELF_TYPE_KW \"Self\"\n                     R_ANGLE \">\"\n           R_PAREN \")\"\n         WHITESPACE \" \""}, {"sha": "dd7f76eb939704acb724192965185b615490a80c", "filename": "crates/parser/test_data/parser/inline/ok/0041_trait_item.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.txt?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE\n             PATH\n               PATH_SEGMENT\n                 NAME_REF\n-                  IDENT \"Self\"\n+                  SELF_TYPE_KW \"Self\"\n         SEMICOLON \";\"\n       WHITESPACE \" \"\n       R_CURLY \"}\""}, {"sha": "46cd8ee66545e3615e99ab8b5c0d4eb7f1d8fd8c", "filename": "crates/parser/test_data/parser/inline/ok/0176_trait_item_where_clause.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0176_trait_item_where_clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0176_trait_item_where_clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0176_trait_item_where_clause.txt?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -13,7 +13,7 @@ SOURCE_FILE\n           PATH\n             PATH_SEGMENT\n               NAME_REF\n-                IDENT \"Self\"\n+                SELF_TYPE_KW \"Self\"\n         COLON \":\"\n         WHITESPACE \" \"\n         TYPE_BOUND_LIST"}, {"sha": "4443d9d142630f0e42c0d60c1598d9f03cf2478f", "filename": "crates/parser/test_data/parser/inline/ok/0177_trait_alias_where_clause.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.txt?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -73,7 +73,7 @@ SOURCE_FILE\n           PATH\n             PATH_SEGMENT\n               NAME_REF\n-                IDENT \"Self\"\n+                SELF_TYPE_KW \"Self\"\n         COLON \":\"\n         WHITESPACE \" \"\n         TYPE_BOUND_LIST"}, {"sha": "9684bb11cd8adbeaf3e6bcf2082887528824d3d9", "filename": "crates/parser/test_data/parser/ok/0045_block_attrs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.txt?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -199,7 +199,7 @@ SOURCE_FILE\n                                       PATH\n                                         PATH_SEGMENT\n                                           NAME_REF\n-                                            IDENT \"Self\"\n+                                            SELF_TYPE_KW \"Self\"\n                                   R_ANGLE \">\"\n           R_PAREN \")\"\n         WHITESPACE \" \""}, {"sha": "f8b11e7782c91b2fe1cca665bddd6d75db8dfafb", "filename": "crates/parser/test_data/parser/ok/0051_parameter_attrs.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -494,7 +494,7 @@ SOURCE_FILE\n               PATH\n                 PATH_SEGMENT\n                   NAME_REF\n-                    IDENT \"Self\"\n+                    SELF_TYPE_KW \"Self\"\n           R_PAREN \")\"\n         WHITESPACE \" \"\n         BLOCK_EXPR\n@@ -536,7 +536,7 @@ SOURCE_FILE\n                         PATH\n                           PATH_SEGMENT\n                             NAME_REF\n-                              IDENT \"Self\"\n+                              SELF_TYPE_KW \"Self\"\n                     R_ANGLE \">\"\n           R_PAREN \")\"\n         WHITESPACE \" \""}, {"sha": "d8f829074559f5504afbfddf91ce393c5259a8f4", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -30,7 +30,7 @@ rayon = \"1\"\n expect-test = \"1.2.0-pre.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.16.0\"\n+ungrammar = \"=1.16.1\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "6f236c01ce1537a3d248851be45b417a6cc70946", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -1,5 +1,6 @@\n //! Generated by `sourcegen_ast`, do not edit by hand.\n \n+#![allow(non_snake_case)]\n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n     SyntaxKind::{self, *},\n@@ -24,6 +25,7 @@ impl NameRef {\n     pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n     pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n+    pub fn Self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![Self]) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "19a007e072a7f5695440708ca458a6260639b826", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -185,7 +185,7 @@ pub(crate) fn generic_arg_list() -> ast::GenericArgList {\n }\n \n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n-    ast_from_text(&format!(\"use {};\", name_ref))\n+    ast_from_text(&format!(\"type __ = {};\", name_ref))\n }\n \n pub fn path_segment_ty(type_ref: ast::Type, trait_ref: Option<ast::PathType>) -> ast::PathSegment {\n@@ -209,15 +209,15 @@ pub fn path_segment_crate() -> ast::PathSegment {\n }\n \n pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n-    ast_from_text(&format!(\"use {}\", segment))\n+    ast_from_text(&format!(\"type __ = {};\", segment))\n }\n \n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n     ast_from_text(&format!(\"{}::{}\", qual, segment))\n }\n // FIXME: path concatenation operation doesn't make sense as AST op.\n pub fn path_concat(first: ast::Path, second: ast::Path) -> ast::Path {\n-    ast_from_text(&format!(\"{}::{}\", first, second))\n+    ast_from_text(&format!(\"type __ = {}::{};\", first, second))\n }\n \n pub fn path_from_segments(\n@@ -234,7 +234,7 @@ pub fn path_from_segments(\n \n pub fn join_paths(paths: impl IntoIterator<Item = ast::Path>) -> ast::Path {\n     let paths = paths.into_iter().map(|it| it.syntax().clone()).join(\"::\");\n-    ast_from_text(&format!(\"use {};\", paths))\n+    ast_from_text(&format!(\"type __ = {};\", paths))\n }\n \n // FIXME: should not be pub\n@@ -782,6 +782,7 @@ pub fn struct_(\n     ))\n }\n \n+#[track_caller]\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     let node = match parse.tree().syntax().descendants().find_map(N::cast) {"}, {"sha": "4a3abcb3a962844c71a40ca915e96f9e60ded2dd", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -183,6 +183,7 @@ impl ast::Attr {\n pub enum PathSegmentKind {\n     Name(ast::NameRef),\n     Type { type_ref: Option<ast::Type>, trait_ref: Option<ast::PathType> },\n+    SelfTypeKw,\n     SelfKw,\n     SuperKw,\n     CrateKw,\n@@ -204,13 +205,18 @@ impl ast::PathSegment {\n         self.name_ref().and_then(|it| it.self_token())\n     }\n \n+    pub fn self_type_token(&self) -> Option<SyntaxToken> {\n+        self.name_ref().and_then(|it| it.Self_token())\n+    }\n+\n     pub fn super_token(&self) -> Option<SyntaxToken> {\n         self.name_ref().and_then(|it| it.super_token())\n     }\n \n     pub fn kind(&self) -> Option<PathSegmentKind> {\n         let res = if let Some(name_ref) = self.name_ref() {\n             match name_ref.syntax().first_token().map(|it| it.kind()) {\n+                Some(T![Self]) => PathSegmentKind::SelfTypeKw,\n                 Some(T![self]) => PathSegmentKind::SelfKw,\n                 Some(T![super]) => PathSegmentKind::SuperKw,\n                 Some(T![crate]) => PathSegmentKind::CrateKw,"}, {"sha": "e808cb4be444bc0408c3c9ba55017d4371780753", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -67,8 +67,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n     keywords: &[\n         \"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\",\n         \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\",\n-        \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\",\n-        \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n+        \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\",\n+        \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],"}, {"sha": "cb38abfe891f91533fed049a81f2e673f99d08c0", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d64711434644e7da02a3be718cd36270d37d0a/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=c0d64711434644e7da02a3be718cd36270d37d0a", "patch": "@@ -297,6 +297,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n     }\n \n     let ast = quote! {\n+        #![allow(non_snake_case)]\n         use crate::{\n             SyntaxNode, SyntaxToken, SyntaxKind::{self, *},\n             ast::{self, AstNode, AstChildren, support},\n@@ -356,21 +357,24 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n     let punctuation =\n         grammar.punct.iter().map(|(_token, name)| format_ident!(\"{}\", name)).collect::<Vec<_>>();\n \n-    let full_keywords_values = &grammar.keywords;\n-    let full_keywords =\n-        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(kw)));\n+    let x = |&name| match name {\n+        \"Self\" => format_ident!(\"SELF_TYPE_KW\"),\n+        name => format_ident!(\"{}_KW\", to_upper_snake_case(name)),\n+    };\n+    let full_keywords_values = grammar.keywords;\n+    let full_keywords = full_keywords_values.iter().map(x);\n \n     let contextual_keywords_values = &grammar.contextual_keywords;\n-    let contextual_keywords =\n-        contextual_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(kw)));\n+    let contextual_keywords = contextual_keywords_values.iter().map(x);\n \n-    let all_keywords_values =\n-        grammar.keywords.iter().chain(grammar.contextual_keywords.iter()).collect::<Vec<_>>();\n-    let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n-    let all_keywords = all_keywords_values\n+    let all_keywords_values = grammar\n+        .keywords\n         .iter()\n-        .map(|name| format_ident!(\"{}_KW\", to_upper_snake_case(name)))\n+        .chain(grammar.contextual_keywords.iter())\n+        .copied()\n         .collect::<Vec<_>>();\n+    let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n+    let all_keywords = all_keywords_values.iter().map(x).collect::<Vec<_>>();\n \n     let literals =\n         grammar.literals.iter().map(|name| format_ident!(\"{}\", name)).collect::<Vec<_>>();"}]}