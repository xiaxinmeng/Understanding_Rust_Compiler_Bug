{"sha": "4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "node_id": "C_kwDOAAsO6NoAKDRjZTU2YjQxNGRkYzhjY2MxZmJiMjljZjk5ZGQ3MDRlNmM1ODQ1ZDk", "commit": {"author": {"name": "Krasimir Georgiev", "email": "krasimir@google.com", "date": "2022-01-03T10:25:33Z"}, "committer": {"name": "Krasimir Georgiev", "email": "krasimir@google.com", "date": "2022-01-03T10:25:33Z"}, "message": "RustWrapper: adapt for an LLVM API change\n\nNo functional changes intended.\n\nThe LLVM commit\nhttps://github.com/llvm/llvm-project/commit/ec501f15a8b8ace2b283732740d6d65d40d82e09\nremoved the signed version of `createExpression`. This adapts the Rust\nLLVM wrappers accordingly.", "tree": {"sha": "9df2b4fe9dcaedd339f9d096acf1aa51b369534a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df2b4fe9dcaedd339f9d096acf1aa51b369534a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "html_url": "https://github.com/rust-lang/rust/commit/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/comments", "author": {"login": "krasimirgg", "id": 29306214, "node_id": "MDQ6VXNlcjI5MzA2MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/29306214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krasimirgg", "html_url": "https://github.com/krasimirgg", "followers_url": "https://api.github.com/users/krasimirgg/followers", "following_url": "https://api.github.com/users/krasimirgg/following{/other_user}", "gists_url": "https://api.github.com/users/krasimirgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/krasimirgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krasimirgg/subscriptions", "organizations_url": "https://api.github.com/users/krasimirgg/orgs", "repos_url": "https://api.github.com/users/krasimirgg/repos", "events_url": "https://api.github.com/users/krasimirgg/events{/privacy}", "received_events_url": "https://api.github.com/users/krasimirgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krasimirgg", "id": 29306214, "node_id": "MDQ6VXNlcjI5MzA2MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/29306214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krasimirgg", "html_url": "https://github.com/krasimirgg", "followers_url": "https://api.github.com/users/krasimirgg/followers", "following_url": "https://api.github.com/users/krasimirgg/following{/other_user}", "gists_url": "https://api.github.com/users/krasimirgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/krasimirgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krasimirgg/subscriptions", "organizations_url": "https://api.github.com/users/krasimirgg/orgs", "repos_url": "https://api.github.com/users/krasimirgg/repos", "events_url": "https://api.github.com/users/krasimirgg/events{/privacy}", "received_events_url": "https://api.github.com/users/krasimirgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "html_url": "https://github.com/rust-lang/rust/commit/b5da80871d5e22401e03ce5ed73200ece8bdc7a6"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "01f7868df3492ee52fe3d14b053600984eee7983", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "patch": "@@ -160,17 +160,17 @@ impl<'ll> DebugInfoBuilderMethods for Builder<'_, 'll, '_> {\n         // the values should match the ones in the DWARF standard anyway.\n         let op_deref = || unsafe { llvm::LLVMRustDIBuilderCreateOpDeref() };\n         let op_plus_uconst = || unsafe { llvm::LLVMRustDIBuilderCreateOpPlusUconst() };\n-        let mut addr_ops = SmallVec::<[_; 8]>::new();\n+        let mut addr_ops = SmallVec::<[u64; 8]>::new();\n \n         if direct_offset.bytes() > 0 {\n             addr_ops.push(op_plus_uconst());\n-            addr_ops.push(direct_offset.bytes() as i64);\n+            addr_ops.push(direct_offset.bytes() as u64);\n         }\n         for &offset in indirect_offsets {\n             addr_ops.push(op_deref());\n             if offset.bytes() > 0 {\n                 addr_ops.push(op_plus_uconst());\n-                addr_ops.push(offset.bytes() as i64);\n+                addr_ops.push(offset.bytes() as u64);\n             }\n         }\n "}, {"sha": "f2782f84f557bde27a416bc6bb1b19d3716109b3", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "patch": "@@ -2108,7 +2108,7 @@ extern \"C\" {\n         Builder: &DIBuilder<'a>,\n         Val: &'a Value,\n         VarInfo: &'a DIVariable,\n-        AddrOps: *const i64,\n+        AddrOps: *const u64,\n         AddrOpsCount: c_uint,\n         DL: &'a DILocation,\n         InsertAtEnd: &'a BasicBlock,\n@@ -2199,8 +2199,8 @@ extern \"C\" {\n         Scope: &'a DIScope,\n         InlinedAt: Option<&'a DILocation>,\n     ) -> &'a DILocation;\n-    pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n-    pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n+    pub fn LLVMRustDIBuilderCreateOpDeref() -> u64;\n+    pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> u64;\n \n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteTypeToString(Type: &Type, s: &RustString);"}, {"sha": "2a0f4fdc774120185cbf0960a9cec7bcac07cc24", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=4ce56b414ddc8ccc1fbb29cf99dd704e6c5845d9", "patch": "@@ -979,11 +979,11 @@ LLVMRustDIBuilderGetOrCreateArray(LLVMRustDIBuilderRef Builder,\n \n extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n     LLVMRustDIBuilderRef Builder, LLVMValueRef V, LLVMMetadataRef VarInfo,\n-    int64_t *AddrOps, unsigned AddrOpsCount, LLVMMetadataRef DL,\n+    uint64_t *AddrOps, unsigned AddrOpsCount, LLVMMetadataRef DL,\n     LLVMBasicBlockRef InsertAtEnd) {\n   return wrap(Builder->insertDeclare(\n       unwrap(V), unwrap<DILocalVariable>(VarInfo),\n-      Builder->createExpression(llvm::ArrayRef<int64_t>(AddrOps, AddrOpsCount)),\n+      Builder->createExpression(llvm::ArrayRef<uint64_t>(AddrOps, AddrOpsCount)),\n       DebugLoc(cast<MDNode>(unwrap(DL))),\n       unwrap(InsertAtEnd)));\n }\n@@ -1057,11 +1057,11 @@ LLVMRustDIBuilderCreateDebugLocation(unsigned Line, unsigned Column,\n   return wrap(Loc);\n }\n \n-extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {\n+extern \"C\" uint64_t LLVMRustDIBuilderCreateOpDeref() {\n   return dwarf::DW_OP_deref;\n }\n \n-extern \"C\" int64_t LLVMRustDIBuilderCreateOpPlusUconst() {\n+extern \"C\" uint64_t LLVMRustDIBuilderCreateOpPlusUconst() {\n   return dwarf::DW_OP_plus_uconst;\n }\n "}]}