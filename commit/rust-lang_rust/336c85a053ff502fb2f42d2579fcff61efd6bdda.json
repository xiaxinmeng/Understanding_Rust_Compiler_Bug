{"sha": "336c85a053ff502fb2f42d2579fcff61efd6bdda", "node_id": "C_kwDOAAsO6NoAKDMzNmM4NWEwNTNmZjUwMmZiMmY0MmQyNTc5ZmNmZjYxZWZkNmJkZGE", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-27T21:44:14Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-27T22:20:18Z"}, "message": "rustdoc: Preserve rendering of macro_rules matchers when possible", "tree": {"sha": "07e5e5dc8ffa663ef5a019f31000efcd7e217a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e5e5dc8ffa663ef5a019f31000efcd7e217a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336c85a053ff502fb2f42d2579fcff61efd6bdda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHKPCQACgkQ+boUO5X/\nbYK0mhAAtm5cLYZrOzEfR36Rr2nbQmAMwbluoarbjxrJjixVE/VPiKM7MNnrT6md\nOPZGmVdzGY0k911KNKZcwGLBlUq05XV5nfHY7Q0afJgfmToPbB1o1hZnO1yd/nvE\nBy5YNZc1fER9EImQXusHwhHNTv2XbneHKfc6uNMozCorxn1nNassr6Dubup+ZlPX\n/rr2isAJMTDy+EPG5PyKRMxFPBI9MwiHsyyoKwqts8fVgjJaiJ5flyFhjEMKJmKZ\nugE6OnHYeF0fw8EmlrDcHOGyzo157SOkwDnHDelsrc6KYVBFQYg2dnBy9iUCNaZe\ndHrkfRHLzVX4+8yF1C493Q9704dtoGKjzec58SV8d8RLm9UxgDGRzbSVQ2fxucbm\n9vG8lnbAyMII6oiIe/360nEsXvgz5/N1CgsBZZj1E92teTy501h988NnzzizXpIb\nrWwh+iVOfHCCdtlX5hL0huynw/6Ap7QL6wKsUUTLAp54vlp5eKZz8dTr8AovY7bs\n4KWgcdohJtKTDYie4y1yAKZnQdYl3FHijkHDrZyJeCly9Lu/zizmU+PjDb0R6HkE\nwkgK30A9ZS+vuJE5Fc4Tf5l8PFCo5ctni+nbBuOpRol6CkY1CfM1THjeyZPd1Qpw\n3Inm/iuWBoUbPVkoppLBLi/s4uQMkBy3v2CZN40yFG1eIR39tNs=\n=/Q+t\n-----END PGP SIGNATURE-----", "payload": "tree 07e5e5dc8ffa663ef5a019f31000efcd7e217a44\nparent f8abed9ed48bace6be0087bcd44ed534e239b8d8\nauthor David Tolnay <dtolnay@gmail.com> 1640641454 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640643618 -0800\n\nrustdoc: Preserve rendering of macro_rules matchers when possible\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336c85a053ff502fb2f42d2579fcff61efd6bdda", "html_url": "https://github.com/rust-lang/rust/commit/336c85a053ff502fb2f42d2579fcff61efd6bdda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336c85a053ff502fb2f42d2579fcff61efd6bdda/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8abed9ed48bace6be0087bcd44ed534e239b8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "html_url": "https://github.com/rust-lang/rust/commit/f8abed9ed48bace6be0087bcd44ed534e239b8d8"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "5fe7dd6c2bc837a45f5c033a0c517dca876babf3", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=336c85a053ff502fb2f42d2579fcff61efd6bdda", "patch": "@@ -16,6 +16,8 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::fmt::Write as _;\n use std::mem;\n@@ -484,20 +486,67 @@ crate const DOC_RUST_LANG_ORG_CHANNEL: &str = env!(\"DOC_RUST_LANG_ORG_CHANNEL\");\n /// Render a sequence of macro arms in a format suitable for displaying to the user\n /// as part of an item declaration.\n pub(super) fn render_macro_arms<'a>(\n+    cx: &DocContext<'_>,\n     matchers: impl Iterator<Item = &'a TokenTree>,\n     arm_delim: &str,\n ) -> String {\n     let mut out = String::new();\n     for matcher in matchers {\n-        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(matcher), arm_delim).unwrap();\n+        writeln!(out, \"    {} => {{ ... }}{}\", render_macro_matcher(cx, matcher), arm_delim)\n+            .unwrap();\n     }\n     out\n }\n \n /// Render a macro matcher in a format suitable for displaying to the user\n /// as part of an item declaration.\n-pub(super) fn render_macro_matcher(matcher: &TokenTree) -> String {\n-    rustc_ast_pretty::pprust::tt_to_string(matcher)\n+pub(super) fn render_macro_matcher(cx: &DocContext<'_>, matcher: &TokenTree) -> String {\n+    if let Some(snippet) = snippet_equal_to_token(cx, matcher) {\n+        snippet\n+    } else {\n+        rustc_ast_pretty::pprust::tt_to_string(matcher)\n+    }\n+}\n+\n+/// Find the source snippet for this token's Span, reparse it, and return the\n+/// snippet if the reparsed TokenTree matches the argument TokenTree.\n+fn snippet_equal_to_token(cx: &DocContext<'_>, matcher: &TokenTree) -> Option<String> {\n+    // Find what rustc thinks is the source snippet.\n+    // This may not actually be anything meaningful if this matcher was itself\n+    // generated by a macro.\n+    let source_map = cx.sess().source_map();\n+    let span = matcher.span();\n+    let snippet = source_map.span_to_snippet(span).ok()?;\n+\n+    // Create a Parser.\n+    let sess = ParseSess::new(FilePathMapping::empty());\n+    let file_name = source_map.span_to_filename(span);\n+    let mut parser =\n+        match rustc_parse::maybe_new_parser_from_source_str(&sess, file_name, snippet.clone()) {\n+            Ok(parser) => parser,\n+            Err(diagnostics) => {\n+                for mut diagnostic in diagnostics {\n+                    diagnostic.cancel();\n+                }\n+                return None;\n+            }\n+        };\n+\n+    // Reparse a single token tree.\n+    let mut reparsed_trees = match parser.parse_all_token_trees() {\n+        Ok(reparsed_trees) => reparsed_trees,\n+        Err(mut diagnostic) => {\n+            diagnostic.cancel();\n+            return None;\n+        }\n+    };\n+    if reparsed_trees.len() != 1 {\n+        return None;\n+    }\n+    let reparsed_tree = reparsed_trees.pop().unwrap();\n+\n+    // Compare against the original tree.\n+    if reparsed_tree.eq_unspanned(matcher) { Some(snippet) } else { None }\n }\n \n pub(super) fn display_macro_source(\n@@ -512,21 +561,21 @@ pub(super) fn display_macro_source(\n     let matchers = tts.chunks(4).map(|arm| &arm[0]);\n \n     if def.macro_rules {\n-        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n+        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(cx, matchers, \";\"))\n     } else {\n         if matchers.len() <= 1 {\n             format!(\n                 \"{}macro {}{} {{\\n    ...\\n}}\",\n                 vis.to_src_with_space(cx.tcx, def_id),\n                 name,\n-                matchers.map(render_macro_matcher).collect::<String>(),\n+                matchers.map(|matcher| render_macro_matcher(cx, matcher)).collect::<String>(),\n             )\n         } else {\n             format!(\n                 \"{}macro {} {{\\n{}}}\",\n                 vis.to_src_with_space(cx.tcx, def_id),\n                 name,\n-                render_macro_arms(matchers, \",\"),\n+                render_macro_arms(cx, matchers, \",\"),\n             )\n         }\n     }"}, {"sha": "94ade31b5e5f4ce4f12bc5c5a830dc0d7cd400da", "filename": "src/test/rustdoc/decl_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=336c85a053ff502fb2f42d2579fcff61efd6bdda", "patch": "@@ -9,7 +9,7 @@ pub macro my_macro() {\n \n }\n \n-// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok : tt) *) {'\n+// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok:tt)*) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro my_macro_2($($tok:tt)*) {\n@@ -18,8 +18,8 @@ pub macro my_macro_2($($tok:tt)*) {\n \n // @has decl_macro/macro.my_macro_multi.html //pre 'pub macro my_macro_multi {'\n // @has - //pre '(_) => { ... },'\n-// @has - //pre '($foo : ident.$bar : expr) => { ... },'\n-// @has - //pre '($($foo : literal), +) => { ... },'\n+// @has - //pre '($foo:ident . $bar:expr) => { ... },'\n+// @has - //pre '($($foo:literal),+) => { ... },'\n // @has - //pre '}'\n pub macro my_macro_multi {\n     (_) => {\n@@ -33,7 +33,7 @@ pub macro my_macro_multi {\n     }\n }\n \n-// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo : expr) {'\n+// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo:expr) {'\n // @has - //pre '...'\n // @has - //pre '}'\n pub macro by_example_single {\n@@ -42,12 +42,12 @@ pub macro by_example_single {\n \n mod a {\n     mod b {\n-        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo : expr) {'\n+        // @has decl_macro/a/b/macro.by_example_vis.html //pre 'pub(super) macro by_example_vis($foo:expr) {'\n         pub(in super) macro by_example_vis {\n             ($foo:expr) => {}\n         }\n         mod c {\n-            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo : expr) {'\n+            // @has decl_macro/a/b/c/macro.by_example_vis_named.html //pre 'pub(in a) macro by_example_vis_named($foo:expr) {'\n             pub(in a) macro by_example_vis_named {\n                 ($foo:expr) => {}\n             }"}, {"sha": "ae0cf7a14789d78103c6cb4585ea36ab650153f7", "filename": "src/test/rustdoc/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacros.rs?ref=336c85a053ff502fb2f42d2579fcff61efd6bdda", "patch": "@@ -1,7 +1,7 @@\n // @has macros/macro.my_macro.html //pre 'macro_rules! my_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a : tt) => { ... };'\n-// @has - //pre '($e : expr) => { ... };'\n+// @has - //pre '($a:tt) => { ... };'\n+// @has - //pre '($e:expr) => { ... };'\n #[macro_export]\n macro_rules! my_macro {\n     () => [];\n@@ -12,8 +12,8 @@ macro_rules! my_macro {\n // Check that exported macro defined in a module are shown at crate root.\n // @has macros/macro.my_sub_macro.html //pre 'macro_rules! my_sub_macro {'\n // @has - //pre '() => { ... };'\n-// @has - //pre '($a : tt) => { ... };'\n-// @has - //pre '($e : expr) => { ... };'\n+// @has - //pre '($a:tt) => { ... };'\n+// @has - //pre '($e:expr) => { ... };'\n mod sub {\n     #[macro_export]\n     macro_rules! my_sub_macro {"}, {"sha": "aea9b9f2b395dc1b85b63f0c891026607df629db", "filename": "src/test/rustdoc/reexports-priv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports-priv.rs?ref=336c85a053ff502fb2f42d2579fcff61efd6bdda", "patch": "@@ -5,7 +5,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -61,11 +61,11 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n-        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place:expr) {'\n         pub(crate) use reexports::addr_of_crate;\n-        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) macro addr_of_super($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) macro addr_of_super($place:expr) {'\n         pub(super) use reexports::addr_of_super;\n         // @!has 'foo/outer/inner/macro.addr_of_self.html'\n         pub(self) use reexports::addr_of_self;"}, {"sha": "7abcbfb618122194125511eab7812079367b65e8", "filename": "src/test/rustdoc/reexports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336c85a053ff502fb2f42d2579fcff61efd6bdda/src%2Ftest%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports.rs?ref=336c85a053ff502fb2f42d2579fcff61efd6bdda", "patch": "@@ -4,7 +4,7 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n@@ -60,7 +60,7 @@ use reexports::UnionLocal;\n \n pub mod outer {\n     pub mod inner {\n-        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place:expr) {'\n         pub use reexports::addr_of;\n         // @!has 'foo/outer/inner/macro.addr_of_crate.html'\n         pub(crate) use reexports::addr_of_crate;"}]}