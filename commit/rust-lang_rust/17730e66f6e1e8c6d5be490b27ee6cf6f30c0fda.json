{"sha": "17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "node_id": "C_kwDOAAsO6NoAKDE3NzMwZTY2ZjZlMWU4YzZkNWJlNDkwYjI3ZWU2Y2Y2ZjMwYzBmZGE", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-04-12T09:49:53Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-06T11:10:13Z"}, "message": "Update docs\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "4be1499b2e4f7b8095f44afecd7d4da4dcf1e5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be1499b2e4f7b8095f44afecd7d4da4dcf1e5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "html_url": "https://github.com/rust-lang/rust/commit/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d027d23a12a956520063625072440ca74b171d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d027d23a12a956520063625072440ca74b171d", "html_url": "https://github.com/rust-lang/rust/commit/57d027d23a12a956520063625072440ca74b171d"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "ce8677d043957e226eb0207542406357803b149b", "filename": "library/core/src/any.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "patch": "@@ -91,20 +91,21 @@\n //! `Provider` and the associated APIs support generic, type-driven access to data, and a mechanism\n //! for implementers to provide such data. The key parts of the interface are the `Provider`\n //! trait for objects which can provide data, and the [`request_value`] and [`request_ref`]\n-//! functions for requesting data from an object which implements `Provider`. Note that end users\n+//! functions for requesting data from an object which implements `Provider`. Generally, end users\n //! should not call `request_*` directly, they are helper functions for intermediate implementers\n //! to use to implement a user-facing interface.\n //!\n //! Typically, a data provider is a trait object of a trait which extends `Provider`. A user will\n-//! request data from the trait object by specifying the type.\n+//! request data from a trait object by specifying the type of the data.\n //!\n //! ## Data flow\n //!\n-//! * A user requests an object, which is delegated to `request_value` or `request_ref`\n+//! * A user requests an object of a specific type, which is delegated to `request_value` or\n+//!   `request_ref`\n //! * `request_*` creates a `Demand` object and passes it to `Provider::provide`\n-//! * The object provider's implementation of `Provider::provide` tries providing values of\n+//! * The data provider's implementation of `Provider::provide` tries providing values of\n //!   different types using `Demand::provide_*`. If the type matches the type requested by\n-//!   the user, it will be stored in the `Demand` object.\n+//!   the user, the value will be stored in the `Demand` object.\n //! * `request_*` unpacks the `Demand` object and returns any stored value to the user.\n //!\n //! ## Examples\n@@ -113,15 +114,15 @@\n //! # #![feature(provide_any)]\n //! use std::any::{Provider, Demand, request_ref};\n //!\n-//! // Definition of MyTrait\n+//! // Definition of MyTrait, a data provider.\n //! trait MyTrait: Provider {\n //!     // ...\n //! }\n //!\n //! // Methods on `MyTrait` trait objects.\n //! impl dyn MyTrait + '_ {\n-//!     /// Common case: get a reference to a field of the struct.\n-//!     pub fn get_context_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+//!     /// Get a reference to a field of the implementing struct.\n+//!     pub fn get_context_by_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n //!         request_ref::<T, _>(self)\n //!     }\n //! }\n@@ -134,19 +135,21 @@\n //!\n //! impl Provider for SomeConcreteType {\n //!     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+//!         // Provide a string reference. We could provide multiple values with\n+//!         // different types here.\n //!         req.provide_ref::<String>(&self.some_string);\n //!     }\n //! }\n //!\n //! // Downstream usage of `MyTrait`.\n //! fn use_my_trait(obj: &dyn MyTrait) {\n //!     // Request a &String from obj.\n-//!     let _ = obj.get_context_ref::<String>().unwrap();\n+//!     let _ = obj.get_context_by_ref::<String>().unwrap();\n //! }\n //! ```\n //!\n //! In this example, if the concrete type of `obj` in `use_my_trait` is `SomeConcreteType`, then\n-//! the `get_context_ref` call will return a reference to `obj.some_string`.\n+//! the `get_context_ref` call will return a reference to `obj.some_string` with type `&String`.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -775,10 +778,10 @@ pub const fn type_name_of_val<T: ?Sized>(_val: &T) -> &'static str {\n /// Trait implemented by a type which can dynamically provide values based on type.\n #[unstable(feature = \"provide_any\", issue = \"none\")]\n pub trait Provider {\n-    /// Object providers should implement this method to provide *all* values they are able to\n-    /// provide using `req`.\n+    /// Data providers should implement this method to provide *all* values they are able to\n+    /// provide by using `demand`.\n     #[unstable(feature = \"provide_any\", issue = \"none\")]\n-    fn provide<'a>(&'a self, req: &mut Demand<'a>);\n+    fn provide<'a>(&'a self, demand: &mut Demand<'a>);\n }\n \n /// Request a value from the `Provider`.\n@@ -816,12 +819,11 @@ where\n // Demand and its methods\n ///////////////////////////////////////////////////////////////////////////////\n \n-/// A helper object for providing objects by type.\n+/// A helper object for providing data by type.\n ///\n-/// An object provider provides values by calling this type's provide methods.\n+/// A data provider provides values by calling this type's provide methods.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"provide_any\", issue = \"none\")]\n-// SAFETY: `TaggedOption::as_demand` relies on this precise definition.\n #[repr(transparent)]\n pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n@@ -836,7 +838,8 @@ impl<'a> Demand<'a> {\n         self.provide_with::<tags::Value<T>, F>(fulfil)\n     }\n \n-    /// Provide a reference, note that the referee type must be bounded by `'static`, but may be unsized.\n+    /// Provide a reference, note that the referee type must be bounded by `'static`,\n+    /// but may be unsized.\n     #[unstable(feature = \"provide_any\", issue = \"none\")]\n     pub fn provide_ref<T: ?Sized + 'static>(&mut self, value: &'a T) -> &mut Self {\n         self.provide::<tags::Ref<tags::MaybeSizedValue<T>>>(value)\n@@ -902,7 +905,7 @@ mod tags {\n         type Reified = T::Reified;\n     }\n \n-    /// Type-based tag for types bounded by `'static`, i.e., with no borrowed element.\n+    /// Type-based tag for types bounded by `'static`, i.e., with no borrowed elements.\n     #[derive(Debug)]\n     pub struct Value<T: 'static>(PhantomData<T>);\n \n@@ -960,7 +963,7 @@ impl<'a, I: tags::Type<'a>> Erased<'a> for TaggedOption<'a, I> {\n #[unstable(feature = \"provide_any\", issue = \"none\")]\n impl<'a> dyn Erased<'a> {\n     /// Returns some reference to the dynamic value if it is tagged with `I`,\n-    /// or `None` if it isn't.\n+    /// or `None` otherwise.\n     #[inline]\n     fn downcast_mut<I>(&mut self) -> Option<&mut TaggedOption<'a, I>>\n     where"}]}