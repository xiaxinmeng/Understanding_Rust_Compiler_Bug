{"sha": "da226dd9dcff81aba6a6bd032057816e88555abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMjI2ZGQ5ZGNmZjgxYWJhNmE2YmQwMzIwNTc4MTZlODg1NTVhYmY=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-16T19:01:41Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-16T21:35:44Z"}, "message": "Lighten tests, in particular for Miri, yet test and explain more", "tree": {"sha": "4815b4df34c872d9e795be903b3f73b65f51ee41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4815b4df34c872d9e795be903b3f73b65f51ee41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da226dd9dcff81aba6a6bd032057816e88555abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da226dd9dcff81aba6a6bd032057816e88555abf", "html_url": "https://github.com/rust-lang/rust/commit/da226dd9dcff81aba6a6bd032057816e88555abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da226dd9dcff81aba6a6bd032057816e88555abf/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914b855f40c10f1db627bef5543e5c2edfe50b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/914b855f40c10f1db627bef5543e5c2edfe50b14", "html_url": "https://github.com/rust-lang/rust/commit/914b855f40c10f1db627bef5543e5c2edfe50b14"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "4a9af64f9d4d1be3b7d7b4bc20df6adc56f185f8", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/da226dd9dcff81aba6a6bd032057816e88555abf/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da226dd9dcff81aba6a6bd032057816e88555abf/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=da226dd9dcff81aba6a6bd032057816e88555abf", "patch": "@@ -15,7 +15,7 @@ fn test_basic_large() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n     #[cfg(miri)]\n-    let size = 200;\n+    let size = 144; // to obtain height 3 tree (having edges to both kinds of nodes)\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -381,8 +381,8 @@ fn test_range_small() {\n }\n \n #[test]\n-fn test_range_depth_2() {\n-    // Assuming that node.CAPACITY is 11, having 12 pairs implies a depth 2 tree\n+fn test_range_height_2() {\n+    // Assuming that node.CAPACITY is 11, having 12 pairs implies a height 2 tree\n     // with 2 leaves. Depending on details we don't want or need to rely upon,\n     // the single key at the root will be 6 or 7.\n \n@@ -524,7 +524,7 @@ fn test_range_1000() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 1000;\n     #[cfg(miri)]\n-    let size = 200;\n+    let size = 144; // to obtain height 3 tree (having edges to both kinds of nodes)\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) {\n@@ -561,14 +561,15 @@ fn test_range_borrowed_key() {\n \n #[test]\n fn test_range() {\n-    #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n+    #[cfg(not(miri))] // Miri is too slow\n+    let step = 1;\n     #[cfg(miri)]\n-    let size = 30;\n+    let step = 66;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n-    for i in 0..size {\n-        for j in i..size {\n+    for i in (0..size).step_by(step) {\n+        for j in (i..size).step_by(step) {\n             let mut kvs = map.range((Included(&i), Included(&j))).map(|(&k, &v)| (k, v));\n             let mut pairs = (i..=j).map(|i| (i, i));\n \n@@ -583,14 +584,15 @@ fn test_range() {\n \n #[test]\n fn test_range_mut() {\n-    #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n+    #[cfg(not(miri))] // Miri is too slow\n+    let step = 1;\n     #[cfg(miri)]\n-    let size = 30;\n+    let step = 66;\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n-    for i in 0..size {\n-        for j in i..size {\n+    for i in (0..size).step_by(step) {\n+        for j in (i..size).step_by(step) {\n             let mut kvs = map.range_mut((Included(&i), Included(&j))).map(|(&k, &mut v)| (k, v));\n             let mut pairs = (i..=j).map(|i| (i, i));\n \n@@ -758,10 +760,7 @@ fn test_bad_zst() {\n #[test]\n fn test_clone() {\n     let mut map = BTreeMap::new();\n-    #[cfg(not(miri))] // Miri is too slow\n-    let size = 100;\n-    #[cfg(miri)]\n-    let size = 30;\n+    let size = 12; // to obtain height 2 tree (having edges to leaf nodes)\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -788,24 +787,36 @@ fn test_clone() {\n         assert_eq!(map.len(), size / 2 - i - 1);\n         assert_eq!(map, map.clone());\n     }\n+\n+    // Full 2-level and minimal 3-level tree (sizes 143, 144 -- the only ones we clone for).\n+    for i in 1..=144 {\n+        assert_eq!(map.insert(i, i), None);\n+        assert_eq!(map.len(), i);\n+        if i >= 143 {\n+            assert_eq!(map, map.clone());\n+        }\n+    }\n }\n \n #[test]\n fn test_clone_from() {\n     let mut map1 = BTreeMap::new();\n-    let size = 30;\n+    let max_size = 12; // to obtain height 2 tree (having edges to leaf nodes)\n \n-    for i in 0..size {\n+    // Range to max_size inclusive, because i is the size of map1 being tested.\n+    for i in 0..=max_size {\n         let mut map2 = BTreeMap::new();\n         for j in 0..i {\n             let mut map1_copy = map2.clone();\n-            map1_copy.clone_from(&map1);\n+            map1_copy.clone_from(&map1); // small cloned from large\n             assert_eq!(map1_copy, map1);\n             let mut map2_copy = map1.clone();\n-            map2_copy.clone_from(&map2);\n+            map2_copy.clone_from(&map2); // large cloned from small\n             assert_eq!(map2_copy, map2);\n             map2.insert(100 * j + 1, 2 * j + 1);\n         }\n+        map2.clone_from(&map1); // same length\n+        assert_eq!(map2, map1);\n         map1.insert(i, 10 * i);\n     }\n }\n@@ -956,6 +967,7 @@ create_append_test!(test_append_145, 145);\n // Tests for several randomly chosen sizes.\n create_append_test!(test_append_170, 170);\n create_append_test!(test_append_181, 181);\n+#[cfg(not(miri))] // Miri is too slow\n create_append_test!(test_append_239, 239);\n #[cfg(not(miri))] // Miri is too slow\n create_append_test!(test_append_1700, 1700);"}]}