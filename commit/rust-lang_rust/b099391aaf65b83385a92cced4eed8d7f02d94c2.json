{"sha": "b099391aaf65b83385a92cced4eed8d7f02d94c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOTkzOTFhYWY2NWI4MzM4NWE5MmNjZWQ0ZWVkOGQ3ZjAyZDk0YzI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-12T23:11:41Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-12T23:11:41Z"}, "message": "Check actual vs. expected values.", "tree": {"sha": "3693bfca1d713d54ad7f6ec0d88d7c7588337a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3693bfca1d713d54ad7f6ec0d88d7c7588337a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b099391aaf65b83385a92cced4eed8d7f02d94c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b099391aaf65b83385a92cced4eed8d7f02d94c2", "html_url": "https://github.com/rust-lang/rust/commit/b099391aaf65b83385a92cced4eed8d7f02d94c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b099391aaf65b83385a92cced4eed8d7f02d94c2/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74537614056f276e74903baa03d1d06985ac3b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/74537614056f276e74903baa03d1d06985ac3b61", "html_url": "https://github.com/rust-lang/rust/commit/74537614056f276e74903baa03d1d06985ac3b61"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "52f9560dd6d2c5504edf06f6e775608e064acbd4", "filename": "src/interpreter.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b099391aaf65b83385a92cced4eed8d7f02d94c2/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b099391aaf65b83385a92cced4eed8d7f02d94c2/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=b099391aaf65b83385a92cced4eed8d7f02d94c2", "patch": "@@ -1,7 +1,7 @@\n-use rustc::front;\n use rustc::middle::ty;\n use rustc_mir::mir_map::MirMap;\n use rustc_mir::repr::{self as mir, Mir};\n+use syntax::ast::Attribute;\n use syntax::attr::AttrMetaMethods;\n \n #[derive(Clone, Debug)]\n@@ -28,14 +28,13 @@ impl<'tcx> Interpreter<'tcx> {\n         }\n     }\n \n-    fn run(&mut self) {\n+    fn run(&mut self) -> Value {\n         let start_block = self.mir.basic_block_data(mir::START_BLOCK);\n \n         for stmt in &start_block.statements {\n             use rustc_mir::repr::Lvalue::*;\n             use rustc_mir::repr::StatementKind::*;\n \n-            println!(\"  {:?}\", stmt);\n             match stmt.kind {\n                 Assign(ref lv, ref rv) => {\n                     let val = self.eval_rvalue(rv);\n@@ -53,8 +52,7 @@ impl<'tcx> Interpreter<'tcx> {\n             }\n         }\n \n-        println!(\"  {:?}\", start_block.terminator);\n-        println!(\"=> {:?}\", self.result);\n+        self.result.clone()\n     }\n \n     fn eval_rvalue(&mut self, rvalue: &mir::Rvalue) -> Value {\n@@ -113,14 +111,37 @@ pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>\n     for (&id, mir) in mir_map {\n         for attr in tcx.map.attrs(id) {\n             if attr.check_name(\"miri_run\") {\n-                let item = match tcx.map.get(id) {\n-                    front::map::NodeItem(item) => item,\n-                    _ => panic!(),\n-                };\n+                let item = tcx.map.expect_item(id);\n+\n                 println!(\"Interpreting: {}\", item.name);\n                 let mut interpreter = Interpreter::new(mir);\n-                interpreter.run();\n+                let val = interpreter.run();\n+                let val_str = format!(\"{:?}\", val);\n+\n+                if !check_expected(&val_str, attr) {\n+                    println!(\"=> {}\\n\", val_str);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_expected(actual: &str, attr: &Attribute) -> bool {\n+    if let Some(meta_items) = attr.meta_item_list() {\n+        for meta_item in meta_items {\n+            if meta_item.check_name(\"expected\") {\n+                let expected = meta_item.value_str().unwrap();\n+\n+                if actual == &expected[..] {\n+                    println!(\"Test passed!\\n\");\n+                } else {\n+                    println!(\"Actual value:\\t{}\\nExpected value:\\t{}\\n\", actual, expected);\n+                }\n+\n+                return true;\n             }\n         }\n     }\n+\n+    false\n }"}, {"sha": "77d0582daddc635abb3510c8d9a29a30568b98b6", "filename": "test/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b099391aaf65b83385a92cced4eed8d7f02d94c2/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b099391aaf65b83385a92cced4eed8d7f02d94c2/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=b099391aaf65b83385a92cced4eed8d7f02d94c2", "previous_filename": "test/add.rs"}]}