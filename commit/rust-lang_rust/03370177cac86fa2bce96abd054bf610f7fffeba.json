{"sha": "03370177cac86fa2bce96abd054bf610f7fffeba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMzcwMTc3Y2FjODZmYTJiY2U5NmFiZDA1NGJmNjEwZjdmZmZlYmE=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-18T12:47:36Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2017-11-18T16:30:16Z"}, "message": "Stabilize `ascii_ctype` methods for `u8` and `char`\n\nThe feature of those methods was renamed to \"ascii_ctype_on_intrinsics\".", "tree": {"sha": "0ed8ac546c5aab5208ce3dadf2a48c91fce0fe27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed8ac546c5aab5208ce3dadf2a48c91fce0fe27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03370177cac86fa2bce96abd054bf610f7fffeba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03370177cac86fa2bce96abd054bf610f7fffeba", "html_url": "https://github.com/rust-lang/rust/commit/03370177cac86fa2bce96abd054bf610f7fffeba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03370177cac86fa2bce96abd054bf610f7fffeba/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667f83d46baa1c42a170cfae5afbff52a85cd95d", "url": "https://api.github.com/repos/rust-lang/rust/commits/667f83d46baa1c42a170cfae5afbff52a85cd95d", "html_url": "https://github.com/rust-lang/rust/commit/667f83d46baa1c42a170cfae5afbff52a85cd95d"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "408e0a0249e27719acd728f7fca126b52da50d53", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03370177cac86fa2bce96abd054bf610f7fffeba/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03370177cac86fa2bce96abd054bf610f7fffeba/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=03370177cac86fa2bce96abd054bf610f7fffeba", "patch": "@@ -2420,7 +2420,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2458,7 +2458,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2496,7 +2496,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2537,7 +2537,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2575,7 +2575,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2616,7 +2616,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2658,7 +2658,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         if *self >= 0x80 { return false }\n@@ -2696,7 +2696,7 @@ impl u8 {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2751,7 +2751,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         if *self >= 0x80 { return false; }\n@@ -2791,7 +2791,7 @@ impl u8 {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         if *self >= 0x80 { return false; }"}, {"sha": "5e7f7062ef77bffc06730180ad385d680bc365e0", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03370177cac86fa2bce96abd054bf610f7fffeba/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03370177cac86fa2bce96abd054bf610f7fffeba/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=03370177cac86fa2bce96abd054bf610f7fffeba", "patch": "@@ -1106,7 +1106,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphabetic());\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_alphabetic()\n@@ -1140,7 +1140,7 @@ impl char {\n     /// assert!(!lf.is_ascii_uppercase());\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_uppercase()\n@@ -1174,7 +1174,7 @@ impl char {\n     /// assert!(!lf.is_ascii_lowercase());\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_lowercase()\n@@ -1211,7 +1211,7 @@ impl char {\n     /// assert!(!lf.is_ascii_alphanumeric());\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_alphanumeric()\n@@ -1245,7 +1245,7 @@ impl char {\n     /// assert!(!lf.is_ascii_digit());\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_digit()\n@@ -1282,7 +1282,7 @@ impl char {\n     /// assert!(!lf.is_ascii_hexdigit());\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_hexdigit()\n@@ -1320,7 +1320,7 @@ impl char {\n     /// assert!(!lf.is_ascii_punctuation());\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_punctuation()\n@@ -1354,7 +1354,7 @@ impl char {\n     /// assert!(!lf.is_ascii_graphic());\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_graphic()\n@@ -1405,7 +1405,7 @@ impl char {\n     /// assert!(lf.is_ascii_whitespace());\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_whitespace()\n@@ -1441,7 +1441,7 @@ impl char {\n     /// assert!(lf.is_ascii_control());\n     /// assert!(esc.is_ascii_control());\n     /// ```\n-    #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n         self.is_ascii() && (*self as u8).is_ascii_control()"}]}