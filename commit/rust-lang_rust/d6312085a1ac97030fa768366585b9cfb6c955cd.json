{"sha": "d6312085a1ac97030fa768366585b9cfb6c955cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MzEyMDg1YTFhYzk3MDMwZmE3NjgzNjY1ODViOWNmYjZjOTU1Y2Q=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-21T17:51:31Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T19:03:14Z"}, "message": "remove slower impl, add benchmarks", "tree": {"sha": "bdd36cd3efd76fc3a1561847ed66ccece7b75303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd36cd3efd76fc3a1561847ed66ccece7b75303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6312085a1ac97030fa768366585b9cfb6c955cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6312085a1ac97030fa768366585b9cfb6c955cd", "html_url": "https://github.com/rust-lang/rust/commit/d6312085a1ac97030fa768366585b9cfb6c955cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6312085a1ac97030fa768366585b9cfb6c955cd/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a005d2a614031a18c9a5bf6557789a41f1b25c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/a005d2a614031a18c9a5bf6557789a41f1b25c31", "html_url": "https://github.com/rust-lang/rust/commit/a005d2a614031a18c9a5bf6557789a41f1b25c31"}], "stats": {"total": 505, "additions": 304, "deletions": 201}, "files": [{"sha": "1ee2df8ddb4db3b2d77b5c2111ad1d67386e5a48", "filename": "Cargo.lock", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/d6312085a1ac97030fa768366585b9cfb6c955cd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d6312085a1ac97030fa768366585b9cfb6c955cd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d6312085a1ac97030fa768366585b9cfb6c955cd", "patch": "@@ -122,6 +122,11 @@ dependencies = [\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cast\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.27\"\n@@ -164,6 +169,51 @@ dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"criterion\"\n+version = \"0.2.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"criterion-plot 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"criterion-stats 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"csv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.32.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools-num 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"simplelog 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"criterion-plot\"\n+version = \"0.2.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cast 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"criterion-stats\"\n+version = \"0.2.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cast 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread-scoped 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.2.6\"\n@@ -233,6 +283,23 @@ dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"csv\"\n+version = \"1.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"csv-core 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"csv-core\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"derive-new\"\n version = \"0.5.6\"\n@@ -368,6 +435,21 @@ name = \"glob\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"handlebars\"\n+version = \"0.32.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n@@ -418,6 +500,14 @@ dependencies = [\n  \"either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"itertools-num\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.4.3\"\n@@ -596,6 +686,11 @@ name = \"percent-encoding\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"pest\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"pest\"\n version = \"2.0.2\"\n@@ -604,6 +699,16 @@ dependencies = [\n  \"ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"pest_derive\"\n+version = \"1.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pest_derive\"\n version = \"2.0.1\"\n@@ -665,6 +770,11 @@ name = \"quick-error\"\n version = \"1.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"quote\"\n+version = \"0.3.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"quote\"\n version = \"0.6.10\"\n@@ -721,11 +831,15 @@ dependencies = [\n name = \"ra_editor\"\n version = \"0.1.0\"\n dependencies = [\n+ \"criterion 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n+ \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"superslice 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n@@ -1126,6 +1240,16 @@ dependencies = [\n  \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"simplelog\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"slug\"\n version = \"0.1.4\"\n@@ -1165,6 +1289,16 @@ name = \"superslice\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.11.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"0.14.9\"\n@@ -1185,6 +1319,14 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"synom\"\n+version = \"0.11.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"synstructure\"\n version = \"0.10.1\"\n@@ -1249,6 +1391,15 @@ dependencies = [\n  \"tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"term\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"termion\"\n version = \"1.5.1\"\n@@ -1285,6 +1436,11 @@ dependencies = [\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"thread-scoped\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -1413,6 +1569,11 @@ name = \"unicode-width\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unicode-xid\"\n version = \"0.1.0\"\n@@ -1527,18 +1688,24 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"560c32574a12a89ecd91f5e742165893f86e3ab98d21f8ea548658eb9eef5f40\"\n \"checksum byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94f88df23a25417badc922ab0f5716cc1330e87f71ddd9203b3a3ccd9cedf75d\"\n \"checksum cargo_metadata 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e5d1b4d380e1bab994591a24c2bdd1b054f64b60bef483a8c598c7c345bc3bbe\"\n+\"checksum cast 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"926013f2860c46252efceabb19f4a6b308197505082c609025aa6706c011d427\"\n \"checksum cc 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"155ed195f7bd722d1dfeb30365b9d0c1f6a078fa7ca4014497e5935d90993d6f\"\n \"checksum cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"082bb9b28e00d3c9d39cc03e64ce4cea0f1bb9b3fde493f0cbc008472d22bdf4\"\n \"checksum chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45912881121cb26fad7c38c17ba7daa18764771836b34fab7d3fbd93ed633878\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n+\"checksum criterion 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c47d2b548c5647e1a436dc0cb78d4ebf51b6bf7ab101ed76662828bdd4d3a24a\"\n+\"checksum criterion-plot 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e649d6aacdbbdb94ec659561a309a71336fc5655ed408f3afd28df2fc0c4f4f\"\n+\"checksum criterion-stats 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff43cac80562f91ead0b617c1be74edf350adfaa195809d355de98dfc8f9237d\"\n \"checksum crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b85741761b7f160bc5e7e0c14986ef685b7f8bf9b7ad081c60c604bb4649827\"\n \"checksum crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f739f8c5363aca78cfb059edf753d8f0d36908c348f3d8d1503f03d8b75d9cf3\"\n \"checksum crossbeam-epoch 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"927121f5407de9956180ff5e936fe3cf4324279280001cd56b669d28ee7e9150\"\n \"checksum crossbeam-epoch 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2449aaa4ec7ef96e5fb24db16024b935df718e9ae1cec0a1e68feeca2efca7b8\"\n \"checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9\"\n \"checksum crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"677d453a17e8bd2b913fa38e8b9cf04bcdbb5be790aa294f2389661d72036015\"\n \"checksum crossbeam-utils 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41ee4864f4797060e52044376f7d107429ce1fb43460021b126424b7180ee21a\"\n+\"checksum csv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fd1c44c58078cfbeaf11fbb3eac9ae5534c23004ed770cc4bfb48e658ae4f04\"\n+\"checksum csv-core 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa5cdef62f37e6ffe7d1f07a381bc0db32b7a3ff1cac0de56cb0d81e71f53d65\"\n \"checksum derive-new 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ca414e896ae072546f4d789f452daaecf60ddee4c9df5dc6d5936d769e3d87c\"\n \"checksum deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"850878694b7933ca4c9569d30a34b55031b9b139ee1fc7b94a527c4ef960d690\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n@@ -1556,13 +1723,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \"checksum generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef25c5683767570c2bbd7deba372926a55eaae9982d7726ee2a1050239d45b9d\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n+\"checksum handlebars 0.32.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d89ec99d1594f285d4590fc32bac5f75cdab383f1123d504d27862c644a807dd\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n \"checksum id-arena 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a7250033feafee46a1cecd2c2616a64aec1d064f38c9ae2bdd297728542843e\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9c7f9bb8aee47fc16d535a705f7867a9fc83bb822e5e1043bb98e77ffeed3c\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n \"checksum itertools 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d47946d458e94a1b7bcabbf6521ea7c037062c81f534615abcad76e84d4970d\"\n+\"checksum itertools-num 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a872a22f9e6f7521ca557660adb96dd830e54f0f490fa115bb55dd69d38b27e7\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n \"checksum join_to_string 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bddc885f3fd69dd4b5d747c2efe6dd2c36d795ea9938281ed50910e32c95e31\"\n \"checksum languageserver-types 0.53.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a0be4f8f783832a308975035043c0e8ad18e11c3f3d395aa6f1a9f3a30b8e654\"\n@@ -1586,13 +1755,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad7f7e6ebdc79edff6fdcb87a55b620174f7a989e3eb31b65231f4af57f00b8c\"\n \"checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n+\"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n \"checksum pest 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a677051ad923732bb5c70f2d45f8985a96e3eee2e2bff86697e3b11b0c3fcfde\"\n+\"checksum pest_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3294f437119209b084c797604295f40227cffa35c57220b1e99a6ff3bf8ee4\"\n \"checksum pest_derive 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b76f477146419bc539a63f4ef40e902166cb43b3e51cecc71d9136fd12c567e7\"\n \"checksum pest_generator 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ebee4e9680be4fd162e6f3394ae4192a6b60b1e4d17d845e631f0c68d1a3386\"\n \"checksum pest_meta 2.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f6d5f6f0e6082578c86af197d780dc38328e3f768cec06aac9bc46d714e8221\"\n \"checksum proc-macro2 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77619697826f31a02ae974457af0b29b723e5619e113e9397b8b82c6bd253f09\"\n \"checksum proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"926d0604475349f463fe44130aae73f2294b5309ab2ca0310b998bd334ef191f\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n+\"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53fa22a1994bd0f9372d7a816207d8a2677ad0325b073f5c5332760f0fb62b5c\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n \"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n@@ -1629,22 +1801,27 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_derive 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96a7f9496ac65a2db5929afa087b54f8fc5008dcfbe48a8874ed20049b0d6154\"\n \"checksum serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c37ccd6be3ed1fdf419ee848f7c758eb31b054d7cd3ae3600e3bae0adf569811\"\n \"checksum sha-1 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51b9d1f3b5de8a167ab06834a7c883bd197f2191e1dda1a22d9ccfeedbf9aded\"\n+\"checksum simplelog 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e95345f185d5adeb8ec93459d2dc99654e294cc6ccf5b75414d8ea262de9a13\"\n \"checksum slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bc762e6a4b6c6fcaade73e77f9ebc6991b676f88bb2358bddb56560f073373\"\n \"checksum smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b73ea3738b47563803ef814925e69be00799a8c07420be8b996f8e98fb2336db\"\n \"checksum smol_str 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"486a74e9b9fc53373808f7a17e10fc728adcb1fbe272292271d8bea61175e181\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum superslice 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b50b13d42370e0f5fc62eafdd5c2d20065eaf5458dab215ff3e20e63eea96b30\"\n+\"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"261ae9ecaa397c42b960649561949d69311f08eeaea86a65696e6e46517cf741\"\n \"checksum syn 0.15.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9545a6a093a3f0bd59adb472700acc08cad3776f860f16a897dfce8c88721cbc\"\n+\"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n \"checksum tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e91405c14320e5c79b3d148e1c86f40749a36e490642202a31689cb1a3452b2\"\n \"checksum tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b505279e19d8f7d24b1a9dc58327c9c36174b1a2c7ebdeac70792d017cb64f3\"\n \"checksum teraron 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d89ad4617d1dec55331067fadaa041e813479e1779616f3d3ce9308bf46184e\"\n+\"checksum term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e6b677dd1e8214ea1ef4297f85dbcbed8e8cdddb561040cc998ca2551c37561\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8009d7bdbd896a7e09b595f8f9325a19047fc708653e60d0895202b82135048f\"\n \"checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6\"\n+\"checksum thread-scoped 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcbb6aa301e5d3b0b5ef639c9a9c7e2f1c944f177b460c04dc24c69b1fa2bd99\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2f0c90a5f3459330ac8bc0d2f879c693bb7a2f59689c1083fc4ef83834da865\"\n \"checksum time 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"847da467bf0db05882a9e2375934a8a55cffdc9db0d128af1518200260ba1f6c\"\n@@ -1661,6 +1838,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a0180bc61fc5a987082bfa111f4cc95c4caff7f9799f3e46df09163a937aa25\"\n \"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\"\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a\""}, {"sha": "039688d7df99e1093ab077607343ebc032524dec", "filename": "crates/ra_editor/Cargo.toml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2FCargo.toml?ref=d6312085a1ac97030fa768366585b9cfb6c955cd", "patch": "@@ -18,3 +18,11 @@ proptest = \"0.8.7\"\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+criterion = \"0.2\"\n+rand = \"*\"\n+rand_xorshift = \"*\"\n+lazy_static = \"*\"\n+\n+[[bench]]\n+name = \"translate_offset_with_edit_benchmark\"\n+harness = false\n\\ No newline at end of file"}, {"sha": "b345a91aecb15db2e3832f083acc407d25fba4a3", "filename": "crates/ra_editor/benches/translate_offset_with_edit_benchmark.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2Fbenches%2Ftranslate_offset_with_edit_benchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2Fbenches%2Ftranslate_offset_with_edit_benchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fbenches%2Ftranslate_offset_with_edit_benchmark.rs?ref=d6312085a1ac97030fa768366585b9cfb6c955cd", "patch": "@@ -0,0 +1,88 @@\n+use criterion::{criterion_group, criterion_main};\n+use criterion::Criterion;\n+use criterion::Fun;\n+use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::test_utils::{arb_edits_custom, arb_offset};\n+use ra_editor::line_index_utils;\n+use ra_editor::LineIndex;\n+use ra_syntax::TextUnit;\n+use proptest::test_runner;\n+use proptest::string::string_regex;\n+use proptest::strategy::{Strategy, ValueTree};\n+use rand_xorshift::XorShiftRng;\n+use rand::SeedableRng;\n+use lazy_static::lazy_static;\n+\n+#[derive(Debug)]\n+struct Data {\n+    text: String,\n+    line_index: LineIndex,\n+    edits: Vec<AtomTextEdit>,\n+    offset: TextUnit,\n+}\n+\n+fn setup_data() -> Data {\n+    let mut runner = test_runner::TestRunner::default();\n+    {\n+        struct TestRng {\n+            rng: XorShiftRng,\n+        }\n+        // HACK to be able to manually seed the TestRunner\n+        let rng: &mut TestRng = unsafe { std::mem::transmute(runner.rng()) };\n+        rng.rng = XorShiftRng::seed_from_u64(0);\n+    }\n+\n+    let text = {\n+        let arb = string_regex(\"([a-zA-Z_0-9]{10,50}.{1,5}\\n){100,500}\").unwrap();\n+        let tree = arb.new_tree(&mut runner).unwrap();\n+        tree.current()\n+    };\n+\n+    let edits = {\n+        let arb = arb_edits_custom(&text, 99, 100);\n+        let tree = arb.new_tree(&mut runner).unwrap();\n+        tree.current()\n+    };\n+\n+    let offset = {\n+        let arb = arb_offset(&text);\n+        let tree = arb.new_tree(&mut runner).unwrap();\n+        tree.current()\n+    };\n+\n+    let line_index = LineIndex::new(&text);\n+\n+    Data {\n+        text,\n+        line_index,\n+        edits,\n+        offset,\n+    }\n+}\n+\n+lazy_static! {\n+    static ref DATA: Data = setup_data();\n+}\n+\n+fn compare_translates(c: &mut Criterion) {\n+    let f1 = Fun::new(\"translate_after_edit\", |b, _| {\n+        b.iter(|| {\n+            let d = &*DATA;\n+            line_index_utils::translate_after_edit(&d.text, d.offset, d.edits.clone());\n+        })\n+    });\n+\n+    let f2 = Fun::new(\"count_newlines\", |b, _| {\n+        b.iter(|| {\n+            let d = &*DATA;\n+            line_index_utils::count_newlines(d.offset, &d.line_index, &d.edits);\n+        })\n+    });\n+\n+    let functions = vec![f1, f2];\n+\n+    c.bench_functions(\"translate\", functions, ());\n+}\n+\n+criterion_group!(benches, compare_translates);\n+criterion_main!(benches);"}, {"sha": "7145c6cfbe64d708211b5316fde8f4d91d2fd87d", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=d6312085a1ac97030fa768366585b9cfb6c955cd", "patch": "@@ -2,7 +2,8 @@ mod code_actions;\n mod extend_selection;\n mod folding_ranges;\n mod line_index;\n-mod line_index_utils;\n+// public for benchmarkig\n+pub mod line_index_utils;\n mod symbols;\n #[cfg(test)]\n mod test_utils;\n@@ -13,7 +14,6 @@ pub use self::{\n     extend_selection::extend_selection,\n     folding_ranges::{folding_ranges, Fold, FoldKind},\n     line_index::{LineCol, LineIndex},\n-    line_index_utils::translate_offset_with_edit,\n     symbols::{file_structure, file_symbols, FileSymbol, StructureNode},\n     typing::{join_lines, on_enter, on_eq_typed},\n };"}, {"sha": "e62c5089d8df40976b73a0e8fb7b527cfae4f3ab", "filename": "crates/ra_editor/src/line_index_utils.rs", "status": "modified", "additions": 21, "deletions": 197, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs?ref=d6312085a1ac97030fa768366585b9cfb6c955cd", "patch": "@@ -24,136 +24,6 @@ impl<'a> Iterator for OffsetNewlineIter<'a> {\n     }\n }\n \n-#[derive(Debug)]\n-struct AltEdit<'a> {\n-    insert_newlines: OffsetNewlineIter<'a>,\n-    delete: TextRange,\n-    diff: i64,\n-}\n-\n-fn translate_range_by(range: TextRange, diff: i64) -> TextRange {\n-    if diff == 0 {\n-        range\n-    } else {\n-        let start = translate_by(range.start(), diff);\n-        let end = translate_by(range.end(), diff);\n-        TextRange::from_to(start, end)\n-    }\n-}\n-\n-fn translate_by(x: TextUnit, diff: i64) -> TextUnit {\n-    if diff == 0 {\n-        x\n-    } else {\n-        TextUnit::from((x.to_usize() as i64 + diff) as u32)\n-    }\n-}\n-\n-fn to_alt_edits<'a>(offset: TextUnit, edits: &'a [AtomTextEdit]) -> Vec<AltEdit<'a>> {\n-    let mut xs: Vec<AltEdit<'a>> = Vec::with_capacity(edits.len());\n-    // collect and sort edits\n-    for edit in edits {\n-        // TODO discard after translating?\n-        // if edit.delete.start() >= offset {\n-        //     continue;\n-        // }\n-        let insert_index = xs.upper_bound_by_key(&edit.delete.start(), |x| x.delete.start());\n-        let diff = edit.insert.len() as i64 - edit.delete.len().to_usize() as i64;\n-        xs.insert(\n-            insert_index,\n-            AltEdit {\n-                insert_newlines: OffsetNewlineIter {\n-                    offset: edit.delete.start(),\n-                    text: &edit.insert,\n-                },\n-                delete: edit.delete,\n-                diff: diff,\n-            },\n-        );\n-    }\n-    // translate edits by previous edits\n-    for i in 1..xs.len() {\n-        let (x, prevs) = xs[0..=i].split_last_mut().unwrap();\n-        for prev in prevs {\n-            x.delete = translate_range_by(x.delete, prev.diff);\n-            x.insert_newlines.offset = translate_by(x.insert_newlines.offset, prev.diff);\n-        }\n-    }\n-    xs\n-}\n-\n-#[derive(Debug)]\n-enum NextNewline {\n-    Use,\n-    Discard,\n-    Replace(TextUnit),\n-    New(TextUnit),\n-}\n-\n-fn next_newline(candidate: Option<TextUnit>, edits: &mut [AltEdit]) -> NextNewline {\n-    let mut candidate = match candidate {\n-        None => {\n-            for edit in edits {\n-                if let Some(inserted) = edit.insert_newlines.next() {\n-                    return NextNewline::New(inserted);\n-                }\n-            }\n-            return NextNewline::Use; // END\n-        }\n-        Some(x) => x,\n-    };\n-\n-    for edit in edits {\n-        if candidate <= edit.delete.start() {\n-            return NextNewline::Replace(candidate);\n-        } else if candidate <= edit.delete.end() {\n-            return match edit.insert_newlines.next() {\n-                Some(x) => NextNewline::Replace(x),\n-                None => NextNewline::Discard,\n-            };\n-        } else {\n-            if let Some(inserted) = edit.insert_newlines.next() {\n-                return NextNewline::New(inserted);\n-            }\n-            candidate = translate_by(candidate, edit.diff);\n-        }\n-    }\n-    return NextNewline::Replace(candidate);\n-}\n-\n-pub fn count_newlines(offset: TextUnit, line_index: &LineIndex, edits: &[AtomTextEdit]) -> u32 {\n-    let mut edits = to_alt_edits(offset, edits);\n-    let mut orig_newlines = line_index.newlines().iter().map(|x| *x).peekable();\n-\n-    let mut count = 0;\n-\n-    loop {\n-        let res = next_newline(orig_newlines.peek().map(|x| *x), &mut edits);\n-        let next = match res {\n-            NextNewline::Use => orig_newlines.next(),\n-            NextNewline::Discard => {\n-                orig_newlines.next();\n-                continue;\n-            }\n-            NextNewline::Replace(new) => {\n-                orig_newlines.next();\n-                Some(new)\n-            }\n-            NextNewline::New(new) => Some(new),\n-        };\n-        match next {\n-            Some(n) if n <= offset => {\n-                count += 1;\n-            }\n-            _ => {\n-                break;\n-            }\n-        }\n-    }\n-\n-    count\n-}\n-\n #[derive(Debug)]\n enum NextNewlines<'a> {\n     Use,\n@@ -188,7 +58,7 @@ impl<'a, 'b> Edits<'a, 'b> {\n         self.acc_diff += self.current.as_ref().map_or(0, |x| x.diff);\n         match self.edits.split_first() {\n             Some((next, rest)) => {\n-                let delete = translate_range_by(next.delete, self.acc_diff);\n+                let delete = self.translate_range(next.delete);\n                 let diff = next.insert.len() as i64 - next.delete.len().to_usize() as i64;\n                 self.current = Some(TranslatedEdit {\n                     delete,\n@@ -241,9 +111,27 @@ impl<'a, 'b> Edits<'a, 'b> {\n         };\n         res\n     }\n+\n+    fn translate_range(&self, range: TextRange) -> TextRange {\n+        if self.acc_diff == 0 {\n+            range\n+        } else {\n+            let start = self.translate(range.start());\n+            let end = self.translate(range.end());\n+            TextRange::from_to(start, end)\n+        }\n+    }\n+\n+    fn translate(&self, x: TextUnit) -> TextUnit {\n+        if self.acc_diff == 0 {\n+            x\n+        } else {\n+            TextUnit::from((x.to_usize() as i64 + self.acc_diff) as u32)\n+        }\n+    }\n }\n \n-pub fn count_newlines_alt(offset: TextUnit, line_index: &LineIndex, edits: &[AtomTextEdit]) -> u32 {\n+pub fn count_newlines(offset: TextUnit, line_index: &LineIndex, edits: &[AtomTextEdit]) -> u32 {\n     let mut sorted_edits: Vec<&AtomTextEdit> = Vec::with_capacity(edits.len());\n     for edit in edits {\n         let insert_index =\n@@ -257,7 +145,7 @@ pub fn count_newlines_alt(offset: TextUnit, line_index: &LineIndex, edits: &[Ato\n \n     for &orig_newline in line_index.newlines() {\n         loop {\n-            let translated_newline = translate_by(orig_newline, state.acc_diff);\n+            let translated_newline = state.translate(orig_newline);\n             match state.next_newlines(translated_newline) {\n                 NextNewlines::Use => {\n                     if offset < translated_newline {\n@@ -369,69 +257,5 @@ mod test {\n             let actual_lines = count_newlines(x.offset, &line_index, &x.edits);\n             assert_eq!(actual_lines, expected.line);\n         }\n-\n-        #[test]\n-        fn test_translate_offset_with_edit_alt(x in arb_text_with_offset_and_edits()) {\n-            let line_index = LineIndex::new(&x.text);\n-            let expected = translate_after_edit(&x.text, x.offset, x.edits.clone());\n-            let actual_lines = count_newlines_alt(x.offset, &line_index, &x.edits);\n-            assert_eq!(actual_lines, expected.line);\n-        }\n-    }\n-\n-    #[test]\n-    fn test_translate_offset_with_edit_alt_1() {\n-        let x = ArbTextWithOffsetAndEdits {\n-            text: String::from(\"aA\\n\"),\n-            offset: 2.into(),\n-            edits: vec![AtomTextEdit::delete(TextRange::from_to(1.into(), 2.into()))],\n-        };\n-        let line_index = LineIndex::new(&x.text);\n-        let expected = translate_after_edit(&x.text, x.offset, x.edits.clone());\n-        let actual_lines = count_newlines_alt(x.offset, &line_index, &x.edits);\n-        assert_eq!(actual_lines, expected.line);\n-    }\n-\n-    #[test]\n-    fn test_translate_offset_with_edit_alt_2() {\n-        let x = ArbTextWithOffsetAndEdits {\n-            text: String::from(\"\\nq\ua038#\"),\n-            offset: 5.into(),\n-            edits: vec![AtomTextEdit::insert(1.into(), \"\\n\".into())],\n-        };\n-        let line_index = LineIndex::new(&x.text);\n-        let expected = translate_after_edit(&x.text, x.offset, x.edits.clone());\n-        let actual_lines = count_newlines_alt(x.offset, &line_index, &x.edits);\n-        assert_eq!(actual_lines, expected.line);\n-    }\n-\n-    #[test]\n-    fn test_translate_offset_with_edit_alt_3() {\n-        let x = ArbTextWithOffsetAndEdits {\n-            text: String::from(\"\\n\\n\\n\"),\n-            offset: 0.into(),\n-            edits: vec![AtomTextEdit::delete(TextRange::from_to(0.into(), 2.into()))],\n-        };\n-        let line_index = LineIndex::new(&x.text);\n-        let expected = translate_after_edit(&x.text, x.offset, x.edits.clone());\n-        let actual_lines = count_newlines_alt(x.offset, &line_index, &x.edits);\n-        assert_eq!(actual_lines, expected.line);\n     }\n-\n-    #[test]\n-    fn test_translate_offset_with_edit_alt_4() {\n-        let x = ArbTextWithOffsetAndEdits {\n-            text: String::from(\"\u263b54\u7fd1\\\"A\"),\n-            offset: 5.into(),\n-            edits: vec![\n-                AtomTextEdit::delete(TextRange::from_to(0.into(), 8.into())),\n-                AtomTextEdit::insert(9.into(), String::from(\"\\n\")),\n-            ],\n-        };\n-        let line_index = LineIndex::new(&x.text);\n-        let expected = translate_after_edit(&x.text, x.offset, x.edits.clone());\n-        let actual_lines = count_newlines_alt(x.offset, &line_index, &x.edits);\n-        assert_eq!(actual_lines, expected.line);\n-    }\n-\n }"}, {"sha": "f150288f6acc5e1e959837e63643d8e1b591e563", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6312085a1ac97030fa768366585b9cfb6c955cd/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=d6312085a1ac97030fa768366585b9cfb6c955cd", "patch": "@@ -24,6 +24,10 @@ pub fn arb_offset(text: &str) -> BoxedStrategy<TextUnit> {\n }\n \n pub fn arb_edits(text: &str) -> BoxedStrategy<Vec<AtomTextEdit>> {\n+    arb_edits_custom(&text, 0, 7)\n+}\n+\n+pub fn arb_edits_custom(text: &str, min: usize, max: usize) -> BoxedStrategy<Vec<AtomTextEdit>> {\n     if text.is_empty() {\n         // only valid edits\n         return Just(vec![])\n@@ -37,9 +41,10 @@ pub fn arb_edits(text: &str) -> BoxedStrategy<Vec<AtomTextEdit>> {\n     }\n \n     let offsets = text_offsets(text);\n-    let max_cuts = offsets.len().min(7);\n+    let max_cuts = max.min(offsets.len());\n+    let min_cuts = min.min(offsets.len() - 1);\n \n-    proptest::sample::subsequence(offsets, 0..max_cuts)\n+    proptest::sample::subsequence(offsets, min_cuts..max_cuts)\n         .prop_flat_map(|cuts| {\n             let strategies: Vec<_> = cuts\n                 .chunks(2)"}]}