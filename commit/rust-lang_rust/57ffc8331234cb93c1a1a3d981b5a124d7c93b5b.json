{"sha": "57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZmZjODMzMTIzNGNiOTNjMWExYTNkOTgxYjVhMTI0ZDdjOTNiNWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T01:59:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T01:59:48Z"}, "message": "Rollup merge of #64128 - Centril:unused-parens-pat, r=davidtwco\n\nunused_parens: account for or-patterns and `&(mut x)`\n\nFixes https://github.com/rust-lang/rust/issues/55342.\nFixes https://github.com/rust-lang/rust/issues/64106.\n\ncc https://github.com/rust-lang/rust/issues/54883\ncc https://github.com/rust-lang/rust/pull/64111\n\nr? @oli-obk", "tree": {"sha": "66a0c2d7ecc8dacc18d39f42550012c8af923823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66a0c2d7ecc8dacc18d39f42550012c8af923823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcGwUCRBK7hj4Ov3rIwAAdHIIADWnMMQXlLxQUOBpVmIzfwii\nhaDnvGPSmYRO0rnsq40yA7YhoooTN+GV6s0syKMQeuqXo/DwOPTzzcDWIzvLKzZC\nLsUHB2tuJdhNKn998GRnTVSGaeDFGAQ2gwG3GXMD+/pTv4auwls1gihRGjg+XoRW\nMXpsFyRQSOkmvwPyIc07X8pVfa1ojc2t2faOq9s2onWOsPlCQHG4dN9iUfZU6map\nWsJrRMmN88ensemnkOQABsqfIRau7uvjx1Csv9jRdh1X9UXdwUhnqwkfQznE0ky6\nGu62NUx1Tq8FcNMuv/D7A3oyqjNsC7wtTaG2Upw5qaf28leS97CgWI27o88HKKU=\n=Kj9W\n-----END PGP SIGNATURE-----\n", "payload": "tree 66a0c2d7ecc8dacc18d39f42550012c8af923823\nparent c195145f565159c84e61b2f2c6f4ef2bebd5b66f\nparent e85b181638f228b6dd6b0aa10d41552f4de5ea58\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567648788 +0200\ncommitter GitHub <noreply@github.com> 1567648788 +0200\n\nRollup merge of #64128 - Centril:unused-parens-pat, r=davidtwco\n\nunused_parens: account for or-patterns and `&(mut x)`\n\nFixes https://github.com/rust-lang/rust/issues/55342.\nFixes https://github.com/rust-lang/rust/issues/64106.\n\ncc https://github.com/rust-lang/rust/issues/54883\ncc https://github.com/rust-lang/rust/pull/64111\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "html_url": "https://github.com/rust-lang/rust/commit/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c195145f565159c84e61b2f2c6f4ef2bebd5b66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c195145f565159c84e61b2f2c6f4ef2bebd5b66f", "html_url": "https://github.com/rust-lang/rust/commit/c195145f565159c84e61b2f2c6f4ef2bebd5b66f"}, {"sha": "e85b181638f228b6dd6b0aa10d41552f4de5ea58", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85b181638f228b6dd6b0aa10d41552f4de5ea58", "html_url": "https://github.com/rust-lang/rust/commit/e85b181638f228b6dd6b0aa10d41552f4de5ea58"}], "stats": {"total": 320, "additions": 256, "deletions": 64}, "files": [{"sha": "39c0698aeec9fd611e25939ee3aa3d4779d32f30", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "patch": "@@ -398,18 +398,37 @@ impl UnusedParens {\n         }\n     }\n \n-    fn check_unused_parens_pat(&self,\n-                                cx: &EarlyContext<'_>,\n-                                value: &ast::Pat,\n-                                msg: &str) {\n-        if let ast::PatKind::Paren(_) = value.node {\n+    fn check_unused_parens_pat(\n+        &self,\n+        cx: &EarlyContext<'_>,\n+        value: &ast::Pat,\n+        avoid_or: bool,\n+        avoid_mut: bool,\n+    ) {\n+        use ast::{PatKind, BindingMode::ByValue, Mutability::Mutable};\n+\n+        if let PatKind::Paren(inner) = &value.node {\n+            match inner.node {\n+                // The lint visitor will visit each subpattern of `p`. We do not want to lint\n+                // any range pattern no matter where it occurs in the pattern. For something like\n+                // `&(a..=b)`, there is a recursive `check_pat` on `a` and `b`, but we will assume\n+                // that if there are unnecessary parens they serve a purpose of readability.\n+                PatKind::Range(..) => return,\n+                // Avoid `p0 | .. | pn` if we should.\n+                PatKind::Or(..) if avoid_or => return,\n+                // Avoid `mut x` and `mut x @ p` if we should:\n+                PatKind::Ident(ByValue(Mutable), ..) if avoid_mut => return,\n+                // Otherwise proceed with linting.\n+                _ => {}\n+            }\n+\n             let pattern_text = if let Ok(snippet) = cx.sess().source_map()\n                 .span_to_snippet(value.span) {\n                     snippet\n                 } else {\n                     pprust::pat_to_string(value)\n                 };\n-            Self::remove_outer_parens(cx, value.span, &pattern_text, msg, (false, false));\n+            Self::remove_outer_parens(cx, value.span, &pattern_text, \"pattern\", (false, false));\n         }\n     }\n \n@@ -474,6 +493,13 @@ impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n         let (value, msg, followed_by_block, left_pos, right_pos) = match e.node {\n+            Let(ref pats, ..) => {\n+                for p in pats {\n+                    self.check_unused_parens_pat(cx, p, false, false);\n+                }\n+                return;\n+            }\n+\n             If(ref cond, ref block, ..) => {\n                 let left = e.span.lo() + syntax_pos::BytePos(2);\n                 let right = block.span.lo();\n@@ -486,7 +512,8 @@ impl EarlyLintPass for UnusedParens {\n                 (cond, \"`while` condition\", true, Some(left), Some(right))\n             },\n \n-            ForLoop(_, ref cond, ref block, ..) => {\n+            ForLoop(ref pat, ref cond, ref block, ..) => {\n+                self.check_unused_parens_pat(cx, pat, false, false);\n                 (cond, \"`for` head expression\", true, None, Some(block.span.lo()))\n             }\n \n@@ -531,26 +558,46 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n-        use ast::PatKind::{Paren, Range};\n-        // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n-        // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n-        // is a recursive `check_pat` on `a` and `b`, but we will assume that if there are\n-        // unnecessary parens they serve a purpose of readability.\n-        if let Paren(ref pat) = p.node {\n-            match pat.node {\n-                Range(..) => {}\n-                _ => self.check_unused_parens_pat(cx, &p, \"pattern\")\n-            }\n+        use ast::{PatKind::*, Mutability};\n+        match &p.node {\n+            // Do not lint on `(..)` as that will result in the other arms being useless.\n+            Paren(_)\n+            // The other cases do not contain sub-patterns.\n+            | Wild | Rest | Lit(..) | Mac(..) | Range(..) | Ident(.., None) | Path(..) => return,\n+            // These are list-like patterns; parens can always be removed.\n+            TupleStruct(_, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n+                self.check_unused_parens_pat(cx, p, false, false);\n+            },\n+            Struct(_, fps, _) => for f in fps {\n+                self.check_unused_parens_pat(cx, &f.pat, false, false);\n+            },\n+            // Avoid linting on `i @ (p0 | .. | pn)` and `box (p0 | .. | pn)`, #64106.\n+            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false),\n+            // Avoid linting on `&(mut x)` as `&mut x` has a different meaning, #55342.\n+            // Also avoid linting on `& mut? (p0 | .. | pn)`, #64106.\n+            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Immutable),\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n+            self.check_unused_parens_pat(cx, &local.pat, false, false);\n+\n             if let Some(ref value) = local.init {\n                 self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n             }\n         }\n     }\n+\n+    fn check_param(&mut self, cx: &EarlyContext<'_>, param: &ast::Param) {\n+        self.check_unused_parens_pat(cx, &param.pat, true, false);\n+    }\n+\n+    fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n+        for p in &arm.pats {\n+            self.check_unused_parens_pat(cx, p, false, false);\n+        }\n+    }\n }\n \n declare_lint! {"}, {"sha": "c442c39fe010ebf6c0402fb73c14b1837c4217ef", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 70, "deletions": 20, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "patch": "@@ -1,25 +1,75 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+#![feature(box_patterns)]\n+\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete\n \n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(unreachable_patterns)]\n #![allow(unused_variables)]\n-#![warn(unused_parens)]\n+#![deny(unused_parens)]\n+\n+fn lint_on_top_level() {\n+    let (a) = 0; //~ ERROR unnecessary parentheses around pattern\n+    for (a) in 0..1 {} //~ ERROR unnecessary parentheses around pattern\n+    if let (a) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    while let (a) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    fn foo((a): u8) {} //~ ERROR unnecessary parentheses around pattern\n+    let _ = |(a): u8| 0; //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint in these cases (#64106).\n+fn or_patterns_no_lint() {\n+    match Box::new(0) {\n+        box (0 | 1) => {} // Should not lint as `box 0 | 1` binds as `(box 0) | 1`.\n+        _ => {}\n+    }\n+\n+    match 0 {\n+        x @ (0 | 1) => {} // Should not lint as `x @ 0 | 1` binds as `(x @ 0) | 1`.\n+        _ => {}\n+    }\n+\n+    if let &(0 | 1) = &0 {} // Should also not lint.\n+    if let &mut (0 | 1) = &mut 0 {} // Same.\n+\n+    fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+    //~^ ERROR identifier `a` is bound more than once\n+\n+    let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+    //~^ ERROR identifier `a` is bound more than once\n+}\n+\n+fn or_patterns_will_lint() {\n+    if let (0 | 1) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    if let ((0 | 1),) = (0,) {} //~ ERROR unnecessary parentheses around pattern\n+    if let [(0 | 1)] = [0] {} //~ ERROR unnecessary parentheses around pattern\n+    if let 0 | (1 | 2) = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    struct TS(u8);\n+    if let TS((0 | 1)) = TS(0) {} //~ ERROR unnecessary parentheses around pattern\n+    struct NS { f: u8 }\n+    if let NS { f: (0 | 1) } = (NS { f: 0 }) {} //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint on `&(mut x)` because `&mut x` means something else (#55342).\n+fn deref_mut_binding_no_lint() {\n+    let &(mut x) = &0;\n+}\n \n fn main() {\n     match 1 {\n-        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n-        (e @ 1...2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        (1...2) => {}     // Non ambiguous range pattern should not warn\n+        (_) => {} //~ ERROR unnecessary parentheses around pattern\n+        (y) => {} //~ ERROR unnecessary parentheses around pattern\n+        (ref r) => {} //~ ERROR unnecessary parentheses around pattern\n+        (e @ 1...2) => {} //~ ERROR unnecessary parentheses around pattern\n+        (1...2) => {} // Non ambiguous range pattern should not warn\n         e @ (3...4) => {} // Non ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n-        &(1...2) => {}       // Ambiguous range pattern should not warn\n+        (e @ &(1...2)) => {} //~ ERROR unnecessary parentheses around pattern\n+        &(_) => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1...2) => {} // Ambiguous range pattern should not warn\n+        &(1...2) => {} // Ambiguous range pattern should not warn\n     }\n \n     match &1 {\n@@ -28,19 +78,19 @@ fn main() {\n     }\n \n     match 1 {\n-        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n-        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n-        (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        (1..=2) => {}     // Non ambiguous range pattern should not warn\n+        (_) => {} //~ ERROR unnecessary parentheses around pattern\n+        (y) => {} //~ ERROR unnecessary parentheses around pattern\n+        (ref r) => {} //~ ERROR unnecessary parentheses around pattern\n+        (e @ 1..=2) => {} //~ ERROR unnecessary parentheses around pattern\n+        (1..=2) => {} // Non ambiguous range pattern should not warn\n         e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n     }\n \n     match &1 {\n-        (e @ &(1..=2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n-        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n-        e @ &(1..=2) => {}   // Ambiguous range pattern should not warn\n-        &(1..=2) => {}       // Ambiguous range pattern should not warn\n+        (e @ &(1..=2)) => {} //~ ERROR unnecessary parentheses around pattern\n+        &(_) => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1..=2) => {} // Ambiguous range pattern should not warn\n+        &(1..=2) => {} // Ambiguous range pattern should not warn\n     }\n \n     match &1 {"}, {"sha": "a3e0fb938b3c60fef2f21a3526cd664d1b0abbc5", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 122, "deletions": 27, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "patch": "@@ -1,78 +1,173 @@\n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:10:9\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:35:25\n    |\n-LL |         (_) => {}\n+LL |     fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+   |                         ^ used in a pattern more than once\n+\n+error[E0416]: identifier `a` is bound more than once in the same pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:38:27\n+   |\n+LL |     let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+   |                           ^ used in a pattern more than once\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-54538-unused-parens-lint.rs:3:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+   |\n+LL |     let (a) = 0;\n    |         ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:6:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:9:9\n    |\n-LL | #![warn(unused_parens)]\n+LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n+   |\n+LL |     for (a) in 0..1 {}\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:14:12\n+   |\n+LL |     if let (a) = 0 {}\n+   |            ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:15:15\n+   |\n+LL |     while let (a) = 0 {}\n+   |               ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:16:12\n+   |\n+LL |     fn foo((a): u8) {}\n+   |            ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:17:14\n+   |\n+LL |     let _ = |(a): u8| 0;\n+   |              ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:43:12\n+   |\n+LL |     if let (0 | 1) = 0 {}\n+   |            ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:44:13\n+   |\n+LL |     if let ((0 | 1),) = (0,) {}\n+   |             ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:45:13\n+   |\n+LL |     if let [(0 | 1)] = [0] {}\n+   |             ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:46:16\n+   |\n+LL |     if let 0 | (1 | 2) = 0 {}\n+   |                ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:48:15\n+   |\n+LL |     if let TS((0 | 1)) = TS(0) {}\n+   |               ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:50:20\n+   |\n+LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n+   |                    ^^^^^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:60:9\n+   |\n+LL |         (_) => {}\n+   |         ^^^ help: remove these parentheses\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:61:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:62:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:63:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:19:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:20:10\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:70:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:31:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:81:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:32:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:82:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:33:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:83:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:34:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:84:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:40:9\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n-warning: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:41:10\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:91:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n+error: aborting due to 26 previous errors\n+\n+For more information about this error, try `rustc --explain E0416`."}]}