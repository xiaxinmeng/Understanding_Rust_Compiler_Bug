{"sha": "cc2397b2cd654833b3f02a4153819a9be3824860", "node_id": "C_kwDOAAsO6NoAKGNjMjM5N2IyY2Q2NTQ4MzNiM2YwMmE0MTUzODE5YTliZTM4MjQ4NjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T13:11:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T13:11:10Z"}, "message": "Rollup merge of #104511 - dpaoliello:privateglobalworkaround, r=michaelwoerister\n\nMark functions created for `raw-dylib` on x86 with DllImport storage class\n\nFix for #104453\n\n## Issue Details\nOn x86 Windows, LLVM uses 'L' as the prefix for any private global symbols (`PrivateGlobalPrefix`), so when the `raw-dylib` feature creates an undecorated function symbol that begins with an 'L' LLVM misinterprets that as a private global symbol that it created and so fails the compilation at a later stage since such a symbol must have a definition.\n\n## Fix Details\nMark the function we are creating for `raw-dylib` with `DllImport` storage class (this was already being done for MSVC at a later point for `callee::get_fn` but not for GNU (due to \"backwards compatibility\")): this will cause LLVM to prefix the name with `__imp_` and so it won't mistake it for a private global symbol.", "tree": {"sha": "318cddc1d368e560c3f0121023c574419f3589cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318cddc1d368e560c3f0121023c574419f3589cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2397b2cd654833b3f02a4153819a9be3824860", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJje3juCRBK7hj4Ov3rIwAAH9YIAJz5M+iHxgRgZD/xEhsVP0Jh\nryv2wa9u3rONt+lD4X3gzSsI3yw26vkDsmQy8vUd0Sd9u34K9T0OFg2sxLnQsKi6\njmHaq+ZMSwNlR57lZCbV0uvgm+M/OMEPVhEtphXuoDjM3GPt4YbTARZPKQ/9z/5T\nao5SvSEbM065cs9NY3l6ZA9ThzuSTQqc7hsnJE8cAL/Yod6zzZnEEkm551NTE+R5\nZMXylI7oj5UUK0SAMe4r0l+0ohGVQ9DdjVT5hiGs1+sEhPJIuyp1BU1Cpxckf4Xn\nz5kJb9gSS2KS0BxsfFxBXzzL9jmtKVNN7BT8gxAucKj5EJUo6ZGIpN7CmFPcpWg=\n=wT2a\n-----END PGP SIGNATURE-----\n", "payload": "tree 318cddc1d368e560c3f0121023c574419f3589cd\nparent b39e0c23bb6b285754b6b38a731846c69b4c3269\nparent 67e746cc688ec6f02a446c6e17d269ce81c1737b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669036270 +0100\ncommitter GitHub <noreply@github.com> 1669036270 +0100\n\nRollup merge of #104511 - dpaoliello:privateglobalworkaround, r=michaelwoerister\n\nMark functions created for `raw-dylib` on x86 with DllImport storage class\n\nFix for #104453\n\n## Issue Details\nOn x86 Windows, LLVM uses 'L' as the prefix for any private global symbols (`PrivateGlobalPrefix`), so when the `raw-dylib` feature creates an undecorated function symbol that begins with an 'L' LLVM misinterprets that as a private global symbol that it created and so fails the compilation at a later stage since such a symbol must have a definition.\n\n## Fix Details\nMark the function we are creating for `raw-dylib` with `DllImport` storage class (this was already being done for MSVC at a later point for `callee::get_fn` but not for GNU (due to \"backwards compatibility\")): this will cause LLVM to prefix the name with `__imp_` and so it won't mistake it for a private global symbol.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2397b2cd654833b3f02a4153819a9be3824860", "html_url": "https://github.com/rust-lang/rust/commit/cc2397b2cd654833b3f02a4153819a9be3824860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2397b2cd654833b3f02a4153819a9be3824860/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39e0c23bb6b285754b6b38a731846c69b4c3269", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39e0c23bb6b285754b6b38a731846c69b4c3269", "html_url": "https://github.com/rust-lang/rust/commit/b39e0c23bb6b285754b6b38a731846c69b4c3269"}, {"sha": "67e746cc688ec6f02a446c6e17d269ce81c1737b", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e746cc688ec6f02a446c6e17d269ce81c1737b", "html_url": "https://github.com/rust-lang/rust/commit/67e746cc688ec6f02a446c6e17d269ce81c1737b"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "70ff5c9617b7a8c7c3ecdf008467d18eb924fb0d", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc2397b2cd654833b3f02a4153819a9be3824860/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2397b2cd654833b3f02a4153819a9be3824860/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=cc2397b2cd654833b3f02a4153819a9be3824860", "patch": "@@ -83,7 +83,20 @@ pub fn get_fn<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) ->\n         let llfn = if tcx.sess.target.arch == \"x86\" &&\n             let Some(dllimport) = common::get_dllimport(tcx, instance_def_id, sym)\n         {\n-            cx.declare_fn(&common::i686_decorated_name(&dllimport, common::is_mingw_gnu_toolchain(&tcx.sess.target), true), fn_abi)\n+            // Fix for https://github.com/rust-lang/rust/issues/104453\n+            // On x86 Windows, LLVM uses 'L' as the prefix for any private\n+            // global symbols, so when we create an undecorated function symbol\n+            // that begins with an 'L' LLVM misinterprets that as a private\n+            // global symbol that it created and so fails the compilation at a\n+            // later stage since such a symbol must have a definition.\n+            //\n+            // To avoid this, we set the Storage Class to \"DllImport\" so that\n+            // LLVM will prefix the name with `__imp_`. Ideally, we'd like the\n+            // existing logic below to set the Storage Class, but it has an\n+            // exemption for MinGW for backwards compatability.\n+            let llfn = cx.declare_fn(&common::i686_decorated_name(&dllimport, common::is_mingw_gnu_toolchain(&tcx.sess.target), true), fn_abi);\n+            unsafe { llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport); }\n+            llfn\n         } else {\n             cx.declare_fn(sym, fn_abi)\n         };"}, {"sha": "9a3cd9ebe1b4ba57da084233d33404e1abd829cf", "filename": "src/test/run-make/raw-dylib-import-name-type/driver.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs?ref=cc2397b2cd654833b3f02a4153819a9be3824860", "patch": "@@ -3,6 +3,7 @@\n \n #[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"undecorated\")]\n extern \"C\" {\n+    fn LooksLikeAPrivateGlobal(i: i32);\n     fn cdecl_fn_undecorated(i: i32);\n     #[link_name = \"cdecl_fn_undecorated2\"]\n     fn cdecl_fn_undecorated_renamed(i: i32);\n@@ -84,6 +85,13 @@ extern {\n \n pub fn main() {\n     unsafe {\n+        // Regression test for #104453\n+        // On x86 LLVM uses 'L' as the prefix for private globals (PrivateGlobalPrefix), which\n+        // causes it to believe that undecorated functions starting with 'L' are actually temporary\n+        // symbols that it generated, which causes a later check to fail as the symbols we are\n+        // creating don't have definitions (whereas all temporary symbols do).\n+        LooksLikeAPrivateGlobal(13);\n+\n         cdecl_fn_undecorated(1);\n         cdecl_fn_undecorated_renamed(10);\n         cdecl_fn_noprefix(2);"}, {"sha": "23c1e489e5ea21ac905b4c7a20870c0df2d663f3", "filename": "src/test/run-make/raw-dylib-import-name-type/extern.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.c", "raw_url": "https://github.com/rust-lang/rust/raw/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.c?ref=cc2397b2cd654833b3f02a4153819a9be3824860", "patch": "@@ -1,6 +1,11 @@\n #include <stdio.h>\n #include <stdint.h>\n \n+void _cdecl LooksLikeAPrivateGlobal(int i) {\n+    printf(\"LooksLikeAPrivateGlobal(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n void _cdecl cdecl_fn_undecorated(int i) {\n     printf(\"cdecl_fn_undecorated(%d)\\n\", i);\n     fflush(stdout);"}, {"sha": "498e90e862d4b76dda3678f60b1284c05342dda2", "filename": "src/test/run-make/raw-dylib-import-name-type/extern.gnu.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.gnu.def", "raw_url": "https://github.com/rust-lang/rust/raw/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.gnu.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.gnu.def?ref=cc2397b2cd654833b3f02a4153819a9be3824860", "patch": "@@ -1,5 +1,6 @@\n LIBRARY extern\n EXPORTS\n+    LooksLikeAPrivateGlobal\n     cdecl_fn_undecorated\n     cdecl_fn_undecorated2\n     cdecl_fn_noprefix"}, {"sha": "cddb88bb8b5f03686a6870e955afbe78ed16e54f", "filename": "src/test/run-make/raw-dylib-import-name-type/extern.msvc.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.msvc.def", "raw_url": "https://github.com/rust-lang/rust/raw/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.msvc.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.msvc.def?ref=cc2397b2cd654833b3f02a4153819a9be3824860", "patch": "@@ -1,5 +1,6 @@\n LIBRARY extern\n EXPORTS\n+    LooksLikeAPrivateGlobal\n     cdecl_fn_undecorated\n     cdecl_fn_undecorated2\n     cdecl_fn_noprefix"}, {"sha": "a2a2bfeec7d97f8ff26e45c73b316b5e8d7274cc", "filename": "src/test/run-make/raw-dylib-import-name-type/output.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cc2397b2cd654833b3f02a4153819a9be3824860/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Foutput.txt?ref=cc2397b2cd654833b3f02a4153819a9be3824860", "patch": "@@ -1,3 +1,4 @@\n+LooksLikeAPrivateGlobal(13)\n cdecl_fn_undecorated(1)\n cdecl_fn_undecorated2(10)\n cdecl_fn_noprefix(2)"}]}