{"sha": "0a62a05c6736dce542529cb1eb67fc54c0b70db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNjJhMDVjNjczNmRjZTU0MjUyOWNiMWViNjdmYzU0YzBiNzBkYjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-25T02:04:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-25T02:04:46Z"}, "message": "Merge branch 'syntax' of https://github.com/aochagavia/rust into mulit-decor\n\nConflicts:\n\tsrc/librustc/plugin/registry.rs\n\tsrc/libsyntax/ext/base.rs\n\tsrc/libsyntax/ext/cfg_attr.rs\n\tsrc/libsyntax/ext/deriving/mod.rs\n\tsrc/libsyntax/ext/expand.rs\n\tsrc/libsyntax/print/pprust.rs\n\tsrc/test/auxiliary/macro_crate_test.rs", "tree": {"sha": "5489a37f8b0991af0dce8bb1e6fb70474720d213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5489a37f8b0991af0dce8bb1e6fb70474720d213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a62a05c6736dce542529cb1eb67fc54c0b70db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a62a05c6736dce542529cb1eb67fc54c0b70db4", "html_url": "https://github.com/rust-lang/rust/commit/0a62a05c6736dce542529cb1eb67fc54c0b70db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a62a05c6736dce542529cb1eb67fc54c0b70db4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e53c7f2c8285f3422ac7ac091349ce572c4baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e53c7f2c8285f3422ac7ac091349ce572c4baa", "html_url": "https://github.com/rust-lang/rust/commit/f9e53c7f2c8285f3422ac7ac091349ce572c4baa"}, {"sha": "143f2db3174103e459218958f567985b1f47944b", "url": "https://api.github.com/repos/rust-lang/rust/commits/143f2db3174103e459218958f567985b1f47944b", "html_url": "https://github.com/rust-lang/rust/commit/143f2db3174103e459218958f567985b1f47944b"}], "stats": {"total": 253, "additions": 239, "deletions": 14}, "files": [{"sha": "fccde9a2f178898c0dc97d555b9cca29f9c09d4f", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -14,8 +14,13 @@ use lint::{LintPassObject, LintId, Lint};\n use session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n+<<<<<<< HEAD\n use syntax::ext::base::{IdentTT, Decorator, Modifier, MultiModifier, MacroRulesTT};\n use syntax::ext::base::MacroExpanderFn;\n+=======\n+use syntax::ext::base::{IdentTT, Decorator, MultiDecorator, Modifier, MultiModifier, MacroRulesTT};\n+use syntax::ext::base::{MacroExpanderFn};\n+>>>>>>> 143f2db3174103e459218958f567985b1f47944b\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n@@ -84,6 +89,7 @@ impl<'a> Registry<'a> {\n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n+    #[allow(deprecated)]\n     pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         self.syntax_exts.push((name, match extension {\n             NormalTT(ext, _, allow_internal_unstable) => {\n@@ -93,6 +99,7 @@ impl<'a> Registry<'a> {\n                 IdentTT(ext, Some(self.krate_span), allow_internal_unstable)\n             }\n             Decorator(ext) => Decorator(ext),\n+            MultiDecorator(ext) => MultiDecorator(ext),\n             Modifier(ext) => Modifier(ext),\n             MultiModifier(ext) => MultiModifier(ext),\n             MacroRulesTT => {"}, {"sha": "f84d3ed98c7676cc150a33fbc169d6ede4d194e0", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -30,6 +30,8 @@ use std::collections::HashMap;\n use std::rc::Rc;\n use std::default::Default;\n \n+#[unstable(feature = \"rustc_private\")]\n+#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemDecorator\")]\n pub trait ItemDecorator {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n@@ -39,6 +41,9 @@ pub trait ItemDecorator {\n               push: &mut FnMut(P<ast::Item>));\n }\n \n+#[allow(deprecated)]\n+#[unstable(feature = \"rustc_private\")]\n+#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemDecorator\")]\n impl<F> ItemDecorator for F\n     where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, &mut FnMut(P<ast::Item>))\n {\n@@ -52,6 +57,8 @@ impl<F> ItemDecorator for F\n     }\n }\n \n+#[unstable(feature = \"rustc_private\")]\n+#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemModifier\")]\n pub trait ItemModifier {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n@@ -61,9 +68,13 @@ pub trait ItemModifier {\n               -> P<ast::Item>;\n }\n \n+#[allow(deprecated)]\n+#[unstable(feature = \"rustc_private\")]\n+#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemModifier\")]\n impl<F> ItemModifier for F\n     where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, P<ast::Item>) -> P<ast::Item>\n {\n+\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n@@ -127,6 +138,29 @@ impl Annotatable {\n     }\n }\n \n+// A more flexible ItemDecorator.\n+pub trait MultiItemDecorator {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              sp: Span,\n+              meta_item: &ast::MetaItem,\n+              item: &Annotatable,\n+              push: Box<FnMut(Annotatable)>);\n+}\n+\n+impl<F> MultiItemDecorator for F\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &Annotatable, Box<FnMut(Annotatable)>)\n+{\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              sp: Span,\n+              meta_item: &ast::MetaItem,\n+              item: &Annotatable,\n+              push: Box<FnMut(Annotatable)>) {\n+        (*self)(ecx, sp, meta_item, item, push)\n+    }\n+}\n+\n // A more flexible ItemModifier (ItemModifier should go away, eventually, FIXME).\n // meta_item is the annotation, item is the item being modified, parent_item\n // is the impl or trait item is declared in if item is part of such a thing.\n@@ -397,12 +431,20 @@ impl MacResult for DummyResult {\n pub enum SyntaxExtension {\n     /// A syntax extension that is attached to an item and creates new items\n     /// based upon it.\n-    ///\n-    /// `#[derive(...)]` is an `ItemDecorator`.\n+    #[unstable(feature = \"rustc_private\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"replaced by MultiDecorator\")]\n     Decorator(Box<ItemDecorator + 'static>),\n \n+    /// A syntax extension that is attached to an item and creates new items\n+    /// based upon it.\n+    ///\n+    /// `#[derive(...)]` is a `MultiItemDecorator`.\n+    MultiDecorator(Box<MultiItemDecorator + 'static>),\n+\n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place.\n+    #[unstable(feature = \"rustc_private\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"replaced by MultiModifier\")]\n     Modifier(Box<ItemModifier + 'static>),\n \n     /// A syntax extension that is attached to an item and modifies it\n@@ -473,6 +515,13 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders.insert(intern(\"log_syntax\"),\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n+<<<<<<< HEAD\n+=======\n+    syntax_expanders.insert(intern(\"derive\"),\n+                            MultiDecorator(box ext::deriving::expand_meta_derive));\n+    syntax_expanders.insert(intern(\"deriving\"),\n+                            MultiDecorator(box ext::deriving::expand_deprecated_deriving));\n+>>>>>>> 143f2db3174103e459218958f567985b1f47944b\n \n     ext::deriving::register_all(&mut syntax_expanders);\n \n@@ -537,6 +586,11 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n+<<<<<<< HEAD\n+=======\n+    syntax_expanders.insert(intern(\"cfg_attr\"),\n+                            MultiModifier(box ext::cfg_attr::expand));\n+>>>>>>> 143f2db3174103e459218958f567985b1f47944b\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "586e73ad64554d7c240698183b2dea1a3598cc62", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -13,9 +13,9 @@\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n \n-use ast::{Item, MetaItem, MetaWord};\n+use ast::{Item, MetaItem, MetaWord, MetaList, MetaNameValue};\n use attr::AttrMetaMethods;\n-use ext::base::{ExtCtxt, SyntaxEnv, Decorator, ItemDecorator, Modifier};\n+use ext::base::{ExtCtxt, SyntaxEnv, Decorator, ItemDecorator, Modifier, Annotatable};\n use ext::build::AstBuilder;\n use feature_gate;\n use codemap::Span;\n@@ -78,9 +78,19 @@ pub mod ord;\n pub mod generic;\n \n fn expand_derive(cx: &mut ExtCtxt,\n-                 _: Span,\n+                 span: Span,\n                  mitem: &MetaItem,\n-                 item: P<Item>) -> P<Item> {\n+                 annotatable: &Annotatable)\n+                 -> P<Annotatable> {\n+    // Derive can only be applied to items\n+    let item = match annotatable {\n+        &Annotatable::Item(ref it) => it.clone(),\n+        _ => {\n+            cx.span_err(span, \"`derive` can only be applied to items\");\n+            return;\n+        }\n+    };\n+\n     item.map(|mut item| {\n         if mitem.value_str().is_some() {\n             cx.span_err(mitem.span, \"unexpected value in `derive`\");\n@@ -113,7 +123,7 @@ fn expand_derive(cx: &mut ExtCtxt,\n                 intern_and_get_ident(&format!(\"derive_{}\", tname)))));\n         }\n \n-        item\n+        Annotatable::Item(item)\n     })\n }\n "}, {"sha": "76a4ef2f4ed721e5c8eca0159716961120036c9f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -477,6 +477,7 @@ pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n         .into_iter().map(|i| i.expect_item()).collect()\n }\n \n+#[allow(deprecated)] // This is needed because the `ItemModifier` trait is used\n fn expand_item_modifiers(mut it: P<ast::Item>, fld: &mut MacroExpander)\n                          -> P<ast::Item> {\n     // partition the attributes into ItemModifiers and others\n@@ -1082,6 +1083,7 @@ impl<'a> Folder for PatIdentRenamer<'a> {\n     }\n }\n \n+#[allow(deprecated)] // This is needed because the `Decorator` variant is used\n fn expand_annotatable(a: Annotatable,\n                       fld: &mut MacroExpander)\n                       -> SmallVector<Annotatable> {\n@@ -1120,9 +1122,31 @@ fn expand_annotatable(a: Annotatable,\n                     let mut items: SmallVector<P<ast::Item>> = SmallVector::zero();\n                     dec.expand(fld.cx, attr.span, &*attr.node.value, &**it,\n                                &mut |item| items.push(item));\n-                    decorator_items.extend(\n-                        items.into_iter()\n-                             .flat_map(|item| expand_item(item, fld).into_iter()));\n+                    decorator_items.extend(items.into_iter()\n+                        .flat_map(|item| expand_item(item, fld).into_iter()\n+                                                               .map(|i| Annotatable::Item(i))));\n+\n+                    fld.cx.bt_pop();\n+                }\n+                MultiDecorator(ref dec) => {\n+                    attr::mark_used(attr);\n+\n+                    fld.cx.bt_push(ExpnInfo {\n+                        call_site: attr.span,\n+                        callee: NameAndSpan {\n+                            name: mname.get().to_string(),\n+                            format: MacroAttribute,\n+                            span: None\n+                        }\n+                    });\n+\n+                    // we'd ideally decorator_items.push_all(expand_annotatable(ann, fld)),\n+                    // but that double-mut-borrows fld\n+                    let mut anns: SmallVector<Annotatable> = SmallVector::zero();\n+                    dec.expand(fld.cx, attr.span, &*attr.node.value, &a,\n+                               &mut |ann| anns.push(ann));\n+                    decorator_items.extend(anns.into_iter()\n+                        .flat_map(|ann| expand_annotatable(ann, fld).into_iter()));\n \n                     fld.cx.bt_pop();\n                 }\n@@ -1184,7 +1208,7 @@ fn expand_annotatable(a: Annotatable,\n         }\n     };\n \n-    new_items.push_all(decorator_items.into_iter().map(|i| Annotatable::Item(i)).collect());\n+    new_items.push_all(decorator_items);\n     new_items\n }\n "}, {"sha": "b56ecf7ae80c6a21f28c1dbeb3bc1ad62dddb423", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -814,7 +814,6 @@ impl<'a> State<'a> {\n         word(&mut self.s, \";\")\n     }\n \n-\n     /// Pretty-print an item\n     pub fn print_item(&mut self, item: &ast::Item) -> io::Result<()> {\n         try!(self.hardbreak_if_not_bol());"}, {"sha": "07a18354c611004ab12d697a334125a8c1068382", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -19,8 +19,7 @@ extern crate rustc;\n use syntax::ast::{self, TokenTree, Item, MetaItem};\n use syntax::codemap::Span;\n use syntax::ext::base::*;\n-use syntax::parse::token;\n-use syntax::parse;\n+use syntax::parse::{self, token};\n use syntax::ptr::P;\n use rustc::plugin::Registry;\n \n@@ -42,6 +41,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         token::intern(\"into_multi_foo\"),\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         MultiModifier(Box::new(expand_into_foo_multi)));\n+    reg.register_syntax_extension(\n+        token::intern(\"duplicate\"),\n+        MultiDecorator(box expand_duplicate));\n }\n \n fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n@@ -104,6 +106,83 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n     }\n }\n \n+// Create a duplicate of the annotatable, based on the MetaItem\n+fn expand_duplicate(cx: &mut ExtCtxt,\n+                    sp: Span,\n+                    mi: &MetaItem,\n+                    it: &Annotatable,\n+                    mut push: Box<FnMut(Annotatable)>)\n+{\n+    let copy_name = match mi.node {\n+        ast::MetaItem_::MetaList(_, ref xs) => {\n+            if let ast::MetaItem_::MetaWord(ref w) = xs[0].node {\n+                token::str_to_ident(w.get())\n+            } else {\n+                cx.span_err(mi.span, \"Expected word\");\n+                return;\n+            }\n+        }\n+        _ => {\n+            cx.span_err(mi.span, \"Expected list\");\n+            return;\n+        }\n+    };\n+\n+    // Duplicate the item but replace its ident by the MetaItem\n+    match it.clone() {\n+        Annotatable::Item(it) => {\n+            let mut new_it = (*it).clone();\n+            new_it.attrs.clear();\n+            new_it.ident = copy_name;\n+            push(Annotatable::Item(P(new_it)));\n+        }\n+        Annotatable::ImplItem(it) => {\n+            match it {\n+                ImplItem::MethodImplItem(m) => {\n+                    let mut new_m = (*m).clone();\n+                    new_m.attrs.clear();\n+                    replace_method_name(&mut new_m.node, copy_name);\n+                    push(Annotatable::ImplItem(ImplItem::MethodImplItem(P(new_m))));\n+                }\n+                ImplItem::TypeImplItem(t) => {\n+                    let mut new_t = (*t).clone();\n+                    new_t.attrs.clear();\n+                    new_t.ident = copy_name;\n+                    push(Annotatable::ImplItem(ImplItem::TypeImplItem(P(new_t))));\n+                }\n+            }\n+        }\n+        Annotatable::TraitItem(it) => {\n+            match it {\n+                TraitItem::RequiredMethod(rm) => {\n+                    let mut new_rm = rm.clone();\n+                    new_rm.attrs.clear();\n+                    new_rm.ident = copy_name;\n+                    push(Annotatable::TraitItem(TraitItem::RequiredMethod(new_rm)));\n+                }\n+                TraitItem::ProvidedMethod(pm) => {\n+                    let mut new_pm = (*pm).clone();\n+                    new_pm.attrs.clear();\n+                    replace_method_name(&mut new_pm.node, copy_name);\n+                    push(Annotatable::TraitItem(TraitItem::ProvidedMethod(P(new_pm))));\n+                }\n+                TraitItem::TypeTraitItem(t) => {\n+                    let mut new_t = (*t).clone();\n+                    new_t.attrs.clear();\n+                    new_t.ty_param.ident = copy_name;\n+                    push(Annotatable::TraitItem(TraitItem::TypeTraitItem(P(new_t))));\n+                }\n+            }\n+        }\n+    }\n+\n+    fn replace_method_name(m: &mut ast::Method_, i: ast::Ident) {\n+        if let &mut ast::Method_::MethDecl(ref mut ident, _, _, _, _, _, _, _) = m {\n+            *ident = i\n+        }\n+    }\n+}\n+\n fn expand_forged_ident(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResult+'static> {\n     use syntax::ext::quote::rt::*;\n "}, {"sha": "45341d12d074318c67cdea36bfe3fa244a27b9b3", "filename": "src/test/run-pass-fulldeps/macro-crate-multi-decorator.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62a05c6736dce542529cb1eb67fc54c0b70db4/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator.rs?ref=0a62a05c6736dce542529cb1eb67fc54c0b70db4", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_test.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+\n+#[plugin] #[no_link]\n+extern crate macro_crate_test;\n+\n+// The duplicate macro will create a copy of the item with the given identifier\n+#[duplicate(MyCopy)]\n+struct MyStruct {\n+    number: i32\n+}\n+\n+trait TestTrait {\n+    #[duplicate(TestType2)]\n+    type TestType;\n+\n+    #[duplicate(required_fn2)]\n+    fn required_fn(&self);\n+\n+    #[duplicate(provided_fn2)]\n+    fn provided_fn(&self) { }\n+}\n+\n+impl TestTrait for MyStruct {\n+    #[duplicate(TestType2)]\n+    type TestType = f64;\n+\n+    #[duplicate(required_fn2)]\n+    fn required_fn(&self) { }\n+}\n+\n+fn main() {\n+    let s = MyStruct { number: 42 };\n+    s.required_fn();\n+    s.required_fn2();\n+    s.provided_fn();\n+    s.provided_fn2();\n+\n+    let s = MyCopy { number: 42 };\n+}"}]}