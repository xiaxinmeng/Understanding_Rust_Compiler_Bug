{"sha": "f1ea540e9024db9b5d2e6a6e92431875feb345b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZWE1NDBlOTAyNGRiOWI1ZDJlNmE2ZTkyNDMxODc1ZmViMzQ1YjM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-06T06:11:18Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-06T06:11:18Z"}, "message": "collections: Optimize Vec when cloning from a slice\n\nllvm is currently not able to conver `Vec::extend` into a memcpy\nfor `Copy` types, which results in methods like `Vec::push_all`\nto run twice as slow as it should be running. This patch takes\nthe unsafe `Vec::clone` optimization to speed up all the operations\nthat are cloning a slice into a `Vec`.\n\nbefore:\n\ntest vec::tests::bench_clone_from_0000_0000                ... bench:        12 ns/iter (+/- 2)\ntest vec::tests::bench_clone_from_0000_0010                ... bench:       125 ns/iter (+/- 4) = 80 MB/s\ntest vec::tests::bench_clone_from_0000_0100                ... bench:       360 ns/iter (+/- 33) = 277 MB/s\ntest vec::tests::bench_clone_from_0000_1000                ... bench:      2601 ns/iter (+/- 175) = 384 MB/s\ntest vec::tests::bench_clone_from_0010_0000                ... bench:        12 ns/iter (+/- 2)\ntest vec::tests::bench_clone_from_0010_0010                ... bench:       125 ns/iter (+/- 10) = 80 MB/s\ntest vec::tests::bench_clone_from_0010_0100                ... bench:       361 ns/iter (+/- 28) = 277 MB/s\ntest vec::tests::bench_clone_from_0100_0010                ... bench:       131 ns/iter (+/- 13) = 76 MB/s\ntest vec::tests::bench_clone_from_0100_0100                ... bench:       360 ns/iter (+/- 9) = 277 MB/s\ntest vec::tests::bench_clone_from_0100_1000                ... bench:      2575 ns/iter (+/- 168) = 388 MB/s\ntest vec::tests::bench_clone_from_1000_0100                ... bench:       356 ns/iter (+/- 20) = 280 MB/s\ntest vec::tests::bench_clone_from_1000_1000                ... bench:      2605 ns/iter (+/- 167) = 383 MB/s\ntest vec::tests::bench_from_slice_0000                     ... bench:        11 ns/iter (+/- 0)\ntest vec::tests::bench_from_slice_0010                     ... bench:       115 ns/iter (+/- 5) = 86 MB/s\ntest vec::tests::bench_from_slice_0100                     ... bench:       309 ns/iter (+/- 170) = 323 MB/s\ntest vec::tests::bench_from_slice_1000                     ... bench:      2065 ns/iter (+/- 198) = 484 MB/s\ntest vec::tests::bench_push_all_0000_0000                  ... bench:         7 ns/iter (+/- 0)\ntest vec::tests::bench_push_all_0000_0010                  ... bench:        79 ns/iter (+/- 7) = 126 MB/s\ntest vec::tests::bench_push_all_0000_0100                  ... bench:       342 ns/iter (+/- 18) = 292 MB/s\ntest vec::tests::bench_push_all_0000_1000                  ... bench:      2873 ns/iter (+/- 75) = 348 MB/s\ntest vec::tests::bench_push_all_0010_0010                  ... bench:       154 ns/iter (+/- 8) = 64 MB/s\ntest vec::tests::bench_push_all_0100_0100                  ... bench:       518 ns/iter (+/- 18) = 193 MB/s\ntest vec::tests::bench_push_all_1000_1000                  ... bench:      4490 ns/iter (+/- 223) = 222 MB/s\n\nafter:\n\ntest vec::tests::bench_clone_from_0000_0000                ... bench:        12 ns/iter (+/- 1)\ntest vec::tests::bench_clone_from_0000_0010                ... bench:       123 ns/iter (+/- 5) = 81 MB/s\ntest vec::tests::bench_clone_from_0000_0100                ... bench:       367 ns/iter (+/- 23) = 272 MB/s\ntest vec::tests::bench_clone_from_0000_1000                ... bench:      2618 ns/iter (+/- 252) = 381 MB/s\ntest vec::tests::bench_clone_from_0010_0000                ... bench:        12 ns/iter (+/- 1)\ntest vec::tests::bench_clone_from_0010_0010                ... bench:       124 ns/iter (+/- 7) = 80 MB/s\ntest vec::tests::bench_clone_from_0010_0100                ... bench:       369 ns/iter (+/- 34) = 271 MB/s\ntest vec::tests::bench_clone_from_0100_0010                ... bench:       123 ns/iter (+/- 6) = 81 MB/s\ntest vec::tests::bench_clone_from_0100_0100                ... bench:       371 ns/iter (+/- 25) = 269 MB/s\ntest vec::tests::bench_clone_from_0100_1000                ... bench:      2713 ns/iter (+/- 532) = 368 MB/s\ntest vec::tests::bench_clone_from_1000_0100                ... bench:       369 ns/iter (+/- 14) = 271 MB/s\ntest vec::tests::bench_clone_from_1000_1000                ... bench:      2611 ns/iter (+/- 194) = 382 MB/s\ntest vec::tests::bench_from_slice_0000                     ... bench:         7 ns/iter (+/- 0)\ntest vec::tests::bench_from_slice_0010                     ... bench:       108 ns/iter (+/- 4) = 92 MB/s\ntest vec::tests::bench_from_slice_0100                     ... bench:       235 ns/iter (+/- 24) = 425 MB/s\ntest vec::tests::bench_from_slice_1000                     ... bench:      1318 ns/iter (+/- 96) = 758 MB/s\ntest vec::tests::bench_push_all_0000_0000                  ... bench:         7 ns/iter (+/- 0)\ntest vec::tests::bench_push_all_0000_0010                  ... bench:        70 ns/iter (+/- 4) = 142 MB/s\ntest vec::tests::bench_push_all_0000_0100                  ... bench:       176 ns/iter (+/- 16) = 568 MB/s\ntest vec::tests::bench_push_all_0000_1000                  ... bench:      1125 ns/iter (+/- 94) = 888 MB/s\ntest vec::tests::bench_push_all_0010_0010                  ... bench:       159 ns/iter (+/- 15) = 62 MB/s\ntest vec::tests::bench_push_all_0100_0100                  ... bench:       363 ns/iter (+/- 12) = 275 MB/s\ntest vec::tests::bench_push_all_1000_1000                  ... bench:      2860 ns/iter (+/- 415) = 349 MB/s", "tree": {"sha": "dff154367613725ff1d99dcc6e42a9a9b99f156f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff154367613725ff1d99dcc6e42a9a9b99f156f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ea540e9024db9b5d2e6a6e92431875feb345b3", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea540e9024db9b5d2e6a6e92431875feb345b3", "html_url": "https://github.com/rust-lang/rust/commit/f1ea540e9024db9b5d2e6a6e92431875feb345b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea540e9024db9b5d2e6a6e92431875feb345b3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "065b98d5774954a42733bcc3de382029dcdcf0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/065b98d5774954a42733bcc3de382029dcdcf0cf", "html_url": "https://github.com/rust-lang/rust/commit/065b98d5774954a42733bcc3de382029dcdcf0cf"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "4dd283dbefa0580dae1a43ab6ed87bcaad69f94e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea540e9024db9b5d2e6a6e92431875feb345b3/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea540e9024db9b5d2e6a6e92431875feb345b3/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f1ea540e9024db9b5d2e6a6e92431875feb345b3", "patch": "@@ -197,7 +197,9 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn from_slice(values: &[T]) -> Vec<T> {\n-        values.iter().map(|x| x.clone()).collect()\n+        let mut vector = Vec::with_capacity(values.len());\n+        vector.push_all(values);\n+        vector\n     }\n \n     /// Constructs a `Vec` with copies of a value.\n@@ -238,7 +240,10 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn push_all(&mut self, other: &[T]) {\n-        self.extend(other.iter().map(|e| e.clone()));\n+        unsafe {\n+            self.reserve_additional(other.len());\n+            unsafe_push_all_clone(self, other)\n+        }\n     }\n \n     /// Grows the `Vec` in-place.\n@@ -318,41 +323,31 @@ impl<T: Clone> Vec<T> {\n #[unstable]\n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> {\n-        let len = self.len;\n-        let mut vector = Vec::with_capacity(len);\n-        // Unsafe code so this can be optimised to a memcpy (or something\n-        // similarly fast) when T is Copy. LLVM is easily confused, so any\n-        // extra operations during the loop can prevent this optimisation\n-        {\n-            let this_slice = self.as_slice();\n-            while vector.len < len {\n-                unsafe {\n-                    let len = vector.len;\n-                    ptr::write(\n-                        vector.as_mut_slice().unsafe_mut_ref(len),\n-                        this_slice.unsafe_ref(len).clone());\n-                }\n-                vector.len += 1;\n-            }\n+        unsafe {\n+            let mut vector = Vec::with_capacity(self.len);\n+            unsafe_push_all_clone(&mut vector, self.as_slice());\n+            vector\n         }\n-        vector\n     }\n \n     fn clone_from(&mut self, other: &Vec<T>) {\n-        // drop anything in self that will not be overwritten\n-        if self.len() > other.len() {\n-            self.truncate(other.len())\n-        }\n+        unsafe {\n+            // drop anything in self that will not be overwritten\n+            if self.len() > other.len() {\n+                self.truncate(other.len())\n+            }\n \n-        // reuse the contained values' allocations/resources.\n-        for (place, thing) in self.mut_iter().zip(other.iter()) {\n-            place.clone_from(thing)\n-        }\n+            // reuse the contained values' allocations/resources.\n+            for (place, thing) in self.mut_iter().zip(other.iter()) {\n+                place.clone_from(thing)\n+            }\n \n-        // self.len <= other.len due to the truncate above, so the\n-        // slice here is always in-bounds.\n-        let len = self.len();\n-        self.extend(other.slice_from(len).iter().map(|x| x.clone()));\n+            // self.len <= other.len due to the truncate above, so the\n+            // slice here is always in-bounds.\n+            let slice = other.slice_from(self.len());\n+            self.reserve_additional(slice.len());\n+            unsafe_push_all_clone(self, slice)\n+        }\n     }\n }\n \n@@ -1555,6 +1550,24 @@ pub mod raw {\n     }\n }\n \n+// Unsafe code so this can be optimised to a memcpy (or something similarly\n+// fast) when T is Copy. LLVM is easily confused, so any extra operations\n+// during the loop can prevent this optimisation.\n+//\n+// WARNING: You must preallocate space on the vector before you call this\n+// method.\n+#[inline(always)]\n+unsafe fn unsafe_push_all_clone<T: Clone>(dst: &mut Vec<T>, src: &[T]) {\n+    let mut dst_len = dst.len();\n+\n+    for i in range(0, src.len()) {\n+        ptr::write(\n+            dst.as_mut_slice().unsafe_mut_ref(dst_len),\n+            src.unsafe_ref(i).clone());\n+        dst_len += 1;\n+        dst.set_len(dst_len);\n+    }\n+}\n \n #[cfg(test)]\n mod tests {"}]}