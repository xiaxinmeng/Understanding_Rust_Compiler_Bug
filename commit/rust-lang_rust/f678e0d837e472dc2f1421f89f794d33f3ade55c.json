{"sha": "f678e0d837e472dc2f1421f89f794d33f3ade55c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzhlMGQ4MzdlNDcyZGMyZjE0MjFmODlmNzk0ZDMzZjNhZGU1NWM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-28T13:30:19Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:13:14Z"}, "message": "Add HighlightTag::Operator, use it for unsafe deref. Move unsafe validation to its own file", "tree": {"sha": "0b8501bce63bc5b340f67fe770dbbcb41ecee2e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8501bce63bc5b340f67fe770dbbcb41ecee2e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f678e0d837e472dc2f1421f89f794d33f3ade55c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f678e0d837e472dc2f1421f89f794d33f3ade55c", "html_url": "https://github.com/rust-lang/rust/commit/f678e0d837e472dc2f1421f89f794d33f3ade55c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f678e0d837e472dc2f1421f89f794d33f3ade55c/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1682396c9894da07af74b43c2443e9bde89be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1682396c9894da07af74b43c2443e9bde89be4", "html_url": "https://github.com/rust-lang/rust/commit/6c1682396c9894da07af74b43c2443e9bde89be4"}], "stats": {"total": 139, "additions": 81, "deletions": 58}, "files": [{"sha": "9e3b4a2d819cdb514edd33ef3c579f50c8ed08ec", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -25,9 +25,11 @@ use hir_expand::{\n use hir_ty::{\n     autoderef,\n     display::{HirDisplayError, HirFormatter},\n-    expr::{ExprValidator, UnsafeValidator},\n-    method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs,\n-    TraitEnvironment, Ty, TyDefId, TypeCtor,\n+    expr::ExprValidator,\n+    method_resolution,\n+    method_resolution, ApplicationTy, Canonical, InEnvironment, Substs, TraitEnvironment, Ty,\n+    TyDefId, TypeCtor,\n+    unsafe_validation::UnsafeValidator,\n };\n use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;"}, {"sha": "99eed949fd211fe5c191bea1153d6c7c7b5944ed", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -9,9 +9,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n-    diagnostics::{\n-        MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields, MissingUnsafe,\n-    },\n+    diagnostics::{MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields},\n     lower::CallableDef,\n     utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n@@ -317,8 +315,8 @@ pub fn record_pattern_missing_fields(\n }\n \n pub struct UnsafeExpr {\n-    expr: ExprId,\n-    inside_unsafe_block: bool,\n+    pub expr: ExprId,\n+    pub inside_unsafe_block: bool,\n }\n \n impl UnsafeExpr {\n@@ -383,43 +381,3 @@ pub fn unsafe_expressions(\n \n     unsafe_exprs\n }\n-\n-pub struct UnsafeValidator<'a, 'b: 'a> {\n-    func: FunctionId,\n-    infer: Arc<InferenceResult>,\n-    sink: &'a mut DiagnosticSink<'b>,\n-}\n-\n-impl<'a, 'b> UnsafeValidator<'a, 'b> {\n-    pub fn new(\n-        func: FunctionId,\n-        infer: Arc<InferenceResult>,\n-        sink: &'a mut DiagnosticSink<'b>,\n-    ) -> UnsafeValidator<'a, 'b> {\n-        UnsafeValidator { func, infer, sink }\n-    }\n-\n-    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let def = self.func.into();\n-        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n-        let func_data = db.function_data(self.func);\n-        if func_data.is_unsafe\n-            || unsafe_expressions\n-                .iter()\n-                .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)\n-                .count()\n-                == 0\n-        {\n-            return;\n-        }\n-\n-        let (_, body_source) = db.body_with_source_map(def);\n-        for unsafe_expr in unsafe_expressions {\n-            if !unsafe_expr.inside_unsafe_block {\n-                if let Ok(in_file) = body_source.as_ref().expr_syntax(unsafe_expr.expr) {\n-                    self.sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "41415813934c90b7753b5d754d50a5245eca8044", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -37,6 +37,7 @@ pub(crate) mod utils;\n pub mod db;\n pub mod diagnostics;\n pub mod expr;\n+pub mod unsafe_validation;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "9c2c6959ddc9d36b5328f56d9f678588a42d3b50", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -12,9 +12,8 @@ use rustc_hash::FxHashSet;\n use stdx::format_to;\n \n use crate::{\n-    db::HirDatabase,\n-    diagnostics::Diagnostic,\n-    expr::{ExprValidator, UnsafeValidator},\n+    db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator,\n+    unsafe_validation::UnsafeValidator,\n };\n \n #[salsa::database("}, {"sha": "55dbe23fa4594958ab775df5d72ffb03b713f801", "filename": "crates/ra_hir_ty/src/unsafe_validation.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -0,0 +1,63 @@\n+//! Provides validations for unsafe code. Currently checks if unsafe functions are missing\n+//! unsafe blocks.\n+\n+use std::sync::Arc;\n+\n+use hir_def::FunctionId;\n+use hir_expand::diagnostics::DiagnosticSink;\n+\n+use crate::{\n+    db::HirDatabase, diagnostics::MissingUnsafe, expr::unsafe_expressions, InferenceResult,\n+};\n+\n+pub use hir_def::{\n+    body::{\n+        scope::{ExprScopes, ScopeEntry, ScopeId},\n+        Body, BodySourceMap, ExprPtr, ExprSource, PatPtr, PatSource,\n+    },\n+    expr::{\n+        ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n+        MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement, UnaryOp,\n+    },\n+    LocalFieldId, VariantId,\n+};\n+\n+pub struct UnsafeValidator<'a, 'b: 'a> {\n+    func: FunctionId,\n+    infer: Arc<InferenceResult>,\n+    sink: &'a mut DiagnosticSink<'b>,\n+}\n+\n+impl<'a, 'b> UnsafeValidator<'a, 'b> {\n+    pub fn new(\n+        func: FunctionId,\n+        infer: Arc<InferenceResult>,\n+        sink: &'a mut DiagnosticSink<'b>,\n+    ) -> UnsafeValidator<'a, 'b> {\n+        UnsafeValidator { func, infer, sink }\n+    }\n+\n+    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n+        let def = self.func.into();\n+        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n+        let func_data = db.function_data(self.func);\n+        if func_data.is_unsafe\n+            || unsafe_expressions\n+                .iter()\n+                .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)\n+                .count()\n+                == 0\n+        {\n+            return;\n+        }\n+\n+        let (_, body_source) = db.body_with_source_map(def);\n+        for unsafe_expr in unsafe_expressions {\n+            if !unsafe_expr.inside_unsafe_block {\n+                if let Ok(in_file) = body_source.as_ref().expr_syntax(unsafe_expr.expr) {\n+                    self.sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "3ac6c4ae57b7da51ba767973ae3f56ab09723e2f", "filename": "crates/ra_ide/src/snapshots/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -12,7 +12,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n+.function.unsafe    { color: #E28C14; }\n .operator.unsafe    { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }"}, {"sha": "8556eb8504453e9eb3c35a75c03b26205c0587fa", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -12,7 +12,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n+.function.unsafe    { color: #E28C14; }\n .operator.unsafe    { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }"}, {"sha": "692307280d73a49c3fce183f160f1db91c38844f", "filename": "crates/ra_ide/src/snapshots/highlight_unsafe.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -12,7 +12,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n+.function.unsafe    { color: #E28C14; }\n .operator.unsafe    { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n@@ -47,7 +47,7 @@\n     <span class=\"keyword unsafe\">unsafe</span> {\n         <span class=\"function unsafe\">unsafe_fn</span>();\n         <span class=\"struct\">HasUnsafeFn</span>.<span class=\"function unsafe\">unsafe_method</span>();\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> = <span class=\"operator unsafe\">*</span>(<span class=\"variable\">x</span>);\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> = <span class=\"function unsafe\">*</span><span class=\"variable\">x</span>;\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = -<span class=\"variable\">x</span>;\n     }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "47403b367ebc46e1f6d5e45e4acb13aa512a56cd", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -12,7 +12,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n+.function.unsafe    { color: #E28C14; }\n .operator.unsafe    { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }"}, {"sha": "f5fb96f55231777b3858f41376d094a88d654443", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -12,7 +12,7 @@\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n+.function.unsafe    { color: #E28C14; }\n .operator.unsafe    { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }"}, {"sha": "ed007c382f35eacafd54d98cc54208330e00054a", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f678e0d837e472dc2f1421f89f794d33f3ade55c/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=f678e0d837e472dc2f1421f89f794d33f3ade55c", "patch": "@@ -71,7 +71,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n+.function.unsafe    { color: #E28C14; }\n .operator.unsafe    { color: #BC8383; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }"}]}