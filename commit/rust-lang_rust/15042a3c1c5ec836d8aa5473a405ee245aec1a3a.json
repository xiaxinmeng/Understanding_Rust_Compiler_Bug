{"sha": "15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MDQyYTNjMWM1ZWM4MzZkOGFhNTQ3M2E0MDVlZTI0NWFlYzFhM2E=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-29T14:30:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-06T13:59:08Z"}, "message": "`#[rustc_doc_only_macro]` -> `#[rustc_builtin_macro]`", "tree": {"sha": "d03383c978b11f78f740141715347861f9dcf465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03383c978b11f78f740141715347861f9dcf465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "html_url": "https://github.com/rust-lang/rust/commit/15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254f2014954bd66da206232490824975c0c662f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/254f2014954bd66da206232490824975c0c662f1", "html_url": "https://github.com/rust-lang/rust/commit/254f2014954bd66da206232490824975c0c662f1"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "f9be8008982762a2d2ebd25924b0f6c900613e74", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "patch": "@@ -653,7 +653,7 @@ mod builtin {\n     ///\n     /// [`std::compile_error!`]: ../std/macro.compile_error.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -665,7 +665,7 @@ mod builtin {\n     ///\n     /// [`std::format_args!`]: ../std/macro.format_args.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -677,7 +677,7 @@ mod builtin {\n     ///\n     /// [`std::env!`]: ../std/macro.env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -689,7 +689,7 @@ mod builtin {\n     ///\n     /// [`std::option_env!`]: ../std/macro.option_env.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -701,7 +701,7 @@ mod builtin {\n     ///\n     /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -713,7 +713,7 @@ mod builtin {\n     ///\n     /// [`std::concat!`]: ../std/macro.concat.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -725,7 +725,7 @@ mod builtin {\n     ///\n     /// [`std::line!`]: ../std/macro.line.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// Expands to the column number on which it was invoked.\n@@ -734,7 +734,7 @@ mod builtin {\n     ///\n     /// [`std::column!`]: ../std/macro.column.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// Expands to the file name from which it was invoked.\n@@ -743,7 +743,7 @@ mod builtin {\n     ///\n     /// [`std::file!`]: ../std/macro.file.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// Stringifies its arguments.\n@@ -752,7 +752,7 @@ mod builtin {\n     ///\n     /// [`std::stringify!`]: ../std/macro.stringify.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -761,7 +761,7 @@ mod builtin {\n     ///\n     /// [`std::include_str!`]: ../std/macro.include_str.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -773,7 +773,7 @@ mod builtin {\n     ///\n     /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -785,7 +785,7 @@ mod builtin {\n     ///\n     /// [`std::module_path!`]: ../std/macro.module_path.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Evaluates boolean combinations of configuration flags, at compile-time.\n@@ -794,7 +794,7 @@ mod builtin {\n     ///\n     /// [`std::cfg!`]: ../std/macro.cfg.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parses a file as an expression or an item according to the context.\n@@ -803,7 +803,7 @@ mod builtin {\n     ///\n     /// [`std::include!`]: ../std/macro.include.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -814,7 +814,7 @@ mod builtin {\n     /// For more information, see the documentation for [`std::assert!`].\n     ///\n     /// [`std::assert!`]: ../std/macro.assert.html\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });"}, {"sha": "271fac544a4d253892889203e3c37e4a9cb04443", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "patch": "@@ -4010,7 +4010,7 @@ impl<'a> LoweringContext<'a> {\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) ||\n-                              attr::contains_name(&i.attrs, sym::rustc_doc_only_macro) {\n+                              attr::contains_name(&i.attrs, sym::rustc_builtin_macro) {\n                 let body = self.lower_token_stream(def.stream());\n                 let hir_id = self.lower_node_id(i.id);\n                 self.exported_macros.push(hir::MacroDef {"}, {"sha": "6a8c46eaa40fbb091e78fd50ec0469c923157823", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "patch": "@@ -1142,7 +1142,7 @@ impl<'a> Resolver<'a> {\n                 self.define(module, ident, MacroNS,\n                             (res, vis, item.span, expansion, IsMacroExport));\n             } else {\n-                if !attr::contains_name(&item.attrs, sym::rustc_doc_only_macro) {\n+                if !attr::contains_name(&item.attrs, sym::rustc_builtin_macro) {\n                     self.check_reserved_macro_name(ident, MacroNS);\n                 }\n                 self.unused_macros.insert(def_id);"}, {"sha": "b3e09d6974229d7108bdd0af4b4678f0f282154b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "patch": "@@ -410,7 +410,7 @@ mod builtin {\n     ///\n     /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! compile_error {\n         ($msg:expr) => ({ /* compiler built-in */ });\n         ($msg:expr,) => ({ /* compiler built-in */ });\n@@ -462,7 +462,7 @@ mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n@@ -500,7 +500,7 @@ mod builtin {\n     /// error: what's that?!\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -526,7 +526,7 @@ mod builtin {\n     /// println!(\"the secret key might be: {:?}\", key);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! option_env {\n         ($name:expr) => ({ /* compiler built-in */ });\n         ($name:expr,) => ({ /* compiler built-in */ });\n@@ -557,7 +557,7 @@ mod builtin {\n     /// # }\n     /// ```\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! concat_idents {\n         ($($e:ident),+) => ({ /* compiler built-in */ });\n         ($($e:ident,)+) => ({ /* compiler built-in */ });\n@@ -579,7 +579,7 @@ mod builtin {\n     /// assert_eq!(s, \"test10btrue\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! concat {\n         ($($e:expr),*) => ({ /* compiler built-in */ });\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n@@ -607,7 +607,7 @@ mod builtin {\n     /// println!(\"defined on line: {}\", current_line);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n     /// Expands to the column number at which it was invoked.\n@@ -632,7 +632,7 @@ mod builtin {\n     /// println!(\"defined on column: {}\", current_col);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n     /// Expands to the file name in which it was invoked.\n@@ -656,7 +656,7 @@ mod builtin {\n     /// println!(\"defined in file: {}\", this_file);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n     /// Stringifies its arguments.\n@@ -675,7 +675,7 @@ mod builtin {\n     /// assert_eq!(one_plus_one, \"1 + 1\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! stringify { ($($t:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Includes a utf8-encoded file as a string.\n@@ -709,7 +709,7 @@ mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! include_str {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -746,7 +746,7 @@ mod builtin {\n     ///\n     /// Compiling 'main.rs' and running the resulting binary will print \"adi\u00f3s\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! include_bytes {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -770,7 +770,7 @@ mod builtin {\n     /// test::foo();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n     /// Evaluates boolean combinations of configuration flags at compile-time.\n@@ -794,7 +794,7 @@ mod builtin {\n     /// };\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n     /// Parses a file as an expression or an item according to the context.\n@@ -837,7 +837,7 @@ mod builtin {\n     /// Compiling 'main.rs' and running the resulting binary will print\n     /// \"\ud83d\ude48\ud83d\ude4a\ud83d\ude49\ud83d\ude48\ud83d\ude4a\ud83d\ude49\".\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! include {\n         ($file:expr) => ({ /* compiler built-in */ });\n         ($file:expr,) => ({ /* compiler built-in */ });\n@@ -889,7 +889,7 @@ mod builtin {\n     /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_doc_only_macro]\n+    #[rustc_builtin_macro]\n     macro_rules! assert {\n         ($cond:expr) => ({ /* compiler built-in */ });\n         ($cond:expr,) => ({ /* compiler built-in */ });"}, {"sha": "6dc46ba2c7e6d3ea2c37bab8ed42ae5367fbbc65", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "patch": "@@ -1374,7 +1374,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n-    (sym::rustc_doc_only_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (sym::rustc_builtin_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                 sym::rustc_attrs,\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),"}, {"sha": "60622740b74a10e5bfb86b33664ce09cfd44179a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15042a3c1c5ec836d8aa5473a405ee245aec1a3a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=15042a3c1c5ec836d8aa5473a405ee245aec1a3a", "patch": "@@ -537,6 +537,7 @@ symbols! {\n         rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n         rustc_attrs,\n+        rustc_builtin_macro,\n         rustc_clean,\n         rustc_const_unstable,\n         rustc_conversion_suggestion,\n@@ -545,7 +546,6 @@ symbols! {\n         rustc_deprecated,\n         rustc_diagnostic_macros,\n         rustc_dirty,\n-        rustc_doc_only_macro,\n         rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,"}]}