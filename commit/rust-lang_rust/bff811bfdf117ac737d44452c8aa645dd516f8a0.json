{"sha": "bff811bfdf117ac737d44452c8aa645dd516f8a0", "node_id": "C_kwDOAAsO6NoAKGJmZjgxMWJmZGYxMTdhYzczN2Q0NDQ1MmM4YWE2NDVkZDUxNmY4YTA", "commit": {"author": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2022-10-02T10:41:13Z"}, "committer": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2022-10-02T15:02:13Z"}, "message": "extract common codes\n\nSigned-off-by: TennyZhuang <zty0826@gmail.com>", "tree": {"sha": "8570d909b968313f74a29ceedb22a762a41c1a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8570d909b968313f74a29ceedb22a762a41c1a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff811bfdf117ac737d44452c8aa645dd516f8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff811bfdf117ac737d44452c8aa645dd516f8a0", "html_url": "https://github.com/rust-lang/rust/commit/bff811bfdf117ac737d44452c8aa645dd516f8a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff811bfdf117ac737d44452c8aa645dd516f8a0/comments", "author": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2043989ca5fc829de1bed045460366a030e8904", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2043989ca5fc829de1bed045460366a030e8904", "html_url": "https://github.com/rust-lang/rust/commit/f2043989ca5fc829de1bed045460366a030e8904"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "610e8f712f497252fd3c4f358e389ea8302efb98", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bff811bfdf117ac737d44452c8aa645dd516f8a0/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff811bfdf117ac737d44452c8aa645dd516f8a0/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=bff811bfdf117ac737d44452c8aa645dd516f8a0", "patch": "@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n     let cast_str = snippet_opt(cx, cast_expr.span).unwrap_or_default();\n \n     if let Some(lit) = get_numeric_literal(cast_expr) {\n-        let literal_str = cast_str;\n+        let literal_str = &cast_str;\n \n         if_chain! {\n             if let LitKind::Int(n, _) = lit.node;\n@@ -52,10 +52,12 @@ pub(super) fn check<'tcx>(\n \n         match lit.node {\n             LitKind::Int(_, LitIntType::Unsuffixed) if cast_to.is_integral() => {\n-                lint_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n+                lint_unnecessary_cast(cx, expr, literal_str, cast_from, cast_to);\n+                return true;\n             },\n             LitKind::Float(_, LitFloatType::Unsuffixed) if cast_to.is_floating_point() => {\n-                lint_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n+                lint_unnecessary_cast(cx, expr, literal_str, cast_from, cast_to);\n+                return true;\n             },\n             LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n             LitKind::Int(_, LitIntType::Signed(_) | LitIntType::Unsigned(_))\n@@ -65,25 +67,15 @@ pub(super) fn check<'tcx>(\n                 if let Some(src) = snippet_opt(cx, cast_expr.span) {\n                     if let Some(num_lit) = NumericLiteral::from_lit_kind(&src, &lit.node) {\n                         lint_unnecessary_cast(cx, expr, num_lit.integer, cast_from, cast_to);\n+                        return true;\n                     }\n                 }\n             },\n-            _ => {\n-                if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        UNNECESSARY_CAST,\n-                        expr.span,\n-                        &format!(\"casting to the same type is unnecessary (`{cast_from}` -> `{cast_to}`)\"),\n-                        \"try\",\n-                        literal_str,\n-                        Applicability::MachineApplicable,\n-                    );\n-                    return true;\n-                }\n-            },\n+            _ => {},\n         }\n-    } else if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n+    }\n+\n+    if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n         span_lint_and_sugg(\n             cx,\n             UNNECESSARY_CAST,"}]}