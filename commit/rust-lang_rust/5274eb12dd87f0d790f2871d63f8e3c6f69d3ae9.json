{"sha": "5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNzRlYjEyZGQ4N2YwZDc5MGYyODcxZDYzZjhlM2M2ZjY5ZDNhZTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-16T17:54:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-16T17:54:47Z"}, "message": "Merge #8539\n\n8539:  fix: Do not propose inherent traits in flyimports and import assists r=flodiebold a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/8520\r\n\r\nI've went with a separate method approach, since the [highlighted code](https://github.com/rust-analyzer/rust-analyzer/issues/8520#issuecomment-819856337) has not`Type` and uses `Ty` to get his data, but the code I had to change has no access to `Ty` and has `Type` only.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "f62948559c4dc1b9901c03f535d43d360a70d3ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f62948559c4dc1b9901c03f535d43d360a70d3ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgec9nCRBK7hj4Ov3rIwAAU/YIADnHj79g8ScS8kakowu9kir8\n7HIxJWr9b1jMGFxJOCPqVeyMt0expoK5bPsFxBNJuNW3FtJcB39xpMIhJw0jn9pk\nRz5YdSmbLla7K76yRlUsGHOrgU2TfY7pJtR5Tv2mO2ekNXNIdqcD+Ylq2TM5gB5z\nz3cJrf9xDCfIq+JCjVkpEI63hYswCSjv03+BbO9Oc42HuZUikW9IDsRKj1rZumS8\ndO7VK3kd0W4KhwiA43IQpkuskn0EFgs0s8NoA2q6sVjxAHQwkVqeuHPFxuDgGKqD\nT9VLasrF34qs7JEemBztadN1WWO6NBPWak0dWNRccgPGA6E9+o1/OvUDpcmDXeY=\n=h5Cy\n-----END PGP SIGNATURE-----\n", "payload": "tree f62948559c4dc1b9901c03f535d43d360a70d3ad\nparent 47b40b6603ad8b9f76a46fda41d6c65d3acd9f9b\nparent 739edfd5cf6d1f5ac1ec6dbc28fc7943b3936e24\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618595687 +0000\ncommitter GitHub <noreply@github.com> 1618595687 +0000\n\nMerge #8539\n\n8539:  fix: Do not propose inherent traits in flyimports and import assists r=flodiebold a=SomeoneToIgnore\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/8520\r\n\r\nI've went with a separate method approach, since the [highlighted code](https://github.com/rust-analyzer/rust-analyzer/issues/8520#issuecomment-819856337) has not`Type` and uses `Ty` to get his data, but the code I had to change has no access to `Ty` and has `Type` only.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "html_url": "https://github.com/rust-lang/rust/commit/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b40b6603ad8b9f76a46fda41d6c65d3acd9f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b40b6603ad8b9f76a46fda41d6c65d3acd9f9b", "html_url": "https://github.com/rust-lang/rust/commit/47b40b6603ad8b9f76a46fda41d6c65d3acd9f9b"}, {"sha": "739edfd5cf6d1f5ac1ec6dbc28fc7943b3936e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/739edfd5cf6d1f5ac1ec6dbc28fc7943b3936e24", "html_url": "https://github.com/rust-lang/rust/commit/739edfd5cf6d1f5ac1ec6dbc28fc7943b3936e24"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "0acfa582a0bc6ead1edcb939c250b7368e54e139", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "patch": "@@ -2066,6 +2066,18 @@ impl Type {\n         self.ty.dyn_trait().map(Into::into)\n     }\n \n+    /// If a type can be represented as `dyn Trait`, returns all traits accessible via this type,\n+    /// or an empty iterator otherwise.\n+    pub fn applicable_inherent_traits<'a>(\n+        &'a self,\n+        db: &'a dyn HirDatabase,\n+    ) -> impl Iterator<Item = Trait> + 'a {\n+        self.autoderef(db)\n+            .filter_map(|derefed_type| derefed_type.ty.dyn_trait())\n+            .flat_map(move |dyn_trait_id| hir_ty::all_super_traits(db.upcast(), dyn_trait_id))\n+            .map(Trait::from)\n+    }\n+\n     pub fn as_impl_traits(&self, db: &dyn HirDatabase) -> Option<Vec<Trait>> {\n         self.ty.impl_trait_bounds(db).map(|it| {\n             it.into_iter()"}, {"sha": "0505fa4aeaf730942e45d2e37ed9cf1de1a8eb73", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "patch": "@@ -56,6 +56,7 @@ pub use mapping::{\n     to_foreign_def_id, to_placeholder_idx,\n };\n pub use traits::TraitEnvironment;\n+pub use utils::all_super_traits;\n pub use walk::TypeWalk;\n \n pub use chalk_ir::{"}, {"sha": "2f04ee57ae0cffd8bad99a357cab3a50ab47152d", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "patch": "@@ -78,7 +78,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n \n /// Returns an iterator over the whole super trait hierarchy (including the\n /// trait itself).\n-pub(super) fn all_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n+pub fn all_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     // we need to take care a bit here to avoid infinite loops in case of cycles\n     // (i.e. if we have `trait A: B; trait B: A;`)\n     let mut result = vec![trait_];"}, {"sha": "8e211ae1ed41e25758fe5f7f971b90b86809282f", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "patch": "@@ -1127,4 +1127,27 @@ impl Bar for Foo {\n             expect![[r#\"\"#]],\n         );\n     }\n+\n+    #[test]\n+    fn no_inherent_candidates_proposed() {\n+        check(\n+            r#\"\n+mod baz {\n+    pub trait DefDatabase {\n+        fn method1(&self);\n+    }\n+    pub trait HirDatabase: DefDatabase {\n+        fn method2(&self);\n+    }\n+}\n+\n+mod bar {\n+    fn test(db: &dyn crate::baz::HirDatabase) {\n+        db.metho$0\n+    }\n+}\n+            \"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n }"}, {"sha": "91d6a466510b12dc8e9fd24acf02a08941f88c3b", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "patch": "@@ -436,6 +436,8 @@ fn trait_applicable_items(\n     })\n     .collect();\n \n+    let related_dyn_traits =\n+        trait_candidate.receiver_ty.applicable_inherent_traits(db).collect::<FxHashSet<_>>();\n     let mut located_imports = FxHashSet::default();\n \n     if trait_assoc_item {\n@@ -451,12 +453,16 @@ fn trait_applicable_items(\n                             return None;\n                         }\n                     }\n+                    let located_trait = assoc.containing_trait(db)?;\n+                    if related_dyn_traits.contains(&located_trait) {\n+                        return None;\n+                    }\n \n-                    let item = ItemInNs::from(ModuleDef::from(assoc.containing_trait(db)?));\n+                    let trait_item = ItemInNs::from(ModuleDef::from(located_trait));\n                     let original_item = assoc_to_item(assoc);\n                     located_imports.insert(LocatedImport::new(\n-                        mod_path(item)?,\n-                        item,\n+                        mod_path(trait_item)?,\n+                        trait_item,\n                         original_item,\n                         mod_path(original_item),\n                     ));\n@@ -473,11 +479,15 @@ fn trait_applicable_items(\n             |_, function| {\n                 let assoc = function.as_assoc_item(db)?;\n                 if required_assoc_items.contains(&assoc) {\n-                    let item = ItemInNs::from(ModuleDef::from(assoc.containing_trait(db)?));\n+                    let located_trait = assoc.containing_trait(db)?;\n+                    if related_dyn_traits.contains(&located_trait) {\n+                        return None;\n+                    }\n+                    let trait_item = ItemInNs::from(ModuleDef::from(located_trait));\n                     let original_item = assoc_to_item(assoc);\n                     located_imports.insert(LocatedImport::new(\n-                        mod_path(item)?,\n-                        item,\n+                        mod_path(trait_item)?,\n+                        trait_item,\n                         original_item,\n                         mod_path(original_item),\n                     ));"}]}