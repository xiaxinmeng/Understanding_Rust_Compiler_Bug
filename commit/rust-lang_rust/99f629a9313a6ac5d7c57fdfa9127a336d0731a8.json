{"sha": "99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZjYyOWE5MzEzYTZhYzVkN2M1N2ZkZmE5MTI3YTMzNmQwNzMxYTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-05-08T20:36:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-05-10T14:42:26Z"}, "message": "rustc: Add a new `-Z force-unstable-if-unmarked` flag\n\nThis commit adds a new `-Z` flag to the compiler for use when bootstrapping the\ncompiler itself. We want to be able to use crates.io crates, but we also want\nthe usage of such crates to be as ergonomic as possible! To that end compiler\ncrates are a little tricky in that the crates.io crates are not annotated as\nunstable, nor do they expect to pull in unstable dependencies.\n\nTo cover all these situations it's intended that the compiler will forever now\nbootstrap with `-Z force-unstable-if-unmarked`. This flags serves a dual purpose\nof forcing crates.io crates to themselves be unstable while also allowing them\nto use other \"unstable\" crates.io crates. This should mean that adding a\ndependency to compiler no longer requires upstream modification with\nunstable/staged_api attributes for inclusion!", "tree": {"sha": "5341e98c98943759a2cbdbf891d929e89e101431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5341e98c98943759a2cbdbf891d929e89e101431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "html_url": "https://github.com/rust-lang/rust/commit/99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a161765fb90f2bfc78bda8fef944048e72bd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a161765fb90f2bfc78bda8fef944048e72bd26", "html_url": "https://github.com/rust-lang/rust/commit/25a161765fb90f2bfc78bda8fef944048e72bd26"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "53e684e34bde1408e602531dbe464312f01107f2", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -239,7 +239,6 @@ pub trait CrateStore {\n     fn export_macros(&self, cnum: CrateNum);\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n-    fn is_staged_api(&self, cnum: CrateNum) -> bool;\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n@@ -368,7 +367,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"lang_items\") }\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>\n         { bug!(\"missing_lang_items\") }\n-    fn is_staged_api(&self, cnum: CrateNum) -> bool { bug!(\"is_staged_api\") }\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }"}, {"sha": "d74877e355a7946c0d1bed885a397e2ce9b68908", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 58, "deletions": 23, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -13,12 +13,12 @@\n \n pub use self::StabilityLevel::*;\n \n-use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, DefIndex, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n+use session::Session;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::ast;\n@@ -123,7 +123,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                    item_sp: Span, kind: AnnotationKind, visit_children: F)\n         where F: FnOnce(&mut Self)\n     {\n-        if self.index.staged_api[&LOCAL_CRATE] && self.tcx.sess.features.borrow().staged_api {\n+        if self.index.staged_api[&LOCAL_CRATE] {\n             debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n             if let Some(..) = attr::find_deprecation(self.tcx.sess.diagnostic(), attrs, item_sp) {\n                 self.tcx.sess.span_err(item_sp, \"`#[deprecated]` cannot be used in staged api, \\\n@@ -390,20 +390,36 @@ impl<'a, 'tcx> Index<'tcx> {\n             parent_depr: None,\n             in_trait_impl: false,\n         };\n+\n+        // If the `-Z force-unstable-if-unmarked` flag is passed then we provide\n+        // a parent stability annotation which indicates that this is private\n+        // with the `rustc_private` feature. This is intended for use when\n+        // compiling librustc crates themselves so we can leverage crates.io\n+        // while maintaining the invariant that all sysroot crates are unstable\n+        // by default and are unable to be used.\n+        if tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+            let reason = \"this crate is being loaded from the sysroot, and \\\n+                          unstable location; did you mean to load this crate \\\n+                          from crates.io via `Cargo.toml` instead?\";\n+            let stability = tcx.intern_stability(Stability {\n+                level: attr::StabilityLevel::Unstable {\n+                    reason: Some(Symbol::intern(reason)),\n+                    issue: 27812,\n+                },\n+                feature: Symbol::intern(\"rustc_private\"),\n+                rustc_depr: None,\n+            });\n+            annotator.parent_stab = Some(stability);\n+        }\n+\n         annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnotationKind::Required,\n                            |v| intravisit::walk_crate(v, krate));\n     }\n \n-    pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> {\n-        let krate = hir_map.krate();\n-\n-        let mut is_staged_api = false;\n-        for attr in &krate.attrs {\n-            if attr.path == \"stable\" || attr.path == \"unstable\" {\n-                is_staged_api = true;\n-                break\n-            }\n-        }\n+    pub fn new(sess: &Session) -> Index<'tcx> {\n+        let is_staged_api =\n+            sess.opts.debugging_opts.force_unstable_if_unmarked ||\n+            sess.features.borrow().staged_api;\n \n         let mut staged_api = FxHashMap();\n         staged_api.insert(LOCAL_CRATE, is_staged_api);\n@@ -496,8 +512,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let is_staged_api = *self.stability.borrow_mut().staged_api.entry(def_id.krate)\n-            .or_insert_with(|| self.sess.cstore.is_staged_api(def_id.krate));\n+        let is_staged_api = self.lookup_stability(DefId {\n+            index: CRATE_DEF_INDEX,\n+            ..def_id\n+        }).is_some();\n         if !is_staged_api {\n             return;\n         }\n@@ -530,15 +548,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         match stability {\n             Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n-                if !self.stability.borrow().active_features.contains(feature) {\n-                    let msg = match *reason {\n-                        Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                               feature.as_str(), &r),\n-                        None => format!(\"use of unstable library feature '{}'\", &feature)\n-                    };\n-                    emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n-                                     GateIssue::Library(Some(issue)), &msg);\n+                if self.stability.borrow().active_features.contains(feature) {\n+                    return\n                 }\n+\n+                // When we're compiling the compiler itself we may pull in\n+                // crates from crates.io, but those crates may depend on other\n+                // crates also pulled in from crates.io. We want to ideally be\n+                // able to compile everything without requiring upstream\n+                // modifications, so in the case that this looks like a\n+                // rustc_private crate (e.g. a compiler crate) and we also have\n+                // the `-Z force-unstable-if-unmarked` flag present (we're\n+                // compiling a compiler crate), then let this missing feature\n+                // annotation slide.\n+                if *feature == \"rustc_private\" && issue == 27812 {\n+                    if self.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+                        return\n+                    }\n+                }\n+\n+                let msg = match *reason {\n+                    Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n+                                           feature.as_str(), &r),\n+                    None => format!(\"use of unstable library feature '{}'\", &feature)\n+                };\n+                emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n+                                 GateIssue::Library(Some(issue)), &msg);\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -658,7 +693,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n-    if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n+    if tcx.stability.borrow().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir.krate();\n         let mut missing = MissingStabilityAnnotations {\n             tcx: tcx,"}, {"sha": "884a71f0d32d4b24c983cb9049ca4ba819a9f26d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -1027,6 +1027,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"add a source pattern to the file path remapping config\"),\n     remap_path_prefix_to: Vec<String> = (vec![], parse_string_push, [TRACKED],\n         \"add a mapping target to the file path remapping config\"),\n+    force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n+        \"force all crates to be `rustc_private` unstable\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "8fddbe110b0e6f4616fb584ede2e9afc71b383cb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -882,7 +882,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n               \"static item recursion checking\",\n               || static_recursion::check_crate(sess, &hir_map))?;\n \n-    let index = stability::Index::new(&hir_map);\n+    let index = stability::Index::new(&sess);\n \n     let mut local_providers = ty::maps::Providers::default();\n     borrowck::provide(&mut local_providers);"}, {"sha": "3b4f2560fc555f214969d4df13db2c7189120867", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -138,7 +138,7 @@ fn test_env<F>(source_string: &str,\n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &hir_map);\n     let named_region_map = resolve_lifetime::krate(&sess, &hir_map);\n-    let index = stability::Index::new(&hir_map);\n+    let index = stability::Index::new(&sess);\n     TyCtxt::create_and_enter(&sess,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),"}, {"sha": "c12b4209675dee9847304591dc66ea6c503834b3", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -269,15 +269,6 @@ impl CrateMetadata {\n         self.root.disambiguator\n     }\n \n-    pub fn is_staged_api(&self, dep_graph: &DepGraph) -> bool {\n-        for attr in self.get_item_attrs(CRATE_DEF_INDEX, dep_graph).iter() {\n-            if attr.path == \"stable\" || attr.path == \"unstable\" {\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-\n     pub fn is_allocator(&self, dep_graph: &DepGraph) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX, dep_graph);\n         attr::contains_name(&attrs, \"allocator\")"}, {"sha": "c7da535faa2946a3ab232ea82b7f59cbb087c615", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f629a9313a6ac5d7c57fdfa9127a336d0731a8/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=99f629a9313a6ac5d7c57fdfa9127a336d0731a8", "patch": "@@ -267,11 +267,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).get_missing_lang_items(&self.dep_graph)\n     }\n \n-    fn is_staged_api(&self, cnum: CrateNum) -> bool\n-    {\n-        self.get_crate_data(cnum).is_staged_api(&self.dep_graph)\n-    }\n-\n     fn is_allocator(&self, cnum: CrateNum) -> bool\n     {\n         self.get_crate_data(cnum).is_allocator(&self.dep_graph)"}]}