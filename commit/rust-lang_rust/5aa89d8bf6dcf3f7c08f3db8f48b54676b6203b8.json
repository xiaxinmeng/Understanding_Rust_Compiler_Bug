{"sha": "5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTg5ZDhiZjZkY2YzZjdjMDhmM2RiOGY0OGI1NDY3NmI2MjAzYjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-09T05:54:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-19T01:31:55Z"}, "message": "Remove the Option and bool impls for carrier and add a dummy impl\n\nThe dummy impl should ensure the same type checking behaviour as having other (real) Carrier impls.", "tree": {"sha": "de13f67c98667e88f593e818068288a70c2b8a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de13f67c98667e88f593e818068288a70c2b8a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "html_url": "https://github.com/rust-lang/rust/commit/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "683bcc02955f988ab2726f1b7708baa6c1e64b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/683bcc02955f988ab2726f1b7708baa6c1e64b7b", "html_url": "https://github.com/rust-lang/rust/commit/683bcc02955f988ab2726f1b7708baa6c1e64b7b"}], "stats": {"total": 111, "additions": 34, "deletions": 77}, "files": [{"sha": "0e32d71172b04fa9f40a2ad08867cce9bf436c0a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 7, "deletions": 60, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "patch": "@@ -76,7 +76,6 @@ use cmp::PartialOrd;\n use fmt;\n use marker::{Sized, Unsize};\n use result::Result::{self, Ok, Err};\n-use option::Option::{self, Some, None};\n \n /// The `Drop` trait is used to run some code when a value goes out of scope.\n /// This is sometimes called a 'destructor'.\n@@ -2203,75 +2202,23 @@ impl<U, V> Carrier for Result<U, V> {\n     }\n }\n \n-#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n-impl<U> Carrier for Option<U> {\n-    type Success = U;\n-    type Error = ();\n-\n-    fn from_success(u: U) -> Option<U> {\n-        Some(u)\n-    }\n+struct _DummyErrorType;\n \n-    fn from_error(_: ()) -> Option<U> {\n-        None\n-    }\n-\n-    fn translate<T>(self) -> T\n-        where T: Carrier<Success=U, Error=()>\n-    {\n-        match self {\n-            Some(u) => T::from_success(u),\n-            None => T::from_error(()),\n-        }\n-    }\n-}\n-\n-// Implementing Carrier for bools means it's easy to write short-circuiting\n-// functions. E.g.,\n-// ```\n-// fn foo() -> bool {\n-//     if !(f() || g()) {\n-//         return false;\n-//     }\n-//\n-//     some_computation();\n-//     if h() {\n-//         return false;\n-//     }\n-//\n-//     more_computation();\n-//     i()\n-// }\n-// ```\n-// becomes\n-// ```\n-// fn foo() -> bool {\n-//     (f() || g())?;\n-//     some_computation();\n-//     (!h())?;\n-//     more_computation();\n-//     i()\n-// }\n-// ```\n-#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n-impl Carrier for bool {\n+impl Carrier for _DummyErrorType {\n     type Success = ();\n     type Error = ();\n \n-    fn from_success(_: ()) -> bool {\n-        true\n+    fn from_success(_: ()) -> _DummyErrorType {\n+        _DummyErrorType\n     }\n \n-    fn from_error(_: ()) -> bool {\n-        false\n+    fn from_error(_: ()) -> _DummyErrorType {\n+        _DummyErrorType\n     }\n \n     fn translate<T>(self) -> T\n         where T: Carrier<Success=(), Error=()>\n     {\n-        match self {\n-            true => T::from_success(()),\n-            false => T::from_error(()),\n-        }\n+        T::from_success(())\n     }\n }"}, {"sha": "e15c9af41e0821c7de7329db350959fd00a12a64", "filename": "src/test/compile-fail/question-mark-type-infer.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/src%2Ftest%2Fcompile-fail%2Fquestion-mark-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/src%2Ftest%2Fcompile-fail%2Fquestion-mark-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fquestion-mark-type-infer.rs?ref=5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(question_mark, question_mark_carrier)]\n+\n+// Test that type inference fails where there are multiple possible return types\n+// for the `?` operator.\n+\n+fn f(x: &i32) -> Result<i32, ()> {\n+    Ok(*x)\n+}\n+\n+fn g() -> Result<Vec<i32>, ()> {\n+    let l = [1, 2, 3, 4];\n+    l.iter().map(f).collect()? //~ ERROR type annotations required: cannot resolve\n+}\n+\n+fn main() {\n+    g();\n+}"}, {"sha": "de5ccf09c5923d4ca67331f08f3afc52537c2438", "filename": "src/test/run-pass/try-operator.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/src%2Ftest%2Frun-pass%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8/src%2Ftest%2Frun-pass%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-operator.rs?ref=5aa89d8bf6dcf3f7c08f3db8f48b54676b6203b8", "patch": "@@ -144,23 +144,6 @@ fn merge_error() -> Result<i32, Error> {\n     Ok(s.parse::<i32>()? + 1)\n }\n \n-fn option() -> Option<i32> {\n-    let x = Some(42);\n-    let y = x?;\n-    Some(y + 2)\n-}\n-\n-fn bool() -> bool {\n-    let x = true;\n-    let y = false;\n-    let z = true;\n-\n-    (x || y)?;\n-    let a: () = z?;\n-    x?;\n-    true\n-}\n-\n fn main() {\n     assert_eq!(Ok(3), on_method());\n "}]}