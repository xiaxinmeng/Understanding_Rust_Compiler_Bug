{"sha": "41d1340505d37058349ba016c9dc8c3d52f49bf3", "node_id": "C_kwDOAAsO6NoAKDQxZDEzNDA1MDVkMzcwNTgzNDliYTAxNmM5ZGM4YzNkNTJmNDliZjM", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-26T07:27:43Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:02Z"}, "message": "errors: implement fallback diagnostic translation\n\nThis commit updates the signatures of all diagnostic functions to accept\ntypes that can be converted into a `DiagnosticMessage`. This enables\nexisting diagnostic calls to continue to work as before and Fluent\nidentifiers to be provided. The `SessionDiagnostic` derive just\ngenerates normal diagnostic calls, so these APIs had to be modified to\naccept Fluent identifiers.\n\nIn addition, loading of the \"fallback\" Fluent bundle, which contains the\nbuilt-in English messages, has been implemented.\n\nEach diagnostic now has \"arguments\" which correspond to variables in the\nFluent messages (necessary to render a Fluent message) but no API for\nadding arguments has been added yet. Therefore, diagnostics (that do not\nrequire interpolation) can be converted to use Fluent identifiers and\nwill be output as before.", "tree": {"sha": "5a4fa9f19ad1eb43960990aa78d0c9c6a982aee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4fa9f19ad1eb43960990aa78d0c9c6a982aee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41d1340505d37058349ba016c9dc8c3d52f49bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41d1340505d37058349ba016c9dc8c3d52f49bf3", "html_url": "https://github.com/rust-lang/rust/commit/41d1340505d37058349ba016c9dc8c3d52f49bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41d1340505d37058349ba016c9dc8c3d52f49bf3/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b9e85b207b29043e19c7718137224c9ce70200", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b9e85b207b29043e19c7718137224c9ce70200", "html_url": "https://github.com/rust-lang/rust/commit/c8b9e85b207b29043e19c7718137224c9ce70200"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "cc354b50afa39faa68159d1d16ae8027ff8f5658", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=41d1340505d37058349ba016c9dc8c3d52f49bf3", "patch": "@@ -130,8 +130,8 @@ fn check_arm<'tcx>(\n                 &msg,\n                 |diag| {\n                     let mut help_span = MultiSpan::from_spans(vec![binding_span, inner_then_pat.span]);\n-                    help_span.push_span_label(binding_span, \"replace this binding\".into());\n-                    help_span.push_span_label(inner_then_pat.span, \"with this pattern\".into());\n+                    help_span.push_span_label(binding_span, \"replace this binding\");\n+                    help_span.push_span_label(inner_then_pat.span, \"with this pattern\");\n                     diag.span_help(help_span, \"the outer pattern can be modified to include the inner pattern\");\n                 },\n             );"}, {"sha": "b836363b31b556c85b48af114b0d69c8778723f3", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=41d1340505d37058349ba016c9dc8c3d52f49bf3", "patch": "@@ -621,7 +621,17 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let emitter = EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n+                let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n+                let emitter = EmitterWriter::new(\n+                    Box::new(io::sink()),\n+                    None,\n+                    fallback_bundle,\n+                    false,\n+                    false,\n+                    false,\n+                    None,\n+                    false,\n+                );\n                 let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);\n "}, {"sha": "ddaffc751880db30251f01d8c246af8c9d8568d6", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=41d1340505d37058349ba016c9dc8c3d52f49bf3", "patch": "@@ -102,7 +102,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n \n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let mut span = MultiSpan::from_span(method_name.ident.span);\n-                    span.push_span_label(iter_call.span, \"the iterator could be used here instead\".into());\n+                    span.push_span_label(iter_call.span, \"the iterator could be used here instead\");\n                     span_lint_hir_and_then(\n                         cx,\n                         super::NEEDLESS_COLLECT,"}, {"sha": "06209bfe7b08ada6cb6dc2f349d6cbe95decab2a", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=41d1340505d37058349ba016c9dc8c3d52f49bf3", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n-                cx.tcx.sess.span_err(span, &err);\n+                cx.tcx.sess.span_err(span, err.as_ref());\n             }\n         } else {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");"}, {"sha": "d29d07da7b0ffdcc8aa85a28443b6d8f1623357f", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d1340505d37058349ba016c9dc8c3d52f49bf3/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=41d1340505d37058349ba016c9dc8c3d52f49bf3", "patch": "@@ -235,11 +235,12 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                 for (span, suggestion) in clone_spans {\n                                     diag.span_suggestion(\n                                         span,\n-                                        &snippet_opt(cx, span)\n+                                        snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x)),\n-                                            ),\n+                                            )\n+                                            .as_ref(),\n                                         suggestion.into(),\n                                         Applicability::Unspecified,\n                                     );\n@@ -264,11 +265,12 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                 for (span, suggestion) in clone_spans {\n                                     diag.span_suggestion(\n                                         span,\n-                                        &snippet_opt(cx, span)\n+                                        snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x))\n-                                            ),\n+                                            )\n+                                            .as_ref(),\n                                         suggestion.into(),\n                                         Applicability::Unspecified,\n                                     );"}, {"sha": "bfce787af5ea826d37896a20806d3f9861b5ce5d", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41d1340505d37058349ba016c9dc8c3d52f49bf3/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d1340505d37058349ba016c9dc8c3d52f49bf3/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=41d1340505d37058349ba016c9dc8c3d52f49bf3", "patch": "@@ -165,9 +165,11 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,\n+        fallback_bundle,\n         false,\n         false,\n         None,\n@@ -191,7 +193,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     ];\n \n     for note in &xs {\n-        handler.note_without_error(note);\n+        handler.note_without_error(note.as_ref());\n     }\n \n     // If backtraces are enabled, also print the query stack"}]}