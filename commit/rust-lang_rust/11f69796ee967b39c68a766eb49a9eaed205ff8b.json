{"sha": "11f69796ee967b39c68a766eb49a9eaed205ff8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjY5Nzk2ZWU5NjdiMzljNjhhNzY2ZWI0OWE5ZWFlZDIwNWZmOGI=", "commit": {"author": {"name": "Surya Midatala", "email": "surya.midatala@nutanix.com", "date": "2020-08-16T14:13:42Z"}, "committer": {"name": "Surya Midatala", "email": "surya.midatala@nutanix.com", "date": "2020-08-18T16:17:23Z"}, "message": "Move to intra-doc links for task.rs and vec.rs", "tree": {"sha": "6563fa772b49242cfe4705cc0ba9f9efdb642027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6563fa772b49242cfe4705cc0ba9f9efdb642027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f69796ee967b39c68a766eb49a9eaed205ff8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f69796ee967b39c68a766eb49a9eaed205ff8b", "html_url": "https://github.com/rust-lang/rust/commit/11f69796ee967b39c68a766eb49a9eaed205ff8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f69796ee967b39c68a766eb49a9eaed205ff8b/comments", "author": {"login": "surya-midatala", "id": 53327806, "node_id": "MDQ6VXNlcjUzMzI3ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/53327806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surya-midatala", "html_url": "https://github.com/surya-midatala", "followers_url": "https://api.github.com/users/surya-midatala/followers", "following_url": "https://api.github.com/users/surya-midatala/following{/other_user}", "gists_url": "https://api.github.com/users/surya-midatala/gists{/gist_id}", "starred_url": "https://api.github.com/users/surya-midatala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surya-midatala/subscriptions", "organizations_url": "https://api.github.com/users/surya-midatala/orgs", "repos_url": "https://api.github.com/users/surya-midatala/repos", "events_url": "https://api.github.com/users/surya-midatala/events{/privacy}", "received_events_url": "https://api.github.com/users/surya-midatala/received_events", "type": "User", "site_admin": false}, "committer": {"login": "surya-midatala", "id": 53327806, "node_id": "MDQ6VXNlcjUzMzI3ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/53327806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surya-midatala", "html_url": "https://github.com/surya-midatala", "followers_url": "https://api.github.com/users/surya-midatala/followers", "following_url": "https://api.github.com/users/surya-midatala/following{/other_user}", "gists_url": "https://api.github.com/users/surya-midatala/gists{/gist_id}", "starred_url": "https://api.github.com/users/surya-midatala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surya-midatala/subscriptions", "organizations_url": "https://api.github.com/users/surya-midatala/orgs", "repos_url": "https://api.github.com/users/surya-midatala/repos", "events_url": "https://api.github.com/users/surya-midatala/events{/privacy}", "received_events_url": "https://api.github.com/users/surya-midatala/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c3dc04ea4071805fbd1b07bd726c1daf03c0384", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3dc04ea4071805fbd1b07bd726c1daf03c0384", "html_url": "https://github.com/rust-lang/rust/commit/2c3dc04ea4071805fbd1b07bd726c1daf03c0384"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "5edc5796056692deb69dfb8a21d7f59770b51e4f", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f69796ee967b39c68a766eb49a9eaed205ff8b/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f69796ee967b39c68a766eb49a9eaed205ff8b/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=11f69796ee967b39c68a766eb49a9eaed205ff8b", "patch": "@@ -13,11 +13,9 @@ use crate::sync::Arc;\n ///\n /// This trait is a memory-safe and ergonomic alternative to constructing a\n /// [`RawWaker`]. It supports the common executor design in which the data used\n-/// to wake up a task is stored in an [`Arc`][arc]. Some executors (especially\n+/// to wake up a task is stored in an [`Arc`]. Some executors (especially\n /// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n-///\n-/// [arc]: ../../std/sync/struct.Arc.html\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n pub trait Wake {\n     /// Wake this task."}, {"sha": "f8e009a973627c17b8a12aa94e8ec1a879065793", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/11f69796ee967b39c68a766eb49a9eaed205ff8b/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f69796ee967b39c68a766eb49a9eaed205ff8b/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=11f69796ee967b39c68a766eb49a9eaed205ff8b", "patch": "@@ -50,12 +50,9 @@\n //! v[1] = v[1] + 5;\n //! ```\n //!\n-//! [`Vec<T>`]: ../../std/vec/struct.Vec.html\n-//! [`new`]: ../../std/vec/struct.Vec.html#method.new\n-//! [`push`]: ../../std/vec/struct.Vec.html#method.push\n-//! [`Index`]: ../../std/ops/trait.Index.html\n-//! [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n-//! [`vec!`]: ../../std/macro.vec.html\n+//! [`Vec<T>`]: Vec\n+//! [`new`]: Vec::new\n+//! [`push`]: Vec::push\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -278,22 +275,18 @@ use crate::raw_vec::RawVec;\n /// `Vec` does not currently guarantee the order in which elements are dropped.\n /// The order has changed in the past and may change again.\n ///\n-/// [`vec!`]: ../../std/macro.vec.html\n /// [`get`]: ../../std/vec/struct.Vec.html#method.get\n /// [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut\n-/// [`Index`]: ../../std/ops/trait.Index.html\n-/// [`String`]: ../../std/string/struct.String.html\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`Vec::with_capacity`]: ../../std/vec/struct.Vec.html#method.with_capacity\n-/// [`Vec::new`]: ../../std/vec/struct.Vec.html#method.new\n-/// [`shrink_to_fit`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit\n-/// [`capacity`]: ../../std/vec/struct.Vec.html#method.capacity\n-/// [`mem::size_of::<T>`]: ../../std/mem/fn.size_of.html\n-/// [`len`]: ../../std/vec/struct.Vec.html#method.len\n-/// [`push`]: ../../std/vec/struct.Vec.html#method.push\n-/// [`insert`]: ../../std/vec/struct.Vec.html#method.insert\n-/// [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve\n-/// [owned slice]: ../../std/boxed/struct.Box.html\n+/// [`String`]: crate::string::String\n+/// [`&str`]: type@str\n+/// [`shrink_to_fit`]: Vec::shrink_to_fit\n+/// [`capacity`]: Vec::capacity\n+/// [`mem::size_of::<T>`]: core::mem::size_of\n+/// [`len`]: Vec::len\n+/// [`push`]: Vec::push\n+/// [`insert`]: Vec::insert\n+/// [`reserve`]: Vec::reserve\n+/// [owned slice]: Box\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T> {\n@@ -430,8 +423,8 @@ impl<T> Vec<T> {\n     /// that nothing else uses the pointer after calling this\n     /// function.\n     ///\n-    /// [`String`]: ../../std/string/struct.String.html\n-    /// [`dealloc`]: ../../alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc\n+    /// [`String`]: crate::string::String\n+    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n     ///\n     /// # Examples\n     ///\n@@ -658,7 +651,7 @@ impl<T> Vec<T> {\n     ///\n     /// Note that this will drop any excess capacity.\n     ///\n-    /// [owned slice]: ../../std/boxed/struct.Box.html\n+    /// [owned slice]: Box\n     ///\n     /// # Examples\n     ///\n@@ -867,7 +860,7 @@ impl<T> Vec<T> {\n     ///\n     /// [`truncate`]: #method.truncate\n     /// [`resize`]: #method.resize\n-    /// [`extend`]: ../../std/iter/trait.Extend.html#tymethod.extend\n+    /// [`extend`]: Extend::extend\n     /// [`clear`]: #method.clear\n     ///\n     /// # Safety\n@@ -1214,8 +1207,6 @@ impl<T> Vec<T> {\n     /// Removes the last element from a vector and returns it, or [`None`] if it\n     /// is empty.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1480,7 +1471,6 @@ impl<T> Vec<T> {\n     /// ```\n     ///\n     /// [`resize`]: #method.resize\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n     #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n     pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n     where\n@@ -1590,8 +1580,6 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n-    /// [`Default`]: ../../std/default/trait.Default.html\n     /// [`resize_with`]: #method.resize_with\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n@@ -1655,9 +1643,7 @@ impl<T: Default> Vec<T> {\n     /// ```\n     ///\n     /// [`resize`]: #method.resize\n-    /// [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default\n-    /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`Default::default()`]: Default::default\n     #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n     #[rustc_deprecated(\n         reason = \"This is moving towards being removed in favor \\\n@@ -2338,7 +2324,6 @@ impl<T> Vec<T> {\n     /// Note that `drain_filter` also lets you mutate every element in the filter closure,\n     /// regardless of whether you choose to keep or remove it.\n     ///\n-    ///\n     /// # Examples\n     ///\n     /// Splitting an array into evens and odds, reusing the original allocation:"}]}