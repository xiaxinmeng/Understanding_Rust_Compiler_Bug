{"sha": "117984b8847eca21a7f2b2d120f85eff9f2d16f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzk4NGI4ODQ3ZWNhMjFhN2YyYjJkMTIwZjg1ZWZmOWYyZDE2Zjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-16T00:03:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-19T19:38:24Z"}, "message": "rustc: Start \"stabilizing\" some flags\n\nThis commit shuffles around some CLI flags of the compiler to some more stable\nlocations with some renamings. The changes made were:\n\n* The `-v` flag has been repurposes as the \"verbose\" flag. The version flag has\n  been renamed to `-V`.\n* The `-h` screen has been split into two parts. Most top-level options (not\n  all) show with `-h`, and the remaining options (generally obscure) can be\n  shown with `--help -v` which is a \"verbose help screen\"\n* The `-V` flag (version flag now) has lost its argument as it is now requested\n  with `rustc -vV` \"verbose version\".\n* The `--emit` option has had its `ir` and `bc` variants renamed to `llvm-ir`\n  and `llvm-bc` to emphasize that they are LLVM's IR/bytecode.\n* The `--emit` option has grown a new variant, `dep-info`, which subsumes the\n  `--dep-info` CLI argument. The `--dep-info` flag is now deprecated.\n* The `--parse-only`, `--no-trans`, and `--no-analysis` flags have\n  moved behind the `-Z` family of flags.\n* The `--debuginfo` and `--opt-level` flags were moved behind the top-level `-C`\n  flag.\n* The `--print-file-name` and `--print-crate-name` flags were moved behind one\n  global `--print` flag which now accepts one of `crate-name`, `file-names`, or\n  `sysroot`. This global `--print` flag is intended to serve as a mechanism for\n  learning various metadata about the compiler itself.\n\nNo warnings are currently enabled to allow tools like Cargo to have time to\nmigrate to the new flags before spraying warnings to all users.", "tree": {"sha": "11a7e7ec0e95dbb3ec8bd333cc512c2214c06d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a7e7ec0e95dbb3ec8bd333cc512c2214c06d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/117984b8847eca21a7f2b2d120f85eff9f2d16f9", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/117984b8847eca21a7f2b2d120f85eff9f2d16f9", "html_url": "https://github.com/rust-lang/rust/commit/117984b8847eca21a7f2b2d120f85eff9f2d16f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/117984b8847eca21a7f2b2d120f85eff9f2d16f9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a48492a82f805aa40d8b6fea290badbab0d1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a48492a82f805aa40d8b6fea290badbab0d1b1", "html_url": "https://github.com/rust-lang/rust/commit/f9a48492a82f805aa40d8b6fea290badbab0d1b1"}], "stats": {"total": 430, "additions": 276, "deletions": 154}, "files": [{"sha": "6bc13d57f3fdc4a5712802ab238b1b06c173ea50", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -1666,7 +1666,7 @@ fn compile_test_and_save_bitcode(config: &Config, props: &TestProps,\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let mut link_args = vec!(\"-L\".to_string(),\n                              aux_dir.as_str().unwrap().to_string());\n-    let llvm_args = vec!(\"--emit=bc,obj\".to_string(),\n+    let llvm_args = vec!(\"--emit=llvm-bc,obj\".to_string(),\n                          \"--crate-type=lib\".to_string());\n     link_args.extend(llvm_args.into_iter());\n     let args = make_compile_args(config,"}, {"sha": "42902b06aee13637bc432039a93bcac16123de6b", "filename": "src/etc/rust-lldb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Fetc%2Frust-lldb", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Fetc%2Frust-lldb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-lldb?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -19,7 +19,7 @@ TMPFILE=`mktemp /tmp/rust-lldb-commands.XXXXXX`\n trap \"rm -f $TMPFILE; exit\" INT TERM EXIT\n \n # Find out where to look for the pretty printer Python module\n-RUSTC_SYSROOT=`rustc -Zprint-sysroot`\n+RUSTC_SYSROOT=`rustc --print sysroot`\n \n # Write the LLDB script to the tempfile\n echo \"command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_rust_formatters.py\\\"\" >> $TMPFILE"}, {"sha": "558f82acfad40ad555e0ad22587492717e2fbaba", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 190, "deletions": 70, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -18,7 +18,7 @@ pub use self::OptLevel::*;\n pub use self::OutputType::*;\n pub use self::DebugInfoLevel::*;\n \n-use session::{early_error, early_warn, Session};\n+use session::{early_error, Session};\n \n use rustc_back::target::Target;\n use lint;\n@@ -73,6 +73,7 @@ pub enum OutputType {\n     OutputTypeLlvmAssembly,\n     OutputTypeObject,\n     OutputTypeExe,\n+    OutputTypeDepInfo,\n }\n \n impl Copy for OutputType {}\n@@ -108,8 +109,7 @@ pub struct Options {\n     pub debugging_opts: u64,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n     pub write_dependency_info: (bool, Option<Path>),\n-    /// Crate id-related things to maybe print. It's (crate_name, crate_file_name).\n-    pub print_metas: (bool, bool),\n+    pub prints: Vec<PrintRequest>,\n     pub cg: CodegenOptions,\n     pub color: ColorConfig,\n     pub externs: HashMap<String, Vec<String>>,\n@@ -120,6 +120,14 @@ pub struct Options {\n     pub alt_std_name: Option<String>\n }\n \n+#[deriving(Clone, PartialEq, Eq)]\n+#[allow(missing_copy_implementations)]\n+pub enum PrintRequest {\n+    FileNames,\n+    Sysroot,\n+    CrateName,\n+}\n+\n pub enum Input {\n     /// Load source from file\n     File(Path),\n@@ -160,6 +168,7 @@ impl OutputFilenames {\n             OutputTypeAssembly => base.with_extension(\"s\"),\n             OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n             OutputTypeObject => base.with_extension(\"o\"),\n+            OutputTypeDepInfo => base.with_extension(\"d\"),\n             OutputTypeExe => base,\n         }\n     }\n@@ -206,7 +215,7 @@ pub fn basic_options() -> Options {\n         no_analysis: false,\n         debugging_opts: 0,\n         write_dependency_info: (false, None),\n-        print_metas: (false, false),\n+        prints: Vec::new(),\n         cg: basic_codegen_options(),\n         color: Auto,\n         externs: HashMap::new(),\n@@ -276,8 +285,10 @@ debugging_opts! {\n         FLOWGRAPH_PRINT_MOVES,\n         FLOWGRAPH_PRINT_ASSIGNS,\n         FLOWGRAPH_PRINT_ALL,\n-        PRINT_SYSROOT,\n-        PRINT_REGION_GRAPH\n+        PRINT_REGION_GRAPH,\n+        PARSE_ONLY,\n+        NO_TRANS,\n+        NO_ANALYSIS\n     ]\n     0\n }\n@@ -322,11 +333,14 @@ pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n                        --pretty flowgraph output\", FLOWGRAPH_PRINT_ASSIGNS),\n      (\"flowgraph-print-all\", \"Include all dataflow analysis data in \\\n                        --pretty flowgraph output\", FLOWGRAPH_PRINT_ALL),\n-     (\"print-sysroot\", \"Print the sysroot as used by this rustc invocation\",\n-      PRINT_SYSROOT),\n      (\"print-region-graph\", \"Prints region inference graph. \\\n                              Use with RUST_REGION_GRAPH=help for more info\",\n-      PRINT_REGION_GRAPH)]\n+      PRINT_REGION_GRAPH),\n+     (\"parse-only\", \"Parse only; do not compile, assemble, or link\", PARSE_ONLY),\n+     (\"no-trans\", \"Run all passes except translation; no output\", NO_TRANS),\n+     (\"no-analysis\", \"Parse and expand the source, but run no analysis and\",\n+      NO_TRANS),\n+    ]\n }\n \n #[deriving(Clone)]\n@@ -380,6 +394,8 @@ macro_rules! cgoptions {\n         pub const parse_uint: Option<&'static str> = Some(\"a number\");\n         pub const parse_passes: Option<&'static str> =\n             Some(\"a space-separated list of passes, or `all`\");\n+        pub const parse_opt_uint: Option<&'static str> =\n+            Some(\"a number\");\n     }\n \n     mod cgsetters {\n@@ -451,6 +467,13 @@ macro_rules! cgoptions {\n             }\n         }\n \n+        fn parse_opt_uint(slot: &mut Option<uint>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { *slot = from_str(s); slot.is_some() }\n+                None => { *slot = None; true }\n+            }\n+        }\n+\n         fn parse_passes(slot: &mut Passes, v: Option<&str>) -> bool {\n             match v {\n                 Some(\"all\") => {\n@@ -520,6 +543,11 @@ cgoptions! {\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_bool,\n         \"disable checks for stack exhaustion (a memory-safety hazard!)\"),\n+    debuginfo: Option<uint> = (None, parse_opt_uint,\n+        \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n+         2 = full debug info with variable and type information\"),\n+    opt_level: Option<uint> = (None, parse_opt_uint,\n+        \"Optimize with possible levels 0-3\"),\n }\n \n pub fn build_codegen_options(matches: &getopts::Matches) -> CodegenOptions\n@@ -635,9 +663,8 @@ pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config {\n     }\n }\n \n-// rustc command line options\n-pub fn optgroups() -> Vec<getopts::OptGroup> {\n-    vec!(\n+pub fn short_optgroups() -> Vec<getopts::OptGroup> {\n+    vec![\n         optflag(\"h\", \"help\", \"Display this message\"),\n         optmulti(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n         optmulti(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n@@ -647,29 +674,68 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n                              assumed.\", \"NAME[:KIND]\"),\n         optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n-                 \"[bin|lib|rlib|dylib|staticlib]\"),\n-        optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler to emit\",\n-                 \"[asm|bc|ir|obj|link]\"),\n+                 \"[bin|lib|rlib|dylib|staticlib|dep-info]\"),\n         optopt(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n                \"NAME\"),\n-        optflag(\"\", \"print-crate-name\", \"Output the crate name and exit\"),\n-        optflag(\"\", \"print-file-name\", \"Output the file(s) that would be written if compilation \\\n-              continued and exit\"),\n-        optflag(\"\", \"crate-file-name\", \"deprecated in favor of --print-file-name\"),\n+        optmulti(\"\", \"emit\", \"Comma separated list of types of output for \\\n+                              the compiler to emit\",\n+                 \"[asm|llvm-bc|llvm-ir|obj|link]\"),\n+        optmulti(\"\", \"print\", \"Comma separated list of compiler information to \\\n+                               print on stdout\",\n+                 \"[crate-name|output-file-names|sysroot]\"),\n         optflag(\"g\",  \"\",  \"Equivalent to --debuginfo=2\"),\n+        optflag(\"O\", \"\", \"Equivalent to --opt-level=2\"),\n+        optopt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n+        optopt(\"\",  \"out-dir\", \"Write output to compiler-chosen filename \\\n+                                in <dir>\", \"DIR\"),\n+        optopt(\"\", \"explain\", \"Provide a detailed explanation of an error \\\n+                               message\", \"OPT\"),\n+        optflag(\"\", \"test\", \"Build a test harness\"),\n+        optopt(\"\", \"target\", \"Target triple cpu-manufacturer-kernel[-os] \\\n+                              to compile for (see chapter 3.4 of \\\n+                              http://www.sourceware.org/autobook/\n+                              for details)\",\n+               \"TRIPLE\"),\n+        optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\"),\n+        optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\"),\n+        optmulti(\"D\", \"deny\", \"Set lint denied\", \"OPT\"),\n+        optmulti(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n+        optmulti(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n+        optflag(\"V\", \"version\", \"Print version info and exit\"),\n+        optflag(\"v\", \"verbose\", \"Use verbose output\"),\n+    ]\n+}\n+\n+// rustc command line options\n+pub fn optgroups() -> Vec<getopts::OptGroup> {\n+    let mut opts = short_optgroups();\n+    opts.push_all(&[\n+        optmulti(\"\", \"extern\", \"Specify where an external rust library is \\\n+                                located\",\n+                 \"NAME=PATH\"),\n+        optopt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+        optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n+        optmulti(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+        optopt(\"\", \"color\", \"Configure coloring of output:\n+            auto   = colorize, if output goes to a tty (default);\n+            always = always colorize output;\n+            never  = never colorize output\", \"auto|always|never\"),\n+\n+        // DEPRECATED\n+        optflag(\"\", \"print-crate-name\", \"Output the crate name and exit\"),\n+        optflag(\"\", \"print-file-name\", \"Output the file(s) that would be \\\n+                                        written if compilation \\\n+                                        continued and exit\"),\n         optopt(\"\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n              0 = no debug info,\n              1 = line-tables only (for stacktraces and breakpoints),\n-             2 = full debug info with variable and type information (same as -g)\", \"LEVEL\"),\n+             2 = full debug info with variable and type information \\\n+                    (same as -g)\", \"LEVEL\"),\n         optflag(\"\", \"no-trans\", \"Run all passes except translation; no output\"),\n-        optflag(\"\", \"no-analysis\",\n-              \"Parse and expand the source, but run no analysis and produce no output\"),\n-        optflag(\"O\", \"\", \"Equivalent to --opt-level=2\"),\n-        optopt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n-        optopt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n-        optopt( \"\",  \"out-dir\", \"Write output to compiler-chosen filename in <dir>\", \"DIR\"),\n-        optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, or link\"),\n-        optopt(\"\", \"explain\", \"Provide a detailed explanation of an error message\", \"OPT\"),\n+        optflag(\"\", \"no-analysis\", \"Parse and expand the source, but run no \\\n+                                    analysis and produce no output\"),\n+        optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, \\\n+                                   or link\"),\n         optflagopt(\"\", \"pretty\",\n                    \"Pretty-print the input instead of compiling;\n                    valid types are: `normal` (un-annotated source),\n@@ -681,25 +747,8 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         optflagopt(\"\", \"dep-info\",\n                  \"Output dependency info to <filename> after compiling, \\\n                   in a format suitable for use by Makefiles\", \"FILENAME\"),\n-        optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n-        optflag(\"\", \"test\", \"Build a test harness\"),\n-        optopt(\"\", \"target\", \"Target triple cpu-manufacturer-kernel[-os]\n-                            to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n-                            for details)\", \"TRIPLE\"),\n-        optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\"),\n-        optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\"),\n-        optmulti(\"D\", \"deny\", \"Set lint denied\", \"OPT\"),\n-        optmulti(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n-        optmulti(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n-        optmulti(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n-        optflagopt(\"v\", \"version\", \"Print version info and exit\", \"verbose\"),\n-        optopt(\"\", \"color\", \"Configure coloring of output:\n-            auto   = colorize, if output goes to a tty (default);\n-            always = always colorize output;\n-            never  = never colorize output\", \"auto|always|never\"),\n-        optmulti(\"\", \"extern\", \"Specify where an external rust library is located\",\n-                 \"NAME=PATH\"),\n-    )\n+    ]);\n+    opts\n }\n \n \n@@ -719,10 +768,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(e.as_slice()));\n \n-    let parse_only = matches.opt_present(\"parse-only\");\n-    let no_trans = matches.opt_present(\"no-trans\");\n-    let no_analysis = matches.opt_present(\"no-analysis\");\n-\n     let mut lint_opts = vec!();\n     let mut describe_lints = false;\n \n@@ -754,6 +799,28 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         debugging_opts |= this_bit;\n     }\n \n+    let parse_only = if matches.opt_present(\"parse-only\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--parse-only is deprecated in favor of -Z parse-only\");\n+        true\n+    } else {\n+        debugging_opts & PARSE_ONLY != 0\n+    };\n+    let no_trans = if matches.opt_present(\"no-trans\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--no-trans is deprecated in favor of -Z no-trans\");\n+        true\n+    } else {\n+        debugging_opts & NO_TRANS != 0\n+    };\n+    let no_analysis = if matches.opt_present(\"no-analysis\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--no-analysis is deprecated in favor of -Z no-analysis\");\n+        true\n+    } else {\n+        debugging_opts & NO_ANALYSIS != 0\n+    };\n+\n     if debugging_opts & DEBUG_LLVM != 0 {\n         unsafe { llvm::LLVMSetDebug(1); }\n     }\n@@ -764,11 +831,12 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         for unparsed_output_type in unparsed_output_types.iter() {\n             for part in unparsed_output_type.split(',') {\n                 let output_type = match part.as_slice() {\n-                    \"asm\"  => OutputTypeAssembly,\n-                    \"ir\"   => OutputTypeLlvmAssembly,\n-                    \"bc\"   => OutputTypeBitcode,\n-                    \"obj\"  => OutputTypeObject,\n+                    \"asm\" => OutputTypeAssembly,\n+                    \"llvm-ir\" => OutputTypeLlvmAssembly,\n+                    \"llvm-bc\" => OutputTypeBitcode,\n+                    \"obj\" => OutputTypeObject,\n                     \"link\" => OutputTypeExe,\n+                    \"dep-info\" => OutputTypeDepInfo,\n                     _ => {\n                         early_error(format!(\"unknown emission type: `{}`\",\n                                             part).as_slice())\n@@ -784,6 +852,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         output_types.push(OutputTypeExe);\n     }\n \n+    let cg = build_codegen_options(matches);\n+\n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| Path::new(m));\n     let target = matches.opt_str(\"target\").unwrap_or(\n         host_triple().to_string());\n@@ -792,8 +862,13 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             if matches.opt_present(\"opt-level\") {\n                 early_error(\"-O and --opt-level both provided\");\n             }\n+            if cg.opt_level.is_some() {\n+                early_error(\"-O and -C opt-level both provided\");\n+            }\n             Default\n         } else if matches.opt_present(\"opt-level\") {\n+            // FIXME(acrichto) uncomment deprecation warning\n+            // early_warn(\"--opt-level=N is deprecated in favor of -C opt-level=N\");\n             match matches.opt_str(\"opt-level\").as_ref().map(|s| s.as_slice()) {\n                 None      |\n                 Some(\"0\") => No,\n@@ -807,16 +882,32 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                 }\n             }\n         } else {\n-            No\n+            match cg.opt_level {\n+                None => No,\n+                Some(0) => No,\n+                Some(1) => Less,\n+                Some(2) => Default,\n+                Some(3) => Aggressive,\n+                Some(arg) => {\n+                    early_error(format!(\"optimization level needs to be \\\n+                                         between 0-3 (instead was `{}`)\",\n+                                        arg).as_slice());\n+                }\n+            }\n         }\n     };\n     let gc = debugging_opts & GC != 0;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if matches.opt_present(\"debuginfo\") {\n             early_error(\"-g and --debuginfo both provided\");\n         }\n+        if cg.debuginfo.is_some() {\n+            early_error(\"-g and -C debuginfo both provided\");\n+        }\n         FullDebugInfo\n     } else if matches.opt_present(\"debuginfo\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--debuginfo=N is deprecated in favor of -C debuginfo=N\");\n         match matches.opt_str(\"debuginfo\").as_ref().map(|s| s.as_slice()) {\n             Some(\"0\") => NoDebugInfo,\n             Some(\"1\") => LimitedDebugInfo,\n@@ -829,7 +920,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n         }\n     } else {\n-        NoDebugInfo\n+        match cg.debuginfo {\n+            None | Some(0) => NoDebugInfo,\n+            Some(1) => LimitedDebugInfo,\n+            Some(2) => FullDebugInfo,\n+            Some(arg) => {\n+                early_error(format!(\"debug info level needs to be between \\\n+                                     0-2 (instead was `{}`)\",\n+                                    arg).as_slice());\n+            }\n+        }\n     };\n \n     let addl_lib_search_paths = matches.opt_strs(\"L\").iter().map(|s| {\n@@ -855,21 +955,41 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n-    let write_dependency_info = (matches.opt_present(\"dep-info\"),\n-                                 matches.opt_str(\"dep-info\")\n-                                        .map(|p| Path::new(p)));\n-\n-    let print_metas = (matches.opt_present(\"print-crate-name\"),\n-                       matches.opt_present(\"print-file-name\") ||\n-                       matches.opt_present(\"crate-file-name\"));\n-    if matches.opt_present(\"crate-file-name\") {\n-        early_warn(\"the --crate-file-name argument has been renamed to \\\n-                    --print-file-name\");\n+    let write_dependency_info = if matches.opt_present(\"dep-info\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--dep-info has been deprecated in favor of --emit\");\n+        (true, matches.opt_str(\"dep-info\").map(|p| Path::new(p)))\n+    } else {\n+        (output_types.contains(&OutputTypeDepInfo), None)\n+    };\n+\n+    let mut prints = matches.opt_strs(\"print\").into_iter().map(|s| {\n+        match s.as_slice() {\n+            \"crate-name\" => PrintRequest::CrateName,\n+            \"file-names\" => PrintRequest::FileNames,\n+            \"sysroot\" => PrintRequest::Sysroot,\n+            req => {\n+                early_error(format!(\"unknown print request `{}`\", req).as_slice())\n+            }\n+        }\n+    }).collect::<Vec<_>>();\n+    if matches.opt_present(\"print-crate-name\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--print-crate-name has been deprecated in favor of \\\n+        //             --print crate-name\");\n+        prints.push(PrintRequest::CrateName);\n+    }\n+    if matches.opt_present(\"print-file-name\") {\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"--print-file-name has been deprecated in favor of \\\n+        //             --print file-names\");\n+        prints.push(PrintRequest::FileNames);\n     }\n-    let cg = build_codegen_options(matches);\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n-        early_warn(\"-C remark will not show source locations without --debuginfo\");\n+        // FIXME(acrichto) uncomment deprecation warning\n+        // early_warn(\"-C remark will not show source locations without \\\n+        //             --debuginfo\");\n     }\n \n     let color = match matches.opt_str(\"color\").as_ref().map(|s| s.as_slice()) {\n@@ -924,7 +1044,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         no_analysis: no_analysis,\n         debugging_opts: debugging_opts,\n         write_dependency_info: write_dependency_info,\n-        print_metas: print_metas,\n+        prints: prints,\n         cg: cg,\n         color: color,\n         externs: externs,"}, {"sha": "3d15f2a62014f8b72468a188c142ac050f90126d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 63, "deletions": 56, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -46,7 +46,7 @@ pub use syntax::diagnostic;\n \n use rustc_trans::back::link;\n use rustc::session::{config, Session, build_session};\n-use rustc::session::config::Input;\n+use rustc::session::config::{Input, PrintRequest};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n@@ -101,6 +101,8 @@ fn run_compiler(args: &[String]) {\n     }\n \n     let sopts = config::build_session_options(&matches);\n+    let odir = matches.opt_str(\"out-dir\").map(|o| Path::new(o));\n+    let ofile = matches.opt_str(\"o\").map(|o| Path::new(o));\n     let (input, input_file_path) = match matches.free.len() {\n         0u => {\n             if sopts.describe_lints {\n@@ -109,13 +111,10 @@ fn run_compiler(args: &[String]) {\n                 describe_lints(&ls, false);\n                 return;\n             }\n-\n             let sess = build_session(sopts, None, descriptions);\n-            if sess.debugging_opt(config::PRINT_SYSROOT) {\n-                println!(\"{}\", sess.sysroot().display());\n+            if print_crate_info(&sess, None, &odir, &ofile) {\n                 return;\n             }\n-\n             early_error(\"no input filename given\");\n         }\n         1u => {\n@@ -133,13 +132,14 @@ fn run_compiler(args: &[String]) {\n \n     let sess = build_session(sopts, input_file_path, descriptions);\n     let cfg = config::build_configuration(&sess);\n-    let odir = matches.opt_str(\"out-dir\").map(|o| Path::new(o));\n-    let ofile = matches.opt_str(\"o\").map(|o| Path::new(o));\n+    if print_crate_info(&sess, Some(&input), &odir, &ofile) {\n+        return\n+    }\n \n     let pretty = matches.opt_default(\"pretty\", \"normal\").map(|a| {\n         pretty::parse_pretty(&sess, a.as_slice())\n     });\n-    match pretty {\n+    match pretty.into_iter().next() {\n         Some((ppm, opt_uii)) => {\n             pretty::pretty_print_input(sess, cfg, &input, ppm, opt_uii, ofile);\n             return;\n@@ -161,10 +161,6 @@ fn run_compiler(args: &[String]) {\n         return;\n     }\n \n-    if print_crate_info(&sess, &input, &odir, &ofile) {\n-        return;\n-    }\n-\n     driver::compile_input(sess, cfg, &input, &odir, &ofile, None);\n }\n \n@@ -185,12 +181,8 @@ pub fn commit_date_str() -> Option<&'static str> {\n \n /// Prints version information and returns None on success or an error\n /// message on panic.\n-pub fn version(binary: &str, matches: &getopts::Matches) -> Option<String> {\n-    let verbose = match matches.opt_str(\"version\").as_ref().map(|s| s.as_slice()) {\n-        None => false,\n-        Some(\"verbose\") => true,\n-        Some(s) => return Some(format!(\"Unrecognized argument: {}\", s))\n-    };\n+pub fn version(binary: &str, matches: &getopts::Matches) {\n+    let verbose = matches.opt_present(\"verbose\");\n \n     println!(\"{} {}\", binary, option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"));\n     if verbose {\n@@ -201,18 +193,27 @@ pub fn version(binary: &str, matches: &getopts::Matches) -> Option<String> {\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n     }\n-    None\n }\n \n-fn usage() {\n+fn usage(verbose: bool) {\n+    let groups = if verbose {\n+        config::optgroups()\n+    } else {\n+        config::short_optgroups()\n+    };\n     let message = format!(\"Usage: rustc [OPTIONS] INPUT\");\n+    let extra_help = if verbose {\n+        \"\"\n+    } else {\n+        \"\\n    --help -v           Print the full set of options rustc accepts\"\n+    };\n     println!(\"{}\\n\\\n Additional help:\n     -C help             Print codegen options\n     -W help             Print 'lint' options and default settings\n-    -Z help             Print internal options for debugging rustc\\n\",\n-              getopts::usage(message.as_slice(),\n-                             config::optgroups().as_slice()));\n+    -Z help             Print internal options for debugging rustc{}\\n\",\n+              getopts::usage(message.as_slice(), groups.as_slice()),\n+              extra_help);\n }\n \n fn describe_lints(lint_store: &lint::LintStore, loaded_plugins: bool) {\n@@ -360,7 +361,7 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n     let _binary = args.remove(0).unwrap();\n \n     if args.is_empty() {\n-        usage();\n+        usage(false);\n         return None;\n     }\n \n@@ -373,7 +374,7 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n         };\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n-        usage();\n+        usage(matches.opt_present(\"verbose\"));\n         return None;\n     }\n \n@@ -397,49 +398,55 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n     }\n \n     if matches.opt_present(\"version\") {\n-        match version(\"rustc\", &matches) {\n-            Some(err) => early_error(err.as_slice()),\n-            None => return None\n-        }\n+        version(\"rustc\", &matches);\n+        return None;\n     }\n \n     Some(matches)\n }\n \n fn print_crate_info(sess: &Session,\n-                    input: &Input,\n+                    input: Option<&Input>,\n                     odir: &Option<Path>,\n                     ofile: &Option<Path>)\n                     -> bool {\n-    let (crate_name, crate_file_name) = sess.opts.print_metas;\n-    // these nasty nested conditions are to avoid doing extra work\n-    if crate_name || crate_file_name {\n-        let attrs = parse_crate_attrs(sess, input);\n-        let t_outputs = driver::build_output_filenames(input,\n-                                                       odir,\n-                                                       ofile,\n-                                                       attrs.as_slice(),\n-                                                       sess);\n-        let id = link::find_crate_name(Some(sess), attrs.as_slice(), input);\n-\n-        if crate_name {\n-            println!(\"{}\", id);\n-        }\n-        if crate_file_name {\n-            let crate_types = driver::collect_crate_types(sess, attrs.as_slice());\n-            let metadata = driver::collect_crate_metadata(sess, attrs.as_slice());\n-            *sess.crate_metadata.borrow_mut() = metadata;\n-            for &style in crate_types.iter() {\n-                let fname = link::filename_for_input(sess, style, id.as_slice(),\n-                                                     &t_outputs.with_extension(\"\"));\n-                println!(\"{}\", fname.filename_display());\n+    if sess.opts.prints.len() == 0 { return false }\n+\n+    let attrs = input.map(|input| parse_crate_attrs(sess, input));\n+    for req in sess.opts.prints.iter() {\n+        match *req {\n+            PrintRequest::Sysroot => println!(\"{}\", sess.sysroot().display()),\n+            PrintRequest::FileNames |\n+            PrintRequest::CrateName => {\n+                let input = match input {\n+                    Some(input) => input,\n+                    None => early_error(\"no input file provided\"),\n+                };\n+                let attrs = attrs.as_ref().unwrap().as_slice();\n+                let t_outputs = driver::build_output_filenames(input,\n+                                                               odir,\n+                                                               ofile,\n+                                                               attrs,\n+                                                               sess);\n+                let id = link::find_crate_name(Some(sess), attrs.as_slice(),\n+                                               input);\n+                if *req == PrintRequest::CrateName {\n+                    println!(\"{}\", id);\n+                    continue\n+                }\n+                let crate_types = driver::collect_crate_types(sess, attrs);\n+                let metadata = driver::collect_crate_metadata(sess, attrs);\n+                *sess.crate_metadata.borrow_mut() = metadata;\n+                for &style in crate_types.iter() {\n+                    let fname = link::filename_for_input(sess, style,\n+                                                         id.as_slice(),\n+                                                         &t_outputs.with_extension(\"\"));\n+                    println!(\"{}\", fname.filename_display());\n+                }\n             }\n         }\n-\n-        true\n-    } else {\n-        false\n     }\n+    return true;\n }\n \n fn parse_crate_attrs(sess: &Session, input: &Input) ->"}, {"sha": "9d40ff3d383f92083e4245bffd5ef75653208d13", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -607,6 +607,7 @@ pub fn run_passes(sess: &Session,\n                 modules_config.emit_obj = true;\n                 metadata_config.emit_obj = true;\n             },\n+            config::OutputTypeDepInfo => {}\n         }\n     }\n \n@@ -779,6 +780,7 @@ pub fn run_passes(sess: &Session,\n                     link_obj(&crate_output.temp_path(config::OutputTypeObject));\n                 }\n             }\n+            config::OutputTypeDepInfo => {}\n         }\n     }\n     let user_wants_bitcode = user_wants_bitcode;"}, {"sha": "af4e37322e2084b4288cbd774d74bcea9d8929dc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -169,13 +169,8 @@ pub fn main_args(args: &[String]) -> int {\n         usage(args[0].as_slice());\n         return 0;\n     } else if matches.opt_present(\"version\") {\n-        match rustc_driver::version(\"rustdoc\", &matches) {\n-            Some(err) => {\n-                println!(\"{}\", err);\n-                return 1\n-            },\n-            None => return 0\n-        }\n+        rustc_driver::version(\"rustdoc\", &matches);\n+        return 0;\n     }\n \n     if matches.opt_strs(\"passes\") == [\"list\"] {"}, {"sha": "88be7630e83914dd325f0ec45171213132507ac3", "filename": "src/test/run-make/dep-info-custom/Makefile.foo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile.foo", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile.foo", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile.foo?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -1,4 +1,4 @@\n-LIB := $(shell $(RUSTC) --crate-file-name --crate-type=lib lib.rs)\n+LIB := $(shell $(RUSTC) --print file-names --crate-type=lib lib.rs)\n \n $(TMPDIR)/$(LIB):\n \t$(RUSTC) --dep-info $(TMPDIR)/custom-deps-file.d --crate-type=lib lib.rs"}, {"sha": "e5df31f88c1e155a452f0baa34733870d8e7fdc1", "filename": "src/test/run-make/dep-info/Makefile.foo", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fdep-info%2FMakefile.foo", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fdep-info%2FMakefile.foo", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info%2FMakefile.foo?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -1,7 +1,7 @@\n-LIB := $(shell $(RUSTC) --crate-file-name --crate-type=lib lib.rs)\n+LIB := $(shell $(RUSTC) --print file-names --crate-type=lib lib.rs)\n \n $(TMPDIR)/$(LIB):\n-\t$(RUSTC) --dep-info --crate-type=lib lib.rs\n+\t$(RUSTC) --emit dep-info,link --crate-type=lib lib.rs\n \ttouch $(TMPDIR)/done\n \n -include $(TMPDIR)/foo.d"}, {"sha": "f24933cac011788045e3a4b61735be0848ccce15", "filename": "src/test/run-make/issue-7349/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-7349%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -6,6 +6,6 @@\n # used in the inner functions should each appear only once in the generated IR.\n \n all:\n-\t$(RUSTC) foo.rs --emit=ir\n+\t$(RUSTC) foo.rs --emit=llvm-ir\n \t[ \"$$(grep -c 8675309 \"$(TMPDIR)/foo.ll\")\" -eq \"1\" ]\n \t[ \"$$(grep -c 11235813 \"$(TMPDIR)/foo.ll\")\" -eq \"1\" ]"}, {"sha": "f097d8fabd1a8541ae95d814abc4a29eef5dc9fd", "filename": "src/test/run-make/libs-through-symlinks/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Flibs-through-symlinks%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Flibs-through-symlinks%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibs-through-symlinks%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -4,7 +4,7 @@ ifdef IS_WINDOWS\n all:\n else\n \n-NAME := $(shell $(RUSTC) --crate-file-name foo.rs)\n+NAME := $(shell $(RUSTC) --print file-names foo.rs)\n \n all:\n \tmkdir -p $(TMPDIR)/outdir"}, {"sha": "4efbd9ee48df21f3bae75e5710b3b29b82bf8167", "filename": "src/test/run-make/output-type-permutations/Makefile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -12,7 +12,7 @@ all:\n \trm $(TMPDIR)/$(call BIN,bar)\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=asm,ir,bc,obj,link\n+\t$(RUSTC) foo.rs --emit=asm,llvm-ir,llvm-bc,obj,link\n \trm $(TMPDIR)/bar.ll\n \trm $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/bar.s\n@@ -24,11 +24,11 @@ all:\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=bc -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit=llvm-bc -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=ir -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit=llvm-ir -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n@@ -56,7 +56,7 @@ all:\n \trm $(TMPDIR)/$(call BIN,foo)\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=asm,ir,bc,obj,link --crate-type=staticlib\n+\t$(RUSTC) foo.rs --emit=asm,llvm-ir,llvm-bc,obj,link --crate-type=staticlib\n \trm $(TMPDIR)/bar.ll\n \trm $(TMPDIR)/bar.s\n \trm $(TMPDIR)/bar.o\n@@ -65,7 +65,7 @@ all:\n \t# Don't check that the $(TMPDIR) is empty - we left `foo.bc` for later\n \t# comparison.\n \n-\t$(RUSTC) foo.rs --emit=bc,link --crate-type=rlib\n+\t$(RUSTC) foo.rs --emit=llvm-bc,link --crate-type=rlib\n \tcmp $(TMPDIR)/foo.bc $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/foo.bc"}, {"sha": "189088219d5b3ae3417cd8906d46fd87bb395e86", "filename": "src/test/run-make/sepcomp-cci-copies/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -5,5 +5,5 @@\n \n all:\n \t$(RUSTC) cci_lib.rs\n-\t$(RUSTC) foo.rs --emit=ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c define\\ .*cci_fn)\" -eq \"2\" ]"}, {"sha": "bc299de0c2d3fc1f10318c4eeb2a1835eee35ecd", "filename": "src/test/run-make/sepcomp-inlining/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -6,7 +6,7 @@\n # function should be defined in only one compilation unit.\n \n all:\n-\t$(RUSTC) foo.rs --emit=ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c define\\ i32\\ .*inlined)\" -eq \"1\" ]\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c define\\ available_externally\\ i32\\ .*inlined)\" -eq \"2\" ]\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c define\\ i32\\ .*normal)\" -eq \"1\" ]"}, {"sha": "a475bdfd74a24f5795625f8898820dfd9970390d", "filename": "src/test/run-make/sepcomp-separate/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fsepcomp-separate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fsepcomp-separate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-separate%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -5,5 +5,5 @@\n # wind up in three different compilation units.\n \n all:\n-\t$(RUSTC) foo.rs --emit=ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c define\\ .*magic_fn)\" -eq \"3\" ]"}, {"sha": "23e14a9cb93de11b9e2b361fc63fea64e9b5259f", "filename": "src/test/run-make/version/Makefile", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fversion%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fversion%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fversion%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -1,8 +1,6 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -v\n-\t$(RUSTC) -v verbose\n-\t$(RUSTC) -v bad_arg && exit 1 || exit 0\n-\t$(RUSTC) --version verbose\n-\t$(RUSTC) --version bad_arg && exit 1 || exit 0\n+\t$(RUSTC) -V\n+\t$(RUSTC) -vV\n+\t$(RUSTC) --version --verbose"}, {"sha": "34fa56efee6fa20c8fcdf3a4408f3057752d233f", "filename": "src/test/run-make/volatile-intrinsics/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/117984b8847eca21a7f2b2d120f85eff9f2d16f9/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile?ref=117984b8847eca21a7f2b2d120f85eff9f2d16f9", "patch": "@@ -5,6 +5,6 @@ all:\n \t$(RUSTC) main.rs\n \t$(call RUN,main)\n \t# ... and the loads/stores must not be optimized out.\n-\t$(RUSTC) main.rs --emit=ir\n+\t$(RUSTC) main.rs --emit=llvm-ir\n \tgrep \"load volatile\"  $(TMPDIR)/main.ll\n \tgrep \"store volatile\" $(TMPDIR)/main.ll"}]}