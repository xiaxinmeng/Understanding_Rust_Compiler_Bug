{"sha": "8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzA1YmFjYmZmOGE0ZDY2Yzc3OTBkNTAxNzE4ZDliN2YyYzA5MGM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-07T05:57:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T05:57:38Z"}, "message": "Rollup merge of #58123 - lnicola:binary-heap-no-bounds-checks, r=sfackler\n\nAvoid some bounds checks in binary_heap::{PeekMut,Hole}\n\nFixes #58121.", "tree": {"sha": "f6bd0320dbdf37832563f4ad4ec45c6bb7091f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6bd0320dbdf37832563f4ad4ec45c6bb7091f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW8jSCRBK7hj4Ov3rIwAAdHIIAGFlyKpJYqE2gPXVE1YPriQ/\nICfTaPm8qoAcIGnjHHFFNKaK9Y6AtPV6H0Izh4sND+08OAlhJofN9LoIka8zDBTN\nPDeE/KJrkM48oiGGDuVJAEpQY+t2g2vKwY9tuyijUSZ8loyuSsWT09ejflIr/qZ9\n0yV+CHsMn6Gbi26emhKx/UKK1mFcIigX4ON5FDb2QkqB7SOyABrPv5xwD1bB2XQ9\nHM0HckgHY7YsAIf6dLBjMIVeEWGj9fPfJESGKv/rArp/iClkLAgGh01/7+b8XWm3\n/Fll8oifpE8mSQ81hebssaiN+mgqyVDVxzzWn7nIgFMUX6R60e9gfuMaxZgWwlI=\n=Dmq3\n-----END PGP SIGNATURE-----\n", "payload": "tree f6bd0320dbdf37832563f4ad4ec45c6bb7091f2d\nparent ed500e6cc4230e12ab012ea57a1778560ce03515\nparent ea72066f5c0cc93ea7efe73396eb691724fccaaf\nauthor kennytm <kennytm@gmail.com> 1549519058 +0800\ncommitter GitHub <noreply@github.com> 1549519058 +0800\n\nRollup merge of #58123 - lnicola:binary-heap-no-bounds-checks, r=sfackler\n\nAvoid some bounds checks in binary_heap::{PeekMut,Hole}\n\nFixes #58121.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "html_url": "https://github.com/rust-lang/rust/commit/8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc05bacbff8a4d66c7790d501718d9b7f2c090c/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed500e6cc4230e12ab012ea57a1778560ce03515", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed500e6cc4230e12ab012ea57a1778560ce03515", "html_url": "https://github.com/rust-lang/rust/commit/ed500e6cc4230e12ab012ea57a1778560ce03515"}, {"sha": "ea72066f5c0cc93ea7efe73396eb691724fccaaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea72066f5c0cc93ea7efe73396eb691724fccaaf", "html_url": "https://github.com/rust-lang/rust/commit/ea72066f5c0cc93ea7efe73396eb691724fccaaf"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "6214e1ce24587e1baffc7d0f693644e3e984d18b", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bc05bacbff8a4d66c7790d501718d9b7f2c090c/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc05bacbff8a4d66c7790d501718d9b7f2c090c/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=8bc05bacbff8a4d66c7790d501718d9b7f2c090c", "patch": "@@ -248,14 +248,18 @@ impl<T: Ord> Drop for PeekMut<'_, T> {\n impl<T: Ord> Deref for PeekMut<'_, T> {\n     type Target = T;\n     fn deref(&self) -> &T {\n-        &self.heap.data[0]\n+        debug_assert!(!self.heap.is_empty());\n+        // SAFE: PeekMut is only instantiated for non-empty heaps\n+        unsafe { self.heap.data.get_unchecked(0) }\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<T: Ord> DerefMut for PeekMut<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n-        &mut self.heap.data[0]\n+        debug_assert!(!self.heap.is_empty());\n+        // SAFE: PeekMut is only instantiated for non-empty heaps\n+        unsafe { self.heap.data.get_unchecked_mut(0) }\n     }\n }\n \n@@ -865,7 +869,8 @@ impl<'a, T> Hole<'a, T> {\n     #[inline]\n     unsafe fn new(data: &'a mut [T], pos: usize) -> Self {\n         debug_assert!(pos < data.len());\n-        let elt = ptr::read(&data[pos]);\n+        // SAFE: pos should be inside the slice\n+        let elt = ptr::read(data.get_unchecked(pos));\n         Hole {\n             data,\n             elt: ManuallyDrop::new(elt),"}]}