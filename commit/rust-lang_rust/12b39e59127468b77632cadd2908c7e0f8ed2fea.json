{"sha": "12b39e59127468b77632cadd2908c7e0f8ed2fea", "node_id": "C_kwDOAAsO6NoAKDEyYjM5ZTU5MTI3NDY4Yjc3NjMyY2FkZDI5MDhjN2UwZjhlZDJmZWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-11T20:36:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-11T20:36:37Z"}, "message": "Make naming more explicit.", "tree": {"sha": "105b471ac3ace272b655caa16a175bb0e65d55f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105b471ac3ace272b655caa16a175bb0e65d55f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b39e59127468b77632cadd2908c7e0f8ed2fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b39e59127468b77632cadd2908c7e0f8ed2fea", "html_url": "https://github.com/rust-lang/rust/commit/12b39e59127468b77632cadd2908c7e0f8ed2fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b39e59127468b77632cadd2908c7e0f8ed2fea/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04ed86757af86540e5797982f4e70fbf6be24513", "url": "https://api.github.com/repos/rust-lang/rust/commits/04ed86757af86540e5797982f4e70fbf6be24513", "html_url": "https://github.com/rust-lang/rust/commit/04ed86757af86540e5797982f4e70fbf6be24513"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "19037abdd22e9d1707f8a16325a6801f6b5ca400", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=12b39e59127468b77632cadd2908c7e0f8ed2fea", "patch": "@@ -102,7 +102,9 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     /// The items being lowered are collected here.\n     owners: IndexVec<LocalDefId, Option<hir::OwnerInfo<'hir>>>,\n+    /// Bodies inside the owner being lowered.\n     bodies: IndexVec<hir::ItemLocalId, Option<&'hir hir::Body<'hir>>>,\n+    /// Attributes inside the owner being lowered.\n     attrs: BTreeMap<hir::ItemLocalId, &'hir [Attribute]>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n@@ -418,6 +420,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc(krate)\n     }\n \n+    /// Compute the hash for the HIR of the full crate.\n+    /// This hash will then be part of the crate_hash which is stored in the metadata.\n     fn compute_hir_hash(&mut self) -> Fingerprint {\n         let definitions = self.resolver.definitions();\n         let mut hir_body_nodes: Vec<_> = self\n@@ -493,10 +497,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n \n-        let (hash, node_hash) = self.hash_body(node, &bodies);\n+        let (hash_including_bodies, hash_without_bodies) = self.hash_owner(node, &bodies);\n         let (nodes, parenting) =\n             index::index_hir(self.sess, self.resolver.definitions(), node, &bodies);\n-        let nodes = hir::OwnerNodes { hash, node_hash, nodes, bodies };\n+        let nodes = hir::OwnerNodes { hash_including_bodies, hash_without_bodies, nodes, bodies };\n         let attrs = {\n             let mut hcx = self.resolver.create_stable_hashing_context();\n             let mut stable_hasher = StableHasher::new();\n@@ -510,7 +514,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     /// Hash the HIR node twice, one deep and one shallow hash.  This allows to differentiate\n     /// queries which depend on the full HIR tree and those which only depend on the item signature.\n-    fn hash_body(\n+    fn hash_owner(\n         &mut self,\n         node: hir::OwnerNode<'hir>,\n         bodies: &IndexVec<hir::ItemLocalId, Option<&'hir hir::Body<'hir>>>,\n@@ -520,13 +524,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hcx.with_hir_bodies(true, node.def_id(), bodies, |hcx| {\n             node.hash_stable(hcx, &mut stable_hasher)\n         });\n-        let full_hash = stable_hasher.finish();\n+        let hash_including_bodies = stable_hasher.finish();\n         let mut stable_hasher = StableHasher::new();\n         hcx.with_hir_bodies(false, node.def_id(), bodies, |hcx| {\n             node.hash_stable(hcx, &mut stable_hasher)\n         });\n-        let node_hash = stable_hasher.finish();\n-        (full_hash, node_hash)\n+        let hash_without_bodies = stable_hasher.finish();\n+        (hash_including_bodies, hash_without_bodies)\n     }\n \n     /// This method allocates a new `HirId` for the given `NodeId` and stores it in"}, {"sha": "0530a691020384e52bede5822db14fd6ba5b1e74", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=12b39e59127468b77632cadd2908c7e0f8ed2fea", "patch": "@@ -692,9 +692,9 @@ impl<'tcx> AttributeMap<'tcx> {\n #[derive(Debug)]\n pub struct OwnerNodes<'tcx> {\n     /// Pre-computed hash of the full HIR.\n-    pub hash: Fingerprint,\n-    /// Pre-computed hash of the top node.\n-    pub node_hash: Fingerprint,\n+    pub hash_including_bodies: Fingerprint,\n+    /// Pre-computed hash of the item signature, sithout recursing into the body.\n+    pub hash_without_bodies: Fingerprint,\n     /// Full HIR for the current owner.\n     // The zeroth node's parent is trash, but is never accessed.\n     pub nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,"}, {"sha": "6e7b765a0c4413b62242640973b3d2681c669c53", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=12b39e59127468b77632cadd2908c7e0f8ed2fea", "patch": "@@ -215,8 +215,9 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'tcx> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         // We ignore the `nodes` and `bodies` fields since these refer to information included in\n         // `hash` which is hashed in the collector and used for the crate hash.\n-        let OwnerNodes { hash, node_hash: _, nodes: _, bodies: _ } = *self;\n-        hash.hash_stable(hcx, hasher);\n+        let OwnerNodes { hash_including_bodies, hash_without_bodies: _, nodes: _, bodies: _ } =\n+            *self;\n+        hash_including_bodies.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "1648d0d3ac1729431fe5b5e1c7d8ab273be5973f", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b39e59127468b77632cadd2908c7e0f8ed2fea/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=12b39e59127468b77632cadd2908c7e0f8ed2fea", "patch": "@@ -23,14 +23,14 @@ use rustc_span::DUMMY_SP;\n #[derive(Copy, Clone, Debug)]\n pub struct Owner<'tcx> {\n     node: OwnerNode<'tcx>,\n-    node_hash: Fingerprint,\n+    hash_without_bodies: Fingerprint,\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Owner { node: _, node_hash } = self;\n-        node_hash.hash_stable(hcx, hasher)\n+        let Owner { node: _, hash_without_bodies } = self;\n+        hash_without_bodies.hash_stable(hcx, hasher)\n     }\n }\n \n@@ -67,7 +67,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.hir_owner = |tcx, id| {\n         let owner = tcx.hir_crate(()).owners[id].as_ref()?;\n         let node = owner.node();\n-        Some(Owner { node, node_hash: owner.nodes.node_hash })\n+        Some(Owner { node, hash_without_bodies: owner.nodes.hash_without_bodies })\n     };\n     providers.hir_owner_nodes = |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|i| &i.nodes);\n     providers.hir_owner_parent = |tcx, id| {"}]}