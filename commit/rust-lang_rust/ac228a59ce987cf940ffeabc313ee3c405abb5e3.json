{"sha": "ac228a59ce987cf940ffeabc313ee3c405abb5e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjI4YTU5Y2U5ODdjZjk0MGZmZWFiYzMxM2VlM2M0MDVhYmI1ZTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T20:51:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T20:51:17Z"}, "message": "Widen write mutability check to cover all writing stmts.", "tree": {"sha": "374d8e84afd9bd6051428f31fc43cae373a09ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374d8e84afd9bd6051428f31fc43cae373a09ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac228a59ce987cf940ffeabc313ee3c405abb5e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac228a59ce987cf940ffeabc313ee3c405abb5e3", "html_url": "https://github.com/rust-lang/rust/commit/ac228a59ce987cf940ffeabc313ee3c405abb5e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac228a59ce987cf940ffeabc313ee3c405abb5e3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe82978980c42df1288a804e53b32ebf66fd201c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe82978980c42df1288a804e53b32ebf66fd201c", "html_url": "https://github.com/rust-lang/rust/commit/fe82978980c42df1288a804e53b32ebf66fd201c"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "be0c5af222028170b23ba1f917c131b54b591d30", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ac228a59ce987cf940ffeabc313ee3c405abb5e3/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ac228a59ce987cf940ffeabc313ee3c405abb5e3/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=ac228a59ce987cf940ffeabc313ee3c405abb5e3", "patch": "@@ -34,18 +34,21 @@ let mutability_checking_visitor\n   in\n \n   let check_write s dst =\n-    let _ =\n-      iflog cx\n-        (fun _ -> log cx \"checking write to lval #%d = %a\"\n-           (int_of_node (lval_base_id dst)) Ast.sprintf_lval dst)\n-    in\n+    let is_init = Hashtbl.mem cx.ctxt_stmt_is_init s.id in\n     let dst_ty = lval_ty cx dst in\n     let is_mutable =\n       match dst_ty with\n           Ast.TY_mutable _ -> true\n         | _ -> false\n     in\n-      if (is_mutable or (Hashtbl.mem cx.ctxt_stmt_is_init s.id))\n+      iflog cx\n+        (fun _ -> log cx \"checking %swrite to %slval #%d = %a of type %a\"\n+           (if is_init then \"initializing \" else \"\")\n+           (if is_mutable then \"mutable \" else \"\")\n+           (int_of_node (lval_base_id dst))\n+           Ast.sprintf_lval dst\n+           Ast.sprintf_ty dst_ty);\n+      if (is_mutable or is_init)\n       then ()\n       else err (Some s.id)\n         \"writing to non-mutable slot of type %a in statement %a\"\n@@ -57,10 +60,19 @@ let mutability_checking_visitor\n   let visit_stmt_pre s =\n     begin\n       match s.node with\n-          Ast.STMT_copy (dst, _) -> check_write s dst\n-        | Ast.STMT_copy_binop (dst, _, _) -> check_write s dst\n-        | Ast.STMT_call (dst, _, _) -> check_write s dst\n-        | Ast.STMT_recv (dst, _) -> check_write s dst\n+            Ast.STMT_copy (lv_dst, _)\n+          | Ast.STMT_call (lv_dst, _, _)\n+          | Ast.STMT_spawn (lv_dst, _, _, _)\n+          | Ast.STMT_recv (lv_dst, _)\n+          | Ast.STMT_bind (lv_dst, _, _)\n+          | Ast.STMT_new_rec (lv_dst, _, _)\n+          | Ast.STMT_new_tup (lv_dst, _)\n+          | Ast.STMT_new_vec (lv_dst, _, _)\n+          | Ast.STMT_new_str (lv_dst, _)\n+          | Ast.STMT_new_port lv_dst\n+          | Ast.STMT_new_chan (lv_dst, _)\n+          | Ast.STMT_new_box (lv_dst, _, _) ->\n+              check_write s lv_dst\n         | _ -> ()\n     end;\n     inner.Walk.visit_stmt_pre s"}]}