{"sha": "e1a236d65e8c091e6c849865d1ddce87c4324fe3", "node_id": "C_kwDOAAsO6NoAKGUxYTIzNmQ2NWU4YzA5MWU2Yzg0OTg2NWQxZGRjZTg3YzQzMjRmZTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-09T17:28:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-09T17:28:10Z"}, "message": "Simplify", "tree": {"sha": "e17b4ae2bad76d9082aac14da8f4dfd0cf2a8701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17b4ae2bad76d9082aac14da8f4dfd0cf2a8701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a236d65e8c091e6c849865d1ddce87c4324fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a236d65e8c091e6c849865d1ddce87c4324fe3", "html_url": "https://github.com/rust-lang/rust/commit/e1a236d65e8c091e6c849865d1ddce87c4324fe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a236d65e8c091e6c849865d1ddce87c4324fe3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9c59d37524d267638ae941b19aa49c5b4baaf41", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c59d37524d267638ae941b19aa49c5b4baaf41", "html_url": "https://github.com/rust-lang/rust/commit/f9c59d37524d267638ae941b19aa49c5b4baaf41"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f7e2af46d29569acda9eda4970e2635e6bca2f53", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1a236d65e8c091e6c849865d1ddce87c4324fe3/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a236d65e8c091e6c849865d1ddce87c4324fe3/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=e1a236d65e8c091e6c849865d1ddce87c4324fe3", "patch": "@@ -96,9 +96,9 @@ impl<'a> TyLoweringContext<'a> {\n         debruijn: DebruijnIndex,\n         f: impl FnOnce(&TyLoweringContext) -> T,\n     ) -> T {\n-        let opaque_ty_data_vec = self.opaque_type_data.replace(Vec::new());\n-        let expander = self.expander.replace(None);\n-        let unsized_types = self.unsized_types.replace(Default::default());\n+        let opaque_ty_data_vec = self.opaque_type_data.take();\n+        let expander = self.expander.take();\n+        let unsized_types = self.unsized_types.take();\n         let new_ctx = Self {\n             in_binders: debruijn,\n             impl_trait_counter: Cell::new(self.impl_trait_counter.get()),\n@@ -615,7 +615,7 @@ impl<'a> TyLoweringContext<'a> {\n                 // `Option::None::<T>` are both allowed (though the former is\n                 // preferred). See also `def_ids_for_path_segments` in rustc.\n                 let len = path.segments().len();\n-                let penultimate = if len >= 2 { path.segments().get(len - 2) } else { None };\n+                let penultimate = len.checked_sub(2).and_then(|idx| path.segments().get(idx));\n                 let segment = match penultimate {\n                     Some(segment) if segment.args_and_bindings.is_some() => segment,\n                     _ => last,\n@@ -841,23 +841,23 @@ impl<'a> TyLoweringContext<'a> {\n         };\n         last_segment\n             .into_iter()\n-            .flat_map(|segment| segment.args_and_bindings.into_iter())\n-            .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n+            .filter_map(|segment| segment.args_and_bindings)\n+            .flat_map(|args_and_bindings| &args_and_bindings.bindings)\n             .flat_map(move |binding| {\n                 let found = associated_type_by_name_including_super_traits(\n                     self.db,\n                     trait_ref.clone(),\n                     &binding.name,\n                 );\n                 let (super_trait_ref, associated_ty) = match found {\n-                    None => return SmallVec::<[QuantifiedWhereClause; 1]>::new(),\n+                    None => return SmallVec::new(),\n                     Some(t) => t,\n                 };\n                 let projection_ty = ProjectionTy {\n                     associated_ty_id: to_assoc_type_id(associated_ty),\n                     substitution: super_trait_ref.substitution,\n                 };\n-                let mut preds = SmallVec::with_capacity(\n+                let mut preds: SmallVec<[_; 1]> = SmallVec::with_capacity(\n                     binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n                 );\n                 if let Some(type_ref) = &binding.type_ref {"}]}