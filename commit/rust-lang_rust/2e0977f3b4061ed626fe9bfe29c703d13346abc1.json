{"sha": "2e0977f3b4061ed626fe9bfe29c703d13346abc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMDk3N2YzYjQwNjFlZDYyNmZlOWJmZTI5YzcwM2QxMzM0NmFiYzE=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2019-01-21T12:06:32Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2019-01-21T12:06:32Z"}, "message": "Fixed potential mistakes with nesting. Added tests.", "tree": {"sha": "e5a26fbddec3b81070561218e76032fe897e345c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5a26fbddec3b81070561218e76032fe897e345c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0977f3b4061ed626fe9bfe29c703d13346abc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJWBAABCABAFiEEtfVYniVMfR+YKQUSxyLctqGR7qsFAlxFtcwiHGRheHBlZGRh\nQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbQAKCRDHIty2oZHuq5/8D/9tKh2KdUDD\nE4B63Fy2jJlVRVya4kB/DnYgrhL/d0jWQyecdy7AfjpBM3qDduzdJVNV/afHi6Fu\neyU39iogo32ECi9+HZ4zt2SN2erQCIYMCqOKkDnt4hK4v0WF3DpEi47cKWtbIBjO\n9XY99hmqmtLEnLO06Cr3gBRIxl0D9R4IvEPYUSRBBnExfBReBej7RofxhhEfBHk1\nR2Ctwz/ax04I+brme2FddcwZ8yaGq8I9N83suwShE3oP3BlVgLK9oSGRkTno6Lw3\nnq431UhmshjBE9j2A54uurwtQhvz53ezIV7m5qheceJ5/pfaaY2jm1RKqWtbw/3k\nFe4dwatj6KusVSuYba8EWMNzi+8KM6CT8LZkT9KGUB+GqXP/7c/UG7pX9guaf5p6\n2FrbqrNwh1aLpozA2ouSZOICrwXALScPYQfZzHmEmHE9XaXH0Sb7Rlz4OjpkHUmG\n0YRsqoMTLT/r5YPhvzd7njzVZcBQhrjpwd/BRI5T34CrLmHggB69AmLFJHrgvH/n\ns9uxaR3yX5NgDsP6b5uQhRm/O+INeMMyFfLVSmjQx14J0idksrDC7M+itzculX/C\nCLPU58M3wnYgbF9dyYFLg0/BXJTkoZXj0IHvXfmoUxuupL8c9hqEFXd4Gt7odexA\nSBA0/CHT1VsabvNv4AymoyzhqJXzeeruxQ==\n=I0Q3\n-----END PGP SIGNATURE-----", "payload": "tree e5a26fbddec3b81070561218e76032fe897e345c\nparent 13b5ea4223480265059356ed80e233e9f1b8a570\nauthor daxpedda <daxpedda@users.noreply.github.com> 1548072392 +0100\ncommitter daxpedda <daxpedda@users.noreply.github.com> 1548072392 +0100\n\nFixed potential mistakes with nesting. Added tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0977f3b4061ed626fe9bfe29c703d13346abc1", "html_url": "https://github.com/rust-lang/rust/commit/2e0977f3b4061ed626fe9bfe29c703d13346abc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0977f3b4061ed626fe9bfe29c703d13346abc1/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b5ea4223480265059356ed80e233e9f1b8a570", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b5ea4223480265059356ed80e233e9f1b8a570", "html_url": "https://github.com/rust-lang/rust/commit/13b5ea4223480265059356ed80e233e9f1b8a570"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "b57847d8f4b094d8e692b48bf781a37b4d3fac7d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e0977f3b4061ed626fe9bfe29c703d13346abc1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0977f3b4061ed626fe9bfe29c703d13346abc1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=2e0977f3b4061ed626fe9bfe29c703d13346abc1", "patch": "@@ -7,7 +7,7 @@ use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintC\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n-use syntax_pos::{symbol::keywords::SelfUpper, Span};\n+use syntax_pos::symbol::keywords::SelfUpper;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n /// replacement with `Self` is applicable.\n@@ -55,7 +55,13 @@ impl LintPass for UseSelf {\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n-fn span_use_self_lint(cx: &LateContext<'_, '_>, span: Span) {\n+fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path) {\n+    // path segments only include actual path, no methods or fields\n+    let last_path_span = path.segments.last().expect(SEGMENTS_MSG).ident.span;\n+    // `to()` doesn't shorten span, so we shorten it with `until(..)`\n+    // and then include it with `to(..)`\n+    let span = path.span.until(last_path_span).to(last_path_span);\n+\n     span_lint_and_sugg(\n         cx,\n         USE_SELF,\n@@ -92,7 +98,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n                         };\n \n                         if !is_self_ty {\n-                            span_use_self_lint(self.cx, path.span);\n+                            span_use_self_lint(self.cx, path);\n                         }\n                     }\n                 }\n@@ -221,10 +227,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n         if path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n             if self.item_path.def == path.def {\n-                span_use_self_lint(self.cx, path.segments.first().expect(SEGMENTS_MSG).ident.span);\n+                span_use_self_lint(self.cx, path);\n             } else if let Def::StructCtor(ctor_did, CtorKind::Fn) = path.def {\n                 if self.item_path.def.opt_def_id() == self.cx.tcx.parent_def_id(ctor_did) {\n-                    span_use_self_lint(self.cx, path.span);\n+                    span_use_self_lint(self.cx, path);\n                 }\n             }\n         }"}, {"sha": "0cf406b18ce877cb25b3719f93976195d57b887a", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e0977f3b4061ed626fe9bfe29c703d13346abc1/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0977f3b4061ed626fe9bfe29c703d13346abc1/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=2e0977f3b4061ed626fe9bfe29c703d13346abc1", "patch": "@@ -274,3 +274,23 @@ mod issue3410 {\n         fn a(_: Vec<A>) {}\n     }\n }\n+\n+#[allow(clippy::no_effect)]\n+mod rustfix {\n+    mod nested {\n+        pub struct A {}\n+    }\n+\n+    impl nested::A {\n+        const A: bool = true;\n+\n+        fn fun_1() {}\n+\n+        fn fun_2() {\n+            nested::A::fun_1();\n+            nested::A::A;\n+\n+            nested::A {};\n+        }\n+    }\n+}"}, {"sha": "68ce7221d039ad1de5d7fd258eaa3feb6fa87951", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e0977f3b4061ed626fe9bfe29c703d13346abc1/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e0977f3b4061ed626fe9bfe29c703d13346abc1/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=2e0977f3b4061ed626fe9bfe29c703d13346abc1", "patch": "@@ -162,5 +162,23 @@ error: unnecessary structure name repetition\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 26 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:290:13\n+   |\n+LL |             nested::A::fun_1();\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:291:13\n+   |\n+LL |             nested::A::A;\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:293:13\n+   |\n+LL |             nested::A {};\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 29 previous errors\n "}]}