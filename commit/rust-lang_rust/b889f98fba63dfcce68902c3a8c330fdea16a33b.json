{"sha": "b889f98fba63dfcce68902c3a8c330fdea16a33b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODlmOThmYmE2M2RmY2NlNjg5MDJjM2E4YzMzMGZkZWExNmEzM2I=", "commit": {"author": {"name": "Philipp Oppermann", "email": "dev@phil-opp.com", "date": "2018-03-26T17:01:26Z"}, "committer": {"name": "Philipp Oppermann", "email": "dev@phil-opp.com", "date": "2018-03-26T17:01:26Z"}, "message": "Add a hash when a TargetPath is displayed", "tree": {"sha": "8ff62fb848d04b89fa9788725e3842889b93d9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff62fb848d04b89fa9788725e3842889b93d9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b889f98fba63dfcce68902c3a8c330fdea16a33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b889f98fba63dfcce68902c3a8c330fdea16a33b", "html_url": "https://github.com/rust-lang/rust/commit/b889f98fba63dfcce68902c3a8c330fdea16a33b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b889f98fba63dfcce68902c3a8c330fdea16a33b/comments", "author": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phil-opp", "id": 1131315, "node_id": "MDQ6VXNlcjExMzEzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1131315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phil-opp", "html_url": "https://github.com/phil-opp", "followers_url": "https://api.github.com/users/phil-opp/followers", "following_url": "https://api.github.com/users/phil-opp/following{/other_user}", "gists_url": "https://api.github.com/users/phil-opp/gists{/gist_id}", "starred_url": "https://api.github.com/users/phil-opp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phil-opp/subscriptions", "organizations_url": "https://api.github.com/users/phil-opp/orgs", "repos_url": "https://api.github.com/users/phil-opp/repos", "events_url": "https://api.github.com/users/phil-opp/events{/privacy}", "received_events_url": "https://api.github.com/users/phil-opp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b49190d3cd98d9e3bc901993861f80269eb4155", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b49190d3cd98d9e3bc901993861f80269eb4155", "html_url": "https://github.com/rust-lang/rust/commit/7b49190d3cd98d9e3bc901993861f80269eb4155"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "507243a58a5f9506b62c282c7a7c6875e7f470bb", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b889f98fba63dfcce68902c3a8c330fdea16a33b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b889f98fba63dfcce68902c3a8c330fdea16a33b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=b889f98fba63dfcce68902c3a8c330fdea16a33b", "patch": "@@ -1052,10 +1052,29 @@ impl TargetTriple {\n             }\n         }\n     }\n+\n+    /// Returns an extended string triple for this target.\n+    ///\n+    /// If this target is a path, a hash of the path is appended to the triple returned\n+    /// by `triple()`.\n+    pub fn debug_triple(&self) -> String {\n+        use std::hash::{Hash, Hasher};\n+        use std::collections::hash_map::DefaultHasher;\n+\n+        let triple = self.triple();\n+        if let &TargetTriple::TargetPath(ref path) = self {\n+            let mut hasher = DefaultHasher::new();\n+            path.hash(&mut hasher);\n+            let hash = hasher.finish();\n+            format!(\"{}-{}\", triple, hash)\n+        } else {\n+            triple.to_owned()\n+        }\n+    }\n }\n \n impl fmt::Display for TargetTriple {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.triple())\n+        write!(f, \"{}\", self.debug_triple())\n     }\n }"}]}