{"sha": "6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTBhNzA4MWE5YWFmYzRlMGIzOWNhZTI2NmZiZWQ1ZWFiZDg5OTM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-10T23:33:00Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:41:21Z"}, "message": "Update API to be more compatible with plugin needs\n\nMove to using Box<dyn Fn() -> ...> so that we can let plugins register\nstate.\n\nThis also adds a callback that'll get called from plugin registration so\nthat Clippy and other tools can register lints without using the plugin\nAPI. The plugin API still works, but this new API is more compatible\nwith drivers other than rustc.", "tree": {"sha": "6029a490136be5982d68ee7a68a5fd46e48f03cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6029a490136be5982d68ee7a68a5fd46e48f03cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "html_url": "https://github.com/rust-lang/rust/commit/6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b761367d52b30c86a7d404a64a3b2dd854cd7418", "url": "https://api.github.com/repos/rust-lang/rust/commits/b761367d52b30c86a7d404a64a3b2dd854cd7418", "html_url": "https://github.com/rust-lang/rust/commit/b761367d52b30c86a7d404a64a3b2dd854cd7418"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "2a0cdba50cb5f307d6db5dec0feaf8c11744e7ea", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -35,7 +35,7 @@ use crate::util::common::time;\n use errors::DiagnosticBuilder;\n use std::slice;\n use std::default::Default as StdDefault;\n-use rustc_data_structures::sync::{ParallelIterator, join, par_iter};\n+use rustc_data_structures::sync::{self, ParallelIterator, join, par_iter};\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -57,11 +57,11 @@ pub struct LintStore {\n     /// interior mutability, we don't enforce this (and lints should, in theory,\n     /// be compatible with being constructed more than once, though not\n     /// necessarily in a sane manner. This is safe though.)\n-    pre_expansion_passes: Vec<fn() -> EarlyLintPassObject>,\n-    early_passes: Vec<fn() -> EarlyLintPassObject>,\n-    late_passes: Vec<fn() -> LateLintPassObject>,\n+    pre_expansion_passes: Vec<Box<dyn Fn() -> EarlyLintPassObject + sync::Send + sync::Sync>>,\n+    early_passes: Vec<Box<dyn Fn() -> EarlyLintPassObject + sync::Send + sync::Sync>>,\n+    late_passes: Vec<Box<dyn Fn() -> LateLintPassObject + sync::Send + sync::Sync>>,\n     /// This is unique in that we construct them per-module, so not once.\n-    late_module_passes: Vec<fn() -> LateLintPassObject>,\n+    late_module_passes: Vec<Box<dyn Fn() -> LateLintPassObject + sync::Send + sync::Sync>>,\n \n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n@@ -155,20 +155,24 @@ impl LintStore {\n             .collect()\n     }\n \n-    pub fn register_early_pass(&mut self, pass: fn() -> EarlyLintPassObject) {\n-        self.early_passes.push(pass);\n+    pub fn register_early_pass(&mut self,\n+        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::Send + sync::Sync) {\n+        self.early_passes.push(Box::new(pass));\n     }\n \n-    pub fn register_pre_expansion_pass(&mut self, pass: fn() -> EarlyLintPassObject) {\n-        self.pre_expansion_passes.push(pass);\n+    pub fn register_pre_expansion_pass(&mut self,\n+        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::Send + sync::Sync) {\n+        self.pre_expansion_passes.push(Box::new(pass));\n     }\n \n-    pub fn register_late_pass(&mut self, pass: fn() -> LateLintPassObject) {\n-        self.late_passes.push(pass);\n+    pub fn register_late_pass(&mut self,\n+        pass: impl Fn() -> LateLintPassObject + 'static + sync::Send + sync::Sync) {\n+        self.late_passes.push(Box::new(pass));\n     }\n \n-    pub fn register_late_mod_pass(&mut self, pass: fn() -> LateLintPassObject) {\n-        self.late_module_passes.push(pass);\n+    pub fn register_late_mod_pass(&mut self,\n+        pass: impl Fn() -> LateLintPassObject + 'static + sync::Send + sync::Sync) {\n+        self.late_module_passes.push(Box::new(pass));\n     }\n \n     // Helper method for register_early/late_pass"}, {"sha": "2cf1552ed968326a2922d7c1eb1ec498cae58629", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -106,6 +106,7 @@ pub fn abort_on_err<T>(result: Result<T, ErrorReported>, sess: &Session) -> T {\n pub trait Callbacks {\n     /// Called before creating the compiler instance\n     fn config(&mut self, _config: &mut interface::Config) {}\n+    fn extra_lints(&mut self, _ls: &mut lint::LintStore) {}\n     /// Called after parsing. Return value instructs the compiler whether to\n     /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n     fn after_parsing(&mut self, _compiler: &interface::Compiler) -> Compilation {\n@@ -182,6 +183,7 @@ pub fn run_compiler(\n             stderr: None,\n             crate_name: None,\n             lint_caps: Default::default(),\n+            register_lints: None,\n         };\n         callbacks.config(&mut config);\n         config\n@@ -259,6 +261,7 @@ pub fn run_compiler(\n         stderr: None,\n         crate_name: None,\n         lint_caps: Default::default(),\n+        register_lints: None,\n     };\n \n     callbacks.config(&mut config);"}, {"sha": "34ec3c862a3e426761043e3612a90d3acbb9e485", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -34,6 +34,7 @@ pub struct Compiler {\n     pub(crate) queries: Queries,\n     pub(crate) cstore: Lrc<CStore>,\n     pub(crate) crate_name: Option<String>,\n+    pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n }\n \n impl Compiler {\n@@ -80,6 +81,8 @@ pub struct Config {\n \n     pub crate_name: Option<String>,\n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+\n+    pub register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n }\n \n pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n@@ -108,6 +111,7 @@ where\n         output_file: config.output_file,\n         queries: Default::default(),\n         crate_name: config.crate_name,\n+        register_lints: config.register_lints,\n     };\n \n     let _sess_abort_error = OnDrop(|| {"}, {"sha": "2044b73db8aa990d45215855cf4c843b5f49e3f8", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -227,6 +227,7 @@ pub struct PluginInfo {\n pub fn register_plugins<'a>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n+    register_lints: impl Fn(&Session, &mut lint::LintStore),\n     mut krate: ast::Crate,\n     crate_name: &str,\n ) -> Result<(ast::Crate, PluginInfo, Lrc<lint::LintStore>)> {\n@@ -285,6 +286,8 @@ pub fn register_plugins<'a>(\n         sess.unstable_options(),\n     );\n \n+    (register_lints)(&sess, &mut lint_store);\n+\n     let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n \n     time(sess, \"plugin registration\", || {"}, {"sha": "84648ca8326fb8fa59fcf69e052022edaf90fecb", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -6,6 +6,8 @@ use rustc_data_structures::sync::Lrc;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::util::common::{time, ErrorReported};\n use rustc::hir;\n+use rustc::lint;\n+use rustc::session::Session;\n use rustc::lint::LintStore;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::ty::steal::Steal;\n@@ -113,9 +115,14 @@ impl Compiler {\n             let crate_name = self.crate_name()?.peek().clone();\n             let krate = self.parse()?.take();\n \n+            let empty: &(dyn Fn(&Session, &mut lint::LintStore) + Sync + Send) = &|_, _| {};\n             let result = passes::register_plugins(\n                 self.session(),\n                 self.cstore(),\n+                self.register_lints\n+                    .as_ref()\n+                    .map(|p| &**p)\n+                    .unwrap_or_else(|| empty),\n                 krate,\n                 &crate_name,\n             );"}, {"sha": "be6404b8697607368af0ff601e6799cd2bae9dc2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -338,6 +338,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         stderr: None,\n         crate_name,\n         lint_caps,\n+        register_lints: None,\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "03e37967c4b58df38de7e61aab7310e4efd1c8a0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -77,6 +77,7 @@ pub fn run(options: Options) -> i32 {\n         stderr: None,\n         crate_name: options.crate_name.clone(),\n         lint_caps: Default::default(),\n+        register_lints: None,\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "9582137eae91c0c4e71ae73011598f66494a2abf", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be0a7081a9aafc4e0b39cae266fbed5eabd8993/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=6be0a7081a9aafc4e0b39cae266fbed5eabd8993", "patch": "@@ -59,6 +59,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         stderr: None,\n         crate_name: None,\n         lint_caps: Default::default(),\n+        register_lints: None,\n     };\n \n     interface::run_compiler(config, |compiler| {"}]}