{"sha": "ca5c59507f76b8e30658d6c815b823c9636d786a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNWM1OTUwN2Y3NmI4ZTMwNjU4ZDZjODE1YjgyM2M5NjM2ZDc4NmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T18:05:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T18:07:59Z"}, "message": "Refactor show syntax tree action", "tree": {"sha": "c953cf7eaaf7f6892e7cff63b5b96ff3060826a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c953cf7eaaf7f6892e7cff63b5b96ff3060826a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca5c59507f76b8e30658d6c815b823c9636d786a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5c59507f76b8e30658d6c815b823c9636d786a", "html_url": "https://github.com/rust-lang/rust/commit/ca5c59507f76b8e30658d6c815b823c9636d786a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca5c59507f76b8e30658d6c815b823c9636d786a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac3d0e83403be22ec31d62a1501d726f6e6f81e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3d0e83403be22ec31d62a1501d726f6e6f81e1", "html_url": "https://github.com/rust-lang/rust/commit/ac3d0e83403be22ec31d62a1501d726f6e6f81e1"}], "stats": {"total": 250, "additions": 116, "deletions": 134}, "files": [{"sha": "8f91b3b7d32f1e4de4775bf54f1e7f621482c3f9", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=ca5c59507f76b8e30658d6c815b823c9636d786a", "patch": "@@ -5,10 +5,10 @@ import { matchingBrace } from './matching_brace';\n import { joinLines } from './join_lines';\n import { onEnter } from './on_enter';\n import { parentModule } from './parent_module';\n+import { syntaxTree } from './syntax_tree';\n import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';\n import * as runnables from './runnables';\n-import * as syntaxTree from './syntaxTree';\n \n function collectGarbage(ctx: Ctx): Cmd {\n     return async () => {"}, {"sha": "89a80550cee08aafa083f64dbcc2e393a23b2c91", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ac3d0e83403be22ec31d62a1501d726f6e6f81e1/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac3d0e83403be22ec31d62a1501d726f6e6f81e1/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=ac3d0e83403be22ec31d62a1501d726f6e6f81e1", "patch": "@@ -1,76 +0,0 @@\n-import * as vscode from 'vscode';\n-import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n-\n-import { Server } from '../server';\n-\n-export const syntaxTreeUri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n-\n-export class SyntaxTreeContentProvider\n-    implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-    public syntaxTree: string = 'Not available';\n-\n-    public provideTextDocumentContent(\n-        uri: vscode.Uri,\n-    ): vscode.ProviderResult<string> {\n-        const editor = vscode.window.activeTextEditor;\n-        if (editor == null) {\n-            return '';\n-        }\n-\n-        let range: Range | undefined;\n-\n-        // When the range based query is enabled we take the range of the selection\n-        if (uri.query === 'range=true') {\n-            range = editor.selection.isEmpty\n-                ? undefined\n-                : Server.client.code2ProtocolConverter.asRange(\n-                      editor.selection,\n-                  );\n-        }\n-\n-        const request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            range,\n-        };\n-        return Server.client.sendRequest<SyntaxTreeResult>(\n-            'rust-analyzer/syntaxTree',\n-            request,\n-        );\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}\n-\n-interface SyntaxTreeParams {\n-    textDocument: TextDocumentIdentifier;\n-    range?: Range;\n-}\n-\n-type SyntaxTreeResult = string;\n-\n-// Opens the virtual file that will show the syntax tree\n-//\n-// The contents of the file come from the `TextDocumentContentProvider`\n-export function createHandle(provider: SyntaxTreeContentProvider) {\n-    return async () => {\n-        const editor = vscode.window.activeTextEditor;\n-        const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n-\n-        const uri = rangeEnabled\n-            ? vscode.Uri.parse(`${syntaxTreeUri.toString()}?range=true`)\n-            : syntaxTreeUri;\n-\n-        const document = await vscode.workspace.openTextDocument(uri);\n-\n-        provider.eventEmitter.fire(uri);\n-\n-        return vscode.window.showTextDocument(\n-            document,\n-            vscode.ViewColumn.Two,\n-            true,\n-        );\n-    };\n-}"}, {"sha": "e61fb36df8254c9120ceb5f80ebeaa7cd57122e1", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=ca5c59507f76b8e30658d6c815b823c9636d786a", "patch": "@@ -0,0 +1,106 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+\n+import { Ctx, Cmd } from '../ctx';\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function syntaxTree(ctx: Ctx): Cmd {\n+    const stcp = new SyntaxTreeContentProvider(ctx);\n+\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer',\n+            stcp,\n+        ),\n+    );\n+\n+    vscode.workspace.onDidChangeTextDocument(\n+        (event: vscode.TextDocumentChangeEvent) => {\n+            const doc = event.document;\n+            if (doc.languageId !== 'rust') return;\n+            afterLs(() => stcp.eventEmitter.fire(stcp.uri));\n+        },\n+        ctx.subscriptions,\n+    );\n+\n+    vscode.window.onDidChangeActiveTextEditor(\n+        (editor: vscode.TextEditor | undefined) => {\n+            if (!editor || editor.document.languageId !== 'rust') return;\n+            stcp.eventEmitter.fire(stcp.uri);\n+        },\n+        ctx.subscriptions,\n+    );\n+\n+    return async () => {\n+        const editor = vscode.window.activeTextEditor;\n+        const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n+\n+        const uri = rangeEnabled\n+            ? vscode.Uri.parse(`${stcp.uri.toString()}?range=true`)\n+            : stcp.uri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        stcp.eventEmitter.fire(uri);\n+\n+        return vscode.window.showTextDocument(\n+            document,\n+            vscode.ViewColumn.Two,\n+            true,\n+        );\n+    };\n+}\n+\n+// We need to order this after LS updates, but there's no API for that.\n+// Hence, good old setTimeout.\n+function afterLs(f: () => any) {\n+    setTimeout(f, 10);\n+}\n+\n+interface SyntaxTreeParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range?: lc.Range;\n+}\n+\n+export class SyntaxTreeContentProvider\n+    implements vscode.TextDocumentContentProvider {\n+    ctx: Ctx;\n+    uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n+    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+    syntaxTree: string = 'Not available';\n+\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) return '';\n+\n+        let range: lc.Range | undefined;\n+\n+        // When the range based query is enabled we take the range of the selection\n+        if (uri.query === 'range=true') {\n+            range = editor.selection.isEmpty\n+                ? undefined\n+                : this.ctx.client.code2ProtocolConverter.asRange(\n+                      editor.selection,\n+                  );\n+        }\n+\n+        const request: SyntaxTreeParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            range,\n+        };\n+        return this.ctx.client.sendRequest<string>(\n+            'rust-analyzer/syntaxTree',\n+            request,\n+        );\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event;\n+    }\n+}"}, {"sha": "c3a3583b52d9d8e49b7245eb884c07d1a084c6c6", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=ca5c59507f76b8e30658d6c815b823c9636d786a", "patch": "@@ -49,6 +49,10 @@ export class Ctx {\n         }\n     }\n \n+    get subscriptions(): { dispose(): any }[] {\n+        return this.extCtx.subscriptions;\n+    }\n+\n     pushCleanup(d: { dispose(): any }) {\n         this.extCtx.subscriptions.push(d);\n     }"}, {"sha": "4384ee56768c178a62476ec8e760a13ac38e364a", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=ca5c59507f76b8e30658d6c815b823c9636d786a", "patch": "@@ -1,21 +1,14 @@\n import { TextEditor } from 'vscode';\n import { TextDocumentIdentifier } from 'vscode-languageclient';\n-\n-import {\n-    SyntaxTreeContentProvider,\n-    syntaxTreeUri,\n-} from '../commands/syntaxTree';\n import { Decoration } from '../highlighting';\n import { Server } from '../server';\n \n-export function makeHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n+export function makeHandler() {\n     return async function handle(editor: TextEditor | undefined) {\n         if (!editor || editor.document.languageId !== 'rust') {\n             return;\n         }\n \n-        syntaxTreeProvider.eventEmitter.fire(syntaxTreeUri);\n-\n         if (!Server.config.highlightingOn) {\n             return;\n         }"}, {"sha": "2e998e889ba17db5e22a59ad805e7e2eca1c702b", "filename": "editors/code/src/events/change_text_document.ts", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac3d0e83403be22ec31d62a1501d726f6e6f81e1/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac3d0e83403be22ec31d62a1501d726f6e6f81e1/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=ac3d0e83403be22ec31d62a1501d726f6e6f81e1", "patch": "@@ -1,24 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-import {\n-    SyntaxTreeContentProvider,\n-    syntaxTreeUri,\n-} from '../commands/syntaxTree';\n-\n-export function createHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n-    return (event: vscode.TextDocumentChangeEvent) => {\n-        const doc = event.document;\n-        if (doc.languageId !== 'rust') {\n-            return;\n-        }\n-        afterLs(() => {\n-            syntaxTreeProvider.eventEmitter.fire(syntaxTreeUri);\n-        });\n-    };\n-}\n-\n-// We need to order this after LS updates, but there's no API for that.\n-// Hence, good old setTimeout.\n-function afterLs(f: () => any) {\n-    setTimeout(f, 10);\n-}"}, {"sha": "be135474de620b85ec0e2176525ed7b458b8d155", "filename": "editors/code/src/events/index.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Findex.ts?ref=ca5c59507f76b8e30658d6c815b823c9636d786a", "patch": "@@ -1,4 +1,3 @@\n import * as changeActiveTextEditor from './change_active_text_editor';\n-import * as changeTextDocument from './change_text_document';\n \n-export { changeActiveTextEditor, changeTextDocument };\n+export { changeActiveTextEditor };"}, {"sha": "d92cd164fef604cf81f2e935926af603cf8a169e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ca5c59507f76b8e30658d6c815b823c9636d786a/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=ca5c59507f76b8e30658d6c815b823c9636d786a", "patch": "@@ -4,7 +4,6 @@ import * as lc from 'vscode-languageclient';\n import * as commands from './commands';\n import { ExpandMacroContentProvider } from './commands/expand_macro';\n import { HintsUpdater } from './commands/inlay_hints';\n-import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import { StatusDisplay } from './commands/watch_status';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -20,6 +19,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('matchingBrace', commands.matchingBrace);\n     ctx.registerCommand('joinLines', commands.joinLines);\n     ctx.registerCommand('parentModule', commands.parentModule);\n+    ctx.registerCommand('syntaxTree', commands.syntaxTree);\n \n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n@@ -55,10 +55,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     disposeOnDeactivation(watchStatus);\n \n     // Notifications are events triggered by the language server\n-    const allNotifications: Iterable<[\n-        string,\n-        lc.GenericNotificationHandler,\n-    ]> = [\n+    const allNotifications: [string, lc.GenericNotificationHandler][] = [\n         [\n             'rust-analyzer/publishDecorations',\n             notifications.publishDecorations.handle,\n@@ -68,42 +65,25 @@ export async function activate(context: vscode.ExtensionContext) {\n             params => watchStatus.handleProgressNotification(params),\n         ],\n     ];\n-    const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n     const expandMacroContentProvider = new ExpandMacroContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n     vscode.window.onDidChangeActiveTextEditor(\n-        events.changeActiveTextEditor.makeHandler(syntaxTreeContentProvider),\n+        events.changeActiveTextEditor.makeHandler(),\n     );\n \n-    disposeOnDeactivation(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            syntaxTreeContentProvider,\n-        ),\n-    );\n     disposeOnDeactivation(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer',\n             expandMacroContentProvider,\n         ),\n     );\n \n-    registerCommand(\n-        'rust-analyzer.syntaxTree',\n-        commands.syntaxTree.createHandle(syntaxTreeContentProvider),\n-    );\n     registerCommand(\n         'rust-analyzer.expandMacro',\n         commands.expandMacro.createHandle(expandMacroContentProvider),\n     );\n \n-    vscode.workspace.onDidChangeTextDocument(\n-        events.changeTextDocument.createHandler(syntaxTreeContentProvider),\n-        null,\n-        context.subscriptions,\n-    );\n-\n     const startServer = () => Server.start(allNotifications);\n     const reloadCommand = () => reloadServer(startServer);\n "}]}