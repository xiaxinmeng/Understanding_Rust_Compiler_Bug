{"sha": "265b89abde76f7e0555712d7c9056c6f6c57ff96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NWI4OWFiZGU3NmY3ZTA1NTU3MTJkN2M5MDU2YzZmNmM1N2ZmOTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T19:59:55Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "libsyntax: convert `BytePos`/`CharPos` binops to by value", "tree": {"sha": "a0e0f917648b91a1a7a38d4edf1252dd8e24cf34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e0f917648b91a1a7a38d4edf1252dd8e24cf34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265b89abde76f7e0555712d7c9056c6f6c57ff96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265b89abde76f7e0555712d7c9056c6f6c57ff96", "html_url": "https://github.com/rust-lang/rust/commit/265b89abde76f7e0555712d7c9056c6f6c57ff96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265b89abde76f7e0555712d7c9056c6f6c57ff96/comments", "author": null, "committer": null, "parents": [{"sha": "b5537fa838112192f0ed1f1593c574fe621497a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5537fa838112192f0ed1f1593c574fe621497a6", "html_url": "https://github.com/rust-lang/rust/commit/b5537fa838112192f0ed1f1593c574fe621497a6"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "592fdd7207c7bd96c0cb8a8e5a0e0752c2e1973b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/265b89abde76f7e0555712d7c9056c6f6c57ff96/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265b89abde76f7e0555712d7c9056c6f6c57ff96/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=265b89abde76f7e0555712d7c9056c6f6c57ff96", "patch": "@@ -52,35 +52,71 @@ impl Pos for BytePos {\n     fn to_uint(&self) -> uint { let BytePos(n) = *self; n as uint }\n }\n \n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Add<BytePos, BytePos> for BytePos {\n     fn add(&self, rhs: &BytePos) -> BytePos {\n         BytePos((self.to_uint() + rhs.to_uint()) as u32)\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Add<BytePos, BytePos> for BytePos {\n+    fn add(self, rhs: BytePos) -> BytePos {\n+        BytePos((self.to_uint() + rhs.to_uint()) as u32)\n+    }\n+}\n+\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Sub<BytePos, BytePos> for BytePos {\n     fn sub(&self, rhs: &BytePos) -> BytePos {\n         BytePos((self.to_uint() - rhs.to_uint()) as u32)\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Sub<BytePos, BytePos> for BytePos {\n+    fn sub(self, rhs: BytePos) -> BytePos {\n+        BytePos((self.to_uint() - rhs.to_uint()) as u32)\n+    }\n+}\n+\n impl Pos for CharPos {\n     fn from_uint(n: uint) -> CharPos { CharPos(n) }\n     fn to_uint(&self) -> uint { let CharPos(n) = *self; n }\n }\n \n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Add<CharPos,CharPos> for CharPos {\n     fn add(&self, rhs: &CharPos) -> CharPos {\n         CharPos(self.to_uint() + rhs.to_uint())\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Add<CharPos, CharPos> for CharPos {\n+    fn add(self, rhs: CharPos) -> CharPos {\n+        CharPos(self.to_uint() + rhs.to_uint())\n+    }\n+}\n+\n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Sub<CharPos,CharPos> for CharPos {\n     fn sub(&self, rhs: &CharPos) -> CharPos {\n         CharPos(self.to_uint() - rhs.to_uint())\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Sub<CharPos, CharPos> for CharPos {\n+    fn sub(self, rhs: CharPos) -> CharPos {\n+        CharPos(self.to_uint() - rhs.to_uint())\n+    }\n+}\n+\n /// Spans represent a region of code, used for error reporting. Positions in spans\n /// are *absolute* positions from the beginning of the codemap, not positions\n /// relative to FileMaps. Methods on the CodeMap can be used to relate spans back"}]}