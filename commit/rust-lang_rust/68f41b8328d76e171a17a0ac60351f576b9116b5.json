{"sha": "68f41b8328d76e171a17a0ac60351f576b9116b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZjQxYjgzMjhkNzZlMTcxYTE3YTBhYzYwMzUxZjU3NmI5MTE2YjU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-23T05:41:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-23T05:41:41Z"}, "message": "Add more links between hash and btree collections\n\n- Link from `core::hash` to `HashMap` and `HashSet`\n- Link from HashMap and HashSet to the module-level documentation on\n  when to use the collection\n- Link from several collections to Wikipedia articles on the general\n  concept", "tree": {"sha": "733f03f1f7685ca791c295f4a31f76f429815b07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/733f03f1f7685ca791c295f4a31f76f429815b07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f41b8328d76e171a17a0ac60351f576b9116b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f41b8328d76e171a17a0ac60351f576b9116b5", "html_url": "https://github.com/rust-lang/rust/commit/68f41b8328d76e171a17a0ac60351f576b9116b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f41b8328d76e171a17a0ac60351f576b9116b5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "html_url": "https://github.com/rust-lang/rust/commit/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "a4bcfa33e0dcef91a89ba2bb2a948c50dc8d46e3", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=68f41b8328d76e171a17a0ac60351f576b9116b5", "patch": "@@ -20,15 +20,15 @@ use Entry::*;\n /// We might temporarily have fewer elements during methods.\n pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n \n-// A tree in a `BTreeMap` is a tree in the `node` module with addtional invariants:\n+// A tree in a `BTreeMap` is a tree in the `node` module with additional invariants:\n // - Keys must appear in ascending order (according to the key's type).\n // - If the root node is internal, it must contain at least 1 element.\n // - Every non-root node contains at least MIN_LEN elements.\n //\n-// An empty map may be represented both by the absense of a root node or by a\n+// An empty map may be represented both by the absence of a root node or by a\n // root node that is an empty leaf.\n \n-/// A map based on a B-Tree.\n+/// A map based on a [B-Tree].\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n /// the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\n@@ -62,6 +62,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and\n /// non-termination.\n ///\n+/// [B-Tree]: https://en.wikipedia.org/wiki/B-tree\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell\n ///"}, {"sha": "2ff87f4890727628d2ecc0a31b6313e1f0c80de9", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=68f41b8328d76e171a17a0ac60351f576b9116b5", "patch": "@@ -1,7 +1,13 @@\n //! Generic hashing support.\n //!\n-//! This module provides a generic way to compute the hash of a value. The\n-//! simplest way to make a type hashable is to use `#[derive(Hash)]`:\n+//! This module provides a generic way to compute the [hash] of a value.\n+//! Hashes are most commonly used with [`HashMap`] and [`HashSet`].\n+//!\n+//! [hash]: https://en.wikipedia.org/wiki/Hash_function\n+//! [`HashMap`]: ../../std/collections/struct.HashMap.html\n+//! [`HashSet`]: ../../std/collections/struct.HashSet.html\n+\n+//! The simplest way to make a type hashable is to use `#[derive(Hash)]`:\n //!\n //! # Examples\n //!"}, {"sha": "95cb1fd1668b0a3b981f5cceb932ca1300807bc5", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=68f41b8328d76e171a17a0ac60351f576b9116b5", "patch": "@@ -15,7 +15,7 @@ use crate::iter::{FromIterator, FusedIterator};\n use crate::ops::Index;\n use crate::sys;\n \n-/// A hash map implemented with quadratic probing and SIMD lookup.\n+/// A [hash map] implemented with quadratic probing and SIMD lookup.\n ///\n /// By default, `HashMap` uses a hashing algorithm selected to provide\n /// resistance against HashDoS attacks. The algorithm is randomly seeded, and a\n@@ -60,6 +60,7 @@ use crate::sys;\n /// The original C++ version of SwissTable can be found [here], and this\n /// [CppCon talk] gives an overview of how the algorithm works.\n ///\n+/// [hash map]: crate::collections#use-a-hashmap-when\n /// [hashing algorithms available on crates.io]: https://crates.io/keywords/hasher\n /// [SwissTable]: https://abseil.io/blog/20180927-swisstables\n /// [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h"}, {"sha": "8c801b9f1285db193e8af703a92e155ca5ae3b33", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f41b8328d76e171a17a0ac60351f576b9116b5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=68f41b8328d76e171a17a0ac60351f576b9116b5", "patch": "@@ -19,7 +19,7 @@ use super::map::{map_try_reserve_error, RandomState};\n // for `bucket.val` in the case of HashSet. I suppose we would need HKT\n // to get rid of it properly.\n \n-/// A hash set implemented as a `HashMap` where the value is `()`.\n+/// A [hash set] implemented as a `HashMap` where the value is `()`.\n ///\n /// As with the [`HashMap`] type, a `HashSet` requires that the elements\n /// implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by\n@@ -105,6 +105,7 @@ use super::map::{map_try_reserve_error, RandomState};\n /// // use the values stored in the set\n /// ```\n ///\n+/// [hash set]: crate::collections#use-the-set-variant-of-any-of-these-maps-when\n /// [`HashMap`]: crate::collections::HashMap\n /// [`RefCell`]: crate::cell::RefCell\n /// [`Cell`]: crate::cell::Cell"}]}