{"sha": "6c64f0bff60026107c0535c91daa7d8d192efe38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNjRmMGJmZjYwMDI2MTA3YzA1MzVjOTFkYWE3ZDhkMTkyZWZlMzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-17T22:43:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-17T22:43:26Z"}, "message": "Rollup merge of #47250 - GuillaumeGomez:test-rustdoc-js, r=Mark-Simulacrum\n\nTest rustdoc js\n\nAdd tests for the rustdoc search. It was heavily required because of all the recent breaking changes that happened while I went through improvements in doc search (add search in/for generic search for example).", "tree": {"sha": "f945351e5663ce36722becdde332091acf283bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f945351e5663ce36722becdde332091acf283bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c64f0bff60026107c0535c91daa7d8d192efe38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c64f0bff60026107c0535c91daa7d8d192efe38", "html_url": "https://github.com/rust-lang/rust/commit/6c64f0bff60026107c0535c91daa7d8d192efe38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c64f0bff60026107c0535c91daa7d8d192efe38/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9c784751434c70ddd6719ccda6817c819126f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9c784751434c70ddd6719ccda6817c819126f9", "html_url": "https://github.com/rust-lang/rust/commit/0f9c784751434c70ddd6719ccda6817c819126f9"}, {"sha": "3a7e247acb6cd9c1bc9707d0b37ebba34f788006", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7e247acb6cd9c1bc9707d0b37ebba34f788006", "html_url": "https://github.com/rust-lang/rust/commit/3a7e247acb6cd9c1bc9707d0b37ebba34f788006"}], "stats": {"total": 482, "additions": 435, "deletions": 47}, "files": [{"sha": "deade80334e96b3846129e1c609dd48186e9c4d7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -254,7 +254,9 @@ impl<'a> Builder<'a> {\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n                 check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n-                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri, check::Clippy),\n+                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri, check::Clippy,\n+                check::RustdocJS),\n+\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,\n@@ -443,7 +445,8 @@ impl<'a> Builder<'a> {\n         let out_dir = self.stage_out(compiler, mode);\n         cargo.env(\"CARGO_TARGET_DIR\", out_dir)\n              .arg(cmd)\n-             .arg(\"--target\").arg(target);\n+             .arg(\"--target\")\n+             .arg(target);\n \n         // If we were invoked from `make` then that's already got a jobserver\n         // set up for us so no need to tell Cargo about jobs all over again."}, {"sha": "78ad71172a848dedda6af4a9ecc3b96b8ecec189", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -424,6 +424,43 @@ fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocJS {\n+    pub host: Interned<String>,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for RustdocJS {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/test/rustdoc-js\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(RustdocJS {\n+            host: run.host,\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        if let Some(ref nodejs) = builder.config.nodejs {\n+            let mut command = Command::new(nodejs);\n+            command.args(&[\"src/tools/rustdoc-js/tester.js\", &*self.host]);\n+            builder.ensure(::doc::Std {\n+                target: self.target,\n+                stage: builder.top_stage,\n+            });\n+            builder.run(&mut command);\n+        } else {\n+            println!(\"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\");\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy {\n     host: Interned<String>,"}, {"sha": "2b765fa498e963c79a93eda2c38f73cd2598a6ad", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -419,8 +419,8 @@ impl Step for Standalone {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n-    stage: u32,\n-    target: Interned<String>,\n+    pub stage: u32,\n+    pub target: Interned<String>,\n }\n \n impl Step for Std {"}, {"sha": "a9a5bd5de0552f6f4752917e0b4182d3356354ba", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -353,35 +353,33 @@\n      * This code is an unmodified version of the code written by Marco de Wit\n      * and was found at http://stackoverflow.com/a/18514751/745719\n      */\n-    var levenshtein = (function() {\n-        var row2 = [];\n-        return function(s1, s2) {\n-            if (s1 === s2) {\n-                return 0;\n+    var levenshtein_row2 = [];\n+    function levenshtein(s1, s2) {\n+        if (s1 === s2) {\n+            return 0;\n+        }\n+        var s1_len = s1.length, s2_len = s2.length;\n+        if (s1_len && s2_len) {\n+            var i1 = 0, i2 = 0, a, b, c, c2, row = levenshtein_row2;\n+            while (i1 < s1_len) {\n+                row[i1] = ++i1;\n             }\n-            var s1_len = s1.length, s2_len = s2.length;\n-            if (s1_len && s2_len) {\n-                var i1 = 0, i2 = 0, a, b, c, c2, row = row2;\n-                while (i1 < s1_len) {\n-                    row[i1] = ++i1;\n-                }\n-                while (i2 < s2_len) {\n-                    c2 = s2.charCodeAt(i2);\n-                    a = i2;\n-                    ++i2;\n-                    b = i2;\n-                    for (i1 = 0; i1 < s1_len; ++i1) {\n-                        c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n-                        a = row[i1];\n-                        b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n-                        row[i1] = b;\n-                    }\n+            while (i2 < s2_len) {\n+                c2 = s2.charCodeAt(i2);\n+                a = i2;\n+                ++i2;\n+                b = i2;\n+                for (i1 = 0; i1 < s1_len; ++i1) {\n+                    c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n+                    a = row[i1];\n+                    b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n+                    row[i1] = b;\n                 }\n-                return b;\n             }\n-            return s1_len + s2_len;\n-        };\n-    })();\n+            return b;\n+        }\n+        return s1_len + s2_len;\n+    }\n \n     function initSearch(rawSearchIndex) {\n         var currentResults, index, searchIndex;\n@@ -400,12 +398,20 @@\n         /**\n          * Executes the query and builds an index of results\n          * @param  {[Object]} query     [The user query]\n-         * @param  {[type]} max         [The maximum results returned]\n          * @param  {[type]} searchWords [The list of search words to query\n          *                               against]\n          * @return {[type]}             [A search index of results]\n          */\n-        function execQuery(query, max, searchWords) {\n+        function execQuery(query, searchWords) {\n+            function itemTypeFromName(typename) {\n+                for (var i = 0; i < itemTypes.length; ++i) {\n+                    if (itemTypes[i] === typename) {\n+                        return i;\n+                    }\n+                }\n+                return -1;\n+            }\n+\n             var valLower = query.query.toLowerCase(),\n                 val = valLower,\n                 typeFilter = itemTypeFromName(query.type),\n@@ -1021,9 +1027,8 @@\n             return true;\n         }\n \n-        function getQuery() {\n-            var matches, type, query, raw =\n-                document.getElementsByClassName('search-input')[0].value;\n+        function getQuery(raw) {\n+            var matches, type, query;\n             query = raw;\n \n             matches = query.match(/^(fn|mod|struct|enum|trait|type|const|macro)\\s*:\\s*/i);\n@@ -1227,7 +1232,7 @@\n         }\n \n         function showResults(results) {\n-            var output, query = getQuery();\n+            var output, query = getQuery(document.getElementsByClassName('search-input')[0].value);\n \n             currentResults = query.id;\n             output = '<h1>Results for ' + escape(query.query) +\n@@ -1271,7 +1276,7 @@\n                 resultIndex;\n             var params = getQueryStringParams();\n \n-            query = getQuery();\n+            query = getQuery(document.getElementsByClassName('search-input')[0].value);\n             if (e) {\n                 e.preventDefault();\n             }\n@@ -1293,19 +1298,10 @@\n                 }\n             }\n \n-            results = execQuery(query, 20000, index);\n+            results = execQuery(query, index);\n             showResults(results);\n         }\n \n-        function itemTypeFromName(typename) {\n-            for (var i = 0; i < itemTypes.length; ++i) {\n-                if (itemTypes[i] === typename) {\n-                    return i;\n-                }\n-            }\n-            return -1;\n-        }\n-\n         function buildIndex(rawSearchIndex) {\n             searchIndex = [];\n             var searchWords = [];"}, {"sha": "863437cac91d46340f4b40a2acff9c4d804803be", "filename": "src/test/rustdoc-js/basic.js", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'String';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string', 'name': 'String' },\n+        { 'path': 'std::ffi', 'name': 'OsString' },\n+        { 'path': 'std::ffi', 'name': 'CString' },\n+    ],\n+    'in_args': [\n+        { 'path': 'std::str', 'name': 'eq' },\n+    ],\n+    'returned': [\n+        { 'path': 'std::string::String', 'name': 'add' },\n+    ],\n+};"}, {"sha": "3dac983b11b0ef0a27725dcf12a1c01d17d8ba18", "filename": "src/test/rustdoc-js/enum-option.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fenum-option.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fenum-option.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fenum-option.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'enum:Option';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::option', 'name': 'Option' },\n+    ],\n+};"}, {"sha": "10310d5eaf7b929dd6da6b009b4e190d7b54ca7c", "filename": "src/test/rustdoc-js/fn-forget.js", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Ffn-forget.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Ffn-forget.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffn-forget.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'fn:forget';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::mem', 'name': 'forget' },\n+        { 'path': 'std::fmt', 'name': 'format' },\n+    ],\n+};"}, {"sha": "920620a9aeed57489d1a4fbeda8b5d3446ab8dab", "filename": "src/test/rustdoc-js/from_u.js", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffrom_u.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'from_u';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::char', 'name': 'from_u32' },\n+        { 'path': 'std::str', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::boxed::Box', 'name': 'from_unique' },\n+        { 'path': 'std::i32', 'name': 'from_unsigned' },\n+        { 'path': 'std::i128', 'name': 'from_unsigned' },\n+    ],\n+};"}, {"sha": "811ba3474afa0bc6b82c8afb11da2f544183860b", "filename": "src/test/rustdoc-js/macro-print.js", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fmacro-print.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fmacro-print.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fmacro-print.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'macro:print';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'print' },\n+        { 'path': 'std', 'name': 'eprint' },\n+        { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'eprintln' },\n+    ],\n+};"}, {"sha": "3d08ee3736612a58e6b96a165cf2c206297db402", "filename": "src/test/rustdoc-js/string-from_ut.js", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'String::from_ut';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8_lossy' },\n+        { 'path': 'std::string::String', 'name': 'from_utf16_lossy' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8_unchecked' },\n+    ],\n+};"}, {"sha": "a91bc2d0da288e949fded9fdce7bcd34c68a3a2e", "filename": "src/test/rustdoc-js/struct-vec.js", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'struct:Vec';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::vec', 'name': 'Vec' },\n+        { 'path': 'std::collections', 'name': 'VecDeque' },\n+        { 'path': 'alloc::raw_vec', 'name': 'RawVec' },\n+    ],\n+};"}, {"sha": "7c9ee2a49430bee0e3d9eabf3976f743ac7a0295", "filename": "src/tools/rustdoc-js/tester.js", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/6c64f0bff60026107c0535c91daa7d8d192efe38/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=6c64f0bff60026107c0535c91daa7d8d192efe38", "patch": "@@ -0,0 +1,210 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const fs = require('fs');\n+\n+const TEST_FOLDER = 'src/test/rustdoc-js/';\n+\n+// Stupid function extractor based on indent.\n+function extractFunction(content, functionName) {\n+    var x = content.split('\\n');\n+    var in_func = false;\n+    var indent = 0;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (in_func === false) {\n+            var splitter = \"function \" + functionName + \"(\";\n+            if (x[i].trim().startsWith(splitter)) {\n+                in_func = true;\n+                indent = x[i].split(splitter)[0].length;\n+                lines.push(x[i]);\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].trim() === \"}\" && x[i].split(\"}\")[0].length === indent) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var x = content.split('\\n');\n+    var found_var = false;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (found_var === false) {\n+            var splitter = \"var \" + arrayName + \" = [\";\n+            if (x[i].trim().startsWith(splitter)) {\n+                found_var = true;\n+                i -= 1;\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].endsWith('];')) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var x = content.split('\\n');\n+    var found_var = false;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (found_var === false) {\n+            var splitter = \"var \" + varName + \" = \";\n+            if (x[i].trim().startsWith(splitter)) {\n+                found_var = true;\n+                i -= 1;\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].endsWith(';')) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('enable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+function main(argv) {\n+    if (argv.length !== 3) {\n+        console.error(\"Expected toolchain to check as argument (for example 'x86_64-apple-darwin'\");\n+        return 1;\n+    }\n+    var toolchain = argv[2];\n+\n+    var mainJs = readFile(\"build/\" + toolchain + \"/doc/main.js\");\n+    var searchIndex = readFile(\"build/\" + toolchain + \"/doc/search-index.js\").split(\"\\n\");\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"TY_PRIMITIVE\", \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"levenshtein\", \"validateResult\", \"getQuery\", \"buildIndex\", \"execQuery\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    var errors = 0;\n+\n+    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n+        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+        const expected = loadedFile.EXPECTED;\n+        const query = loadedFile.QUERY;\n+        var results = loaded.execQuery(loaded.getQuery(query), index);\n+        process.stdout.write('Checking \"' + file + '\" ... ');\n+        var error_text = [];\n+        for (var key in expected) {\n+            if (!expected.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            if (!results.hasOwnProperty(key)) {\n+                error_text.push('==> Unknown key \"' + key + '\"');\n+                break;\n+            }\n+            var entry = expected[key];\n+            var found = false;\n+            for (var i = 0; i < entry.length; ++i) {\n+                if (lookForEntry(entry[i], results[key]) === true) {\n+                    found = true;\n+                } else {\n+                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                    JSON.stringify(entry[i]) + \"'\");\n+                }\n+            }\n+        }\n+        if (error_text.length !== 0) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(error_text.join(\"\\n\"));\n+        } else {\n+            console.log(\"OK\");\n+        }\n+    });\n+    return errors;\n+}\n+\n+process.exit(main(process.argv));"}]}