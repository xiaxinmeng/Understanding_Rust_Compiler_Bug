{"sha": "33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDAwZmJiY2QyNmNhZjk4ZmUzMTZiNGYyYWI4MWVmZGM5YzQwZjI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-31T17:39:47Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-05T19:53:40Z"}, "message": "Modify the script to allow for running docker images on Windows 7.", "tree": {"sha": "f42e62e46f4aad4935b7364087b38d725ac86706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f42e62e46f4aad4935b7364087b38d725ac86706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAln/bEQACgkQ/vbIBR0O\nATxjVA/6A7w3jm8mEi9R1sl+luTaxq4CZzrKBjPVYfr62Oyg0vWALlVv1aRjEirk\n9FBWNg5h+/UzAoeZpww60CxNhutcztgrest+f+jTESU3weUwL5H7cSNcPIekZvTY\nKxki/sXMj4UPAjpbrH1+zRKwUknAdL0v0Yy03GYiwLD5/oiY+ZSTfh6jYJAzvWju\nUE0VCKOWsNAehpjwF6LAC4nxOgfu17FnDyOR8Cd2jNhxlXIQ4qy+PgMqIBhd3+rS\nD6ft/vcuYoKxAVKqfbl2+vKAaxtbfUUn2hOtrlTmf1rJqLNS2LhiDOCYbCTMgr2f\n1SpxUtA6xlZGMEZXFoCKicoGTccEqUpoYiqnvRQ3s9TPCxv5du43ag2N6kE9LJ+W\nqtuBBnw9mqNOjX37lKC+4LxozhkxGANyzycWCCWeSHp+FJrTm1fdAH6hverEu7Nl\nFvbFb6/b7KQ5I51Cm2GaGokvV2L1QwuIyVdSDKL9KLdEgP5QUEP+J3BoyhLoBb7E\n1eCbGUzlh1omBL4CzvA6r67DUg6Ddjo1uzbCwBdrXVDGLkrMUOTJ8UpzZzmObAjV\nyMSgB/kdPokJzpiVfifrYZ9mR0Q36zCm4pwpeB/Pipp5OcDQBxdyN2jE8UlnEo4e\ntOV6RuF3804Bj7jThoTdj46fBAVZI9fPB3YwJtlNHrxYOgdSIWg=\n=LPqc\n-----END PGP SIGNATURE-----", "payload": "tree f42e62e46f4aad4935b7364087b38d725ac86706\nparent 1b5aaf22e88cdca0583be5bacdbc196daafd8f3e\nauthor kennytm <kennytm@gmail.com> 1509471587 +0800\ncommitter kennytm <kennytm@gmail.com> 1509911620 +0800\n\nModify the script to allow for running docker images on Windows 7.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "html_url": "https://github.com/rust-lang/rust/commit/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5aaf22e88cdca0583be5bacdbc196daafd8f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5aaf22e88cdca0583be5bacdbc196daafd8f3e", "html_url": "https://github.com/rust-lang/rust/commit/1b5aaf22e88cdca0583be5bacdbc196daafd8f3e"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "922deba7367e97442f491b180757caa4069dace3", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "patch": "@@ -22,6 +22,48 @@ Images will output artifacts in an `obj` dir at the root of a repository.\n - `scripts` contains files shared by docker images\n - `disabled` contains images that are not built on travis\n \n+## Docker Toolbox on Windows\n+\n+For Windows before Windows 10, the docker images can be run on Windows via\n+[Docker Toolbox]. There are several preparation needs to be made before running\n+a Docker image.\n+\n+1. Stop the virtual machine from the terminal with `docker-machine stop`\n+\n+2. If your Rust source is placed outside of `C:\\Users\\**`, e.g. if you place the\n+    repository in the `E:\\rust` folder, please add a shared folder from\n+    VirtualBox by:\n+\n+    1. Select the \"default\" virtual machine inside VirtualBox, then click\n+        \"Settings\"\n+    2. Go to \"Shared Folders\", click \"Add shared foldrer\" (the folder icon with\n+        a plus sign), fill in the following information, then click \"OK\":\n+\n+        * Folder path: `E:\\rust`\n+        * Folder name: `e/rust`\n+        * Read-only: \u2610 *unchecked*\n+        * Auto-mount: \u2611 *checked*\n+        * Make Permanant: \u2611 *checked*\n+\n+3. VirtualBox might not support creating symbolic links inside a shared folder\n+    by default. You can enable it manually by running these from `cmd.exe`:\n+\n+    ```bat\n+    cd \"C:\\Program Files\\Oracle\\VirtualBox\"\n+    VBoxManage setextradata default VBoxInternal2/SharedFoldersEnableSymlinksCreate/e/rust 1\n+    ::                                                                              ^~~~~~\n+    ::                                                                              folder name\n+    ```\n+\n+4. Restart the virtual machine from terminal with `docker-machine start`.\n+\n+To run the image,\n+\n+1. Launch the \"Docker Quickstart Terminal\".\n+2. Execute `./src/ci/docker/run.sh $image_name` as explained at the beginning.\n+\n+[Docker Toolbox]: https://www.docker.com/products/docker-toolbox\n+\n ## Cross toolchains\n \n A number of these images take quite a long time to compile as they're building\n@@ -137,7 +179,7 @@ For targets: `armv7-unknown-linux-gnueabihf`\n     libraries like jemalloc. See the mk/cfg/arm(v7)-uknown-linux-gnueabi{,hf}.mk\n     file in Rust's source code.\n \n-## `aarch64-linux-gnu.config`\n+### `aarch64-linux-gnu.config`\n \n For targets: `aarch64-unknown-linux-gnu`\n \n@@ -150,7 +192,7 @@ For targets: `aarch64-unknown-linux-gnu`\n - C compiler > gcc version = 5.2.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-## `powerpc-linux-gnu.config`\n+### `powerpc-linux-gnu.config`\n \n For targets: `powerpc-unknown-linux-gnu`\n \n@@ -165,7 +207,7 @@ For targets: `powerpc-unknown-linux-gnu`\n - C compiler > gcc version = 4.9.3\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-## `powerpc64-linux-gnu.config`\n+### `powerpc64-linux-gnu.config`\n \n For targets: `powerpc64-unknown-linux-gnu`\n \n@@ -184,7 +226,7 @@ For targets: `powerpc64-unknown-linux-gnu`\n \n (+) These CPU options match the configuration of the toolchains in RHEL6.\n \n-## `s390x-linux-gnu.config`\n+### `s390x-linux-gnu.config`\n \n For targets: `s390x-unknown-linux-gnu`\n "}, {"sha": "dc02310b4f21ff102ac39550ee0f89852a68e9e0", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "patch": "@@ -11,6 +11,8 @@\n \n set -e\n \n+export MSYS_NO_PATHCONV=1\n+\n script=`cd $(dirname $0) && pwd`/`basename $0`\n image=$1\n \n@@ -25,12 +27,19 @@ travis_fold start build_docker\n travis_time_start\n \n if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n+    dockerfile=\"$docker_dir/$image/Dockerfile\"\n+    if [ -x /usr/bin/cygpath ]; then\n+        context=\"`cygpath -w $docker_dir`\"\n+        dockerfile=\"`cygpath -w $dockerfile`\"\n+    else\n+        context=\"$docker_dir\"\n+    fi\n     retry docker \\\n       build \\\n       --rm \\\n       -t rust-ci \\\n-      -f \"$docker_dir/$image/Dockerfile\" \\\n-      \"$docker_dir\"\n+      -f \"$dockerfile\" \\\n+      \"$context\"\n elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n     if [ -n \"$TRAVIS_OS_NAME\" ]; then\n         echo Cannot run disabled images on travis!"}, {"sha": "f6e42c8dc17b1908a6f5787f12ce82f18baaf65c", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33400fbbcd26caf98fe316b4f2ab81efdc9c40f2/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=33400fbbcd26caf98fe316b4f2ab81efdc9c40f2", "patch": "@@ -31,9 +31,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n     if let Ok(mut file) = fs::File::open(\"/proc/version\") {\n         let mut contents = String::new();\n         file.read_to_string(&mut contents).unwrap();\n-        // Probably on Windows Linux Subsystem, all files will be marked as\n-        // executable, so skip checking.\n-        if contents.contains(\"Microsoft\") {\n+        // Probably on Windows Linux Subsystem or Docker via VirtualBox,\n+        // all files will be marked as executable, so skip checking.\n+        if contents.contains(\"Microsoft\") || contents.contains(\"boot2docker\") {\n             return;\n         }\n     }"}]}