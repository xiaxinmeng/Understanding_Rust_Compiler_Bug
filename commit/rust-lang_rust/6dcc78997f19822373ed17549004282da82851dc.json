{"sha": "6dcc78997f19822373ed17549004282da82851dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkY2M3ODk5N2YxOTgyMjM3M2VkMTc1NDkwMDQyODJkYTgyODUxZGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-18T20:31:25Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-18T20:30:00Z"}, "message": "Add more tests for raw_ref_op", "tree": {"sha": "1d8d2f7290e5c286804aecf8679d0e0ad41bd175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d8d2f7290e5c286804aecf8679d0e0ad41bd175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcc78997f19822373ed17549004282da82851dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc78997f19822373ed17549004282da82851dc", "html_url": "https://github.com/rust-lang/rust/commit/6dcc78997f19822373ed17549004282da82851dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc78997f19822373ed17549004282da82851dc/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15931947f59e0010b73469711cb811f09aaf0cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/15931947f59e0010b73469711cb811f09aaf0cdd", "html_url": "https://github.com/rust-lang/rust/commit/15931947f59e0010b73469711cb811f09aaf0cdd"}], "stats": {"total": 758, "additions": 590, "deletions": 168}, "files": [{"sha": "6595691ce786ca3110da5bcc7bd2a3f890c58803", "filename": "src/librustc_error_codes/error_codes/E0745.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Flibrustc_error_codes%2Ferror_codes%2FE0745.md", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Flibrustc_error_codes%2Ferror_codes%2FE0745.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0745.md?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -11,7 +11,7 @@ fn temp_address() {\n \n To avoid the error, first bind the temporary to a named local variable.\n \n-```ignore (not yet implemented)\n+```\n # #![feature(raw_ref_op)]\n fn temp_address() {\n     let val = 2;"}, {"sha": "6ccc434a1e79ca1ce0741d9509aec476fe7b1f8c", "filename": "src/test/pretty/raw-address-of.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fpretty%2Fraw-address-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fpretty%2Fraw-address-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-address-of.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,12 @@\n+// pp-exact\n+#![feature(raw_ref_op)]\n+\n+const C_PTR: () = { let a = 1; &raw const a; };\n+static S_PTR: () = { let b = false; &raw const b; };\n+\n+fn main() {\n+    let x = 123;\n+    let mut y = 345;\n+    let c_p = &raw const x;\n+    let parens = unsafe { *(&raw mut (y)) };\n+}"}, {"sha": "f25fd7f66b3ccdaabfd6a91889578dd7a9d21948", "filename": "src/test/ui/borrowck/borrow-raw-address-of-borrowed.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,22 @@\n+#![feature(raw_ref_op)]\n+\n+fn address_of_shared() {\n+    let mut x = 0;\n+    let y = &x;\n+\n+    let q = &raw mut x;                 //~ ERROR cannot borrow\n+\n+    drop(y);\n+}\n+\n+fn address_of_mutably_borrowed() {\n+    let mut x = 0;\n+    let y = &mut x;\n+\n+    let p = &raw const x;               //~ ERROR cannot borrow\n+    let q = &raw mut x;                 //~ ERROR cannot borrow\n+\n+    drop(y);\n+}\n+\n+fn main() {}"}, {"sha": "ff461b748be88863007d440cb9700f427ca3f852", "filename": "src/test/ui/borrowck/borrow-raw-address-of-borrowed.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,40 @@\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrow-raw-address-of-borrowed.rs:7:13\n+   |\n+LL |     let y = &x;\n+   |             -- immutable borrow occurs here\n+LL | \n+LL |     let q = &raw mut x;\n+   |             ^^^^^^^^^^ mutable borrow occurs here\n+LL | \n+LL |     drop(y);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrow-raw-address-of-borrowed.rs:16:13\n+   |\n+LL |     let y = &mut x;\n+   |             ------ mutable borrow occurs here\n+LL | \n+LL |     let p = &raw const x;\n+   |             ^^^^^^^^^^^^ immutable borrow occurs here\n+...\n+LL |     drop(y);\n+   |          - mutable borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrow-raw-address-of-borrowed.rs:17:13\n+   |\n+LL |     let y = &mut x;\n+   |             ------ first mutable borrow occurs here\n+...\n+LL |     let q = &raw mut x;\n+   |             ^^^^^^^^^^ second mutable borrow occurs here\n+LL | \n+LL |     drop(y);\n+   |          - first borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0499, E0502.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "e381384fe65ecc69102e2c52393e8fa7df74ef96", "filename": "src/test/ui/borrowck/borrow-raw-address-of-deref-mutability-ok.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability-ok.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+#![feature(raw_ref_op)]\n+\n+fn raw_reborrow() {\n+    let x = &0;\n+    let y = &mut 0;\n+\n+    let p = &raw const *x;\n+    let r = &raw const *y;\n+    let s = &raw mut *y;\n+}\n+\n+unsafe fn raw_reborrow_of_raw() {\n+    let x = &0 as *const i32;\n+    let y = &mut 0 as *mut i32;\n+\n+    let p = &raw const *x;\n+    let r = &raw const *y;\n+    let s = &raw mut *y;\n+}\n+\n+fn main() {}"}, {"sha": "712873528b5f1cc04edb4948dc6c60f1a6a82d4c", "filename": "src/test/ui/borrowck/borrow-raw-address-of-deref-mutability.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,17 @@\n+// Check that `&raw mut` cannot be used to turn a `&T` into a `*mut T`.\n+\n+#![feature(raw_ref_op)]\n+\n+fn raw_reborrow() {\n+    let x = &0;\n+\n+    let q = &raw mut *x;                //~ ERROR cannot borrow\n+}\n+\n+unsafe fn raw_reborrow_of_raw() {\n+    let x = &0 as *const i32;\n+\n+    let q = &raw mut *x;                //~ ERROR cannot borrow\n+}\n+\n+fn main() {}"}, {"sha": "31af38507c7d766d1ebcb4a562bc1181f5861691", "filename": "src/test/ui/borrowck/borrow-raw-address-of-deref-mutability.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,21 @@\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n+  --> $DIR/borrow-raw-address-of-deref-mutability.rs:8:13\n+   |\n+LL |     let x = &0;\n+   |             -- help: consider changing this to be a mutable reference: `&mut 0`\n+LL | \n+LL |     let q = &raw mut *x;\n+   |             ^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n+  --> $DIR/borrow-raw-address-of-deref-mutability.rs:14:13\n+   |\n+LL |     let x = &0 as *const i32;\n+   |             -- help: consider changing this to be a mutable pointer: `&mut 0`\n+LL | \n+LL |     let q = &raw mut *x;\n+   |             ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "e1cf2dc53869ba7c0039e2119998bf64ef43d863", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability-ok.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability-ok.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,44 @@\n+// check-pass\n+\n+#![feature(raw_ref_op)]\n+\n+fn mutable_address_of() {\n+    let mut x = 0;\n+    let y = &raw mut x;\n+}\n+\n+fn mutable_address_of_closure() {\n+    let mut x = 0;\n+    let mut f = || {\n+        let y = &raw mut x;\n+    };\n+    f();\n+}\n+\n+fn const_address_of_closure() {\n+    let x = 0;\n+    let f = || {\n+        let y = &raw const x;\n+    };\n+    f();\n+}\n+\n+fn make_fn<F: Fn()>(f: F) -> F { f }\n+\n+fn const_address_of_fn_closure() {\n+    let x = 0;\n+    let f = make_fn(|| {\n+        let y = &raw const x;\n+    });\n+    f();\n+}\n+\n+fn const_address_of_fn_closure_move() {\n+    let x = 0;\n+    let f = make_fn(move || {\n+        let y = &raw const x;\n+    });\n+    f();\n+}\n+\n+fn main() {}"}, {"sha": "320c54b806a724da71395206444510e9898b0184", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,42 @@\n+#![feature(raw_ref_op)]\n+\n+fn mutable_address_of() {\n+    let x = 0;\n+    let y = &raw mut x;                 //~ ERROR cannot borrow\n+}\n+\n+fn mutable_address_of_closure() {\n+    let x = 0;\n+    let mut f = || {\n+        let y = &raw mut x;             //~ ERROR cannot borrow\n+    };\n+    f();\n+}\n+\n+fn mutable_address_of_imm_closure() {\n+    let mut x = 0;\n+    let f = || {\n+        let y = &raw mut x;\n+    };\n+    f();                                //~ ERROR cannot borrow\n+}\n+\n+fn make_fn<F: Fn()>(f: F) -> F { f }\n+\n+fn mutable_address_of_fn_closure() {\n+    let mut x = 0;\n+    let f = make_fn(|| {\n+        let y = &raw mut x;             //~ ERROR cannot borrow\n+    });\n+    f();\n+}\n+\n+fn mutable_address_of_fn_closure_move() {\n+    let mut x = 0;\n+    let f = make_fn(move || {\n+        let y = &raw mut x;             //~ ERROR cannot borrow\n+    });\n+    f();\n+}\n+\n+fn main() {}"}, {"sha": "cf01c362d50bc171bbf682ce2d6688620541bdce", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,59 @@\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/borrow-raw-address-of-mutability.rs:5:13\n+   |\n+LL |     let x = 0;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     let y = &raw mut x;\n+   |             ^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/borrow-raw-address-of-mutability.rs:11:17\n+   |\n+LL |     let x = 0;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     let mut f = || {\n+LL |         let y = &raw mut x;\n+   |                 ^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n+  --> $DIR/borrow-raw-address-of-mutability.rs:21:5\n+   |\n+LL |     let f = || {\n+   |         - help: consider changing this to be mutable: `mut f`\n+...\n+LL |     f();\n+   |     ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-raw-address-of-mutability.rs:29:17\n+   |\n+LL |         let y = &raw mut x;\n+   |                 ^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/borrow-raw-address-of-mutability.rs:28:21\n+   |\n+LL |       let f = make_fn(|| {\n+   |  _____________________^\n+LL | |         let y = &raw mut x;\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-raw-address-of-mutability.rs:37:17\n+   |\n+LL |         let y = &raw mut x;\n+   |                 ^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/borrow-raw-address-of-mutability.rs:36:21\n+   |\n+LL |       let f = make_fn(move || {\n+   |  _____________________^\n+LL | |         let y = &raw mut x;\n+LL | |     });\n+   | |_____^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "60c7c31daca78aa368f85585effcdf7cf53415ad", "filename": "src/test/ui/consts/const-address-of-interior-mut.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,16 @@\n+#![feature(raw_ref_op)]\n+\n+use std::cell::Cell;\n+\n+const A: () = { let x = Cell::new(2); &raw const x; };      //~ ERROR interior mutability\n+\n+static B: () = { let x = Cell::new(2); &raw const x; };     //~ ERROR interior mutability\n+\n+static mut C: () = { let x = Cell::new(2); &raw const x; }; //~ ERROR interior mutability\n+\n+const fn foo() {\n+    let x = Cell::new(0);\n+    let y = &raw const x;                                   //~ ERROR interior mutability\n+}\n+\n+fn main() {}"}, {"sha": "f15174c33b3a019b60a10a87b7977e4a6ea57572", "filename": "src/test/ui/consts/const-address-of-interior-mut.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-interior-mut.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,27 @@\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/const-address-of-interior-mut.rs:5:39\n+   |\n+LL | const A: () = { let x = Cell::new(2); &raw const x; };\n+   |                                       ^^^^^^^^^^^^\n+\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/const-address-of-interior-mut.rs:7:40\n+   |\n+LL | static B: () = { let x = Cell::new(2); &raw const x; };\n+   |                                        ^^^^^^^^^^^^\n+\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/const-address-of-interior-mut.rs:9:44\n+   |\n+LL | static mut C: () = { let x = Cell::new(2); &raw const x; };\n+   |                                            ^^^^^^^^^^^^\n+\n+error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+  --> $DIR/const-address-of-interior-mut.rs:13:13\n+   |\n+LL |     let y = &raw const x;\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0492`."}, {"sha": "fe9188cb4904c99eed1022964c1a10a62467024d", "filename": "src/test/ui/consts/const-address-of-mut.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,14 @@\n+#![feature(raw_ref_op)]\n+\n+const A: () = { let mut x = 2; &raw mut x; };           //~ ERROR `&raw mut` is not allowed\n+\n+static B: () = { let mut x = 2; &raw mut x; };          //~ ERROR `&raw mut` is not allowed\n+\n+static mut C: () = { let mut x = 2; &raw mut x; };      //~ ERROR `&raw mut` is not allowed\n+\n+const fn foo() {\n+    let mut x = 0;\n+    let y = &raw mut x;                                 //~ ERROR `&raw mut` is not allowed\n+}\n+\n+fn main() {}"}, {"sha": "15f2296c42c25cbbe6bf78bcd8a0f808f80865c2", "filename": "src/test/ui/consts/const-address-of-mut.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: `&raw mut` is not allowed in constants\n+  --> $DIR/const-address-of-mut.rs:3:32\n+   |\n+LL | const A: () = { let mut x = 2; &raw mut x; };\n+   |                                ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: `&raw mut` is not allowed in statics\n+  --> $DIR/const-address-of-mut.rs:5:33\n+   |\n+LL | static B: () = { let mut x = 2; &raw mut x; };\n+   |                                 ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: `&raw mut` is not allowed in statics\n+  --> $DIR/const-address-of-mut.rs:7:37\n+   |\n+LL | static mut C: () = { let mut x = 2; &raw mut x; };\n+   |                                     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: `&raw mut` is not allowed in constant functions\n+  --> $DIR/const-address-of-mut.rs:11:13\n+   |\n+LL |     let y = &raw mut x;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ba162f2a2badf9a8871209a733677d3b31b8be23", "filename": "src/test/ui/consts/const-address-of.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(raw_ref_op)]\n+\n+const A: *const i32 = &raw const *&2;\n+static B: () = { &raw const *&2; };\n+static mut C: *const i32 = &raw const *&2;\n+const D: () = { let x = 2; &raw const x; };\n+static E: () = { let x = 2; &raw const x; };\n+static mut F: () = { let x = 2; &raw const x; };\n+\n+const fn const_ptr() {\n+    let x = 0;\n+    let ptr = &raw const x;\n+    let r = &x;\n+    let ptr2 = &raw const *r;\n+}\n+\n+fn main() {}"}, {"sha": "130ba9283b1d97b9bfd2d65393779f4d3b40990b", "filename": "src/test/ui/consts/const-mut-refs/const_mut_address_of.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![feature(const_mut_refs)]\n+#![feature(const_fn)]\n+#![feature(raw_ref_op)]\n+\n+struct Foo {\n+    x: usize\n+}\n+\n+const fn foo() -> Foo {\n+    Foo { x: 0 }\n+}\n+\n+impl Foo {\n+    const fn bar(&mut self) -> *mut usize {\n+        &raw mut self.x\n+    }\n+}\n+\n+const fn baz(foo: &mut Foo)-> *mut usize {\n+    &raw mut foo.x\n+}\n+\n+const _: () = {\n+    foo().bar();\n+    baz(&mut foo());\n+};\n+\n+fn main() {}"}, {"sha": "f8506d70b24980429d78376d4182953b23293c46", "filename": "src/test/ui/consts/min_const_fn/address_of.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,17 @@\n+#![feature(raw_ref_op)]\n+\n+const fn mutable_address_of_in_const() {\n+    let mut a = 0;\n+    let b = &raw mut a;         //~ ERROR `&raw mut` is not allowed\n+}\n+\n+struct X;\n+\n+impl X {\n+    const fn inherent_mutable_address_of_in_const() {\n+        let mut a = 0;\n+        let b = &raw mut a;     //~ ERROR `&raw mut` is not allowed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3554b8112b168eb16c735df1058f8a1c8deb93ef", "filename": "src/test/ui/consts/min_const_fn/address_of.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `&raw mut` is not allowed in constant functions\n+  --> $DIR/address_of.rs:5:13\n+   |\n+LL |     let b = &raw mut a;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: `&raw mut` is not allowed in constant functions\n+  --> $DIR/address_of.rs:13:17\n+   |\n+LL |         let b = &raw mut a;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "3db19e9cde8f069c97dde9ab4f03adc46ea568d5", "filename": "src/test/ui/consts/min_const_fn/address_of_const.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of_const.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(raw_ref_op)]\n+\n+const fn const_address_of_in_const() {\n+    let mut a = 0;\n+    let b = &raw const a;\n+}\n+\n+struct X;\n+\n+impl X {\n+    const fn inherent_const_address_of_in_const() {\n+        let mut a = 0;\n+        let b = &raw const a;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dd8dbda6d43031e53b650787d91bbd2ed9008b69", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -3,7 +3,7 @@\n // Exercise the unused_mut attribute in some positive and negative cases\n \n #![deny(unused_mut)]\n-#![feature(async_closure)]\n+#![feature(async_closure, raw_ref_op)]\n \n async fn baz_async(\n     mut a: i32,\n@@ -177,6 +177,12 @@ fn main() {\n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n     let mut _allowed = 1;\n+\n+    let mut raw_address_of_mut = 1; // OK\n+    let mut_ptr = &raw mut raw_address_of_mut;\n+\n+    let mut raw_address_of_const = 1; //~ ERROR: variable does not need to be mutable\n+    let const_ptr = &raw const raw_address_of_const;\n }\n \n fn callback<F>(f: F) where F: FnOnce() {}"}, {"sha": "c1ab0ab33d4cc528ed735fbe5f3600fb933547ca", "filename": "src/test/ui/lint/lint-unused-mut-variables.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -180,6 +180,14 @@ LL |     let mut v : &mut Vec<()> = &mut vec![];\n    |         |\n    |         help: remove this `mut`\n \n+error: variable does not need to be mutable\n+  --> $DIR/lint-unused-mut-variables.rs:184:9\n+   |\n+LL |     let mut raw_address_of_const = 1;\n+   |         ----^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: remove this `mut`\n+\n error: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:106:13\n    |\n@@ -197,18 +205,18 @@ LL |     fn mut_ref_arg(mut arg : &mut [u8]) -> &mut [u8] {\n    |                    help: remove this `mut`\n \n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:196:9\n+  --> $DIR/lint-unused-mut-variables.rs:202:9\n    |\n LL |     let mut b = vec![2];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: lint level defined here\n-  --> $DIR/lint-unused-mut-variables.rs:192:8\n+  --> $DIR/lint-unused-mut-variables.rs:198:8\n    |\n LL | #[deny(unused_mut)]\n    |        ^^^^^^^^^^\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "812d23fb58023d55be9bb5829e9949c53e394f28", "filename": "src/test/ui/packed/packed-struct-address-of-element.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -0,0 +1,37 @@\n+// run-pass\n+#![allow(dead_code)]\n+#![deny(safe_packed_borrows)]\n+#![feature(raw_ref_op)]\n+// ignore-emscripten weird assertion?\n+\n+#[repr(packed)]\n+struct Foo1 {\n+    bar: u8,\n+    baz: usize\n+}\n+\n+#[repr(packed(2))]\n+struct Foo2 {\n+    bar: u8,\n+    baz: usize\n+}\n+\n+#[repr(C, packed(4))]\n+struct Foo4C {\n+    bar: u8,\n+    baz: usize\n+}\n+\n+pub fn main() {\n+    let foo = Foo1 { bar: 1, baz: 2 };\n+    let brw = &raw const foo.baz;\n+    unsafe { assert_eq!(brw.read_unaligned(), 2); }\n+\n+    let foo = Foo2 { bar: 1, baz: 2 };\n+    let brw = &raw const foo.baz;\n+    unsafe { assert_eq!(brw.read_unaligned(), 2); }\n+\n+    let mut foo = Foo4C { bar: 1, baz: 2 };\n+    let brw = &raw mut foo.baz;\n+    unsafe { assert_eq!(brw.read_unaligned(), 2); }\n+}"}, {"sha": "0072b6191ebb0ccac0d9937be3e7f1559d9d56db", "filename": "src/test/ui/packed/packed-struct-borrow-element.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// run-pass (note: this is spec-UB, but it works for now)\n #![allow(dead_code)]\n // ignore-emscripten weird assertion?\n "}, {"sha": "0c6e23a00d52501e7b89c0b248e72a1008789707", "filename": "src/test/ui/raw-ref-op/raw-ref-op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -1,11 +1,11 @@\n-// FIXME(#64490): make this run-pass\n+// run-pass\n \n #![feature(raw_ref_op)]\n \n fn main() {\n     let mut x = 123;\n-    let c_p = &raw const x;                     //~ ERROR not yet implemented\n-    let m_p = &raw mut x;                       //~ ERROR not yet implemented\n+    let c_p = &raw const x;\n+    let m_p = &raw mut x;\n     let i_r = &x;\n     assert!(c_p == i_r);\n     assert!(c_p == m_p);"}, {"sha": "04c59c95fca1eba606186ec23aa508809da44e9c", "filename": "src/test/ui/raw-ref-op/raw-ref-op.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15931947f59e0010b73469711cb811f09aaf0cdd/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15931947f59e0010b73469711cb811f09aaf0cdd/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-op.stderr?ref=15931947f59e0010b73469711cb811f09aaf0cdd", "patch": "@@ -1,18 +0,0 @@\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-op.rs:7:15\n-   |\n-LL |     let c_p = &raw const x;\n-   |               ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-op.rs:8:15\n-   |\n-LL |     let m_p = &raw mut x;\n-   |               ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a814003aebf20c08a43bfdd8f56c288493e0753e", "filename": "src/test/ui/raw-ref-op/raw-ref-temp-deref.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -1,4 +1,4 @@\n-// FIXME(#64490) This should be check-pass\n+// check-pass\n // Check that taking the address of a place that contains a dereference is\n // allowed.\n #![feature(raw_ref_op, type_ascription)]\n@@ -10,15 +10,15 @@ const SLICE_REF: &[i32] = &[5, 6];\n \n fn main() {\n     // These are all OK, we're not taking the address of the temporary\n-    let deref_ref = &raw const *PAIR_REF;                       //~ ERROR not yet implemented\n-    let field_deref_ref = &raw const PAIR_REF.0;                //~ ERROR not yet implemented\n-    let deref_ref = &raw const *ARRAY_REF;                      //~ ERROR not yet implemented\n-    let index_deref_ref = &raw const ARRAY_REF[0];              //~ ERROR not yet implemented\n-    let deref_ref = &raw const *SLICE_REF;                      //~ ERROR not yet implemented\n-    let index_deref_ref = &raw const SLICE_REF[1];              //~ ERROR not yet implemented\n+    let deref_ref = &raw const *PAIR_REF;\n+    let field_deref_ref = &raw const PAIR_REF.0;\n+    let deref_ref = &raw const *ARRAY_REF;\n+    let index_deref_ref = &raw const ARRAY_REF[0];\n+    let deref_ref = &raw const *SLICE_REF;\n+    let index_deref_ref = &raw const SLICE_REF[1];\n \n     let x = 0;\n-    let ascribe_ref = &raw const (x: i32);                      //~ ERROR not yet implemented\n-    let ascribe_deref = &raw const (*ARRAY_REF: [i32; 2]);      //~ ERROR not yet implemented\n-    let ascribe_index_deref = &raw const (ARRAY_REF[0]: i32);   //~ ERROR not yet implemented\n+    let ascribe_ref = &raw const (x: i32);\n+    let ascribe_deref = &raw const (*ARRAY_REF: [i32; 2]);\n+    let ascribe_index_deref = &raw const (ARRAY_REF[0]: i32);\n }"}, {"sha": "b0bfc74903b0ce68f97c35a5ab79121a96b41285", "filename": "src/test/ui/raw-ref-op/raw-ref-temp-deref.stderr", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/15931947f59e0010b73469711cb811f09aaf0cdd/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15931947f59e0010b73469711cb811f09aaf0cdd/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.stderr?ref=15931947f59e0010b73469711cb811f09aaf0cdd", "patch": "@@ -1,74 +0,0 @@\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:13:21\n-   |\n-LL |     let deref_ref = &raw const *PAIR_REF;\n-   |                     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:14:27\n-   |\n-LL |     let field_deref_ref = &raw const PAIR_REF.0;\n-   |                           ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:15:21\n-   |\n-LL |     let deref_ref = &raw const *ARRAY_REF;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:16:27\n-   |\n-LL |     let index_deref_ref = &raw const ARRAY_REF[0];\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:17:21\n-   |\n-LL |     let deref_ref = &raw const *SLICE_REF;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:18:27\n-   |\n-LL |     let index_deref_ref = &raw const SLICE_REF[1];\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:21:23\n-   |\n-LL |     let ascribe_ref = &raw const (x: i32);\n-   |                       ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:22:25\n-   |\n-LL |     let ascribe_deref = &raw const (*ARRAY_REF: [i32; 2]);\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/raw-ref-temp-deref.rs:23:31\n-   |\n-LL |     let ascribe_index_deref = &raw const (ARRAY_REF[0]: i32);\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "32df56468da172e95894f85e6cd187c77ab3f7a7", "filename": "src/test/ui/raw-ref-op/raw-ref-temp.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -1,15 +1,17 @@\n // Ensure that we don't allow taking the address of temporary values\n #![feature(raw_ref_op, type_ascription)]\n \n+const FOUR: u64 = 4;\n+\n const PAIR: (i32, i64) = (1, 2);\n \n const ARRAY: [i32; 2] = [1, 2];\n \n fn main() {\n     let ref_expr = &raw const 2;                        //~ ERROR cannot take address\n     let mut_ref_expr = &raw mut 3;                      //~ ERROR cannot take address\n-    let ref_const = &raw const 4;                       //~ ERROR cannot take address\n-    let mut_ref_const = &raw mut 5;                     //~ ERROR cannot take address\n+    let ref_const = &raw const FOUR;                    //~ ERROR cannot take address\n+    let mut_ref_const = &raw mut FOUR;                  //~ ERROR cannot take address\n \n     let field_ref_expr = &raw const (1, 2).0;           //~ ERROR cannot take address\n     let mut_field_ref_expr = &raw mut (1, 2).0;         //~ ERROR cannot take address"}, {"sha": "80dea76d5953b1c5243863abae85be3825237955", "filename": "src/test/ui/raw-ref-op/raw-ref-temp.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -1,95 +1,95 @@\n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:9:31\n+  --> $DIR/raw-ref-temp.rs:11:31\n    |\n LL |     let ref_expr = &raw const 2;\n    |                               ^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:10:33\n+  --> $DIR/raw-ref-temp.rs:12:33\n    |\n LL |     let mut_ref_expr = &raw mut 3;\n    |                                 ^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:11:32\n+  --> $DIR/raw-ref-temp.rs:13:32\n    |\n-LL |     let ref_const = &raw const 4;\n-   |                                ^ temporary value\n+LL |     let ref_const = &raw const FOUR;\n+   |                                ^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:12:34\n+  --> $DIR/raw-ref-temp.rs:14:34\n    |\n-LL |     let mut_ref_const = &raw mut 5;\n-   |                                  ^ temporary value\n+LL |     let mut_ref_const = &raw mut FOUR;\n+   |                                  ^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:14:37\n+  --> $DIR/raw-ref-temp.rs:16:37\n    |\n LL |     let field_ref_expr = &raw const (1, 2).0;\n    |                                     ^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:15:39\n+  --> $DIR/raw-ref-temp.rs:17:39\n    |\n LL |     let mut_field_ref_expr = &raw mut (1, 2).0;\n    |                                       ^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:16:32\n+  --> $DIR/raw-ref-temp.rs:18:32\n    |\n LL |     let field_ref = &raw const PAIR.0;\n    |                                ^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:17:34\n+  --> $DIR/raw-ref-temp.rs:19:34\n    |\n LL |     let mut_field_ref = &raw mut PAIR.0;\n    |                                  ^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:19:37\n+  --> $DIR/raw-ref-temp.rs:21:37\n    |\n LL |     let index_ref_expr = &raw const [1, 2][0];\n    |                                     ^^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:20:39\n+  --> $DIR/raw-ref-temp.rs:22:39\n    |\n LL |     let mut_index_ref_expr = &raw mut [1, 2][0];\n    |                                       ^^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:21:32\n+  --> $DIR/raw-ref-temp.rs:23:32\n    |\n LL |     let index_ref = &raw const ARRAY[0];\n    |                                ^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:22:34\n+  --> $DIR/raw-ref-temp.rs:24:34\n    |\n LL |     let mut_index_ref = &raw mut ARRAY[1];\n    |                                  ^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:24:34\n+  --> $DIR/raw-ref-temp.rs:26:34\n    |\n LL |     let ref_ascribe = &raw const (2: i32);\n    |                                  ^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:25:36\n+  --> $DIR/raw-ref-temp.rs:27:36\n    |\n LL |     let mut_ref_ascribe = &raw mut (3: i32);\n    |                                    ^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:27:40\n+  --> $DIR/raw-ref-temp.rs:29:40\n    |\n LL |     let ascribe_field_ref = &raw const (PAIR.0: i32);\n    |                                        ^^^^^^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n-  --> $DIR/raw-ref-temp.rs:28:38\n+  --> $DIR/raw-ref-temp.rs:30:38\n    |\n LL |     let ascribe_index_ref = &raw mut (ARRAY[0]: i32);\n    |                                      ^^^^^^^^^^^^^^^ temporary value"}, {"sha": "6bf37408a8bbdbca2325b98bfd41959601e69e36", "filename": "src/test/ui/raw-ref-op/unusual_locations.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc78997f19822373ed17549004282da82851dc/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.rs?ref=6dcc78997f19822373ed17549004282da82851dc", "patch": "@@ -1,25 +1,22 @@\n-// FIXME(#64490): make this check-pass\n+// check-pass\n \n #![feature(raw_ref_op)]\n \n-const USES_PTR: () = { let u = (); &raw const u; };         //~ ERROR not yet implemented\n-static ALSO_USES_PTR: () = { let u = (); &raw const u; };   //~ ERROR not yet implemented\n+const USES_PTR: () = { let u = (); &raw const u; };\n+static ALSO_USES_PTR: () = { let u = (); &raw const u; };\n \n fn main() {\n-    #[cfg(FALSE)]\n-    {\n-        let x: [i32; { let u = 2; let x = &raw const u; 4 }]\n-            = [2; { let v = 3; let y = &raw const v; 4 }];\n-        let mut one = 1;\n-        let two = 2;\n-        if &raw const one == &raw mut one {\n-            match &raw const two {\n-                _ => {}\n-            }\n+    let x: [i32; { let u = 2; let x = &raw const u; 4 }]\n+        = [2; { let v = 3; let y = &raw const v; 4 }];\n+    let mut one = 1;\n+    let two = 2;\n+    if &raw const one == &raw mut one {\n+        match &raw const two {\n+            _ => {}\n         }\n-        let three = 3;\n-        let mut four = 4;\n-        println!(\"{:p}\", &raw const three);\n-        unsafe { &raw mut four; }\n     }\n+    let three = 3;\n+    let mut four = 4;\n+    println!(\"{:p}\", &raw const three);\n+    unsafe { &raw mut four; }\n }"}, {"sha": "3fae5db3d51a16080644f88af22895e9059d27cb", "filename": "src/test/ui/raw-ref-op/unusual_locations.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15931947f59e0010b73469711cb811f09aaf0cdd/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15931947f59e0010b73469711cb811f09aaf0cdd/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Funusual_locations.stderr?ref=15931947f59e0010b73469711cb811f09aaf0cdd", "patch": "@@ -1,18 +0,0 @@\n-error: raw borrows are not yet implemented\n-  --> $DIR/unusual_locations.rs:5:36\n-   |\n-LL | const USES_PTR: () = { let u = (); &raw const u; };\n-   |                                    ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: raw borrows are not yet implemented\n-  --> $DIR/unusual_locations.rs:6:42\n-   |\n-LL | static ALSO_USES_PTR: () = { let u = (); &raw const u; };\n-   |                                          ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n-\n-error: aborting due to 2 previous errors\n-"}]}