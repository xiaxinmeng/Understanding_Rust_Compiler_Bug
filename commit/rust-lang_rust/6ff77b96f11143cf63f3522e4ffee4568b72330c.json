{"sha": "6ff77b96f11143cf63f3522e4ffee4568b72330c", "node_id": "C_kwDOAAsO6NoAKDZmZjc3Yjk2ZjExMTQzY2Y2M2YzNTIyZTRmZmVlNDU2OGI3MjMzMGM", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-02T20:46:29Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-05-02T20:52:13Z"}, "message": "Fix `cast_lossless` to avoid warning on `usize` to `f64` conversion.\n\nPreviously, the `cast_lossless` lint would issue a warning on code that\nconverted a `usize` value to `f64`, on 32-bit targets.\n\n`usize` to `f64` is a lossless cast on 32-bit targets, however there is\nno corresponding `f64::from` that takes a `usize`, so `cast_lossless`'s\nsuggested replacement does not compile.\n\nThis PR disables the lint in the case of casting from `usize` or `isize`.\n\nFixes #3689.\n\nchangelog: [`cast_lossless`] no longer gives wrong suggestion on usize->f64", "tree": {"sha": "7ebab0184d933ad766c3bd5af28c2417b3faa4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ebab0184d933ad766c3bd5af28c2417b3faa4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ff77b96f11143cf63f3522e4ffee4568b72330c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff77b96f11143cf63f3522e4ffee4568b72330c", "html_url": "https://github.com/rust-lang/rust/commit/6ff77b96f11143cf63f3522e4ffee4568b72330c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ff77b96f11143cf63f3522e4ffee4568b72330c/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95f8b2600240022f0a82e703b35d4bc14a42eb1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f8b2600240022f0a82e703b35d4bc14a42eb1b", "html_url": "https://github.com/rust-lang/rust/commit/95f8b2600240022f0a82e703b35d4bc14a42eb1b"}], "stats": {"total": 16, "additions": 1, "deletions": 15}, "files": [{"sha": "7717c1e9e31dafa664e7a0b59e8cfdac4b1ec208", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ff77b96f11143cf63f3522e4ffee4568b72330c/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff77b96f11143cf63f3522e4ffee4568b72330c/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=6ff77b96f11143cf63f3522e4ffee4568b72330c", "patch": "@@ -93,7 +93,7 @@ fn should_lint(\n             } else {\n                 64\n             };\n-            from_nbits < to_nbits\n+            !is_isize_or_usize(cast_from) && from_nbits < to_nbits\n         },\n         (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv.as_ref(), &msrvs::FROM_BOOL) => true,\n         (_, _) => {"}, {"sha": "7125f741c150e764ba59141368aba6e6b3d303e0", "filename": "tests/ui/cast_size_32bit.stderr", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ff77b96f11143cf63f3522e4ffee4568b72330c/tests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ff77b96f11143cf63f3522e4ffee4568b72330c/tests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size_32bit.stderr?ref=6ff77b96f11143cf63f3522e4ffee4568b72330c", "patch": "@@ -14,26 +14,12 @@ LL |     x0 as f64;\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n-error: casting `isize` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_size_32bit.rs:15:5\n-   |\n-LL |     x0 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x0)`\n-   |\n-   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n-\n error: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size_32bit.rs:16:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n-error: casting `usize` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_size_32bit.rs:16:5\n-   |\n-LL |     x1 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x1)`\n-\n error: casting `isize` to `f32` causes a loss of precision (`isize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size_32bit.rs:17:5\n    |"}]}