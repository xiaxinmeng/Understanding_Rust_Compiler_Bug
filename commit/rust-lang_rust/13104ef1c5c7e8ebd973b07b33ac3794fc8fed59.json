{"sha": "13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMTA0ZWYxYzVjN2U4ZWJkOTczYjA3YjMzYWMzNzk0ZmM4ZmVkNTk=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-12T18:56:16Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-20T12:02:05Z"}, "message": "Pre-compute `def_id_to_hir_id` table", "tree": {"sha": "0f65587129fe33a50ecb3b4c7c7890dcc5bd7745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f65587129fe33a50ecb3b4c7c7890dcc5bd7745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "html_url": "https://github.com/rust-lang/rust/commit/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94817e38e14b89747c6d6d5af0d45267fcbf765e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94817e38e14b89747c6d6d5af0d45267fcbf765e", "html_url": "https://github.com/rust-lang/rust/commit/94817e38e14b89747c6d6d5af0d45267fcbf765e"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "5755a3db92ac1400fb9210de30cccea8dfb8aacf", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "patch": "@@ -81,13 +81,12 @@ pub struct Definitions {\n \n     def_id_to_span: IndexVec<LocalDefId, Span>,\n \n-    // FIXME(eddyb) don't go through `ast::NodeId` to convert between `HirId`\n-    // and `LocalDefId` - ideally all `LocalDefId`s would be HIR owners.\n     node_id_to_def_id: FxHashMap<ast::NodeId, LocalDefId>,\n     def_id_to_node_id: IndexVec<LocalDefId, ast::NodeId>,\n \n-    pub(super) node_id_to_hir_id: IndexVec<ast::NodeId, Option<hir::HirId>>,\n-    /// The pre-computed mapping of `hir_id_to_node_id` -> `node_id_to_def_id`.\n+    // FIXME(eddyb) ideally all `LocalDefId`s would be HIR owners.\n+    pub(super) def_id_to_hir_id: IndexVec<LocalDefId, Option<hir::HirId>>,\n+    /// The reverse mapping of `def_id_to_hir_id`.\n     pub(super) hir_id_to_def_id: FxHashMap<hir::HirId, LocalDefId>,\n \n     /// If `ExpnId` is an ID of some macro expansion,\n@@ -327,9 +326,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn local_def_id(&self, node: ast::NodeId) -> LocalDefId {\n-        self.opt_local_def_id(node).unwrap_or_else(|| {\n-            panic!(\"no entry for node id: `{:?}` / `{:?}`\", node, self.node_id_to_hir_id.get(node))\n-        })\n+        self.opt_local_def_id(node).unwrap_or_else(|| panic!(\"no entry for node id: `{:?}`\", node))\n     }\n \n     #[inline]\n@@ -339,14 +336,12 @@ impl Definitions {\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, id: LocalDefId) -> hir::HirId {\n-        let node_id = self.def_id_to_node_id[id];\n-        self.node_id_to_hir_id[node_id].unwrap()\n+        self.def_id_to_hir_id[id].unwrap()\n     }\n \n     #[inline]\n     pub fn opt_local_def_id_to_hir_id(&self, id: LocalDefId) -> Option<hir::HirId> {\n-        let node_id = self.def_id_to_node_id[id];\n-        self.node_id_to_hir_id[node_id]\n+        self.def_id_to_hir_id[id]\n     }\n \n     #[inline]\n@@ -461,16 +456,20 @@ impl Definitions {\n         mapping: IndexVec<ast::NodeId, Option<hir::HirId>>,\n     ) {\n         assert!(\n-            self.node_id_to_hir_id.is_empty(),\n-            \"trying to initialize `NodeId` -> `HirId` mapping twice\"\n+            self.def_id_to_hir_id.is_empty(),\n+            \"trying to initialize `LocalDefId` <-> `HirId` mappings twice\"\n         );\n-        self.node_id_to_hir_id = mapping;\n \n-        // Build the pre-computed mapping of `hir_id_to_node_id` -> `node_id_to_def_id`.\n-        self.hir_id_to_def_id = self\n-            .node_id_to_hir_id\n-            .iter_enumerated()\n-            .filter_map(|(node_id, &hir_id)| {\n+        self.def_id_to_hir_id = self\n+            .def_id_to_node_id\n+            .iter()\n+            .map(|&node_id| mapping.get(node_id).and_then(|&hir_id| hir_id))\n+            .collect();\n+\n+        // Build the reverse mapping of `def_id_to_hir_id`.\n+        self.hir_id_to_def_id = mapping\n+            .into_iter_enumerated()\n+            .filter_map(|(node_id, hir_id)| {\n                 hir_id.and_then(|hir_id| {\n                     self.node_id_to_def_id.get(&node_id).map(|&def_id| (hir_id, def_id))\n                 })"}]}