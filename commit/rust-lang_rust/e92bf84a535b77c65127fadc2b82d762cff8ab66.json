{"sha": "e92bf84a535b77c65127fadc2b82d762cff8ab66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MmJmODRhNTM1Yjc3YzY1MTI3ZmFkYzJiODJkNzYyY2ZmOGFiNjY=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-22T06:57:05Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-22T06:57:11Z"}, "message": "ptr_arg: fix panic when pattern type is not in tcx", "tree": {"sha": "2610e253a3f298a09f75eaf312f6dbd001eb7b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2610e253a3f298a09f75eaf312f6dbd001eb7b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e92bf84a535b77c65127fadc2b82d762cff8ab66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e92bf84a535b77c65127fadc2b82d762cff8ab66", "html_url": "https://github.com/rust-lang/rust/commit/e92bf84a535b77c65127fadc2b82d762cff8ab66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e92bf84a535b77c65127fadc2b82d762cff8ab66/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a4248e68e818c64c5c0e0e68bd2d647c857760", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a4248e68e818c64c5c0e0e68bd2d647c857760", "html_url": "https://github.com/rust-lang/rust/commit/e1a4248e68e818c64c5c0e0e68bd2d647c857760"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "2d09fcbcca952e4e49bcbfae964756bc0ae998e8", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e92bf84a535b77c65127fadc2b82d762cff8ab66/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92bf84a535b77c65127fadc2b82d762cff8ab66/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=e92bf84a535b77c65127fadc2b82d762cff8ab66", "patch": "@@ -45,20 +45,18 @@ impl LintPass for PtrArg {\n \n fn check_fn(cx: &Context, decl: &FnDecl) {\n     for arg in &decl.inputs {\n-        if arg.ty.node == TyInfer {  // \"self\" arguments\n-            continue;\n-        }\n-        let ref sty = cx.tcx.pat_ty(&*arg.pat).sty;\n-        if let &ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = sty {\n-            if match_type(cx, ty, &VEC_PATH) {\n-                span_lint(cx, PTR_ARG, arg.ty.span,\n-                          \"writing `&Vec<_>` instead of `&[_]` involves one more reference \\\n-                           and cannot be used with non-Vec-based slices. Consider changing \\\n-                           the type to `&[...]`\");\n-            } else if match_type(cx, ty, &STRING_PATH) {\n-                span_lint(cx, PTR_ARG, arg.ty.span,\n-                          \"writing `&String` instead of `&str` involves a new object \\\n-                           where a slice will do. Consider changing the type to `&str`\");\n+        if let Some(pat_ty) = cx.tcx.pat_ty_opt(&*arg.pat) {\n+            if let ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = pat_ty.sty {\n+                if match_type(cx, ty, &VEC_PATH) {\n+                    span_lint(cx, PTR_ARG, arg.ty.span,\n+                              \"writing `&Vec<_>` instead of `&[_]` involves one more reference \\\n+                               and cannot be used with non-Vec-based slices. Consider changing \\\n+                               the type to `&[...]`\");\n+                } else if match_type(cx, ty, &STRING_PATH) {\n+                    span_lint(cx, PTR_ARG, arg.ty.span,\n+                              \"writing `&String` instead of `&str` involves a new object \\\n+                               where a slice will do. Consider changing the type to `&str`\");\n+                }\n             }\n         }\n     }"}]}