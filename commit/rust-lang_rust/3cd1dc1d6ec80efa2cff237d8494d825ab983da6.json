{"sha": "3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "node_id": "C_kwDOAAsO6NoAKDNjZDFkYzFkNmVjODBlZmEyY2ZmMjM3ZDg0OTRkODI1YWI5ODNkYTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-24T06:48:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T06:48:06Z"}, "message": "Rollup merge of #94270 - RalfJung:fn-ptrs, r=oli-obk\n\nMiri: relax fn ptr check\n\nAs discussed in https://github.com/rust-lang/unsafe-code-guidelines/issues/72#issuecomment-1025407536, the function pointer check done by Miri is currently overeager: contrary to our usual principle of only checking rather uncontroversial validity invariants, we actually check that the pointer points to a real function.\n\nSo, this relaxes the check to what the validity invariant probably will be (and what the reference already says it is): the function pointer must be non-null, and that's it.\n\nThe check that CTFE does on the final value of a constant is unchanged -- CTFE recurses through references, so it makes some sense to also recurse through function pointers. We might still want to relax this in the future, but that would be a separate change.\n\nr? `@oli-obk`", "tree": {"sha": "a409691506547c78ce7f4924122860d931068835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a409691506547c78ce7f4924122860d931068835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFyomCRBK7hj4Ov3rIwAARUwIADTyjoThkmQzUf9PxKqejvj3\nGsK8VkEbjFVHzxM73v8mBTWFQSM/42EIM3wJhTLqnSqNXdNaMk3Bvi10rU+2bmS5\nJ0JIPxrRXplUpelByOiXhbLl0Jdn7T4DAx1HcylHZBTSjiqFLp65VALYskr+tWUX\nJ+Bq/4aGFUx5Hs1c9pLGk0BrZcWR91RXtyS9mOCjaOBsvae7vFWHcTNhoweeR8aY\nYQlE+JG4K8tFYUVsWtTKf+YVyuuXpaLMgaahM0DBhNzNzI0wxYsl3mluZR//6vkK\nUettvgI9Gv+0AHpN6f660eCSlkCaiuzYjlkX5WtrWEmIDu0pUa/jDbP5rtALoBU=\n=INBM\n-----END PGP SIGNATURE-----\n", "payload": "tree a409691506547c78ce7f4924122860d931068835\nparent 8a42e3da0bae5b25d42c0eea29884b31a41215e1\nparent 182d335870265a102c0f6467db65b5e59bd97e24\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645685286 +0100\ncommitter GitHub <noreply@github.com> 1645685286 +0100\n\nRollup merge of #94270 - RalfJung:fn-ptrs, r=oli-obk\n\nMiri: relax fn ptr check\n\nAs discussed in https://github.com/rust-lang/unsafe-code-guidelines/issues/72#issuecomment-1025407536, the function pointer check done by Miri is currently overeager: contrary to our usual principle of only checking rather uncontroversial validity invariants, we actually check that the pointer points to a real function.\n\nSo, this relaxes the check to what the validity invariant probably will be (and what the reference already says it is): the function pointer must be non-null, and that's it.\n\nThe check that CTFE does on the final value of a constant is unchanged -- CTFE recurses through references, so it makes some sense to also recurse through function pointers. We might still want to relax this in the future, but that would be a separate change.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "html_url": "https://github.com/rust-lang/rust/commit/3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a42e3da0bae5b25d42c0eea29884b31a41215e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a42e3da0bae5b25d42c0eea29884b31a41215e1", "html_url": "https://github.com/rust-lang/rust/commit/8a42e3da0bae5b25d42c0eea29884b31a41215e1"}, {"sha": "182d335870265a102c0f6467db65b5e59bd97e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/182d335870265a102c0f6467db65b5e59bd97e24", "html_url": "https://github.com/rust-lang/rust/commit/182d335870265a102c0f6467db65b5e59bd97e24"}], "stats": {"total": 141, "additions": 110, "deletions": 31}, "files": [{"sha": "0bf86d52080ead4d4fa31aa63382e54c6bd1ae46", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "patch": "@@ -567,22 +567,27 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             }\n             ty::FnPtr(_sig) => {\n                 let value = try_validation!(\n-                    self.ecx.read_immediate(value),\n+                    self.ecx.read_scalar(value).and_then(|v| v.check_init()),\n                     self.path,\n                     err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n+                    err_ub!(InvalidUninitBytes(None)) => { \"uninitialized bytes\" } expected { \"a proper pointer or integer value\" },\n                 );\n-                // Make sure we print a `ScalarMaybeUninit` (and not an `ImmTy`) in the error\n-                // message below.\n-                let value = value.to_scalar_or_uninit();\n-                let _fn = try_validation!(\n-                    value.check_init().and_then(|ptr| self.ecx.memory.get_fn(self.ecx.scalar_to_ptr(ptr))),\n-                    self.path,\n-                    err_ub!(DanglingIntPointer(..)) |\n-                    err_ub!(InvalidFunctionPointer(..)) |\n-                    err_ub!(InvalidUninitBytes(None)) =>\n-                        { \"{:x}\", value } expected { \"a function pointer\" },\n-                );\n-                // FIXME: Check if the signature matches\n+                let ptr = self.ecx.scalar_to_ptr(value);\n+                // Ensure the pointer is non-null.\n+                if self.ecx.memory.ptr_may_be_null(ptr) {\n+                    throw_validation_failure!(self.path, { \"a potentially null function pointer\" });\n+                }\n+                // If we check references recursively, also check that this points to a function.\n+                if let Some(_) = self.ref_tracking {\n+                    let _fn = try_validation!(\n+                        self.ecx.memory.get_fn(ptr),\n+                        self.path,\n+                        err_ub!(DanglingIntPointer(..)) |\n+                        err_ub!(InvalidFunctionPointer(..)) =>\n+                            { \"{:x}\", value } expected { \"a function pointer\" },\n+                    );\n+                    // FIXME: Check if the signature matches\n+                }\n                 Ok(true)\n             }\n             ty::Never => throw_validation_failure!(self.path, { \"a value of the never type `!`\" }),"}, {"sha": "bf4e2926d51c02d4723d970fef9d9a7cf1a404d6", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "patch": "@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:30:1\n+  --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc15, but expected initialized plain (non-pointer) bytes\n@@ -54,7 +54,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:33:1\n+  --> $DIR/ub-ref-ptr.rs:34:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -65,7 +65,7 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:36:1\n+  --> $DIR/ub-ref-ptr.rs:37:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -76,7 +76,7 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:39:1\n+  --> $DIR/ub-ref-ptr.rs:40:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x539 is unallocated)\n@@ -87,7 +87,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:42:1\n+  --> $DIR/ub-ref-ptr.rs:43:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (address 0x539 is unallocated)\n@@ -98,7 +98,7 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:45:1\n+  --> $DIR/ub-ref-ptr.rs:46:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n@@ -109,16 +109,49 @@ LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:47:1\n+  --> $DIR/ub-ref-ptr.rs:49:1\n+   |\n+LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a potentially null function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               00 00 00 00                                     \u2502 ....\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:51:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a proper pointer or integer value\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n                __ __ __ __                                     \u2502 \u2591\u2591\u2591\u2591\n            }\n \n-error: aborting due to 11 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:53:1\n+   |\n+LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x0000000d, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               0d 00 00 00                                     \u2502 ....\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:55:1\n+   |\n+LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc41, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               \u257e\u2500alloc41\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ef25e279a0671b02fe643fdbb90c9ce1501c833a", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "patch": "@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:30:1\n+  --> $DIR/ub-ref-ptr.rs:31:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc15, but expected initialized plain (non-pointer) bytes\n@@ -54,7 +54,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:33:1\n+  --> $DIR/ub-ref-ptr.rs:34:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -65,7 +65,7 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:36:1\n+  --> $DIR/ub-ref-ptr.rs:37:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<deref>: encountered a pointer, but expected plain (non-pointer) bytes\n@@ -76,7 +76,7 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:39:1\n+  --> $DIR/ub-ref-ptr.rs:40:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x539 is unallocated)\n@@ -87,7 +87,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:42:1\n+  --> $DIR/ub-ref-ptr.rs:43:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (address 0x539 is unallocated)\n@@ -98,7 +98,7 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:45:1\n+  --> $DIR/ub-ref-ptr.rs:46:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n@@ -109,16 +109,49 @@ LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:47:1\n+  --> $DIR/ub-ref-ptr.rs:49:1\n+   |\n+LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a potentially null function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               00 00 00 00 00 00 00 00                         \u2502 ........\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:51:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a proper pointer or integer value\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n                __ __ __ __ __ __ __ __                         \u2502 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n            }\n \n-error: aborting due to 11 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:53:1\n+   |\n+LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x000000000000000d, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               0d 00 00 00 00 00 00 00                         \u2502 ........\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:55:1\n+   |\n+LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc41, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc41\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1887cb24bf46765801f048209633235388a4de6f", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd1dc1d6ec80efa2cff237d8494d825ab983da6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=3cd1dc1d6ec80efa2cff237d8494d825ab983da6", "patch": "@@ -24,6 +24,7 @@ const NULL: &u16 = unsafe { mem::transmute(0usize) };\n const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+\n // It is very important that we reject this: We do promote `&(4 * REF_AS_USIZE)`,\n // but that would fail to compile; so we ended up breaking user code that would\n // have worked fine had we not promoted.\n@@ -44,7 +45,14 @@ const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n \n const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n //~^ ERROR it is undefined behavior to use this value\n+\n+const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n+//~^ ERROR it is undefined behavior to use this value\n const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n //~^ ERROR it is undefined behavior to use this value\n+const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n+//~^ ERROR it is undefined behavior to use this value\n+const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {}"}]}