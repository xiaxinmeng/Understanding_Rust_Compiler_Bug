{"sha": "fc1032647beb0555d862d94570b89c150b6527ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTAzMjY0N2JlYjA1NTVkODYyZDk0NTcwYjg5YzE1MGI2NTI3YWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-21T13:52:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T13:52:51Z"}, "message": "Rollup merge of #87311 - oli-obk:nll_suggestion_span, r=estebank\n\nGet back the more precise suggestion spans of old regionck\n\nI noticed that when you turn on nll, the structured suggestion replaces a snippet instead of appending a snippet. It seems clearer to the user to only highlight the newly added characters instead of the entire `impl Trait` (and old regionck already does it this way).\n\nr? ``@estebank``", "tree": {"sha": "f325514c7e42e6f3c2e9bd1ad19a46e8bbf889b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f325514c7e42e6f3c2e9bd1ad19a46e8bbf889b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1032647beb0555d862d94570b89c150b6527ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+CazCRBK7hj4Ov3rIwAAL1AIADULc/umYY0+BN9AWs6Y30OM\nRPlZS9wIQ6X8Wnun10ngFo2DTITHAaSmhUAz4+nKrQvazraHKAH57FSDnw7l/o6I\nzaSrRCHd34LueJV1cuIBV1KqPS5V4Ivldb9gcUmPefITn0sKhM8Kk8RijRuqv99F\nOz1i73HsNRX6u8jlv70cDcio1K6y55+PMRAg/xEnZ94h0yQSX7wMooVoBWAINzr9\n2GiiLUdOI98+pftPvHNMAw16gx0HcURFcnSqKOD0GuORZnjfZfgJyBCeKrllY4Q5\nzfCKekLQSyEBR7lMMtGDvdPlHJgk3Vl2H6W8hV/pJ41/qbabefIH7G0o/0qQ4F0=\n=PTCC\n-----END PGP SIGNATURE-----\n", "payload": "tree f325514c7e42e6f3c2e9bd1ad19a46e8bbf889b6\nparent c6aaadc33ea241e3548a04b8431644ad8bbdf6e7\nparent b3594f0d1d8190387d37b0f5b30b9688f857b1dd\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626875571 +0200\ncommitter GitHub <noreply@github.com> 1626875571 +0200\n\nRollup merge of #87311 - oli-obk:nll_suggestion_span, r=estebank\n\nGet back the more precise suggestion spans of old regionck\n\nI noticed that when you turn on nll, the structured suggestion replaces a snippet instead of appending a snippet. It seems clearer to the user to only highlight the newly added characters instead of the entire `impl Trait` (and old regionck already does it this way).\n\nr? ``@estebank``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1032647beb0555d862d94570b89c150b6527ae", "html_url": "https://github.com/rust-lang/rust/commit/fc1032647beb0555d862d94570b89c150b6527ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1032647beb0555d862d94570b89c150b6527ae/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6aaadc33ea241e3548a04b8431644ad8bbdf6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6aaadc33ea241e3548a04b8431644ad8bbdf6e7", "html_url": "https://github.com/rust-lang/rust/commit/c6aaadc33ea241e3548a04b8431644ad8bbdf6e7"}, {"sha": "b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3594f0d1d8190387d37b0f5b30b9688f857b1dd", "html_url": "https://github.com/rust-lang/rust/commit/b3594f0d1d8190387d37b0f5b30b9688f857b1dd"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "1460c2378d1c9bfd6b874edcfce93d92f12e2457", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc1032647beb0555d862d94570b89c150b6527ae/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1032647beb0555d862d94570b89c150b6527ae/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=fc1032647beb0555d862d94570b89c150b6527ae", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use crate::util::borrowck_errors;\n \n@@ -641,12 +641,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         } else {\n                             \"'_\".to_string()\n                         };\n-                        let suggestion = if snippet.ends_with(';') {\n+                        let span = if snippet.ends_with(';') {\n                             // `type X = impl Trait;`\n-                            format!(\"{} + {};\", &snippet[..snippet.len() - 1], suggestable_fr_name)\n+                            span.with_hi(span.hi() - BytePos(1))\n                         } else {\n-                            format!(\"{} + {}\", snippet, suggestable_fr_name)\n+                            span\n                         };\n+                        let suggestion = format!(\" + {}\", suggestable_fr_name);\n+                        let span = span.shrink_to_hi();\n                         diag.span_suggestion(\n                             span,\n                             &format!("}, {"sha": "e9d620877345423f65e0683bad69c34df47ab0ce", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=fc1032647beb0555d862d94570b89c150b6527ae", "patch": "@@ -9,7 +9,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                       ^^^^^^^^^^^^^^\n+   |                                 ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:5:32\n@@ -23,7 +23,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                ^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:7:46"}, {"sha": "6c5264671a9120c3f397bc612d465736f98a4d24", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=fc1032647beb0555d862d94570b89c150b6527ae", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                           ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/static-return-lifetime-infered.rs:9:37\n@@ -23,7 +23,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                             ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a678731934f6e0e75a75cb6fc6bd453a54dadc3a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=fc1032647beb0555d862d94570b89c150b6527ae", "patch": "@@ -9,7 +9,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                     ^^^^^^^^^^^^^^^\n+   |                                                ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "962593e411e92a16aac8f7d1a3f35edaf77268ae", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=fc1032647beb0555d862d94570b89c150b6527ae", "patch": "@@ -9,7 +9,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                               ^^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "05ba7808600b01131933898a9206009e9f8c3542", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc1032647beb0555d862d94570b89c150b6527ae/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr?ref=fc1032647beb0555d862d94570b89c150b6527ae", "patch": "@@ -9,7 +9,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                          ^^^^\n \n error: lifetime may not live long enough\n   --> $DIR/trait-object-nested-in-impl-trait.rs:39:9\n@@ -47,7 +47,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                                 ^^^^\n \n error: aborting due to 4 previous errors\n "}]}