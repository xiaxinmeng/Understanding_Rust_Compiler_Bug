{"sha": "4f08d753758daa8adc21b29b5f0c07393a60e6c0", "node_id": "C_kwDOAAsO6NoAKDRmMDhkNzUzNzU4ZGFhOGFkYzIxYjI5YjVmMGMwNzM5M2E2MGU2YzA", "commit": {"author": {"name": "Martin Geisler", "email": "martin@geisler.net", "date": "2022-04-04T14:22:02Z"}, "committer": {"name": "Martin Geisler", "email": "mgeisler@google.com", "date": "2022-04-06T12:23:42Z"}, "message": "Mention `std::env::var` in `env!`\n\nWhen searching for how to read an environment variable, I first encountered the `env!` macro. It would have been useful to me if the documentation had included a link to `std::env::var`, which is what I was actually looking for.", "tree": {"sha": "5dda2d9640fe1a173f2bebdc1aabdf0b83bfbb02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dda2d9640fe1a173f2bebdc1aabdf0b83bfbb02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f08d753758daa8adc21b29b5f0c07393a60e6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f08d753758daa8adc21b29b5f0c07393a60e6c0", "html_url": "https://github.com/rust-lang/rust/commit/4f08d753758daa8adc21b29b5f0c07393a60e6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f08d753758daa8adc21b29b5f0c07393a60e6c0/comments", "author": {"login": "mgeisler", "id": 89623, "node_id": "MDQ6VXNlcjg5NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/89623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeisler", "html_url": "https://github.com/mgeisler", "followers_url": "https://api.github.com/users/mgeisler/followers", "following_url": "https://api.github.com/users/mgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/mgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeisler/subscriptions", "organizations_url": "https://api.github.com/users/mgeisler/orgs", "repos_url": "https://api.github.com/users/mgeisler/repos", "events_url": "https://api.github.com/users/mgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeisler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgeisler", "id": 89623, "node_id": "MDQ6VXNlcjg5NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/89623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgeisler", "html_url": "https://github.com/mgeisler", "followers_url": "https://api.github.com/users/mgeisler/followers", "following_url": "https://api.github.com/users/mgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/mgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgeisler/subscriptions", "organizations_url": "https://api.github.com/users/mgeisler/orgs", "repos_url": "https://api.github.com/users/mgeisler/repos", "events_url": "https://api.github.com/users/mgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/mgeisler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed6786404be276874fbcc7c3540f3237a87e0f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed6786404be276874fbcc7c3540f3237a87e0f3", "html_url": "https://github.com/rust-lang/rust/commit/2ed6786404be276874fbcc7c3540f3237a87e0f3"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "83f33ca007af1eb74a57e6bb5a58a78a86c3df0a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f08d753758daa8adc21b29b5f0c07393a60e6c0/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f08d753758daa8adc21b29b5f0c07393a60e6c0/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=4f08d753758daa8adc21b29b5f0c07393a60e6c0", "patch": "@@ -909,7 +909,10 @@ pub(crate) mod builtin {\n     /// Inspects an environment variable at compile time.\n     ///\n     /// This macro will expand to the value of the named environment variable at\n-    /// compile time, yielding an expression of type `&'static str`.\n+    /// compile time, yielding an expression of type `&'static str`. Use\n+    /// [`std::env::var`] instead if you want to read the value at runtime.\n+    ///\n+    /// [`std::env::var`]: ../std/env/fn.var.html\n     ///\n     /// If the environment variable is not defined, then a compilation error\n     /// will be emitted. To not emit a compile error, use the [`option_env!`]\n@@ -950,7 +953,10 @@ pub(crate) mod builtin {\n     /// expand into an expression of type `Option<&'static str>` whose value is\n     /// `Some` of the value of the environment variable. If the environment\n     /// variable is not present, then this will expand to `None`. See\n-    /// [`Option<T>`][Option] for more information on this type.\n+    /// [`Option<T>`][Option] for more information on this type.  Use\n+    /// [`std::env::var`] instead if you want to read the value at runtime.\n+    ///\n+    /// [`std::env::var`]: ../std/env/fn.var.html\n     ///\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not."}]}