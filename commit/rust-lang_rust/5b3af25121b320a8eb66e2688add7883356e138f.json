{"sha": "5b3af25121b320a8eb66e2688add7883356e138f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViM2FmMjUxMjFiMzIwYThlYjY2ZTI2ODhhZGQ3ODgzMzU2ZTEzOGY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-11T17:17:43Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-11T17:17:43Z"}, "message": "Only include workspace crates", "tree": {"sha": "d3937543916429a9d6357c6a7ef62c1a410852db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3937543916429a9d6357c6a7ef62c1a410852db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3af25121b320a8eb66e2688add7883356e138f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3af25121b320a8eb66e2688add7883356e138f", "html_url": "https://github.com/rust-lang/rust/commit/5b3af25121b320a8eb66e2688add7883356e138f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3af25121b320a8eb66e2688add7883356e138f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d40a02a9cac5daf568aab172e1db8c73afbe12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d40a02a9cac5daf568aab172e1db8c73afbe12", "html_url": "https://github.com/rust-lang/rust/commit/b8d40a02a9cac5daf568aab172e1db8c73afbe12"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "527a5ae0db53c5d67dbd129ba74bd1d8d58992d8", "filename": "crates/ide/src/view_crate_graph.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5b3af25121b320a8eb66e2688add7883356e138f/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3af25121b320a8eb66e2688add7883356e138f/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fview_crate_graph.rs?ref=5b3af25121b320a8eb66e2688add7883356e138f", "patch": "@@ -7,23 +7,36 @@ use std::{\n \n use dot::Id;\n use ide_db::{\n-    base_db::{CrateGraph, CrateId, Dependency, SourceDatabase},\n+    base_db::{CrateGraph, CrateId, Dependency, SourceDatabase, SourceDatabaseExt},\n     RootDatabase,\n };\n+use rustc_hash::FxHashSet;\n \n // Feature: View Crate Graph\n //\n // Renders the currently loaded crate graph as an SVG graphic. Requires the `dot` tool, which\n // is part of graphviz, to be installed.\n //\n+// Only workspace crates are included, no crates.io dependencies or sysroot crates.\n+//\n // |===\n // | Editor  | Action Name\n //\n // | VS Code | **Rust Analyzer: View Crate Graph**\n // |===\n pub(crate) fn view_crate_graph(db: &RootDatabase) -> Result<String, String> {\n+    let crate_graph = db.crate_graph();\n+    let crates_to_render = crate_graph\n+        .iter()\n+        .filter(|krate| {\n+            // Only render workspace crates\n+            let root_id = db.file_source_root(crate_graph[*krate].root_file_id);\n+            !db.source_root(root_id).is_library\n+        })\n+        .collect();\n+    let graph = DotCrateGraph { graph: crate_graph, crates_to_render };\n+\n     let mut dot = Vec::new();\n-    let graph = DotCrateGraph(db.crate_graph());\n     dot::render(&graph, &mut dot).unwrap();\n \n     render_svg(&dot).map_err(|e| e.to_string())\n@@ -36,27 +49,36 @@ fn render_svg(dot: &[u8]) -> Result<String, Box<dyn Error>> {\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())\n         .spawn()\n-        .map_err(|err| format!(\"failed to spawn `dot -Tsvg`: {}\", err))?;\n+        .map_err(|err| format!(\"failed to spawn `dot`: {}\", err))?;\n     child.stdin.unwrap().write_all(&dot)?;\n \n     let mut svg = String::new();\n     child.stdout.unwrap().read_to_string(&mut svg)?;\n     Ok(svg)\n }\n \n-struct DotCrateGraph(Arc<CrateGraph>);\n+struct DotCrateGraph {\n+    graph: Arc<CrateGraph>,\n+    crates_to_render: FxHashSet<CrateId>,\n+}\n \n type Edge<'a> = (CrateId, &'a Dependency);\n \n impl<'a> dot::GraphWalk<'a, CrateId, Edge<'a>> for DotCrateGraph {\n     fn nodes(&'a self) -> dot::Nodes<'a, CrateId> {\n-        self.0.iter().collect()\n+        self.crates_to_render.iter().copied().collect()\n     }\n \n     fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> {\n-        self.0\n+        self.crates_to_render\n             .iter()\n-            .flat_map(|krate| self.0[krate].dependencies.iter().map(move |dep| (krate, dep)))\n+            .flat_map(|krate| {\n+                self.graph[*krate]\n+                    .dependencies\n+                    .iter()\n+                    .filter(|dep| self.crates_to_render.contains(&dep.crate_id))\n+                    .map(move |dep| (*krate, dep))\n+            })\n             .collect()\n     }\n \n@@ -75,7 +97,7 @@ impl<'a> dot::Labeller<'a, CrateId, Edge<'a>> for DotCrateGraph {\n     }\n \n     fn node_id(&'a self, n: &CrateId) -> Id<'a> {\n-        let name = self.0[*n].display_name.as_ref().map_or(\"_missing_name_\", |name| &*name);\n+        let name = self.graph[*n].display_name.as_ref().map_or(\"_missing_name_\", |name| &*name);\n         Id::new(format!(\"{}_{}\", name, n.0)).unwrap()\n     }\n }"}]}