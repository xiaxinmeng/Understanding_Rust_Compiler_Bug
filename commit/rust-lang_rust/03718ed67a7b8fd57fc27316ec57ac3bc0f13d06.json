{"sha": "03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzE4ZWQ2N2E3YjhmZDU3ZmMyNzMxNmVjNTdhYzNiYzBmMTNkMDY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-03-03T16:50:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-03-03T23:32:57Z"}, "message": "Permit getting stage 0 rustdoc\n\nThis allows us to e.g. test compiletest, including doctests, in stage 0\nwithout building a fresh compiler and rustdoc.", "tree": {"sha": "648809b2b1ddccd15ce05e9e3401b6c6418d32be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/648809b2b1ddccd15ce05e9e3401b6c6418d32be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "html_url": "https://github.com/rust-lang/rust/commit/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9efc93c96dd6746460cef916d307b72ba21a7fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9efc93c96dd6746460cef916d307b72ba21a7fd0", "html_url": "https://github.com/rust-lang/rust/commit/9efc93c96dd6746460cef916d307b72ba21a7fd0"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "f8b7f25a75433586b9d2259dd15a70286040a284", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "patch": "@@ -668,28 +668,27 @@ impl<'a> Builder<'a> {\n             .map(|entry| entry.path())\n     }\n \n-    pub fn rustdoc(&self, host: Interned<String>) -> PathBuf {\n-        self.ensure(tool::Rustdoc { host })\n+    pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n+        self.ensure(tool::Rustdoc { compiler })\n     }\n \n-    pub fn rustdoc_cmd(&self, host: Interned<String>) -> Command {\n+    pub fn rustdoc_cmd(&self, compiler: Compiler) -> Command {\n         let mut cmd = Command::new(&self.out.join(\"bootstrap/debug/rustdoc\"));\n-        let compiler = self.compiler(self.top_stage, host);\n         cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n             // Note that this is *not* the sysroot_libdir because rustdoc must be linked\n             // equivalently to rustc.\n             .env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler))\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n-            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n+            .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n         // Remove make-related flags that can cause jobserver problems.\n         cmd.env_remove(\"MAKEFLAGS\");\n         cmd.env_remove(\"MFLAGS\");\n \n-        if let Some(linker) = self.linker(host) {\n+        if let Some(linker) = self.linker(compiler.host) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         cmd\n@@ -751,7 +750,7 @@ impl<'a> Builder<'a> {\n                 // This is the intended out directory for compiler documentation.\n                 my_out = self.compiler_doc_out(target);\n             }\n-            let rustdoc = self.rustdoc(compiler.host);\n+            let rustdoc = self.rustdoc(compiler);\n             self.clear_if_dirty(&my_out, &rustdoc);\n         } else if cmd != \"test\" {\n             match mode {\n@@ -897,7 +896,7 @@ impl<'a> Builder<'a> {\n             .env(\n                 \"RUSTDOC_REAL\",\n                 if cmd == \"doc\" || cmd == \"rustdoc\" || (cmd == \"test\" && want_rustdoc) {\n-                    self.rustdoc(compiler.host)\n+                    self.rustdoc(compiler)\n                 } else {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n                 },"}, {"sha": "3045cda125eedd3aed39395ba31d7deb17b23e33", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "patch": "@@ -479,7 +479,7 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(image.join(\"bin\")));\n             builder.cp_r(&src.join(\"bin\"), &image.join(\"bin\"));\n \n-            builder.install(&builder.rustdoc(compiler.host), &image.join(\"bin\"), 0o755);\n+            builder.install(&builder.rustdoc(compiler), &image.join(\"bin\"), 0o755);\n \n             // Copy runtime DLLs needed by the compiler\n             if libdir != \"bin\" {"}, {"sha": "ae329286486d6d46992f3f54485e1bb88b5b7acb", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "patch": "@@ -335,7 +335,7 @@ fn invoke_rustdoc(\n     let footer = builder.src.join(\"src/doc/footer.inc\");\n     let version_info = out.join(\"version_info.html\");\n \n-    let mut cmd = builder.rustdoc_cmd(compiler.host);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n \n     let out = out.join(\"book\");\n \n@@ -415,7 +415,7 @@ impl Step for Standalone {\n             }\n \n             let html = out.join(filename).with_extension(\"html\");\n-            let rustdoc = builder.rustdoc(compiler.host);\n+            let rustdoc = builder.rustdoc(compiler);\n             if up_to_date(&path, &html) &&\n                up_to_date(&footer, &html) &&\n                up_to_date(&favicon, &html) &&\n@@ -425,7 +425,7 @@ impl Step for Standalone {\n                 continue\n             }\n \n-            let mut cmd = builder.rustdoc_cmd(compiler.host);\n+            let mut cmd = builder.rustdoc_cmd(compiler);\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n@@ -824,7 +824,7 @@ impl Step for Rustdoc {\n         builder.ensure(Rustc { stage, target });\n \n         // Build rustdoc.\n-        builder.ensure(tool::Rustdoc { host: compiler.host });\n+        builder.ensure(tool::Rustdoc { compiler: compiler });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n         let out_dir = builder.stage_out(compiler, Mode::ToolRustc)"}, {"sha": "6b9960c355c5ac04f167a68ab054b5e8f899c25f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "patch": "@@ -177,7 +177,7 @@ impl Step for Cargotest {\n             cmd.arg(&builder.initial_cargo)\n                 .arg(&out_dir)\n                 .env(\"RUSTC\", builder.rustc(compiler))\n-                .env(\"RUSTDOC\", builder.rustdoc(compiler.host)),\n+                .env(\"RUSTDOC\", builder.rustdoc(compiler)),\n         );\n     }\n }\n@@ -560,7 +560,7 @@ impl Step for RustdocTheme {\n                 builder.sysroot_libdir(self.compiler, self.compiler.host),\n             )\n             .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n-            .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler.host))\n+            .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", builder.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(linker) = builder.linker(self.compiler.host) {\n@@ -995,7 +995,7 @@ impl Step for Compiletest {\n             || (mode == \"ui\" && is_rustdoc_ui)\n         {\n             cmd.arg(\"--rustdoc-path\")\n-                .arg(builder.rustdoc(compiler.host));\n+                .arg(builder.rustdoc(compiler));\n         }\n \n         cmd.arg(\"--src-base\")\n@@ -1451,7 +1451,7 @@ fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) ->\n     }\n \n     builder.info(&format!(\"doc tests for: {}\", markdown.display()));\n-    let mut cmd = builder.rustdoc_cmd(compiler.host);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n     builder.add_rust_test_threads(&mut cmd);\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);"}, {"sha": "5fb83caac06ce87ddd9ce54c476683de7e33b4f4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "patch": "@@ -430,7 +430,9 @@ impl Step for RemoteTestServer {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustdoc {\n-    pub host: Interned<String>,\n+    /// This should only ever be 0 or 2.\n+    /// We sometimes want to reference the \"bootstrap\" rustdoc, which is why this option is here.\n+    pub compiler: Compiler,\n }\n \n impl Step for Rustdoc {\n@@ -444,12 +446,12 @@ impl Step for Rustdoc {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rustdoc {\n-            host: run.host,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        let target_compiler = builder.compiler(builder.top_stage, self.host);\n+        let target_compiler = self.compiler;\n         if target_compiler.stage == 0 {\n             if !target_compiler.is_snapshot(builder) {\n                 panic!(\"rustdoc in stage 0 must be snapshot rustdoc\");"}]}