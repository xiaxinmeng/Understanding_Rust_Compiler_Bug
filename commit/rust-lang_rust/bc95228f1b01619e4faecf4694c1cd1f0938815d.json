{"sha": "bc95228f1b01619e4faecf4694c1cd1f0938815d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTUyMjhmMWIwMTYxOWU0ZmFlY2Y0Njk0YzFjZDFmMDkzODgxNWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T00:52:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:45:45Z"}, "message": "extract parse_dot_suffix_expr", "tree": {"sha": "43def6089a2d0905883cb3949c4322032ef7d3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43def6089a2d0905883cb3949c4322032ef7d3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc95228f1b01619e4faecf4694c1cd1f0938815d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc95228f1b01619e4faecf4694c1cd1f0938815d", "html_url": "https://github.com/rust-lang/rust/commit/bc95228f1b01619e4faecf4694c1cd1f0938815d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc95228f1b01619e4faecf4694c1cd1f0938815d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c6bbf125277cf8e9b8374bfbf95f2bc12456f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6bbf125277cf8e9b8374bfbf95f2bc12456f23", "html_url": "https://github.com/rust-lang/rust/commit/9c6bbf125277cf8e9b8374bfbf95f2bc12456f23"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "f58b885522f64d32cf7b48331bf119a2a91b2155", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bc95228f1b01619e4faecf4694c1cd1f0938815d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc95228f1b01619e4faecf4694c1cd1f0938815d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=bc95228f1b01619e4faecf4694c1cd1f0938815d", "patch": "@@ -703,20 +703,7 @@ impl<'a> Parser<'a> {\n \n             // expr.f\n             if self.eat(&token::Dot) {\n-                match self.token.kind {\n-                    token::Ident(..) => {\n-                        e = self.parse_dot_suffix(e, lo)?;\n-                    }\n-                    token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {\n-                        e = self.parse_tuple_field_access_expr(lo, e, symbol, suffix);\n-                    }\n-                    token::Literal(token::Lit { kind: token::Float, symbol, .. }) => {\n-                        if let Some(err) = self.recover_field_access_by_float_lit(lo, &e, symbol) {\n-                            err?\n-                        }\n-                    }\n-                    _ => self.error_unexpected_after_dot(),\n-                }\n+                e = self.parse_dot_suffix_expr(lo, e)?;\n                 continue;\n             }\n             if self.expr_is_complete(&e) {\n@@ -731,6 +718,22 @@ impl<'a> Parser<'a> {\n         return Ok(e);\n     }\n \n+    fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n+        match self.token.kind {\n+            token::Ident(..) => self.parse_dot_suffix(base, lo),\n+            token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {\n+                Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix))\n+            }\n+            token::Literal(token::Lit { kind: token::Float, symbol, .. }) => {\n+                self.recover_field_access_by_float_lit(lo, base, symbol)\n+            }\n+            _ => {\n+                self.error_unexpected_after_dot();\n+                Ok(base)\n+            }\n+        }\n+    }\n+\n     fn error_unexpected_after_dot(&self) {\n         // FIXME Could factor this out into non_fatal_unexpected or something.\n         let actual = self.this_token_to_string();\n@@ -740,9 +743,9 @@ impl<'a> Parser<'a> {\n     fn recover_field_access_by_float_lit(\n         &mut self,\n         lo: Span,\n-        base: &P<Expr>,\n+        base: P<Expr>,\n         sym: Symbol,\n-    ) -> Option<PResult<'a, ()>> {\n+    ) -> PResult<'a, P<Expr>> {\n         self.bump();\n \n         let fstr = sym.as_str();\n@@ -752,7 +755,13 @@ impl<'a> Parser<'a> {\n         err.span_label(self.prev_span, \"unexpected token\");\n \n         if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n-            let float = fstr.parse::<f64>().ok()?;\n+            let float = match fstr.parse::<f64>() {\n+                Ok(f) => f,\n+                Err(_) => {\n+                    err.emit();\n+                    return Ok(base);\n+                }\n+            };\n             let sugg = pprust::to_string(|s| {\n                 s.popen();\n                 s.print_expr(&base);\n@@ -769,7 +778,7 @@ impl<'a> Parser<'a> {\n                 Applicability::MachineApplicable,\n             );\n         }\n-        Some(Err(err))\n+        Err(err)\n     }\n \n     fn parse_tuple_field_access_expr("}, {"sha": "371d3f575a418b3682a8a713c889ff1d34f85c07", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc95228f1b01619e4faecf4694c1cd1f0938815d/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc95228f1b01619e4faecf4694c1cd1f0938815d/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=bc95228f1b01619e4faecf4694c1cd1f0938815d", "patch": "@@ -393,19 +393,19 @@ LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:107:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:107:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:110:44\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:112:44\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n    |                                            ^"}]}