{"sha": "c1e04352bd220d2b912715aa07e1d04fe97d84f2", "node_id": "C_kwDOAAsO6NoAKGMxZTA0MzUyYmQyMjBkMmI5MTI3MTVhYTA3ZTFkMDRmZTk3ZDg0ZjI", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-08-15T18:30:30Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-08-16T16:31:57Z"}, "message": "unwrap_used and expect_used: trigger on uses of their _err variants", "tree": {"sha": "c8e091f749069b188100047bed52894cb676a3ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e091f749069b188100047bed52894cb676a3ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e04352bd220d2b912715aa07e1d04fe97d84f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e04352bd220d2b912715aa07e1d04fe97d84f2", "html_url": "https://github.com/rust-lang/rust/commit/c1e04352bd220d2b912715aa07e1d04fe97d84f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e04352bd220d2b912715aa07e1d04fe97d84f2/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "html_url": "https://github.com/rust-lang/rust/commit/8c9040ceaa7ee32e77c8e8eb8002087accb13a38"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "d59fefa1ddc0ebf68104498532f8da1f1c8c0e26", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1e04352bd220d2b912715aa07e1d04fe97d84f2/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e04352bd220d2b912715aa07e1d04fe97d84f2/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=c1e04352bd220d2b912715aa07e1d04fe97d84f2", "patch": "@@ -7,18 +7,26 @@ use rustc_span::sym;\n \n use super::EXPECT_USED;\n \n-/// lint use of `expect()` for `Option`s and `Result`s\n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_expect_in_tests: bool) {\n+/// lint use of `expect()` or `expect_err` for `Result` and `expect()` for `Option`.\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    recv: &hir::Expr<'_>,\n+    is_err: bool,\n+    allow_expect_in_tests: bool,\n+) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n-    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) && !is_err {\n         Some((EXPECT_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((EXPECT_USED, \"a Result\", \"Err\", \"an \"))\n+        Some((EXPECT_USED, \"a Result\", if is_err { \"Ok\" } else { \"Err\" }, \"an \"))\n     } else {\n         None\n     };\n \n+    let method = if is_err { \"expect_err\" } else { \"expect\" };\n+\n     if allow_expect_in_tests && is_in_test_function(cx.tcx, expr.hir_id) {\n         return;\n     }\n@@ -28,7 +36,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `expect()` on `{kind}` value\"),\n+            &format!(\"used `{method}()` on `{kind}` value\"),\n             None,\n             &format!(\"if this value is {none_prefix}`{none_value}`, it will panic\"),\n         );"}, {"sha": "b68a2651e1bd8271622453ccb6070af9b5f5aff3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1e04352bd220d2b912715aa07e1d04fe97d84f2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e04352bd220d2b912715aa07e1d04fe97d84f2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c1e04352bd220d2b912715aa07e1d04fe97d84f2", "patch": "@@ -174,7 +174,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n+    /// Checks for `.unwrap()` or `.unwrap_err()` calls on `Result`s and `.unwrap()` call on `Option`s.\n     ///\n     /// ### Why is this bad?\n     /// It is better to handle the `None` or `Err` case,\n@@ -224,7 +224,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `.expect()` calls on `Option`s and `Result`s.\n+    /// Checks for `.expect()` or `.expect_err()` calls on `Result`s and `.expect()` call on `Option`s.\n     ///\n     /// ### Why is this bad?\n     /// Usually it is better to handle the `None` or `Err` case.\n@@ -2740,8 +2740,9 @@ impl Methods {\n                 (\"expect\", [_]) => match method_call(recv) {\n                     Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n                     Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, self.msrv, span, err_span),\n-                    _ => expect_used::check(cx, expr, recv, self.allow_expect_in_tests),\n+                    _ => expect_used::check(cx, expr, recv, false, self.allow_expect_in_tests),\n                 },\n+                (\"expect_err\", [_]) => expect_used::check(cx, expr, recv, true, self.allow_expect_in_tests),\n                 (\"extend\", [arg]) => {\n                     string_extend_chars::check(cx, expr, recv, arg);\n                     extend_with_drain::check(cx, expr, recv, arg);\n@@ -2874,8 +2875,9 @@ impl Methods {\n                         },\n                         _ => {},\n                     }\n-                    unwrap_used::check(cx, expr, recv, self.allow_unwrap_in_tests);\n+                    unwrap_used::check(cx, expr, recv, false, self.allow_unwrap_in_tests);\n                 },\n+                (\"unwrap_err\", []) => unwrap_used::check(cx, expr, recv, true, self.allow_unwrap_in_tests),\n                 (\"unwrap_or\", [u_arg]) => match method_call(recv) {\n                     Some((arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\"), [lhs, rhs], _)) => {\n                         manual_saturating_arithmetic::check(cx, expr, lhs, rhs, u_arg, &arith[\"checked_\".len()..]);"}, {"sha": "05915c1410904d36efb6034c115fcb6bddb56440", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1e04352bd220d2b912715aa07e1d04fe97d84f2/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e04352bd220d2b912715aa07e1d04fe97d84f2/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=c1e04352bd220d2b912715aa07e1d04fe97d84f2", "patch": "@@ -7,18 +7,26 @@ use rustc_span::sym;\n \n use super::{EXPECT_USED, UNWRAP_USED};\n \n-/// lint use of `unwrap()` for `Option`s and `Result`s\n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_unwrap_in_tests: bool) {\n+/// lint use of `unwrap()` or `unwrap_err` for `Result` and `unwrap()` for `Option`.\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    recv: &hir::Expr<'_>,\n+    is_err: bool,\n+    allow_unwrap_in_tests: bool,\n+) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n-    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) && !is_err {\n         Some((UNWRAP_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((UNWRAP_USED, \"a Result\", \"Err\", \"an \"))\n+        Some((UNWRAP_USED, \"a Result\", if is_err { \"Ok\" } else { \"Err\" }, \"an \"))\n     } else {\n         None\n     };\n \n+    let method = if is_err { \"unwrap_err\" } else { \"unwrap\" };\n+\n     if allow_unwrap_in_tests && is_in_test_function(cx.tcx, expr.hir_id) {\n         return;\n     }\n@@ -37,7 +45,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `unwrap()` on `{kind}` value\"),\n+            &format!(\"used `{method}()` on `{kind}` value\"),\n             None,\n             &help,\n         );"}, {"sha": "9f27fef82494b8207437530017889d3bd523455d", "filename": "tests/ui/unwrap_expect_used.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1e04352bd220d2b912715aa07e1d04fe97d84f2/tests%2Fui%2Funwrap_expect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e04352bd220d2b912715aa07e1d04fe97d84f2/tests%2Fui%2Funwrap_expect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.rs?ref=c1e04352bd220d2b912715aa07e1d04fe97d84f2", "patch": "@@ -1,10 +1,35 @@\n #![warn(clippy::unwrap_used, clippy::expect_used)]\n \n+trait OptionExt {\n+    type Item;\n+\n+    fn unwrap_err(self) -> Self::Item;\n+\n+    fn expect_err(self, msg: &str) -> Self::Item;\n+}\n+\n+impl<T> OptionExt for Option<T> {\n+    type Item = T;\n+    fn unwrap_err(self) -> T {\n+        panic!();\n+    }\n+\n+    fn expect_err(self, msg: &str) -> T {\n+        panic!();\n+    }\n+}\n+\n fn main() {\n     Some(3).unwrap();\n     Some(3).expect(\"Hello world!\");\n \n+    // Don't trigger on unwrap_err on an option\n+    Some(3).unwrap_err();\n+    Some(3).expect_err(\"Hellow none!\");\n+\n     let a: Result<i32, i32> = Ok(3);\n     a.unwrap();\n     a.expect(\"Hello world!\");\n+    a.unwrap_err();\n+    a.expect_err(\"Hello error!\");\n }"}, {"sha": "1a19459b2c174c0ca8dfaee96d6148effd554094", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c1e04352bd220d2b912715aa07e1d04fe97d84f2/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e04352bd220d2b912715aa07e1d04fe97d84f2/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=c1e04352bd220d2b912715aa07e1d04fe97d84f2", "patch": "@@ -1,5 +1,5 @@\n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_expect_used.rs:4:5\n+  --> $DIR/unwrap_expect_used.rs:23:5\n    |\n LL |     Some(3).unwrap();\n    |     ^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     Some(3).unwrap();\n    = help: if this value is `None`, it will panic\n \n error: used `expect()` on `an Option` value\n-  --> $DIR/unwrap_expect_used.rs:5:5\n+  --> $DIR/unwrap_expect_used.rs:24:5\n    |\n LL |     Some(3).expect(\"Hello world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,20 +17,36 @@ LL |     Some(3).expect(\"Hello world!\");\n    = help: if this value is `None`, it will panic\n \n error: used `unwrap()` on `a Result` value\n-  --> $DIR/unwrap_expect_used.rs:8:5\n+  --> $DIR/unwrap_expect_used.rs:31:5\n    |\n LL |     a.unwrap();\n    |     ^^^^^^^^^^\n    |\n    = help: if this value is an `Err`, it will panic\n \n error: used `expect()` on `a Result` value\n-  --> $DIR/unwrap_expect_used.rs:9:5\n+  --> $DIR/unwrap_expect_used.rs:32:5\n    |\n LL |     a.expect(\"Hello world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if this value is an `Err`, it will panic\n \n-error: aborting due to 4 previous errors\n+error: used `unwrap_err()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:33:5\n+   |\n+LL |     a.unwrap_err();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: if this value is an `Ok`, it will panic\n+\n+error: used `expect_err()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:34:5\n+   |\n+LL |     a.expect_err(\"Hello error!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this value is an `Ok`, it will panic\n+\n+error: aborting due to 6 previous errors\n "}]}