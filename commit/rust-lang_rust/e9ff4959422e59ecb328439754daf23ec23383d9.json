{"sha": "e9ff4959422e59ecb328439754daf23ec23383d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZmY0OTU5NDIyZTU5ZWNiMzI4NDM5NzU0ZGFmMjNlYzIzMzgzZDk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-02T21:07:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-03T04:47:20Z"}, "message": "Merge branch 'issue-1983' of https://github.com/thomaslee/rust into issue-2090\n\nThis adds a new os::copy_file function, contributed by Thomas Lee.\nI added test cases.", "tree": {"sha": "d2fdb28c3e27df9f3b44fe201e3e7d4629c97ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2fdb28c3e27df9f3b44fe201e3e7d4629c97ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ff4959422e59ecb328439754daf23ec23383d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ff4959422e59ecb328439754daf23ec23383d9", "html_url": "https://github.com/rust-lang/rust/commit/e9ff4959422e59ecb328439754daf23ec23383d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ff4959422e59ecb328439754daf23ec23383d9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a0e9c9992836becb9cb231343f95e691a642a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a0e9c9992836becb9cb231343f95e691a642a3", "html_url": "https://github.com/rust-lang/rust/commit/28a0e9c9992836becb9cb231343f95e691a642a3"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "6b4d363aeebe0495734dd6451c3fe0e257f53aab", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff4959422e59ecb328439754daf23ec23383d9/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff4959422e59ecb328439754daf23ec23383d9/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=e9ff4959422e59ecb328439754daf23ec23383d9", "patch": "@@ -1155,6 +1155,9 @@ mod funcs {\n             fn CreateDirectoryW(lpPathName: LPCWSTR,\n                                 lpSecurityAttributes:\n                                 LPSECURITY_ATTRIBUTES) -> BOOL;\n+            fn CopyFileW(lpExistingFileName: LPCWSTR,\n+                         lpNewFileName: LPCWSTR,\n+                         bFailIfExists: BOOL) -> BOOL;\n             fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n             fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n             fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;"}, {"sha": "c6ed037f37ac5c08f86bee099eea8b3f31627fe3", "filename": "src/libcore/os.rs", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff4959422e59ecb328439754daf23ec23383d9/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff4959422e59ecb328439754daf23ec23383d9/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=e9ff4959422e59ecb328439754daf23ec23383d9", "patch": "@@ -30,7 +30,8 @@ export env, getenv, setenv, fdopen, pipe;\n export getcwd, dll_filename, self_exe_path;\n export exe_suffix, dll_suffix, sysname;\n export homedir, list_dir, list_dir_path, path_is_dir, path_exists,\n-       make_absolute, make_dir, remove_dir, change_dir, remove_file;\n+       make_absolute, make_dir, remove_dir, change_dir, remove_file,\n+       copy_file;\n \n // FIXME: move these to str perhaps?\n export as_c_charp, fill_charp_buf;\n@@ -534,13 +535,76 @@ fn change_dir(p: path) -> bool {\n     }\n }\n \n+#[doc = \"Copies a file from one location to another\"]\n+fn copy_file(from: path, to: path) -> bool {\n+    ret do_copy_file(from, to);\n+\n+    #[cfg(target_os = \"win32\")]\n+    fn do_copy_file(from: path, to: path) -> bool {\n+        // FIXME: remove imports when export globs work properly.\n+        import libc::funcs::extra::kernel32::*;\n+        import libc::types::os::arch::extra::*;\n+        import win32::*;\n+        ret as_utf16_p(from) {|fromp|\n+            as_utf16_p(to) {|top|\n+                CopyFileW(fromp, top, (0 as BOOL)) != (0 as BOOL)\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn do_copy_file(from: path, to: path) -> bool unsafe {\n+        let istream = as_c_charp(from) {|fromp|\n+            as_c_charp(\"rb\") {|modebuf|\n+                libc::fopen(fromp, modebuf)\n+            }\n+        };\n+        if istream as uint == 0u {\n+            ret false;\n+        }\n+        let ostream = as_c_charp(to) {|top|\n+            as_c_charp(\"w+b\") {|modebuf|\n+                libc::fopen(top, modebuf)\n+            }\n+        };\n+        if ostream as uint == 0u {\n+            fclose(istream);\n+            ret false;\n+        }\n+        let mut buf : [mut u8] = [mut];\n+        let bufsize = 8192u;\n+        vec::reserve(buf, bufsize);\n+        let mut done = false;\n+        let mut ok = true;\n+        while !done {\n+          vec::as_mut_buf(buf) {|b|\n+            let nread = libc::fread(b as *mut c_void, 1u, bufsize, istream);\n+              if nread > 0 as size_t {\n+                 if libc::fwrite(b as *c_void, 1u, nread, ostream) != nread {\n+                    ok = false;\n+                    done = true;\n+                 }\n+              } else {\n+                    done = true;\n+              }\n+           }\n+        }\n+        fclose(istream);\n+        fclose(ostream);\n+        ret ok;\n+    }\n+}\n+\n #[doc = \"Deletes an existing file\"]\n fn remove_file(p: path) -> bool {\n     ret unlink(p);\n \n     #[cfg(target_os = \"win32\")]\n     fn unlink(p: path) -> bool {\n         // FIXME: remove imports when export globs work properly.\n+        // (similar to Issue #2006)\n         import libc::funcs::extra::kernel32::*;\n         import libc::types::os::arch::extra::*;\n         import win32::*;\n@@ -762,4 +826,42 @@ mod tests {\n         assert (!os::path_exists(\"test/nonexistent-bogus-path\"));\n     }\n \n+    #[test]\n+    fn copy_file_does_not_exist() {\n+      assert !os::copy_file(\"test/nonexistent-bogus-path\",\n+                           \"test/other-bogus-path\");\n+      assert !os::path_exists(\"test/other-bogus-path\");\n+    }\n+\n+    #[test]\n+    fn copy_file_ok() {\n+      let tempdir = getcwd(); // would like to use $TMPDIR,\n+                              // doesn't seem to work on Linux\n+      assert (str::len(tempdir) > 0u);\n+      let in = tempdir + path::path_sep() + \"in.txt\";\n+      let out = tempdir + path::path_sep() + \"out.txt\";\n+\n+      /* Write the temp input file */\n+      let ostream = as_c_charp(in) {|fromp|\n+            as_c_charp(\"w+b\") {|modebuf|\n+                libc::fopen(fromp, modebuf)\n+            }\n+      };\n+      assert (ostream as uint != 0u);\n+      let s = \"hello\";\n+      let mut buf = str::bytes(s) + [0 as u8];\n+      vec::as_mut_buf(buf) {|b|\n+         assert (libc::fwrite(b as *c_void, 1u, str::len(s) + 1u, ostream) ==\n+                 buf.len())};\n+      assert (libc::fclose(ostream) == (0u as c_int));\n+      let rs = os::copy_file(in, out);\n+      if (!os::path_exists(in)) {\n+        fail (#fmt(\"%s doesn't exist\", in));\n+      }\n+      assert(rs);\n+      let rslt = run::run_program(\"diff\", [in, out]);\n+      assert (rslt == 0);\n+      assert (remove_file(in));\n+      assert (remove_file(out));\n+    }\n }"}]}