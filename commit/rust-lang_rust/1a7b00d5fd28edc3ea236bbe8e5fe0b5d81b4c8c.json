{"sha": "1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2IwMGQ1ZmQyOGVkYzNlYTIzNmJiZThlNWZlMGI1ZDgxYjRjOGM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-08T12:18:50Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-08T12:19:27Z"}, "message": "Don't look for niches inside generator types. Fixes #47253", "tree": {"sha": "45ef222240cdb6dcbcf5d82b5c10f417f7b1af7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ef222240cdb6dcbcf5d82b5c10f417f7b1af7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c", "html_url": "https://github.com/rust-lang/rust/commit/1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795594cd8ce3272bd6b1ebf7e1b7f33a5a86e3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/795594cd8ce3272bd6b1ebf7e1b7f33a5a86e3ac", "html_url": "https://github.com/rust-lang/rust/commit/795594cd8ce3272bd6b1ebf7e1b7f33a5a86e3ac"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "50efb73003731af4346c40c25165e25bddbfd3fc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=1a7b00d5fd28edc3ea236bbe8e5fe0b5d81b4c8c", "patch": "@@ -2295,6 +2295,13 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             }, niche_start))\n         };\n \n+        // Locals variables which live across yields are stored\n+        // in the generator type as fields. These may be uninitialized\n+        // so we don't look for niches there.\n+        if let ty::TyGenerator(..) = self.ty.sty {\n+            return Ok(None);\n+        }\n+\n         match self.abi {\n             Abi::Scalar(ref scalar) => {\n                 return Ok(scalar_component(scalar, Size::from_bytes(0)));"}]}