{"sha": "f669b78ffc9db8352c859d8c83c244975dbf0397", "node_id": "C_kwDOAAsO6NoAKGY2NjliNzhmZmM5ZGI4MzUyYzg1OWQ4YzgzYzI0NDk3NWRiZjAzOTc", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-24T14:09:47Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-30T12:38:19Z"}, "message": "errors: simplify referring to fluent attributes\n\nTo render the message of a Fluent attribute, the identifier of the\nFluent message must be known. `DiagnosticMessage::FluentIdentifier`\ncontains both the message's identifier and optionally the identifier of\nan attribute. Generated constants for each attribute would therefore\nneed to be named uniquely (amongst all error messages) or be able to\nrefer to only the attribute identifier which will be combined with a\nmessage identifier later. In this commit, the latter strategy is\nimplemented as part of the `Diagnostic` type's functions for adding\nsubdiagnostics of various kinds.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "4676a1dc2d4b63283e4e88eec83358381242fdc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4676a1dc2d4b63283e4e88eec83358381242fdc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f669b78ffc9db8352c859d8c83c244975dbf0397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f669b78ffc9db8352c859d8c83c244975dbf0397", "html_url": "https://github.com/rust-lang/rust/commit/f669b78ffc9db8352c859d8c83c244975dbf0397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f669b78ffc9db8352c859d8c83c244975dbf0397/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855fc022fe879f4e3493a024f9c6b981d6317612", "url": "https://api.github.com/repos/rust-lang/rust/commits/855fc022fe879f4e3493a024f9c6b981d6317612", "html_url": "https://github.com/rust-lang/rust/commit/855fc022fe879f4e3493a024f9c6b981d6317612"}], "stats": {"total": 340, "additions": 190, "deletions": 150}, "files": [{"sha": "02d076c95ca5218d838f69c829f88eb24998da1c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -234,6 +234,48 @@ pub fn fallback_fluent_bundle(\n /// Identifier for the Fluent message/attribute corresponding to a diagnostic message.\n type FluentId = Cow<'static, str>;\n \n+/// Abstraction over a message in a subdiagnostic (i.e. label, note, help, etc) to support both\n+/// translatable and non-translatable diagnostic messages.\n+///\n+/// Translatable messages for subdiagnostics are typically attributes attached to a larger Fluent\n+/// message so messages of this type must be combined with a `DiagnosticMessage` (using\n+/// `DiagnosticMessage::with_subdiagnostic_message`) before rendering. However, subdiagnostics from\n+/// the `SessionSubdiagnostic` derive refer to Fluent identifiers directly.\n+pub enum SubdiagnosticMessage {\n+    /// Non-translatable diagnostic message.\n+    // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n+    Str(String),\n+    /// Identifier of a Fluent message. Instances of this variant are generated by the\n+    /// `SessionSubdiagnostic` derive.\n+    FluentIdentifier(FluentId),\n+    /// Attribute of a Fluent message. Needs to be combined with a Fluent identifier to produce an\n+    /// actual translated message. Instances of this variant are generated by the `fluent_messages`\n+    /// macro.\n+    ///\n+    /// <https://projectfluent.org/fluent/guide/attributes.html>\n+    FluentAttr(FluentId),\n+}\n+\n+impl SubdiagnosticMessage {\n+    /// Create a `SubdiagnosticMessage` for the provided Fluent attribute.\n+    pub fn attr(id: impl Into<FluentId>) -> Self {\n+        SubdiagnosticMessage::FluentAttr(id.into())\n+    }\n+\n+    /// Create a `SubdiagnosticMessage` for the provided Fluent identifier.\n+    pub fn message(id: impl Into<FluentId>) -> Self {\n+        SubdiagnosticMessage::FluentIdentifier(id.into())\n+    }\n+}\n+\n+/// `From` impl that enables existing diagnostic calls to functions which now take\n+/// `impl Into<SubdiagnosticMessage>` to continue to work as before.\n+impl<S: Into<String>> From<S> for SubdiagnosticMessage {\n+    fn from(s: S) -> Self {\n+        SubdiagnosticMessage::Str(s.into())\n+    }\n+}\n+\n /// Abstraction over a message in a diagnostic to support both translatable and non-translatable\n /// diagnostic messages.\n ///\n@@ -252,6 +294,29 @@ pub enum DiagnosticMessage {\n }\n \n impl DiagnosticMessage {\n+    /// Given a `SubdiagnosticMessage` which may contain a Fluent attribute, create a new\n+    /// `DiagnosticMessage` that combines that attribute with the Fluent identifier of `self`.\n+    ///\n+    /// - If the `SubdiagnosticMessage` is non-translatable then return the message as a\n+    /// `DiagnosticMessage`.\n+    /// - If `self` is non-translatable then return `self`'s message.\n+    pub fn with_subdiagnostic_message(&self, sub: SubdiagnosticMessage) -> Self {\n+        let attr = match sub {\n+            SubdiagnosticMessage::Str(s) => return DiagnosticMessage::Str(s.clone()),\n+            SubdiagnosticMessage::FluentIdentifier(id) => {\n+                return DiagnosticMessage::FluentIdentifier(id, None);\n+            }\n+            SubdiagnosticMessage::FluentAttr(attr) => attr,\n+        };\n+\n+        match self {\n+            DiagnosticMessage::Str(s) => DiagnosticMessage::Str(s.clone()),\n+            DiagnosticMessage::FluentIdentifier(id, _) => {\n+                DiagnosticMessage::FluentIdentifier(id.clone(), Some(attr))\n+            }\n+        }\n+    }\n+\n     /// Returns the `String` contained within the `DiagnosticMessage::Str` variant, assuming that\n     /// this diagnostic message is of the legacy, non-translatable variety. Panics if this\n     /// assumption does not hold.\n@@ -266,14 +331,9 @@ impl DiagnosticMessage {\n     }\n \n     /// Create a `DiagnosticMessage` for the provided Fluent identifier.\n-    pub fn fluent(id: impl Into<FluentId>) -> Self {\n+    pub fn new(id: impl Into<FluentId>) -> Self {\n         DiagnosticMessage::FluentIdentifier(id.into(), None)\n     }\n-\n-    /// Create a `DiagnosticMessage` for the provided Fluent identifier and attribute.\n-    pub fn fluent_attr(id: impl Into<FluentId>, attr: impl Into<FluentId>) -> Self {\n-        DiagnosticMessage::FluentIdentifier(id.into(), Some(attr.into()))\n-    }\n }\n \n /// `From` impl that enables existing diagnostic calls to functions which now take"}, {"sha": "643f3c12134c98426a490388a4a04ff83fc55c5c", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 52, "deletions": 34, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -1,7 +1,7 @@\n use crate::snippet::Style;\n use crate::{\n-    CodeSuggestion, DiagnosticMessage, Level, MultiSpan, Substitution, SubstitutionPart,\n-    SuggestionStyle,\n+    CodeSuggestion, DiagnosticMessage, Level, MultiSpan, SubdiagnosticMessage, Substitution,\n+    SubstitutionPart, SuggestionStyle,\n };\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_error_messages::FluentValue;\n@@ -283,8 +283,8 @@ impl Diagnostic {\n     ///\n     /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n     /// the `Span` supplied when creating the diagnostic is primary.\n-    pub fn span_label(&mut self, span: Span, label: impl Into<DiagnosticMessage>) -> &mut Self {\n-        self.span.push_span_label(span, label.into());\n+    pub fn span_label(&mut self, span: Span, label: impl Into<SubdiagnosticMessage>) -> &mut Self {\n+        self.span.push_span_label(span, self.subdiagnostic_message_to_diagnostic_message(label));\n         self\n     }\n \n@@ -401,12 +401,12 @@ impl Diagnostic {\n     }\n \n     /// Add a note attached to this diagnostic.\n-    pub fn note(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self {\n+    pub fn note(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Note, msg, MultiSpan::new(), None);\n         self\n     }\n \n-    pub fn highlighted_note<M: Into<DiagnosticMessage>>(\n+    pub fn highlighted_note<M: Into<SubdiagnosticMessage>>(\n         &mut self,\n         msg: Vec<(M, Style)>,\n     ) -> &mut Self {\n@@ -416,7 +416,7 @@ impl Diagnostic {\n \n     /// Prints the span with a note above it.\n     /// This is like [`Diagnostic::note()`], but it gets its own span.\n-    pub fn note_once(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self {\n+    pub fn note_once(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::OnceNote, msg, MultiSpan::new(), None);\n         self\n     }\n@@ -426,7 +426,7 @@ impl Diagnostic {\n     pub fn span_note<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self {\n         self.sub(Level::Note, msg, sp.into(), None);\n         self\n@@ -437,14 +437,14 @@ impl Diagnostic {\n     pub fn span_note_once<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self {\n         self.sub(Level::OnceNote, msg, sp.into(), None);\n         self\n     }\n \n     /// Add a warning attached to this diagnostic.\n-    pub fn warn(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self {\n+    pub fn warn(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Warning, msg, MultiSpan::new(), None);\n         self\n     }\n@@ -454,14 +454,14 @@ impl Diagnostic {\n     pub fn span_warn<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self {\n         self.sub(Level::Warning, msg, sp.into(), None);\n         self\n     }\n \n     /// Add a help message attached to this diagnostic.\n-    pub fn help(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self {\n+    pub fn help(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Help, msg, MultiSpan::new(), None);\n         self\n     }\n@@ -477,7 +477,7 @@ impl Diagnostic {\n     pub fn span_help<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self {\n         self.sub(Level::Help, msg, sp.into(), None);\n         self\n@@ -514,7 +514,7 @@ impl Diagnostic {\n     /// In other words, multiple changes need to be applied as part of this suggestion.\n     pub fn multipart_suggestion(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -530,7 +530,7 @@ impl Diagnostic {\n     /// In other words, multiple changes need to be applied as part of this suggestion.\n     pub fn multipart_suggestion_verbose(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -544,7 +544,7 @@ impl Diagnostic {\n     /// [`Diagnostic::multipart_suggestion()`] but you can set the [`SuggestionStyle`].\n     pub fn multipart_suggestion_with_style(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n         style: SuggestionStyle,\n@@ -557,7 +557,7 @@ impl Diagnostic {\n                     .map(|(span, snippet)| SubstitutionPart { snippet, span })\n                     .collect(),\n             }],\n-            msg: msg.into(),\n+            msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style,\n             applicability,\n         });\n@@ -572,7 +572,7 @@ impl Diagnostic {\n     /// improve understandability.\n     pub fn tool_only_multipart_suggestion(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -584,7 +584,7 @@ impl Diagnostic {\n                     .map(|(span, snippet)| SubstitutionPart { snippet, span })\n                     .collect(),\n             }],\n-            msg: msg.into(),\n+            msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style: SuggestionStyle::CompletelyHidden,\n             applicability,\n         });\n@@ -611,7 +611,7 @@ impl Diagnostic {\n     pub fn span_suggestion(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -629,7 +629,7 @@ impl Diagnostic {\n     pub fn span_suggestion_with_style(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n         style: SuggestionStyle,\n@@ -638,7 +638,7 @@ impl Diagnostic {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart { snippet: suggestion.to_string(), span: sp }],\n             }],\n-            msg: msg.into(),\n+            msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style,\n             applicability,\n         });\n@@ -649,7 +649,7 @@ impl Diagnostic {\n     pub fn span_suggestion_verbose(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -668,7 +668,7 @@ impl Diagnostic {\n     pub fn span_suggestions(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestions: impl Iterator<Item = String>,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -680,7 +680,7 @@ impl Diagnostic {\n             .collect();\n         self.push_suggestion(CodeSuggestion {\n             substitutions,\n-            msg: msg.into(),\n+            msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n@@ -691,7 +691,7 @@ impl Diagnostic {\n     /// See also [`Diagnostic::span_suggestion()`].\n     pub fn multipart_suggestions(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -704,7 +704,7 @@ impl Diagnostic {\n                         .collect(),\n                 })\n                 .collect(),\n-            msg: msg.into(),\n+            msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n@@ -717,7 +717,7 @@ impl Diagnostic {\n     pub fn span_suggestion_short(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -740,7 +740,7 @@ impl Diagnostic {\n     pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -761,7 +761,7 @@ impl Diagnostic {\n     pub fn tool_only_span_suggestion(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self {\n@@ -831,20 +831,35 @@ impl Diagnostic {\n         &self.message\n     }\n \n+    /// Helper function that takes a `SubdiagnosticMessage` and returns a `DiagnosticMessage` by\n+    /// combining it with the primary message of the diagnostic (if translatable, otherwise it just\n+    /// passes the user's string along).\n+    fn subdiagnostic_message_to_diagnostic_message(\n+        &self,\n+        attr: impl Into<SubdiagnosticMessage>,\n+    ) -> DiagnosticMessage {\n+        let msg =\n+            self.message.iter().map(|(msg, _)| msg).next().expect(\"diagnostic with no messages\");\n+        msg.with_subdiagnostic_message(attr.into())\n+    }\n+\n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n     ///\n     /// Used by `proc_macro_server` for implementing `server::Diagnostic`.\n     pub fn sub(\n         &mut self,\n         level: Level,\n-        message: impl Into<DiagnosticMessage>,\n+        message: impl Into<SubdiagnosticMessage>,\n         span: MultiSpan,\n         render_span: Option<MultiSpan>,\n     ) {\n         let sub = SubDiagnostic {\n             level,\n-            message: vec![(message.into(), Style::NoStyle)],\n+            message: vec![(\n+                self.subdiagnostic_message_to_diagnostic_message(message),\n+                Style::NoStyle,\n+            )],\n             span,\n             render_span,\n         };\n@@ -853,14 +868,17 @@ impl Diagnostic {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n-    fn sub_with_highlights<M: Into<DiagnosticMessage>>(\n+    fn sub_with_highlights<M: Into<SubdiagnosticMessage>>(\n         &mut self,\n         level: Level,\n         mut message: Vec<(M, Style)>,\n         span: MultiSpan,\n         render_span: Option<MultiSpan>,\n     ) {\n-        let message = message.drain(..).map(|m| (m.0.into(), m.1)).collect();\n+        let message = message\n+            .drain(..)\n+            .map(|m| (self.subdiagnostic_message_to_diagnostic_message(m.0), m.1))\n+            .collect();\n         let sub = SubDiagnostic { level, message, span, render_span };\n         self.children.push(sub);\n     }"}, {"sha": "9e0a99849a3f4e3c7a80f6cddad253ac8792fe2e", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -1,5 +1,8 @@\n use crate::diagnostic::IntoDiagnosticArg;\n-use crate::{Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, ErrorGuaranteed};\n+use crate::{\n+    Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, ErrorGuaranteed,\n+    SubdiagnosticMessage,\n+};\n use crate::{Handler, Level, MultiSpan, StashKey};\n use rustc_lint_defs::Applicability;\n \n@@ -395,7 +398,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     /// the diagnostic was constructed. However, the label span is *not* considered a\n     /// [\"primary span\"][`MultiSpan`]; only the `Span` supplied when creating the diagnostic is\n     /// primary.\n-    pub fn span_label(&mut self, span: Span, label: impl Into<DiagnosticMessage>) -> &mut Self);\n+    pub fn span_label(&mut self, span: Span, label: impl Into<SubdiagnosticMessage>) -> &mut Self);\n \n     forward!(\n     /// Labels all the given spans with the provided label.\n@@ -430,25 +433,29 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         found: DiagnosticStyledString,\n     ) -> &mut Self);\n \n-    forward!(pub fn note(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self);\n-    forward!(pub fn note_once(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self);\n+    forward!(pub fn note(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self);\n+    forward!(pub fn note_once(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self);\n     forward!(pub fn span_note(\n         &mut self,\n         sp: impl Into<MultiSpan>,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self);\n     forward!(pub fn span_note_once(\n         &mut self,\n         sp: impl Into<MultiSpan>,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self);\n-    forward!(pub fn warn(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self);\n-    forward!(pub fn span_warn(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> &mut Self);\n-    forward!(pub fn help(&mut self, msg: impl Into<DiagnosticMessage>) -> &mut Self);\n+    forward!(pub fn warn(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self);\n+    forward!(pub fn span_warn(\n+        &mut self,\n+        sp: impl Into<MultiSpan>,\n+        msg: impl Into<SubdiagnosticMessage>,\n+    ) -> &mut Self);\n+    forward!(pub fn help(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self);\n     forward!(pub fn span_help(\n         &mut self,\n         sp: impl Into<MultiSpan>,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self);\n     forward!(pub fn help_use_latest_edition(&mut self,) -> &mut Self);\n     forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n@@ -457,67 +464,67 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n \n     forward!(pub fn multipart_suggestion(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn multipart_suggestion_verbose(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn tool_only_multipart_suggestion(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestions(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestions: impl Iterator<Item = String>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn multipart_suggestions(\n         &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion_short(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion_verbose(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn tool_only_span_suggestion(\n         &mut self,\n         sp: Span,\n-        msg: impl Into<DiagnosticMessage>,\n+        msg: impl Into<SubdiagnosticMessage>,\n         suggestion: impl ToString,\n         applicability: Applicability,\n     ) -> &mut Self);"}, {"sha": "fb02f1d68ebc91763c287c70300997866f9abb3c", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -32,7 +32,8 @@ use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n     fallback_fluent_bundle, fluent, fluent_bundle, DiagnosticMessage, FluentBundle,\n-    LanguageIdentifier, LazyFallbackBundle, MultiSpan, SpanLabel, DEFAULT_LOCALE_RESOURCES,\n+    LanguageIdentifier, LazyFallbackBundle, MultiSpan, SpanLabel, SubdiagnosticMessage,\n+    DEFAULT_LOCALE_RESOURCES,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_span::source_map::SourceMap;"}, {"sha": "95ee0d4a060d27fbc90536dad3f1aa3ee82c16cf", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -126,14 +126,14 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     (Some((SessionDiagnosticKind::Error, _)), Some((slug, _))) => {\n                         quote! {\n                             let mut #diag = #sess.struct_err(\n-                                rustc_errors::DiagnosticMessage::fluent(#slug),\n+                                rustc_errors::DiagnosticMessage::new(#slug),\n                             );\n                         }\n                     }\n                     (Some((SessionDiagnosticKind::Warn, _)), Some((slug, _))) => {\n                         quote! {\n                             let mut #diag = #sess.struct_warn(\n-                                rustc_errors::DiagnosticMessage::fluent(#slug),\n+                                rustc_errors::DiagnosticMessage::new(#slug),\n                             );\n                         }\n                     }\n@@ -254,21 +254,6 @@ impl SessionDiagnosticDeriveBuilder {\n \n         if matches!(name, \"help\" | \"note\") && matches!(meta, Meta::Path(_) | Meta::NameValue(_)) {\n             let diag = &self.diag;\n-            let slug = match &self.slug {\n-                Some((slug, _)) => slug.as_str(),\n-                None => throw_span_err!(\n-                    span,\n-                    &format!(\n-                        \"`#[{}{}]` must come after `#[error(..)]` or `#[warn(..)]`\",\n-                        name,\n-                        match meta {\n-                            Meta::Path(_) => \"\",\n-                            Meta::NameValue(_) => \" = ...\",\n-                            _ => unreachable!(),\n-                        }\n-                    )\n-                ),\n-            };\n             let id = match meta {\n                 Meta::Path(..) => quote! { #name },\n                 Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n@@ -279,7 +264,7 @@ impl SessionDiagnosticDeriveBuilder {\n             let fn_name = proc_macro2::Ident::new(name, attr.span());\n \n             return Ok(quote! {\n-                #diag.#fn_name(rustc_errors::DiagnosticMessage::fluent_attr(#slug, #id));\n+                #diag.#fn_name(rustc_errors::SubdiagnosticMessage::attr(#id));\n             });\n         }\n \n@@ -525,13 +510,8 @@ impl SessionDiagnosticDeriveBuilder {\n \n                 let method = format_ident!(\"span_{}\", name);\n \n-                let slug = self\n-                    .slug\n-                    .as_ref()\n-                    .map(|(slug, _)| slug.as_str())\n-                    .unwrap_or_else(|| \"missing-slug\");\n                 let msg = msg.as_deref().unwrap_or(\"suggestion\");\n-                let msg = quote! { rustc_errors::DiagnosticMessage::fluent_attr(#slug, #msg) };\n+                let msg = quote! { rustc_errors::SubdiagnosticMessage::attr(#msg) };\n                 let code = code.unwrap_or_else(|| quote! { String::new() });\n \n                 Ok(quote! { #diag.#method(#span_field, #msg, #code, #applicability); })\n@@ -549,14 +529,11 @@ impl SessionDiagnosticDeriveBuilder {\n         fluent_attr_identifier: &str,\n     ) -> TokenStream {\n         let diag = &self.diag;\n-\n-        let slug =\n-            self.slug.as_ref().map(|(slug, _)| slug.as_str()).unwrap_or_else(|| \"missing-slug\");\n         let fn_name = format_ident!(\"span_{}\", kind);\n         quote! {\n             #diag.#fn_name(\n                 #field_binding,\n-                rustc_errors::DiagnosticMessage::fluent_attr(#slug, #fluent_attr_identifier)\n+                rustc_errors::SubdiagnosticMessage::attr(#fluent_attr_identifier)\n             );\n         }\n     }\n@@ -565,9 +542,8 @@ impl SessionDiagnosticDeriveBuilder {\n     /// and `fluent_attr_identifier`.\n     fn add_subdiagnostic(&self, kind: &Ident, fluent_attr_identifier: &str) -> TokenStream {\n         let diag = &self.diag;\n-        let slug = self.slug.as_ref().map(|(slug, _)| slug.as_str()).unwrap_or(\"missing-slug\");\n         quote! {\n-            #diag.#kind(rustc_errors::DiagnosticMessage::fluent_attr(#slug, #fluent_attr_identifier));\n+            #diag.#kind(rustc_errors::SubdiagnosticMessage::attr(#fluent_attr_identifier));\n         }\n     }\n "}, {"sha": "42a9bf477a41cd006963f1985af99f16ad29738d", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -11,7 +11,7 @@ use proc_macro::{Diagnostic, Level, Span};\n use proc_macro2::TokenStream;\n use quote::quote;\n use std::{\n-    collections::HashMap,\n+    collections::{HashMap, HashSet},\n     fs::File,\n     io::Read,\n     path::{Path, PathBuf},\n@@ -100,6 +100,10 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n         let ident_span = res.ident.span().unwrap();\n         let path_span = res.resource.span().unwrap();\n \n+        // Set of Fluent attribute names already output, to avoid duplicate type errors - any given\n+        // constant created for a given attribute is the same.\n+        let mut previous_attrs = HashSet::new();\n+\n         let relative_ftl_path = res.resource.value();\n         let absolute_ftl_path =\n             invocation_relative_path_to_absolute(ident_span, &relative_ftl_path);\n@@ -199,13 +203,15 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                 });\n \n                 for Attribute { id: Identifier { name: attr_name }, .. } in attributes {\n-                    let attr_snake_name = attr_name.replace(\"-\", \"_\");\n-                    let snake_name = Ident::new(&format!(\"{snake_name}_{attr_snake_name}\"), span);\n+                    let snake_name = Ident::new(&attr_name.replace(\"-\", \"_\"), span);\n+                    if !previous_attrs.insert(snake_name.clone()) {\n+                        continue;\n+                    }\n+\n                     constants.extend(quote! {\n-                        pub const #snake_name: crate::DiagnosticMessage =\n-                            crate::DiagnosticMessage::FluentIdentifier(\n-                                std::borrow::Cow::Borrowed(#name),\n-                                Some(std::borrow::Cow::Borrowed(#attr_name))\n+                        pub const #snake_name: crate::SubdiagnosticMessage =\n+                            crate::SubdiagnosticMessage::FluentAttr(\n+                                std::borrow::Cow::Borrowed(#attr_name)\n                             );\n                     });\n                 }"}, {"sha": "9aeb484bfd52d55253e883a1127f69e8619a2a96", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -397,7 +397,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n         let diag = &self.diag;\n         let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n-        let message = quote! { rustc_errors::DiagnosticMessage::fluent(#slug) };\n+        let message = quote! { rustc_errors::SubdiagnosticMessage::message(#slug) };\n         let call = if matches!(kind, SubdiagnosticKind::Suggestion(..)) {\n             if let Some(span) = span_field {\n                 quote! { #diag.#name(#span, #message, #code, #applicability); }"}, {"sha": "12302315e9044a73c6dc50eba0aeeefa264acbaf", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -17,10 +17,10 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, ErrorGuaranteed};\n use rustc_errors::{\n-    Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n+    fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, ErrorGuaranteed};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n@@ -658,13 +658,10 @@ impl<'a> Parser<'a> {\n                     err.delay_as_bug();\n                     self.struct_span_err(\n                         expr.span,\n-                        DiagnosticMessage::fluent(\"parser-struct-literal-body-without-path\"),\n+                        fluent::parser::struct_literal_body_without_path,\n                     )\n                     .multipart_suggestion(\n-                        DiagnosticMessage::fluent_attr(\n-                            \"parser-struct-literal-body-without-path\",\n-                            \"suggestion\",\n-                        ),\n+                        fluent::parser::suggestion,\n                         vec![\n                             (expr.span.shrink_to_lo(), \"{ SomeStruct \".to_string()),\n                             (expr.span.shrink_to_hi(), \" }\".to_string()),"}, {"sha": "a7f736fed14a330ad4a16559cb8218916858f27f", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -277,7 +277,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 .join(\", \"),\n         );\n \n-        err.span_label(self.def_span, rustc_errors::fluent::typeck::missing_type_params_label);\n+        err.span_label(self.def_span, rustc_errors::fluent::typeck::label);\n \n         let mut suggested = false;\n         if let (Ok(snippet), true) = (\n@@ -295,21 +295,18 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 // least we can clue them to the correct syntax `Iterator<Type>`.\n                 err.span_suggestion(\n                     self.span,\n-                    rustc_errors::fluent::typeck::missing_type_params_suggestion,\n+                    rustc_errors::fluent::typeck::suggestion,\n                     format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n                     Applicability::HasPlaceholders,\n                 );\n                 suggested = true;\n             }\n         }\n         if !suggested {\n-            err.span_label(\n-                self.span,\n-                rustc_errors::fluent::typeck::missing_type_params_no_suggestion_label,\n-            );\n+            err.span_label(self.span, rustc_errors::fluent::typeck::no_suggestion_label);\n         }\n \n-        err.note(rustc_errors::fluent::typeck::missing_type_params_note);\n+        err.note(rustc_errors::fluent::typeck::note);\n         err\n     }\n }"}, {"sha": "0390a07850b41ee04dbc88c843df682d503f7d8d", "filename": "src/test/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -12,6 +12,12 @@ pub enum DiagnosticMessage {\n     FluentIdentifier(std::borrow::Cow<'static, str>, Option<std::borrow::Cow<'static, str>>),\n }\n \n+/// Copy of the relevant `SubdiagnosticMessage` variant constructed by `fluent_messages` as it\n+/// expects `crate::SubdiagnosticMessage` to exist.\n+pub enum SubdiagnosticMessage {\n+    FluentAttr(std::borrow::Cow<'static, str>),\n+}\n+\n mod missing_absolute {\n     use super::fluent_messages;\n "}, {"sha": "526bca43f694d529b921b4b2abf63ffe87bfd895", "filename": "src/test/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -1,21 +1,21 @@\n error: could not open Fluent resource\n-  --> $DIR/test.rs:19:29\n+  --> $DIR/test.rs:25:29\n    |\n LL |         missing_absolute => \"/definitely_does_not_exist.ftl\",\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: os-specific message\n \n error: could not open Fluent resource\n-  --> $DIR/test.rs:28:29\n+  --> $DIR/test.rs:34:29\n    |\n LL |         missing_relative => \"../definitely_does_not_exist.ftl\",\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: os-specific message\n \n error: could not parse Fluent resource\n-  --> $DIR/test.rs:37:28\n+  --> $DIR/test.rs:43:28\n    |\n LL |         missing_message => \"./missing-message.ftl\",\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,13 +30,13 @@ error: expected a message field for \"missing-message\"\n   |\n \n error: overrides existing message: `key`\n-  --> $DIR/test.rs:47:9\n+  --> $DIR/test.rs:53:9\n    |\n LL |         b => \"./duplicate-b.ftl\",\n    |         ^\n    |\n help: previously defined in this resource\n-  --> $DIR/test.rs:46:9\n+  --> $DIR/test.rs:52:9\n    |\n LL |         a => \"./duplicate-a.ftl\",\n    |         ^"}, {"sha": "84d5de173091ba18f06913767ce8c919e8dff384", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -404,31 +404,27 @@ struct ErrorWithHelpCustom {\n \n #[derive(SessionDiagnostic)]\n #[help]\n-//~^ ERROR `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[help = \"bar\"]\n-//~^ ERROR `#[help = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[note]\n-//~^ ERROR `#[note]` must come after `#[error(..)]` or `#[warn(..)]`\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n #[derive(SessionDiagnostic)]\n #[note = \"bar\"]\n-//~^ ERROR `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,"}, {"sha": "85ea44ec278c021eb88999f37d693388fdb9c7e3", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f669b78ffc9db8352c859d8c83c244975dbf0397/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=f669b78ffc9db8352c859d8c83c244975dbf0397", "patch": "@@ -301,38 +301,14 @@ LL |     #[label(\"bar\")]\n    |\n    = help: only `suggestion{,_short,_hidden,_verbose}` are valid field attributes\n \n-error: `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:406:1\n-   |\n-LL | #[help]\n-   | ^^^^^^^\n-\n-error: `#[help = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:414:1\n-   |\n-LL | #[help = \"bar\"]\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `#[note]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:422:1\n-   |\n-LL | #[note]\n-   | ^^^^^^^\n-\n-error: `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/diagnostic-derive.rs:430:1\n-   |\n-LL | #[note = \"bar\"]\n-   | ^^^^^^^^^^^^^^^\n-\n error: applicability cannot be set in both the field and attribute\n-  --> $DIR/diagnostic-derive.rs:440:49\n+  --> $DIR/diagnostic-derive.rs:436:49\n    |\n LL |     #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:448:49\n+  --> $DIR/diagnostic-derive.rs:444:49\n    |\n LL |     #[suggestion(message = \"bar\", code = \"...\", applicability = \"batman\")]\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -363,12 +339,12 @@ LL | #[derive(SessionDiagnostic)]\n              rustc_middle::ty::Ty<'tcx>\n              usize\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:531:19\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:538:19\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 39 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}