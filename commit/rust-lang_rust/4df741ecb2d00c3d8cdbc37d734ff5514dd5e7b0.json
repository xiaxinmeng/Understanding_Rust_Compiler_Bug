{"sha": "4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZjc0MWVjYjJkMDBjM2Q4Y2RiYzM3ZDczNGZmNTUxNGRkNWU3YjA=", "commit": {"author": {"name": "succcubbus", "email": "16743652+succcubbus@users.noreply.github.com", "date": "2019-12-13T18:20:02Z"}, "committer": {"name": "succcubbus", "email": "16743652+succcubbus@users.noreply.github.com", "date": "2019-12-13T18:20:02Z"}, "message": "fix goto definition when inbetween tokens\n\nfixes both goto_definition and goto_type_definition.\nbefore, when running goto between some non-trivia token and an\nidentifier, goto would be attempted for the non-trivia token.\nbut this does not make sense for e.g. L_PAREN or COLONCOLON only for\nIDENTs. now only IDENTs will be searched for in goto actions.", "tree": {"sha": "d8a4177f80d4024a8de2622426cfcb3b795c2683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a4177f80d4024a8de2622426cfcb3b795c2683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0", "html_url": "https://github.com/rust-lang/rust/commit/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0/comments", "author": {"login": "iyzana", "id": 16743652, "node_id": "MDQ6VXNlcjE2NzQzNjUy", "avatar_url": "https://avatars.githubusercontent.com/u/16743652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iyzana", "html_url": "https://github.com/iyzana", "followers_url": "https://api.github.com/users/iyzana/followers", "following_url": "https://api.github.com/users/iyzana/following{/other_user}", "gists_url": "https://api.github.com/users/iyzana/gists{/gist_id}", "starred_url": "https://api.github.com/users/iyzana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iyzana/subscriptions", "organizations_url": "https://api.github.com/users/iyzana/orgs", "repos_url": "https://api.github.com/users/iyzana/repos", "events_url": "https://api.github.com/users/iyzana/events{/privacy}", "received_events_url": "https://api.github.com/users/iyzana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iyzana", "id": 16743652, "node_id": "MDQ6VXNlcjE2NzQzNjUy", "avatar_url": "https://avatars.githubusercontent.com/u/16743652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iyzana", "html_url": "https://github.com/iyzana", "followers_url": "https://api.github.com/users/iyzana/followers", "following_url": "https://api.github.com/users/iyzana/following{/other_user}", "gists_url": "https://api.github.com/users/iyzana/gists{/gist_id}", "starred_url": "https://api.github.com/users/iyzana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iyzana/subscriptions", "organizations_url": "https://api.github.com/users/iyzana/orgs", "repos_url": "https://api.github.com/users/iyzana/repos", "events_url": "https://api.github.com/users/iyzana/events{/privacy}", "received_events_url": "https://api.github.com/users/iyzana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4", "html_url": "https://github.com/rust-lang/rust/commit/ebc95af2b5b91239fc1d8a5fc8344ded6f6ef3e4"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "96a73675ff7840f144bbac843468379921563987", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0", "patch": "@@ -3,7 +3,7 @@\n use hir::{db::AstDatabase, InFile};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, SyntaxNode,\n+    match_ast, AstNode, SyntaxKind, SyntaxNode,\n };\n \n use crate::{\n@@ -20,7 +20,7 @@ pub(crate) fn goto_definition(\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n     let original_token =\n-        file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+        file.token_at_offset(position.offset).find(|it| it.kind() == SyntaxKind::IDENT)?;\n     let token = descend_into_macros(db, position.file_id, original_token.clone());\n \n     let nav_targets = match_ast! {\n@@ -234,6 +234,18 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_definition_works_at_start_of_item() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            enum E { X(<|>Foo) }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_definition_resolves_correct_name() {\n         check_goto("}, {"sha": "cc1b90925dcaf3807c7549116992b8b9f73dfef5", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=4df741ecb2d00c3d8cdbc37d734ff5514dd5e7b0", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::db::AstDatabase;\n-use ra_syntax::{ast, AstNode};\n+use ra_syntax::{ast, AstNode, SyntaxKind};\n \n use crate::{\n     db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n@@ -13,7 +13,7 @@ pub(crate) fn goto_type_definition(\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = file.token_at_offset(position.offset).find(|it| it.kind() == SyntaxKind::IDENT)?;\n     let token = descend_into_macros(db, position.file_id, token);\n \n     let node = token.value.ancestors().find_map(|token| {\n@@ -102,4 +102,16 @@ mod tests {\n             \"Foo STRUCT_DEF FileId(1) [52; 65) [59; 62)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_type_definition_works_param() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            fn foo(<|>f: Foo) {}\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+    }\n }"}]}