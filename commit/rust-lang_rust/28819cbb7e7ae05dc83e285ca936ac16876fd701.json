{"sha": "28819cbb7e7ae05dc83e285ca936ac16876fd701", "node_id": "C_kwDOAAsO6NoAKDI4ODE5Y2JiN2U3YWUwNWRjODNlMjg1Y2E5MzZhYzE2ODc2ZmQ3MDE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-04T12:57:42Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-04T12:58:20Z"}, "message": "Formatting changes + add UI test", "tree": {"sha": "17a332a57bf489d136ef83d1e5edc4dca28d9417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a332a57bf489d136ef83d1e5edc4dca28d9417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28819cbb7e7ae05dc83e285ca936ac16876fd701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28819cbb7e7ae05dc83e285ca936ac16876fd701", "html_url": "https://github.com/rust-lang/rust/commit/28819cbb7e7ae05dc83e285ca936ac16876fd701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28819cbb7e7ae05dc83e285ca936ac16876fd701/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7360fa23f6e029770acae390b47e828f1f08347", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7360fa23f6e029770acae390b47e828f1f08347", "html_url": "https://github.com/rust-lang/rust/commit/b7360fa23f6e029770acae390b47e828f1f08347"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "269d9f3b102c196d0c4279eee54ace23c52edc55", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28819cbb7e7ae05dc83e285ca936ac16876fd701/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28819cbb7e7ae05dc83e285ca936ac16876fd701/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=28819cbb7e7ae05dc83e285ca936ac16876fd701", "patch": "@@ -1,10 +1,10 @@\n-use hir::{BlockCheckMode, ExprKind, Node};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n+use rustc_hir::{BlockCheckMode, ExprKind, Node};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n@@ -521,10 +521,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         match kind {\n             UnsafetyViolationKind::General => {\n                 // once\n-                // Mutable statics always require an unsafe block\n-                let unsafe_fn_msg = if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root)\n-                    && details != UnsafetyViolationDetails::UseOfMutableStatic\n-                {\n+                let unsafe_fn_msg = if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) {\n                     \" function or\"\n                 } else {\n                     \"\"\n@@ -542,12 +539,14 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 let note_non_inherited = tcx.hir().parent_iter(lint_root).find(|(id, node)| {\n                     if let Node::Expr(block) = node\n                         && let ExprKind::Block(block, _) = block.kind\n-                        && let BlockCheckMode::UnsafeBlock(_) = block.rules {\n-                            true\n-                        }\n+                        && let BlockCheckMode::UnsafeBlock(_) = block.rules\n+                    {\n+                        true\n+                    }\n                     else if let Some(sig) = tcx.hir().fn_sig_by_hir_id(*id)\n-                        && sig.header.is_unsafe() {\n-                            true\n+                        && sig.header.is_unsafe()\n+                    {\n+                        true\n                     } else {\n                         false\n                     }"}, {"sha": "6d797caa0f94d174d27185e3b3b4ea12b0a026f1", "filename": "src/test/ui/unsafe/unsafe-not-inherited.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28819cbb7e7ae05dc83e285ca936ac16876fd701/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28819cbb7e7ae05dc83e285ca936ac16876fd701/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.rs?ref=28819cbb7e7ae05dc83e285ca936ac16876fd701", "patch": "@@ -0,0 +1,26 @@\n+#![allow(unused, dead_code)]\n+\n+static mut FOO: u64 = 0;\n+\n+fn static_mod() {\n+    unsafe {static BAR: u64 = FOO;}\n+    //~^ ERROR: use of mutable static is unsafe\n+    //~| NOTE: use of mutable static\n+    //~| NOTE: mutable statics can be mutated by multiple threads\n+    //~| NOTE: items do not inherit unsafety\n+}\n+\n+unsafe fn unsafe_call() {}\n+fn foo() {\n+    unsafe {\n+    //~^ NOTE: items do not inherit unsafety\n+        fn bar() {\n+            unsafe_call();\n+            //~^ ERROR: call to unsafe function\n+            //~| NOTE: call to unsafe function\n+            //~| NOTE: consult the function's documentation\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3bc5ca5c9d151b6280f529612f7f9c333d22674a", "filename": "src/test/ui/unsafe/unsafe-not-inherited.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28819cbb7e7ae05dc83e285ca936ac16876fd701/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28819cbb7e7ae05dc83e285ca936ac16876fd701/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-not-inherited.stderr?ref=28819cbb7e7ae05dc83e285ca936ac16876fd701", "patch": "@@ -0,0 +1,24 @@\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-not-inherited.rs:6:31\n+   |\n+LL |     unsafe {static BAR: u64 = FOO;}\n+   |     ------                    ^^^ use of mutable static\n+   |     |\n+   |     items do not inherit unsafety from separate enclosing items\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-not-inherited.rs:18:13\n+   |\n+LL |     unsafe {\n+   |     ------ items do not inherit unsafety from separate enclosing items\n+...\n+LL |             unsafe_call();\n+   |             ^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}