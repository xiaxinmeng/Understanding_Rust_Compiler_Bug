{"sha": "8cc2b710db6ea851f0c4b636172861df98ba5ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYzJiNzEwZGI2ZWE4NTFmMGM0YjYzNjE3Mjg2MWRmOThiYTVlYWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-20T16:38:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-20T16:38:46Z"}, "message": "Merge #9345\n\n9345: fix: don't add duplicate `&` during completion r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "040844f1a7cbd829586a883e292f3fa5f090e3cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040844f1a7cbd829586a883e292f3fa5f090e3cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cc2b710db6ea851f0c4b636172861df98ba5ead", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgz28WCRBK7hj4Ov3rIwAA3tQIADTrOfYKZIzgT+kpyj374B3a\n3tFdI2jiHQ0g5tSVe6rl2nkDCUhzdP2ufy5KQKJpKc0EwNclQF4rGYaQNdSiOIqp\nBLLwt6PTJISXaIp+4bUP7yrjwFuZk7sV42VKVVT+1zYWxhqRubodoISZgnVtofH9\nv1NQtIZdhxdlGSSaRMe1Wi88Bl1/cZ2FFHcLtEhvVUXB7xdmfsyBcRchOCS3hDMV\n027BjiQNIl75zNvFzyO4oIrPMUTsrJjr3uIwH6eC6KubUvixoRaGL5urCpztPvWi\nk3YgiycZNBd9PFuz3YfoiiXvZeYo0mTWvU/1VOJSimP2XWpyuzLx3L4u/C5W5uI=\n=/3sr\n-----END PGP SIGNATURE-----\n", "payload": "tree 040844f1a7cbd829586a883e292f3fa5f090e3cb\nparent f1097c2d26b68741612ecd3411fe41dc13fb005a\nparent 9a3eae8755f99f4cfb8c2abb0885ec500b946218\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624207126 +0000\ncommitter GitHub <noreply@github.com> 1624207126 +0000\n\nMerge #9345\n\n9345: fix: don't add duplicate `&` during completion r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc2b710db6ea851f0c4b636172861df98ba5ead", "html_url": "https://github.com/rust-lang/rust/commit/8cc2b710db6ea851f0c4b636172861df98ba5ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cc2b710db6ea851f0c4b636172861df98ba5ead/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1097c2d26b68741612ecd3411fe41dc13fb005a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1097c2d26b68741612ecd3411fe41dc13fb005a", "html_url": "https://github.com/rust-lang/rust/commit/f1097c2d26b68741612ecd3411fe41dc13fb005a"}, {"sha": "9a3eae8755f99f4cfb8c2abb0885ec500b946218", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3eae8755f99f4cfb8c2abb0885ec500b946218", "html_url": "https://github.com/rust-lang/rust/commit/9a3eae8755f99f4cfb8c2abb0885ec500b946218"}], "stats": {"total": 140, "additions": 72, "deletions": 68}, "files": [{"sha": "7b76600dfa2dcb4c9bdfc17ee7bb7bc2144a5c94", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8cc2b710db6ea851f0c4b636172861df98ba5ead/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc2b710db6ea851f0c4b636172861df98ba5ead/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=8cc2b710db6ea851f0c4b636172861df98ba5ead", "patch": "@@ -385,14 +385,19 @@ impl<'a> CompletionContext<'a> {\n                         (ty, name)\n                     },\n                     ast::ArgList(_it) => {\n-                        cov_mark::hit!(expected_type_fn_param_with_leading_char);\n-                        cov_mark::hit!(expected_type_fn_param_without_leading_char);\n+                        cov_mark::hit!(expected_type_fn_param);\n                         ActiveParameter::at_token(\n                             &self.sema,\n                             self.token.clone(),\n                         ).map(|ap| {\n                             let name = ap.ident().map(NameOrNameRef::Name);\n-                            (Some(ap.ty), name)\n+                            let ty = if has_ref(&self.token) {\n+                                cov_mark::hit!(expected_type_fn_param_ref);\n+                                ap.ty.remove_ref()\n+                            } else {\n+                                Some(ap.ty)\n+                            };\n+                            (ty, name)\n                         })\n                         .unwrap_or((None, None))\n                     },\n@@ -697,6 +702,19 @@ fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<(ast::Path, bool)> {\n     use_tree.path().zip(Some(true))\n }\n \n+fn has_ref(token: &SyntaxToken) -> bool {\n+    let mut token = token.clone();\n+    for skip in [WHITESPACE, IDENT, T![mut]] {\n+        if token.kind() == skip {\n+            token = match token.prev_token() {\n+                Some(it) => it,\n+                None => return false,\n+            }\n+        }\n+    }\n+    token.kind() == T![&]\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -769,33 +787,48 @@ fn foo() {\n     }\n \n     #[test]\n-    fn expected_type_fn_param_without_leading_char() {\n-        cov_mark::check!(expected_type_fn_param_without_leading_char);\n+    fn expected_type_fn_param() {\n+        cov_mark::check!(expected_type_fn_param);\n         check_expected_type_and_name(\n             r#\"\n-fn foo() {\n-    bar($0);\n-}\n-\n+fn foo() { bar($0); }\n+fn bar(x: u32) {}\n+\"#,\n+            expect![[r#\"ty: u32, name: x\"#]],\n+        );\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() { bar(c$0); }\n fn bar(x: u32) {}\n \"#,\n             expect![[r#\"ty: u32, name: x\"#]],\n         );\n     }\n \n     #[test]\n-    fn expected_type_fn_param_with_leading_char() {\n-        cov_mark::check!(expected_type_fn_param_with_leading_char);\n+    fn expected_type_fn_param_ref() {\n+        cov_mark::check!(expected_type_fn_param_ref);\n         check_expected_type_and_name(\n             r#\"\n-fn foo() {\n-    bar(c$0);\n-}\n-\n-fn bar(x: u32) {}\n+fn foo() { bar(&$0); }\n+fn bar(x: &u32) {}\n \"#,\n             expect![[r#\"ty: u32, name: x\"#]],\n         );\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() { bar(&mut $0); }\n+fn bar(x: &mut u32) {}\n+\"#,\n+            expect![[r#\"ty: u32, name: x\"#]],\n+        );\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() { bar(&c$0); }\n+fn bar(x: &u32) {}\n+        \"#,\n+            expect![[r#\"ty: u32, name: x\"#]],\n+        );\n     }\n \n     #[test]"}, {"sha": "1a9b6212af5bdd3055722bf590305f41e2a21e89", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 23, "deletions": 52, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8cc2b710db6ea851f0c4b636172861df98ba5ead/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cc2b710db6ea851f0c4b636172861df98ba5ead/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=8cc2b710db6ea851f0c4b636172861df98ba5ead", "patch": "@@ -1057,7 +1057,7 @@ fn f() {\n     #[test]\n     fn suggest_ref_mut() {\n         cov_mark::check!(suggest_ref);\n-        check(\n+        check_relevance(\n             r#\"\n struct S;\n fn foo(s: &mut S) {}\n@@ -1067,58 +1067,29 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"S\",\n-                        source_range: 70..70,\n-                        delete: 70..70,\n-                        insert: \"S\",\n-                        kind: SymbolKind(\n-                            Struct,\n-                        ),\n-                    },\n-                    CompletionItem {\n-                        label: \"foo(\u2026)\",\n-                        source_range: 70..70,\n-                        delete: 70..70,\n-                        insert: \"foo(${1:&mut s})$0\",\n-                        kind: SymbolKind(\n-                            Function,\n-                        ),\n-                        lookup: \"foo\",\n-                        detail: \"fn(&mut S)\",\n-                        trigger_call_info: true,\n-                    },\n-                    CompletionItem {\n-                        label: \"main()\",\n-                        source_range: 70..70,\n-                        delete: 70..70,\n-                        insert: \"main()$0\",\n-                        kind: SymbolKind(\n-                            Function,\n-                        ),\n-                        lookup: \"main\",\n-                        detail: \"fn()\",\n-                    },\n-                    CompletionItem {\n-                        label: \"s\",\n-                        source_range: 70..70,\n-                        delete: 70..70,\n-                        insert: \"s\",\n-                        kind: SymbolKind(\n-                            Local,\n-                        ),\n-                        detail: \"S\",\n-                        relevance: CompletionRelevance {\n-                            exact_name_match: true,\n-                            type_match: None,\n-                            is_local: true,\n-                        },\n-                        ref_match: \"&mut \",\n-                    },\n-                ]\n+                lc s [name+local]\n+                lc &mut s [type+name+local]\n+                st S []\n+                fn main() []\n+                fn foo(\u2026) []\n             \"#]],\n-        )\n+        );\n+        check_relevance(\n+            r#\"\n+struct S;\n+fn foo(s: &mut S) {}\n+fn main() {\n+    let mut s = S;\n+    foo(&mut $0);\n+}\n+            \"#,\n+            expect![[r#\"\n+                lc s [type+name+local]\n+                st S []\n+                fn main() []\n+                fn foo(\u2026) []\n+            \"#]],\n+        );\n     }\n \n     #[test]"}]}