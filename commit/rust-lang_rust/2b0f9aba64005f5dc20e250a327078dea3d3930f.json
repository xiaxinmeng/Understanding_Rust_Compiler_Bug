{"sha": "2b0f9aba64005f5dc20e250a327078dea3d3930f", "node_id": "C_kwDOAAsO6NoAKDJiMGY5YWJhNjQwMDVmNWRjMjBlMjUwYTMyNzA3OGRlYTNkMzkzMGY", "commit": {"author": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-03-05T12:39:00Z"}, "committer": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-03-05T12:39:00Z"}, "message": "don't lint when implementing trait", "tree": {"sha": "86f30082c33d061c661e084689c29c858cfa3618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f30082c33d061c661e084689c29c858cfa3618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0f9aba64005f5dc20e250a327078dea3d3930f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErNAvdl6JhsmcOZwWK4aJjMsqVIYFAmIjWeUACgkQK4aJjMsq\nVIZS5BAAtyNlnQeWoE5h6fA/OoIysnYsM3hNNhm0bkP4ue5gy4Ow2ZA3wP1rjyip\nGn/MMKjaR5QewGn3TtYVyFdSb0DLDodlqS9Cb9Sqv6OoobW/D7ScGpXqS5A0Kfmq\nZhdf09X8M8Wq1m1YgscMpivl2iKIPXMJtzDOc9WToX2odd6N6nmMopTtpECR09mh\nn/2T/KZTTQN9Oqu4Zyx+tj2tSWJlSezhXJX0H8FaEBv1ktCMU65VPSFD9YNt6TUn\nmbs3YVp379ckZ+lXlniCDE6ko+l2nUtMff7AtPI33yLzWqOMzCJEcD1eKjJqjmmF\nHD6XWe2igyLt8nC+clPf3dGWGWfKSxB56x0DniT36Lh0+FdLZHrue67X+Xba2EXM\nYjJlRmZpFBK6EkEYHxKsVFkltw1Uv+EJpUVYCzn//HpxeyzpFRBkQsc6H5rJ7XkK\nkFqkbJaJnOjWNR/49Jt2+1UUMHJQwHsnesoLxTnJ4D9rdzjBMAVwEeuK07d5Q8sk\nciJrV3UYWdBhiKrBZosnESSFcBsm0vF0lQ2NGyIF10BD1nIlGVRhjkBdjXZ9TLnE\n36AoD5ZORZH2BT3KUIc9hsJUGE2Y3AORk17SH9il/DJfrfNCcipGml1GLDcALZh/\neBN9WxeUj4S/VjT9IQevWRD/smoPSMr587vOOidxfBavCUA0Z/4=\n=N44n\n-----END PGP SIGNATURE-----", "payload": "tree 86f30082c33d061c661e084689c29c858cfa3618\nparent 48d310e8698eea1b9c771bdd18042a921f9f45b7\nauthor Jaeyong Sung <jaeyong0201@gmail.com> 1646483940 +0900\ncommitter Jaeyong Sung <jaeyong0201@gmail.com> 1646483940 +0900\n\ndon't lint when implementing trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0f9aba64005f5dc20e250a327078dea3d3930f", "html_url": "https://github.com/rust-lang/rust/commit/2b0f9aba64005f5dc20e250a327078dea3d3930f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0f9aba64005f5dc20e250a327078dea3d3930f/comments", "author": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d310e8698eea1b9c771bdd18042a921f9f45b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d310e8698eea1b9c771bdd18042a921f9f45b7", "html_url": "https://github.com/rust-lang/rust/commit/48d310e8698eea1b9c771bdd18042a921f9f45b7"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "bbf3f24566bf9578f7c8987975fd0e4e83775c78", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2b0f9aba64005f5dc20e250a327078dea3d3930f/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0f9aba64005f5dc20e250a327078dea3d3930f/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=2b0f9aba64005f5dc20e250a327078dea3d3930f", "patch": "@@ -6,6 +6,7 @@ use rustc_ast::{walk_list, Label, Mutability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{\n     Arm, Block, Body, Expr, ExprKind, Guard, HirId, Let, Local, Pat, PatKind, Path, PathSegment, QPath, Stmt, StmtKind,\n@@ -22,13 +23,14 @@ use rustc_span::Span;\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for arguments that are only used in recursion with no side-effects.\n+    ///\n+    /// ### Why is this bad?\n+    /// It could contain a useless calculation and can make function simpler.\n+    ///\n     /// The arguments can be involved in calculations and assignments but as long as\n     /// the calculations have no side-effects (function calls or mutating dereference)\n     /// and the assigned variables are also only in recursion, it is useless.\n     ///\n-    /// ### Why is this bad?\n-    /// The could contain a useless calculation and can make function simpler.\n-    ///\n     /// ### Known problems\n     /// In some cases, this would not catch all useless arguments.\n     ///\n@@ -52,6 +54,8 @@ declare_clippy_lint! {\n     /// - some `break` relative operations\n     /// - struct pattern binding\n     ///\n+    /// Also, when you recurse the function name with path segments, it is not possible to detect.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// fn f(a: usize, b: usize) -> usize {\n@@ -93,9 +97,20 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n         _: &'tcx rustc_hir::FnDecl<'tcx>,\n         body: &'tcx Body<'tcx>,\n         _: Span,\n-        _: HirId,\n+        id: HirId,\n     ) {\n         if let FnKind::ItemFn(ident, ..) | FnKind::Method(ident, ..) = kind {\n+            let data = cx.tcx.def_path(cx.tcx.hir().local_def_id(id).to_def_id()).data;\n+            if data.len() > 1 {\n+                match data.get(data.len() - 2) {\n+                    Some(DisambiguatedDefPathData {\n+                        data: DefPathData::Impl,\n+                        disambiguator,\n+                    }) if *disambiguator != 0 => return,\n+                    _ => {},\n+                }\n+            }\n+\n             let ty_res = cx.typeck_results();\n             let param_span = body\n                 .params"}, {"sha": "799adfd3be262de24e41a3d5eeb079480e6cbf35", "filename": "tests/ui/only_used_in_recursion.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b0f9aba64005f5dc20e250a327078dea3d3930f/tests%2Fui%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0f9aba64005f5dc20e250a327078dea3d3930f/tests%2Fui%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fonly_used_in_recursion.rs?ref=2b0f9aba64005f5dc20e250a327078dea3d3930f", "patch": "@@ -61,13 +61,37 @@ fn not_primitive_op(a: usize, b: String, c: &str) -> usize {\n struct A;\n \n impl A {\n-    fn method(&self, a: usize, b: usize) -> usize {\n-        if a == 0 { 1 } else { self.method(a - 1, b + 1) }\n+    fn method(a: usize, b: usize) -> usize {\n+        if a == 0 { 1 } else { A::method(a - 1, b - 1) }\n+    }\n+\n+    fn method2(&self, a: usize, b: usize) -> usize {\n+        if a == 0 { 1 } else { self.method2(a - 1, b + 1) }\n+    }\n+}\n+\n+trait B {\n+    fn hello(a: usize, b: usize) -> usize;\n+\n+    fn hello2(&self, a: usize, b: usize) -> usize;\n+}\n+\n+impl B for A {\n+    fn hello(a: usize, b: usize) -> usize {\n+        if a == 0 { 1 } else { A::hello(a - 1, b + 1) }\n+    }\n+\n+    fn hello2(&self, a: usize, b: usize) -> usize {\n+        if a == 0 { 1 } else { self.hello2(a - 1, b + 1) }\n     }\n }\n \n fn ignore(a: usize, _: usize) -> usize {\n     if a == 1 { 1 } else { ignore(a - 1, 0) }\n }\n \n+fn ignore2(a: usize, _b: usize) -> usize {\n+    if a == 1 { 1 } else { ignore2(a - 1, _b) }\n+}\n+\n fn main() {}"}, {"sha": "b2dd99bbe4df2eed93a90c98a897570453511986", "filename": "tests/ui/only_used_in_recursion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b0f9aba64005f5dc20e250a327078dea3d3930f/tests%2Fui%2Fonly_used_in_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b0f9aba64005f5dc20e250a327078dea3d3930f/tests%2Fui%2Fonly_used_in_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fonly_used_in_recursion.stderr?ref=2b0f9aba64005f5dc20e250a327078dea3d3930f", "patch": "@@ -61,10 +61,10 @@ LL | fn not_primitive(a: usize, b: String) -> usize {\n    |                            ^ help: if this is intentional, prefix with an underscore: `_b`\n \n error: parameter is only used in recursion\n-  --> $DIR/only_used_in_recursion.rs:64:32\n+  --> $DIR/only_used_in_recursion.rs:68:33\n    |\n-LL |     fn method(&self, a: usize, b: usize) -> usize {\n-   |                                ^ help: if this is intentional, prefix with an underscore: `_b`\n+LL |     fn method2(&self, a: usize, b: usize) -> usize {\n+   |                                 ^ help: if this is intentional, prefix with an underscore: `_b`\n \n error: aborting due to 11 previous errors\n "}]}