{"sha": "b54c5781b8252189f04a58247f644bcf2bd9dd68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NGM1NzgxYjgyNTIxODlmMDRhNTgyNDdmNjQ0YmNmMmJkOWRkNjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-03T17:58:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T10:10:37Z"}, "message": "parenthesized_params_in_types_and_modules -> error", "tree": {"sha": "a36b4ff5dfb4d607114e8ef33b96d6c6fddbf361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36b4ff5dfb4d607114e8ef33b96d6c6fddbf361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54c5781b8252189f04a58247f644bcf2bd9dd68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54c5781b8252189f04a58247f644bcf2bd9dd68", "html_url": "https://github.com/rust-lang/rust/commit/b54c5781b8252189f04a58247f644bcf2bd9dd68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54c5781b8252189f04a58247f644bcf2bd9dd68/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d2c510dd121d31061ae95b41a5afb3386d17e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/98d2c510dd121d31061ae95b41a5afb3386d17e3", "html_url": "https://github.com/rust-lang/rust/commit/98d2c510dd121d31061ae95b41a5afb3386d17e3"}], "stats": {"total": 217, "additions": 59, "deletions": 158}, "files": [{"sha": "466a748bcee91b2ea493897c20caae2162994a91", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -122,31 +122,6 @@ error: literal out of range for u8\n   |\n ```\n \n-## parenthesized-params-in-types-and-modules\n-\n-This lint detects incorrect parentheses. Some example code that triggers this\n-lint:\n-\n-```rust,ignore\n-let x = 5 as usize();\n-```\n-\n-This will produce:\n-\n-```text\n-error: parenthesized parameters may only be used with a trait\n- --> src/main.rs:2:21\n-  |\n-2 |   let x = 5 as usize();\n-  |                     ^^\n-  |\n-  = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-  = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n-```\n-\n-To fix it, remove the `()`s.\n-\n ## pub-use-of-private-extern-crate\n \n This lint detects a specific situation of re-exporting a private `extern crate`;"}, {"sha": "9f5e5fae07f04591c7213aba6683ccf7ce622521", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -44,8 +44,7 @@ use crate::hir::def::{Namespace, Res, DefKind, PartialRes, PerNS};\n use crate::hir::{GenericArg, ConstArg};\n use crate::hir::ptr::P;\n use crate::lint;\n-use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-                    ELIDED_LIFETIMES_IN_PATHS};\n+use crate::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n use crate::session::Session;\n use crate::session::config::nightly_options;\n@@ -298,7 +297,6 @@ enum ParamMode {\n \n enum ParenthesizedGenericArgs {\n     Ok,\n-    Warn,\n     Err,\n }\n \n@@ -1695,29 +1693,19 @@ impl<'a> LoweringContext<'a> {\n                     };\n                     let parenthesized_generic_args = match partial_res.base_res() {\n                         // `a::b::Trait(Args)`\n-                        Res::Def(DefKind::Trait, _)\n-                            if i + 1 == proj_start => ParenthesizedGenericArgs::Ok,\n+                        Res::Def(DefKind::Trait, _) if i + 1 == proj_start => {\n+                            ParenthesizedGenericArgs::Ok\n+                        }\n                         // `a::b::Trait(Args)::TraitItem`\n-                        Res::Def(DefKind::Method, _)\n-                        | Res::Def(DefKind::AssocConst, _)\n-                        | Res::Def(DefKind::AssocTy, _)\n-                            if i + 2 == proj_start =>\n-                        {\n+                        Res::Def(DefKind::Method, _) |\n+                        Res::Def(DefKind::AssocConst, _) |\n+                        Res::Def(DefKind::AssocTy, _) if i + 2 == proj_start => {\n                             ParenthesizedGenericArgs::Ok\n                         }\n                         // Avoid duplicated errors.\n                         Res::Err => ParenthesizedGenericArgs::Ok,\n                         // An error\n-                        Res::Def(DefKind::Struct, _)\n-                        | Res::Def(DefKind::Enum, _)\n-                        | Res::Def(DefKind::Union, _)\n-                        | Res::Def(DefKind::TyAlias, _)\n-                        | Res::Def(DefKind::Variant, _) if i + 1 == proj_start =>\n-                        {\n-                            ParenthesizedGenericArgs::Err\n-                        }\n-                        // A warning for now, for compatibility reasons.\n-                        _ => ParenthesizedGenericArgs::Warn,\n+                        _ => ParenthesizedGenericArgs::Err,\n                     };\n \n                     let num_lifetimes = type_def_id.map_or(0, |def_id| {\n@@ -1780,7 +1768,7 @@ impl<'a> LoweringContext<'a> {\n                 segment,\n                 param_mode,\n                 0,\n-                ParenthesizedGenericArgs::Warn,\n+                ParenthesizedGenericArgs::Err,\n                 itctx.reborrow(),\n                 None,\n             ));\n@@ -1856,15 +1844,6 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 GenericArgs::Parenthesized(ref data) => match parenthesized_generic_args {\n                     ParenthesizedGenericArgs::Ok => self.lower_parenthesized_parameter_data(data),\n-                    ParenthesizedGenericArgs::Warn => {\n-                        self.resolver.lint_buffer().buffer_lint(\n-                            PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-                            CRATE_NODE_ID,\n-                            data.span,\n-                            msg.into(),\n-                        );\n-                        (hir::GenericArgs::none(), true)\n-                    }\n                     ParenthesizedGenericArgs::Err => {\n                         let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");"}, {"sha": "c9dd60827ffcf05df7ec6b42edb78fbddc664428", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -207,16 +207,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n-    Deny,\n-    \"detects parenthesized generic parameters in type and module names\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub LATE_BOUND_LIFETIME_ARGUMENTS,\n     Warn,\n@@ -528,7 +518,6 @@ declare_lint_pass! {\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,\n-        PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n         DEPRECATED,"}, {"sha": "c3c5589b9d070e29cfb54f66784826ebe3d305b5", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -340,6 +340,8 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/37872\");\n     store.register_removed(\"safe_extern_statics\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/36247\");\n+    store.register_removed(\"parenthesized_params_in_types_and_modules\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/42238\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "e713a64d3f5a63fdd94ba260a5cff679bddee299", "filename": "src/test/ui/issues/issue-32995-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -1,18 +1,13 @@\n-#![allow(unused)]\n-\n fn main() {\n     { fn f<X: ::std::marker()::Send>() {} }\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     { fn f() -> impl ::std::marker()::Send { } }\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }\n \n #[derive(Clone)]\n struct X;\n \n impl ::std::marker()::Copy for X {}\n //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-//~| WARN previously accepted"}, {"sha": "6c2d772a23332cf48ad7a0beeb7481a2f486c942", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -1,30 +1,21 @@\n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:4:22\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:2:22\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n-   |                      ^^^^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                      ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:8:29\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:5:29\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n-   |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                             ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:16:13\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995-2.rs:12:13\n    |\n LL | impl ::std::marker()::Copy for X {}\n-   |             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |             ^^^^^^^^ only `Fn` traits may use parentheses\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "0d07a76939f2a214aa4f44d942bd4afc7f763660", "filename": "src/test/ui/issues/issue-32995.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -1,33 +1,24 @@\n-#![allow(unused)]\n-\n fn main() {\n     let x: usize() = 1;\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n \n     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }\n \n fn foo<X:Default>() {\n     let d : X() = Default::default();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| WARN previously accepted\n }"}, {"sha": "b868011b99b2443672e3a7104530a09649766d24", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 22, "deletions": 43, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -1,66 +1,45 @@\n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:4:12\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:2:12\n    |\n LL |     let x: usize() = 1;\n-   |            ^^^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |            ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:8:19\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:5:19\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n-   |                   ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                   ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:12:20\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:8:20\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                    ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                    ^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:16:25\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:11:25\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                         ^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                         ^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:29\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:14:29\n    |\n LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n-   |                             ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                             ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:35\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:17:35\n    |\n LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                   ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                                   ^^^^^^^^ only `Fn` traits may use parentheses\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:30:13\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:22:13\n    |\n LL |     let d : X() = Default::default();\n-   |             ^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |             ^^^ only `Fn` traits may use parentheses\n \n error: aborting due to 7 previous errors\n \n+For more information about this error, try `rustc --explain E0214`."}, {"sha": "94c72a31e5e6c267fe2fb33b01aad852df626658", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -1,9 +1,9 @@\n pub fn foo(num: i32) -> i32 {\n     let foo: i32::from_be(num);\n     //~^ ERROR expected type, found local variable `num`\n+    //~| ERROR type arguments are not allowed for this type\n     //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| ERROR ambiguous associated type\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n     foo\n }\n "}, {"sha": "5353b3a75b24931869eb1766c3f78ab3380996a0", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -6,23 +6,28 @@ LL |     let foo: i32::from_be(num);\n    |            |\n    |            help: use `=` if you meant to assign\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n    |\n LL |     let foo: i32::from_be(num);\n    |                   ^^^^^^^^^^^^\n+   |                   |\n+   |                   only `Fn` traits may use parentheses\n+   |                   help: use angle brackets instead: `from_be<num>`\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n    |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+LL |     let foo: i32::from_be(num);\n+   |                           ^^^ type argument not allowed\n \n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14\n    |\n LL |     let foo: i32::from_be(num);\n    |              ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<i32 as Trait>::from_be`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0223, E0573.\n-For more information about an error, try `rustc --explain E0223`.\n+Some errors have detailed explanations: E0109, E0214, E0223, E0573.\n+For more information about an error, try `rustc --explain E0109`."}, {"sha": "c0d39c59014eca7d094d19ad13c876f2e9a0abc0", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -8,7 +8,6 @@ impl Reactor {\n         //~^ ERROR cannot find value `input_cells` in this scope\n         //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n         //~| ERROR wrong number of type arguments: expected 1, found 0\n-        //~| WARNING this was previously accepted by the compiler but is being phased out\n     }\n }\n "}, {"sha": "7895cf77fc0bf0cacf93bffd8f45746b7aa12145", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b54c5781b8252189f04a58247f644bcf2bd9dd68/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=b54c5781b8252189f04a58247f644bcf2bd9dd68", "patch": "@@ -4,15 +4,11 @@ error[E0425]: cannot find value `input_cells` in this scope\n LL |         input_cells: Vec::new()\n    |         ^^^^^^^^^^^ a field by this name exists in `Self`\n \n-error: parenthesized type parameters may only be used with a `Fn` trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-34255-1.rs:7:27\n    |\n LL |         input_cells: Vec::new()\n-   |                           ^^^^^\n-   |\n-   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+   |                           ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/issue-34255-1.rs:7:22\n@@ -22,5 +18,5 @@ LL |         input_cells: Vec::new()\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0425.\n+Some errors have detailed explanations: E0107, E0214, E0425.\n For more information about an error, try `rustc --explain E0107`."}]}