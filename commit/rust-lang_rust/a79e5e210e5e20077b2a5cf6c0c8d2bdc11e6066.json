{"sha": "a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWU1ZTIxMGU1ZTIwMDc3YjJhNWNmNmMwYzhkMmJkYzExZTYwNjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T16:55:39Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T20:47:58Z"}, "message": "Rollup merge of #48084 - cramertj:impl-trait-errors, r=nikomatsakis\n\nError on nested impl Trait and path projections from impl Trait\n\ncc #34511\n\nr? @nikomatsakis", "tree": {"sha": "c8b9bbed7c623cb2b13cf0a175749437d3d0b589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b9bbed7c623cb2b13cf0a175749437d3d0b589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "html_url": "https://github.com/rust-lang/rust/commit/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ec810921afed11435a56f41179590789eb94e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ec810921afed11435a56f41179590789eb94e1", "html_url": "https://github.com/rust-lang/rust/commit/25ec810921afed11435a56f41179590789eb94e1"}, {"sha": "9e9c55f8fd064335cadc28bd9a0152538dcc9fa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9c55f8fd064335cadc28bd9a0152538dcc9fa0", "html_url": "https://github.com/rust-lang/rust/commit/9e9c55f8fd064335cadc28bd9a0152538dcc9fa0"}], "stats": {"total": 384, "additions": 295, "deletions": 89}, "files": [{"sha": "a5dd8f1558e4392b8e59c5d9a045bbc44803fe79", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -419,6 +419,141 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n+// Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`.\n+// Nested `impl Trait` _is_ allowed in associated type position,\n+// e.g `impl Iterator<Item=impl Debug>`\n+struct NestedImplTraitVisitor<'a> {\n+    session: &'a Session,\n+    outer_impl_trait: Option<Span>,\n+}\n+\n+impl<'a> NestedImplTraitVisitor<'a> {\n+    fn with_impl_trait<F>(&mut self, outer_impl_trait: Option<Span>, f: F)\n+        where F: FnOnce(&mut NestedImplTraitVisitor<'a>)\n+    {\n+        let old_outer_impl_trait = self.outer_impl_trait;\n+        self.outer_impl_trait = outer_impl_trait;\n+        f(self);\n+        self.outer_impl_trait = old_outer_impl_trait;\n+    }\n+}\n+\n+\n+impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n+    fn visit_ty(&mut self, t: &'a Ty) {\n+        if let TyKind::ImplTrait(_) = t.node {\n+            if let Some(outer_impl_trait) = self.outer_impl_trait {\n+                struct_span_err!(self.session, t.span, E0666,\n+                                 \"nested `impl Trait` is not allowed\")\n+                    .span_label(outer_impl_trait, \"outer `impl Trait`\")\n+                    .span_label(t.span, \"nested `impl Trait` here\")\n+                    .emit();\n+\n+            }\n+            self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t));\n+        } else {\n+            visit::walk_ty(self, t);\n+        }\n+    }\n+    fn visit_path_parameters(&mut self, _: Span, path_parameters: &'a PathParameters) {\n+        match *path_parameters {\n+            PathParameters::AngleBracketed(ref params) => {\n+                for type_ in &params.types {\n+                    self.visit_ty(type_);\n+                }\n+                for type_binding in &params.bindings {\n+                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n+                    // are allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(None, |this| visit::walk_ty(this, &type_binding.ty));\n+                }\n+            }\n+            PathParameters::Parenthesized(ref params) => {\n+                for type_ in &params.inputs {\n+                    self.visit_ty(type_);\n+                }\n+                if let Some(ref type_) = params.output {\n+                    // `-> Foo` syntax is essentially an associated type binding,\n+                    // so it is also allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(None, |this| visit::walk_ty(this, type_));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// Bans `impl Trait` in path projections like `<impl Iterator>::Item` or `Foo::Bar<impl Trait>`.\n+struct ImplTraitProjectionVisitor<'a> {\n+    session: &'a Session,\n+    is_banned: bool,\n+}\n+\n+impl<'a> ImplTraitProjectionVisitor<'a> {\n+    fn with_ban<F>(&mut self, f: F)\n+        where F: FnOnce(&mut ImplTraitProjectionVisitor<'a>)\n+    {\n+        let old_is_banned = self.is_banned;\n+        self.is_banned = true;\n+        f(self);\n+        self.is_banned = old_is_banned;\n+    }\n+}\n+\n+impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n+    fn visit_ty(&mut self, t: &'a Ty) {\n+        match t.node {\n+            TyKind::ImplTrait(_) => {\n+                if self.is_banned {\n+                    struct_span_err!(self.session, t.span, E0667,\n+                                 \"`impl Trait` is not allowed in path parameters\")\n+                        .emit();\n+                }\n+            }\n+            TyKind::Path(ref qself, ref path) => {\n+                // We allow these:\n+                //  - `Option<impl Trait>`\n+                //  - `option::Option<impl Trait>`\n+                //  - `option::Option<T>::Foo<impl Trait>\n+                //\n+                // But not these:\n+                //  - `<impl Trait>::Foo`\n+                //  - `option::Option<impl Trait>::Foo`.\n+                //\n+                // To implement this, we disallow `impl Trait` from `qself`\n+                // (for cases like `<impl Trait>::Foo>`)\n+                // but we allow `impl Trait` in `PathParameters`\n+                // iff there are no more PathSegments.\n+                if let Some(ref qself) = *qself {\n+                    // `impl Trait` in `qself` is always illegal\n+                    self.with_ban(|this| this.visit_ty(&qself.ty));\n+                }\n+\n+                for (i, segment) in path.segments.iter().enumerate() {\n+                    // Allow `impl Trait` iff we're on the final path segment\n+                    if i == (path.segments.len() - 1) {\n+                        visit::walk_path_segment(self, path.span, segment);\n+                    } else {\n+                        self.with_ban(|this|\n+                            visit::walk_path_segment(this, path.span, segment));\n+                    }\n+                }\n+            }\n+            _ => visit::walk_ty(self, t),\n+        }\n+    }\n+}\n+\n pub fn check_crate(session: &Session, krate: &Crate) {\n+    visit::walk_crate(\n+        &mut NestedImplTraitVisitor {\n+            session,\n+            outer_impl_trait: None,\n+        }, krate);\n+\n+    visit::walk_crate(\n+        &mut ImplTraitProjectionVisitor {\n+            session,\n+            is_banned: false,\n+        }, krate);\n+\n     visit::walk_crate(&mut AstValidator { session: session }, krate)\n }"}, {"sha": "184fab778c60191d13dea1b8c3ba404188cde694", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -304,4 +304,6 @@ register_diagnostics! {\n     E0567, // auto traits can not have generic parameters\n     E0568, // auto traits can not have super traits\n     E0642, // patterns aren't allowed in methods without bodies\n+    E0666, // nested `impl Trait` is illegal\n+    E0667, // `impl Trait` in projections\n }"}, {"sha": "ba24d7f914be11c62bc4288437952d93fe19d165", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -432,9 +432,6 @@ declare_features! (\n     // `foo.rs` as an alternative to `foo/mod.rs`\n     (active, non_modrs_mods, \"1.24.0\", Some(44660)),\n \n-    // Nested `impl Trait`\n-    (active, nested_impl_trait, \"1.24.0\", Some(34511)),\n-\n     // Termination trait in main (RFC 1937)\n     (active, termination_trait, \"1.24.0\", Some(43301)),\n \n@@ -1352,73 +1349,8 @@ fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n     }\n }\n \n-// Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`.\n-// Nested `impl Trait` _is_ allowed in associated type position,\n-// e.g `impl Iterator<Item=impl Debug>`\n-struct NestedImplTraitVisitor<'a> {\n-    context: &'a Context<'a>,\n-    is_in_impl_trait: bool,\n-}\n-\n-impl<'a> NestedImplTraitVisitor<'a> {\n-    fn with_impl_trait<F>(&mut self, is_in_impl_trait: bool, f: F)\n-        where F: FnOnce(&mut NestedImplTraitVisitor<'a>)\n-    {\n-        let old_is_in_impl_trait = self.is_in_impl_trait;\n-        self.is_in_impl_trait = is_in_impl_trait;\n-        f(self);\n-        self.is_in_impl_trait = old_is_in_impl_trait;\n-    }\n-}\n-\n-\n-impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n-    fn visit_ty(&mut self, t: &'a ast::Ty) {\n-        if let ast::TyKind::ImplTrait(_) = t.node {\n-            if self.is_in_impl_trait {\n-                gate_feature_post!(&self, nested_impl_trait, t.span,\n-                    \"nested `impl Trait` is experimental\"\n-                );\n-            }\n-            self.with_impl_trait(true, |this| visit::walk_ty(this, t));\n-        } else {\n-            visit::walk_ty(self, t);\n-        }\n-    }\n-    fn visit_path_parameters(&mut self, _: Span, path_parameters: &'a ast::PathParameters) {\n-        match *path_parameters {\n-            ast::PathParameters::AngleBracketed(ref params) => {\n-                for type_ in &params.types {\n-                    self.visit_ty(type_);\n-                }\n-                for type_binding in &params.bindings {\n-                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n-                    // are allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(false, |this| visit::walk_ty(this, &type_binding.ty));\n-                }\n-            }\n-            ast::PathParameters::Parenthesized(ref params) => {\n-                for type_ in &params.inputs {\n-                    self.visit_ty(type_);\n-                }\n-                if let Some(ref type_) = params.output {\n-                    // `-> Foo` syntax is essentially an associated type binding,\n-                    // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(false, |this| visit::walk_ty(this, type_));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n impl<'a> PostExpansionVisitor<'a> {\n-    fn whole_crate_feature_gates(&mut self, krate: &ast::Crate) {\n-        visit::walk_crate(\n-            &mut NestedImplTraitVisitor {\n-                context: self.context,\n-                is_in_impl_trait: false,\n-            }, krate);\n-\n+    fn whole_crate_feature_gates(&mut self, _krate: &ast::Crate) {\n         for &(ident, span) in &*self.context.parse_sess.non_modrs_mods.borrow() {\n             if !span.allows_unstable() {\n                 let cx = &self.context;"}, {"sha": "52c5471681df300eef53c500bc6cb6a07df7b90e", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -10,7 +10,7 @@\n \n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n-#![feature(conservative_impl_trait, nested_impl_trait, universal_impl_trait, dyn_trait)]\n+#![feature(conservative_impl_trait, universal_impl_trait, dyn_trait)]\n use std::fmt::Debug;\n \n // Allowed\n@@ -60,6 +60,7 @@ fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n@@ -68,6 +69,7 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }"}, {"sha": "2d5dfb045dbac32ca8e2dec32432135b514dc5c9", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, underscore_lifetimes, universal_impl_trait, nested_impl_trait)]\n+#![feature(conservative_impl_trait, underscore_lifetimes, universal_impl_trait)]\n #![allow(warnings)]\n \n use std::fmt::Debug;\n@@ -63,12 +63,11 @@ fn pass_through_elision_with_fn_ptr(x: &fn(&u32) -> &u32) -> impl Into<&fn(&u32)\n \n fn pass_through_elision_with_fn_path<T: Fn(&u32) -> &u32>(\n     x: &T\n-) -> impl Into<&impl Fn(&u32) -> &u32> { x }\n+) -> &impl Fn(&u32) -> &u32 { x }\n \n-fn foo(x: &impl Debug) -> impl Into<&impl Debug> { x }\n-fn foo_explicit_lifetime<'a>(x: &'a impl Debug) -> impl Into<&'a impl Debug> { x }\n-fn foo_no_outer_impl(x: &impl Debug) -> &impl Debug { x }\n-fn foo_explicit_arg<T: Debug>(x: &T) -> impl Into<&impl Debug> { x }\n+fn foo(x: &impl Debug) -> &impl Debug { x }\n+fn foo_explicit_lifetime<'a>(x: &'a impl Debug) -> &'a impl Debug { x }\n+fn foo_explicit_arg<T: Debug>(x: &T) -> &impl Debug { x }\n \n fn mixed_lifetimes<'a>() -> impl for<'b: 'a> Fn(&'b u32) { |_| () }\n fn mixed_as_static() -> impl Fn(&'static u32) { mixed_lifetimes() }"}, {"sha": "31b3acd86ef555b25070599d051d8a46ab388eb0", "filename": "src/test/ui/error-codes/E0657.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(warnings)]\n-#![feature(conservative_impl_trait, nested_impl_trait)]\n+#![feature(conservative_impl_trait)]\n \n trait Id<T> {}\n trait Lt<'a> {}\n@@ -17,7 +17,7 @@ impl<'a> Lt<'a> for () {}\n impl<T> Id<T> for T {}\n \n fn free_fn_capture_hrtb_in_impl_trait()\n-    -> impl for<'a> Id<impl Lt<'a>>\n+    -> Box<for<'a> Id<impl Lt<'a>>>\n         //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level [E0657]\n {\n     ()\n@@ -26,7 +26,7 @@ fn free_fn_capture_hrtb_in_impl_trait()\n struct Foo;\n impl Foo {\n     fn impl_fn_capture_hrtb_in_impl_trait()\n-        -> impl for<'a> Id<impl Lt<'a>>\n+        -> Box<for<'a> Id<impl Lt<'a>>>\n             //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level\n     {\n         ()"}, {"sha": "e039d645fa6dbab51778fb1f2660c22ee0ad9aae", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -1,14 +1,14 @@\n error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl level\n-  --> $DIR/E0657.rs:20:32\n+  --> $DIR/E0657.rs:20:31\n    |\n-20 |     -> impl for<'a> Id<impl Lt<'a>>\n-   |                                ^^\n+20 |     -> Box<for<'a> Id<impl Lt<'a>>>\n+   |                               ^^\n \n error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl level\n-  --> $DIR/E0657.rs:29:36\n+  --> $DIR/E0657.rs:29:35\n    |\n-29 |         -> impl for<'a> Id<impl Lt<'a>>\n-   |                                    ^^\n+29 |         -> Box<for<'a> Id<impl Lt<'a>>>\n+   |                                   ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f69a78b1450f14eef07f5862c75f66a5480556ab", "filename": "src/test/ui/impl_trait_projections.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(dyn_trait, conservative_impl_trait, universal_impl_trait)]\n+\n+use std::fmt::Debug;\n+use std::option;\n+\n+fn parametrized_type_is_allowed() -> Option<impl Debug> {\n+    Some(5i32)\n+}\n+\n+fn path_parametrized_type_is_allowed() -> option::Option<impl Debug> {\n+    Some(5i32)\n+}\n+\n+fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+//~^^ ERROR ambiguous associated type\n+    x.next().unwrap()\n+}\n+\n+fn projection_with_named_trait_is_disallowed(x: impl Iterator)\n+    -> <impl Iterator as Iterator>::Item\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+{\n+    x.next().unwrap()\n+}\n+\n+fn projection_with_named_trait_inside_path_is_disallowed()\n+    -> <::std::ops::Range<impl Debug> as Iterator>::Item\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+{\n+    (1i32..100).next().unwrap()\n+}\n+\n+fn projection_from_impl_trait_inside_dyn_trait_is_disallowed()\n+    -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+{\n+    panic!()\n+}\n+\n+fn main() {}"}, {"sha": "08de0eb99a307c5dca10f7327d6b76c89f17b4cc", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -0,0 +1,34 @@\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:23:51\n+   |\n+23 | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+   |                                                   ^^^^^^^^^^^^^\n+\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:30:9\n+   |\n+30 |     -> <impl Iterator as Iterator>::Item\n+   |         ^^^^^^^^^^^^^\n+\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:37:27\n+   |\n+37 |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n+   |                           ^^^^^^^^^^\n+\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:44:29\n+   |\n+44 |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n+   |                             ^^^^^^^^^^\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/impl_trait_projections.rs:23:50\n+   |\n+23 | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<impl std::iter::Iterator as Trait>::Item`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "f6302c0f3b3e2f0e1b43fe00db886ae30a2e2bac", "filename": "src/test/ui/nested_impl_trait.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -14,25 +14,27 @@ use std::fmt::Debug;\n fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n \n fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-//~^ ERROR nested `impl Trait` is experimental\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n-//~^ ERROR nested `impl Trait` is experimental\n+//~^ ERROR nested `impl Trait` is not allowed\n+//~^^ `impl Trait` not allowed\n \n fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n-//~^ ERROR nested `impl Trait` is experimental\n+//~^ ERROR nested `impl Trait` is not allowed\n \n struct X;\n impl X {\n     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-    //~^ ERROR nested `impl Trait` is experimental\n+    //~^ ERROR nested `impl Trait` is not allowed\n }\n \n fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n     vec![|| println!(\"woot\")].into_iter()\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n+//~^ `impl Trait` not allowed\n     || 5\n }\n ", "previous_filename": "src/test/compile-fail/feature-gate-nested_impl_trait.rs"}, {"sha": "094926120cdeee0c447961d963e079b797f56bfe", "filename": "src/test/ui/nested_impl_trait.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.stderr?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -0,0 +1,50 @@\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:16:56\n+   |\n+16 | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+   |                                              ----------^^^^^^^^^^-\n+   |                                              |         |\n+   |                                              |         nested `impl Trait` here\n+   |                                              outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:19:42\n+   |\n+19 | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+   |                                ----------^^^^^^^^^^-\n+   |                                |         |\n+   |                                |         nested `impl Trait` here\n+   |                                outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:23:37\n+   |\n+23 | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n+   |                           ----------^^^^^^^^^^-\n+   |                           |         |\n+   |                           |         nested `impl Trait` here\n+   |                           outer `impl Trait`\n+\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/nested_impl_trait.rs:28:44\n+   |\n+28 |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+   |                                  ----------^^^^^^^^^^-\n+   |                                  |         |\n+   |                                  |         nested `impl Trait` here\n+   |                                  outer `impl Trait`\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/nested_impl_trait.rs:19:32\n+   |\n+19 | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/nested_impl_trait.rs:36:42\n+   |\n+36 | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n+   |                                          ^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}