{"sha": "18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZmIxZDlkMmZjYzYzN2RjYTViNmI1ZDdlOWYyZDBlYzM4M2IxODI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-08-22T05:41:00Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-08-22T05:41:00Z"}, "message": "Add run-rustfix for or_fun_call tests", "tree": {"sha": "4b03118c512e6150623cc14c50b17ff2aad7351f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b03118c512e6150623cc14c50b17ff2aad7351f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAl1eKxAQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5tFyD/9fdHg9yykNkCwweZJ8WVmV1629MCNS4zNO\nca8e5/mrD0DW5m3wQSYW2LPdGSqtFk2wsh3CDsDtQh9uvotLLx1ikEyWwHD4Ioqr\nS+nEl7yK3hb06/JQgPnUL3SoR8/Qor1wECrRPildJ3myTkFmDg/N/htfevaOUdOl\nqQs0zJO/tpuGVHsK9tK2NS14nIbAwMqHx0ovgH7iuhqsXUHU1aSZ1hEuPlDioqpE\nskQQow+PI1IlDVRXbcKTWdjU5O9zkTLx6GdsAiFoqQJ2tPrJSc9r/McMHhyEuHH9\nU0DDUyGbeM6sXvmZHEKqV9gPXZihtta4QO9zbV0BSn7JOmF/Mj0E0mbLuAAB9MV1\nAK91G8ox5Gb8KjWKmRoEx/4ristbSRHLVqZSCZSID59nhlp8vk2BfMMOm7ZWb9ZT\ngayahB+KdiDIF32jwuIsMfLtLgrp0wdLpW2ihr9VJ6/BIVRq5r4BY4OC09/SubGN\nITvAfphaYqzSlXaL7MYzOl25boE3qEHWbVla/PObkQrZD9oM7LXBt4NNOp69XkGN\nRqY03kwaZg8bQMgoy5STU4hi5cXzMv0i8ouVLysnfMHPSmoSh18mvxyCvU3AtG8Y\ngmsNoa1cPzXO1u12kSyaxP87r/mCuV91baeSN5qHljriiMp6e1ULNGSjbKhIw+l2\nAcEbRSOOng==\n=ybo8\n-----END PGP SIGNATURE-----", "payload": "tree 4b03118c512e6150623cc14c50b17ff2aad7351f\nparent 9bda1e2264f68072bf0ca0cc2b0fa01b08ba37df\nauthor Philipp Hansch <dev@phansch.net> 1566452460 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1566452460 +0200\n\nAdd run-rustfix for or_fun_call tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "html_url": "https://github.com/rust-lang/rust/commit/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bda1e2264f68072bf0ca0cc2b0fa01b08ba37df", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bda1e2264f68072bf0ca0cc2b0fa01b08ba37df", "html_url": "https://github.com/rust-lang/rust/commit/9bda1e2264f68072bf0ca0cc2b0fa01b08ba37df"}], "stats": {"total": 133, "additions": 119, "deletions": 14}, "files": [{"sha": "c572e0f2f4514977da0cf7eb69b733f7ffcc5b92", "filename": "tests/ui/or_fun_call.fixed", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "patch": "@@ -0,0 +1,102 @@\n+// run-rustfix\n+\n+#![warn(clippy::or_fun_call)]\n+#![allow(dead_code)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::time::Duration;\n+\n+/// Checks implementation of the `OR_FUN_CALL` lint.\n+fn or_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    fn make<T>() -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(Duration::from_secs(1));\n+    with_const_fn.unwrap_or(Duration::from_secs(5));\n+\n+    let with_constructor = Some(vec![1]);\n+    with_constructor.unwrap_or_else(make);\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or_default();\n+\n+    let with_const_args = Some(vec![1]);\n+    with_const_args.unwrap_or_else(|| Vec::with_capacity(12));\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or_else(|_| make());\n+\n+    let with_err_args: Result<_, ()> = Ok(vec![1]);\n+    with_err_args.unwrap_or_else(|_| Vec::with_capacity(12));\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or_default();\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or_default();\n+\n+    let with_vec = Some(vec![1]);\n+    with_vec.unwrap_or_else(|| vec![]);\n+\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+\n+    let without_default = Some(Foo);\n+    without_default.unwrap_or_else(Foo::new);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert_with(String::new);\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n+\n+    let opt = Some(1);\n+    let hello = \"Hello\";\n+    let _ = opt.ok_or_else(|| format!(\"{} world.\", hello));\n+}\n+\n+struct Foo(u8);\n+struct Bar(String, Duration);\n+#[rustfmt::skip]\n+fn test_or_with_ctors() {\n+    let opt = Some(1);\n+    let opt_opt = Some(Some(1));\n+    // we also test for const promotion, this makes sure we don't hit that\n+    let two = 2;\n+\n+    let _ = opt_opt.unwrap_or(Some(2));\n+    let _ = opt_opt.unwrap_or(Some(two));\n+    let _ = opt.ok_or(Some(2));\n+    let _ = opt.ok_or(Some(two));\n+    let _ = opt.ok_or(Foo(2));\n+    let _ = opt.ok_or(Foo(two));\n+    let _ = opt.or(Some(2));\n+    let _ = opt.or(Some(two));\n+\n+    let _ = Some(\"a\".to_string()).or_else(|| Some(\"b\".to_string()));\n+\n+    let b = \"b\".to_string();\n+    let _ = Some(Bar(\"a\".to_string(), Duration::from_secs(1)))\n+        .or(Some(Bar(b, Duration::from_secs(2))));\n+}\n+\n+fn main() {}"}, {"sha": "3c94542774b12e9adb9383271a4c3f1f3179a3ed", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::or_fun_call)]\n+#![allow(dead_code)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "7d60cba383136f9fb8a6dee678da446956e745d9", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=18fb1d9d2fcc637dca5b6b5d7e9f2d0ec383b182", "patch": "@@ -1,85 +1,85 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:32:22\n+  --> $DIR/or_fun_call.rs:35:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:35:5\n+  --> $DIR/or_fun_call.rs:38:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:38:21\n+  --> $DIR/or_fun_call.rs:41:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:41:14\n+  --> $DIR/or_fun_call.rs:44:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:44:19\n+  --> $DIR/or_fun_call.rs:47:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:47:5\n+  --> $DIR/or_fun_call.rs:50:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:50:5\n+  --> $DIR/or_fun_call.rs:53:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:53:14\n+  --> $DIR/or_fun_call.rs:56:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:58:21\n+  --> $DIR/or_fun_call.rs:61:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:61:19\n+  --> $DIR/or_fun_call.rs:64:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:64:21\n+  --> $DIR/or_fun_call.rs:67:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:67:21\n+  --> $DIR/or_fun_call.rs:70:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `ok_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:71:17\n+  --> $DIR/or_fun_call.rs:74:17\n    |\n LL |     let _ = opt.ok_or(format!(\"{} world.\", hello));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `ok_or_else(|| format!(\"{} world.\", hello))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:92:35\n+  --> $DIR/or_fun_call.rs:95:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`"}]}