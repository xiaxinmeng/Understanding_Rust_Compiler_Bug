{"sha": "6875220e1abea26c67885833c27365854cd7f73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzUyMjBlMWFiZWEyNmM2Nzg4NTgzM2MyNzM2NTg1NGNkN2Y3M2M=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-21T20:12:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Use rustc_resolve's descr() instead of rewriting it", "tree": {"sha": "56f9bf747d8223886372a3c20cf5c0c12f0b2714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f9bf747d8223886372a3c20cf5c0c12f0b2714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6875220e1abea26c67885833c27365854cd7f73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6875220e1abea26c67885833c27365854cd7f73c", "html_url": "https://github.com/rust-lang/rust/commit/6875220e1abea26c67885833c27365854cd7f73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6875220e1abea26c67885833c27365854cd7f73c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc8cb470fd137214911fa317ff6b06c6683ad3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc8cb470fd137214911fa317ff6b06c6683ad3c", "html_url": "https://github.com/rust-lang/rust/commit/ebc8cb470fd137214911fa317ff6b06c6683ad3c"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "1c709cead70171d7837109e41e5cc2391b8c04da", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6875220e1abea26c67885833c27365854cd7f73c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6875220e1abea26c67885833c27365854cd7f73c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6875220e1abea26c67885833c27365854cd7f73c", "patch": "@@ -110,12 +110,7 @@ impl ResolutionFailure<'a> {\n \n enum AnchorFailure {\n     MultipleAnchors,\n-    Primitive,\n-    Variant,\n-    AssocConstant,\n-    AssocType,\n-    Field,\n-    Method,\n+    RustdocAnchorConflict(Res),\n }\n \n struct LinkCollector<'a, 'tcx> {\n@@ -288,7 +283,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // Not a trait item; just return what we found.\n                     Res::PrimTy(..) => {\n                         if extra_fragment.is_some() {\n-                            return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n+                            return Err(ErrorKind::AnchorFailure(\n+                                AnchorFailure::RustdocAnchorConflict(res),\n+                            ));\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n@@ -305,7 +302,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }\n             } else if let Some((path, prim)) = is_primitive(path_str, ns) {\n                 if extra_fragment.is_some() {\n-                    return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n+                    return Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(\n+                        prim,\n+                    )));\n                 }\n                 return Ok((prim, Some(path.to_owned())));\n             }\n@@ -444,11 +443,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             ty::AssocKind::Type => \"associatedtype\",\n                         };\n                         Some(if extra_fragment.is_some() {\n-                            Err(ErrorKind::AnchorFailure(if kind == ty::AssocKind::Fn {\n-                                AnchorFailure::Method\n-                            } else {\n-                                AnchorFailure::AssocConstant\n-                            }))\n+                            Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(\n+                                ty_res,\n+                            )))\n                         } else {\n                             // HACK(jynelson): `clean` expects the type, not the associated item.\n                             // but the disambiguator logic expects the associated item.\n@@ -470,11 +467,17 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                 };\n                                 field.map(|item| {\n                                     if extra_fragment.is_some() {\n-                                        Err(ErrorKind::AnchorFailure(if def.is_enum() {\n-                                            AnchorFailure::Variant\n-                                        } else {\n-                                            AnchorFailure::Field\n-                                        }))\n+                                        let res = Res::Def(\n+                                            if def.is_enum() {\n+                                                DefKind::Variant\n+                                            } else {\n+                                                DefKind::Field\n+                                            },\n+                                            item.did,\n+                                        );\n+                                        Err(ErrorKind::AnchorFailure(\n+                                            AnchorFailure::RustdocAnchorConflict(res),\n+                                        ))\n                                     } else {\n                                         Ok((\n                                             ty_res,\n@@ -518,13 +521,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         };\n \n                         if extra_fragment.is_some() {\n-                            Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Const {\n-                                AnchorFailure::AssocConstant\n-                            } else if item.kind == ty::AssocKind::Type {\n-                                AnchorFailure::AssocType\n-                            } else {\n-                                AnchorFailure::Method\n-                            }))\n+                            Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(\n+                                ty_res,\n+                            )))\n                         } else {\n                             let res = Res::Def(item.kind.as_def_kind(), item.def_id);\n                             Ok((res, Some(format!(\"{}.{}\", kind, item_name))))\n@@ -889,8 +888,10 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 Some(res.0)\n                             }\n                             Err(ErrorKind::Resolve(kind)) => kind.full_res(),\n-                            // TODO: add `Res` to AnchorFailure\n-                            Err(ErrorKind::AnchorFailure(_)) => None,\n+                            Err(ErrorKind::AnchorFailure(\n+                                AnchorFailure::RustdocAnchorConflict(res),\n+                            )) => Some(res),\n+                            Err(ErrorKind::AnchorFailure(AnchorFailure::MultipleAnchors)) => None,\n                         };\n                     this.kind_side_channel.take().map(|(kind, id)| Res::Def(kind, id)).or(res)\n                 };\n@@ -1070,7 +1071,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 path_str,\n                                 &dox,\n                                 link_range,\n-                                AnchorFailure::Primitive,\n+                                AnchorFailure::RustdocAnchorConflict(prim),\n                             );\n                             continue;\n                         }\n@@ -1555,28 +1556,11 @@ fn anchor_failure(\n ) {\n     let msg = match failure {\n         AnchorFailure::MultipleAnchors => format!(\"`{}` contains multiple anchors\", path_str),\n-        AnchorFailure::Primitive\n-        | AnchorFailure::Variant\n-        | AnchorFailure::AssocConstant\n-        | AnchorFailure::AssocType\n-        | AnchorFailure::Field\n-        | AnchorFailure::Method => {\n-            let kind = match failure {\n-                AnchorFailure::Primitive => \"primitive type\",\n-                AnchorFailure::Variant => \"enum variant\",\n-                AnchorFailure::AssocConstant => \"associated constant\",\n-                AnchorFailure::AssocType => \"associated type\",\n-                AnchorFailure::Field => \"struct field\",\n-                AnchorFailure::Method => \"method\",\n-                AnchorFailure::MultipleAnchors => unreachable!(\"should be handled already\"),\n-            };\n-\n-            format!(\n-                \"`{}` contains an anchor, but links to {kind}s are already anchored\",\n-                path_str,\n-                kind = kind\n-            )\n-        }\n+        AnchorFailure::RustdocAnchorConflict(res) => format!(\n+            \"`{}` contains an anchor, but links to {kind}s are already anchored\",\n+            path_str,\n+            kind = res.descr(),\n+        ),\n     };\n \n     report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n@@ -1689,7 +1673,7 @@ fn handle_variant(\n     use rustc_middle::ty::DefIdTree;\n \n     if extra_fragment.is_some() {\n-        return Err(ErrorKind::AnchorFailure(AnchorFailure::Variant));\n+        return Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res)));\n     }\n     let parent = if let Some(parent) = cx.tcx.parent(res.def_id()) {\n         parent"}, {"sha": "1825a4ad1fa6b6c013b8fc652d135dd69b0093d3", "filename": "src/test/rustdoc-ui/intra-links-anchors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6875220e1abea26c67885833c27365854cd7f73c/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6875220e1abea26c67885833c27365854cd7f73c/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-anchors.stderr?ref=6875220e1abea26c67885833c27365854cd7f73c", "patch": "@@ -1,4 +1,4 @@\n-error: `Foo::f#hola` contains an anchor, but links to struct fields are already anchored\n+error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n   --> $DIR/intra-links-anchors.rs:25:15\n    |\n LL | /// Or maybe [Foo::f#hola].\n@@ -16,13 +16,13 @@ error: `hello#people#!` contains multiple anchors\n LL | /// Another anchor error: [hello#people#!].\n    |                            ^^^^^^^^^^^^^^ contains invalid anchor\n \n-error: `Enum::A#whatever` contains an anchor, but links to enum variants are already anchored\n+error: `Enum::A#whatever` contains an anchor, but links to variants are already anchored\n   --> $DIR/intra-links-anchors.rs:37:28\n    |\n LL | /// Damn enum's variants: [Enum::A#whatever].\n    |                            ^^^^^^^^^^^^^^^^ contains invalid anchor\n \n-error: `u32#hello` contains an anchor, but links to primitive types are already anchored\n+error: `u32#hello` contains an anchor, but links to builtin types are already anchored\n   --> $DIR/intra-links-anchors.rs:43:6\n    |\n LL | /// [u32#hello]"}]}