{"sha": "e19ccb71c8427135a69d874623af68422aeeb9e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOWNjYjcxYzg0MjcxMzVhNjlkODc0NjIzYWY2ODQyMmFlZWI5ZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-12T07:33:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-12T07:33:10Z"}, "message": "Auto merge of #41757 - alexcrichton:stabilize-crt-static, r=japaric\n\nrustc: Stabilize `-C target-feature=+crt-static`\n\nThis commit stabilizes the `crt-static` feature accepted by the compiler. Note\nthat this does not stabilize the `#[cfg]` attribute for `crt-static` as\nthat's going to be covered by #29717. This only stabilizes a few small pieces:\n\n* The `crt-static` feature as accepted by the `-C target-feature` flag, and its\n  connection with the platform-specific definition of `crt-static`.\n* The semantics of `--print cfg` printing out activated `crt-static` feature, if\n  available.\n\nThis should be enough to get the benefits of `crt-static` on stable Rust with\nMSVC and with musl, but sidsteps the issue of stabilizing #29717 first.\n\nCloses #37406", "tree": {"sha": "c43c66cddaea88b74c3243c20d82c09fea9d0b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43c66cddaea88b74c3243c20d82c09fea9d0b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19ccb71c8427135a69d874623af68422aeeb9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19ccb71c8427135a69d874623af68422aeeb9e9", "html_url": "https://github.com/rust-lang/rust/commit/e19ccb71c8427135a69d874623af68422aeeb9e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19ccb71c8427135a69d874623af68422aeeb9e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141e8a6a0203d546b9775ba6ecdc5eb1d748c3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/141e8a6a0203d546b9775ba6ecdc5eb1d748c3d4", "html_url": "https://github.com/rust-lang/rust/commit/141e8a6a0203d546b9775ba6ecdc5eb1d748c3d4"}, {"sha": "5013952e4a1b15198c3569fdcb9890af70f06ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5013952e4a1b15198c3569fdcb9890af70f06ab9", "html_url": "https://github.com/rust-lang/rust/commit/5013952e4a1b15198c3569fdcb9890af70f06ab9"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "eef3b38a8b5e9bdb32c8b12788c32f68a1308ea9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e19ccb71c8427135a69d874623af68422aeeb9e9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ccb71c8427135a69d874623af68422aeeb9e9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e19ccb71c8427135a69d874623af68422aeeb9e9", "patch": "@@ -635,11 +635,24 @@ impl RustcDefaultCalls {\n                             node: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });\n-                        if !allow_unstable_cfg && gated_cfg.is_some() {\n-                            continue;\n+\n+                        // Note that crt-static is a specially recognized cfg\n+                        // directive that's printed out here as part of\n+                        // rust-lang/rust#37406, but in general the\n+                        // `target_feature` cfg is gated under\n+                        // rust-lang/rust#29717. For now this is just\n+                        // specifically allowing the crt-static cfg and that's\n+                        // it, this is intended to get into Cargo and then go\n+                        // through to build scripts.\n+                        let value = value.as_ref().map(|s| s.as_str());\n+                        let value = value.as_ref().map(|s| s.as_ref());\n+                        if name != \"target_feature\" || value != Some(\"crt-static\") {\n+                            if !allow_unstable_cfg && gated_cfg.is_some() {\n+                                continue;\n+                            }\n                         }\n \n-                        cfgs.push(if let &Some(ref value) = value {\n+                        cfgs.push(if let Some(value) = value {\n                             format!(\"{}=\\\"{}\\\"\", name, value)\n                         } else {\n                             format!(\"{}\", name)"}, {"sha": "61bc7c6eb4c714e81f7b1ab3283e3e261d28a4f3", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e19ccb71c8427135a69d874623af68422aeeb9e9/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ccb71c8427135a69d874623af68422aeeb9e9/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=e19ccb71c8427135a69d874623af68422aeeb9e9", "patch": "@@ -12,7 +12,6 @@ use syntax::ast;\n use llvm::LLVMRustHasFeature;\n use rustc::session::Session;\n use rustc_trans::back::write::create_target_machine;\n-use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use libc::c_char;\n \n@@ -53,8 +52,6 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n     }\n \n     let requested_features = sess.opts.cg.target_feature.split(',');\n-    let unstable_options = sess.opts.debugging_opts.unstable_options;\n-    let is_nightly = UnstableFeatures::from_environment().is_nightly_build();\n     let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n     let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n \n@@ -68,14 +65,6 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n         found_positive\n     };\n \n-    // If we switched from the default then that's only allowed on nightly, so\n-    // gate that here.\n-    if (found_positive || found_negative) && (!is_nightly || !unstable_options) {\n-        sess.fatal(\"specifying the `crt-static` target feature is only allowed \\\n-                    on the nightly channel with `-Z unstable-options` passed \\\n-                    as well\");\n-    }\n-\n     if crt_static {\n         cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n     }"}, {"sha": "6c7c60b653a25db5373782f8e9f40ac69b6de8d7", "filename": "src/test/compile-fail/crt-static-gated.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/141e8a6a0203d546b9775ba6ecdc5eb1d748c3d4/src%2Ftest%2Fcompile-fail%2Fcrt-static-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141e8a6a0203d546b9775ba6ecdc5eb1d748c3d4/src%2Ftest%2Fcompile-fail%2Fcrt-static-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrt-static-gated.rs?ref=141e8a6a0203d546b9775ba6ecdc5eb1d748c3d4", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-C target-feature=+crt-static\n-// error-pattern: specifying the `crt-static` target feature is only allowed\n-\n-fn main() {}"}]}