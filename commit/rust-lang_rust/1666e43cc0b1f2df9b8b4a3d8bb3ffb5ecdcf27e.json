{"sha": "1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NjZlNDNjYzBiMWYyZGY5YjhiNGEzZDhiYjNmZmI1ZWNkY2YyN2U=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-09T15:37:15Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-13T13:39:56Z"}, "message": "Remove unneeded code.", "tree": {"sha": "8da232af73065319d91836b740a99acb251c70f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da232af73065319d91836b740a99acb251c70f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBMwK0ACgkQ2lnoZDo37QZ6JQD8C05rwuHkri/xRiJzE5lZEPuu\n1RZdvlpIhRcvulMB0x4A/j0Kn+YZp3AtBivXIIUOodZoB5KZ5D+Gg4J42nC5brAL\n=Htl8\n-----END PGP SIGNATURE-----", "payload": "tree 8da232af73065319d91836b740a99acb251c70f0\nparent a261bc5fadc3c72fd8828d64c4281097b2e7c0b0\nauthor Jason Newcomb <jsnewcomb@pm.me> 1615304235 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1615642796 -0500\n\nRemove unneeded code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "html_url": "https://github.com/rust-lang/rust/commit/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a261bc5fadc3c72fd8828d64c4281097b2e7c0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a261bc5fadc3c72fd8828d64c4281097b2e7c0b0", "html_url": "https://github.com/rust-lang/rust/commit/a261bc5fadc3c72fd8828d64c4281097b2e7c0b0"}], "stats": {"total": 72, "additions": 1, "deletions": 71}, "files": [{"sha": "6185cf50b358073def9388f7ca00f2ded8f13a7b", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=1666e43cc0b1f2df9b8b4a3d8bb3ffb5ecdcf27e", "patch": "@@ -1,6 +1,4 @@\n-use crate::utils::{\n-    get_node_span, get_parent_node, in_macro, is_allowed, peel_mid_ty_refs, snippet_with_context, span_lint_and_sugg,\n-};\n+use crate::utils::{get_parent_node, in_macro, is_allowed, peel_mid_ty_refs, snippet_with_context, span_lint_and_sugg};\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Destination, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};\n@@ -102,11 +100,6 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n         match (self.state.take(), kind) {\n             (None, kind) => {\n                 let parent = get_parent_node(cx.tcx, expr.hir_id);\n-                // This is an odd case. The expression is a macro argument, but the top level\n-                // address of expression is inserted by the compiler.\n-                if matches!(kind, RefOp::AddrOf) && parent.and_then(get_node_span).map_or(false, in_macro) {\n-                    return;\n-                }\n \n                 let expr_adjustments = find_adjustments(cx.tcx, typeck, expr);\n                 let expr_ty = typeck.expr_ty(expr);"}, {"sha": "029583720d2f3309b6007f0914228612c147ad67", "filename": "clippy_lints/src/redundant_deref.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a261bc5fadc3c72fd8828d64c4281097b2e7c0b0/clippy_lints%2Fsrc%2Fredundant_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a261bc5fadc3c72fd8828d64c4281097b2e7c0b0/clippy_lints%2Fsrc%2Fredundant_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_deref.rs?ref=a261bc5fadc3c72fd8828d64c4281097b2e7c0b0", "patch": "@@ -1,63 +0,0 @@\n-// use crate::utils::{get_parent_expr, snippet_with_applicability, span_lint_and_sugg};\n-// use if_chain::if_chain;\n-// use rustc_errors::Applicability;\n-// use rustc_hir::{Expr, ExprKind, UnOp};\n-// use rustc_lint::{LateContext, LateLintPass, LintContext};\n-// use rustc_middle::lint::in_external_macro;\n-// use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-// declare_clippy_lint! {\n-//     /// **What it does:** Checks for uses of the dereference operator which would be covered by\n-//     /// auto-dereferencing.\n-//     ///\n-//     /// **Why is this bad?** This unnecessarily complicates the code.\n-//     ///\n-//     /// **Known problems:** None.\n-//     ///\n-//     /// **Example:**\n-//     ///\n-//     /// ```rust\n-//     /// fn foo(_: &str) {}\n-//     /// foo(&*String::new())\n-//     /// ```\n-//     /// Use instead:\n-//     /// ```rust\n-//     /// fn foo(_: &str) {}\n-//     /// foo(&String::new())\n-//     /// ```\n-//     pub REDUNDANT_DEREF,\n-//     style,\n-//     \"default lint description\"\n-// }\n-\n-// declare_lint_pass!(RedundantDeref => [REDUNDANT_DEREF]);\n-\n-// impl LateLintPass<'_> for RedundantDeref {\n-//     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-//         if_chain! {\n-//             if let ExprKind::AddrOf(_, _, addr_expr) = expr.kind;\n-//             if let ExprKind::Unary(UnOp::UnDeref, deref_expr) = addr_expr.kind;\n-//             if !in_external_macro(cx.sess(), expr.span);\n-//             if let Some(parent_expr) = get_parent_expr(cx, expr);\n-//             if match parent_expr.kind {\n-//                 ExprKind::Call(func, _) => func.hir_id != expr.hir_id,\n-//                 ExprKind::MethodCall(..) => true,\n-//                 _ => false,\n-//             };\n-//             if !cx.typeck_results().expr_ty(deref_expr).is_unsafe_ptr();\n-//             then {\n-//                 let mut app = Applicability::MachineApplicable;\n-//                 let sugg = format!(\"&{}\", snippet_with_applicability(cx, deref_expr.span, \"_\", &mut app));\n-//                 span_lint_and_sugg(\n-//                     cx,\n-//                     REDUNDANT_DEREF,\n-//                     expr.span,\n-//                     \"redundant dereference\",\n-//                     \"remove the dereference\",\n-//                     sugg,\n-//                     app,\n-//                 );\n-//             }\n-//         }\n-//     }\n-// }"}]}