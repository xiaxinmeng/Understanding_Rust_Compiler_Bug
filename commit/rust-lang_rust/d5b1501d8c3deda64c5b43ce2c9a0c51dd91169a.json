{"sha": "d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YjE1MDFkOGMzZGVkYTY0YzViNDNjZTJjOWEwYzUxZGQ5MTE2OWE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-02-12T17:32:41Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:39:54Z"}, "message": "Add asm! to HIR", "tree": {"sha": "aaee3ee5b6b1c32f92db1582b1b3a6ee12389366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaee3ee5b6b1c32f92db1582b1b3a6ee12389366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "html_url": "https://github.com/rust-lang/rust/commit/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0adf53bc97d6e79c8c2e9b3f8a548bc65c7adf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0adf53bc97d6e79c8c2e9b3f8a548bc65c7adf6", "html_url": "https://github.com/rust-lang/rust/commit/a0adf53bc97d6e79c8c2e9b3f8a548bc65c7adf6"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "19cea3a3466f41fbc0dab062bad1e4d363708f85", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "patch": "@@ -15,6 +15,7 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n use rustc_target::spec::abi::Abi;\n \n use smallvec::SmallVec;\n@@ -1391,6 +1392,7 @@ impl Expr<'_> {\n             ExprKind::Break(..) => ExprPrecedence::Break,\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n+            ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n@@ -1446,6 +1448,7 @@ impl Expr<'_> {\n             | ExprKind::Ret(..)\n             | ExprKind::Loop(..)\n             | ExprKind::Assign(..)\n+            | ExprKind::InlineAsm(..)\n             | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n@@ -1622,6 +1625,8 @@ pub enum ExprKind<'hir> {\n     /// A `return`, with an optional value to be returned.\n     Ret(Option<&'hir Expr<'hir>>),\n \n+    /// Inline assembly (from `asm!`), with its outputs and inputs.\n+    InlineAsm(&'hir InlineAsm<'hir>),\n     /// Inline assembly (from `llvm_asm!`), with its outputs and inputs.\n     LlvmInlineAsm(&'hir LlvmInlineAsm<'hir>),\n \n@@ -2054,6 +2059,55 @@ pub enum TyKind<'hir> {\n     Err,\n }\n \n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub enum InlineAsmOperand<'hir> {\n+    In {\n+        reg: InlineAsmRegOrRegClass,\n+        expr: Expr<'hir>,\n+    },\n+    Out {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        expr: Option<Expr<'hir>>,\n+    },\n+    InOut {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        expr: Expr<'hir>,\n+    },\n+    SplitInOut {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        in_expr: Expr<'hir>,\n+        out_expr: Option<Expr<'hir>>,\n+    },\n+    Const {\n+        expr: Expr<'hir>,\n+    },\n+    Sym {\n+        expr: Expr<'hir>,\n+    },\n+}\n+\n+impl<'hir> InlineAsmOperand<'hir> {\n+    pub fn reg(&self) -> Option<InlineAsmRegOrRegClass> {\n+        match *self {\n+            Self::In { reg, .. }\n+            | Self::Out { reg, .. }\n+            | Self::InOut { reg, .. }\n+            | Self::SplitInOut { reg, .. } => Some(reg),\n+            Self::Const { .. } | Self::Sym { .. } => None,\n+        }\n+    }\n+}\n+\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub struct InlineAsm<'hir> {\n+    pub template: &'hir [InlineAsmTemplatePiece],\n+    pub operands: &'hir [InlineAsmOperand<'hir>],\n+    pub options: InlineAsmOptions,\n+}\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic, PartialEq)]\n pub struct LlvmInlineAsmOutput {\n     pub constraint: Symbol,"}, {"sha": "97601a3e1ac7bd1cf84e89674fabe11d11271e21", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "patch": "@@ -1157,6 +1157,27 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n+        ExprKind::InlineAsm(ref asm) => {\n+            for op in asm.operands {\n+                match op {\n+                    InlineAsmOperand::In { expr, .. }\n+                    | InlineAsmOperand::InOut { expr, .. }\n+                    | InlineAsmOperand::Const { expr, .. }\n+                    | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),\n+                    InlineAsmOperand::Out { expr, .. } => {\n+                        if let Some(expr) = expr {\n+                            visitor.visit_expr(expr);\n+                        }\n+                    }\n+                    InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                        visitor.visit_expr(in_expr);\n+                        if let Some(out_expr) = out_expr {\n+                            visitor.visit_expr(out_expr);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n         ExprKind::LlvmInlineAsm(ref asm) => {\n             walk_list!(visitor, visit_expr, asm.outputs_exprs);\n             walk_list!(visitor, visit_expr, asm.inputs_exprs);"}, {"sha": "918b5901375126bdd36ded556e29390b2426576f", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=d5b1501d8c3deda64c5b43ce2c9a0c51dd91169a", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, Ident, IdentPrinter, Symbol};\n use rustc_span::{self, BytePos, FileName};\n+use rustc_target::asm::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_target::spec::abi::Abi;\n \n use std::borrow::Cow;\n@@ -1409,6 +1410,107 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(&expr, parser::PREC_JUMP);\n                 }\n             }\n+            hir::ExprKind::InlineAsm(ref a) => {\n+                enum AsmArg<'a> {\n+                    Template(String),\n+                    Operand(&'a hir::InlineAsmOperand<'a>),\n+                    Options(InlineAsmOptions),\n+                }\n+\n+                let mut args = vec![];\n+                args.push(AsmArg::Template(InlineAsmTemplatePiece::to_string(&a.template)));\n+                args.extend(a.operands.iter().map(|o| AsmArg::Operand(o)));\n+                if !a.options.is_empty() {\n+                    args.push(AsmArg::Options(a.options));\n+                }\n+\n+                self.word(\"asm!\");\n+                self.popen();\n+                self.commasep(Consistent, &args, |s, arg| match arg {\n+                    AsmArg::Template(template) => s.print_string(&template, ast::StrStyle::Cooked),\n+                    AsmArg::Operand(op) => match op {\n+                        hir::InlineAsmOperand::In { reg, expr } => {\n+                            s.word(\"in\");\n+                            s.popen();\n+                            s.word(format!(\"{}\", reg));\n+                            s.pclose();\n+                            s.space();\n+                            s.print_expr(expr);\n+                        }\n+                        hir::InlineAsmOperand::Out { reg, late, expr } => {\n+                            s.word(if *late { \"lateout\" } else { \"out\" });\n+                            s.popen();\n+                            s.word(format!(\"{}\", reg));\n+                            s.pclose();\n+                            s.space();\n+                            match expr {\n+                                Some(expr) => s.print_expr(expr),\n+                                None => s.word(\"_\"),\n+                            }\n+                        }\n+                        hir::InlineAsmOperand::InOut { reg, late, expr } => {\n+                            s.word(if *late { \"inlateout\" } else { \"inout\" });\n+                            s.popen();\n+                            s.word(format!(\"{}\", reg));\n+                            s.pclose();\n+                            s.space();\n+                            s.print_expr(expr);\n+                        }\n+                        hir::InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n+                            s.word(if *late { \"inlateout\" } else { \"inout\" });\n+                            s.popen();\n+                            s.word(format!(\"{}\", reg));\n+                            s.pclose();\n+                            s.space();\n+                            s.print_expr(in_expr);\n+                            s.space();\n+                            s.word_space(\"=>\");\n+                            match out_expr {\n+                                Some(out_expr) => s.print_expr(out_expr),\n+                                None => s.word(\"_\"),\n+                            }\n+                        }\n+                        hir::InlineAsmOperand::Const { expr } => {\n+                            s.word(\"const\");\n+                            s.space();\n+                            s.print_expr(expr);\n+                        }\n+                        hir::InlineAsmOperand::Sym { expr } => {\n+                            s.word(\"sym\");\n+                            s.space();\n+                            s.print_expr(expr);\n+                        }\n+                    },\n+                    AsmArg::Options(opts) => {\n+                        s.word(\"options\");\n+                        s.popen();\n+                        let mut options = vec![];\n+                        if opts.contains(InlineAsmOptions::PURE) {\n+                            options.push(\"pure\");\n+                        }\n+                        if opts.contains(InlineAsmOptions::NOMEM) {\n+                            options.push(\"nomem\");\n+                        }\n+                        if opts.contains(InlineAsmOptions::READONLY) {\n+                            options.push(\"readonly\");\n+                        }\n+                        if opts.contains(InlineAsmOptions::PRESERVES_FLAGS) {\n+                            options.push(\"preserves_flags\");\n+                        }\n+                        if opts.contains(InlineAsmOptions::NORETURN) {\n+                            options.push(\"noreturn\");\n+                        }\n+                        if opts.contains(InlineAsmOptions::NOSTACK) {\n+                            options.push(\"nostack\");\n+                        }\n+                        s.commasep(Inconsistent, &options, |s, &opt| {\n+                            s.word(opt);\n+                        });\n+                        s.pclose();\n+                    }\n+                });\n+                self.pclose();\n+            }\n             hir::ExprKind::LlvmInlineAsm(ref a) => {\n                 let i = &a.inner;\n                 self.s.word(\"llvm_asm!\");"}]}