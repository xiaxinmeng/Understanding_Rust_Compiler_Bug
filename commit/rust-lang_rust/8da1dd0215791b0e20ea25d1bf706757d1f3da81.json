{"sha": "8da1dd0215791b0e20ea25d1bf706757d1f3da81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYTFkZDAyMTU3OTFiMGUyMGVhMjVkMWJmNzA2NzU3ZDFmM2RhODE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-22T12:53:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-22T12:53:46Z"}, "message": "Rollup merge of #71660 - sollyucko:master, r=dtolnay\n\nimpl PartialEq<Vec<B>> for &[A], &mut [A]\n\nhttps://github.com/rust-lang/rfcs/issues/2917", "tree": {"sha": "504e65e25fac158340c5acb629d223e51901fab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/504e65e25fac158340c5acb629d223e51901fab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da1dd0215791b0e20ea25d1bf706757d1f3da81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8KnbCRBK7hj4Ov3rIwAAdHIIAGki3dnkmbGkSiN9M46EZ4m2\nwXjQJ4IZt7RlNHgyFSNoJXlE7I/XI2QmGO0dk40gZs07SPJ6k21dYcnSWsajEoiC\noeutQ29rsFXxrReaE9k0oPykj7dvto/F/qqEfMAH/Glu9Z9yd9lmJ9L5MXECfX9n\ntYfOYQVvAg7WvxC2iDBtX+ji8WtgprfSDnTkuIHf6M9is0MDU+feojws5Yr6BjkG\nNRxNN0jftMyZgviSfZL8yRBN0jWPH3Hv2x5mvmdhDz4xu4BagRR4zFhNZ9Rup5uh\nO9kHWnYwNukD2oVdEUsvZDfKKDMinnpTOB0jzBM2pdS8U1AyadNqCfyydMNzkaE=\n=SA7L\n-----END PGP SIGNATURE-----\n", "payload": "tree 504e65e25fac158340c5acb629d223e51901fab2\nparent 1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3\nparent 4896a06667ae8d2df4b55822f98c90e6a6965fbc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1592830426 +0200\ncommitter GitHub <noreply@github.com> 1592830426 +0200\n\nRollup merge of #71660 - sollyucko:master, r=dtolnay\n\nimpl PartialEq<Vec<B>> for &[A], &mut [A]\n\nhttps://github.com/rust-lang/rfcs/issues/2917\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da1dd0215791b0e20ea25d1bf706757d1f3da81", "html_url": "https://github.com/rust-lang/rust/commit/8da1dd0215791b0e20ea25d1bf706757d1f3da81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da1dd0215791b0e20ea25d1bf706757d1f3da81/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "html_url": "https://github.com/rust-lang/rust/commit/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3"}, {"sha": "4896a06667ae8d2df4b55822f98c90e6a6965fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4896a06667ae8d2df4b55822f98c90e6a6965fbc", "html_url": "https://github.com/rust-lang/rust/commit/4896a06667ae8d2df4b55822f98c90e6a6965fbc"}], "stats": {"total": 81, "additions": 70, "deletions": 11}, "files": [{"sha": "ffff543b07fe52cb79ecfa0209b5bddc741beaad", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8da1dd0215791b0e20ea25d1bf706757d1f3da81/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da1dd0215791b0e20ea25d1bf706757d1f3da81/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=8da1dd0215791b0e20ea25d1bf706757d1f3da81", "patch": "@@ -1,5 +1,6 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n+use std::fmt::Debug;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n@@ -1573,3 +1574,56 @@ fn test_push_growth_strategy() {\n         }\n     }\n }\n+\n+macro_rules! generate_assert_eq_vec_and_prim {\n+    ($name:ident<$B:ident>($type:ty)) => {\n+        fn $name<A: PartialEq<$B> + Debug, $B: Debug>(a: Vec<A>, b: $type) {\n+            assert!(a == b);\n+            assert_eq!(a, b);\n+        }\n+    };\n+}\n+\n+generate_assert_eq_vec_and_prim! { assert_eq_vec_and_slice  <B>(&[B])   }\n+generate_assert_eq_vec_and_prim! { assert_eq_vec_and_array_3<B>([B; 3]) }\n+\n+#[test]\n+fn partialeq_vec_and_prim() {\n+    assert_eq_vec_and_slice(vec![1, 2, 3], &[1, 2, 3]);\n+    assert_eq_vec_and_array_3(vec![1, 2, 3], [1, 2, 3]);\n+}\n+\n+macro_rules! assert_partial_eq_valid {\n+    ($a2:ident, $a3:ident; $b2:ident, $b3: ident) => {\n+        assert!($a2 == $b2);\n+        assert!($a2 != $b3);\n+        assert!($a3 != $b2);\n+        assert!($a3 == $b3);\n+        assert_eq!($a2, $b2);\n+        assert_ne!($a2, $b3);\n+        assert_ne!($a3, $b2);\n+        assert_eq!($a3, $b3);\n+    };\n+}\n+\n+#[test]\n+fn partialeq_vec_full() {\n+    let vec2: Vec<_> = vec![1, 2];\n+    let vec3: Vec<_> = vec![1, 2, 3];\n+    let slice2: &[_] = &[1, 2];\n+    let slice3: &[_] = &[1, 2, 3];\n+    let slicemut2: &[_] = &mut [1, 2];\n+    let slicemut3: &[_] = &mut [1, 2, 3];\n+    let array2: [_; 2] = [1, 2];\n+    let array3: [_; 3] = [1, 2, 3];\n+    let arrayref2: &[_; 2] = &[1, 2];\n+    let arrayref3: &[_; 3] = &[1, 2, 3];\n+\n+    assert_partial_eq_valid!(vec2,vec3; vec2,vec3);\n+    assert_partial_eq_valid!(vec2,vec3; slice2,slice3);\n+    assert_partial_eq_valid!(vec2,vec3; slicemut2,slicemut3);\n+    assert_partial_eq_valid!(slice2,slice3; vec2,vec3);\n+    assert_partial_eq_valid!(slicemut2,slicemut3; vec2,vec3);\n+    assert_partial_eq_valid!(vec2,vec3; array2,array3);\n+    assert_partial_eq_valid!(vec2,vec3; arrayref2,arrayref3);\n+}"}, {"sha": "fc8a992e1701bf9d6d03ef623aea96e705509b97", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8da1dd0215791b0e20ea25d1bf706757d1f3da81/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da1dd0215791b0e20ea25d1bf706757d1f3da81/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=8da1dd0215791b0e20ea25d1bf706757d1f3da81", "patch": "@@ -2342,12 +2342,12 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n }\n \n macro_rules! __impl_slice_eq1 {\n-    ([$($vars:tt)*] $lhs:ty, $rhs:ty, $($constraints:tt)*) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    ([$($vars:tt)*] $lhs:ty, $rhs:ty $(where $ty:ty: $bound:ident)?, #[$stability:meta]) => {\n+        #[$stability]\n         impl<A, B, $($vars)*> PartialEq<$rhs> for $lhs\n         where\n             A: PartialEq<B>,\n-            $($constraints)*\n+            $($ty: $bound)?\n         {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool { self[..] == other[..] }\n@@ -2357,18 +2357,23 @@ macro_rules! __impl_slice_eq1 {\n     }\n }\n \n-__impl_slice_eq1! { [] Vec<A>, Vec<B>, }\n-__impl_slice_eq1! { [] Vec<A>, &[B], }\n-__impl_slice_eq1! { [] Vec<A>, &mut [B], }\n-__impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B>, A: Clone }\n-__impl_slice_eq1! { [] Cow<'_, [A]>, &[B], A: Clone }\n-__impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B], A: Clone }\n-__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N], [B; N]: LengthAtMost32 }\n-__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [] Vec<A>, Vec<B>, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Vec<A>, &[B], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Vec<A>, &mut [B], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] &[A], Vec<B>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n+__impl_slice_eq1! { [] &mut [A], Vec<B>, #[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B> where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &[B] where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B] where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N] where [B; N]: LengthAtMost32, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N] where [B; N]: LengthAtMost32, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n \n // NOTE: some less important impls are omitted to reduce code bloat\n // FIXME(Centril): Reconsider this?\n //__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, [A; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], [B; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], [B; N]: LengthAtMost32 }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], [B; N]: LengthAtMost32 }"}]}