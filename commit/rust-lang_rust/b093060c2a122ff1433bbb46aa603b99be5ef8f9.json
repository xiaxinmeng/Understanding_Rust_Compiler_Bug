{"sha": "b093060c2a122ff1433bbb46aa603b99be5ef8f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOTMwNjBjMmExMjJmZjE0MzNiYmI0NmFhNjAzYjk5YmU1ZWY4Zjk=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-10-01T16:03:34Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-10-01T16:03:34Z"}, "message": "Stop re-exporting AttrStyle's variants and rename them.", "tree": {"sha": "734792d961612a65d511cff23d136728877b7448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734792d961612a65d511cff23d136728877b7448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b093060c2a122ff1433bbb46aa603b99be5ef8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b093060c2a122ff1433bbb46aa603b99be5ef8f9", "html_url": "https://github.com/rust-lang/rust/commit/b093060c2a122ff1433bbb46aa603b99be5ef8f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b093060c2a122ff1433bbb46aa603b99be5ef8f9/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24202c6431a29d18f58c6d7302d6a9095e218395", "url": "https://api.github.com/repos/rust-lang/rust/commits/24202c6431a29d18f58c6d7302d6a9095e218395", "html_url": "https://github.com/rust-lang/rust/commit/24202c6431a29d18f58c6d7302d6a9095e218395"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "0dec3d423caae9f80e0ab26d73a65afb3125da2d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -1115,7 +1115,7 @@ fn get_attributes(md: rbml::Doc) -> Vec<ast::Attribute> {\n                 codemap::Spanned {\n                     node: ast::Attribute_ {\n                         id: attr::mk_attr_id(),\n-                        style: ast::AttrOuter,\n+                        style: ast::AttrStyle::Outer,\n                         value: meta_item,\n                         is_sugared_doc: is_sugared_doc,\n                     },"}, {"sha": "9e1e3c0e293ac1ed44bd7b8dce01b7f8a2a9f2f8", "filename": "src/librustc_front/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibrustc_front%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibrustc_front%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fattr.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -180,7 +180,7 @@ pub fn mk_attr_id() -> AttrId {\n pub fn mk_attr_inner(id: AttrId, item: P<MetaItem>) -> Attribute {\n     dummy_spanned(Attribute_ {\n         id: id,\n-        style: hir::AttrInner,\n+        style: hir::AttrStyle::Inner,\n         value: item,\n         is_sugared_doc: false,\n     })\n@@ -190,7 +190,7 @@ pub fn mk_attr_inner(id: AttrId, item: P<MetaItem>) -> Attribute {\n pub fn mk_attr_outer(id: AttrId, item: P<MetaItem>) -> Attribute {\n     dummy_spanned(Attribute_ {\n         id: id,\n-        style: hir::AttrOuter,\n+        style: hir::AttrStyle::Outer,\n         value: item,\n         is_sugared_doc: false,\n     })"}, {"sha": "79249d08db838956b43339eb68c8cd1bc507a7c6", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -285,10 +285,10 @@ impl LateLintPass for UnusedAttributes {\n                                                     }).is_some();\n             if  known_crate || plugin_crate {\n                 let msg = match attr.node.style {\n-                    ast::AttrOuter => \"crate-level attribute should be an inner \\\n-                                       attribute: add an exclamation mark: #![foo]\",\n-                    ast::AttrInner => \"crate-level attribute should be in the \\\n-                                       root module\",\n+                    ast::AttrStyle::Outer => \"crate-level attribute should be an inner \\\n+                                              attribute: add an exclamation mark: #![foo]\",\n+                    ast::AttrStyle::Inner => \"crate-level attribute should be in the \\\n+                                              root module\",\n                 };\n                 cx.span_lint(UNUSED_ATTRIBUTES, attr.span, msg);\n             }"}, {"sha": "50b947febc3ebcb82ca3796833b3e69833d5524e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::AttrStyle::*;\n pub use self::BindingMode::*;\n pub use self::BinOp_::*;\n pub use self::BlockCheckMode::*;\n@@ -1019,8 +1018,8 @@ impl TokenTree {\n         match *self {\n             TtToken(_, token::DocComment(name)) => {\n                 match doc_comment_style(&name.as_str()) {\n-                    AttrOuter => 2,\n-                    AttrInner => 3\n+                    AttrStyle::Outer => 2,\n+                    AttrStyle::Inner => 3\n                 }\n             }\n             TtToken(_, token::SpecialVarNt(..)) => 2,\n@@ -1041,7 +1040,7 @@ impl TokenTree {\n                 TtToken(sp, token::Pound)\n             }\n             (&TtToken(sp, token::DocComment(name)), 1)\n-            if doc_comment_style(&name.as_str()) == AttrInner => {\n+            if doc_comment_style(&name.as_str()) == AttrStyle::Inner => {\n                 TtToken(sp, token::Not)\n             }\n             (&TtToken(sp, token::DocComment(name)), _) => {\n@@ -1658,8 +1657,8 @@ pub type Attribute = Spanned<Attribute_>;\n /// distinguished for pretty-printing.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum AttrStyle {\n-    AttrOuter,\n-    AttrInner,\n+    Outer,\n+    Inner,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "5fe4220bd99ba5b13340a94b8a97897f054bfffb", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -156,7 +156,7 @@ impl AttributeMethods for Attribute {\n                 InternedString::new(\"doc\"),\n                 token::intern_and_get_ident(&strip_doc_comment_decoration(\n                         &comment)));\n-            if self.node.style == ast::AttrOuter {\n+            if self.node.style == ast::AttrStyle::Outer {\n                 f(&mk_attr_outer(self.node.id, meta))\n             } else {\n                 f(&mk_attr_inner(self.node.id, meta))\n@@ -203,7 +203,7 @@ pub fn mk_attr_id() -> AttrId {\n pub fn mk_attr_inner(id: AttrId, item: P<MetaItem>) -> Attribute {\n     dummy_spanned(Attribute_ {\n         id: id,\n-        style: ast::AttrInner,\n+        style: ast::AttrStyle::Inner,\n         value: item,\n         is_sugared_doc: false,\n     })\n@@ -213,7 +213,7 @@ pub fn mk_attr_inner(id: AttrId, item: P<MetaItem>) -> Attribute {\n pub fn mk_attr_outer(id: AttrId, item: P<MetaItem>) -> Attribute {\n     dummy_spanned(Attribute_ {\n         id: id,\n-        style: ast::AttrOuter,\n+        style: ast::AttrStyle::Outer,\n         value: item,\n         is_sugared_doc: false,\n     })"}, {"sha": "a20080dcbf00a12d855395ef8fbe00c550c0fc35", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -1079,7 +1079,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn attribute(&self, sp: Span, mi: P<ast::MetaItem>) -> ast::Attribute {\n         respan(sp, ast::Attribute_ {\n             id: attr::mk_attr_id(),\n-            style: ast::AttrOuter,\n+            style: ast::AttrStyle::Outer,\n             value: mi,\n             is_sugared_doc: false,\n         })"}, {"sha": "b15c51490a1880accafc76e0218aad96c9868d5d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -660,7 +660,7 @@ fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool\n         if attr.check_name(\"macro_escape\") {\n             fld.cx.span_warn(attr.span, \"macro_escape is a deprecated synonym for macro_use\");\n             is_use = true;\n-            if let ast::AttrInner = attr.node.style {\n+            if let ast::AttrStyle::Inner = attr.node.style {\n                 fld.cx.fileline_help(attr.span, \"consider an outer attribute, \\\n                                              #[macro_use] mod ...\");\n             }"}, {"sha": "e5fd15559ecffede4af2eba5c085992858b1f3b6", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -187,7 +187,7 @@ pub mod rt {\n             let mut r = vec![];\n             // FIXME: The spans could be better\n             r.push(ast::TtToken(self.span, token::Pound));\n-            if self.node.style == ast::AttrInner {\n+            if self.node.style == ast::AttrStyle::Inner {\n                 r.push(ast::TtToken(self.span, token::Not));\n             }\n             r.push(ast::TtDelimited(self.span, Rc::new(ast::Delimited {"}, {"sha": "219360093d14605c4b170d298b7812b1c168d33b", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -44,7 +44,7 @@ impl<'a> ParserAttr for Parser<'a> {\n                     self.span.lo,\n                     self.span.hi\n                 );\n-                if attr.node.style != ast::AttrOuter {\n+                if attr.node.style != ast::AttrStyle::Outer {\n                   panic!(self.fatal(\"expected outer comment\"));\n                 }\n                 attrs.push(attr);\n@@ -79,9 +79,9 @@ impl<'a> ParserAttr for Parser<'a> {\n                         self.fileline_help(span,\n                                        \"place inner attribute at the top of the module or block\");\n                     }\n-                    ast::AttrInner\n+                    ast::AttrStyle::Inner\n                 } else {\n-                    ast::AttrOuter\n+                    ast::AttrStyle::Outer\n                 };\n \n                 panictry!(self.expect(&token::OpenDelim(token::Bracket)));\n@@ -101,7 +101,7 @@ impl<'a> ParserAttr for Parser<'a> {\n             panictry!(self.bump());\n             self.span_warn(span, \"this inner attribute syntax is deprecated. \\\n                            The new syntax is `#![foo]`, with a bang and no semicolon\");\n-            style = ast::AttrInner;\n+            style = ast::AttrStyle::Inner;\n         }\n \n         return Spanned {\n@@ -131,15 +131,15 @@ impl<'a> ParserAttr for Parser<'a> {\n                     }\n \n                     let attr = self.parse_attribute(true);\n-                    assert!(attr.node.style == ast::AttrInner);\n+                    assert!(attr.node.style == ast::AttrStyle::Inner);\n                     attrs.push(attr);\n                 }\n                 token::DocComment(s) => {\n                     // we need to get the position of this token before we bump.\n                     let Span { lo, hi, .. } = self.span;\n                     let str = self.id_to_interned_str(ast::Ident::with_empty_ctxt(s));\n                     let attr = attr::mk_sugared_doc_attr(attr::mk_attr_id(), str, lo, hi);\n-                    if attr.node.style == ast::AttrInner {\n+                    if attr.node.style == ast::AttrStyle::Inner {\n                         attrs.push(attr);\n                         panictry!(self.bump());\n                     } else {"}, {"sha": "137996a35ee8f57cb119e3def16dbbe1fa8be729", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -52,9 +52,9 @@ pub fn is_doc_comment(s: &str) -> bool {\n pub fn doc_comment_style(comment: &str) -> ast::AttrStyle {\n     assert!(is_doc_comment(comment));\n     if comment.starts_with(\"//!\") || comment.starts_with(\"/*!\") {\n-        ast::AttrInner\n+        ast::AttrStyle::Inner\n     } else {\n-        ast::AttrOuter\n+        ast::AttrStyle::Outer\n     }\n }\n "}, {"sha": "405fd9b8cc745c1cbd61f12745a56062ab9f7dfe", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -709,7 +709,7 @@ pub trait PrintState<'a> {\n         let mut count = 0;\n         for attr in attrs {\n             match attr.node.style {\n-                ast::AttrInner => {\n+                ast::AttrStyle::Inner => {\n                     try!(self.print_attribute(attr));\n                     count += 1;\n                 }\n@@ -727,7 +727,7 @@ pub trait PrintState<'a> {\n         let mut count = 0;\n         for attr in attrs {\n             match attr.node.style {\n-                ast::AttrOuter => {\n+                ast::AttrStyle::Outer => {\n                     try!(self.print_attribute(attr));\n                     count += 1;\n                 }\n@@ -747,8 +747,8 @@ pub trait PrintState<'a> {\n             word(self.writer(), &attr.value_str().unwrap())\n         } else {\n             match attr.node.style {\n-                ast::AttrInner => try!(word(self.writer(), \"#![\")),\n-                ast::AttrOuter => try!(word(self.writer(), \"#[\")),\n+                ast::AttrStyle::Inner => try!(word(self.writer(), \"#![\")),\n+                ast::AttrStyle::Outer => try!(word(self.writer(), \"#[\")),\n             }\n             try!(self.print_meta_item(&*attr.meta()));\n             word(self.writer(), \"]\")"}, {"sha": "345adff23443a943b86d5aacf11cd1f87f244470", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b093060c2a122ff1433bbb46aa603b99be5ef8f9/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=b093060c2a122ff1433bbb46aa603b99be5ef8f9", "patch": "@@ -154,7 +154,7 @@ impl fold::Folder for PreludeInjector {\n                 span: self.span,\n                 node: ast::Attribute_ {\n                     id: attr::mk_attr_id(),\n-                    style: ast::AttrOuter,\n+                    style: ast::AttrStyle::Outer,\n                     value: P(ast::MetaItem {\n                         span: self.span,\n                         node: ast::MetaWord(special_idents::prelude_import.name.as_str()),"}]}