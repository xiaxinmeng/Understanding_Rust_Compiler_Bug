{"sha": "44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZTIyNmNlYjc1MzA3NWI0NGJjYWFkZjM0OWIxZDFiNmEyM2FkOGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-12-17T13:02:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-12-17T17:19:38Z"}, "message": "Continue String to Symbol conversion in rustdoc", "tree": {"sha": "22a90d5822936a35cfc9a808d36931aa09fb59a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a90d5822936a35cfc9a808d36931aa09fb59a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "html_url": "https://github.com/rust-lang/rust/commit/44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd0a78582efd17f588b35e3e227a65617d5afec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd0a78582efd17f588b35e3e227a65617d5afec", "html_url": "https://github.com/rust-lang/rust/commit/bdd0a78582efd17f588b35e3e227a65617d5afec"}], "stats": {"total": 143, "additions": 74, "deletions": 69}, "files": [{"sha": "40c59ed1e0b755b11a57e34cbef047f5eeafa49f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -61,10 +61,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             .params\n                             .iter()\n                             .filter_map(|param| match param.kind {\n-                                ty::GenericParamDefKind::Lifetime => Some(param.name.to_string()),\n+                                ty::GenericParamDefKind::Lifetime => Some(param.name),\n                                 _ => None,\n                             })\n-                            .map(|name| (name.clone(), Lifetime(name)))\n+                            .map(|name| (name, Lifetime(name)))\n                             .collect();\n                         let lifetime_predicates = self.handle_lifetimes(&region_data, &names_map);\n                         let new_generics = self.param_env_to_generics(\n@@ -145,21 +145,21 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     fn get_lifetime(\n         &self,\n         region: Region<'_>,\n-        names_map: &FxHashMap<String, Lifetime>,\n+        names_map: &FxHashMap<Symbol, Lifetime>,\n     ) -> Lifetime {\n         self.region_name(region)\n             .map(|name| {\n                 names_map.get(&name).unwrap_or_else(|| {\n-                    panic!(\"Missing lifetime with name {:?} for {:?}\", name, region)\n+                    panic!(\"Missing lifetime with name {:?} for {:?}\", name.as_str(), region)\n                 })\n             })\n             .unwrap_or(&Lifetime::statik())\n             .clone()\n     }\n \n-    fn region_name(&self, region: Region<'_>) -> Option<String> {\n+    fn region_name(&self, region: Region<'_>) -> Option<Symbol> {\n         match region {\n-            &ty::ReEarlyBound(r) => Some(r.name.to_string()),\n+            &ty::ReEarlyBound(r) => Some(r.name),\n             _ => None,\n         }\n     }\n@@ -177,7 +177,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     fn handle_lifetimes<'cx>(\n         &self,\n         regions: &RegionConstraintData<'cx>,\n-        names_map: &FxHashMap<String, Lifetime>,\n+        names_map: &FxHashMap<Symbol, Lifetime>,\n     ) -> Vec<WherePredicate> {\n         // Our goal is to 'flatten' the list of constraints by eliminating\n         // all intermediate RegionVids. At the end, all constraints should"}, {"sha": "3cff5fa07b15c5fd36c2d07dc6d5f3312a8a2c93", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -486,13 +486,13 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         const_stability: None,\n                         deprecation: None,\n                         kind: clean::ImportItem(clean::Import::new_simple(\n-                            item.ident.to_string(),\n+                            item.ident.name,\n                             clean::ImportSource {\n                                 path: clean::Path {\n                                     global: false,\n                                     res: item.res,\n                                     segments: vec![clean::PathSegment {\n-                                        name: clean::PrimitiveType::from(p).as_str().to_string(),\n+                                        name: clean::PrimitiveType::from(p).as_sym(),\n                                         args: clean::GenericArgs::AngleBracketed {\n                                             args: Vec::new(),\n                                             bindings: Vec::new(),\n@@ -562,11 +562,11 @@ fn build_macro(cx: &DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemKind\n                     .collect::<String>()\n             );\n \n-            clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from).clean(cx) })\n+            clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n         }\n         LoadedMacro::ProcMacro(ext) => clean::ProcMacroItem(clean::ProcMacro {\n             kind: ext.macro_kind(),\n-            helpers: ext.helper_attrs.clean(cx),\n+            helpers: ext.helper_attrs,\n         }),\n     }\n }"}, {"sha": "43272aeda6127438b159b139dd8e9e4fc5ce30b9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -379,7 +379,7 @@ impl Clean<Lifetime> for hir::Lifetime {\n             }\n             _ => {}\n         }\n-        Lifetime(self.name.ident().to_string())\n+        Lifetime(self.name.ident().name)\n     }\n }\n \n@@ -397,9 +397,9 @@ impl Clean<Lifetime> for hir::GenericParam<'_> {\n                     for bound in bounds {\n                         s.push_str(&format!(\" + {}\", bound.name.ident()));\n                     }\n-                    Lifetime(s)\n+                    Lifetime(Symbol::intern(&s))\n                 } else {\n-                    Lifetime(self.name.ident().to_string())\n+                    Lifetime(self.name.ident().name)\n                 }\n             }\n             _ => panic!(),\n@@ -423,16 +423,16 @@ impl Clean<Constant> for hir::ConstArg {\n \n impl Clean<Lifetime> for ty::GenericParamDef {\n     fn clean(&self, _cx: &DocContext<'_>) -> Lifetime {\n-        Lifetime(self.name.to_string())\n+        Lifetime(self.name)\n     }\n }\n \n impl Clean<Option<Lifetime>> for ty::RegionKind {\n-    fn clean(&self, cx: &DocContext<'_>) -> Option<Lifetime> {\n+    fn clean(&self, _cx: &DocContext<'_>) -> Option<Lifetime> {\n         match *self {\n             ty::ReStatic => Some(Lifetime::statik()),\n-            ty::ReLateBound(_, ty::BrNamed(_, name)) => Some(Lifetime(name.to_string())),\n-            ty::ReEarlyBound(ref data) => Some(Lifetime(data.name.clean(cx))),\n+            ty::ReLateBound(_, ty::BrNamed(_, name)) => Some(Lifetime(name)),\n+            ty::ReEarlyBound(ref data) => Some(Lifetime(data.name)),\n \n             ty::ReLateBound(..)\n             | ty::ReFree(..)\n@@ -897,7 +897,7 @@ fn clean_fn_or_proc_macro(\n                     }\n                 }\n             }\n-            ProcMacroItem(ProcMacro { kind, helpers: helpers.clean(cx) })\n+            ProcMacroItem(ProcMacro { kind, helpers })\n         }\n         None => {\n             let mut func = (sig, generics, body_id).clean(cx);\n@@ -1914,7 +1914,7 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n \n impl Clean<PathSegment> for hir::PathSegment<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> PathSegment {\n-        PathSegment { name: self.ident.name.clean(cx), args: self.generic_args().clean(cx) }\n+        PathSegment { name: self.ident.name, args: self.generic_args().clean(cx) }\n     }\n }\n \n@@ -2132,7 +2132,6 @@ fn clean_extern_crate(\n             return items;\n         }\n     }\n-    let path = orig_name.map(|x| x.to_string());\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: None,\n@@ -2143,7 +2142,7 @@ fn clean_extern_crate(\n         stability: None,\n         const_stability: None,\n         deprecation: None,\n-        kind: ExternCrateItem(name.clean(cx), path),\n+        kind: ExternCrateItem(name, orig_name),\n     }]\n }\n \n@@ -2215,15 +2214,15 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         const_stability: None,\n                         deprecation: None,\n                         kind: ImportItem(Import::new_simple(\n-                            self.name.clean(cx),\n+                            self.name,\n                             resolve_use_source(cx, path),\n                             false,\n                         )),\n                     });\n                     return items;\n                 }\n             }\n-            Import::new_simple(name.clean(cx), resolve_use_source(cx, path), true)\n+            Import::new_simple(name, resolve_use_source(cx, path), true)\n         };\n \n         vec![Item {"}, {"sha": "4920e6fd6f15d50120ec29dcc1fb26cc6a322dd0", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -295,7 +295,7 @@ impl Item {\n \n #[derive(Clone, Debug)]\n crate enum ItemKind {\n-    ExternCrateItem(String, Option<String>),\n+    ExternCrateItem(Symbol, Option<Symbol>),\n     ImportItem(Import),\n     StructItem(Struct),\n     UnionItem(Union),\n@@ -877,21 +877,19 @@ impl GenericBound {\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-crate struct Lifetime(pub String);\n+crate struct Lifetime(pub Symbol);\n \n impl Lifetime {\n-    crate fn get_ref<'a>(&'a self) -> &'a str {\n-        let Lifetime(ref s) = *self;\n-        let s: &'a str = s;\n-        s\n+    crate fn get_ref(&self) -> SymbolStr {\n+        self.0.as_str()\n     }\n \n     crate fn statik() -> Lifetime {\n-        Lifetime(\"'static\".to_string())\n+        Lifetime(kw::StaticLifetime)\n     }\n \n     crate fn elided() -> Lifetime {\n-        Lifetime(\"'_\".to_string())\n+        Lifetime(kw::UnderscoreLifetime)\n     }\n }\n \n@@ -1675,13 +1673,17 @@ crate struct Path {\n }\n \n impl Path {\n-    crate fn last_name(&self) -> &str {\n+    crate fn last(&self) -> Symbol {\n+        self.segments.last().expect(\"segments were empty\").name\n+    }\n+\n+    crate fn last_name(&self) -> SymbolStr {\n         self.segments.last().expect(\"segments were empty\").name.as_str()\n     }\n \n     crate fn whole_name(&self) -> String {\n         String::from(if self.global { \"::\" } else { \"\" })\n-            + &self.segments.iter().map(|s| s.name.clone()).collect::<Vec<_>>().join(\"::\")\n+            + &self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n     }\n }\n \n@@ -1700,7 +1702,7 @@ crate enum GenericArgs {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate struct PathSegment {\n-    crate name: String,\n+    crate name: Symbol,\n     crate args: GenericArgs,\n }\n \n@@ -1777,7 +1779,7 @@ crate struct Import {\n }\n \n impl Import {\n-    crate fn new_simple(name: String, source: ImportSource, should_be_displayed: bool) -> Self {\n+    crate fn new_simple(name: Symbol, source: ImportSource, should_be_displayed: bool) -> Self {\n         Self { kind: ImportKind::Simple(name), source, should_be_displayed }\n     }\n \n@@ -1789,7 +1791,7 @@ impl Import {\n #[derive(Clone, Debug)]\n crate enum ImportKind {\n     // use source as str;\n-    Simple(String),\n+    Simple(Symbol),\n     // use source::*;\n     Glob,\n }\n@@ -1803,13 +1805,13 @@ crate struct ImportSource {\n #[derive(Clone, Debug)]\n crate struct Macro {\n     crate source: String,\n-    crate imported_from: Option<String>,\n+    crate imported_from: Option<Symbol>,\n }\n \n #[derive(Clone, Debug)]\n crate struct ProcMacro {\n     crate kind: MacroKind,\n-    crate helpers: Vec<String>,\n+    crate helpers: Vec<Symbol>,\n }\n \n /// An type binding on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or"}, {"sha": "1ae2e5de82c45e67d897f2272d96076c19037155", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -153,7 +153,7 @@ pub(super) fn external_path(\n         global: false,\n         res: Res::Err,\n         segments: vec![PathSegment {\n-            name: name.to_string(),\n+            name,\n             args: external_generic_args(cx, trait_did, has_self, bindings, substs),\n         }],\n     }"}, {"sha": "f80346aa50b4f5de0476a55e65dfc3aef8383846", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -308,7 +308,7 @@ impl<'a> fmt::Display for WhereClause<'a> {\n }\n \n impl clean::Lifetime {\n-    crate fn print(&self) -> &str {\n+    crate fn print(&self) -> impl fmt::Display + '_ {\n         self.get_ref()\n     }\n }\n@@ -445,11 +445,10 @@ impl clean::GenericArgs {\n impl clean::PathSegment {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| {\n-            f.write_str(&self.name)?;\n             if f.alternate() {\n-                write!(f, \"{:#}\", self.args.print())\n+                write!(f, \"{}{:#}\", self.name, self.args.print())\n             } else {\n-                write!(f, \"{}\", self.args.print())\n+                write!(f, \"{}{}\", self.name, self.args.print())\n             }\n         })\n     }\n@@ -544,7 +543,7 @@ fn resolved_path(\n                 last.name.to_string()\n             }\n         } else {\n-            anchor(did, &last.name).to_string()\n+            anchor(did, &*last.name.as_str()).to_string()\n         };\n         write!(w, \"{}{}\", path, last.args.print())?;\n     }\n@@ -1159,11 +1158,11 @@ impl PrintWithSpace for hir::Mutability {\n impl clean::Import {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| match self.kind {\n-            clean::ImportKind::Simple(ref name) => {\n-                if *name == self.source.path.last_name() {\n+            clean::ImportKind::Simple(name) => {\n+                if name == self.source.path.last() {\n                     write!(f, \"use {};\", self.source.print())\n                 } else {\n-                    write!(f, \"use {} as {};\", self.source.print(), *name)\n+                    write!(f, \"use {} as {};\", self.source.print(), name)\n                 }\n             }\n             clean::ImportKind::Glob => {\n@@ -1187,7 +1186,7 @@ impl clean::ImportSource {\n                 }\n                 let name = self.path.last_name();\n                 if let hir::def::Res::PrimTy(p) = self.path.res {\n-                    primitive_link(f, PrimitiveType::from(p), name)?;\n+                    primitive_link(f, PrimitiveType::from(p), &*name)?;\n                 } else {\n                     write!(f, \"{}\", name)?;\n                 }"}, {"sha": "94a8b3fef47d16f680b5be591e6f434238eed28e", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -2,7 +2,7 @@ use std::collections::BTreeMap;\n use std::path::Path;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use serde::Serialize;\n \n use crate::clean::types::GetDefId;\n@@ -191,12 +191,12 @@ fn get_index_type(clean_type: &clean::Type) -> RenderType {\n     RenderType {\n         ty: clean_type.def_id(),\n         idx: None,\n-        name: get_index_type_name(clean_type, true).map(|s| s.to_ascii_lowercase()),\n+        name: get_index_type_name(clean_type, true).map(|s| s.as_str().to_ascii_lowercase()),\n         generics: get_generics(clean_type),\n     }\n }\n \n-fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<String> {\n+fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<Symbol> {\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n             let segments = &path.segments;\n@@ -206,10 +206,10 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n                 clean_type, accept_generic\n             )\n             });\n-            Some(path_segment.name.clone())\n+            Some(path_segment.name)\n         }\n-        clean::Generic(s) if accept_generic => Some(s.to_string()),\n-        clean::Primitive(ref p) => Some(format!(\"{:?}\", p)),\n+        clean::Generic(s) if accept_generic => Some(s),\n+        clean::Primitive(ref p) => Some(p.as_sym()),\n         clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_, accept_generic),\n         // FIXME: add all from clean::Type.\n         _ => None,\n@@ -222,7 +222,7 @@ fn get_generics(clean_type: &clean::Type) -> Option<Vec<Generic>> {\n             .iter()\n             .filter_map(|t| {\n                 get_index_type_name(t, false).map(|name| Generic {\n-                    name: name.to_ascii_lowercase(),\n+                    name: name.as_str().to_ascii_lowercase(),\n                     defid: t.def_id(),\n                     idx: None,\n                 })"}, {"sha": "1e888e83e1990a7580327b59eaa8965c88907aaa", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -2137,14 +2137,14 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                         w,\n                         \"<tr><td><code>{}extern crate {} as {};\",\n                         myitem.visibility.print_with_space(),\n-                        anchor(myitem.def_id, src),\n+                        anchor(myitem.def_id, &*src.as_str()),\n                         name\n                     ),\n                     None => write!(\n                         w,\n                         \"<tr><td><code>{}extern crate {};\",\n                         myitem.visibility.print_with_space(),\n-                        anchor(myitem.def_id, name)\n+                        anchor(myitem.def_id, &*name.as_str())\n                     ),\n                 }\n                 write!(w, \"</code></td></tr>\");\n@@ -2444,7 +2444,7 @@ fn render_implementor(\n     implementor: &Impl,\n     parent: &clean::Item,\n     w: &mut Buffer,\n-    implementor_dups: &FxHashMap<&str, (DefId, bool)>,\n+    implementor_dups: &FxHashMap<Symbol, (DefId, bool)>,\n     aliases: &[String],\n     cache: &Cache,\n ) {\n@@ -2455,7 +2455,7 @@ fn render_implementor(\n         | clean::BorrowedRef {\n             type_: box clean::ResolvedPath { ref path, is_generic: false, .. },\n             ..\n-        } => implementor_dups[path.last_name()].1,\n+        } => implementor_dups[&path.last()].1,\n         _ => false,\n     };\n     render_impl(\n@@ -2704,7 +2704,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n         // The DefId is for the first Type found with that name. The bool is\n         // if any Types with the same name but different DefId have been found.\n-        let mut implementor_dups: FxHashMap<&str, (DefId, bool)> = FxHashMap::default();\n+        let mut implementor_dups: FxHashMap<Symbol, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n             match implementor.inner_impl().for_ {\n                 clean::ResolvedPath { ref path, did, is_generic: false, .. }\n@@ -2713,7 +2713,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     ..\n                 } => {\n                     let &mut (prev_did, ref mut has_duplicates) =\n-                        implementor_dups.entry(path.last_name()).or_insert((did, false));\n+                        implementor_dups.entry(path.last()).or_insert((did, false));\n                     if prev_did != did {\n                         *has_duplicates = true;\n                     }"}, {"sha": "9dc27e3411dd9026733fb07efae7008562213d92", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e226ceb753075b44bcaadf349b1d1b6a23ad8d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=44e226ceb753075b44bcaadf349b1d1b6a23ad8d", "patch": "@@ -120,7 +120,7 @@ impl From<clean::GenericArg> for GenericArg {\n     fn from(arg: clean::GenericArg) -> Self {\n         use clean::GenericArg::*;\n         match arg {\n-            Lifetime(l) => GenericArg::Lifetime(l.0),\n+            Lifetime(l) => GenericArg::Lifetime(l.0.to_string()),\n             Type(t) => GenericArg::Type(t.into()),\n             Const(c) => GenericArg::Const(c.into()),\n         }\n@@ -163,7 +163,9 @@ impl From<clean::ItemKind> for ItemEnum {\n         use clean::ItemKind::*;\n         match item {\n             ModuleItem(m) => ItemEnum::ModuleItem(m.into()),\n-            ExternCrateItem(c, a) => ItemEnum::ExternCrateItem { name: c, rename: a },\n+            ExternCrateItem(c, a) => {\n+                ItemEnum::ExternCrateItem { name: c.to_string(), rename: a.map(|x| x.to_string()) }\n+            }\n             ImportItem(i) => ItemEnum::ImportItem(i.into()),\n             StructItem(s) => ItemEnum::StructItem(s.into()),\n             UnionItem(u) => ItemEnum::StructItem(u.into()),\n@@ -302,7 +304,7 @@ impl From<clean::WherePredicate> for WherePredicate {\n                 bounds: bounds.into_iter().map(Into::into).collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n-                lifetime: lifetime.0,\n+                lifetime: lifetime.0.to_string(),\n                 bounds: bounds.into_iter().map(Into::into).collect(),\n             },\n             EqPredicate { lhs, rhs } => {\n@@ -323,7 +325,7 @@ impl From<clean::GenericBound> for GenericBound {\n                     modifier: modifier.into(),\n                 }\n             }\n-            Outlives(lifetime) => GenericBound::Outlives(lifetime.0),\n+            Outlives(lifetime) => GenericBound::Outlives(lifetime.0.to_string()),\n         }\n     }\n }\n@@ -365,7 +367,7 @@ impl From<clean::Type> for Type {\n                 type_: Box::new((*type_).into()),\n             },\n             BorrowedRef { lifetime, mutability, type_ } => Type::BorrowedRef {\n-                lifetime: lifetime.map(|l| l.0),\n+                lifetime: lifetime.map(|l| l.0.to_string()),\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into()),\n             },\n@@ -503,7 +505,7 @@ impl From<clean::Import> for Import {\n         match import.kind {\n             Simple(s) => Import {\n                 span: import.source.path.whole_name(),\n-                name: s,\n+                name: s.to_string(),\n                 id: import.source.did.map(Into::into),\n                 glob: false,\n             },\n@@ -519,7 +521,10 @@ impl From<clean::Import> for Import {\n \n impl From<clean::ProcMacro> for ProcMacro {\n     fn from(mac: clean::ProcMacro) -> Self {\n-        ProcMacro { kind: mac.kind.into(), helpers: mac.helpers }\n+        ProcMacro {\n+            kind: mac.kind.into(),\n+            helpers: mac.helpers.iter().map(|x| x.to_string()).collect(),\n+        }\n     }\n }\n "}]}