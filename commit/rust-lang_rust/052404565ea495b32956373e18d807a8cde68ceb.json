{"sha": "052404565ea495b32956373e18d807a8cde68ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MjQwNDU2NWVhNDk1YjMyOTU2MzczZTE4ZDgwN2E4Y2RlNjhjZWI=", "commit": {"author": {"name": "Arnaud", "email": "arnaud.golfouse@free.fr", "date": "2021-01-04T19:34:23Z"}, "committer": {"name": "Arnaud", "email": "arnaud.golfouse@free.fr", "date": "2021-01-04T19:34:23Z"}, "message": "Remove `RetType`", "tree": {"sha": "50b3c859427879b6aa025f25491bf44c237e08a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b3c859427879b6aa025f25491bf44c237e08a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052404565ea495b32956373e18d807a8cde68ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052404565ea495b32956373e18d807a8cde68ceb", "html_url": "https://github.com/rust-lang/rust/commit/052404565ea495b32956373e18d807a8cde68ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052404565ea495b32956373e18d807a8cde68ceb/comments", "author": null, "committer": null, "parents": [{"sha": "2f0969b873b1d28a578e1f61862f4a369ec9471f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0969b873b1d28a578e1f61862f4a369ec9471f", "html_url": "https://github.com/rust-lang/rust/commit/2f0969b873b1d28a578e1f61862f4a369ec9471f"}], "stats": {"total": 21, "additions": 3, "deletions": 18}, "files": [{"sha": "1a4aa78fb066a51000c569d542e9389198964ca6", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/052404565ea495b32956373e18d807a8cde68ceb/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052404565ea495b32956373e18d807a8cde68ceb/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=052404565ea495b32956373e18d807a8cde68ceb", "patch": "@@ -744,19 +744,15 @@ impl Function {\n     }\n \n     /// Get this function's return type\n-    ///\n-    /// The returned type can be converted to a [`Type`] via its `ty`\n-    /// method.\n-    pub fn ret_type(self, db: &dyn HirDatabase) -> RetType {\n+    pub fn ret_type(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.resolver(db.upcast());\n         let ret_type = &db.function_data(self.id).ret_type;\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n-        let ty = Type {\n+        Type {\n             krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n             ty: InEnvironment { value: Ty::from_hir_ext(&ctx, ret_type).0, environment },\n-        };\n-        RetType { ty }\n+        }\n     }\n \n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n@@ -842,17 +838,6 @@ impl From<Mutability> for Access {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct RetType {\n-    ty: Type,\n-}\n-\n-impl RetType {\n-    pub fn ty(&self) -> &Type {\n-        &self.ty\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct Param {\n     ty: Type,"}]}