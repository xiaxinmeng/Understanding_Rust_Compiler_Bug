{"sha": "37f6564a8498cedd88b230abde3da1e75c6e4fd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjY1NjRhODQ5OGNlZGQ4OGIyMzBhYmRlM2RhMWU3NWM2ZTRmZDE=", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2014-02-27T05:30:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T05:04:03Z"}, "message": "Fix syntax::ext::deriving{,::*} docs formatting.\n\nThe most significant fix is for `syntax::ext::deriving::encodable`,\nwhere one of the blocks of code, auspiciously containing `<S>` (recall\nthat Markdown allows arbitrary HTML to be contained inside it), was not\nformatted as a code block, with a fun but messy effect.", "tree": {"sha": "903041cee8f567a721b4aacb51d974624560bdeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903041cee8f567a721b4aacb51d974624560bdeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f6564a8498cedd88b230abde3da1e75c6e4fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f6564a8498cedd88b230abde3da1e75c6e4fd1", "html_url": "https://github.com/rust-lang/rust/commit/37f6564a8498cedd88b230abde3da1e75c6e4fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f6564a8498cedd88b230abde3da1e75c6e4fd1/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5fbc5048b805c57671582d70083240617b75c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fbc5048b805c57671582d70083240617b75c31", "html_url": "https://github.com/rust-lang/rust/commit/c5fbc5048b805c57671582d70083240617b75c31"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "7aaa66cbfb5de9cbfac5e10dd4e97c33a5271a1b", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=37f6564a8498cedd88b230abde3da1e75c6e4fd1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /*!\n-The compiler code necessary for #[deriving(Decodable)]. See\n+The compiler code necessary for `#[deriving(Decodable)]`. See\n encodable.rs for more.\n */\n "}, {"sha": "ae23013b7ccc67550a7b3e01c2710b4dae59cec8", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=37f6564a8498cedd88b230abde3da1e75c6e4fd1", "patch": "@@ -10,20 +10,20 @@\n \n /*!\n \n-The compiler code necessary to implement the #[deriving(Encodable)]\n-(and Decodable, in decodable.rs) extension.  The idea here is that\n-type-defining items may be tagged with #[deriving(Encodable,\n-Decodable)].\n+The compiler code necessary to implement the `#[deriving(Encodable)]`\n+(and `Decodable`, in decodable.rs) extension.  The idea here is that\n+type-defining items may be tagged with `#[deriving(Encodable, Decodable)]`.\n \n For example, a type like:\n \n ```ignore\n-    #[deriving(Encodable, Decodable)]\n-    struct Node {id: uint}\n+#[deriving(Encodable, Decodable)]\n+struct Node { id: uint }\n ```\n \n would generate two implementations like:\n \n+```ignore\n impl<S:serialize::Encoder> Encodable<S> for Node {\n     fn encode(&self, s: &S) {\n         s.emit_struct(\"Node\", 1, || {\n@@ -41,13 +41,14 @@ impl<D:Decoder> Decodable for node_id {\n         })\n     }\n }\n+```\n \n Other interesting scenarios are whe the item has type parameters or\n references other non-built-in types.  A type definition like:\n \n ```ignore\n-    #[deriving(Encodable, Decodable)]\n-    struct spanned<T> {node: T, span: Span}\n+#[deriving(Encodable, Decodable)]\n+struct spanned<T> { node: T, span: Span }\n ```\n \n would yield functions like:"}, {"sha": "24d4efb1b0e68bcc57f7dd44c70107564ab6ea6b", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=37f6564a8498cedd88b230abde3da1e75c6e4fd1", "patch": "@@ -16,6 +16,7 @@ access to the fields of the 4 different sorts of structs and enum\n variants, as well as creating the method and impl ast instances.\n \n Supported features (fairly exhaustive):\n+\n - Methods taking any number of parameters of any type, and returning\n   any type, other than vectors, bottom and closures.\n - Generating `impl`s for types with type parameters and lifetimes\n@@ -59,7 +60,7 @@ associated with. It is only not `None` when the associated field has\n an identifier in the source code. For example, the `x`s in the\n following snippet\n \n-~~~notrust\n+```rust\n struct A { x : int }\n \n struct B(int);\n@@ -68,7 +69,7 @@ enum C {\n     C0(int),\n     C1 { x: int }\n }\n-~~~\n+```\n \n The `int`s in `B` and `C0` don't have an identifier, so the\n `Option<ident>`s would be `None` for them.\n@@ -83,7 +84,7 @@ variants, it is represented as a count of 0.\n \n The following simplified `Eq` is used for in-code examples:\n \n-~~~notrust\n+```rust\n trait Eq {\n     fn eq(&self, other: &Self);\n }\n@@ -92,7 +93,7 @@ impl Eq for int {\n         *self == *other\n     }\n }\n-~~~\n+```\n \n Some examples of the values of `SubstructureFields` follow, using the\n above `Eq`, `A`, `B` and `C`."}, {"sha": "28f039f0818123b4bd7491a0da8b22fe67e88d0e", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f6564a8498cedd88b230abde3da1e75c6e4fd1/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=37f6564a8498cedd88b230abde3da1e75c6e4fd1", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n /*!\n-The compiler code necessary to implement the #[deriving] extensions.\n+The compiler code necessary to implement the `#[deriving]` extensions.\n \n \n-FIXME (#2810)--Hygiene. Search for \"__\" strings (in other files too).\n+FIXME (#2810): hygiene. Search for \"__\" strings (in other files too).\n We also assume \"extra\" is the standard library, and \"std\" is the core\n library.\n "}]}