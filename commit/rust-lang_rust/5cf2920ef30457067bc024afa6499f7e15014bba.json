{"sha": "5cf2920ef30457067bc024afa6499f7e15014bba", "node_id": "C_kwDOAAsO6NoAKDVjZjI5MjBlZjMwNDU3MDY3YmMwMjRhZmE2NDk5ZjdlMTUwMTRiYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T04:46:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T04:46:01Z"}, "message": "Auto merge of #94468 - Amanieu:global_asm_sym, r=nagisa\n\nImplement sym operands for global_asm!\n\nTracking issue: #93333\n\nThis PR is pretty much a complete rewrite of `sym` operand support for inline assembly so that the same implementation can be shared by `asm!` and `global_asm!`. The main changes are:\n- At the AST level, `sym` is represented as a special `InlineAsmSym` AST node containing a path instead of an `Expr`.\n- At the HIR level, `sym` is split into `SymStatic` and `SymFn` depending on whether the path resolves to a static during AST lowering (defaults to `SynFn` if `get_early_res` fails).\n  - `SymFn` is just an `AnonConst`. It runs through typeck and we just collect the resulting type at the end. An error is emitted if the type is not a `FnDef`.\n  - `SymStatic` directly holds a path and the `DefId` of the `static` that it is pointing to.\n- The representation at the MIR level is mostly unchanged. There is a minor change to THIR where `SymFn` is a constant instead of an expression.\n- At the codegen level we need to apply the target's symbol mangling to the result of `tcx.symbol_name()` depending on the target. This is done by calling the LLVM name mangler, which handles all of the details.\n  - On Mach-O, all symbols have a leading underscore.\n  - On x86 Windows, different mangling is used for cdecl, stdcall, fastcall and vectorcall.\n  - No mangling is needed on other platforms.\n\nr? `@nagisa`\ncc `@eddyb`", "tree": {"sha": "2eef6377efa7f0726d98b633ae883a42a4c465a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eef6377efa7f0726d98b633ae883a42a4c465a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf2920ef30457067bc024afa6499f7e15014bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf2920ef30457067bc024afa6499f7e15014bba", "html_url": "https://github.com/rust-lang/rust/commit/5cf2920ef30457067bc024afa6499f7e15014bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf2920ef30457067bc024afa6499f7e15014bba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5dc413840d0a6706a99d8926fa9b48d110dc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5dc413840d0a6706a99d8926fa9b48d110dc17", "html_url": "https://github.com/rust-lang/rust/commit/3d5dc413840d0a6706a99d8926fa9b48d110dc17"}, {"sha": "0de314b3b3d7ac30edfa2bdd6627683d6a19e694", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de314b3b3d7ac30edfa2bdd6627683d6a19e694", "html_url": "https://github.com/rust-lang/rust/commit/0de314b3b3d7ac30edfa2bdd6627683d6a19e694"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "9ba9642fcc833691fabcd4489b206e6ddb16a37a", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf2920ef30457067bc024afa6499f7e15014bba/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf2920ef30457067bc024afa6499f7e15014bba/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=5cf2920ef30457067bc024afa6499f7e15014bba", "patch": "@@ -169,13 +169,14 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .iter()\n             .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n-                | InlineAsmOperand::InOut { expr, .. }\n-                | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n+                | InlineAsmOperand::InOut { expr, .. } => never_loop_expr(expr, main_loop_id),\n                 InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                     never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n                 },\n-                InlineAsmOperand::Const { .. } => NeverLoopResult::Otherwise,\n+                InlineAsmOperand::Const { .. }\n+                | InlineAsmOperand::SymFn { .. }\n+                | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)"}, {"sha": "a04288e0a413ecd8f6733eda276ba321d1b146d8", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5cf2920ef30457067bc024afa6499f7e15014bba/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf2920ef30457067bc024afa6499f7e15014bba/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=5cf2920ef30457067bc024afa6499f7e15014bba", "patch": "@@ -281,8 +281,9 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             for (op, _op_sp) in asm.operands {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n-                    | hir::InlineAsmOperand::InOut { expr, .. }\n-                    | hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n+                    | hir::InlineAsmOperand::InOut { expr, .. } => {\n+                        print_expr(cx, expr, indent + 1);\n+                    }\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n                             print_expr(cx, expr, indent + 1);\n@@ -294,10 +295,26 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                             print_expr(cx, out_expr, indent + 1);\n                         }\n                     },\n-                    hir::InlineAsmOperand::Const { anon_const } => {\n+                    hir::InlineAsmOperand::Const { anon_const }\n+                    | hir::InlineAsmOperand::SymFn { anon_const } => {\n                         println!(\"{}anon_const:\", ind);\n                         print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n                     },\n+                    hir::InlineAsmOperand::SymStatic { path, .. } => {\n+                        match path {\n+                            hir::QPath::Resolved(ref ty, path) => {\n+                                println!(\"{}Resolved Path, {:?}\", ind, ty);\n+                                println!(\"{}path: {:?}\", ind, path);\n+                            },\n+                            hir::QPath::TypeRelative(ty, seg) => {\n+                                println!(\"{}Relative Path, {:?}\", ind, ty);\n+                                println!(\"{}seg: {:?}\", ind, seg);\n+                            },\n+                            hir::QPath::LangItem(lang_item, ..) => {\n+                                println!(\"{}Lang Item Path, {:?}\", ind, lang_item.name());\n+                            },\n+                        }\n+                    }\n                 }\n             }\n         },"}, {"sha": "c05317f59b716ad60f0fdd92689ee1167fbe914e", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf2920ef30457067bc024afa6499f7e15014bba/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf2920ef30457067bc024afa6499f7e15014bba/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=5cf2920ef30457067bc024afa6499f7e15014bba", "patch": "@@ -675,7 +675,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                             }\n                         },\n                         InlineAsmOperand::Const { anon_const } => self.hash_body(anon_const.body),\n-                        InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                        InlineAsmOperand::SymFn { anon_const } => self.hash_body(anon_const.body),\n+                        InlineAsmOperand::SymStatic { path, def_id: _ } => self.hash_qpath(path),\n                     }\n                 }\n             },"}]}