{"sha": "cda81da6ea4c037ef036067d9cb98e80208ee525", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYTgxZGE2ZWE0YzAzN2VmMDM2MDY3ZDljYjk4ZTgwMjA4ZWU1MjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T19:24:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T21:43:26Z"}, "message": "avoid unsafe code, use upcasting-trait instead (trick by oli)", "tree": {"sha": "a148a1f5e87df535a5db6fe9357b1dc3dbc1e2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a148a1f5e87df535a5db6fe9357b1dc3dbc1e2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda81da6ea4c037ef036067d9cb98e80208ee525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda81da6ea4c037ef036067d9cb98e80208ee525", "html_url": "https://github.com/rust-lang/rust/commit/cda81da6ea4c037ef036067d9cb98e80208ee525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda81da6ea4c037ef036067d9cb98e80208ee525/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82f4a1a9b98ef7f16b25de44150d004c3b1b528a", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f4a1a9b98ef7f16b25de44150d004c3b1b528a", "html_url": "https://github.com/rust-lang/rust/commit/82f4a1a9b98ef7f16b25de44150d004c3b1b528a"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "d00eb7921a04b11837952161aac977fac342ef83", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cda81da6ea4c037ef036067d9cb98e80208ee525/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda81da6ea4c037ef036067d9cb98e80208ee525/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=cda81da6ea4c037ef036067d9cb98e80208ee525", "patch": "@@ -14,10 +14,7 @@ use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::{def_id::DefId, Pos, Span};\n-use std::{\n-    any::{Any, TypeId},\n-    fmt, mem,\n-};\n+use std::{any::Any, fmt, mem};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n@@ -513,32 +510,26 @@ impl fmt::Debug for ResourceExhaustionInfo {\n     }\n }\n \n+/// A trait to work around not having trait object upcasting.\n+pub trait AsAny: Any {\n+    fn as_any(&self) -> &dyn Any;\n+}\n+\n+impl<T: Any> AsAny for T {\n+    #[inline(always)]\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+}\n+\n /// A trait for machine-specific errors (or other \"machine stop\" conditions).\n-pub trait MachineStopType: Any + fmt::Debug + Send {}\n+pub trait MachineStopType: AsAny + fmt::Debug + Send {}\n impl MachineStopType for String {}\n \n-// Copy-pasted from `any.rs`; there does not seem to be a way to re-use that.\n impl dyn MachineStopType {\n-    pub fn is<T: Any>(&self) -> bool {\n-        // Get `TypeId` of the type this function is instantiated with.\n-        let t = TypeId::of::<T>();\n-\n-        // Get `TypeId` of the type in the trait object (`self`).\n-        let concrete = self.type_id();\n-\n-        // Compare both `TypeId`s on equality.\n-        t == concrete\n-    }\n-\n+    #[inline(always)]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n-        if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n-            // that check for memory safety because `Any` is implemented for all types; no other\n-            // impls can exist as they would conflict with our impl.\n-            unsafe { Some(&*(self as *const dyn MachineStopType as *const T)) }\n-        } else {\n-            None\n-        }\n+        self.as_any().downcast_ref()\n     }\n }\n "}]}