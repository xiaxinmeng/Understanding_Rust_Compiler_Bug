{"sha": "fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzZlNTVkMWQ2MWM1YjBjZWVlNTA0NGJmOTJkNDYyZTU2MTQ1YzU=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-21T17:29:35Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-02-26T16:27:41Z"}, "message": "Attempt to fix false negative", "tree": {"sha": "bd42d22d3ad4e3e7eefc967974ad31a033c42f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd42d22d3ad4e3e7eefc967974ad31a033c42f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJcdWj9AAoJENWyu1zcMzS86XgH/23G8V8hUGif41xhAFe7Qpkx\nILqoXy218wSfdQrLnlUXb25Y82LK3Y0NaRp8M9AIpv6Mv/7OnzJHNLLf6/8DnDVa\nE3KCOmElgntgD812laQqAjzreddpJtL1ukfx1tg0w0Zty3rrm7NrKF+3k/GEelJW\nLiYa+cbUL1TOeI3UHGkH8MFmwiEZ/QqoEmSAlBf4kUPmETzFI/XHsX3GRREEXgU1\naTA6Dj+80PcdOlEww81N0qEx38S2ncZ6lrGviQ0h5+KNBUsJcM8gXPaV+AMqunnL\nz9TMRlGTtIIMcdmMTBkUp8ExzCBBFN4BcEB/OW2P8V6MxMl52XFPV4gSsxkykww=\n=UZJA\n-----END PGP SIGNATURE-----", "payload": "tree bd42d22d3ad4e3e7eefc967974ad31a033c42f3c\nparent 4cf720abbe8ee038b6261fad75a4aba79f606f0d\nauthor Wilco Kusee <wilcokusee@gmail.com> 1548091775 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1551198461 +0100\n\nAttempt to fix false negative\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "html_url": "https://github.com/rust-lang/rust/commit/fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec6e55d1d61c5b0ceee5044bf92d462e56145c5/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf720abbe8ee038b6261fad75a4aba79f606f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf720abbe8ee038b6261fad75a4aba79f606f0d", "html_url": "https://github.com/rust-lang/rust/commit/4cf720abbe8ee038b6261fad75a4aba79f606f0d"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "b6db113eae93c7b801152653c58e9efaccffa3fb", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fec6e55d1d61c5b0ceee5044bf92d462e56145c5/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec6e55d1d61c5b0ceee5044bf92d462e56145c5/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "patch": "@@ -1,15 +1,45 @@\n use crate::utils::paths;\n use crate::utils::{is_copy, match_type, snippet, span_lint, span_note_and_lint};\n-use rustc::hir;\n+use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n+use rustc::hir::{self, *};\n+use rustc::hir::def_id::DefId;\n use rustc::lint::LateContext;\n+use rustc_data_structures::fx::FxHashSet;\n \n use super::OPTION_MAP_UNWRAP_OR;\n \n /// lint use of `map().unwrap_or()` for `Option`s\n-pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, map_args: &[hir::Expr], unwrap_args: &[hir::Expr]) {\n+pub(super) fn lint<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &hir::Expr,\n+    map_args: &'tcx [hir::Expr],\n+    unwrap_args: &'tcx [hir::Expr],\n+) {\n     // lint if the caller of `map()` is an `Option`\n-    let unwrap_ty = cx.tables.expr_ty(&unwrap_args[1]);\n-    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) && is_copy(cx, unwrap_ty) {\n+    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n+\n+        if !is_copy(cx, cx.tables.expr_ty(&unwrap_args[1])) {\n+            // Do not lint if the `map` argument uses identifiers in the `map`\n+            // argument that are also used in the `unwrap_or` argument\n+\n+            let mut unwrap_visitor = UnwrapVisitor {\n+                cx,\n+                identifiers: FxHashSet::default(),\n+            };\n+            unwrap_visitor.visit_expr(&unwrap_args[1]);\n+\n+            let mut map_expr_visitor = MapExprVisitor {\n+                cx,\n+                identifiers: unwrap_visitor.identifiers,\n+                found_identifier: false,\n+            };\n+            map_expr_visitor.visit_expr(&map_args[1]);\n+\n+            if map_expr_visitor.found_identifier {\n+                return;\n+            }\n+        }\n+\n         // get snippets for args to map() and unwrap_or()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n         let unwrap_snippet = snippet(cx, unwrap_args[1].span, \"..\");\n@@ -47,3 +77,43 @@ pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, map_args: &[hir::\n         };\n     }\n }\n+\n+struct UnwrapVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    identifiers: FxHashSet<DefId>,\n+}\n+\n+impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n+    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+        if let Some(def_id) = path.def.opt_def_id() {\n+            self.identifiers.insert(def_id);\n+        }\n+        walk_path(self, path);\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.cx.tcx.hir())\n+    }\n+}\n+\n+struct MapExprVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    identifiers: FxHashSet<DefId>,\n+    found_identifier: bool,\n+}\n+\n+impl<'a, 'tcx: 'a> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n+    fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+        if let Some(def_id) = path.def.opt_def_id() {\n+            if self.identifiers.contains(&def_id) {\n+                self.found_identifier = true;\n+                return;\n+            }\n+        }\n+        walk_path(self, path);\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::All(&self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "b93cd6150d784044b91731eb966c0494739221a8", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec6e55d1d61c5b0ceee5044bf92d462e56145c5/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec6e55d1d61c5b0ceee5044bf92d462e56145c5/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "patch": "@@ -179,8 +179,12 @@ fn option_methods() {\n     // macro case\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or(0); // should not lint\n \n+    // Should not lint if not copyable\n     let id: String = \"identifier\".to_string();\n-    let _ = Some(\"prefix\").map(|p| format!(\"{}.{}\", p, id)).unwrap_or(id); // Should not lint if not copyable\n+    let _ = Some(\"prefix\").map(|p| format!(\"{}.{}\", p, id)).unwrap_or(id);\n+    // ...but DO lint if the `unwrap_or` argument is not used in the `map`\n+    let id: String = \"identifier\".to_string();\n+    let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n \n     // Check OPTION_MAP_UNWRAP_OR_ELSE\n     // single line case"}]}