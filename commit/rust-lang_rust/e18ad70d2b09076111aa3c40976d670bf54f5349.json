{"sha": "e18ad70d2b09076111aa3c40976d670bf54f5349", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOGFkNzBkMmIwOTA3NjExMWFhM2M0MDk3NmQ2NzBiZjU0ZjUzNDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-03T23:07:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-10T20:17:20Z"}, "message": "diagnostics: Describe crate root modules in `DefKind::Mod` as \"crate\"", "tree": {"sha": "92a54d931a9b67449e1de7bd4215b4c8cb6adfea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a54d931a9b67449e1de7bd4215b4c8cb6adfea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e18ad70d2b09076111aa3c40976d670bf54f5349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e18ad70d2b09076111aa3c40976d670bf54f5349", "html_url": "https://github.com/rust-lang/rust/commit/e18ad70d2b09076111aa3c40976d670bf54f5349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e18ad70d2b09076111aa3c40976d670bf54f5349/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9", "html_url": "https://github.com/rust-lang/rust/commit/be3fb0cd2cc408eb4cc9c1d71f9cedb2c974dcd9"}], "stats": {"total": 135, "additions": 62, "deletions": 73}, "files": [{"sha": "f83fbcdc263b04fab7936bc6b8ca141514fffbce", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,4 +1,4 @@\n-use crate::hir::def_id::DefId;\n+use crate::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::util::nodemap::DefIdMap;\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n@@ -81,9 +81,11 @@ pub enum DefKind {\n }\n \n impl DefKind {\n-    pub fn descr(self) -> &'static str {\n+    pub fn descr(self, def_id: DefId) -> &'static str {\n         match self {\n             DefKind::Fn => \"function\",\n+            DefKind::Mod if def_id.index == CRATE_DEF_INDEX && def_id.krate != LOCAL_CRATE =>\n+                \"crate\",\n             DefKind::Mod => \"module\",\n             DefKind::Static => \"static\",\n             DefKind::Enum => \"enum\",\n@@ -366,7 +368,7 @@ impl<Id> Res<Id> {\n     /// A human readable name for the res kind (\"function\", \"module\", etc.).\n     pub fn descr(&self) -> &'static str {\n         match *self {\n-            Res::Def(kind, _) => kind.descr(),\n+            Res::Def(kind, def_id) => kind.descr(def_id),\n             Res::SelfCtor(..) => \"self constructor\",\n             Res::PrimTy(..) => \"builtin type\",\n             Res::Local(..) => \"local variable\","}, {"sha": "673762ee4c6f78d2cdbe00504b559f5ce11b2b32", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1259,7 +1259,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     hir::QPath::Resolved(_, ref path) => path.to_string(),\n                     hir::QPath::TypeRelative(_, ref segment) => segment.ident.to_string(),\n                 };\n-                let msg = format!(\"{} `{}` is private\", kind.descr(), name);\n+                let msg = format!(\"{} `{}` is private\", kind.descr(def_id), name);\n                 self.tcx.sess.span_err(span, &msg);\n                 return;\n             }"}, {"sha": "9e7e56f4a3a261d59be53a6e21ca9bbec0bf3249", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -319,11 +319,12 @@ impl<'a> Resolver<'a> {\n                 err\n             }\n             ResolutionError::BindingShadowsSomethingUnacceptable(what_binding, name, binding) => {\n-                let shadows_what = binding.descr();\n+                let res = binding.res();\n+                let shadows_what = res.descr();\n                 let mut err = struct_span_err!(self.session, span, E0530, \"{}s cannot shadow {}s\",\n                                             what_binding, shadows_what);\n                 err.span_label(span, format!(\"cannot be named the same as {} {}\",\n-                                            binding.article(), shadows_what));\n+                                            res.article(), shadows_what));\n                 let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n                 let msg = format!(\"the {} `{}` is {} here\", shadows_what, name, participle);\n                 err.span_label(binding.span, msg);"}, {"sha": "68f9c1684d6fbc2d78015c6879b1de6424c182d6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -88,10 +88,9 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 let mod_prefix = match self.resolve_path(\n                     mod_path, Some(TypeNS), false, span, CrateLint::No\n                 ) {\n-                    PathResult::Module(ModuleOrUniformRoot::Module(module)) =>\n-                        module.def_kind(),\n+                    PathResult::Module(ModuleOrUniformRoot::Module(module)) => module.res(),\n                     _ => None,\n-                }.map_or(String::new(), |kind| format!(\"{} \", kind.descr()));\n+                }.map_or(String::new(), |res| format!(\"{} \", res.descr()));\n                 (mod_prefix, format!(\"`{}`\", Segment::names_to_string(mod_path)))\n             };\n             (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),"}, {"sha": "9fc3e11505c29c2de066a36ba4424dbbaa1310cb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -494,13 +494,6 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn def_kind(&self) -> Option<DefKind> {\n-        match self.kind {\n-            ModuleKind::Def(kind, ..) => Some(kind),\n-            _ => None,\n-        }\n-    }\n-\n     fn def_id(&self) -> Option<DefId> {\n         match self.kind {\n             ModuleKind::Def(_, def_id, _) => Some(def_id),\n@@ -745,14 +738,6 @@ impl<'a> NameBinding<'a> {\n         self.res().macro_kind()\n     }\n \n-    fn descr(&self) -> &'static str {\n-        if self.is_extern_crate() { \"extern crate\" } else { self.res().descr() }\n-    }\n-\n-    fn article(&self) -> &'static str {\n-        if self.is_extern_crate() { \"an\" } else { self.res().article() }\n-    }\n-\n     // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`\n     // at some expansion round `max(invoc, binding)` when they both emerged from macros.\n     // Then this function returns `true` if `self` may emerge from a macro *after* that\n@@ -2200,6 +2185,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {\n+        let res = b.res();\n         if b.span.is_dummy() {\n             let add_built_in = match b.res() {\n                 // These already contain the \"built-in\" prefix or look bad with it.\n@@ -2217,13 +2203,13 @@ impl<'a> Resolver<'a> {\n                 (\"\", \"\")\n             };\n \n-            let article = if built_in.is_empty() { b.article() } else { \"a\" };\n+            let article = if built_in.is_empty() { res.article() } else { \"a\" };\n             format!(\"{a}{built_in} {thing}{from}\",\n-                    a = article, thing = b.descr(), built_in = built_in, from = from)\n+                    a = article, thing = res.descr(), built_in = built_in, from = from)\n         } else {\n             let introduced = if b.is_import() { \"imported\" } else { \"defined\" };\n             format!(\"the {thing} {introduced} here\",\n-                    thing = b.descr(), introduced = introduced)\n+                    thing = res.descr(), introduced = introduced)\n         }\n     }\n \n@@ -2246,6 +2232,7 @@ impl<'a> Resolver<'a> {\n             let note_msg = format!(\"`{ident}` could{also} refer to {what}\",\n                                    ident = ident, also = also, what = what);\n \n+            let thing = b.res().descr();\n             let mut help_msgs = Vec::new();\n             if b.is_glob_import() && (kind == AmbiguityKind::GlobVsGlob ||\n                                       kind == AmbiguityKind::GlobVsExpanded ||\n@@ -2257,18 +2244,18 @@ impl<'a> Resolver<'a> {\n             if b.is_extern_crate() && ident.span.rust_2018() {\n                 help_msgs.push(format!(\n                     \"use `::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident, thing = b.descr(),\n+                    ident = ident, thing = thing,\n                 ))\n             }\n             if misc == AmbiguityErrorMisc::SuggestCrate {\n                 help_msgs.push(format!(\n                     \"use `crate::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident, thing = b.descr(),\n+                    ident = ident, thing = thing,\n                 ))\n             } else if misc == AmbiguityErrorMisc::SuggestSelf {\n                 help_msgs.push(format!(\n                     \"use `self::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident, thing = b.descr(),\n+                    ident = ident, thing = thing,\n                 ))\n             }\n \n@@ -2310,7 +2297,7 @@ impl<'a> Resolver<'a> {\n                     ident.span,\n                     E0603,\n                     \"{} `{}` is private\",\n-                    binding.descr(),\n+                    binding.res().descr(),\n                     ident.name,\n                 );\n                 // FIXME: use the ctor's `def_id` to check wether any of the fields is not visible"}, {"sha": "922afbae2a4a4c10da3d0d72d05ec9c68cb6b11c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1707,7 +1707,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let kind = DefKind::AssocTy;\n         if !item.vis.is_accessible_from(def_scope, tcx) {\n-            let msg = format!(\"{} `{}` is private\", kind.descr(), assoc_ident);\n+            let msg = format!(\"{} `{}` is private\", kind.descr(item.def_id), assoc_ident);\n             tcx.sess.span_err(span, &msg);\n         }\n         tcx.check_stability(item.def_id, Some(hir_ref_id), span);\n@@ -1722,7 +1722,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             let mut could_refer_to = |kind: DefKind, def_id, also| {\n                 let note_msg = format!(\"`{}` could{} refer to {} defined here\",\n-                                       assoc_ident, also, kind.descr());\n+                                       assoc_ident, also, kind.descr(def_id));\n                 err.span_note(tcx.def_span(def_id), &note_msg);\n             };\n             could_refer_to(DefKind::Variant, variant_def_id, \"\");"}, {"sha": "4a5eba1df883685c687e0f3a044c346d14622198", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -522,7 +522,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &format!(\n                             \"there is {} {} with a similar name\",\n                             def_kind.article(),\n-                            def_kind.descr(),\n+                            def_kind.descr(lev_candidate.def_id),\n                         ),\n                         lev_candidate.ident.to_string(),\n                         Applicability::MaybeIncorrect,\n@@ -543,9 +543,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.emit();\n             }\n \n-            MethodError::PrivateMatch(kind, _, out_of_scope_traits) => {\n+            MethodError::PrivateMatch(kind, def_id, out_of_scope_traits) => {\n                 let mut err = struct_span_err!(self.tcx.sess, span, E0624,\n-                                               \"{} `{}` is private\", kind.descr(), item_name);\n+                                               \"{} `{}` is private\", kind.descr(def_id), item_name);\n                 self.suggest_valid_traits(&mut err, out_of_scope_traits);\n                 err.emit();\n             }"}, {"sha": "e0a5cd5e98f4b72ddc533640fc691ef0151252a1", "filename": "src/test/ui/extern/extern-crate-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -3,10 +3,10 @@ mod foo {\n }\n \n // Check that private crates can be used from outside their modules, albeit with warnings\n-use foo::core::cell; //~ ERROR extern crate `core` is private\n+use foo::core::cell; //~ ERROR crate `core` is private\n \n fn f() {\n-    foo::core::cell::Cell::new(0); //~ ERROR extern crate `core` is private\n+    foo::core::cell::Cell::new(0); //~ ERROR crate `core` is private\n \n     use foo::*;\n     mod core {} // Check that private crates are not glob imported"}, {"sha": "38c791ab83237e6a5889ec8bf90e528f3938499c", "filename": "src/test/ui/extern/extern-crate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,10 +1,10 @@\n-error[E0603]: extern crate `core` is private\n+error[E0603]: crate `core` is private\n   --> $DIR/extern-crate-visibility.rs:6:10\n    |\n LL | use foo::core::cell;\n    |          ^^^^\n \n-error[E0603]: extern crate `core` is private\n+error[E0603]: crate `core` is private\n   --> $DIR/extern-crate-visibility.rs:9:10\n    |\n LL |     foo::core::cell::Cell::new(0);"}, {"sha": "e8dfd43b6767c282733f438c31e02c0abfb260ba", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -14,7 +14,7 @@ LL |         Vec::panic!();\n    |         ^^^ ambiguous name\n    |\n    = note: `Vec` could refer to a struct from prelude\n-note: `Vec` could also refer to the extern crate imported here\n+note: `Vec` could also refer to the crate imported here\n   --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:5:9\n    |\n LL |         extern crate std as Vec;"}, {"sha": "d84c243f2139c41a143a6cd5537874f6c7e9e9a4", "filename": "src/test/ui/imports/glob-conflict-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -3,6 +3,6 @@\n extern crate glob_conflict;\n \n fn main() {\n-    glob_conflict::f(); //~ ERROR cannot find function `f` in module `glob_conflict`\n+    glob_conflict::f(); //~ ERROR cannot find function `f` in crate `glob_conflict`\n     glob_conflict::glob::f(); //~ ERROR cannot find function `f` in module `glob_conflict::glob`\n }"}, {"sha": "0e3b4222fe44ff13842e3308cd63ff591ff486b5", "filename": "src/test/ui/imports/glob-conflict-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,4 +1,4 @@\n-error[E0425]: cannot find function `f` in module `glob_conflict`\n+error[E0425]: cannot find function `f` in crate `glob_conflict`\n   --> $DIR/glob-conflict-cross-crate.rs:6:20\n    |\n LL |     glob_conflict::f();"}, {"sha": "d78cc5230367d4932676fe4f27d1e06723eeff4a", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -10,8 +10,8 @@ error[E0659]: `issue_56125` is ambiguous (name vs any other name during import r\n LL |     use issue_56125::last_segment::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n-   = note: `issue_56125` could refer to an extern crate passed with `--extern`\n-   = help: use `::issue_56125` to refer to this extern crate unambiguously\n+   = note: `issue_56125` could refer to a crate passed with `--extern`\n+   = help: use `::issue_56125` to refer to this crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n   --> $DIR/issue-56125.rs:6:9\n    |\n@@ -25,8 +25,8 @@ error[E0659]: `issue_56125` is ambiguous (name vs any other name during import r\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n-   = note: `issue_56125` could refer to an extern crate passed with `--extern`\n-   = help: use `::issue_56125` to refer to this extern crate unambiguously\n+   = note: `issue_56125` could refer to a crate passed with `--extern`\n+   = help: use `::issue_56125` to refer to this crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n   --> $DIR/issue-56125.rs:11:9\n    |\n@@ -40,8 +40,8 @@ error[E0659]: `issue_56125` is ambiguous (name vs any other name during import r\n LL |     use issue_56125::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n-   = note: `issue_56125` could refer to an extern crate passed with `--extern`\n-   = help: use `::issue_56125` to refer to this extern crate unambiguously\n+   = note: `issue_56125` could refer to a crate passed with `--extern`\n+   = help: use `::issue_56125` to refer to this crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n   --> $DIR/issue-56125.rs:18:9\n    |"}, {"sha": "174088e8f6c1197fb5f17a00b1f41cfc585fb928", "filename": "src/test/ui/imports/issue-57539.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fissue-57539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fimports%2Fissue-57539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-57539.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,8 +4,8 @@ error[E0659]: `core` is ambiguous (name vs any other name during import resoluti\n LL |     use core;\n    |         ^^^^ ambiguous name\n    |\n-   = note: `core` could refer to a built-in extern crate\n-   = help: use `::core` to refer to this extern crate unambiguously\n+   = note: `core` could refer to a built-in crate\n+   = help: use `::core` to refer to this crate unambiguously\n note: `core` could also refer to the module imported here\n   --> $DIR/issue-57539.rs:5:9\n    |"}, {"sha": "7bbb8eddb7137317917e78845071ad06c6e0e9ba", "filename": "src/test/ui/macros/macro-path-prelude-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,7 +4,7 @@ error[E0659]: `std` is ambiguous (glob import vs any other name from outer scope\n LL |         std::panic!();\n    |         ^^^ ambiguous name\n    |\n-   = note: `std` could refer to a built-in extern crate\n+   = note: `std` could refer to a built-in crate\n note: `std` could also refer to the module imported here\n   --> $DIR/macro-path-prelude-shadowing.rs:27:9\n    |"}, {"sha": "939271832e3df82409f06542f61524184324117a", "filename": "src/test/ui/no-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-link.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,5 +4,5 @@\n extern crate empty_struct;\n \n fn main() {\n-    empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in module `empty_struct`\n+    empty_struct::XEmpty1; //~ ERROR cannot find value `XEmpty1` in crate `empty_struct`\n }"}, {"sha": "66a74ff65601b20ad552ea2c38327c25559b98b6", "filename": "src/test/ui/no-link.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fno-link.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fno-link.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-link.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,4 +1,4 @@\n-error[E0425]: cannot find value `XEmpty1` in module `empty_struct`\n+error[E0425]: cannot find value `XEmpty1` in crate `empty_struct`\n   --> $DIR/no-link.rs:7:19\n    |\n LL |     empty_struct::XEmpty1;"}, {"sha": "0e17f22511818c2af9ab0d62615fc829a895d370", "filename": "src/test/ui/recursion/recursive-reexports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frecursion%2Frecursive-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frecursion%2Frecursive-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-reexports.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -2,6 +2,6 @@\n \n extern crate recursive_reexports;\n \n-fn f() -> recursive_reexports::S {} //~ ERROR cannot find type `S` in module `recursive_reexports`\n+fn f() -> recursive_reexports::S {} //~ ERROR cannot find type `S` in crate `recursive_reexports`\n \n fn main() {}"}, {"sha": "f39d0a0d5e6f3d8040e4cdc56dbab74e5f735c5b", "filename": "src/test/ui/recursion/recursive-reexports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frecursion%2Frecursive-reexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frecursion%2Frecursive-reexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-reexports.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,4 +1,4 @@\n-error[E0412]: cannot find type `S` in module `recursive_reexports`\n+error[E0412]: cannot find type `S` in crate `recursive_reexports`\n   --> $DIR/recursive-reexports.rs:5:32\n    |\n LL | fn f() -> recursive_reexports::S {}"}, {"sha": "d2209236a42e758d493da72ff417f60d2a471c37", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,4 +1,4 @@\n-error[E0425]: cannot find value `A` in module `namespaced_enums`\n+error[E0425]: cannot find value `A` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:5:31\n    |\n LL |     let _ = namespaced_enums::A;\n@@ -8,7 +8,7 @@ help: possible candidate is found in another module, you can import it into scop\n LL | use namespaced_enums::Foo::A;\n    |\n \n-error[E0425]: cannot find function `B` in module `namespaced_enums`\n+error[E0425]: cannot find function `B` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:7:31\n    |\n LL |     let _ = namespaced_enums::B(10);\n@@ -18,7 +18,7 @@ help: possible candidate is found in another module, you can import it into scop\n LL | use namespaced_enums::Foo::B;\n    |\n \n-error[E0422]: cannot find struct, variant or union type `C` in module `namespaced_enums`\n+error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:9:31\n    |\n LL |     let _ = namespaced_enums::C { a: 10 };"}, {"sha": "72e50d78bc2527e9796f013673e1b6a64633391e", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/single-segment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -6,6 +6,6 @@ use crate; //~ ERROR crate root imports need to be explicitly named: `use crate\n use *; //~ ERROR cannot glob-import all possible crates\n \n fn main() {\n-    let s = ::xcrate; //~ ERROR expected value, found module `xcrate`\n+    let s = ::xcrate; //~ ERROR expected value, found crate `xcrate`\n                       //~^ NOTE not a value\n }"}, {"sha": "253cc1bc57a5fdb6db6082ff371cc827d775916d", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/single-segment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -10,7 +10,7 @@ error: cannot glob-import all possible crates\n LL | use *;\n    |     ^\n \n-error[E0423]: expected value, found module `xcrate`\n+error[E0423]: expected value, found crate `xcrate`\n   --> $DIR/single-segment.rs:9:13\n    |\n LL |     let s = ::xcrate;"}, {"sha": "27b8d0e216e0516dadaafff0cd82cbd066004ee6", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,8 +4,8 @@ error[E0659]: `std` is ambiguous (name vs any other name during import resolutio\n LL |     pub use std::io;\n    |             ^^^ ambiguous name\n    |\n-   = note: `std` could refer to a built-in extern crate\n-   = help: use `::std` to refer to this extern crate unambiguously\n+   = note: `std` could refer to a built-in crate\n+   = help: use `::std` to refer to this crate unambiguously\n note: `std` could also refer to the module defined here\n   --> $DIR/ambiguity-macros-nested.rs:13:13\n    |"}, {"sha": "44b34d2682d8a1ccd8f29783776f8e8c12da0a7e", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,8 +4,8 @@ error[E0659]: `std` is ambiguous (name vs any other name during import resolutio\n LL | use std::io;\n    |     ^^^ ambiguous name\n    |\n-   = note: `std` could refer to a built-in extern crate\n-   = help: use `::std` to refer to this extern crate unambiguously\n+   = note: `std` could refer to a built-in crate\n+   = help: use `::std` to refer to this crate unambiguously\n note: `std` could also refer to the module defined here\n   --> $DIR/ambiguity-macros.rs:12:9\n    |"}, {"sha": "4129930bdb0fdaa233475080f104b7a8d77e86ac", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,8 +4,8 @@ error[E0659]: `std` is ambiguous (name vs any other name during import resolutio\n LL |     pub use std::io;\n    |             ^^^ ambiguous name\n    |\n-   = note: `std` could refer to a built-in extern crate\n-   = help: use `::std` to refer to this extern crate unambiguously\n+   = note: `std` could refer to a built-in crate\n+   = help: use `::std` to refer to this crate unambiguously\n note: `std` could also refer to the module defined here\n   --> $DIR/ambiguity-nested.rs:11:5\n    |"}, {"sha": "e123b323e7c574fad59b6a07c4cc34787be779fd", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,8 +4,8 @@ error[E0659]: `std` is ambiguous (name vs any other name during import resolutio\n LL | use std::io;\n    |     ^^^ ambiguous name\n    |\n-   = note: `std` could refer to a built-in extern crate\n-   = help: use `::std` to refer to this extern crate unambiguously\n+   = note: `std` could refer to a built-in crate\n+   = help: use `::std` to refer to this crate unambiguously\n note: `std` could also refer to the module defined here\n   --> $DIR/ambiguity.rs:8:1\n    |"}, {"sha": "e39840d34d9f70c7651e9bf470b54fdb2c0f308a", "filename": "src/test/ui/rust-2018/uniform-paths/issue-56596.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-56596.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,8 +4,8 @@ error[E0659]: `issue_56596` is ambiguous (name vs any other name during import r\n LL | use issue_56596;\n    |     ^^^^^^^^^^^ ambiguous name\n    |\n-   = note: `issue_56596` could refer to an extern crate passed with `--extern`\n-   = help: use `::issue_56596` to refer to this extern crate unambiguously\n+   = note: `issue_56596` could refer to a crate passed with `--extern`\n+   = help: use `::issue_56596` to refer to this crate unambiguously\n note: `issue_56596` could also refer to the module imported here\n   --> $DIR/issue-56596.rs:11:5\n    |"}, {"sha": "e92087e2947de9cc893988d19b72a6b8cb0d031c", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.rs?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     std:io::stdin();\n     //~^ ERROR failed to resolve: use of undeclared type or module `io`\n-    //~| ERROR expected value, found module\n+    //~| ERROR expected value, found crate\n }"}, {"sha": "fd2fedc76407c9cec28e07caefa6a790dccabc83", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e18ad70d2b09076111aa3c40976d670bf54f5349/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.stderr?ref=e18ad70d2b09076111aa3c40976d670bf54f5349", "patch": "@@ -4,7 +4,7 @@ error[E0433]: failed to resolve: use of undeclared type or module `io`\n LL |     std:io::stdin();\n    |         ^^ use of undeclared type or module `io`\n \n-error[E0423]: expected value, found module `std`\n+error[E0423]: expected value, found crate `std`\n   --> $DIR/type-ascription-instead-of-path.rs:2:5\n    |\n LL |     std:io::stdin();"}]}