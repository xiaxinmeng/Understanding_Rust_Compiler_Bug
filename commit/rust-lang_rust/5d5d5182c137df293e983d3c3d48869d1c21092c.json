{"sha": "5d5d5182c137df293e983d3c3d48869d1c21092c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNWQ1MTgyYzEzN2RmMjkzZTk4M2QzYzNkNDg4NjlkMWMyMTA5MmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-10T12:28:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-10T12:28:48Z"}, "message": "internal: print total size of source code in analysis-stats", "tree": {"sha": "a63212a70d7f30c61d457079bc9256083115aae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a63212a70d7f30c61d457079bc9256083115aae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d5d5182c137df293e983d3c3d48869d1c21092c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5d5182c137df293e983d3c3d48869d1c21092c", "html_url": "https://github.com/rust-lang/rust/commit/5d5d5182c137df293e983d3c3d48869d1c21092c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d5d5182c137df293e983d3c3d48869d1c21092c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf5914c458b8a44954448301f357662382b27da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf5914c458b8a44954448301f357662382b27da", "html_url": "https://github.com/rust-lang/rust/commit/9cf5914c458b8a44954448301f357662382b27da"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "3f47c85775af3d9ff1c1484d55f694840db5e2d9", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d5d5182c137df293e983d3c3d48869d1c21092c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5d5182c137df293e983d3c3d48869d1c21092c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=5d5d5182c137df293e983d3c3d48869d1c21092c", "patch": "@@ -14,16 +14,17 @@ use hir_def::{body::BodySourceMap, expr::ExprId, FunctionId};\n use hir_ty::{TyExt, TypeWalk};\n use ide::{Analysis, AnalysisHost, LineCol, RootDatabase};\n use ide_db::base_db::{\n-    salsa::{self, ParallelDatabase},\n-    SourceDatabaseExt,\n+    salsa::{self, debug::DebugQueryTable, ParallelDatabase},\n+    SourceDatabase, SourceDatabaseExt,\n };\n use itertools::Itertools;\n use oorandom::Rand32;\n+use profile::{Bytes, StopWatch};\n use project_model::CargoConfig;\n use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n-use syntax::AstNode;\n+use syntax::{AstNode, SyntaxNode};\n use vfs::{Vfs, VfsPath};\n \n use crate::cli::{\n@@ -33,7 +34,6 @@ use crate::cli::{\n     progress_report::ProgressReport,\n     report_metric, Result, Verbosity,\n };\n-use profile::StopWatch;\n \n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);\n@@ -137,6 +137,21 @@ impl flags::AnalysisStats {\n             eprintln!(\"{}\", profile::countme::get_all());\n         }\n \n+        if self.source_stats {\n+            let mut total_file_size = Bytes::default();\n+            for e in ide_db::base_db::ParseQuery.in_db(db).entries::<Vec<_>>() {\n+                total_file_size += syntax_len(db.parse(e.key).syntax_node())\n+            }\n+\n+            let mut total_macro_file_size = Bytes::default();\n+            for e in hir::db::ParseMacroExpansionQuery.in_db(db).entries::<Vec<_>>() {\n+                if let Some((val, _)) = db.parse_macro_expansion(e.key).value {\n+                    total_macro_file_size += syntax_len(val.syntax_node())\n+                }\n+            }\n+            eprintln!(\"source files: {}, macro files: {}\", total_file_size, total_macro_file_size,);\n+        }\n+\n         if self.memory_usage && verbosity.is_verbose() {\n             print_memory_usage(host, vfs);\n         }\n@@ -361,3 +376,9 @@ fn shuffle<T>(rng: &mut Rand32, slice: &mut [T]) {\n fn percentage(n: u64, total: u64) -> u64 {\n     (n * 100).checked_div(total).unwrap_or(100)\n }\n+\n+fn syntax_len(node: SyntaxNode) -> usize {\n+    // Macro expanded code doesn't contain whitespace, so erase *all* whitespace\n+    // to make macro and non-macro code comparable.\n+    node.to_string().replace(|it: char| it.is_ascii_whitespace(), \"\").len()\n+}"}, {"sha": "e2e250143c0a065cc534df51c46f92ca2e3ae7ba", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d5d5182c137df293e983d3c3d48869d1c21092c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5d5182c137df293e983d3c3d48869d1c21092c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=5d5d5182c137df293e983d3c3d48869d1c21092c", "patch": "@@ -7,7 +7,7 @@ use ide_ssr::{SsrPattern, SsrRule};\n use crate::cli::Verbosity;\n \n xflags::xflags! {\n-    src \"./src/bin/flags.rs\"\n+    src \"./src/cli/flags.rs\"\n \n     /// LSP server for the Rust programming language.\n     cmd rust-analyzer {\n@@ -60,6 +60,8 @@ xflags::xflags! {\n             optional --parallel\n             /// Collect memory usage statistics.\n             optional --memory-usage\n+            /// Print the total length of all source and macro files (whitespace is not counted).\n+            optional --source-stats\n \n             /// Only analyze items matching this path.\n             optional -o, --only path: String\n@@ -156,6 +158,7 @@ pub struct AnalysisStats {\n     pub randomize: bool,\n     pub parallel: bool,\n     pub memory_usage: bool,\n+    pub source_stats: bool,\n     pub only: Option<String>,\n     pub with_deps: bool,\n     pub no_sysroot: bool,\n@@ -190,9 +193,15 @@ pub struct ProcMacro;\n impl RustAnalyzer {\n     pub const HELP: &'static str = Self::HELP_;\n \n+    #[allow(dead_code)]\n     pub fn from_env() -> xflags::Result<Self> {\n         Self::from_env_()\n     }\n+\n+    #[allow(dead_code)]\n+    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {\n+        Self::from_vec_(args)\n+    }\n }\n // generated end\n "}]}