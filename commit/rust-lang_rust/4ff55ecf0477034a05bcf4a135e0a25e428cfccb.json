{"sha": "4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZjU1ZWNmMDQ3NzAzNGEwNWJjZjRhMTM1ZTBhMjVlNDI4Y2ZjY2I=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-16T20:54:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-16T20:54:52Z"}, "message": "Rollup merge of #86104 - FabianWolff:issue-86085, r=davidtwco\n\nFix span calculation in format strings\n\nThis pull request fixes #86085. The ICE described there is due to an error in the span calculation inside format strings, if the format string is the result of a macro invocation:\n```rust\nfn main() {\n    format!(concat!(\"abc}\"));\n}\n```\ncurrently produces:\n```\nerror: invalid format string: unmatched `}` found\n --> test.rs:2:17\n  |\n2 |     format!(concat!(\"abc}\"));\n  |                 ^ unmatched `}` in format string\n```\nwhich is obviously incorrect. This happens because the span of the entire `concat!()` is combined with the _relative_ location of the unmatched `` `}` `` in the _result_ of the macro invocation (i.e. 4).\n\nIn #86085, this has led to a span that starts or ends in the middle of a multibyte character, but the root cause was the same. This pull request fixes the problem.", "tree": {"sha": "8dcce4723ea438371afb354fc4fce49aacaec858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dcce4723ea438371afb354fc4fce49aacaec858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgymUdCRBK7hj4Ov3rIwAAYFEIAKMB98D+TON3tueeykzxFdRI\n3DEWOvkKr+vGfnPL+zRzu2DKv5m1pmhdvZPxRF5aD7ZRcE0rqLNGosgdBPw/16Nv\n2pyqekkzrDCTGiu6zFVcKA/on7WYExOEcmFAE1O2JwWLE3NitGaiLTHJiiy2H6eZ\nAUfpVPN0232iIGieQOszN/gTRg50mNXXMEEr1no3k7yS16Zh5ZWa7A5Nfn0ShHGR\nKAOt76DE0AgXwUH4+LbsHpC8dhUR3vp29SuFoOkN6oSZqbPZpuvvWvP5k4BiXU8T\nksOhzliDZUUboxpQf8cDmsgfaIUTJSm2UZtmwbXJdhCrUGFSpxfW/yC/z6t0tWA=\n=IK89\n-----END PGP SIGNATURE-----\n", "payload": "tree 8dcce4723ea438371afb354fc4fce49aacaec858\nparent 7030efbb77b15684460f98937f13716d0f2bdea1\nparent 14f3ec2815e9edae3057641ab8f1371cb7cef094\nauthor Yuki Okushi <jtitor@2k36.org> 1623876892 +0900\ncommitter GitHub <noreply@github.com> 1623876892 +0900\n\nRollup merge of #86104 - FabianWolff:issue-86085, r=davidtwco\n\nFix span calculation in format strings\n\nThis pull request fixes #86085. The ICE described there is due to an error in the span calculation inside format strings, if the format string is the result of a macro invocation:\n```rust\nfn main() {\n    format!(concat!(\"abc}\"));\n}\n```\ncurrently produces:\n```\nerror: invalid format string: unmatched `}` found\n --> test.rs:2:17\n  |\n2 |     format!(concat!(\"abc}\"));\n  |                 ^ unmatched `}` in format string\n```\nwhich is obviously incorrect. This happens because the span of the entire `concat!()` is combined with the _relative_ location of the unmatched `` `}` `` in the _result_ of the macro invocation (i.e. 4).\n\nIn #86085, this has led to a span that starts or ends in the middle of a multibyte character, but the root cause was the same. This pull request fixes the problem.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "html_url": "https://github.com/rust-lang/rust/commit/4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7030efbb77b15684460f98937f13716d0f2bdea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7030efbb77b15684460f98937f13716d0f2bdea1", "html_url": "https://github.com/rust-lang/rust/commit/7030efbb77b15684460f98937f13716d0f2bdea1"}, {"sha": "14f3ec2815e9edae3057641ab8f1371cb7cef094", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f3ec2815e9edae3057641ab8f1371cb7cef094", "html_url": "https://github.com/rust-lang/rust/commit/14f3ec2815e9edae3057641ab8f1371cb7cef094"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "00f2f37146db68193c08e48fbb5190fe96bed99d", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "patch": "@@ -939,6 +939,7 @@ pub fn expand_preparsed_format_args(\n \n     let msg = \"format argument must be a string literal\";\n     let fmt_sp = efmt.span;\n+    let efmt_kind_is_lit: bool = matches!(efmt.kind, ast::ExprKind::Lit(_));\n     let (fmt_str, fmt_style, fmt_span) = match expr_to_spanned_string(ecx, efmt, msg) {\n         Ok(mut fmt) if append_newline => {\n             fmt.0 = Symbol::intern(&format!(\"{}\\n\", fmt.0));\n@@ -989,7 +990,19 @@ pub fn expand_preparsed_format_args(\n \n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n-        let sp = fmt_span.from_inner(err.span);\n+        let sp = if efmt_kind_is_lit {\n+            fmt_span.from_inner(err.span)\n+        } else {\n+            // The format string could be another macro invocation, e.g.:\n+            //     format!(concat!(\"abc\", \"{}\"), 4);\n+            // However, `err.span` is an inner span relative to the *result* of\n+            // the macro invocation, which is why we would get a nonsensical\n+            // result calling `fmt_span.from_inner(err.span)` as above, and\n+            // might even end up inside a multibyte character (issue #86085).\n+            // Therefore, we conservatively report the error for the entire\n+            // argument span here.\n+            fmt_span\n+        };\n         let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\", err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {"}, {"sha": "ce92df0ad92bd7cf43cff7f154bf3c816702f858", "filename": "src/test/ui/fmt/format-concat-span.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.rs?ref=4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "patch": "@@ -0,0 +1,15 @@\n+// If the format string is another macro invocation, rustc would previously\n+// compute nonsensical spans, such as:\n+//\n+//   error: invalid format string: unmatched `}` found\n+//    --> test.rs:2:17\n+//     |\n+//   2 |     format!(concat!(\"abc}\"));\n+//     |                 ^ unmatched `}` in format string\n+//\n+// This test checks that this behavior has been fixed.\n+\n+fn main() {\n+    format!(concat!(\"abc}\"));\n+    //~^ ERROR: invalid format string: unmatched `}` found\n+}"}, {"sha": "da46f40abcb97ffde2de181d4aca65fa1771b28e", "filename": "src/test/ui/fmt/format-concat-span.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr?ref=4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "patch": "@@ -0,0 +1,11 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-concat-span.rs:13:13\n+   |\n+LL |     format!(concat!(\"abc}\"));\n+   |             ^^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "63d42b76969cd73ec5ee4ef81b8e1aef8331202d", "filename": "src/test/ui/fmt/issue-86085.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.rs?ref=4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "patch": "@@ -0,0 +1,6 @@\n+// Tests for an ICE with the fuzzed input below.\n+\n+fn main ( ) {\n+format ! ( concat ! ( r#\"lJ\ud800\udfff\u00c6\ufffd.\ud800\udfff\ufffd\"# , \"r} {}\" )     ) ;\n+//~^ ERROR: invalid format string: unmatched `}` found\n+}"}, {"sha": "ee7d8a5cc237a833b2bdf52d76a6ecf69f2e62d7", "filename": "src/test/ui/fmt/issue-86085.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff55ecf0477034a05bcf4a135e0a25e428cfccb/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-86085.stderr?ref=4ff55ecf0477034a05bcf4a135e0a25e428cfccb", "patch": "@@ -0,0 +1,11 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/issue-86085.rs:4:12\n+   |\n+LL | format ! ( concat ! ( r#\"lJ\ud800\udfff\u00c6\ufffd.\ud800\udfff\ufffd\"# , \"r} {}\" )     ) ;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}