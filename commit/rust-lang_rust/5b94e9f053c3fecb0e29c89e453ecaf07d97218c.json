{"sha": "5b94e9f053c3fecb0e29c89e453ecaf07d97218c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTRlOWYwNTNjM2ZlY2IwZTI5Yzg5ZTQ1M2VjYWYwN2Q5NzIxOGM=", "commit": {"author": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-01T19:26:49Z"}, "committer": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T02:14:34Z"}, "message": "Split into_slices() to avoid making extra slices\n\nThis splits into_slices() into into_key_slice() and into_val_slice(). While the\nextra calls would get optimized out, this is a useful semantic change since we\ncall keys() while iterating, and we don't want to construct and out-of-bounds\nval() pointer in the process if we happen to be pointing to the shared static\nroot.\n\nThis also paves the way for doing the alignment handling conditional differently\nfor the keys and values.", "tree": {"sha": "7436f0906cfcd11722cc843fee28606463f44aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7436f0906cfcd11722cc843fee28606463f44aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b94e9f053c3fecb0e29c89e453ecaf07d97218c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b94e9f053c3fecb0e29c89e453ecaf07d97218c", "html_url": "https://github.com/rust-lang/rust/commit/5b94e9f053c3fecb0e29c89e453ecaf07d97218c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b94e9f053c3fecb0e29c89e453ecaf07d97218c/comments", "author": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "html_url": "https://github.com/rust-lang/rust/commit/fa62eba92ad9a3d25b200835a5cd3ca48b700d75"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "4dcc4d54eaf011ae3bace31c7bdb2ab732d1aed7", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5b94e9f053c3fecb0e29c89e453ecaf07d97218c/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b94e9f053c3fecb0e29c89e453ecaf07d97218c/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=5b94e9f053c3fecb0e29c89e453ecaf07d97218c", "patch": "@@ -393,11 +393,11 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     pub fn keys(&self) -> &[K] {\n-        self.reborrow().into_slices().0\n+        self.reborrow().into_key_slice()\n     }\n \n-    pub fn vals(&self) -> &[V] {\n-        self.reborrow().into_slices().1\n+    fn vals(&self) -> &[V] {\n+        self.reborrow().into_val_slice()\n     }\n \n     /// Finds the parent of the current node. Returns `Ok(handle)` if the current\n@@ -540,29 +540,37 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     pub fn keys_mut(&mut self) -> &mut [K] {\n-        unsafe { self.reborrow_mut().into_slices_mut().0 }\n+        unsafe { self.reborrow_mut().into_key_slice_mut() }\n     }\n \n     pub fn vals_mut(&mut self) -> &mut [V] {\n-        unsafe { self.reborrow_mut().into_slices_mut().1 }\n+        unsafe { self.reborrow_mut().into_val_slice_mut() }\n     }\n }\n \n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n-    pub fn into_slices(self) -> (&'a [K], &'a [V]) {\n+    fn into_key_slice(self) -> &'a [K] {\n         unsafe {\n-            (\n-                slice::from_raw_parts(\n-                    self.as_leaf().keys.as_ptr(),\n-                    self.len()\n-                ),\n-                slice::from_raw_parts(\n-                    self.as_leaf().vals.as_ptr(),\n-                    self.len()\n-                )\n+            slice::from_raw_parts(\n+                self.as_leaf().keys.as_ptr(),\n+                self.len()\n+            )\n+        }\n+    }\n+\n+    fn into_val_slice(self) -> &'a [V] {\n+        unsafe {\n+            slice::from_raw_parts(\n+                self.as_leaf().vals.as_ptr(),\n+                self.len()\n             )\n         }\n     }\n+\n+    fn into_slices(self) -> (&'a [K], &'a [V]) {\n+        let k = unsafe { ptr::read(&self) };\n+        (k.into_key_slice(), self.into_val_slice())\n+    }\n }\n \n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n@@ -574,20 +582,28 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         }\n     }\n \n-    pub fn into_slices_mut(mut self) -> (&'a mut [K], &'a mut [V]) {\n+    fn into_key_slice_mut(mut self) -> &'a mut [K] {\n         unsafe {\n-            (\n-                slice::from_raw_parts_mut(\n-                    &mut self.as_leaf_mut().keys as *mut [K] as *mut K,\n-                    self.len()\n-                ),\n-                slice::from_raw_parts_mut(\n-                    &mut self.as_leaf_mut().vals as *mut [V] as *mut V,\n-                    self.len()\n-                )\n+            slice::from_raw_parts_mut(\n+                &mut self.as_leaf_mut().keys as *mut [K] as *mut K,\n+                self.len()\n+            )\n+        }\n+    }\n+\n+    fn into_val_slice_mut(mut self) -> &'a mut [V] {\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                &mut self.as_leaf_mut().vals as *mut [V] as *mut V,\n+                self.len()\n             )\n         }\n     }\n+\n+    fn into_slices_mut(self) -> (&'a mut [K], &'a mut [V]) {\n+        let k = unsafe { ptr::read(&self) };\n+        (k.into_key_slice_mut(), self.into_val_slice_mut())\n+    }\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {"}]}