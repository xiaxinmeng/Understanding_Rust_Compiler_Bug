{"sha": "9e76fcc468f57a1040a85cc195374923be414401", "node_id": "C_kwDOAAsO6NoAKDllNzZmY2M0NjhmNTdhMTA0MGE4NWNjMTk1Mzc0OTIzYmU0MTQ0MDE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-29T00:43:47Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-29T02:16:00Z"}, "message": "Change `Search::infcx` to `tcx`.\n\nBecause the `infcx` isn't needed. This removes one lifetime from\n`Search`.", "tree": {"sha": "c2ba5484689b5a7e4c269b4a2cd7ab33ed73bf7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ba5484689b5a7e4c269b4a2cd7ab33ed73bf7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e76fcc468f57a1040a85cc195374923be414401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e76fcc468f57a1040a85cc195374923be414401", "html_url": "https://github.com/rust-lang/rust/commit/9e76fcc468f57a1040a85cc195374923be414401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e76fcc468f57a1040a85cc195374923be414401/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788ddedb0d88e40db9cd62b6163d5a471813044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/788ddedb0d88e40db9cd62b6163d5a471813044b", "html_url": "https://github.com/rust-lang/rust/commit/788ddedb0d88e40db9cd62b6163d5a471813044b"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "8db1d4cfbe8b8c2ab860040cbfea2eb238fb2861", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e76fcc468f57a1040a85cc195374923be414401/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e76fcc468f57a1040a85cc195374923be414401/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=9e76fcc468f57a1040a85cc195374923be414401", "patch": "@@ -60,7 +60,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n     // FIXME: we should instead pass in an `infcx` from the outside.\n     tcx.infer_ctxt().enter(|infcx| {\n-        ty.visit_with(&mut Search { infcx, span, seen: FxHashSet::default() }).break_value()\n+        ty.visit_with(&mut Search { tcx: infcx.tcx, span, seen: FxHashSet::default() }).break_value()\n     })\n }\n \n@@ -114,27 +114,23 @@ fn type_marked_structural<'tcx>(\n /// This implements the traversal over the structure of a given type to try to\n /// find instances of ADTs (specifically structs or enums) that do not implement\n /// the structural-match traits (`StructuralPartialEq` and `StructuralEq`).\n-struct Search<'a, 'tcx> {\n+struct Search<'tcx> {\n     span: Span,\n \n-    infcx: InferCtxt<'a, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n \n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n }\n \n-impl<'a, 'tcx> Search<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n+impl<'tcx> Search<'tcx> {\n     fn type_marked_structural(&self, adt_ty: Ty<'tcx>) -> bool {\n-        adt_ty.is_structural_eq_shallow(self.tcx())\n+        adt_ty.is_structural_eq_shallow(self.tcx)\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n+impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n     type BreakTy = NonStructuralMatchTy<'tcx>;\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -193,7 +189,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 return ControlFlow::CONTINUE;\n             }\n             ty::Array(_, n)\n-                if { n.try_eval_usize(self.tcx(), ty::ParamEnv::reveal_all()) == Some(0) } =>\n+                if { n.try_eval_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n@@ -214,7 +210,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n             ty::Error(_) => {\n-                self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n+                self.tcx.sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n                 return ControlFlow::CONTINUE;\n@@ -244,9 +240,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         // even though we skip super_visit_with, we must recur on\n         // fields of ADT.\n-        let tcx = self.tcx();\n+        let tcx = self.tcx;\n         adt_def.all_fields().map(|field| field.ty(tcx, substs)).try_for_each(|field_ty| {\n-            let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n+            let ty = self.tcx.normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n             ty.visit_with(self)\n         })"}]}