{"sha": "0928061906bbec3099df7340e1e296b6dfc279a9", "node_id": "C_kwDOAAsO6NoAKDA5MjgwNjE5MDZiYmVjMzA5OWRmNzM0MGUxZTI5NmI2ZGZjMjc5YTk", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-05-31T15:14:42Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "refactor encode_and_write_metadata", "tree": {"sha": "4fe56face76156423eb8dbc2d5fe78507e276b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe56face76156423eb8dbc2d5fe78507e276b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0928061906bbec3099df7340e1e296b6dfc279a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0928061906bbec3099df7340e1e296b6dfc279a9", "html_url": "https://github.com/rust-lang/rust/commit/0928061906bbec3099df7340e1e296b6dfc279a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0928061906bbec3099df7340e1e296b6dfc279a9/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e44e577485da3f8de4803a1f9248fa6c0089b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e44e577485da3f8de4803a1f9248fa6c0089b8", "html_url": "https://github.com/rust-lang/rust/commit/34e44e577485da3f8de4803a1f9248fa6c0089b8"}], "stats": {"total": 75, "additions": 31, "deletions": 44}, "files": [{"sha": "4e00cac466b1435799a24316dce9031f26406d7d", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0928061906bbec3099df7340e1e296b6dfc279a9/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0928061906bbec3099df7340e1e296b6dfc279a9/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=0928061906bbec3099df7340e1e296b6dfc279a9", "patch": "@@ -68,53 +68,45 @@ pub fn encode_and_write_metadata(\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n     let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n     let metadata_filename = metadata_tmpdir.as_ref().join(METADATA_FILENAME);\n-    let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n-    let metadata = match metadata_kind {\n+\n+    match metadata_kind {\n         MetadataKind::None => {\n-            if need_metadata_file {\n-                // Though creating the empty file here seems to be meaningless, cargo expects it.\n-                if let Err(e) = std::fs::File::create(&out_filename) {\n-                    tcx.sess.fatal(&format!(\n-                        \"failed to create the file {}: {}\",\n-                        out_filename.display(),\n-                        e\n-                    ));\n-                }\n-                if tcx.sess.opts.json_artifact_notifications {\n-                    tcx.sess\n-                        .parse_sess\n-                        .span_diagnostic\n-                        .emit_artifact_notification(&out_filename, \"metadata\");\n-                }\n-            }\n-            EncodedMetadata::empty()\n+            std::fs::File::create(&metadata_filename).unwrap_or_else(|e| {\n+                tcx.sess.fatal(&format!(\n+                    \"failed to create the file {}: {}\",\n+                    out_filename.display(),\n+                    e\n+                ))\n+            });\n         }\n         MetadataKind::Uncompressed | MetadataKind::Compressed => {\n             encode_metadata(tcx, &metadata_filename);\n+        }\n+    };\n \n-            let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n-\n-            let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n-                if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n-                    tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n-                }\n-                if tcx.sess.opts.json_artifact_notifications {\n-                    tcx.sess\n-                        .parse_sess\n-                        .span_diagnostic\n-                        .emit_artifact_notification(&out_filename, \"metadata\");\n-                }\n-                (out_filename, None)\n-            } else {\n-                (metadata_filename, Some(metadata_tmpdir))\n-            };\n-\n-            EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n-                tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n-            })\n+    let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n+\n+    let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n+    let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n+        if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n+            tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n+        if tcx.sess.opts.json_artifact_notifications {\n+            tcx.sess\n+                .parse_sess\n+                .span_diagnostic\n+                .emit_artifact_notification(&out_filename, \"metadata\");\n+        }\n+        (out_filename, None)\n+    } else {\n+        (metadata_filename, Some(metadata_tmpdir))\n     };\n \n+    let metadata =\n+        EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n+            tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n+        });\n+\n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n \n     (metadata, need_metadata_module)"}, {"sha": "0da87abbc487ad95588bafb647c4cedd3a6b9b26", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0928061906bbec3099df7340e1e296b6dfc279a9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0928061906bbec3099df7340e1e296b6dfc279a9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=0928061906bbec3099df7340e1e296b6dfc279a9", "patch": "@@ -2163,11 +2163,6 @@ impl EncodedMetadata {\n         Ok(Self { mmap, _temp_dir: temp_dir })\n     }\n \n-    #[inline]\n-    pub fn empty() -> Self {\n-        Self { mmap: None, _temp_dir: None }\n-    }\n-\n     #[inline]\n     pub fn raw_data(&self) -> &[u8] {\n         self.mmap.as_ref().map(|mmap| mmap.as_ref()).unwrap_or_default()"}]}