{"sha": "d4c8310d059e76f28c81e1e404dfe79b982bc23b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YzgzMTBkMDU5ZTc2ZjI4YzgxZTFlNDA0ZGZlNzliOTgyYmMyM2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T12:53:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T12:53:32Z"}, "message": "switch interner to use arena", "tree": {"sha": "49ace1774d9ed6ebfa141af27368030fa4c3279d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ace1774d9ed6ebfa141af27368030fa4c3279d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c8310d059e76f28c81e1e404dfe79b982bc23b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c8310d059e76f28c81e1e404dfe79b982bc23b", "html_url": "https://github.com/rust-lang/rust/commit/d4c8310d059e76f28c81e1e404dfe79b982bc23b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c8310d059e76f28c81e1e404dfe79b982bc23b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5603237c069c600963b8e25481af397b25e3b185", "url": "https://api.github.com/repos/rust-lang/rust/commits/5603237c069c600963b8e25481af397b25e3b185", "html_url": "https://github.com/rust-lang/rust/commit/5603237c069c600963b8e25481af397b25e3b185"}], "stats": {"total": 63, "additions": 23, "deletions": 40}, "files": [{"sha": "c84fa0c02d0c1dd573e19ddbf51ed91f562090f4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8310d059e76f28c81e1e404dfe79b982bc23b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8310d059e76f28c81e1e404dfe79b982bc23b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d4c8310d059e76f28c81e1e404dfe79b982bc23b", "patch": "@@ -678,6 +678,7 @@ name = \"ra_db\"\n version = \"0.1.0\"\n dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_arena 0.1.0\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "43bfa925a7c32a3fac320fd359873d7ebd670fc6", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=d4c8310d059e76f28c81e1e404dfe79b982bc23b", "patch": "@@ -61,6 +61,9 @@ pub trait ArenaId {\n }\n \n impl<ID: ArenaId, T> Arena<ID, T> {\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n     pub fn alloc(&mut self, value: T) -> ID {\n         let id = RawId(self.data.len() as u32);\n         self.data.push(value);"}, {"sha": "c43e6505174cc09fdef81c6524b6a05809ad8442", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=d4c8310d059e76f28c81e1e404dfe79b982bc23b", "patch": "@@ -9,6 +9,7 @@ relative-path = \"0.4.0\"\n salsa = \"0.9.1\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n+ra_arena = { path = \"../ra_arena\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "732899718ca219df85b81fd2ad3f3fb8c9eefcaa", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=d4c8310d059e76f28c81e1e404dfe79b982bc23b", "patch": "@@ -18,23 +18,9 @@ pub use crate::{\n         FileTextQuery, FileSourceRootQuery, SourceRootQuery, LocalRootsQuery, LibraryRootsQuery, CrateGraphQuery,\n         FileRelativePathQuery\n     },\n-    loc2id::{LocationIntener, NumericId},\n+    loc2id::LocationIntener,\n };\n \n-#[macro_export]\n-macro_rules! impl_numeric_id {\n-    ($id:ident) => {\n-        impl $crate::NumericId for $id {\n-            fn from_u32(id: u32) -> Self {\n-                $id(id)\n-            }\n-            fn to_u32(self) -> u32 {\n-                self.0\n-            }\n-        }\n-    };\n-}\n-\n pub trait BaseDatabase: salsa::Database {\n     fn check_canceled(&self) -> Cancelable<()> {\n         if self.salsa_runtime().is_current_revision_canceled() {"}, {"sha": "1d6761897e02272b4761067cb0be9666a555453d", "filename": "crates/ra_db/src/loc2id.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_db%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_db%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Floc2id.rs?ref=d4c8310d059e76f28c81e1e404dfe79b982bc23b", "patch": "@@ -1,8 +1,8 @@\n-use parking_lot::Mutex;\n-\n use std::hash::Hash;\n \n+use parking_lot::Mutex;\n use rustc_hash::FxHashMap;\n+use ra_arena::{Arena, ArenaId};\n \n /// There are two principle ways to refer to things:\n ///   - by their locatinon (module in foo/bar/baz.rs at line 42)\n@@ -17,70 +17,62 @@ use rustc_hash::FxHashMap;\n #[derive(Debug)]\n struct Loc2IdMap<LOC, ID>\n where\n-    ID: NumericId,\n+    ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n+    id2loc: Arena<ID, LOC>,\n     loc2id: FxHashMap<LOC, ID>,\n-    id2loc: FxHashMap<ID, LOC>,\n }\n \n impl<LOC, ID> Default for Loc2IdMap<LOC, ID>\n where\n-    ID: NumericId,\n+    ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     fn default() -> Self {\n         Loc2IdMap {\n+            id2loc: Arena::default(),\n             loc2id: FxHashMap::default(),\n-            id2loc: FxHashMap::default(),\n         }\n     }\n }\n \n impl<LOC, ID> Loc2IdMap<LOC, ID>\n where\n-    ID: NumericId,\n+    ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     pub fn len(&self) -> usize {\n-        self.loc2id.len()\n+        self.id2loc.len()\n     }\n \n     pub fn loc2id(&mut self, loc: &LOC) -> ID {\n         match self.loc2id.get(loc) {\n             Some(id) => return id.clone(),\n             None => (),\n         }\n-        let id = self.loc2id.len();\n-        assert!(id < u32::max_value() as usize);\n-        let id = ID::from_u32(id as u32);\n+        let id = self.id2loc.alloc(loc.clone());\n         self.loc2id.insert(loc.clone(), id.clone());\n-        self.id2loc.insert(id.clone(), loc.clone());\n         id\n     }\n \n     pub fn id2loc(&self, id: ID) -> LOC {\n-        self.id2loc[&id].clone()\n+        self.id2loc[id].clone()\n     }\n }\n \n-pub trait NumericId: Clone + Eq + Hash {\n-    fn from_u32(id: u32) -> Self;\n-    fn to_u32(self) -> u32;\n-}\n-\n #[derive(Debug)]\n pub struct LocationIntener<LOC, ID>\n where\n-    ID: NumericId,\n+    ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     map: Mutex<Loc2IdMap<LOC, ID>>,\n }\n \n impl<LOC, ID> Default for LocationIntener<LOC, ID>\n where\n-    ID: NumericId,\n+    ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     fn default() -> Self {\n@@ -92,7 +84,7 @@ where\n \n impl<LOC, ID> LocationIntener<LOC, ID>\n where\n-    ID: NumericId,\n+    ID: ArenaId + Clone,\n     LOC: Clone + Eq + Hash,\n {\n     pub fn len(&self) -> usize {"}, {"sha": "624ab808fa0876e34f312b497567047a3e502198", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c8310d059e76f28c81e1e404dfe79b982bc23b/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=d4c8310d059e76f28c81e1e404dfe79b982bc23b", "patch": "@@ -93,8 +93,8 @@ impl From<MacroCallId> for HirFileId {\n /// `MacroCallId` identifies a particular macro invocation, like\n /// `println!(\"Hello, {}\", world)`.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(u32);\n-ra_db::impl_numeric_id!(MacroCallId);\n+pub struct MacroCallId(RawId);\n+impl_arena_id!(MacroCallId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroCallLoc {\n@@ -125,8 +125,8 @@ impl MacroCallLoc {\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct DefId(u32);\n-ra_db::impl_numeric_id!(DefId);\n+pub struct DefId(RawId);\n+impl_arena_id!(DefId);\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DefLoc {"}]}