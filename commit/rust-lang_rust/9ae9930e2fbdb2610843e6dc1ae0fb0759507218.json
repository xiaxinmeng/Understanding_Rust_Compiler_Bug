{"sha": "9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZTk5MzBlMmZiZGIyNjEwODQzZTZkYzFhZTBmYjA3NTk1MDcyMTg=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-20T12:07:06Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-20T12:07:06Z"}, "message": "Introduce iterator trait TrustedLen", "tree": {"sha": "1daf7665067a1389939a8d00396122fb3128761d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1daf7665067a1389939a8d00396122fb3128761d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "html_url": "https://github.com/rust-lang/rust/commit/9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c429872a32c3005cf2b347025163361218634a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c429872a32c3005cf2b347025163361218634a4", "html_url": "https://github.com/rust-lang/rust/commit/0c429872a32c3005cf2b347025163361218634a4"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "9fa950cd94d9e933102f4b10d0e710a3be30f519", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "patch": "@@ -328,6 +328,8 @@ pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};\n pub use self::traits::{ExactSizeIterator, Sum, Product};\n #[unstable(feature = \"fused\", issue = \"35602\")]\n pub use self::traits::FusedIterator;\n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+pub use self::traits::TrustedLen;\n \n mod iterator;\n mod range;\n@@ -372,6 +374,10 @@ impl<I> ExactSizeIterator for Rev<I>\n impl<I> FusedIterator for Rev<I>\n     where I: FusedIterator + DoubleEndedIterator {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<I> TrustedLen for Rev<I>\n+    where I: TrustedLen + DoubleEndedIterator {}\n+\n /// An iterator that clones the elements of an underlying iterator.\n ///\n /// This `struct` is created by the [`cloned()`] method on [`Iterator`]. See its\n@@ -432,6 +438,12 @@ unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n     fn may_have_side_effect() -> bool { true }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<'a, I, T: 'a> TrustedLen for Cloned<I>\n+    where I: TrustedLen<Item=&'a T>,\n+          T: Clone\n+{}\n+\n /// An iterator that repeats endlessly.\n ///\n /// This `struct` is created by the [`cycle()`] method on [`Iterator`]. See its\n@@ -642,6 +654,11 @@ impl<A, B> FusedIterator for Chain<A, B>\n           B: FusedIterator<Item=A::Item>,\n {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<A, B> TrustedLen for Chain<A, B>\n+    where A: TrustedLen, B: TrustedLen<Item=A::Item>,\n+{}\n+\n /// An iterator that iterates two other iterators simultaneously.\n ///\n /// This `struct` is created by the [`zip()`] method on [`Iterator`]. See its\n@@ -859,6 +876,11 @@ unsafe impl<A, B> TrustedRandomAccess for Zip<A, B>\n impl<A, B> FusedIterator for Zip<A, B>\n     where A: FusedIterator, B: FusedIterator, {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<A, B> TrustedLen for Zip<A, B>\n+    where A: TrustedLen, B: TrustedLen,\n+{}\n+\n /// An iterator that maps the values of `iter` with `f`.\n ///\n /// This `struct` is created by the [`map()`] method on [`Iterator`]. See its\n@@ -959,6 +981,11 @@ impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F>\n impl<B, I: FusedIterator, F> FusedIterator for Map<I, F>\n     where F: FnMut(I::Item) -> B {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<B, I, F> TrustedLen for Map<I, F>\n+    where I: TrustedLen,\n+          F: FnMut(I::Item) -> B {}\n+\n #[doc(hidden)]\n unsafe impl<B, I, F> TrustedRandomAccess for Map<I, F>\n     where I: TrustedRandomAccess,\n@@ -1195,6 +1222,12 @@ unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<I> TrustedLen for Enumerate<I>\n+    where I: TrustedLen,\n+{}\n+\n+\n /// An iterator with a `peek()` that returns an optional reference to the next\n /// element.\n ///"}, {"sha": "39da578d54913dcdb568dcb697d95da9125f2adb", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "patch": "@@ -12,7 +12,7 @@ use mem;\n use ops::{self, Add, Sub};\n use usize;\n \n-use super::FusedIterator;\n+use super::{FusedIterator, TrustedLen};\n \n /// Objects that can be stepped over in both directions.\n ///\n@@ -533,6 +533,9 @@ impl<A: Step + Clone> DoubleEndedIterator for ops::Range<A> where\n impl<A> FusedIterator for ops::Range<A>\n     where A: Step, for<'a> &'a A: Add<&'a A, Output = A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl TrustedLen for ops::Range<usize> { }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Step> Iterator for ops::RangeFrom<A> where\n     for<'a> &'a A: Add<&'a A, Output = A>"}, {"sha": "da150f1d57a63971a18d90c2ab41554b8896bcb2", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "patch": "@@ -665,3 +665,10 @@ pub trait FusedIterator: Iterator {}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n+\n+/// An iterator that has correct length\n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+pub unsafe trait TrustedLen : Iterator {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<'a, I: TrustedLen + ?Sized> TrustedLen for &'a mut I {}"}, {"sha": "64d38c54c4767b6fa2d7838665de5326b4df60ae", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae9930e2fbdb2610843e6dc1ae0fb0759507218/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "patch": "@@ -988,6 +988,9 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<'a, T> TrustedLen for Iter<'a, T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n@@ -1109,6 +1112,9 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"0\")]\n+unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n+\n /// An internal abstraction over the splitting iterators, so that\n /// splitn, splitn_mut etc can be implemented once.\n #[doc(hidden)]"}]}