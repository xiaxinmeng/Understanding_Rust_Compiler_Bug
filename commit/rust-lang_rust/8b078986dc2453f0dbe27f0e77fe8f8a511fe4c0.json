{"sha": "8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "node_id": "C_kwDOAAsO6NoAKDhiMDc4OTg2ZGMyNDUzZjBkYmUyN2YwZTc3ZmU4ZjhhNTExZmU0YzA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T18:22:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T18:22:51Z"}, "message": "Reimplement auto-ref completions for fields", "tree": {"sha": "b964074ba7a8471fe0ee84b3972ee85bfed6938d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b964074ba7a8471fe0ee84b3972ee85bfed6938d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "html_url": "https://github.com/rust-lang/rust/commit/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "html_url": "https://github.com/rust-lang/rust/commit/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "147563ef103d57aad5dcc46e93e1fa87b5358c28", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "patch": "@@ -379,6 +379,7 @@ impl Completions {\n     pub(crate) fn add_field(\n         &mut self,\n         ctx: &CompletionContext,\n+        dot_access: &DotAccess,\n         receiver: Option<hir::Name>,\n         field: hir::Field,\n         ty: &hir::Type,\n@@ -390,6 +391,7 @@ impl Completions {\n         };\n         let item = render_field(\n             RenderContext::new(ctx).private_editable(is_private_editable),\n+            dot_access,\n             receiver,\n             field,\n             ty,"}, {"sha": "bf0bce2198c1083faf44bf0ddb03742e62d82eb4", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext, dot_a\n             acc,\n             ctx,\n             &receiver_ty,\n-            |acc, field, ty| acc.add_field(ctx, None, field, &ty),\n+            |acc, field, ty| acc.add_field(ctx, dot_access, None, field, &ty),\n             |acc, field, ty| acc.add_tuple_field(ctx, None, field, &ty),\n         );\n     }\n@@ -64,7 +64,19 @@ pub(crate) fn complete_undotted_self(\n         acc,\n         ctx,\n         &ty,\n-        |acc, field, ty| acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n+        |acc, field, ty| {\n+            acc.add_field(\n+                ctx,\n+                &DotAccess {\n+                    receiver: None,\n+                    receiver_ty: None,\n+                    kind: DotAccessKind::Field { receiver_is_ambiguous_float_literal: false },\n+                },\n+                Some(hir::known::SELF_PARAM),\n+                field,\n+                &ty,\n+            )\n+        },\n         |acc, field, ty| acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n     );\n     complete_methods(ctx, &ty, |func| {"}, {"sha": "8cef3a70182b090c23e049d8c4ea3fa841e27969", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "patch": "@@ -3,7 +3,7 @@ use ide_db::SymbolKind;\n use syntax::ast::{self, Expr};\n \n use crate::{\n-    context::{ExprCtx, PathCompletionCtx, PatternContext, Qualified},\n+    context::{DotAccess, DotAccessKind, ExprCtx, PathCompletionCtx, PatternContext, Qualified},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n     CompletionRelevancePostfixMatch, Completions,\n };\n@@ -107,7 +107,17 @@ fn complete_fields(\n     missing_fields: Vec<(hir::Field, hir::Type)>,\n ) {\n     for (field, ty) in missing_fields {\n-        acc.add_field(ctx, None, field, &ty);\n+        acc.add_field(\n+            ctx,\n+            &DotAccess {\n+                receiver: None,\n+                receiver_ty: None,\n+                kind: DotAccessKind::Field { receiver_is_ambiguous_float_literal: false },\n+            },\n+            None,\n+            field,\n+            &ty,\n+        );\n     }\n }\n "}, {"sha": "6571e673527dbe2cc14947cfca5e3462f959661d", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=8b078986dc2453f0dbe27f0e77fe8f8a511fe4c0", "patch": "@@ -17,7 +17,7 @@ use ide_db::{\n use syntax::{AstNode, SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind, PatternContext},\n+    context::{DotAccess, PathCompletionCtx, PathKind, PatternContext},\n     item::{Builder, CompletionRelevanceTypeMatch},\n     render::{\n         function::render_fn,\n@@ -110,6 +110,7 @@ impl<'a> RenderContext<'a> {\n \n pub(crate) fn render_field(\n     ctx: RenderContext<'_>,\n+    dot_access: &DotAccess,\n     receiver: Option<hir::Name>,\n     field: hir::Field,\n     ty: &hir::Type,\n@@ -134,10 +135,10 @@ pub(crate) fn render_field(\n     if is_keyword && !matches!(name.as_str(), \"self\" | \"crate\" | \"super\" | \"Self\") {\n         item.insert_text(format!(\"r#{}\", name));\n     }\n-    if let Some(_ref_match) = compute_ref_match(ctx.completion, ty) {\n-        // FIXME\n-        // For now we don't properly calculate the edits for ref match\n-        // completions on struct fields, so we've disabled them. See #8058.\n+    if let Some(receiver) = &dot_access.receiver {\n+        if let Some(ref_match) = compute_ref_match(ctx.completion, ty) {\n+            item.ref_match(ref_match, receiver.syntax().text_range().start());\n+        }\n     }\n     item.build()\n }\n@@ -1535,9 +1536,6 @@ impl Foo { fn baz(&self) -> u32 { 0 } }\n fn foo(f: Foo) { let _: &u32 = f.b$0 }\n \"#,\n             &[CompletionItemKind::Method, CompletionItemKind::SymbolKind(SymbolKind::Field)],\n-            // FIXME\n-            // Ideally we'd also suggest &f.bar as exact\n-            // type matches. See #8058.\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -1559,6 +1557,7 @@ fn foo(f: Foo) { let _: &u32 = f.b$0 }\n                             Field,\n                         ),\n                         detail: \"u32\",\n+                        ref_match: \"&@96\",\n                     },\n                 ]\n             \"#]],"}]}