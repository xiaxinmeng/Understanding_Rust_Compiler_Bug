{"sha": "b9948c4be6741ae916b838df29e9777467d4c84c", "node_id": "C_kwDOAAsO6NoAKGI5OTQ4YzRiZTY3NDFhZTkxNmI4MzhkZjI5ZTk3Nzc0NjdkNGM4NGM", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-16T09:26:08Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "Ran `dev bless`!", "tree": {"sha": "b085246b386ecce9e9923ebbd5bb46e895087326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b085246b386ecce9e9923ebbd5bb46e895087326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9948c4be6741ae916b838df29e9777467d4c84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9948c4be6741ae916b838df29e9777467d4c84c", "html_url": "https://github.com/rust-lang/rust/commit/b9948c4be6741ae916b838df29e9777467d4c84c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9948c4be6741ae916b838df29e9777467d4c84c/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4db597722ff561515812e2e0cab255a678a41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4db597722ff561515812e2e0cab255a678a41c", "html_url": "https://github.com/rust-lang/rust/commit/4b4db597722ff561515812e2e0cab255a678a41c"}], "stats": {"total": 188, "additions": 147, "deletions": 41}, "files": [{"sha": "7f5798355129d90da39e8567852787523b5e5d48", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b9948c4be6741ae916b838df29e9777467d4c84c/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9948c4be6741ae916b838df29e9777467d4c84c/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=b9948c4be6741ae916b838df29e9777467d4c84c", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     /// Use instead:\n     /// ```rust\n     /// #[repr(C)]\n-    /// struct MakesSense {\n+    /// struct MoreOftenUseful {\n     ///     some_field: usize,\n     ///     last: [SomeType; 0],\n     /// }\n@@ -45,15 +45,13 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_AR\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        dbg!(item.ident);\n-\n         if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, item.def_id) {\n             span_lint_and_sugg(\n                 cx,\n                 TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n                 item.span,\n                 \"trailing zero-sized array in a struct which is not marked `#[repr(C)]`\",\n-                \"try\",\n+                \"try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\",\n                 format!(\"#[repr(C)]\\n{}\", snippet(cx, item.span, \"..\")),\n                 Applicability::MaybeIncorrect,\n             );\n@@ -62,46 +60,40 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n }\n \n fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n-    if let ItemKind::Struct(data, _generics) = &item.kind {\n-        if let VariantData::Struct(field_defs, _) = data {\n-            if let Some(last_field) = field_defs.last() {\n-                if let TyKind::Array(_, aconst) = last_field.ty.kind {\n-                    let aconst_def_id = cx.tcx.hir().body_owner_def_id(aconst.body).to_def_id();\n-                    let ty = cx.tcx.type_of(aconst_def_id);\n-                    let constant = cx\n-                        .tcx\n-                        // NOTE: maybe const_eval_resolve? seems especially cursed to be using a const expr which\n-                        // resolves to 0 to create a zero-sized array, tho\n-                        .const_eval_poly(aconst_def_id)\n-                        .ok()\n-                        .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n-                    if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n-                        if val == 0 {\n-                            // eprintln!(\"trailing: true\");\n-                            return true;\n-                        }\n-                    }\n-                }\n-            }\n+    if_chain! {\n+        if let ItemKind::Struct(data, _generics) = &item.kind;\n+        if let VariantData::Struct(field_defs, _) = data;\n+        if let Some(last_field) = field_defs.last();\n+        if let TyKind::Array(_, aconst) = last_field.ty.kind;\n+        let aconst_def_id = cx.tcx.hir().body_owner_def_id(aconst.body).to_def_id();\n+        let ty = cx.tcx.type_of(aconst_def_id);\n+        let constant = cx\n+            .tcx\n+            // NOTE: maybe const_eval_resolve?\n+            .const_eval_poly(aconst_def_id)\n+            .ok()\n+            .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n+        if let Some(Constant::Int(val)) = constant.and_then(miri_to_const);\n+        if val == 0;\n+        then {\n+            true\n+        } else {\n+            false\n         }\n     }\n-    // dbg!(aconst);\n-    // eprintln!(\"trailing: false\");\n-    false\n }\n \n fn has_repr_c(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n-    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-    let attrs = cx.tcx.hir().attrs(hir_id);\n+    let hir_map = cx.tcx.hir();\n+    let hir_id = hir_map.local_def_id_to_hir_id(def_id);\n+    let attrs = hir_map.attrs(hir_id);\n \n     // NOTE: Can there ever be more than one `repr` attribute?\n     // other `repr` syms: repr, repr128, repr_align, repr_align_enum, repr_no_niche, repr_packed,\n     // repr_simd, repr_transparent\n-    if let Some(_repr_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n-        // eprintln!(\"repr: true\");\n+    if let Some(_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n         true\n     } else {\n-        // eprintln!(\"repr: false\");\n         false\n     }\n }"}, {"sha": "62fe94d7abf05484305a8537f7faccb3b9730eb7", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9948c4be6741ae916b838df29e9777467d4c84c/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9948c4be6741ae916b838df29e9777467d4c84c/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=b9948c4be6741ae916b838df29e9777467d4c84c", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr_c)]\n-\n-// #![feature(const_generics_defaults)]\n+// #![feature(const_generics_defaults)] // see below\n \n struct RarelyUseful {\n     field: i32,\n@@ -48,6 +47,9 @@ struct UsingFunction {\n     last: [usize; compute_zero()],\n }\n \n+// NOTE: including these (along with the required feature) triggers an ICE. Should make sure the\n+// const generics people are aware of that if they weren't already.\n+\n // #[repr(C)]\n // struct ConstParamOk<const N: usize = 0> {\n //     field: i32,\n@@ -59,29 +61,29 @@ struct UsingFunction {\n //     last: [usize; N]\n // }\n \n-\n-// TODO: actually, uh,,\n+// TODO: actually, uh,, no idea what behavior here would be\n #[repr(packed)]\n struct ReprPacked {\n     small: u8,\n     medium: i32,\n     weird: [u64; 0],\n }\n \n-// same\n+// TODO: clarify expected behavior\n #[repr(align(64))]\n struct ReprAlign {\n     field: i32,\n     last: [usize; 0],\n }\n \n-// same\n+// TODO: clarify expected behavior\n #[repr(C, align(64))]\n struct ReprCAlign {\n     field: i32,\n     last: [usize; 0],\n }\n \n+// NOTE: because of https://doc.rust-lang.org/stable/reference/type-layout.html#primitive-representation-of-enums-with-fields and I'm not sure when in the compilation pipeline that would happen\n #[repr(C)]\n enum DontLintAnonymousStructsFromDesuraging {\n     A(u32),\n@@ -109,5 +111,4 @@ struct LotsOfFields {\n     last: [usize; 0],\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "84606ed618588b9910abd735c4ebd59263734b3a", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.stderr", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/b9948c4be6741ae916b838df29e9777467d4c84c/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9948c4be6741ae916b838df29e9777467d4c84c/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.stderr?ref=b9948c4be6741ae916b838df29e9777467d4c84c", "patch": "@@ -0,0 +1,113 @@\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:4:1\n+   |\n+LL | / struct RarelyUseful {\n+LL | |     field: i32,\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::trailing-zero-sized-array-without-repr-c` implied by `-D warnings`\n+help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   |\n+LL + #[repr(C)]\n+LL + struct RarelyUseful {\n+LL +     field: i32,\n+LL +     last: [usize; 0],\n+LL + }\n+   |\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:15:1\n+   |\n+LL | / struct OnlyFieldIsZeroSizeArray {\n+LL | |     first_and_last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   |\n+LL + #[repr(C)]\n+LL + struct OnlyFieldIsZeroSizeArray {\n+LL +     first_and_last: [usize; 0],\n+LL + }\n+   |\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:19:1\n+   |\n+LL | / struct GenericArrayType<T> {\n+LL | |     field: i32,\n+LL | |     last: [T; 0],\n+LL | | }\n+   | |_^\n+   |\n+help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   |\n+LL + #[repr(C)]\n+LL + struct GenericArrayType<T> {\n+LL +     field: i32,\n+LL +     last: [T; 0],\n+LL + }\n+   |\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:30:1\n+   |\n+LL | / struct ZeroSizedFromExternalConst {\n+LL | |     field: i32,\n+LL | |     last: [usize; ZERO],\n+LL | | }\n+   | |_^\n+   |\n+help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   |\n+LL + #[repr(C)]\n+LL + struct ZeroSizedFromExternalConst {\n+LL +     field: i32,\n+LL +     last: [usize; ZERO],\n+LL + }\n+   |\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:45:1\n+   |\n+LL | / struct UsingFunction {\n+LL | |     field: i32,\n+LL | |     last: [usize; compute_zero()],\n+LL | | }\n+   | |_^\n+   |\n+help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   |\n+LL + #[repr(C)]\n+LL + struct UsingFunction {\n+LL +     field: i32,\n+LL +     last: [usize; compute_zero()],\n+LL + }\n+   |\n+\n+error: trailing zero-sized array in a struct which is not marked `#[repr(C)]`\n+  --> $DIR/trailing_zero_sized_array_without_repr_c.rs:94:1\n+   |\n+LL | / struct LotsOfFields {\n+LL | |     f1: u32,\n+LL | |     f2: u32,\n+LL | |     f3: u32,\n+...  |\n+LL | |     last: [usize; 0],\n+LL | | }\n+   | |_^\n+   |\n+help: try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\n+   |\n+LL + #[repr(C)]\n+LL + struct LotsOfFields {\n+LL +     f1: u32,\n+LL +     f2: u32,\n+LL +     f3: u32,\n+LL +     f4: u32,\n+ ...\n+\n+error: aborting due to 6 previous errors\n+"}]}