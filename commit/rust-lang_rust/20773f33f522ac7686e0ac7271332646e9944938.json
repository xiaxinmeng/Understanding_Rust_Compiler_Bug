{"sha": "20773f33f522ac7686e0ac7271332646e9944938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzczZjMzZjUyMmFjNzY4NmUwYWM3MjcxMzMyNjQ2ZTk5NDQ5Mzg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-23T02:09:34Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-23T02:20:42Z"}, "message": "Add vec::swap_remove (#3219)", "tree": {"sha": "e4a6fc890dafbe191ad1ca67fce6e0af7797315d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a6fc890dafbe191ad1ca67fce6e0af7797315d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20773f33f522ac7686e0ac7271332646e9944938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20773f33f522ac7686e0ac7271332646e9944938", "html_url": "https://github.com/rust-lang/rust/commit/20773f33f522ac7686e0ac7271332646e9944938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20773f33f522ac7686e0ac7271332646e9944938/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ef1d9d5b538ffb896cb37485b24dd029a6832de", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef1d9d5b538ffb896cb37485b24dd029a6832de", "html_url": "https://github.com/rust-lang/rust/commit/4ef1d9d5b538ffb896cb37485b24dd029a6832de"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "7ed0cea4f002c5b79eae8973d7e822b7488bffda", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/20773f33f522ac7686e0ac7271332646e9944938/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20773f33f522ac7686e0ac7271332646e9944938/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=20773f33f522ac7686e0ac7271332646e9944938", "patch": "@@ -510,7 +510,9 @@ fn consume_mut<T>(+v: ~[mut T], f: fn(uint, +T)) unsafe {\n /// Remove the last element from a vector and return it\n fn pop<T>(&v: ~[const T]) -> T {\n     let ln = len(v);\n-    assert ln > 0u;\n+    if ln == 0 {\n+        fail ~\"sorry, cannot vec::pop an empty vector\"\n+    }\n     let valptr = ptr::mut_addr_of(v[ln - 1u]);\n     unsafe {\n         let val <- *valptr;\n@@ -519,6 +521,29 @@ fn pop<T>(&v: ~[const T]) -> T {\n     }\n }\n \n+/**\n+ * Remove an element from anywhere in the vector and return it, replacing it\n+ * with the last element. This does not preserve ordering, but is O(1).\n+ *\n+ * Fails if index >= length.\n+ */\n+fn swap_remove<T>(&v: ~[const T], index: uint) -> T {\n+    let ln = len(v);\n+    if index >= ln {\n+        fail #fmt(\"vec::swap_remove - index %u >= length %u\", index, ln);\n+    }\n+    let lastptr = ptr::mut_addr_of(v[ln - 1]);\n+    unsafe {\n+        let mut val <- *lastptr;\n+        if index < ln - 1 {\n+            let valptr = ptr::mut_addr_of(v[index]);\n+            *valptr <-> val;\n+        }\n+        unsafe::set_len(v, ln - 1);\n+        val\n+    }\n+}\n+\n /// Append an element to a vector\n #[inline(always)]\n fn push<T>(&v: ~[const T], +initval: T) {\n@@ -1935,6 +1960,34 @@ mod tests {\n         assert (e == 5);\n     }\n \n+    #[test]\n+    fn test_swap_remove() {\n+        let mut v = ~[1, 2, 3, 4, 5];\n+        let mut e = swap_remove(v, 0);\n+        assert (len(v) == 4);\n+        assert e == 1;\n+        assert (v[0] == 5);\n+        e = swap_remove(v, 3);\n+        assert (len(v) == 3);\n+        assert e == 4;\n+        assert (v[0] == 5);\n+        assert (v[1] == 2);\n+        assert (v[2] == 3);\n+    }\n+\n+    #[test]\n+    fn test_swap_remove_noncopyable() {\n+        // Tests that we don't accidentally run destructors twice.\n+        let mut v = ~[::unsafe::exclusive(()), ::unsafe::exclusive(()),\n+                      ::unsafe::exclusive(())];\n+        let mut _e = swap_remove(v, 0);\n+        assert (len(v) == 2);\n+        _e = swap_remove(v, 1);\n+        assert (len(v) == 1);\n+        _e = swap_remove(v, 0);\n+        assert (len(v) == 0);\n+    }\n+\n     #[test]\n     fn test_push() {\n         // Test on-stack push()."}]}