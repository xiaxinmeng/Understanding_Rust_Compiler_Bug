{"sha": "144b4859ad2c9fcee453f3a1000357e20ecad535", "node_id": "C_kwDOAAsO6NoAKDE0NGI0ODU5YWQyYzlmY2VlNDUzZjNhMTAwMDM1N2UyMGVjYWQ1MzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-26T15:15:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-26T15:15:22Z"}, "message": "Auto merge of #2696 - RalfJung:no-std-windows, r=RalfJung\n\nmake no_std work on Windows\n\nAlso fixes https://github.com/rust-lang/miri/issues/1123 by cherry-picking a patch by `@DrMeepster.`", "tree": {"sha": "ee32e3a0171eb40b4f67e78e5cd237960d6077d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee32e3a0171eb40b4f67e78e5cd237960d6077d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144b4859ad2c9fcee453f3a1000357e20ecad535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144b4859ad2c9fcee453f3a1000357e20ecad535", "html_url": "https://github.com/rust-lang/rust/commit/144b4859ad2c9fcee453f3a1000357e20ecad535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144b4859ad2c9fcee453f3a1000357e20ecad535/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e44029cf0c2a43a6326666fa8e0d7c60ac5000", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e44029cf0c2a43a6326666fa8e0d7c60ac5000", "html_url": "https://github.com/rust-lang/rust/commit/b3e44029cf0c2a43a6326666fa8e0d7c60ac5000"}, {"sha": "3158a8d476d6f35664502fa50aae9f3e873a263e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3158a8d476d6f35664502fa50aae9f3e873a263e", "html_url": "https://github.com/rust-lang/rust/commit/3158a8d476d6f35664502fa50aae9f3e873a263e"}], "stats": {"total": 114, "additions": 71, "deletions": 43}, "files": [{"sha": "e528be8b037af5b59decd8afdf528d44e2b4b020", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=144b4859ad2c9fcee453f3a1000357e20ecad535", "patch": "@@ -88,7 +88,6 @@ function run_tests_minimal {\n   ./miri test -- \"$@\"\n \n   # Ensure that a small smoke test of cargo-miri works.\n-  # Note: This doesn't work on windows because of TLS.\n   cargo miri run --manifest-path test-cargo-miri/no-std-smoke/Cargo.toml\n \n   endgroup"}, {"sha": "363b647d6c684fd6e95e04a7244f7217c1073d4e", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=144b4859ad2c9fcee453f3a1000357e20ecad535", "patch": "@@ -9,6 +9,7 @@ use std::thread;\n use log::info;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{\n     self,\n@@ -195,7 +196,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     MiriMachine::late_init(&mut ecx, config)?;\n \n     // Make sure we have MIR. We check MIR for some stable monomorphic function in libcore.\n-    let sentinel = ecx.try_resolve_path(&[\"core\", \"ascii\", \"escape_default\"]);\n+    let sentinel = ecx.try_resolve_path(&[\"core\", \"ascii\", \"escape_default\"], Namespace::ValueNS);\n     if !matches!(sentinel, Some(s) if tcx.is_mir_available(s.def.def_id())) {\n         tcx.sess.fatal(\n             \"the current sysroot was built without `-Zalways-encode-mir`, or libcore seems missing. \\"}, {"sha": "bf086a7c623300cb8cb37fe4947e46b1d46beb85", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 63, "deletions": 30, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=144b4859ad2c9fcee453f3a1000357e20ecad535", "patch": "@@ -2,12 +2,12 @@ pub mod convert;\n \n use std::cmp;\n use std::iter;\n-use std::mem;\n use std::num::NonZeroUsize;\n use std::time::Duration;\n \n use log::trace;\n \n+use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_middle::mir;\n use rustc_middle::ty::{\n@@ -74,48 +74,79 @@ const UNIX_IO_ERROR_TABLE: &[(&str, std::io::ErrorKind)] = {\n };\n \n /// Gets an instance for a path.\n-fn try_resolve_did<'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n-    tcx.crates(()).iter().find(|&&krate| tcx.crate_name(krate).as_str() == path[0]).and_then(\n-        |krate| {\n-            let krate = DefId { krate: *krate, index: CRATE_DEF_INDEX };\n-            let mut items = tcx.module_children(krate);\n-            let mut path_it = path.iter().skip(1).peekable();\n-\n-            while let Some(segment) = path_it.next() {\n-                for item in mem::take(&mut items).iter() {\n-                    if item.ident.name.as_str() == *segment {\n-                        if path_it.peek().is_none() {\n-                            return Some(item.res.def_id());\n-                        }\n+///\n+/// A `None` namespace indicates we are looking for a module.\n+fn try_resolve_did<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    path: &[&str],\n+    namespace: Option<Namespace>,\n+) -> Option<DefId> {\n+    /// Yield all children of the given item, that have the given name.\n+    fn find_children<'tcx: 'a, 'a>(\n+        tcx: TyCtxt<'tcx>,\n+        item: DefId,\n+        name: &'a str,\n+    ) -> impl Iterator<Item = DefId> + 'a {\n+        tcx.module_children(item)\n+            .iter()\n+            .filter(move |item| item.ident.name.as_str() == name)\n+            .map(move |item| item.res.def_id())\n+    }\n \n-                        items = tcx.module_children(item.res.def_id());\n-                        break;\n-                    }\n-                }\n-            }\n-            None\n-        },\n-    )\n+    // Take apart the path: leading crate, a sequence of modules, and potentially a final item.\n+    let (&crate_name, path) = path.split_first().expect(\"paths must have at least one segment\");\n+    let (modules, item) = if let Some(namespace) = namespace {\n+        let (&item_name, modules) =\n+            path.split_last().expect(\"non-module paths must have at least 2 segments\");\n+        (modules, Some((item_name, namespace)))\n+    } else {\n+        (path, None)\n+    };\n+\n+    // First find the crate.\n+    let krate =\n+        tcx.crates(()).iter().find(|&&krate| tcx.crate_name(krate).as_str() == crate_name)?;\n+    let mut cur_item = DefId { krate: *krate, index: CRATE_DEF_INDEX };\n+    // Then go over the modules.\n+    for &segment in modules {\n+        cur_item = find_children(tcx, cur_item, segment)\n+            .find(|item| tcx.def_kind(item) == DefKind::Mod)?;\n+    }\n+    // Finally, look up the desired item in this module, if any.\n+    match item {\n+        Some((item_name, namespace)) =>\n+            Some(\n+                find_children(tcx, cur_item, item_name)\n+                    .find(|item| tcx.def_kind(item).ns() == Some(namespace))?,\n+            ),\n+        None => Some(cur_item),\n+    }\n }\n \n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n+    /// Checks if the given crate/module exists.\n+    fn have_module(&self, path: &[&str]) -> bool {\n+        try_resolve_did(*self.eval_context_ref().tcx, path, None).is_some()\n+    }\n+\n     /// Gets an instance for a path; fails gracefully if the path does not exist.\n-    fn try_resolve_path(&self, path: &[&str]) -> Option<ty::Instance<'tcx>> {\n-        let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path)?;\n-        Some(ty::Instance::mono(self.eval_context_ref().tcx.tcx, did))\n+    fn try_resolve_path(&self, path: &[&str], namespace: Namespace) -> Option<ty::Instance<'tcx>> {\n+        let tcx = self.eval_context_ref().tcx.tcx;\n+        let did = try_resolve_did(tcx, path, Some(namespace))?;\n+        Some(ty::Instance::mono(tcx, did))\n     }\n \n     /// Gets an instance for a path.\n-    fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n-        self.try_resolve_path(path)\n+    fn resolve_path(&self, path: &[&str], namespace: Namespace) -> ty::Instance<'tcx> {\n+        self.try_resolve_path(path, namespace)\n             .unwrap_or_else(|| panic!(\"failed to find required Rust item: {path:?}\"))\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)\n     /// if the path could be resolved, and None otherwise\n     fn eval_path_scalar(&self, path: &[&str]) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_ref();\n-        let instance = this.resolve_path(path);\n+        let instance = this.resolve_path(path, Namespace::ValueNS);\n         let cid = GlobalId { instance, promoted: None };\n         // We don't give a span -- this isn't actually used directly by the program anyway.\n         let const_val = this.eval_global(cid, None)?;\n@@ -147,15 +178,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Helper function to get the `TyAndLayout` of a `libc` type\n     fn libc_ty_layout(&self, name: &str) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n         let this = self.eval_context_ref();\n-        let ty = this.resolve_path(&[\"libc\", name]).ty(*this.tcx, ty::ParamEnv::reveal_all());\n+        let ty = this\n+            .resolve_path(&[\"libc\", name], Namespace::TypeNS)\n+            .ty(*this.tcx, ty::ParamEnv::reveal_all());\n         this.layout_of(ty)\n     }\n \n     /// Helper function to get the `TyAndLayout` of a `windows` type\n     fn windows_ty_layout(&self, name: &str) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n         let this = self.eval_context_ref();\n         let ty = this\n-            .resolve_path(&[\"std\", \"sys\", \"windows\", \"c\", name])\n+            .resolve_path(&[\"std\", \"sys\", \"windows\", \"c\", name], Namespace::TypeNS)\n             .ty(*this.tcx, ty::ParamEnv::reveal_all());\n         this.layout_of(ty)\n     }"}, {"sha": "5fda8bd7b7de9a2c00a891e012914e9cca914f79", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=144b4859ad2c9fcee453f3a1000357e20ecad535", "patch": "@@ -261,6 +261,11 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // (that would be basically https://github.com/rust-lang/miri/issues/450),\n         // we specifically look up the static in libstd that we know is placed\n         // in that section.\n+        if !this.have_module(&[\"std\"]) {\n+            // Looks like we are running in a `no_std` crate.\n+            // That also means no TLS dtors callback to call.\n+            return Ok(());\n+        }\n         let thread_callback =\n             this.eval_windows(\"thread_local_key\", \"p_thread_callback\")?.to_pointer(this)?;\n         let thread_callback = this.get_ptr_fn(thread_callback)?.as_instance()?;"}, {"sha": "816e7d87e85867cd37dd71e1ebf2d4e7f5437452", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=144b4859ad2c9fcee453f3a1000357e20ecad535", "patch": "@@ -11,7 +11,6 @@ use std::time::SystemTime;\n use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::ty::{self, layout::LayoutOf};\n use rustc_target::abi::{Align, Size};\n \n use crate::shims::os_str::bytes_to_os_str;\n@@ -1006,12 +1005,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // as `isize`s instead of having the proper types. Thus, we have to recover the layout of\n         // `statxbuf_op` by using the `libc::statx` struct type.\n         let statxbuf = {\n-            // FIXME: This long path is required because `libc::statx` is an struct and also a\n-            // function and `resolve_path` is returning the latter.\n-            let statx_ty = this\n-                .resolve_path(&[\"libc\", \"unix\", \"linux_like\", \"linux\", \"gnu\", \"statx\"])\n-                .ty(*this.tcx, ty::ParamEnv::reveal_all());\n-            let statx_layout = this.layout_of(statx_ty)?;\n+            let statx_layout = this.libc_ty_layout(\"statx\")?;\n             MPlaceTy::from_aligned_ptr(statxbuf_ptr, statx_layout)\n         };\n "}, {"sha": "3bece7783f798db012424aa871760904a71a5546", "filename": "src/tools/miri/tests/pass/no_std.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b4859ad2c9fcee453f3a1000357e20ecad535/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.rs?ref=144b4859ad2c9fcee453f3a1000357e20ecad535", "patch": "@@ -1,9 +1,5 @@\n #![feature(lang_items, start)]\n #![no_std]\n-// windows tls dtors go through libstd right now, thus this test\n-// cannot pass. When windows tls dtors go through the special magic\n-// windows linker section, we can run this test on windows again.\n-//@ignore-target-windows: no-std not supported on Windows\n \n // Plumbing to let us use `writeln!` to host stdout:\n "}]}