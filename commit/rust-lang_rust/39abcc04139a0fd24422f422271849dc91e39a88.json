{"sha": "39abcc04139a0fd24422f422271849dc91e39a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YWJjYzA0MTM5YTBmZDI0NDIyZjQyMjI3MTg0OWRjOTFlMzlhODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-10T02:52:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-10T02:52:12Z"}, "message": "Auto merge of #47828 - alexcrichton:llvm-6, r=nikomatsakis\n\nrustc: Upgrade to LLVM 6\n\nThe following submodules have been updated for a new version of LLVM:\n\n- `src/llvm`\n- `src/libcompiler_builtins` - transitively contains compiler-rt\n- `src/dlmalloc`\n\nThis also updates the docker container for dist-i686-freebsd as the old 16.04\ncontainer is no longer capable of building LLVM. The\ncompiler-rt/compiler-builtins and dlmalloc updates are pretty routine without\nmuch interesting happening, but the LLVM update here is of particular note.\nUnlike previous updates I haven't cherry-picked all existing patches we had on\ntop of our LLVM branch as we have a [huge amount][patches4] and have at this\npoint forgotten what most of them are for. Instead I started from the current\n`release_60` branch in LLVM and only applied patches that were necessary to get\nour tests working and building.\n\nThe [current set of custom rustc-specific patches](https://github.com/rust-lang/llvm/compare/f1286127b73c0d81ced8595af62e78ed703ced8b...rust-llvm-release-6-0-0) included in this LLVM update are:\n\n* rust-lang/llvm@1187443 - this is how we actually implement\n  `cfg(target_feature)` for now and continues to not be upstreamed. While a\n  hazard for SIMD stabilization this commit is otherwise keeping the status\n  quo of a small rustc-specific feature.\n* rust-lang/llvm@013f2ec - this is a rustc-specific optimization that we haven't\n  upstreamed, notably teaching LLVM about our allocation-related routines (which\n  aren't malloc/free). Once we stabilize the global allocator routines we will\n  likely want to upstream this patch, but for now it seems reasonable to keep it\n  on our fork.\n* rust-lang/llvm@a65bbfd - I found this necessary to fix compilation of LLVM in\n  our 32-bit linux container. I'm not really sure why it's necessary but my\n  guess is that it's because of the absolutely ancient glibc that we're using.\n  In any case it's only updating pieces we're not actually using in LLVM so I'm\n  hoping it'll turn out alright. This doesn't seem like something we'll want to\n  upstream.c\n* rust-lang/llvm@77ab1f0 - this is what's actually enabling LLVM to build in our\n  i686-freebsd container, I'm not really sure what's going on but we for sure\n  probably don't want to upstream this and otherwise it seems not too bad for\n  now at least.\n* rust-lang/llvm@9eb9267 - we currently suffer on MSVC from an [upstream bug]\n  which although diagnosed to a particular revision isn't currently fixed\n  upstream (and the bug itself doesn't seem too active). This commit is a\n  partial revert of the suspected cause of this regression (found via a\n  bisection). I'm sort of hoping that this eventually gets fixed upstream with a\n  similar fix (which we can replace in our branch), but for now I'm also hoping\n  it's a relatively harmless change to have.\n\nAfter applying these patches (plus one [backport] which should be [backported\nupstream][llvm-back]) I believe we should have all tests working on all\nplatforms in our current test suite. I'm like 99% sure that we'll need some more\nbackports as issues are reported for LLVM 6 when this propagates through\nnightlies, but that's sort of just par for the course nowadays!\n\nIn any case though some extra scrutiny of the patches here would definitely be\nwelcome, along with scrutiny of the \"missing patches\" like a [change to pass\nmanager order](rust-lang/llvm@2717444), [another change to pass manager\norder](rust-lang/llvm@c782feb), some [compile fixes for\nsparc](rust-lang/llvm@1a83de6), and some [fixes for\nsolaris](rust-lang/llvm@c2bfe0a).\n\n[patches4]: rust-lang/llvm@5401fdf...rust-llvm-release-4-0-1\n[backport]: rust-lang/llvm@5c54c25\n[llvm-back]: https://bugs.llvm.org/show_bug.cgi?id=36114\n[upstream bug]: https://bugs.llvm.org/show_bug.cgi?id=36096\n\n---\n\nThe update to LLVM 6 is desirable for a number of reasons, notably:\n\n* This'll allow us to keep up with the upstream wasm backend, picking up new\n  features as they start landing.\n* Upstream LLVM has fixed a number of SIMD-related compilation errors,\n  especially around AVX-512 and such.\n* There's a few assorted known bugs which are fixed in LLVM 5 and aren't fixed\n  in the LLVM 4 branch we're using.\n* Overall it's not a great idea to stagnate with our codegen backend!\n\nThis update is mostly powered by #47730 which is allowing us to update LLVM\n*independent* of the version of LLVM that Emscripten is locked to. This means\nthat when compiling code for Emscripten we'll still be using the old LLVM 4\nbackend, but when compiling code for any other target we'll be using the new\nLLVM 6 target. Once Emscripten updates we may no longer need this distinction,\nbut we're not sure when that will happen!\n\nCloses #43370\nCloses #43418\nCloses #47015\nCloses #47683\nCloses rust-lang-nursery/stdsimd#157\nCloses rust-lang-nursery/rust-wasm#3", "tree": {"sha": "d10aad0c5dbe9fd4527a05d25db243778d930611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d10aad0c5dbe9fd4527a05d25db243778d930611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39abcc04139a0fd24422f422271849dc91e39a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39abcc04139a0fd24422f422271849dc91e39a88", "html_url": "https://github.com/rust-lang/rust/commit/39abcc04139a0fd24422f422271849dc91e39a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39abcc04139a0fd24422f422271849dc91e39a88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcda48a30b21e46b81a7989deb30a3ba85fb918", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcda48a30b21e46b81a7989deb30a3ba85fb918", "html_url": "https://github.com/rust-lang/rust/commit/3bcda48a30b21e46b81a7989deb30a3ba85fb918"}, {"sha": "6b7b6b63a928479a29d9fc1282e553e409c66934", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7b6b63a928479a29d9fc1282e553e409c66934", "html_url": "https://github.com/rust-lang/rust/commit/6b7b6b63a928479a29d9fc1282e553e409c66934"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "2ea026244034f742a2f4ec871346c0ddb6d9b34e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39abcc04139a0fd24422f422271849dc91e39a88/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39abcc04139a0fd24422f422271849dc91e39a88/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -186,7 +186,7 @@ impl Step for Llvm {\n         }\n \n         // http://llvm.org/docs/HowToCrossCompileLLVM.html\n-        if target != build.build {\n+        if target != build.build && !emscripten {\n             builder.ensure(Llvm {\n                 target: build.build,\n                 emscripten: false,"}, {"sha": "673fa4c0c4bc09b52a01d463c589bb3be0d5b6b1", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39abcc04139a0fd24422f422271849dc91e39a88/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/39abcc04139a0fd24422f422271849dc91e39a88/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   clang \\"}, {"sha": "a2b424b600235af58f453577c2da1b0e1de2ffa5", "filename": "src/dlmalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdlmalloc?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -1 +1 @@\n-Subproject commit d3812c3accaee7ad23068ed4fc089cc05c7a538f\n+Subproject commit a2b424b600235af58f453577c2da1b0e1de2ffa5"}, {"sha": "345447948f7a51eca970fa036cefd613d54a4f79", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -1 +1 @@\n-Subproject commit 0a95675bab808c49f86208bacc89c5d9c53ac43f\n+Subproject commit 345447948f7a51eca970fa036cefd613d54a4f79"}, {"sha": "95a507ab9e3519115c118b90fc549e0f88d67ba1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39abcc04139a0fd24422f422271849dc91e39a88/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39abcc04139a0fd24422f422271849dc91e39a88/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -1026,9 +1026,12 @@ fn import_path_to_string(names: &[SpannedIdent],\n         if names.is_empty() {\n             import_directive_subclass_to_string(subclass)\n         } else {\n-            (format!(\"{}::{}\",\n+            let x = format!(\"{}::{}\",\n                      names_to_string(names),\n-                     import_directive_subclass_to_string(subclass)))\n+                     import_directive_subclass_to_string(subclass));\n+            assert!(!names.is_empty());\n+            assert!(!x.starts_with(\"::\"));\n+            return x\n         }\n     }\n }"}, {"sha": "9f81beaf32608fbe1fe0f2a82f974e800e9d8c62", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -1 +1 @@\n-Subproject commit bc344d5bc23c61ff9baf82d268a0edf199933cc3\n+Subproject commit 9f81beaf32608fbe1fe0f2a82f974e800e9d8c62"}, {"sha": "4dfc4029d75dcbeee5b186eb1bbb0ecc1f82f6a3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39abcc04139a0fd24422f422271849dc91e39a88/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39abcc04139a0fd24422f422271849dc91e39a88/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -552,9 +552,11 @@ static unsigned fromRust(LLVMRustDIFlags Flags) {\n   if (isSet(Flags & LLVMRustDIFlags::FlagRValueReference)) {\n     Result |= DINode::DIFlags::FlagRValueReference;\n   }\n+#if LLVM_VERSION_LE(4, 0)\n   if (isSet(Flags & LLVMRustDIFlags::FlagExternalTypeRef)) {\n     Result |= DINode::DIFlags::FlagExternalTypeRef;\n   }\n+#endif\n   if (isSet(Flags & LLVMRustDIFlags::FlagIntroducedVirtual)) {\n     Result |= DINode::DIFlags::FlagIntroducedVirtual;\n   }"}, {"sha": "3cd044708cee2a6651489243f61829df9479a462", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39abcc04139a0fd24422f422271849dc91e39a88/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/39abcc04139a0fd24422f422271849dc91e39a88/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2018-01-25\n+2018-02-09"}, {"sha": "2b82a8943636e4364b9af550d6d42bc6777af1be", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/39abcc04139a0fd24422f422271849dc91e39a88/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39abcc04139a0fd24422f422271849dc91e39a88/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=39abcc04139a0fd24422f422271849dc91e39a88", "patch": "@@ -15,11 +15,14 @@\n // Unfortunately, LLVM has no \"disable\" option for this, so we have to set\n // \"enable\" to 0 instead.\n \n-// compile-flags:-g -Cllvm-args=-enable-tail-merge=0\n+// compile-flags:-g -Cllvm-args=-enable-tail-merge=0 -Cllvm-args=-opt-bisect-limit=0\n // ignore-pretty issue #37195\n // ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n \n+// note that above `-opt-bisect-limit=0` is used to basically disable\n+// optimizations\n+\n use std::env;\n \n #[path = \"backtrace-debuginfo-aux.rs\"] mod aux;\n@@ -114,25 +117,34 @@ fn outer(mut counter: i32, main_pos: Pos) {\n     inner_inlined(&mut counter, main_pos, pos!());\n }\n \n-fn check_trace(output: &str, error: &str) {\n+fn check_trace(output: &str, error: &str) -> Result<(), String> {\n     // reverse the position list so we can start with the last item (which was the first line)\n     let mut remaining: Vec<&str> = output.lines().map(|s| s.trim()).rev().collect();\n \n-    assert!(error.contains(\"stack backtrace\"), \"no backtrace in the error: {}\", error);\n+    if !error.contains(\"stack backtrace\") {\n+        return Err(format!(\"no backtrace found in stderr:\\n{}\", error))\n+    }\n     for line in error.lines() {\n         if !remaining.is_empty() && line.contains(remaining.last().unwrap()) {\n             remaining.pop();\n         }\n     }\n-    assert!(remaining.is_empty(),\n-            \"trace does not match position list: {}\\n---\\n{}\", error, output);\n+    if !remaining.is_empty() {\n+        return Err(format!(\"trace does not match position list\\n\\\n+            still need to find {:?}\\n\\n\\\n+            --- stdout\\n{}\\n\\\n+            --- stderr\\n{}\",\n+            remaining, output, error))\n+    }\n+    Ok(())\n }\n \n fn run_test(me: &str) {\n     use std::str;\n     use std::process::Command;\n \n     let mut i = 0;\n+    let mut errors = Vec::new();\n     loop {\n         let out = Command::new(me)\n                           .env(\"RUST_BACKTRACE\", \"full\")\n@@ -143,10 +155,20 @@ fn run_test(me: &str) {\n             assert!(output.contains(\"done.\"), \"bad output for successful run: {}\", output);\n             break;\n         } else {\n-            check_trace(output, error);\n+            if let Err(e) = check_trace(output, error) {\n+                errors.push(e);\n+            }\n         }\n         i += 1;\n     }\n+    if errors.len() > 0 {\n+        for error in errors {\n+            println!(\"---------------------------------------\");\n+            println!(\"{}\", error);\n+        }\n+\n+        panic!(\"found some errors\");\n+    }\n }\n \n #[inline(never)]"}]}