{"sha": "3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "node_id": "C_kwDOAAsO6NoAKDNhMWFhM2M3NmViMDZiZjZlYmE5YzEwZWFjY2NlZDkyNDIwYzJmYWM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-16T23:37:56Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:34:52Z"}, "message": "Do not favor projection type when pointing out arg causing fulfillment error", "tree": {"sha": "6de1acfff58f9fe6967979a9662178585bc5d939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6de1acfff58f9fe6967979a9662178585bc5d939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "html_url": "https://github.com/rust-lang/rust/commit/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9cb19d26e3e868bc32a95b8cb1a003fa8d365a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cb19d26e3e868bc32a95b8cb1a003fa8d365a8", "html_url": "https://github.com/rust-lang/rust/commit/c9cb19d26e3e868bc32a95b8cb1a003fa8d365a8"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "f2f327e0812659bd1d415fb4c1073c584540b0e3", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "patch": "@@ -1742,7 +1742,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .inputs()\n             .iter()\n             .enumerate()\n-            .filter(|(_, ty)| ty.walk().any(|arg| arg == param_to_point_at))\n+            .filter(|(_, ty)| {\n+                let mut walk = ty.walk();\n+                while let Some(arg) = walk.next() {\n+                    if arg == param_to_point_at {\n+                        return true;\n+                    } else if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                        && let ty::Projection(..) = ty.kind()\n+                    {\n+                        // This logic may seem a bit strange, but typically when\n+                        // we have a projection type in a function signature, the\n+                        // argument that's being passed into that signature is\n+                        // not actually constraining that projection in a meaningful\n+                        // way. So we skip it, and see improvements in some UI tests\n+                        // due to it.\n+                        walk.skip_current_subtree();\n+                    }\n+                }\n+                false\n+            })\n             .collect();\n \n         if let [(idx, _)] = args_referencing_param.as_slice()"}, {"sha": "5edd5c864e1357b44b0c6407bef4d309bc3139ec", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "patch": "@@ -17,10 +17,12 @@ LL |     f1(2i32, 4u32);\n    |               ~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:5\n+  --> $DIR/associated-types-path-2.rs:29:8\n    |\n LL |     f1(2u32, 4u32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |     -- ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `f1`\n@@ -38,10 +40,12 @@ LL |     f1(2u32, 4u32);\n    = help: the trait `Foo` is implemented for `i32`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:5\n+  --> $DIR/associated-types-path-2.rs:35:8\n    |\n LL |     f1(2u32, 4i32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |     -- ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `f1`"}, {"sha": "a14a273b3ece97456f40a49e88eadb9493ca96bd", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-27675-unchecked-bounds.rs:15:31\n+  --> $DIR/issue-27675-unchecked-bounds.rs:15:12\n    |\n LL |     copy::<dyn Setup<From=T>>(t)\n-   |     ------------------------- ^ the trait `Copy` is not implemented for `T`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |            ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `copy`\n   --> $DIR/issue-27675-unchecked-bounds.rs:10:12"}, {"sha": "248fb75b4c4e682706124732573a6b5ef6d7e2ce", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "patch": "@@ -14,7 +14,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-69683.rs:30:10\n    |\n LL |     0u16.foo(b);\n-   |          ^^^ - type must be known at this point\n+   |          ^^^\n    |\n note: multiple `impl`s satisfying `u8: Element<_>` found\n   --> $DIR/issue-69683.rs:5:1"}, {"sha": "cbf09386654472d50aa65a437d43b7f696e4620a", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1aa3c76eb06bf6eba9c10eaccced92420c2fac/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=3a1aa3c76eb06bf6eba9c10eaccced92420c2fac", "patch": "@@ -1,14 +1,12 @@\n error[E0271]: type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n-  --> $DIR/enforce-supertrait-projection.rs:9:42\n+  --> $DIR/enforce-supertrait-projection.rs:9:17\n    |\n LL | fn transmute<A, B>(x: A) -> B {\n    |              -  - expected type parameter\n    |              |\n    |              found type parameter\n LL |     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-   |     ------------------------------------ ^ expected type parameter `B`, found type parameter `A`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `B`, found type parameter `A`\n    |\n    = note: expected type parameter `B`\n               found type parameter `A`"}]}