{"sha": "389365631d3e6d2f533f896635e7768f26359575", "node_id": "C_kwDOAAsO6NoAKDM4OTM2NTYzMWQzZTZkMmY1MzNmODk2NjM1ZTc3NjhmMjYzNTk1NzU", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-09-24T02:15:12Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-09-24T02:15:12Z"}, "message": "Fix tidy and respond to some feedback", "tree": {"sha": "dbb18cbb921cf2dae0cbd78637223e57f2708a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb18cbb921cf2dae0cbd78637223e57f2708a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389365631d3e6d2f533f896635e7768f26359575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389365631d3e6d2f533f896635e7768f26359575", "html_url": "https://github.com/rust-lang/rust/commit/389365631d3e6d2f533f896635e7768f26359575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389365631d3e6d2f533f896635e7768f26359575/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8aef40b1e3a7151daebe7acea2c8b0117a8c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8aef40b1e3a7151daebe7acea2c8b0117a8c9f", "html_url": "https://github.com/rust-lang/rust/commit/ab8aef40b1e3a7151daebe7acea2c8b0117a8c9f"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "917bf4ecd8c4a9117a5e80a6421beadb7836d0e4", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/389365631d3e6d2f533f896635e7768f26359575/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389365631d3e6d2f533f896635e7768f26359575/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=389365631d3e6d2f533f896635e7768f26359575", "patch": "@@ -617,6 +617,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for (_, captures) in &mut root_var_min_capture_list {\n             captures.sort_by(|capture1, capture2| {\n                 for (p1, p2) in capture1.place.projections.iter().zip(&capture2.place.projections) {\n+                    // We do not need to look at the `Projection.ty` fields here because at each\n+                    // step of the iteration, the projections will either be the same and therefore\n+                    // the types must be as well or the current projection will be different and\n+                    // we will return the result of comparing the field indexes.\n                     match (p1.kind, p2.kind) {\n                         // Paths are the same, continue to next loop.\n                         (ProjectionKind::Deref, ProjectionKind::Deref) => {}\n@@ -628,7 +632,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             return i1.cmp(&i2);\n                         }\n \n-                        (l, r) => bug!(\"ProjectionKinds were different: ({:?}, {:?})\", l, r),\n+                        // We should have either a pair of `Deref`s or a pair of `Field`s.\n+                        // Anything else is a bug.\n+                        (\n+                            l @ (ProjectionKind::Deref | ProjectionKind::Field(..)),\n+                            r @ (ProjectionKind::Deref | ProjectionKind::Field(..)),\n+                        ) => bug!(\n+                            \"ProjectionKinds Deref and Field were mismatched: ({:?}, {:?})\",\n+                            l,\n+                            r\n+                        ),\n+                        (\n+                            l\n+                            @\n+                            (ProjectionKind::Index\n+                            | ProjectionKind::Subslice\n+                            | ProjectionKind::Deref\n+                            | ProjectionKind::Field(..)),\n+                            r\n+                            @\n+                            (ProjectionKind::Index\n+                            | ProjectionKind::Subslice\n+                            | ProjectionKind::Deref\n+                            | ProjectionKind::Field(..)),\n+                        ) => bug!(\n+                            \"ProjectionKinds Index or Subslice were unexpected: ({:?}, {:?})\",\n+                            l,\n+                            r\n+                        ),\n                     }\n                 }\n "}, {"sha": "ca3bfff2cf30a4459afb2c7ce1a0a213b0b86538", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389365631d3e6d2f533f896635e7768f26359575/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389365631d3e6d2f533f896635e7768f26359575/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs?ref=389365631d3e6d2f533f896635e7768f26359575", "patch": "@@ -94,5 +94,5 @@ fn test_three() {\n fn main() {\n     test_one();\n     test_two();\n-    test_three(); \n+    test_three();\n }"}, {"sha": "3d39cb7ed481bda2f6ab03d68bfd766787acadd2", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389365631d3e6d2f533f896635e7768f26359575/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389365631d3e6d2f533f896635e7768f26359575/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs?ref=389365631d3e6d2f533f896635e7768f26359575", "patch": "@@ -23,6 +23,6 @@ fn main() {\n     let a = A { x: Dropable(format!(\"x\")), y: Dropable(format!(\"y\")) };\n \n     let c = move || println!(\"{:?} {:?}\", a.y, a.x);\n-    \n+\n     c();\n }"}]}