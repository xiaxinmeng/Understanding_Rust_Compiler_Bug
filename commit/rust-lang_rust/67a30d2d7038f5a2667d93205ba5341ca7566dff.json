{"sha": "67a30d2d7038f5a2667d93205ba5341ca7566dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTMwZDJkNzAzOGY1YTI2NjdkOTMyMDViYTUzNDFjYTc1NjZkZmY=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-20T18:38:55Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:54:18Z"}, "message": "Fixed ICE when type arguments are specified on `Self` type.", "tree": {"sha": "0882109790e6bb7d679afad8070bf5b290ac6025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0882109790e6bb7d679afad8070bf5b290ac6025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a30d2d7038f5a2667d93205ba5341ca7566dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a30d2d7038f5a2667d93205ba5341ca7566dff", "html_url": "https://github.com/rust-lang/rust/commit/67a30d2d7038f5a2667d93205ba5341ca7566dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a30d2d7038f5a2667d93205ba5341ca7566dff/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3f96d3027308f18037d2291700f23fa1adce19", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3f96d3027308f18037d2291700f23fa1adce19", "html_url": "https://github.com/rust-lang/rust/commit/6a3f96d3027308f18037d2291700f23fa1adce19"}], "stats": {"total": 102, "additions": 71, "deletions": 31}, "files": [{"sha": "f819a5f642fcb203704bd0859dd51d9e8280a241", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=67a30d2d7038f5a2667d93205ba5341ca7566dff", "patch": "@@ -1431,7 +1431,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         self.normalize_ty(span, tcx.mk_projection(item_def_id, trait_ref.substs))\n     }\n \n-    pub fn prohibit_generics<'a, T: IntoIterator<Item = &'a hir::PathSegment>>(&self, segments: T) {\n+    pub fn prohibit_generics<'a, T: IntoIterator<Item = &'a hir::PathSegment>>(\n+            &self, segments: T) -> bool {\n+        let mut has_err = false;\n         for segment in segments {\n             segment.with_generic_args(|generic_args| {\n                 let (mut err_for_lt, mut err_for_ty) = (false, false);\n@@ -1440,6 +1442,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                         hir::GenericArg::Lifetime(lt) => {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n+                            has_err = true;\n                             (struct_span_err!(self.tcx().sess, lt.span, E0110,\n                                               \"lifetime arguments are not allowed on this entity\"),\n                              lt.span,\n@@ -1448,6 +1451,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                         hir::GenericArg::Type(ty) => {\n                             if err_for_ty { continue }\n                             err_for_ty = true;\n+                            has_err = true;\n                             (struct_span_err!(self.tcx().sess, ty.span, E0109,\n                                               \"type arguments are not allowed on this entity\"),\n                              ty.span,\n@@ -1461,11 +1465,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     }\n                 }\n                 for binding in &generic_args.bindings {\n+                    has_err = true;\n                     Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n                     break;\n                 }\n             })\n         }\n+        has_err\n     }\n \n     pub fn prohibit_assoc_ty_binding(tcx: TyCtxt, span: Span) {"}, {"sha": "c2b4078e91f159320402eb585b9db267ec560749", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=67a30d2d7038f5a2667d93205ba5341ca7566dff", "patch": "@@ -5123,13 +5123,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // errors if type parameters are provided in an inappropriate place.\n \n         let generic_segs: FxHashSet<_> = path_segs.iter().map(|PathSeg(_, index)| index).collect();\n-        AstConv::prohibit_generics(self, segments.iter().enumerate().filter_map(|(index, seg)| {\n+        let generics_has_err = AstConv::prohibit_generics(\n+                self, segments.iter().enumerate().filter_map(|(index, seg)| {\n             if !generic_segs.contains(&index) || is_alias_variant_ctor {\n                 Some(seg)\n             } else {\n                 None\n             }\n         }));\n+        if generics_has_err {\n+            // Don't try to infer type parameters when prohibited generic arguments were given.\n+            user_self_ty = None;\n+        }\n \n         match def {\n             Def::Local(nid) | Def::Upvar(nid, ..) => {\n@@ -5301,9 +5306,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n             // In the case of `Foo<T>::method` and `<Foo<T>>::method`, if `method`\n-            // is inherent, there is no `Self` parameter, instead, the impl needs\n+            // is inherent, there is no `Self` parameter; instead, the impl needs\n             // type parameters, which we can infer by unifying the provided `Self`\n             // with the substituted impl type.\n+            // This also occurs for an enum variant on a type alias.\n             let ty = tcx.type_of(impl_def_id);\n \n             let impl_ty = self.instantiate_type_scheme(span, &substs, &ty);"}, {"sha": "6eddd70964546ce9a6735932b8fb78594ce3140b", "filename": "src/test/ui/enum-variant-generic-args.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs?ref=67a30d2d7038f5a2667d93205ba5341ca7566dff", "patch": "@@ -7,19 +7,20 @@ type AliasFixed = Enum<()>;\n impl<T> Enum<T> {\n     fn ts_variant() {\n         Self::TSVariant(());\n-        //~^ ERROR type parameters are not allowed on this name [E0109]\n+        //~^ ERROR mismatched types [E0308]\n         Self::TSVariant::<()>(());\n         //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Self::<()>::TSVariant(());\n         //~^ ERROR type arguments are not allowed on this entity [E0109]\n+        //~^^ ERROR mismatched types [E0308]\n         Self::<()>::TSVariant::<()>(());\n         //~^ ERROR type arguments are not allowed on this entity [E0109]\n         //~^^ ERROR type arguments are not allowed on this entity [E0109]\n     }\n \n     fn s_variant() {\n         Self::SVariant { v: () };\n-        //~^ ERROR type parameters are not allowed on this name [E0109]\n+        //~^ ERROR mismatched types [E0308]\n         Self::SVariant::<()> { v: () };\n         //~^ ERROR type arguments are not allowed on this entity [E0109]\n         //~^^ ERROR mismatched types [E0308]"}, {"sha": "4d3b576734643f5c32295d611cad086fc652368e", "filename": "src/test/ui/enum-variant-generic-args.stderr", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a30d2d7038f5a2667d93205ba5341ca7566dff/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.stderr?ref=67a30d2d7038f5a2667d93205ba5341ca7566dff", "patch": "@@ -1,35 +1,62 @@\n+error[E0308]: mismatched types\n+  --> $DIR/enum-variant-generic-args.rs:9:25\n+   |\n+LL |         Self::TSVariant(());\n+   |                         ^^ expected type parameter, found ()\n+   |\n+   = note: expected type `T`\n+              found type `()`\n+\n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:9:27\n+  --> $DIR/enum-variant-generic-args.rs:11:27\n    |\n LL |         Self::TSVariant::<()>(());\n    |                           ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:11:16\n+  --> $DIR/enum-variant-generic-args.rs:13:16\n    |\n LL |         Self::<()>::TSVariant(());\n    |                ^^ type argument not allowed\n \n+error[E0308]: mismatched types\n+  --> $DIR/enum-variant-generic-args.rs:13:31\n+   |\n+LL |         Self::<()>::TSVariant(());\n+   |                               ^^ expected type parameter, found ()\n+   |\n+   = note: expected type `T`\n+              found type `()`\n+\n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:13:16\n+  --> $DIR/enum-variant-generic-args.rs:16:16\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n    |                ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:13:33\n+  --> $DIR/enum-variant-generic-args.rs:16:33\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n    |                                 ^^ type argument not allowed\n \n+error[E0308]: mismatched types\n+  --> $DIR/enum-variant-generic-args.rs:22:29\n+   |\n+LL |         Self::SVariant { v: () };\n+   |                             ^^ expected type parameter, found ()\n+   |\n+   = note: expected type `T`\n+              found type `()`\n+\n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:19:26\n+  --> $DIR/enum-variant-generic-args.rs:24:26\n    |\n LL |         Self::SVariant::<()> { v: () };\n    |                          ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:19:35\n+  --> $DIR/enum-variant-generic-args.rs:24:35\n    |\n LL |         Self::SVariant::<()> { v: () };\n    |                                   ^^ expected type parameter, found ()\n@@ -38,13 +65,13 @@ LL |         Self::SVariant::<()> { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:22:16\n+  --> $DIR/enum-variant-generic-args.rs:27:16\n    |\n LL |         Self::<()>::SVariant { v: () };\n    |                ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:22:35\n+  --> $DIR/enum-variant-generic-args.rs:27:35\n    |\n LL |         Self::<()>::SVariant { v: () };\n    |                                   ^^ expected type parameter, found ()\n@@ -53,19 +80,19 @@ LL |         Self::<()>::SVariant { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:25:16\n+  --> $DIR/enum-variant-generic-args.rs:30:16\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:25:32\n+  --> $DIR/enum-variant-generic-args.rs:30:32\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                                ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:25:41\n+  --> $DIR/enum-variant-generic-args.rs:30:41\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                                         ^^ expected type parameter, found ()\n@@ -74,90 +101,90 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:35:29\n+  --> $DIR/enum-variant-generic-args.rs:40:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:38:24\n+  --> $DIR/enum-variant-generic-args.rs:43:24\n    |\n LL |     Alias::TSVariant::<()>(());\n    |                        ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:40:30\n+  --> $DIR/enum-variant-generic-args.rs:45:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n    |                              ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:43:29\n+  --> $DIR/enum-variant-generic-args.rs:48:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:45:18\n+  --> $DIR/enum-variant-generic-args.rs:50:18\n    |\n LL |     AliasFixed::<()>::TSVariant(());\n    |                  ^^ unexpected type argument\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:47:18\n+  --> $DIR/enum-variant-generic-args.rs:52:18\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                  ^^ unexpected type argument\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:47:35\n+  --> $DIR/enum-variant-generic-args.rs:52:35\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                                   ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:53:28\n+  --> $DIR/enum-variant-generic-args.rs:58:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:56:23\n+  --> $DIR/enum-variant-generic-args.rs:61:23\n    |\n LL |     Alias::SVariant::<()> { v: () };\n    |                       ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:58:29\n+  --> $DIR/enum-variant-generic-args.rs:63:29\n    |\n LL |     Alias::<()>::SVariant::<()> { v: () };\n    |                             ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:61:28\n+  --> $DIR/enum-variant-generic-args.rs:66:28\n    |\n LL |     AliasFixed::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:63:18\n+  --> $DIR/enum-variant-generic-args.rs:68:18\n    |\n LL |     AliasFixed::<()>::SVariant { v: () };\n    |                  ^^ unexpected type argument\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:65:18\n+  --> $DIR/enum-variant-generic-args.rs:70:18\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                  ^^ unexpected type argument\n \n error[E0109]: type arguments are not allowed on this entity\n-  --> $DIR/enum-variant-generic-args.rs:65:34\n+  --> $DIR/enum-variant-generic-args.rs:70:34\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                                  ^^ type argument not allowed\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 28 previous errors\n \n Some errors occurred: E0107, E0109, E0308.\n For more information about an error, try `rustc --explain E0107`."}]}