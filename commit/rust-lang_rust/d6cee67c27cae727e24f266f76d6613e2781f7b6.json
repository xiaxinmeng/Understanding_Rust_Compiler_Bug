{"sha": "d6cee67c27cae727e24f266f76d6613e2781f7b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Y2VlNjdjMjdjYWU3MjdlMjRmMjY2Zjc2ZDY2MTNlMjc4MWY3YjY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-02-22T14:10:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-08T15:36:37Z"}, "message": "Unit (and regression) tests for warning cycle code.", "tree": {"sha": "d7feda9ec8eedf56985f9e216d81706eed98df67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7feda9ec8eedf56985f9e216d81706eed98df67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6cee67c27cae727e24f266f76d6613e2781f7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cee67c27cae727e24f266f76d6613e2781f7b6", "html_url": "https://github.com/rust-lang/rust/commit/d6cee67c27cae727e24f266f76d6613e2781f7b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6cee67c27cae727e24f266f76d6613e2781f7b6/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e40170be3d8016437d421828ffc36b43f676c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e40170be3d8016437d421828ffc36b43f676c2", "html_url": "https://github.com/rust-lang/rust/commit/98e40170be3d8016437d421828ffc36b43f676c2"}], "stats": {"total": 199, "additions": 140, "deletions": 59}, "files": [{"sha": "84fcb5e2880a79c017aac5e7bd209f5def992e42", "filename": "src/test/ui/impl-trait/issue-57979-impl-trait-in-path.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.rs?ref=d6cee67c27cae727e24f266f76d6613e2781f7b6", "patch": "@@ -0,0 +1,37 @@\n+// rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n+// properly check syntax hidden behind an associated type projection.\n+// Here we test behavior of occurrences of `impl Trait` within a path\n+// component in that context.\n+\n+mod allowed {\n+    #![allow(nested_impl_trait)]\n+\n+    pub trait Bar { }\n+    pub trait Quux<T> { type Assoc; }\n+    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+    impl<T> Quux<T> for () { type Assoc = u32; }\n+}\n+\n+mod warned {\n+    #![warn(nested_impl_trait)]\n+\n+    pub trait Bar { }\n+    pub trait Quux<T> { type Assoc; }\n+    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+    //~^ WARN `impl Trait` is not allowed in path parameters\n+    //~| WARN will become a hard error in a future release!\n+    impl<T> Quux<T> for () { type Assoc = u32; }\n+}\n+\n+mod denied {\n+    #![deny(nested_impl_trait)]\n+\n+    pub trait Bar { }\n+    pub trait Quux<T> { type Assoc; }\n+    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+    //~^ ERROR `impl Trait` is not allowed in path parameters\n+    //~| WARN will become a hard error in a future release!\n+    impl<T> Quux<T> for () { type Assoc = u32; }\n+}\n+\n+fn main() { }"}, {"sha": "982ecba291f793f8576d876a698806f1e48f73cd", "filename": "src/test/ui/impl-trait/issue-57979-impl-trait-in-path.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-impl-trait-in-path.stderr?ref=d6cee67c27cae727e24f266f76d6613e2781f7b6", "patch": "@@ -0,0 +1,30 @@\n+warning: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:20:52\n+   |\n+LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:16:13\n+   |\n+LL |     #![warn(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:31:52\n+   |\n+LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:27:13\n+   |\n+LL |     #![deny(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c20ffc7c6724d887b8d5cc630cfa2decdda3eab", "filename": "src/test/ui/impl-trait/issue-57979-nested-impl-trait-in-assoc-proj.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs?ref=d6cee67c27cae727e24f266f76d6613e2781f7b6", "patch": "@@ -0,0 +1,37 @@\n+// rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n+// properly check syntax hidden behind an associated type projection.\n+// Here we test behavior of occurrences of `impl Trait` within an\n+// `impl Trait` in that context.\n+\n+mod allowed {\n+    #![allow(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+}\n+\n+mod warned {\n+    #![warn(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+    //~^ WARN nested `impl Trait` is not allowed\n+    //~| WARN will become a hard error in a future release!\n+}\n+\n+mod denied {\n+    #![deny(nested_impl_trait)]\n+\n+    pub trait Foo<T> { }\n+    pub trait Bar { }\n+    pub trait Quux { type Assoc; }\n+    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+    //~^ ERROR nested `impl Trait` is not allowed\n+    //~| WARN will become a hard error in a future release!\n+}\n+\n+fn main() { }"}, {"sha": "508aea243213275ab2fe3b81f8db5f2c5cc3521f", "filename": "src/test/ui/impl-trait/issue-57979-nested-impl-trait-in-assoc-proj.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6cee67c27cae727e24f266f76d6613e2781f7b6/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr?ref=d6cee67c27cae727e24f266f76d6613e2781f7b6", "patch": "@@ -0,0 +1,36 @@\n+warning: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:21:45\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                    ---------^^^^^^^^-\n+   |                                    |        |\n+   |                                    |        nested `impl Trait` here\n+   |                                    outer `impl Trait`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:16:13\n+   |\n+LL |     #![warn(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:32:45\n+   |\n+LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                    ---------^^^^^^^^-\n+   |                                    |        |\n+   |                                    |        nested `impl Trait` here\n+   |                                    outer `impl Trait`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:27:13\n+   |\n+LL |     #![deny(nested_impl_trait)]\n+   |             ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+\n+error: aborting due to previous error\n+"}, {"sha": "abd46b60ab194498d83f429979c427695166735c", "filename": "src/test/ui/issues/issue-57979.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98e40170be3d8016437d421828ffc36b43f676c2/src%2Ftest%2Fui%2Fissues%2Fissue-57979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e40170be3d8016437d421828ffc36b43f676c2/src%2Ftest%2Fui%2Fissues%2Fissue-57979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57979.rs?ref=98e40170be3d8016437d421828ffc36b43f676c2", "patch": "@@ -1,42 +0,0 @@\n-// Regression test for #57979. This situation is meant to be an error.\n-// As noted in the issue thread, we decided to forbid nested impl\n-// trait of this kind:\n-//\n-// ```rust\n-// fn foo() -> impl Foo<impl Bar> { .. }\n-// ```\n-//\n-// Basically there are two hidden variables here, let's call them `X`\n-// and `Y`, and we must prove that:\n-//\n-// ```\n-// X: Foo<Y>\n-// Y: Bar\n-// ```\n-//\n-// However, the user is only giving us the return type `X`. It's true\n-// that in some cases, we can infer `Y` from `X`, because `X` only\n-// implements `Foo` for one type (and indeed the compiler does\n-// inference of this kind), but I do recall that we intended to forbid\n-// this -- in part because such inference is fragile, and there is not\n-// necessarily a way for the user to be more explicit should the\n-// inference fail (so you could get stuck with no way to port your\n-// code forward if, for example, more impls are added to an existing\n-// type).\n-//\n-// The same seems to apply in this situation. Here there are three impl traits, so we have\n-//\n-// ```\n-// X: IntoIterator<Item = Y>\n-// Y: Borrow<Data<Z>>\n-// Z: AsRef<[u8]>\n-// ```\n-\n-use std::borrow::Borrow;\n-\n-pub struct Data<TBody>(TBody);\n-\n-pub fn collect(_: impl IntoIterator<Item = impl Borrow<Data<impl AsRef<[u8]>>>>) {\n-    //~^ ERROR\n-    unimplemented!()\n-}"}, {"sha": "488f30ab7c5a7d6f6eda064f831e80b6ae4ab614", "filename": "src/test/ui/issues/issue-57979.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98e40170be3d8016437d421828ffc36b43f676c2/src%2Ftest%2Fui%2Fissues%2Fissue-57979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98e40170be3d8016437d421828ffc36b43f676c2/src%2Ftest%2Fui%2Fissues%2Fissue-57979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57979.stderr?ref=98e40170be3d8016437d421828ffc36b43f676c2", "patch": "@@ -1,17 +0,0 @@\n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979.rs:39:61\n-   |\n-LL | pub fn collect(_: impl IntoIterator<Item = impl Borrow<Data<impl AsRef<[u8]>>>>) {\n-   |                                            -----------------^^^^^^^^^^^^^^^^--\n-   |                                            |                |\n-   |                                            |                nested `impl Trait` here\n-   |                                            outer `impl Trait`\n-\n-error[E0601]: `main` function not found in crate `issue_57979`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-57979.rs`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0601, E0666.\n-For more information about an error, try `rustc --explain E0601`."}]}