{"sha": "80828f26bb54cbd4508496927be58a5b4b591686", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODI4ZjI2YmI1NGNiZDQ1MDg0OTY5MjdiZTU4YTViNGI1OTE2ODY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-02T16:10:15Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-02T16:11:32Z"}, "message": "Improve check_ref suggestions in macros.", "tree": {"sha": "1e04717cad05d1be82a7ea3674d20500a34b3cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e04717cad05d1be82a7ea3674d20500a34b3cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80828f26bb54cbd4508496927be58a5b4b591686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80828f26bb54cbd4508496927be58a5b4b591686", "html_url": "https://github.com/rust-lang/rust/commit/80828f26bb54cbd4508496927be58a5b4b591686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80828f26bb54cbd4508496927be58a5b4b591686/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716394d6581b60c75cfdd88b8e5b876f2db88b62", "url": "https://api.github.com/repos/rust-lang/rust/commits/716394d6581b60c75cfdd88b8e5b876f2db88b62", "html_url": "https://github.com/rust-lang/rust/commit/716394d6581b60c75cfdd88b8e5b876f2db88b62"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "9cc435a0dec2ec01a45e2a32cd562e5b4d25d71a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/80828f26bb54cbd4508496927be58a5b4b591686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80828f26bb54cbd4508496927be58a5b4b591686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=80828f26bb54cbd4508496927be58a5b4b591686", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n@@ -412,25 +413,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n-        let sm = self.sess().source_map();\n+        let sess = self.sess();\n         let sp = expr.span;\n-        if sm.is_imported(sp) {\n-            // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n-            // call span, but that breaks down when the type error comes from multiple calls down.\n+\n+        // If the span is from an external macro, there's no suggestion we can make.\n+        if in_external_macro(sess, sp) {\n             return None;\n         }\n \n+        let sm = sess.source_map();\n+\n         let replace_prefix = |s: &str, old: &str, new: &str| {\n             s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n         };\n \n         let is_struct_pat_shorthand_field =\n             self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, sp);\n \n-        // If the span is from a macro, then it's hard to extract the text\n-        // and make a good suggestion, so don't bother.\n-        let is_macro = sp.from_expansion() && sp.desugaring_kind().is_none();\n-\n         // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n         let expr = expr.peel_drop_temps();\n \n@@ -570,10 +569,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, ref expr),\n                 _,\n                 &ty::Ref(_, checked, _),\n-            ) if {\n-                self.infcx.can_sub(self.param_env, checked, &expected).is_ok() && !is_macro\n-            } =>\n-            {\n+            ) if self.infcx.can_sub(self.param_env, checked, &expected).is_ok() => {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n@@ -589,13 +585,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     return None;\n                 }\n-                if let Ok(code) = sm.span_to_snippet(expr.span) {\n-                    return Some((\n-                        sp,\n-                        \"consider removing the borrow\",\n-                        code,\n-                        Applicability::MachineApplicable,\n-                    ));\n+                if sp.contains(expr.span) {\n+                    if let Ok(code) = sm.span_to_snippet(expr.span) {\n+                        return Some((\n+                            sp,\n+                            \"consider removing the borrow\",\n+                            code,\n+                            Applicability::MachineApplicable,\n+                        ));\n+                    }\n                 }\n             }\n             (\n@@ -643,7 +641,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            _ if sp == expr.span && !is_macro => {\n+            _ if sp == expr.span => {\n                 if let Some(steps) = self.deref_steps(checked_ty, expected) {\n                     let expr = expr.peel_blocks();\n "}]}