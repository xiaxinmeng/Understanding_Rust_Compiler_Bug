{"sha": "3a0358783695991a9a06c9c8f96906087b95e400", "node_id": "C_kwDOAAsO6NoAKDNhMDM1ODc4MzY5NTk5MWE5YTA2YzljOGY5NjkwNjA4N2I5NWU0MDA", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-18T14:45:48Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-19T10:04:15Z"}, "message": "Consider lint check attributes on match arms in match checks", "tree": {"sha": "c535c1c69598edb430ffd24251fe3179a71033a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c535c1c69598edb430ffd24251fe3179a71033a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0358783695991a9a06c9c8f96906087b95e400", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRnSZ8ACgkQ4laYqTBY\nYXFPZg//YNILEYIGsskG+BBZBOII4BIWzMPvH/oeni+LtTEG7N5c2LcOEeGYzCmR\njIc9ectf5mtPq1HOlsQcJsdR/npTnI355PeX+LBjtqEGfkHv1oSlCHKZ5MZYipoB\nh44LoRmSQA3PcJN9ohuUqXvP//uN0KQApEn1S+DiXlCYI4yVSySehqH9hv4zqUxm\nVNxDHqFeYupFYpwWEXAk3x+mMNvsZVfQmnFld2+vXRtHJJ8EHHf3rvVJ77/G3Yfy\nhENiq2b5DS54Aty+0A4TshJfn+huDf8i/MPs74uPpqThdOPH3FTFue9SdKxrZPQ8\nAQP6rjo9dlQ5kWCZ1w//o1Rea2HEQUStQchfVjABCebcWFmzRlu43lBthAVkCc1m\nIXgIHgesQybtoQS2H11RRWN3kXs1WxGgGvQO7fytsQ1onHDrJZT0q81bYPzpr7pD\nXJf3VzwgZkgAjrDl+cWt77vU7E39vIZ1nGjlFlVOP9qKpqfE1O/bxB2PirIs51SK\nVo21IQl1kv1cktPiNf3PmP25vyyDQGn+6ypLVE3eqxzu4FkM5rbQTBL5UH65QnaO\nYB55d5IqplXqPOLosKuM9CFRAKAKedMaArjKFf+V3eCGC6d1sMF6IujGf9N6VAAW\n+fVzgOL27K6Vw3XBxJaqflPkQetcjfh5mB3UchgiFWmlrtbDPng=\n=2rfq\n-----END PGP SIGNATURE-----", "payload": "tree c535c1c69598edb430ffd24251fe3179a71033a1\nparent ddafe234018f75f479b359a958fd09942739f954\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1684421148 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1684490655 +0900\n\nConsider lint check attributes on match arms in match checks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0358783695991a9a06c9c8f96906087b95e400", "html_url": "https://github.com/rust-lang/rust/commit/3a0358783695991a9a06c9c8f96906087b95e400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0358783695991a9a06c9c8f96906087b95e400/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddafe234018f75f479b359a958fd09942739f954", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddafe234018f75f479b359a958fd09942739f954", "html_url": "https://github.com/rust-lang/rust/commit/ddafe234018f75f479b359a958fd09942739f954"}], "stats": {"total": 111, "additions": 88, "deletions": 23}, "files": [{"sha": "3d4f2cad04769fa03f6d15b4b8af413f68a2c9e8", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3a0358783695991a9a06c9c8f96906087b95e400/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0358783695991a9a06c9c8f96906087b95e400/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=3a0358783695991a9a06c9c8f96906087b95e400", "patch": "@@ -90,35 +90,34 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for MatchVisitor<'a, '_, 'tcx> {\n \n     #[instrument(level = \"trace\", skip(self))]\n     fn visit_arm(&mut self, arm: &Arm<'tcx>) {\n-        match arm.guard {\n-            Some(Guard::If(expr)) => {\n-                self.with_let_source(LetSource::IfLetGuard, |this| {\n-                    this.visit_expr(&this.thir[expr])\n-                });\n-            }\n-            Some(Guard::IfLet(ref pat, expr)) => {\n-                self.with_let_source(LetSource::IfLetGuard, |this| {\n-                    this.check_let(pat, expr, LetSource::IfLetGuard, pat.span);\n-                    this.visit_pat(pat);\n-                    this.visit_expr(&this.thir[expr]);\n-                });\n+        self.with_lint_level(arm.lint_level, |this| {\n+            match arm.guard {\n+                Some(Guard::If(expr)) => {\n+                    this.with_let_source(LetSource::IfLetGuard, |this| {\n+                        this.visit_expr(&this.thir[expr])\n+                    });\n+                }\n+                Some(Guard::IfLet(ref pat, expr)) => {\n+                    this.with_let_source(LetSource::IfLetGuard, |this| {\n+                        this.check_let(pat, expr, LetSource::IfLetGuard, pat.span);\n+                        this.visit_pat(pat);\n+                        this.visit_expr(&this.thir[expr]);\n+                    });\n+                }\n+                None => {}\n             }\n-            None => {}\n-        }\n-        self.visit_pat(&arm.pattern);\n-        self.visit_expr(&self.thir[arm.body]);\n+            this.visit_pat(&arm.pattern);\n+            this.visit_expr(&self.thir[arm.body]);\n+        });\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n     fn visit_expr(&mut self, ex: &Expr<'tcx>) {\n         match ex.kind {\n             ExprKind::Scope { value, lint_level, .. } => {\n-                let old_lint_level = self.lint_level;\n-                if let LintLevel::Explicit(hir_id) = lint_level {\n-                    self.lint_level = hir_id;\n-                }\n-                self.visit_expr(&self.thir[value]);\n-                self.lint_level = old_lint_level;\n+                self.with_lint_level(lint_level, |this| {\n+                    this.visit_expr(&this.thir[value]);\n+                });\n                 return;\n             }\n             ExprKind::If { cond, then, else_opt, if_then_scope: _ } => {\n@@ -190,6 +189,17 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         self.let_source = old_let_source;\n     }\n \n+    fn with_lint_level(&mut self, new_lint_level: LintLevel, f: impl FnOnce(&mut Self)) {\n+        if let LintLevel::Explicit(hir_id) = new_lint_level {\n+            let old_lint_level = self.lint_level;\n+            self.lint_level = hir_id;\n+            f(self);\n+            self.lint_level = old_lint_level;\n+        } else {\n+            f(self);\n+        }\n+    }\n+\n     fn check_patterns(&self, pat: &Pat<'tcx>, rf: RefutableFlag) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n         check_for_bindings_named_same_as_variants(self, pat, rf);\n@@ -236,7 +246,9 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         for &arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             let arm = &self.thir.arms[arm];\n-            self.check_patterns(&arm.pattern, Refutable);\n+            self.with_lint_level(arm.lint_level, |this| {\n+                this.check_patterns(&arm.pattern, Refutable);\n+            });\n         }\n \n         let tarms: Vec<_> = arms"}, {"sha": "0c1146339c45fe7cd8c0ba4b5df4eb4f34753515", "filename": "tests/ui/lint/lint-match-arms-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a0358783695991a9a06c9c8f96906087b95e400/tests%2Fui%2Flint%2Flint-match-arms-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0358783695991a9a06c9c8f96906087b95e400/tests%2Fui%2Flint%2Flint-match-arms-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-match-arms-2.rs?ref=3a0358783695991a9a06c9c8f96906087b95e400", "patch": "@@ -0,0 +1,24 @@\n+#![feature(if_let_guard)]\n+#![allow(unused, non_snake_case)]\n+\n+enum E {\n+    A,\n+}\n+\n+#[allow(bindings_with_variant_name, irrefutable_let_patterns)]\n+fn foo() {\n+    match E::A {\n+        #[deny(bindings_with_variant_name)]\n+        A => {}\n+    //~^ ERROR pattern binding `A` is named the same as one of the variants of the type `E`\n+    }\n+\n+    match &E::A {\n+        #[deny(irrefutable_let_patterns)]\n+        a if let b = a => {}\n+    //~^ ERROR irrefutable `if let` guard pattern\n+        _ => {}\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "062d5c12e9610f2068fb57069fa99b00518536c1", "filename": "tests/ui/lint/lint-match-arms-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a0358783695991a9a06c9c8f96906087b95e400/tests%2Fui%2Flint%2Flint-match-arms-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a0358783695991a9a06c9c8f96906087b95e400/tests%2Fui%2Flint%2Flint-match-arms-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-match-arms-2.stderr?ref=3a0358783695991a9a06c9c8f96906087b95e400", "patch": "@@ -0,0 +1,29 @@\n+error[E0170]: pattern binding `A` is named the same as one of the variants of the type `E`\n+  --> $DIR/lint-match-arms-2.rs:12:9\n+   |\n+LL |         A => {}\n+   |         ^ help: to match on the variant, qualify the path: `E::A`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-match-arms-2.rs:11:16\n+   |\n+LL |         #[deny(bindings_with_variant_name)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: irrefutable `if let` guard pattern\n+  --> $DIR/lint-match-arms-2.rs:18:18\n+   |\n+LL |         a if let b = a => {}\n+   |                  ^\n+   |\n+   = note: this pattern will always match, so the guard is useless\n+   = help: consider removing the guard and adding a `let` inside the match arm\n+note: the lint level is defined here\n+  --> $DIR/lint-match-arms-2.rs:17:16\n+   |\n+LL |         #[deny(irrefutable_let_patterns)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0170`."}]}