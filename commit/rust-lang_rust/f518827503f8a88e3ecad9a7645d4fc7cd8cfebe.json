{"sha": "f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "node_id": "C_kwDOAAsO6NoAKGY1MTg4Mjc1MDNmOGE4OGUzZWNhZDlhNzY0NWQ0ZmM3Y2Q4Y2ZlYmU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T13:50:42Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T13:50:42Z"}, "message": "Use impl1 and impl2 instead of a and b prefixes", "tree": {"sha": "3e6fbae82e25f8911f1065833679fedd172393e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e6fbae82e25f8911f1065833679fedd172393e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHqujIACgkQgTGiTgx5\n76/+NQ/+NSB8sE8vBpndSukyNY9hUSpjlBahbH0CDzx78FZcKf0x3PTNrAAJHQHp\niesJggUaMT5ZK6L02MSEPJyg/XMRAlwGjqPpaec7mN7TvuU1F32tSaIGZRm6FhNn\neEVh38LPH6JYfoKcj17pNhX84phrPe8NChCRBLgnPIdyL33ZGsH6kO5x48tTCUHk\nIahZFkmIYhdell7hnJKreDPboqvBWl4DgECB+j9LZ4khc8YRRpTngktJ3U+PoD9N\nBR/IICcGbQVhpXfZrw29zBbRDf/m7wf1BTj4+yb0Olr/r5bc/qSoZYa3py+WWWUF\n9koQ6SVLEgYNzeyhV7VGbx2+jaJscYsYuTKWzsNjNMfCymjHTCEAXUZxmPSMnEcM\nEHbTxr+MHUXc4Xdv1gCGCemgnx+4drHxBqbcXb2WrMGb3sAR7tHzJiAWSOZlO+oB\nWxf2TeYM8fuXsYNI7LZZV2nr2572mQb39v6JBnypNQFGT3/pTw3FYP9lSSmCU1Ng\nhOI8K0X+u4ajNeOchZUhw+Xm0HfS/dYP4aJ+sKUI6PhBHmle5UE6TGgRLJ42gSAa\nTUUQO/M65nntowaK2D3+LHoUUoyts7gvkbfHbw9Xtc7uocjIMOT/XPbA+nROCwCO\nZWIXwykUinsLYA/f8T3fMu8AunaWLqBJ/Q4k1J+gFiwhcAzzdqw=\n=dYhK\n-----END PGP SIGNATURE-----", "payload": "tree 3e6fbae82e25f8911f1065833679fedd172393e3\nparent 2f004d2d401682e553af3984ebd9a3976885e752\nauthor Santiago Pastorino <spastorino@gmail.com> 1642773042 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1642773042 -0300\n\nUse impl1 and impl2 instead of a and b prefixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "html_url": "https://github.com/rust-lang/rust/commit/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f004d2d401682e553af3984ebd9a3976885e752", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f004d2d401682e553af3984ebd9a3976885e752", "html_url": "https://github.com/rust-lang/rust/commit/2f004d2d401682e553af3984ebd9a3976885e752"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "a875e2ccf950f542c393190639649fadeab359b8", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "patch": "@@ -140,21 +140,21 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n fn overlap<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     skip_leak_check: SkipLeakCheck,\n-    a_def_id: DefId,\n-    b_def_id: DefId,\n+    impl1_def_id: DefId,\n+    impl2_def_id: DefId,\n ) -> Option<OverlapResult<'tcx>> {\n-    debug!(\"overlap(a_def_id={:?}, b_def_id={:?})\", a_def_id, b_def_id);\n+    debug!(\"overlap(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n \n     selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n-        overlap_within_probe(selcx, skip_leak_check, a_def_id, b_def_id, snapshot)\n+        overlap_within_probe(selcx, skip_leak_check, impl1_def_id, impl2_def_id, snapshot)\n     })\n }\n \n fn overlap_within_probe<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     skip_leak_check: SkipLeakCheck,\n-    a_def_id: DefId,\n-    b_def_id: DefId,\n+    impl1_def_id: DefId,\n+    impl2_def_id: DefId,\n     snapshot: &CombinedSnapshot<'_, 'tcx>,\n ) -> Option<OverlapResult<'tcx>> {\n     fn loose_check<'cx, 'tcx>(\n@@ -182,17 +182,17 @@ fn overlap_within_probe<'cx, 'tcx>(\n     // empty environment.\n     let param_env = ty::ParamEnv::empty();\n \n-    let a_impl_header = with_fresh_ty_vars(selcx, param_env, a_def_id);\n-    let b_impl_header = with_fresh_ty_vars(selcx, param_env, b_def_id);\n+    let impl1_header = with_fresh_ty_vars(selcx, param_env, impl1_def_id);\n+    let impl2_header = with_fresh_ty_vars(selcx, param_env, impl2_def_id);\n \n-    debug!(\"overlap: a_impl_header={:?}\", a_impl_header);\n-    debug!(\"overlap: b_impl_header={:?}\", b_impl_header);\n+    debug!(\"overlap: impl1_header={:?}\", impl1_header);\n+    debug!(\"overlap: impl2_header={:?}\", impl2_header);\n \n     // Do `a` and `b` unify? If not, no overlap.\n     let obligations = match selcx\n         .infcx()\n         .at(&ObligationCause::dummy(), param_env)\n-        .eq_impl_headers(&a_impl_header, &b_impl_header)\n+        .eq_impl_headers(&impl1_header, &impl2_header)\n     {\n         Ok(InferOk { obligations, value: () }) => obligations,\n         Err(_) => {\n@@ -225,11 +225,11 @@ fn overlap_within_probe<'cx, 'tcx>(\n     // at some point an impl for `&'?a str: Error` could be added.\n     let infcx = selcx.infcx();\n     let tcx = infcx.tcx;\n-    let opt_failing_obligation = a_impl_header\n+    let opt_failing_obligation = impl1_header\n         .predicates\n         .iter()\n         .copied()\n-        .chain(b_impl_header.predicates)\n+        .chain(impl2_header.predicates)\n         .map(|p| infcx.resolve_vars_if_possible(p))\n         .map(|p| Obligation {\n             cause: ObligationCause::dummy(),\n@@ -241,8 +241,8 @@ fn overlap_within_probe<'cx, 'tcx>(\n         .find(|o| {\n             // if both impl headers are set to strict coherence it means that this will be accepted\n             // only if it's stated that T: !Trait. So only prove that the negated obligation holds.\n-            if tcx.has_attr(a_def_id, sym::rustc_strict_coherence)\n-                && tcx.has_attr(b_def_id, sym::rustc_strict_coherence)\n+            if tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence)\n+                && tcx.has_attr(impl2_def_id, sym::rustc_strict_coherence)\n             {\n                 strict_check(selcx, o)\n             } else {\n@@ -265,7 +265,7 @@ fn overlap_within_probe<'cx, 'tcx>(\n         }\n     }\n \n-    let impl_header = selcx.infcx().resolve_vars_if_possible(a_impl_header);\n+    let impl_header = selcx.infcx().resolve_vars_if_possible(impl1_header);\n     let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n     debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n "}]}