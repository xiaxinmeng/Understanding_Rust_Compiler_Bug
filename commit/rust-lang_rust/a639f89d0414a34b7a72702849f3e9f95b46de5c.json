{"sha": "a639f89d0414a34b7a72702849f3e9f95b46de5c", "node_id": "C_kwDOAAsO6NoAKGE2MzlmODlkMDQxNGEzNGI3YTcyNzAyODQ5ZjNlOWY5NWI0NmRlNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T08:29:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T08:29:57Z"}, "message": "Auto merge of #99066 - est31:remove_box_librustdoc, r=jsha\n\nRemove most box syntax from librustdoc\n\nThis is the second attempt after the librustdoc specific changes have been reverted from #87781 in #89134, due to a minor, but exant regression caused by the changes. ~~There have been some changes to librustdoc in the past and maybe thanks to them there is no regression any more. If there is still a regression, one can investigate further and maybe find ways to fix the regressions. Thus, i request a perf run.~~ Edit: turns out there is still a regression, but it's caused only by a subset of the changes. So I've changed this PR to only contains the changes that don't cause any performance regressions, keeping the regression causing changes for a later PR.", "tree": {"sha": "ecf1da9432968dd5223296bb6a7352a770605b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf1da9432968dd5223296bb6a7352a770605b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a639f89d0414a34b7a72702849f3e9f95b46de5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a639f89d0414a34b7a72702849f3e9f95b46de5c", "html_url": "https://github.com/rust-lang/rust/commit/a639f89d0414a34b7a72702849f3e9f95b46de5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a639f89d0414a34b7a72702849f3e9f95b46de5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e8b86c8c0aba65b2b0065265ce6d82d5a2c285", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e8b86c8c0aba65b2b0065265ce6d82d5a2c285", "html_url": "https://github.com/rust-lang/rust/commit/95e8b86c8c0aba65b2b0065265ce6d82d5a2c285"}, {"sha": "3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "html_url": "https://github.com/rust-lang/rust/commit/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a"}], "stats": {"total": 86, "additions": 47, "deletions": 39}, "files": [{"sha": "e6f006135e29a096ad9d42f8873ce4c48303aea0", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -117,15 +117,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             attrs: Default::default(),\n             visibility: Inherited,\n             item_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n-            kind: box ImplItem(Impl {\n+            kind: Box::new(ImplItem(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n                 trait_: Some(trait_ref.clean(self.cx)),\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),\n                 polarity,\n                 kind: ImplKind::Auto,\n-            }),\n+            })),\n             cfg: None,\n         })\n     }"}, {"sha": "12137667e7bf81108b31020dcc5f534850a0575a", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         attrs: Default::default(),\n                         visibility: Inherited,\n                         item_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n-                        kind: box ImplItem(Impl {\n+                        kind: Box::new(ImplItem(Impl {\n                             unsafety: hir::Unsafety::Normal,\n                             generics: clean_ty_generics(\n                                 cx,\n@@ -123,8 +123,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                                 .map(|x| x.clean(cx))\n                                 .collect::<Vec<_>>(),\n                             polarity: ty::ImplPolarity::Positive,\n-                            kind: ImplKind::Blanket(box trait_ref.0.self_ty().clean(cx)),\n-                        }),\n+                            kind: ImplKind::Blanket(Box::new(trait_ref.0.self_ty().clean(cx))),\n+                        })),\n                         cfg: None,\n                     });\n                 }"}, {"sha": "23af7d2ef1e2494173da3bc657f0469784c12d5e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -124,8 +124,14 @@ pub(crate) fn try_inline(\n \n     let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n     cx.inlined.insert(did.into());\n-    let mut item =\n-        clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, box attrs, cx, cfg);\n+    let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n+        did,\n+        Some(name),\n+        kind,\n+        Box::new(attrs),\n+        cx,\n+        cfg,\n+    );\n     if let Some(import_def_id) = import_def_id {\n         // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n         item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n@@ -506,7 +512,7 @@ pub(crate) fn build_impl(\n                 ImplKind::Normal\n             },\n         }),\n-        box merged_attrs,\n+        Box::new(merged_attrs),\n         cx,\n         cfg,\n     ));\n@@ -535,7 +541,7 @@ fn build_module(\n                 let prim_ty = clean::PrimitiveType::from(p);\n                 items.push(clean::Item {\n                     name: None,\n-                    attrs: box clean::Attributes::default(),\n+                    attrs: Box::new(clean::Attributes::default()),\n                     item_id: ItemId::Primitive(prim_ty, did.krate),\n                     visibility: clean::Public,\n                     kind: box clean::ImportItem(clean::Import::new_simple("}, {"sha": "fa2efb0041621204ab9e77852fdb999217e12bc5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -403,7 +403,7 @@ fn clean_projection<'tcx>(\n     Type::QPath {\n         assoc: Box::new(projection_to_path_segment(ty, cx)),\n         should_show_cast,\n-        self_type: box self_type,\n+        self_type: Box::new(self_type),\n         trait_,\n     }\n }\n@@ -1321,7 +1321,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             Type::QPath {\n                 assoc: Box::new(p.segments.last().expect(\"segments were empty\").clean(cx)),\n                 should_show_cast,\n-                self_type: box self_type,\n+                self_type: Box::new(self_type),\n                 trait_,\n             }\n         }\n@@ -1341,7 +1341,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             Type::QPath {\n                 assoc: Box::new(segment.clean(cx)),\n                 should_show_cast,\n-                self_type: box self_type,\n+                self_type: Box::new(self_type),\n                 trait_,\n             }\n         }\n@@ -1441,7 +1441,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n \n         match self.kind {\n             TyKind::Never => Primitive(PrimitiveType::Never),\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(m.ty.clean(cx))),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n                 // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n@@ -1453,9 +1453,9 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n                 let elided =\n                     l.is_elided() || matches!(l.name, LifetimeName::Param(_, ParamName::Fresh));\n                 let lifetime = if elided { None } else { Some(l.clean(cx)) };\n-                BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n+                BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(m.ty.clean(cx)) }\n             }\n-            TyKind::Slice(ty) => Slice(box ty.clean(cx)),\n+            TyKind::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n             TyKind::Array(ty, ref length) => {\n                 let length = match length {\n                     hir::ArrayLen::Infer(_, _) => \"_\".to_string(),\n@@ -1474,7 +1474,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n                     }\n                 };\n \n-                Array(box ty.clean(cx), length)\n+                Array(Box::new(ty.clean(cx)), length)\n             }\n             TyKind::Tup(tys) => Tuple(tys.iter().map(|x| x.clean(cx)).collect()),\n             TyKind::OpaqueDef(item_id, _) => {\n@@ -1491,7 +1491,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n                 let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n                 DynTrait(bounds, lifetime)\n             }\n-            TyKind::BareFn(barefn) => BareFunction(box barefn.clean(cx)),\n+            TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n             // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n@@ -1541,27 +1541,27 @@ fn clean_ty<'tcx>(this: Ty<'tcx>, cx: &mut DocContext<'tcx>, def_id: Option<DefI\n         ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n         ty::Float(float_ty) => Primitive(float_ty.into()),\n         ty::Str => Primitive(PrimitiveType::Str),\n-        ty::Slice(ty) => Slice(box ty.clean(cx)),\n+        ty::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n         ty::Array(ty, n) => {\n             let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n-            Array(box ty.clean(cx), n)\n+            Array(Box::new(ty.clean(cx)), n)\n         }\n-        ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n+        ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(mt.ty.clean(cx))),\n         ty::Ref(r, ty, mutbl) => {\n-            BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: box ty.clean(cx) }\n+            BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: Box::new(ty.clean(cx)) }\n         }\n         ty::FnDef(..) | ty::FnPtr(_) => {\n             let ty = cx.tcx.lift(this).expect(\"FnPtr lift failed\");\n             let sig = ty.fn_sig(cx.tcx);\n             let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n-            BareFunction(box BareFunctionDecl {\n+            BareFunction(Box::new(BareFunctionDecl {\n                 unsafety: sig.unsafety(),\n                 generic_params: Vec::new(),\n                 decl,\n                 abi: sig.abi(),\n-            })\n+            }))\n         }\n         ty::Adt(def, substs) => {\n             let did = def.did();\n@@ -2062,7 +2062,7 @@ fn clean_extern_crate<'tcx>(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: box attrs.clean(cx),\n+        attrs: Box::new(attrs.clean(cx)),\n         item_id: crate_def_id.into(),\n         visibility: ty_vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },"}, {"sha": "d29ba2dedaf717260094c80e9b54c62e5df03d13", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -477,7 +477,7 @@ impl Item {\n             def_id,\n             name,\n             kind,\n-            box ast_attrs.clean(cx),\n+            Box::new(ast_attrs.clean(cx)),\n             cx,\n             ast_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )"}, {"sha": "25438ff85aa715170e193add819f0d81e3ff5ddf", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -288,7 +288,7 @@ pub(crate) fn create_config(\n         diagnostic_output: DiagnosticOutput::Default,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(box crate::lint::register_lints),\n+        register_lints: Some(Box::new(crate::lint::register_lints)),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};"}, {"sha": "fe26e53b9632303ff12a6a3b702acc9da2c8079d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n         diagnostic_output: DiagnosticOutput::Default,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(box crate::lint::register_lints),\n+        register_lints: Some(Box::new(crate::lint::register_lints)),\n         override_queries: None,\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n@@ -556,7 +556,7 @@ pub(crate) fn make_test(\n             .supports_color();\n \n             let emitter = EmitterWriter::new(\n-                box io::sink(),\n+                Box::new(io::sink()),\n                 None,\n                 None,\n                 fallback_bundle,\n@@ -568,7 +568,7 @@ pub(crate) fn make_test(\n             );\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n-            let handler = Handler::with_emitter(false, None, box emitter);\n+            let handler = Handler::with_emitter(false, None, Box::new(emitter));\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n@@ -1032,7 +1032,7 @@ impl Tester for Collector {\n \n             if let Err(err) = std::fs::create_dir_all(&path) {\n                 eprintln!(\"Couldn't create directory for doctest executables: {}\", err);\n-                panic::resume_unwind(box ());\n+                panic::resume_unwind(Box::new(()));\n             }\n \n             DirState::Perm(path)\n@@ -1061,7 +1061,7 @@ impl Tester for Collector {\n                 no_run,\n                 test_type: test::TestType::DocTest,\n             },\n-            testfn: test::DynTestFn(box move || {\n+            testfn: test::DynTestFn(Box::new(move || {\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };\n@@ -1132,9 +1132,9 @@ impl Tester for Collector {\n                         }\n                     }\n \n-                    panic::resume_unwind(box ());\n+                    panic::resume_unwind(Box::new(()));\n                 }\n-            }),\n+            })),\n         });\n     }\n "}, {"sha": "9f46ab54d3ece10c27fad80c6e3e8df2763e3017", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639f89d0414a34b7a72702849f3e9f95b46de5c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a639f89d0414a34b7a72702849f3e9f95b46de5c", "patch": "@@ -743,21 +743,23 @@ pub(crate) fn href_relative_parts<'fqp>(\n         if f != r {\n             let dissimilar_part_count = relative_to_fqp.len() - i;\n             let fqp_module = &fqp[i..fqp.len()];\n-            return box iter::repeat(sym::dotdot)\n-                .take(dissimilar_part_count)\n-                .chain(fqp_module.iter().copied());\n+            return Box::new(\n+                iter::repeat(sym::dotdot)\n+                    .take(dissimilar_part_count)\n+                    .chain(fqp_module.iter().copied()),\n+            );\n         }\n     }\n     // e.g. linking to std::sync::atomic from std::sync\n     if relative_to_fqp.len() < fqp.len() {\n-        box fqp[relative_to_fqp.len()..fqp.len()].iter().copied()\n+        Box::new(fqp[relative_to_fqp.len()..fqp.len()].iter().copied())\n     // e.g. linking to std::sync from std::sync::atomic\n     } else if fqp.len() < relative_to_fqp.len() {\n         let dissimilar_part_count = relative_to_fqp.len() - fqp.len();\n-        box iter::repeat(sym::dotdot).take(dissimilar_part_count)\n+        Box::new(iter::repeat(sym::dotdot).take(dissimilar_part_count))\n     // linking to the same module\n     } else {\n-        box iter::empty()\n+        Box::new(iter::empty())\n     }\n }\n "}]}