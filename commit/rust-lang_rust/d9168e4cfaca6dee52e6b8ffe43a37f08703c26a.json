{"sha": "d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTY4ZTRjZmFjYTZkZWU1MmU2YjhmZmU0M2EzN2YwODcwM2MyNmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T20:12:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T20:12:04Z"}, "message": "Rollup merge of #64793 - immunant:format_spans, r=matthewjasper\n\nFix format macro expansions spans to be macro-generated\n\nNew Exprs generated as part of the format macro expansion should get the macro\nexpansion span with an expansion context, rather than the span of the format string\nwhich does not.", "tree": {"sha": "3d915d62a70668bc70b386bfc849cc6c07a3c260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d915d62a70668bc70b386bfc849cc6c07a3c260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdj76UCRBK7hj4Ov3rIwAAdHIIAAs0P93QpRizaVTogXc6+SCf\nkjsA0DOP5bgj0VsM7xmiKqN7jsFXqgCsGlrG6G0HIkSFM8SsuWj8DGW+Yo3o74QX\n1vA7qJuZ+J1KS3Ayl5/3tcDKFEGv6l5qxZNsiDkSoD5j4mqjK+vPxSBC0eUg+QPg\n0aIJBXmHpXcfJAX4rXNwy8TI5upXQrXN4s3xwpfJEGTdj4lDOVETlQSpPQpLp6cS\ntLEKHDemU69iKupGzxDVm9DWTAJb7duMddzApSTFGVj6pMwwTIPpUAUkQSuCnORr\nayqt+Fkh7UpR0OTINu33HVz/wOPiRwAHS36m+tABifPSjE25SmlyvRwcLW0l7m0=\n=Z1EJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d915d62a70668bc70b386bfc849cc6c07a3c260\nparent 01075d8f6b9e2a4f42bc45232d2a20627fc72827\nparent 0ec4513d5fe23fabe353e4773682ddb341c9d20f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569701524 +0200\ncommitter GitHub <noreply@github.com> 1569701524 +0200\n\nRollup merge of #64793 - immunant:format_spans, r=matthewjasper\n\nFix format macro expansions spans to be macro-generated\n\nNew Exprs generated as part of the format macro expansion should get the macro\nexpansion span with an expansion context, rather than the span of the format string\nwhich does not.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "html_url": "https://github.com/rust-lang/rust/commit/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01075d8f6b9e2a4f42bc45232d2a20627fc72827", "url": "https://api.github.com/repos/rust-lang/rust/commits/01075d8f6b9e2a4f42bc45232d2a20627fc72827", "html_url": "https://github.com/rust-lang/rust/commit/01075d8f6b9e2a4f42bc45232d2a20627fc72827"}, {"sha": "0ec4513d5fe23fabe353e4773682ddb341c9d20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4513d5fe23fabe353e4773682ddb341c9d20f", "html_url": "https://github.com/rust-lang/rust/commit/0ec4513d5fe23fabe353e4773682ddb341c9d20f"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "8fc64021b51fcc50af8f0cfda4a62bcd9768ede5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Now create a vector containing all the arguments\n         let args = locals.into_iter().chain(counts.into_iter());\n \n-        let args_array = self.ecx.expr_vec(self.fmtsp, args.collect());\n+        let args_array = self.ecx.expr_vec(self.macsp, args.collect());\n \n         // Constructs an AST equivalent to:\n         //\n@@ -724,12 +724,12 @@ impl<'a, 'b> Context<'a, 'b> {\n         //\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n-        let pat = self.ecx.pat_tuple(self.fmtsp, pats);\n-        let arm = self.ecx.arm(self.fmtsp, pat, args_array);\n-        let head = self.ecx.expr(self.fmtsp, ast::ExprKind::Tup(heads));\n-        let result = self.ecx.expr_match(self.fmtsp, head, vec![arm]);\n+        let pat = self.ecx.pat_tuple(self.macsp, pats);\n+        let arm = self.ecx.arm(self.macsp, pat, args_array);\n+        let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n+        let result = self.ecx.expr_match(self.macsp, head, vec![arm]);\n \n-        let args_slice = self.ecx.expr_addr_of(self.fmtsp, result);\n+        let args_slice = self.ecx.expr_addr_of(self.macsp, result);\n \n         // Now create the fmt::Arguments struct with all our locals we created.\n         let (fn_name, fn_args) = if self.all_pieces_simple {"}, {"sha": "88f70f584022d39d520079b39b6fe613233fbde6", "filename": "src/test/ui/issues/issue-27592.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.rs?ref=d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "patch": "@@ -15,5 +15,5 @@ impl ::std::fmt::Write for Stream {\n fn main() {\n     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n     //~^ ERROR cannot return value referencing temporary value\n-    //~| ERROR cannot return value referencing temporary value\n+    //~| ERROR cannot return reference to temporary value\n }"}, {"sha": "c8649d82d7451c9a2cfe8fe5debe645744558e39", "filename": "src/test/ui/issues/issue-27592.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9168e4cfaca6dee52e6b8ffe43a37f08703c26a/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr?ref=d9168e4cfaca6dee52e6b8ffe43a37f08703c26a", "patch": "@@ -7,14 +7,11 @@ LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              |                  temporary value created here\n    |              returns a value referencing data owned by the current function\n \n-error[E0515]: cannot return value referencing temporary value\n+error[E0515]: cannot return reference to temporary value\n   --> $DIR/issue-27592.rs:16:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |              ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |            |\n-   |              |            temporary value created here\n-   |              returns a value referencing data owned by the current function\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error: aborting due to 2 previous errors\n "}]}