{"sha": "5fe21b5af04166e65ef99828c8b5f4ff5783632a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTIxYjVhZjA0MTY2ZTY1ZWY5OTgyOGM4YjVmNGZmNTc4MzYzMmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-25T03:58:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-25T04:12:33Z"}, "message": "Skip likely-zero initial probe, speed up map.rs.", "tree": {"sha": "b75099314a0077a19ddaccfe33f43e1626b53869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75099314a0077a19ddaccfe33f43e1626b53869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe21b5af04166e65ef99828c8b5f4ff5783632a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe21b5af04166e65ef99828c8b5f4ff5783632a", "html_url": "https://github.com/rust-lang/rust/commit/5fe21b5af04166e65ef99828c8b5f4ff5783632a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe21b5af04166e65ef99828c8b5f4ff5783632a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cffc582255dcc45c5097f7e77217cb1509f1c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cffc582255dcc45c5097f7e77217cb1509f1c41", "html_url": "https://github.com/rust-lang/rust/commit/0cffc582255dcc45c5097f7e77217cb1509f1c41"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "4ab2f076b9caec6112b1e219e1cd4d855c800c11", "filename": "src/lib/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fe21b5af04166e65ef99828c8b5f4ff5783632a/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe21b5af04166e65ef99828c8b5f4ff5783632a/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=5fe21b5af04166e65ef99828c8b5f4ff5783632a", "patch": "@@ -36,26 +36,26 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     // half and lower half of the uint bits.  Our bucket probing\n     // sequence is then defined by\n     //\n-    //   hash(key, i) := hashl(key) + i * hashr(key)   for i = 0, 1, 2, ...\n+    //   hash(key, i) := hashl(key) * i + hashr(key)   for i = 0, 1, 2, ...\n     //\n     // Tearing the hash function apart this way is kosher in practice\n     // as, assuming 32-bit uints, the table would have to be at 2^32\n     // buckets before the resulting pair of hash functions no longer\n-    // probes all buckets for a fixed key.  Note that hashr is made to\n+    // probes all buckets for a fixed key.  Note that hashl is made to\n     // output odd numbers (hence coprime to the number of nbkts, which\n     // is always a power of 2), so that all buckets are probed for a\n     // fixed key.\n \n     fn hashl(uint n, uint nbkts) -> uint {\n-        ret (n >>> 16u);\n+        ret ((n >>> 16u) * 2u + 1u);\n     }\n \n     fn hashr(uint n, uint nbkts) -> uint {\n-        ret ((((~ 0u) >>> 16u) & n) * 2u + 1u);\n+        ret (0x0000_ffff_u & n);\n     }\n \n     fn hash(uint h, uint nbkts, uint i) -> uint {\n-        ret (hashl(h, nbkts) + i * hashr(h, nbkts)) % nbkts;\n+        ret (hashl(h, nbkts) * i + hashr(h, nbkts)) % nbkts;\n     }\n \n     /**"}]}