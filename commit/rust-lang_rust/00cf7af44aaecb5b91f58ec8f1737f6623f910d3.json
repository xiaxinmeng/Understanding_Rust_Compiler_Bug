{"sha": "00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "node_id": "C_kwDOAAsO6NoAKDAwY2Y3YWY0NGFhZWNiNWI5MWY1OGVjOGYxNzM3ZjY2MjNmOTEwZDM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-29T07:47:32Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:23:58Z"}, "message": "rework error messages for incorrect inherent impls", "tree": {"sha": "4a39ead9b4ea6270f70c1ae4b5cb94083f7b88db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a39ead9b4ea6270f70c1ae4b5cb94083f7b88db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "html_url": "https://github.com/rust-lang/rust/commit/00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee62514b16b610870e001b14f15e7e71b15e54e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee62514b16b610870e001b14f15e7e71b15e54e7", "html_url": "https://github.com/rust-lang/rust/commit/ee62514b16b610870e001b14f15e7e71b15e54e7"}], "stats": {"total": 139, "additions": 89, "deletions": 50}, "files": [{"sha": "8033aa8384c2e1276f742b8dd37070774da23ef8", "filename": "compiler/rustc_error_codes/src/error_codes/E0118.md", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0118.md?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -4,7 +4,7 @@ enum, union, or trait object.\n Erroneous code example:\n \n ```compile_fail,E0118\n-impl (u8, u8) { // error: no nominal type found for inherent implementation\n+impl fn(u8) { // error: no nominal type found for inherent implementation\n     fn get_state(&self) -> String {\n         // ...\n     }\n@@ -20,8 +20,8 @@ trait LiveLongAndProsper {\n     fn get_state(&self) -> String;\n }\n \n-// and now you can implement it on (u8, u8)\n-impl LiveLongAndProsper for (u8, u8) {\n+// and now you can implement it on fn(u8)\n+impl LiveLongAndProsper for fn(u8) {\n     fn get_state(&self) -> String {\n         \"He's dead, Jim!\".to_owned()\n     }\n@@ -33,32 +33,11 @@ For example, `NewType` is a newtype over `Foo` in `struct NewType(Foo)`.\n Example:\n \n ```\n-struct TypeWrapper((u8, u8));\n+struct TypeWrapper(fn(u8));\n \n impl TypeWrapper {\n     fn get_state(&self) -> String {\n         \"Fascinating!\".to_owned()\n     }\n }\n ```\n-\n-Instead of defining an inherent implementation on a reference, you could also\n-move the reference inside the implementation:\n-\n-```compile_fail,E0118\n-struct Foo;\n-\n-impl &Foo { // error: no nominal type found for inherent implementation\n-    fn bar(self, other: Self) {}\n-}\n-```\n-\n-becomes\n-\n-```\n-struct Foo;\n-\n-impl Foo {\n-    fn bar(&self, other: &Self) {}\n-}\n-```"}, {"sha": "26a9dd331ce110c0e19603d7699c461439706bfd", "filename": "compiler/rustc_error_codes/src/error_codes/E0390.md", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0390.md", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0390.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0390.md?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -8,8 +8,7 @@ struct Foo {\n }\n \n impl *mut Foo {}\n-// error: only a single inherent implementation marked with\n-//        `#[lang = \"mut_ptr\"]` is allowed for the `*mut T` primitive\n+// error: cannot define inherent `impl` for primitive types\n ```\n \n This isn't allowed, but using a trait to implement a method or constant\n@@ -29,3 +28,24 @@ impl Bar for *mut Foo {\n     fn bar() {} // ok!\n }\n ```\n+\n+Instead of defining an inherent implementation on a reference, you could also\n+move the reference inside the implementation:\n+\n+```compile_fail,E0390\n+struct Foo;\n+\n+impl &Foo { // error: no nominal type found for inherent implementation\n+    fn bar(self, other: Self) {}\n+}\n+```\n+\n+becomes\n+\n+```\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(&self, other: &Self) {}\n+}\n+```"}, {"sha": "e11bd9355ebf988b3a434b5654eaa07437061f54", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -86,8 +86,7 @@ impl<'tcx> ItemLikeVisitor<'_> for InherentCollect<'tcx> {\n             | ty::Ref(..)\n             | ty::Never\n             | ty::Tuple(..) => self.check_primitive_impl(item.def_id, self_ty, items, ty.span),\n-            ty::Error(_) => {}\n-            _ => {\n+            ty::FnPtr(_) | ty::Projection(..) | ty::Opaque(..) | ty::Param(_) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     ty.span,\n@@ -98,16 +97,18 @@ impl<'tcx> ItemLikeVisitor<'_> for InherentCollect<'tcx> {\n                 err.span_label(ty.span, \"impl requires a nominal type\")\n                     .note(\"either implement a trait on it or create a newtype to wrap it instead\");\n \n-                if let ty::Ref(_, subty, _) = self_ty.kind() {\n-                    err.note(&format!(\n-                        \"you could also try moving the reference to \\\n-                            uses of `{}` (such as `self`) within the implementation\",\n-                        subty\n-                    ));\n-                }\n-\n                 err.emit();\n             }\n+            ty::FnDef(..)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::Bound(..)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_) => {\n+                bug!(\"unexpected impl self type of impl: {:?} {:?}\", item.def_id, self_ty);\n+            }\n+            ty::Error(_) => {}\n         }\n     }\n \n@@ -170,21 +171,29 @@ impl<'tcx> InherentCollect<'tcx> {\n                     }\n                 }\n             } else {\n-                struct_span_err!(\n+                let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     span,\n                     E0390,\n                     \"cannot define inherent `impl` for primitive types\",\n-                )\n-                .help(\"consider using an extension trait instead\")\n-                .emit();\n+                );\n+                err.help(\"consider using an extension trait instead\");\n+                if let ty::Ref(_, subty, _) = ty.kind() {\n+                    err.note(&format!(\n+                        \"you could also try moving the reference to \\\n+                            uses of `{}` (such as `self`) within the implementation\",\n+                        subty\n+                    ));\n+                }\n+                err.emit();\n+                return;\n             }\n         }\n \n-        let Some(simp) = simplify_type(self.tcx, ty, TreatParams::AsPlaceholders) else {\n+        if let Some(simp) = simplify_type(self.tcx, ty, TreatParams::AsPlaceholders) {\n+            self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n+        } else {\n             bug!(\"unexpected primitive type: {:?}\", ty);\n-        };\n-        self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n-        return;\n+        }\n     }\n }"}, {"sha": "22b48657385c63d3244620ec3ccfd1e505e32373", "filename": "src/test/ui/error-codes/E0117.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -1,5 +1,4 @@\n impl Drop for u32 {} //~ ERROR E0117\n //~| ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "aaef8113b8ae243bd7ea3a78be5aafe005faf4fa", "filename": "src/test/ui/error-codes/E0118.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -0,0 +1,7 @@\n+impl fn(u8) { //~ ERROR E0118\n+    fn get_state(&self) -> String {\n+       String::new()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "296fb5d664a227308b5341cc8df579997e971328", "filename": "src/test/ui/error-codes/E0118.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -0,0 +1,11 @@\n+error[E0118]: no nominal type found for inherent implementation\n+  --> $DIR/E0118.rs:1:6\n+   |\n+LL | impl fn(u8) {\n+   |      ^^^^^^ impl requires a nominal type\n+   |\n+   = note: either implement a trait on it or create a newtype to wrap it instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0118`."}, {"sha": "a0a301a06e2ed7e8edc4b3e71b03bb52e9a0008f", "filename": "src/test/ui/error-codes/E0120.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -5,5 +5,4 @@ impl Drop for dyn MyTrait {\n     fn drop(&mut self) {}\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "6a067a9a36092694afc016d4de3a98dd8295b93b", "filename": "src/test/ui/kinds-of-primitive-impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -17,4 +17,10 @@ impl char {\n     fn bar(self) {}\n }\n \n+struct MyType;\n+impl &MyType {\n+//~^ error: cannot define inherent `impl` for primitive types\n+    pub fn for_ref(self) {}\n+}\n+\n fn main() {}"}, {"sha": "f4dbd1c40e81891c66ad3442e484a9c4ed492383", "filename": "src/test/ui/kinds-of-primitive-impl.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00cf7af44aaecb5b91f58ec8f1737f6623f910d3/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr?ref=00cf7af44aaecb5b91f58ec8f1737f6623f910d3", "patch": "@@ -22,6 +22,15 @@ LL | impl char {\n    |\n    = help: consider using an extension trait instead\n \n-error: aborting due to 3 previous errors\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/kinds-of-primitive-impl.rs:21:6\n+   |\n+LL | impl &MyType {\n+   |      ^^^^^^^\n+   |\n+   = help: consider using an extension trait instead\n+   = note: you could also try moving the reference to uses of `MyType` (such as `self`) within the implementation\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0390`."}]}