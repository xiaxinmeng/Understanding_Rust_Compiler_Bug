{"sha": "ba22a69d964283d388a362830e73a992f024a6bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMjJhNjlkOTY0MjgzZDM4OGEzNjI4MzBlNzNhOTkyZjAyNGE2YmY=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-21T20:10:57Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-21T20:10:57Z"}, "message": "Extract string_to_value to its own function", "tree": {"sha": "1b0ee15a092117e7b582c1f537ab570d0395dab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0ee15a092117e7b582c1f537ab570d0395dab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba22a69d964283d388a362830e73a992f024a6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba22a69d964283d388a362830e73a992f024a6bf", "html_url": "https://github.com/rust-lang/rust/commit/ba22a69d964283d388a362830e73a992f024a6bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba22a69d964283d388a362830e73a992f024a6bf/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22d948eb0cd509b7ea52c3c615253d03ca9914b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22d948eb0cd509b7ea52c3c615253d03ca9914b", "html_url": "https://github.com/rust-lang/rust/commit/a22d948eb0cd509b7ea52c3c615253d03ca9914b"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "e3334e559db65cb7eac656dfe15a040e9c23f5ef", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba22a69d964283d388a362830e73a992f024a6bf/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba22a69d964283d388a362830e73a992f024a6bf/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=ba22a69d964283d388a362830e73a992f024a6bf", "patch": "@@ -2,6 +2,7 @@ use jsonpath_lib::select;\n use lazy_static::lazy_static;\n use regex::{Regex, RegexBuilder};\n use serde_json::Value;\n+use std::borrow::Cow;\n use std::{env, fmt, fs};\n \n mod cache;\n@@ -207,15 +208,8 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                     let val = cache.get_value(&command.args[0])?;\n                     match select(&val, &command.args[1]) {\n                         Ok(results) => {\n-                            // FIXME: Share the pat getting code with the `Is` branch.\n-                            let v_holder;\n-                            let pat: &Value = if command.args[2].starts_with(\"$\") {\n-                                &cache.variables[&command.args[2][1..]]\n-                            } else {\n-                                v_holder = serde_json::from_str(&command.args[2]).unwrap();\n-                                &v_holder\n-                            };\n-                            results.contains(pat)\n+                            let pat = string_to_value(&command.args[2], cache);\n+                            results.contains(&pat.as_ref())\n                         }\n                         Err(_) => false,\n                     }\n@@ -240,14 +234,8 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             let val = cache.get_value(&command.args[0])?;\n             match select(&val, &command.args[1]) {\n                 Ok(results) => {\n-                    let v_holder;\n-                    let pat: &Value = if command.args[2].starts_with(\"$\") {\n-                        &cache.variables[&command.args[2][1..]]\n-                    } else {\n-                        v_holder = serde_json::from_str(&command.args[2]).unwrap();\n-                        &v_holder\n-                    };\n-                    results.len() == 1 && results[0] == pat\n+                    let pat = string_to_value(&command.args[2], cache);\n+                    results.len() == 1 && results[0] == pat.as_ref()\n                 }\n                 Err(_) => false,\n             }\n@@ -296,3 +284,11 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n         Ok(())\n     }\n }\n+\n+fn string_to_value<'a>(s: &str, cache: &'a Cache) -> Cow<'a, Value> {\n+    if s.starts_with(\"$\") {\n+        Cow::Borrowed(&cache.variables[&s[1..]])\n+    } else {\n+        Cow::Owned(serde_json::from_str(s).unwrap())\n+    }\n+}"}]}