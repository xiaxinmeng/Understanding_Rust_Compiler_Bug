{"sha": "6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2JiYzY2ZjdmZjRkY2Y1ZGI5MmM5YzczYzg0YzJiMThkNjNiMDU=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-17T22:21:21Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-21T22:45:27Z"}, "message": "Add docs for sort_unstable to unstable book", "tree": {"sha": "8df9922caf87bbbadbdaf134016ef268bc830256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8df9922caf87bbbadbdaf134016ef268bc830256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05", "html_url": "https://github.com/rust-lang/rust/commit/6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05/comments", "author": null, "committer": null, "parents": [{"sha": "cab4bff3de1a61472f3c2e7752ef54b87344d1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab4bff3de1a61472f3c2e7752ef54b87344d1c9", "html_url": "https://github.com/rust-lang/rust/commit/cab4bff3de1a61472f3c2e7752ef54b87344d1c9"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "9effcfc774c7743bc55a7756741ed2ad263680ff", "filename": "src/doc/unstable-book/src/sort-unstable.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-unstable.md?ref=6acbbc66f7ff4dcf5db92c9c73c84c2b18d63b05", "patch": "@@ -6,4 +6,35 @@ The tracking issue for this feature is: [#40585]\n \n ------------------------\n \n+The default `sort` method on slices is stable. In other words, it guarantees\n+that the original order of equal elements is preserved after sorting. The\n+method has several undesirable characteristics:\n \n+1. It allocates a sizable chunk of memory.\n+2. If you don't need stability, it is not as performant as it could be.\n+\n+An alternative is the new `sort_unstable` feature, which includes these\n+methods for sorting slices:\n+\n+1. `sort_unstable`\n+2. `sort_unstable_by`\n+3. `sort_unstable_by_key`\n+\n+Unstable sorting is generally faster and makes no allocations. The majority\n+of real-world sorting needs doesn't require stability, so these methods can\n+very often come in handy.\n+\n+Another important difference is that `sort` lives in `libstd` and\n+`sort_unstable` lives in `libcore`. The reason is that the former makes\n+allocations and the latter doesn't.\n+\n+A simple example:\n+\n+```rust\n+#![feature(sort_unstable)]\n+\n+let mut v = [-5, 4, 1, -3, 2];\n+\n+v.sort_unstable();\n+assert!(v == [-5, -3, 1, 2, 4]);\n+```"}]}