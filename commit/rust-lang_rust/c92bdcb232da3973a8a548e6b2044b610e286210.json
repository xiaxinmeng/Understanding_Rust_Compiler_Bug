{"sha": "c92bdcb232da3973a8a548e6b2044b610e286210", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MmJkY2IyMzJkYTM5NzNhOGE1NDhlNmIyMDQ0YjYxMGUyODYyMTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-24T19:45:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T09:02:20Z"}, "message": "Fallout where types must be specified.\n\nThis is due to a [breaking-change] to operators. The primary affected\ncode is uses of the `Rng` trait where we used to (incorrectly) infer the\nright-hand-side type from the left-hand-side, in the case that the LHS\ntype was a scalar like `i32`. The fix is to add a type annotation like\n`x + rng.gen::<i32>()`.", "tree": {"sha": "b41dd1d636f8565c1cbc00ed775858b1cf9b628d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b41dd1d636f8565c1cbc00ed775858b1cf9b628d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c92bdcb232da3973a8a548e6b2044b610e286210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c92bdcb232da3973a8a548e6b2044b610e286210", "html_url": "https://github.com/rust-lang/rust/commit/c92bdcb232da3973a8a548e6b2044b610e286210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c92bdcb232da3973a8a548e6b2044b610e286210/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6466ff13aef6af45f24f28e23f2f3dd36c96cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6466ff13aef6af45f24f28e23f2f3dd36c96cf0", "html_url": "https://github.com/rust-lang/rust/commit/d6466ff13aef6af45f24f28e23f2f3dd36c96cf0"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "8f2e71b666c6b6dcdc1cea18da875e6123877b7d", "filename": "src/libcollectionstest/bench.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Flibcollectionstest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Flibcollectionstest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbench.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -22,13 +22,13 @@ macro_rules! map_insert_rand_bench {\n             let mut rng = rand::weak_rng();\n \n             for _ in 0..n {\n-                let i = rng.gen() % n;\n+                let i = rng.gen::<usize>() % n;\n                 map.insert(i, i);\n             }\n \n             // measure\n             b.iter(|| {\n-                let k = rng.gen() % n;\n+                let k = rng.gen::<usize>() % n;\n                 map.insert(k, k);\n                 map.remove(&k);\n             });\n@@ -77,7 +77,7 @@ macro_rules! map_find_rand_bench {\n \n             // setup\n             let mut rng = rand::weak_rng();\n-            let mut keys: Vec<_> = (0..n).map(|_| rng.gen() % n).collect();\n+            let mut keys: Vec<_> = (0..n).map(|_| rng.gen::<usize>() % n).collect();\n \n             for &k in &keys {\n                 map.insert(k, k);"}, {"sha": "62189e721e59d70f554bf6e0934a64858ad3c3d7", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -256,7 +256,7 @@ fn ziggurat<R: Rng, P, Z>(\n             return zero_case(rng, u);\n         }\n         // algebraically equivalent to f1 + DRanU()*(f0 - f1) < 1\n-        if f_tab[i + 1] + (f_tab[i] - f_tab[i + 1]) * rng.gen() < pdf(x) {\n+        if f_tab[i + 1] + (f_tab[i] - f_tab[i + 1]) * rng.gen::<f64>() < pdf(x) {\n             return x;\n         }\n     }"}, {"sha": "347d494259d08830fbbbf39df99764512ff68bc1", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -154,7 +154,7 @@ macro_rules! float_impl {\n                 }\n             }\n             fn sample_range<R: Rng>(r: &Range<$ty>, rng: &mut R) -> $ty {\n-                r.low + r.range * rng.gen()\n+                r.low + r.range * rng.gen::<$ty>()\n             }\n         }\n     }"}, {"sha": "3c416dc2ef8d1168bed446ed3af5b251840bf297", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -32,3 +32,21 @@ extern fn eh_personality() {}\n pub trait Copy : PhantomFn<Self> {\n     // Empty.\n }\n+\n+#[lang=\"rem\"]\n+pub trait Rem<RHS=Self> {\n+    /// The resulting type after applying the `%` operator\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    type Output = Self;\n+\n+    /// The method for the `%` operator\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn rem(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl Rem for i32 {\n+    type Output = i32;\n+\n+    #[inline]\n+    fn rem(self, other: i32) -> i32 { self % other }\n+}"}, {"sha": "d6577036b8ebed47d03ac9802dc8ddc03eea3022", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -29,7 +29,7 @@ fn lerp(a: f32, b: f32, v: f32) -> f32 { a * (1.0 - v) + b * v }\n fn smooth(v: f32) -> f32 { v * v * (3.0 - 2.0 * v) }\n \n fn random_gradient<R: Rng>(r: &mut R) -> Vec2 {\n-    let v = PI * 2.0 * r.gen();\n+    let v = PI * 2.0 * r.gen::<f32>();\n     Vec2 { x: v.cos(), y: v.sin() }\n }\n "}, {"sha": "5e0e5bd03fe6fa5180d10535065c4d929701c0c6", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -56,7 +56,7 @@ pub fn main() {\n     }\n \n     // raw slice with explicit cast\n-    let a = &[1, 2, 3] as *const [_];\n+    let a = &[1, 2, 3] as *const [i32];\n     unsafe {\n         let b = (*a)[2];\n         assert!(b == 3);\n@@ -96,7 +96,7 @@ pub fn main() {\n         assert!(len == 3);\n     }\n \n-    let a = &mut [1, 2, 3] as *mut [_];\n+    let a = &mut [1, 2, 3] as *mut [i32];\n     unsafe {\n         let b = (*a)[2];\n         assert!(b == 3);"}, {"sha": "7bd292e66f2585975499986084be4eb6fd63132d", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -10,5 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n-fn wsucc(n: isize) -> isize { 0 + { return n + 1 } }\n+use std::num::Int;\n+\n+fn wsucc<T:Int>(n: T) -> T { n + { return n } }\n+\n pub fn main() { }"}, {"sha": "6e1cfc7186299e0eabc40c9c20ed32e5ce8e380a", "filename": "src/test/run-pass/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1460.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -12,5 +12,5 @@\n // pretty-expanded FIXME #23616\n \n pub fn main() {\n-    {|i| if 1 == i { }};\n+    {|i: u32| if 1 == i { }};\n }"}, {"sha": "33842fab6989cecf2df6720b630aadb74599b6bf", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -17,7 +17,7 @@ use std::mem;\n \n fn main() {\n     let y = 0u8;\n-    let closure = move |x| y + x;\n+    let closure = move |x: u8| y + x;\n \n     // Check that both closures are capturing by value\n     assert_eq!(1, mem::size_of_val(&closure));"}, {"sha": "fe540e1aabef8b6a4582d9c13025901fac25ea41", "filename": "src/test/run-pass/issue-21634.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-21634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-21634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21634.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -12,13 +12,13 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    if let Ok(x) = \"3.1415\".parse() {\n+    if let Ok(x) = \"3.1415\".parse::<f64>() {\n         assert_eq!(false, x <= 0.0);\n     }\n-    if let Ok(x) = \"3.1415\".parse() {\n+    if let Ok(x) = \"3.1415\".parse::<f64>() {\n         assert_eq!(3.1415, x + 0.0);\n     }\n-    if let Ok(mut x) = \"3.1415\".parse() {\n+    if let Ok(mut x) = \"3.1415\".parse::<f64>() {\n         assert_eq!(8.1415, { x += 5.0; x });\n     }\n }"}, {"sha": "7d8c4ab210d002e1d09d60564f4d41e565aed1f7", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -25,19 +25,19 @@ fn main() {\n     assert!(thread::spawn(move|| { min_val::<i16>() / -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i32>() / -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i64>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1isize / zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i8 / zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i16 / zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i32 / zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i64 / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize / zero::<isize>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 / zero::<i8>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 / zero::<i16>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 / zero::<i32>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 / zero::<i64>(); }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<isize>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i8>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i16>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i32>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i64>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1isize % zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i8 % zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i16 % zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i32 % zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i64 % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize % zero::<isize>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 % zero::<i8>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 % zero::<i16>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 % zero::<i32>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 % zero::<i64>(); }).join().is_err());\n }"}, {"sha": "3efd913cf543c935789d7a69a52dfc0723895fb5", "filename": "src/test/run-pass/reexported-static-methods-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Freexported-static-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92bdcb232da3973a8a548e6b2044b610e286210/src%2Ftest%2Frun-pass%2Freexported-static-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freexported-static-methods-cross-crate.rs?ref=c92bdcb232da3973a8a548e6b2044b610e286210", "patch": "@@ -19,8 +19,8 @@ use reexported_static_methods::Boz;\n use reexported_static_methods::Bort;\n \n pub fn main() {\n-    assert_eq!(42, Foo::foo());\n-    assert_eq!(84, Baz::bar());\n+    assert_eq!(42_isize, Foo::foo());\n+    assert_eq!(84_isize, Baz::bar());\n     assert!(Boz::boz(1));\n     assert_eq!(\"bort()\".to_string(), Bort::bort());\n }"}]}