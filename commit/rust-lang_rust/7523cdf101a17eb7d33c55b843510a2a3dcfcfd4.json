{"sha": "7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjNjZGYxMDFhMTdlYjdkMzNjNTViODQzNTEwYTJhM2RjZmNmZDQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-04T10:20:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-04T10:20:12Z"}, "message": "Rollup merge of #54777 - zackmdavis:async_pretty_ice, r=cramertj\n\nabolish ICE when pretty-printing async block\n\n@jnetterf reported an ICE when the unused-parentheses lint triggered around an async block (#54752). In order to compose an autofixable suggestion, the lint invokes the pretty-printer on the unnecessarily-parenthesized expression. (One wonders why the lint doesn't just use `SourceMap::span_to_snippet` instead, to preserve the formatting of the original source?\u2014but to answer that, you'd have to ask the author of 5c9f806d.)\n\nBut then the pretty-printer panics when trying to call `<pprust::State as PrintState>::end` when `State.boxes` is empty. Empirically, the problem would seem to be solved if we start some \"boxes\" beforehand in the `ast::ExprKind::Async` arm of the big match in `print_expr_outer_attr_style`, exactly like we do in the immediately-preceding match arm for `ast::ExprKind::Block`\u2014it would seem pretty (\"pretty\") reasonable for the pretty-printing of async blocks to work a lot like the pretty-printing of ordinary non-async blocks, right??\n\nOf course, it would be shamefully cargo-culty to commit code on the basis of this kind of mere reasoning-by-analogy (in contrast to understanding the design of the pretty-printer in such detail that the correctness of the patch is comprehended with all the lucid certainty of mathematical proof, rather than being merely surmised by intuition). But maybe we care more about fixing the bug with high probability today, than with certainty in some indefinite hypothetical future?  Maybe the effort is worth [a fifth of a shirt](https://hacktoberfest.digitalocean.com/stats/zackmdavis)??\n\nHumbly resolves #54752.\n\nr? @cramertj", "tree": {"sha": "e2b0c50f865839fdc19641a4e40858ba5dea82ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b0c50f865839fdc19641a4e40858ba5dea82ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbtelcCRBK7hj4Ov3rIwAAdHIIAI6fC9c1YK7Yz2w7u1eEQNmm\nhxABgOyFeg8n+QIs/TZks/Ub1KhfPuuLn30YZOQ45DhWi29A2nK6FooAxroRJp32\nSD0XNk1DVaWDXQEGS4E/fwtk276scDzyVXE5ltdDK5ZJkTQXJVOWTStRr7wUPWqP\nU1ZIl509/8HSSiOMvPvT8Ju8CGBfoIdi42D6q/fqvuEIdBbePIH/SzuW2CM0TwFS\nFp+2IAs9WqMCM1wLZyosGLWLqjFOIRtkMZIYWSqXbC1cvbhA+0IxUc6/IdslYxSu\n5vtDoSlyXRQFC1qJcYxnBCM/FXWH3px4FzQNdu1ea0qGDR7eYy98nl777klTv+k=\n=RhnO\n-----END PGP SIGNATURE-----\n", "payload": "tree e2b0c50f865839fdc19641a4e40858ba5dea82ae\nparent 2fda2f6f13e6e3bbbcd4e578b1d68a5a02a2b9e0\nparent 1081bbbfc5d170f22b5810b40c456a17da59cf7f\nauthor Pietro Albini <pietro@pietroalbini.org> 1538648412 +0200\ncommitter GitHub <noreply@github.com> 1538648412 +0200\n\nRollup merge of #54777 - zackmdavis:async_pretty_ice, r=cramertj\n\nabolish ICE when pretty-printing async block\n\n@jnetterf reported an ICE when the unused-parentheses lint triggered around an async block (#54752). In order to compose an autofixable suggestion, the lint invokes the pretty-printer on the unnecessarily-parenthesized expression. (One wonders why the lint doesn't just use `SourceMap::span_to_snippet` instead, to preserve the formatting of the original source?\u2014but to answer that, you'd have to ask the author of 5c9f806d.)\n\nBut then the pretty-printer panics when trying to call `<pprust::State as PrintState>::end` when `State.boxes` is empty. Empirically, the problem would seem to be solved if we start some \"boxes\" beforehand in the `ast::ExprKind::Async` arm of the big match in `print_expr_outer_attr_style`, exactly like we do in the immediately-preceding match arm for `ast::ExprKind::Block`\u2014it would seem pretty (\"pretty\") reasonable for the pretty-printing of async blocks to work a lot like the pretty-printing of ordinary non-async blocks, right??\n\nOf course, it would be shamefully cargo-culty to commit code on the basis of this kind of mere reasoning-by-analogy (in contrast to understanding the design of the pretty-printer in such detail that the correctness of the patch is comprehended with all the lucid certainty of mathematical proof, rather than being merely surmised by intuition). But maybe we care more about fixing the bug with high probability today, than with certainty in some indefinite hypothetical future?  Maybe the effort is worth [a fifth of a shirt](https://hacktoberfest.digitalocean.com/stats/zackmdavis)??\n\nHumbly resolves #54752.\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "html_url": "https://github.com/rust-lang/rust/commit/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fda2f6f13e6e3bbbcd4e578b1d68a5a02a2b9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fda2f6f13e6e3bbbcd4e578b1d68a5a02a2b9e0", "html_url": "https://github.com/rust-lang/rust/commit/2fda2f6f13e6e3bbbcd4e578b1d68a5a02a2b9e0"}, {"sha": "1081bbbfc5d170f22b5810b40c456a17da59cf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1081bbbfc5d170f22b5810b40c456a17da59cf7f", "html_url": "https://github.com/rust-lang/rust/commit/1081bbbfc5d170f22b5810b40c456a17da59cf7f"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "83a05921510b4d2dcc37a0d9b1aabedf46a8156f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "patch": "@@ -2228,6 +2228,9 @@ impl<'a> State<'a> {\n                 self.word_nbsp(\"async\")?;\n                 self.print_capture_clause(capture_clause)?;\n                 self.s.space()?;\n+                // cbox/ibox in analogy to the `ExprKind::Block` arm above\n+                self.cbox(INDENT_UNIT)?;\n+                self.ibox(0)?;\n                 self.print_block_with_attrs(blk, attrs)?;\n             }\n             ast::ExprKind::Assign(ref lhs, ref rhs) => {"}, {"sha": "6930ee1a386fe2d311d1f0d4578f02b4b70b795f", "filename": "src/test/pretty/issue-54752-async-block.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4/src%2Ftest%2Fpretty%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4/src%2Ftest%2Fpretty%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-54752-async-block.rs?ref=7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "patch": "@@ -0,0 +1,7 @@\n+#![feature(async_await)]\n+#![allow(unused_parens)]\n+\n+// edition:2018\n+// pp-exact\n+\n+fn main() { let _a = (async  { }); }"}]}