{"sha": "747213a280ac5505e2537952f1d28efceda0bfcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzIxM2EyODBhYzU1MDVlMjUzNzk1MmYxZDI4ZWZjZWRhMGJmY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T05:51:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T05:51:26Z"}, "message": "auto merge of #10588 : huonw/rust/un@mutilate-task_rng, r=alexcrichton\n\nReplace with some unsafe code by storing a pointer into TLS-owned heap\r\ndata.", "tree": {"sha": "97046b0c474ebbeb7f38b3b56f597a7af90417cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97046b0c474ebbeb7f38b3b56f597a7af90417cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/747213a280ac5505e2537952f1d28efceda0bfcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/747213a280ac5505e2537952f1d28efceda0bfcc", "html_url": "https://github.com/rust-lang/rust/commit/747213a280ac5505e2537952f1d28efceda0bfcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/747213a280ac5505e2537952f1d28efceda0bfcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dea21f41d28640d8fa6e9d43a55b9a034383f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dea21f41d28640d8fa6e9d43a55b9a034383f34", "html_url": "https://github.com/rust-lang/rust/commit/1dea21f41d28640d8fa6e9d43a55b9a034383f34"}, {"sha": "020126ef75e318267415758cf771f25c3ac83bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/020126ef75e318267415758cf771f25c3ac83bdd", "html_url": "https://github.com/rust-lang/rust/commit/020126ef75e318267415758cf771f25c3ac83bdd"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "dfdb08b7550b93a8b68e8705d8a1b0a60aa1f555", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=747213a280ac5505e2537952f1d28efceda0bfcc", "patch": "@@ -444,17 +444,17 @@ mod tests {\n     fn test_rand_sample() {\n         let mut rand_sample = RandSample::<ConstRand>;\n \n-        assert_eq!(*rand_sample.sample(task_rng()), 0);\n-        assert_eq!(*rand_sample.ind_sample(task_rng()), 0);\n+        assert_eq!(*rand_sample.sample(&mut task_rng()), 0);\n+        assert_eq!(*rand_sample.ind_sample(&mut task_rng()), 0);\n     }\n \n     #[test]\n     fn test_normal() {\n         let mut norm = Normal::new(10.0, 10.0);\n-        let rng = task_rng();\n+        let mut rng = task_rng();\n         for _ in range(0, 1000) {\n-            norm.sample(rng);\n-            norm.ind_sample(rng);\n+            norm.sample(&mut rng);\n+            norm.ind_sample(&mut rng);\n         }\n     }\n     #[test]\n@@ -466,10 +466,10 @@ mod tests {\n     #[test]\n     fn test_exp() {\n         let mut exp = Exp::new(10.0);\n-        let rng = task_rng();\n+        let mut rng = task_rng();\n         for _ in range(0, 1000) {\n-            assert!(exp.sample(rng) >= 0.0);\n-            assert!(exp.ind_sample(rng) >= 0.0);\n+            assert!(exp.sample(&mut rng) >= 0.0);\n+            assert!(exp.ind_sample(&mut rng) >= 0.0);\n         }\n     }\n     #[test]"}, {"sha": "db9cefa4d799d3f39d78d0f84d789a43ff25e18b", "filename": "src/libstd/rand/distributions/range.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Frange.rs?ref=747213a280ac5505e2537952f1d28efceda0bfcc", "patch": "@@ -183,7 +183,7 @@ mod tests {\n \n     #[test]\n     fn test_integers() {\n-        let rng = task_rng();\n+        let mut rng = task_rng();\n         macro_rules! t (\n             ($($ty:ty),*) => {{\n                 $(\n@@ -193,9 +193,9 @@ mod tests {\n                    for &(low, high) in v.iter() {\n                         let mut sampler: Range<$ty> = Range::new(low, high);\n                         for _ in range(0, 1000) {\n-                            let v = sampler.sample(rng);\n+                            let v = sampler.sample(&mut rng);\n                             assert!(low <= v && v < high);\n-                            let v = sampler.ind_sample(rng);\n+                            let v = sampler.ind_sample(&mut rng);\n                             assert!(low <= v && v < high);\n                         }\n                     }\n@@ -208,7 +208,7 @@ mod tests {\n \n     #[test]\n     fn test_floats() {\n-        let rng = task_rng();\n+        let mut rng = task_rng();\n         macro_rules! t (\n             ($($ty:ty),*) => {{\n                 $(\n@@ -219,9 +219,9 @@ mod tests {\n                    for &(low, high) in v.iter() {\n                         let mut sampler: Range<$ty> = Range::new(low, high);\n                         for _ in range(0, 1000) {\n-                            let v = sampler.sample(rng);\n+                            let v = sampler.sample(&mut rng);\n                             assert!(low <= v && v < high);\n-                            let v = sampler.ind_sample(rng);\n+                            let v = sampler.ind_sample(&mut rng);\n                             assert!(low <= v && v < high);\n                         }\n                     }"}, {"sha": "39b4cca20635837c3d2d682f2e89b85baf6d02da", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=747213a280ac5505e2537952f1d28efceda0bfcc", "patch": "@@ -577,11 +577,24 @@ impl reseeding::Reseeder<StdRng> for TaskRngReseeder {\n     }\n }\n static TASK_RNG_RESEED_THRESHOLD: uint = 32_768;\n+type TaskRngInner = reseeding::ReseedingRng<StdRng, TaskRngReseeder>;\n /// The task-local RNG.\n-pub type TaskRng = reseeding::ReseedingRng<StdRng, TaskRngReseeder>;\n+#[no_send]\n+pub struct TaskRng {\n+    // This points into TLS (specifically, it points to the endpoint\n+    // of a ~ stored in TLS, to make it robust against TLS moving\n+    // things internally) and so this struct cannot be legally\n+    // transferred between tasks *and* it's unsafe to deallocate the\n+    // RNG other than when a task is finished.\n+    //\n+    // The use of unsafe code here is OK if the invariants above are\n+    // satisfied; and it allows us to avoid (unnecessarily) using a\n+    // GC'd or RC'd pointer.\n+    priv rng: *mut TaskRngInner\n+}\n \n // used to make space in TLS for a random number generator\n-local_data_key!(TASK_RNG_KEY: @mut TaskRng)\n+local_data_key!(TASK_RNG_KEY: ~TaskRngInner)\n \n /// Retrieve the lazily-initialized task-local random number\n /// generator, seeded by the system. Intended to be used in method\n@@ -594,34 +607,34 @@ local_data_key!(TASK_RNG_KEY: @mut TaskRng)\n /// if the operating system random number generator is rigged to give\n /// the same sequence always. If absolute consistency is required,\n /// explicitly select an RNG, e.g. `IsaacRng` or `Isaac64Rng`.\n-pub fn task_rng() -> @mut TaskRng {\n-    let r = local_data::get(TASK_RNG_KEY, |k| k.map(|k| *k));\n-    match r {\n+pub fn task_rng() -> TaskRng {\n+    local_data::get_mut(TASK_RNG_KEY, |rng| match rng {\n         None => {\n-            let rng = @mut reseeding::ReseedingRng::new(StdRng::new(),\n+            let mut rng = ~reseeding::ReseedingRng::new(StdRng::new(),\n                                                         TASK_RNG_RESEED_THRESHOLD,\n                                                         TaskRngReseeder);\n+            let ptr = &mut *rng as *mut TaskRngInner;\n+\n             local_data::set(TASK_RNG_KEY, rng);\n-            rng\n+\n+            TaskRng { rng: ptr }\n         }\n-        Some(rng) => rng\n-    }\n+        Some(rng) => TaskRng { rng: &mut **rng }\n+    })\n }\n \n-// Allow direct chaining with `task_rng`\n-impl<R: Rng> Rng for @mut R {\n-    #[inline]\n+impl Rng for TaskRng {\n     fn next_u32(&mut self) -> u32 {\n-        (**self).next_u32()\n+        unsafe { (*self.rng).next_u32() }\n     }\n-    #[inline]\n+\n     fn next_u64(&mut self) -> u64 {\n-        (**self).next_u64()\n+        unsafe { (*self.rng).next_u64() }\n     }\n \n     #[inline]\n     fn fill_bytes(&mut self, bytes: &mut [u8]) {\n-        (**self).fill_bytes(bytes);\n+        unsafe { (*self.rng).fill_bytes(bytes) }\n     }\n }\n "}, {"sha": "beabe03674a86471c140178cb60b55197ee5f8c2", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747213a280ac5505e2537952f1d28efceda0bfcc/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=747213a280ac5505e2537952f1d28efceda0bfcc", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ensure that the TaskRng isn't/doesn't become accidentally sendable.\n+\n+fn test_send<S: Send>() {}\n+\n+pub fn main() {\n+    test_send::<::std::rand::TaskRng>();\n+    //~^ ERROR: incompatible type `std::rand::TaskRng`, which does not fulfill `Send`\n+}"}]}