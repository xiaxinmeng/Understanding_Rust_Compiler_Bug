{"sha": "b8c60302e73796b98ec9a958740d492bac70acb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YzYwMzAyZTczNzk2Yjk4ZWM5YTk1ODc0MGQ0OTJiYWM3MGFjYjk=", "commit": {"author": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-08-29T01:06:22Z"}, "committer": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2018-08-29T01:37:57Z"}, "message": "Implemented map_or_else for Result<T, E>", "tree": {"sha": "005a1f0211db997a58781764409efea16e70f387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005a1f0211db997a58781764409efea16e70f387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c60302e73796b98ec9a958740d492bac70acb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c60302e73796b98ec9a958740d492bac70acb9", "html_url": "https://github.com/rust-lang/rust/commit/b8c60302e73796b98ec9a958740d492bac70acb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c60302e73796b98ec9a958740d492bac70acb9/comments", "author": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4a752202e56a9b2d978305cb2603208d4a3ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4a752202e56a9b2d978305cb2603208d4a3ab4", "html_url": "https://github.com/rust-lang/rust/commit/ec4a752202e56a9b2d978305cb2603208d4a3ab4"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "cbf73df4efe69e277ae4e5911e0a2fee279d8005", "filename": "src/libcore/result.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b8c60302e73796b98ec9a958740d492bac70acb9/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c60302e73796b98ec9a958740d492bac70acb9/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b8c60302e73796b98ec9a958740d492bac70acb9", "patch": "@@ -470,6 +470,35 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Maps a `Result<T, E>` to `T` by applying a function to a\n+    /// contained [`Ok`] value, or a fallback function to a\n+    /// contained [`Err`] value.\n+    ///\n+    /// This function can be used to unpack a successful result\n+    /// while handling an error.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let k = 21;\n+    ///\n+    /// let x = Ok(\"foo\");\n+    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 3);\n+    ///\n+    /// let x = Err(\"bar\");\n+    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 42);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.30.0\")]\n+    pub fn map_or_else<U, M: FnOnce(T) -> U, F: FnOnce(E) -> U>(self, fallback: F, map: M) -> U {\n+        self.map(map).unwrap_or_else(fallback)\n+    }\n+\n     /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\n     /// contained [`Err`] value, leaving an [`Ok`] value untouched.\n     ///"}]}