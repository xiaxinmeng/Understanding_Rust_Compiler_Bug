{"sha": "cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTdiYmUyN2FiYWM4ZWNlMGI5MjdmOWFiODMwZWY5OGY3OTI3ZTM=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-14T16:26:27Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:50Z"}, "message": "Refactor get_landing_pad to take a CleanupScope\n\nIt unwrapped the Option anyway, so this more closely resembles the\nreality of what's happening.", "tree": {"sha": "4cad899771a5a992fc098e322cfa935e0f34dde9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cad899771a5a992fc098e322cfa935e0f34dde9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "html_url": "https://github.com/rust-lang/rust/commit/cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28d00e781bbe111d3c9f7a864e6ecdd3d29bcfa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d00e781bbe111d3c9f7a864e6ecdd3d29bcfa9", "html_url": "https://github.com/rust-lang/rust/commit/28d00e781bbe111d3c9f7a864e6ecdd3d29bcfa9"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "982a8e9514c2346f04b08c1155c14beae4b174ef", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "patch": "@@ -743,7 +743,7 @@ fn trans_call_fn_once_adapter_shim<'a, 'blk, 'tcx>(\n     let _icx = push_ctxt(\"invoke_\");\n     let (llret, bcx) = if cleanup_scope.is_some() && !bcx.sess().no_landing_pads() {\n         let normal_bcx = bcx.fcx().build_new_block(\"normal-return\");\n-        let landing_pad = bcx.fcx().get_landing_pad(cleanup_scope);\n+        let landing_pad = bcx.fcx().get_landing_pad(cleanup_scope.as_mut().unwrap());\n \n         let llresult = bcx.invoke(llfn, &llargs[..], normal_bcx.llbb(), landing_pad, None);\n         (llresult, normal_bcx)"}, {"sha": "f1ca228035a66e2e44e0a384c240910917915982", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "patch": "@@ -207,14 +207,10 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n     ///\n     /// (The cleanups and resume instruction are created by\n     /// `trans_cleanups_to_exit_scope()`, not in this function itself.)\n-    pub fn get_landing_pad(&'blk self, scope: &mut Option<CleanupScope<'tcx>>) -> BasicBlockRef {\n-        // TODO: Factor out and take a CleanupScope.\n-        assert!(scope.is_some());\n-\n+    pub fn get_landing_pad(&'blk self, scope: &mut CleanupScope<'tcx>) -> BasicBlockRef {\n         debug!(\"get_landing_pad\");\n \n         // Check if a landing pad block exists; if not, create one.\n-        let mut scope = scope.as_mut().unwrap();\n         let mut pad_bcx = match scope.cached_landing_pad {\n             Some(llbb) => return llbb,\n             None => {\n@@ -270,28 +266,6 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         return pad_bcx.llbb();\n     }\n \n-    fn generate_resume_block(&self, label: UnwindKind) -> BasicBlockRef {\n-        // Generate a block that will resume unwinding to the calling function\n-        let bcx = self.build_new_block(\"resume\");\n-        match label {\n-            UnwindKind::LandingPad => {\n-                let addr = self.landingpad_alloca.get().unwrap();\n-                let lp = bcx.load(addr);\n-                Lifetime::End.call(&bcx, addr);\n-                if !bcx.sess().target.target.options.custom_unwind_resume {\n-                    bcx.resume(lp);\n-                } else {\n-                    let exc_ptr = bcx.extract_value(lp, 0);\n-                    bcx.call(bcx.fcx().eh_unwind_resume().reify(bcx.ccx()), &[exc_ptr], None);\n-                }\n-            }\n-            UnwindKind::CleanupPad(_) => {\n-                bcx.cleanup_ret(bcx.cleanup_pad(None, &[]), None);\n-            }\n-        }\n-        bcx.llbb()\n-    }\n-\n     /// Used when the caller wishes to jump to an early exit, such as a return,\n     /// break, continue, or unwind. This function will generate all cleanups\n     /// between the top of the stack and the exit `label` and return a basic\n@@ -306,7 +280,27 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n \n         // Check if we have already cached the unwinding of this\n         // scope for this label. If so, we can just branch to the cached block.\n-        let exit_llbb = cached_exit.unwrap_or_else(|| self.generate_resume_block(label));\n+        let exit_llbb = cached_exit.unwrap_or_else(|| {\n+            // Generate a block that will resume unwinding to the calling function\n+            let bcx = self.build_new_block(\"resume\");\n+            match label {\n+                UnwindKind::LandingPad => {\n+                    let addr = self.landingpad_alloca.get().unwrap();\n+                    let lp = bcx.load(addr);\n+                    Lifetime::End.call(&bcx, addr);\n+                    if !bcx.sess().target.target.options.custom_unwind_resume {\n+                        bcx.resume(lp);\n+                    } else {\n+                        let exc_ptr = bcx.extract_value(lp, 0);\n+                        bcx.call(bcx.fcx().eh_unwind_resume().reify(bcx.ccx()), &[exc_ptr], None);\n+                    }\n+                }\n+                UnwindKind::CleanupPad(_) => {\n+                    bcx.cleanup_ret(bcx.cleanup_pad(None, &[]), None);\n+                }\n+            }\n+            bcx.llbb()\n+        });\n \n         let name = scope.block_name(\"clean\");\n         debug!(\"generating cleanup for {}\", name);"}, {"sha": "549f1db22e7d8296ef4ccd7aa25f0ad6d0b47442", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd57bbe27abac8ece0b927f9ab830ef98f7927e3/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=cd57bbe27abac8ece0b927f9ab830ef98f7927e3", "patch": "@@ -312,7 +312,7 @@ fn trans_call_custom_dtor<'a, 'blk, 'tcx>(\n     let _icx = push_ctxt(\"invoke_\");\n     let (llret, bcx) = if cleanup_scope.is_some() && !bcx.sess().no_landing_pads() {\n         let normal_bcx = bcx.fcx().build_new_block(\"normal-return\");\n-        let landing_pad = bcx.fcx().get_landing_pad(cleanup_scope);\n+        let landing_pad = bcx.fcx().get_landing_pad(cleanup_scope.as_mut().unwrap());\n \n         let llresult = bcx.invoke(llfn, &llargs[..], normal_bcx.llbb(), landing_pad, None);\n         (llresult, normal_bcx)"}]}