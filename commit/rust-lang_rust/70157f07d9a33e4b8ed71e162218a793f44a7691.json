{"sha": "70157f07d9a33e4b8ed71e162218a793f44a7691", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTU3ZjA3ZDlhMzNlNGI4ZWQ3MWUxNjIyMThhNzkzZjQ0YTc2OTE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T07:59:15Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T07:27:59Z"}, "message": "Remove redundant completions", "tree": {"sha": "26f9d4c06ac0428c0a35450dd305d9076b89e2fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f9d4c06ac0428c0a35450dd305d9076b89e2fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70157f07d9a33e4b8ed71e162218a793f44a7691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70157f07d9a33e4b8ed71e162218a793f44a7691", "html_url": "https://github.com/rust-lang/rust/commit/70157f07d9a33e4b8ed71e162218a793f44a7691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70157f07d9a33e4b8ed71e162218a793f44a7691/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59483c217662fc5d89ef9da1cb93760e14a48418", "url": "https://api.github.com/repos/rust-lang/rust/commits/59483c217662fc5d89ef9da1cb93760e14a48418", "html_url": "https://github.com/rust-lang/rust/commit/59483c217662fc5d89ef9da1cb93760e14a48418"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "570091ba3d1829b2e6d2a100effc0260ab57d1c7", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/70157f07d9a33e4b8ed71e162218a793f44a7691/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70157f07d9a33e4b8ed71e162218a793f44a7691/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=70157f07d9a33e4b8ed71e162218a793f44a7691", "patch": "@@ -112,6 +112,11 @@ pub(crate) fn completions(\n ) -> Option<Completions> {\n     let ctx = CompletionContext::new(db, position, config)?;\n \n+    if ctx.no_completion_required() {\n+        // No work required here.\n+        return None;\n+    }\n+\n     let mut acc = Completions::default();\n     complete_attribute::complete_attribute(&mut acc, &ctx);\n     complete_fn_param::complete_fn_param(&mut acc, &ctx);\n@@ -157,6 +162,23 @@ mod tests {\n         panic!(\"completion detail not found: {}\", expected.detail)\n     }\n \n+    fn check_no_completion(ra_fixture: &str) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let config = CompletionConfig::default();\n+        analysis.completions(&config, position).unwrap();\n+\n+        let completions: Option<Vec<String>> = analysis\n+            .completions(&config, position)\n+            .unwrap()\n+            .and_then(|completions| if completions.is_empty() { None } else { Some(completions) })\n+            .map(|completions| {\n+                completions.into_iter().map(|completion| format!(\"{:?}\", completion)).collect()\n+            });\n+\n+        // `assert_eq` instead of `assert!(completions.is_none())` to get the list of completions if test will panic.\n+        assert_eq!(completions, None, \"Completions were generated, but weren't expected\");\n+    }\n+\n     #[test]\n     fn test_completion_detail_from_macro_generated_struct_fn_doc_attr() {\n         check_detail_and_documentation(\n@@ -208,4 +230,15 @@ mod tests {\n             DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \" Do the foo\" },\n         );\n     }\n+\n+    #[test]\n+    fn test_no_completions_required() {\n+        check_no_completion(\n+            r#\"\n+            fn foo() {\n+                for i i<|>\n+            }\n+            \"#,\n+        )\n+    }\n }"}, {"sha": "c9473cca6f93ce5f0a9c8b50c5fb38a1cde0a044", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70157f07d9a33e4b8ed71e162218a793f44a7691/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70157f07d9a33e4b8ed71e162218a793f44a7691/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=70157f07d9a33e4b8ed71e162218a793f44a7691", "patch": "@@ -16,10 +16,10 @@ use crate::{\n     call_info::ActiveParameter,\n     completion::{\n         patterns::{\n-            has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n-            has_impl_as_prev_sibling, has_impl_parent, has_item_list_or_source_file_parent,\n-            has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev,\n-            is_in_loop_body, is_match_arm, unsafe_is_prev,\n+            fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n+            has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n+            has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n+            has_trait_parent, if_is_prev, is_in_loop_body, is_match_arm, unsafe_is_prev,\n         },\n         CompletionConfig,\n     },\n@@ -91,6 +91,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) impl_as_prev_sibling: bool,\n     pub(super) is_match_arm: bool,\n     pub(super) has_item_list_or_source_file_parent: bool,\n+    pub(super) for_is_prev2: bool,\n+    pub(super) fn_is_prev: bool,\n     pub(super) locals: Vec<(String, Local)>,\n }\n \n@@ -174,6 +176,8 @@ impl<'a> CompletionContext<'a> {\n             if_is_prev: false,\n             is_match_arm: false,\n             has_item_list_or_source_file_parent: false,\n+            for_is_prev2: false,\n+            fn_is_prev: false,\n             locals,\n         };\n \n@@ -221,6 +225,14 @@ impl<'a> CompletionContext<'a> {\n         Some(ctx)\n     }\n \n+    /// Checks whether completions in that particular case don't make much sense.\n+    /// Examples:\n+    /// - `fn <|>` -- we expect function name, it's unlikely that \"hint\" will be helpful.\n+    /// - `for _ i<|>` -- obviously, it'll be \"in\" keyword.\n+    pub(crate) fn no_completion_required(&self) -> bool {\n+        self.fn_is_prev || self.for_is_prev2\n+    }\n+\n     /// The range of the identifier that is being completed.\n     pub(crate) fn source_range(&self) -> TextRange {\n         // check kind of macro-expanded token, but use range of original token\n@@ -253,6 +265,8 @@ impl<'a> CompletionContext<'a> {\n         self.mod_declaration_under_caret =\n             find_node_at_offset::<ast::Module>(&file_with_fake_ident, offset)\n                 .filter(|module| module.item_list().is_none());\n+        self.for_is_prev2 = for_is_prev2(syntax_element.clone());\n+        self.fn_is_prev = fn_is_prev(syntax_element.clone());\n     }\n \n     fn fill("}, {"sha": "76fcad631efb64aa19563fc7d15fabb396d276e6", "filename": "crates/ide/src/completion/patterns.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70157f07d9a33e4b8ed71e162218a793f44a7691/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70157f07d9a33e4b8ed71e162218a793f44a7691/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=70157f07d9a33e4b8ed71e162218a793f44a7691", "patch": "@@ -116,6 +116,25 @@ pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n         .is_some()\n }\n \n+pub(crate) fn fn_is_prev(element: SyntaxElement) -> bool {\n+    element\n+        .into_token()\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .filter(|it| it.kind() == FN_KW)\n+        .is_some()\n+}\n+\n+/// Check if the token previous to the previous one is `for`.\n+/// For example, `for _ i<|>` => true.\n+pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n+    element\n+        .into_token()\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .filter(|it| it.kind() == FOR_KW)\n+        .is_some()\n+}\n+\n #[test]\n fn test_if_is_prev() {\n     check_pattern_is_applicable(r\"if l<|>\", if_is_prev);"}]}