{"sha": "71c7e149e42cb0fc78a80db70d2525973311d488", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYzdlMTQ5ZTQyY2IwZmM3OGE4MGRiNzBkMjUyNTk3MzMxMWQ0ODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T18:44:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T18:44:39Z"}, "message": "Auto merge of #69004 - jonas-schievink:rollup-z2ymler, r=jonas-schievink\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68738 (Derive Clone + Eq for std::string::FromUtf8Error)\n - #68742 (implement AsMut<str> for String)\n - #68881 (rustc_codegen_llvm: always set AlwaysPreserve on all debuginfo variables)\n - #68911 (Speed up the inherent impl overlap check)\n - #68913 (Pretty-print generic params and where clauses on associated types)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2ae0b4581137453b4199f5d34bcff5c3c91413fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae0b4581137453b4199f5d34bcff5c3c91413fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c7e149e42cb0fc78a80db70d2525973311d488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c7e149e42cb0fc78a80db70d2525973311d488", "html_url": "https://github.com/rust-lang/rust/commit/71c7e149e42cb0fc78a80db70d2525973311d488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c7e149e42cb0fc78a80db70d2525973311d488/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "html_url": "https://github.com/rust-lang/rust/commit/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41"}, {"sha": "da005822cef776e9757127ce0e609e9c3a737b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/da005822cef776e9757127ce0e609e9c3a737b39", "html_url": "https://github.com/rust-lang/rust/commit/da005822cef776e9757127ce0e609e9c3a737b39"}], "stats": {"total": 297, "additions": 194, "deletions": 103}, "files": [{"sha": "3cb1f259a0b0dacd2d3a8c763d6f57125974505d", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -319,7 +319,7 @@ pub struct String {\n /// assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FromUtf8Error {\n     bytes: Vec<u8>,\n     error: Utf8Error,\n@@ -2208,6 +2208,14 @@ impl AsRef<str> for String {\n     }\n }\n \n+#[stable(feature = \"string_as_mut\", since = \"1.43.0\")]\n+impl AsMut<str> for String {\n+    #[inline]\n+    fn as_mut(&mut self) -> &mut str {\n+        self\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<[u8]> for String {\n     #[inline]"}, {"sha": "08859b2b24bde0b2c715cbb569f95ef1cd0c18e1", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -50,7 +50,11 @@ fn test_from_utf8() {\n \n     let xs = b\"hello\\xFF\".to_vec();\n     let err = String::from_utf8(xs).unwrap_err();\n+    assert_eq!(err.as_bytes(), b\"hello\\xff\");\n+    let err_clone = err.clone();\n+    assert_eq!(err, err_clone);\n     assert_eq!(err.into_bytes(), b\"hello\\xff\".to_vec());\n+    assert_eq!(err_clone.utf8_error().valid_up_to(), 5);\n }\n \n #[test]"}, {"sha": "7cb1f3aa0e8514f5c7e1fbf04f39c068321c66d8", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -323,7 +323,7 @@ rustc_queries! {\n         query associated_item(_: DefId) -> ty::AssocItem {}\n \n         /// Collects the associated items defined on a trait or impl.\n-        query associated_items(key: DefId) -> ty::AssocItemsIterator<'tcx> {\n+        query associated_items(key: DefId) -> &'tcx [ty::AssocItem] {\n             desc { |tcx| \"collecting associated items of {}\", tcx.def_path_str(key) }\n         }\n "}, {"sha": "783807b5c3b59e3d1e418394ece096fe7b16861a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -541,6 +541,7 @@ fn vtable_methods<'tcx>(\n     tcx.arena.alloc_from_iter(supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n         let trait_methods = tcx\n             .associated_items(trait_ref.def_id())\n+            .iter()\n             .filter(|item| item.kind == ty::AssocKind::Method);\n \n         // Now list each method's DefId and InternalSubsts (for within its trait)."}, {"sha": "3c886ce7f3eb79cc2879d0fb64249dd3fde13fa3", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -212,6 +212,7 @@ fn object_safety_violations_for_trait(\n     // Check methods for violations.\n     let mut violations: Vec<_> = tcx\n         .associated_items(trait_def_id)\n+        .iter()\n         .filter(|item| item.kind == ty::AssocKind::Method)\n         .filter_map(|item| {\n             object_safety_violation_for_method(tcx, trait_def_id, &item)\n@@ -277,6 +278,7 @@ fn object_safety_violations_for_trait(\n \n     violations.extend(\n         tcx.associated_items(trait_def_id)\n+            .iter()\n             .filter(|item| item.kind == ty::AssocKind::Const)\n             .map(|item| ObjectSafetyViolation::AssocConst(item.ident.name, item.ident.span)),\n     );\n@@ -632,7 +634,9 @@ fn object_ty_for_trait<'tcx>(\n \n     let mut associated_types = traits::supertraits(tcx, ty::Binder::dummy(trait_ref))\n         .flat_map(|super_trait_ref| {\n-            tcx.associated_items(super_trait_ref.def_id()).map(move |item| (super_trait_ref, item))\n+            tcx.associated_items(super_trait_ref.def_id())\n+                .iter()\n+                .map(move |item| (super_trait_ref, item))\n         })\n         .filter(|(_, item)| item.kind == ty::AssocKind::Type)\n         .collect::<Vec<_>>();"}, {"sha": "e0eb731f9b21791f5ea459c6344212494765b184", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1473,7 +1473,7 @@ fn assoc_ty_def(\n         {\n             return specialization_graph::NodeItem {\n                 node: specialization_graph::Node::Impl(impl_def_id),\n-                item,\n+                item: *item,\n             };\n         }\n     }"}, {"sha": "36a84369d4a3ac6e407f0e9d2cf49fae1ec31b7e", "filename": "src/librustc/traits/types/specialization_graph.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Ftypes%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Ftypes%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftypes%2Fspecialization_graph.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> Node {\n     }\n \n     /// Iterate over the items defined directly by the given (impl or trait) node.\n-    pub fn items(&self, tcx: TyCtxt<'tcx>) -> ty::AssocItemsIterator<'tcx> {\n+    pub fn items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [ty::AssocItem] {\n         tcx.associated_items(self.def_id())\n     }\n \n@@ -98,8 +98,10 @@ impl<'tcx> Node {\n     ) -> Option<ty::AssocItem> {\n         use crate::ty::AssocKind::*;\n \n-        tcx.associated_items(self.def_id()).find(move |impl_item| {\n-            match (trait_item_kind, impl_item.kind) {\n+        tcx.associated_items(self.def_id())\n+            .iter()\n+            .find(move |impl_item| {\n+                match (trait_item_kind, impl_item.kind) {\n                 | (Const, Const)\n                 | (Method, Method)\n                 | (Type, Type)\n@@ -112,7 +114,8 @@ impl<'tcx> Node {\n                 | (OpaqueTy, _)\n                 => false,\n             }\n-        })\n+            })\n+            .copied()\n     }\n \n     pub fn def_id(&self) -> DefId {"}, {"sha": "1c47b5353160dfbf0861295167e4eaa9be7c8374", "filename": "src/librustc/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let extend_cause_with_original_assoc_item_obligation =\n             |cause: &mut traits::ObligationCause<'_>,\n              pred: &ty::Predicate<'_>,\n-             trait_assoc_items: ty::AssocItemsIterator<'_>| {\n+             trait_assoc_items: &[ty::AssocItem]| {\n                 let trait_item = tcx\n                     .hir()\n                     .as_local_hir_id(trait_ref.def_id)\n@@ -283,6 +283,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind))\n                         {\n                             if let Some((impl_item, trait_assoc_item)) = trait_assoc_items\n+                                .iter()\n                                 .filter(|i| i.def_id == *item_def_id)\n                                 .next()\n                                 .and_then(|trait_assoc_item| {\n@@ -325,7 +326,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 extend_cause_with_original_assoc_item_obligation(\n                     &mut cause,\n                     &pred,\n-                    trait_assoc_items.clone(),\n+                    trait_assoc_items,\n                 );\n                 traits::Obligation::new(cause, param_env, pred)\n             });"}, {"sha": "f4006a1cd40c19991c8b540e11f4bd1fbc7f0420", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -122,6 +122,7 @@ impl<'tcx> OverloadedDeref<'tcx> {\n         };\n         let method_def_id = tcx\n             .associated_items(trait_def_id.unwrap())\n+            .iter()\n             .find(|m| m.kind == ty::AssocKind::Method)\n             .unwrap()\n             .def_id;"}, {"sha": "c7f19513f666ee30680afc5033d1a73991142330", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -376,6 +376,7 @@ impl<'tcx> Instance<'tcx> {\n         let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n         let call_once = tcx\n             .associated_items(fn_once)\n+            .iter()\n             .find(|it| it.kind == ty::AssocKind::Method)\n             .unwrap()\n             .def_id;"}, {"sha": "0118fc4c8ac8421a35427106b33578ffa73e0aef", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -2705,14 +2705,14 @@ impl<'tcx> TyCtxt<'tcx> {\n             .for_each(|&body_id| f(self.hir().body_owner_def_id(body_id)));\n     }\n \n-    pub fn provided_trait_methods(self, id: DefId) -> Vec<AssocItem> {\n+    pub fn provided_trait_methods(self, id: DefId) -> impl Iterator<Item = &'tcx AssocItem> {\n         self.associated_items(id)\n+            .iter()\n             .filter(|item| item.kind == AssocKind::Method && item.defaultness.has_value())\n-            .collect()\n     }\n \n     pub fn trait_relevant_for_never(self, did: DefId) -> bool {\n-        self.associated_items(did).any(|item| item.relevant_for_never())\n+        self.associated_items(did).iter().any(|item| item.relevant_for_never())\n     }\n \n     pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {\n@@ -2974,25 +2974,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, HashStable)]\n-pub struct AssocItemsIterator<'tcx> {\n-    pub items: &'tcx [AssocItem],\n-}\n-\n-impl<'tcx> Iterator for AssocItemsIterator<'tcx> {\n-    type Item = AssocItem;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<AssocItem> {\n-        if let Some((first, rest)) = self.items.split_first() {\n-            self.items = rest;\n-            Some(*first)\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n #[derive(Clone, HashStable)]\n pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n "}, {"sha": "0718853b1df59443cde29bbac69d5b8b1c64e3f9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1066,6 +1066,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     ) -> ProjectionTy<'tcx> {\n         let item_def_id = tcx\n             .associated_items(trait_ref.def_id)\n+            .iter()\n             .find(|item| {\n                 item.kind == ty::AssocKind::Type\n                     && tcx.hygienic_eq(item_name, item.ident, trait_ref.def_id)"}, {"sha": "5d5fa4090c800c62e8e8e61d7058782b0c6ba9f9", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -355,7 +355,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);\n         self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n-            if let Some(item) = self.associated_items(impl_did).next() {\n+            if let Some(item) = self.associated_items(impl_did).first() {\n                 if validate(self, impl_did).is_ok() {\n                     dtor_did = Some(item.def_id);\n                 }"}, {"sha": "78bf149f0e01a4c569196aa21ee6952594a3963d", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1074,12 +1074,15 @@ impl<'a> State<'a> {\n     fn print_associated_type(\n         &mut self,\n         ident: ast::Ident,\n+        generics: &ast::Generics,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n     ) {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n+        self.print_generic_params(&generics.params);\n         self.print_type_bounds(\":\", bounds);\n+        self.print_where_clause(&generics.where_clause);\n         if let Some(ty) = ty {\n             self.s.space();\n             self.word_space(\"=\");\n@@ -1474,7 +1477,7 @@ impl<'a> State<'a> {\n                 self.print_fn_full(sig, item.ident, &item.generics, &item.vis, body, &item.attrs);\n             }\n             ast::AssocItemKind::TyAlias(bounds, ty) => {\n-                self.print_associated_type(item.ident, bounds, ty.as_deref());\n+                self.print_associated_type(item.ident, &item.generics, bounds, ty.as_deref());\n             }\n             ast::AssocItemKind::Macro(mac) => {\n                 self.print_mac(mac);"}, {"sha": "22effb102fd67d18815cbae542448ffd7e6a1b22", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -559,7 +559,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 file_metadata,\n                 loc.line as c_uint,\n                 type_metadata,\n-                self.sess().opts.optimize != config::OptLevel::No,\n+                true,\n                 DIFlags::FlagZero,\n                 argument_index,\n                 align.bytes() as u32,"}, {"sha": "071c3de4b1c2c8d247b31664697bf83d6d17f602", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -454,14 +454,17 @@ impl<'a> State<'a> {\n     fn print_associated_type(\n         &mut self,\n         ident: ast::Ident,\n+        generics: &hir::Generics<'_>,\n         bounds: Option<hir::GenericBounds<'_>>,\n         ty: Option<&hir::Ty<'_>>,\n     ) {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n+        self.print_generic_params(&generics.params);\n         if let Some(bounds) = bounds {\n             self.print_bounds(\":\", bounds);\n         }\n+        self.print_where_clause(&generics.where_clause);\n         if let Some(ty) = ty {\n             self.s.space();\n             self.word_space(\"=\");\n@@ -902,6 +905,7 @@ impl<'a> State<'a> {\n             hir::TraitItemKind::Type(ref bounds, ref default) => {\n                 self.print_associated_type(\n                     ti.ident,\n+                    &ti.generics,\n                     Some(bounds),\n                     default.as_ref().map(|ty| &**ty),\n                 );\n@@ -930,7 +934,7 @@ impl<'a> State<'a> {\n                 self.ann.nested(self, Nested::Body(body));\n             }\n             hir::ImplItemKind::TyAlias(ref ty) => {\n-                self.print_associated_type(ii.ident, None, Some(ty));\n+                self.print_associated_type(ii.ident, &ii.generics, None, Some(ty));\n             }\n             hir::ImplItemKind::OpaqueTy(bounds) => {\n                 self.word_space(\"type\");"}, {"sha": "a8c66be359c4ae363bfc02f6b8dddcb6a207ed98", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -68,6 +68,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n             let call_mut = tcx\n                 .associated_items(fn_mut)\n+                .iter()\n                 .find(|it| it.kind == ty::AssocKind::Method)\n                 .unwrap()\n                 .def_id;"}, {"sha": "091ae1bbb799d5a0c0b1ec3104bd79112078fa59", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -539,7 +539,7 @@ where\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n         let drop_trait = tcx.lang_items().drop_trait().unwrap();\n-        let drop_fn = tcx.associated_items(drop_trait).next().unwrap();\n+        let drop_fn = tcx.associated_items(drop_trait)[0];\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n "}, {"sha": "888f4370dd5e80d127ed2e512784847f7a05e994", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -362,12 +362,12 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n                     return;\n                 }\n \n-                let provided_trait_methods = self.tcx.provided_trait_methods(trait_def_id);\n-                self.worklist.reserve(provided_trait_methods.len());\n-                for default_method in provided_trait_methods {\n-                    let hir_id = self.tcx.hir().as_local_hir_id(default_method.def_id).unwrap();\n-                    self.worklist.push(hir_id);\n-                }\n+                // FIXME(#53488) remove `let`\n+                let tcx = self.tcx;\n+                self.worklist.extend(\n+                    tcx.provided_trait_methods(trait_def_id)\n+                        .map(|assoc| tcx.hir().as_local_hir_id(assoc.def_id).unwrap()),\n+                );\n             }\n         }\n     }"}, {"sha": "12debfb66a431ec32b228fe5ffa72355b5e7e57e", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -468,6 +468,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                         let trait_item_def_id = self\n                             .tcx\n                             .associated_items(trait_did)\n+                            .iter()\n                             .find(|item| item.ident.name == impl_item.ident.name)\n                             .map(|item| item.def_id);\n                         if let Some(def_id) = trait_item_def_id {"}, {"sha": "401e17227511368a1ddb06ccc776a209150583b9", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -423,6 +423,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                             qualname.push_str(&self.tcx.def_path_str(def_id));\n                             self.tcx\n                                 .associated_items(def_id)\n+                                .iter()\n                                 .find(|item| item.ident.name == ident.name)\n                                 .map(|item| decl_id = Some(item.def_id));\n                         }\n@@ -717,6 +718,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     let ti = self.tcx.associated_item(decl_id);\n                     self.tcx\n                         .associated_items(ti.container.id())\n+                        .iter()\n                         .find(|item| {\n                             item.ident.name == ti.ident.name && item.defaultness.has_value()\n                         })"}, {"sha": "b032acf82f582b4813f2d4fe84bcfe5249d951f9", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -206,12 +206,10 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n-fn associated_items<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AssocItemsIterator<'tcx> {\n-    ty::AssocItemsIterator {\n-        items: tcx.arena.alloc_from_iter(\n-            tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did)),\n-        ),\n-    }\n+fn associated_items<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [ty::AssocItem] {\n+    tcx.arena.alloc_from_iter(\n+        tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did)),\n+    )\n }\n \n fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {"}, {"sha": "2909d0f8c54e7f1d66221797801646c608b30dd9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1109,7 +1109,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_def_id: DefId,\n         assoc_name: ast::Ident,\n     ) -> bool {\n-        self.tcx().associated_items(trait_def_id).any(|item| {\n+        self.tcx().associated_items(trait_def_id).iter().any(|item| {\n             item.kind == ty::AssocKind::Type\n                 && self.tcx().hygienic_eq(assoc_name, item.ident, trait_def_id)\n         })\n@@ -1347,6 +1347,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             tcx.adjust_ident_and_get_scope(binding.item_name, candidate.def_id(), hir_ref_id);\n         let assoc_ty = tcx\n             .associated_items(candidate.def_id())\n+            .iter()\n             .find(|i| i.kind == ty::AssocKind::Type && i.ident.modern() == assoc_ident)\n             .expect(\"missing associated type\");\n \n@@ -1512,6 +1513,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Predicate::Trait(pred, _) => {\n                         associated_types.entry(span).or_default().extend(\n                             tcx.associated_items(pred.def_id())\n+                                .iter()\n                                 .filter(|item| item.kind == ty::AssocKind::Type)\n                                 .map(|item| item.def_id),\n                         );\n@@ -1969,6 +1971,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let bound_span = self\n                     .tcx()\n                     .associated_items(bound.def_id())\n+                    .iter()\n                     .find(|item| {\n                         item.kind == ty::AssocKind::Type\n                             && self.tcx().hygienic_eq(assoc_name, item.ident, bound.def_id())\n@@ -2198,6 +2201,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             tcx.adjust_ident_and_get_scope(assoc_ident, trait_did, hir_ref_id);\n         let item = tcx\n             .associated_items(trait_did)\n+            .iter()\n             .find(|i| Namespace::from(i.kind) == Namespace::Type && i.ident.modern() == assoc_ident)\n             .expect(\"missing associated type\");\n "}, {"sha": "707125b3fd522d160d0c977fa5fef656f42a7e71", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if is_gen {\n             // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n             // associated item and not yield.\n-            let return_assoc_item = self.tcx.associated_items(gen_trait).nth(1).unwrap().def_id;\n+            let return_assoc_item = self.tcx.associated_items(gen_trait)[1].def_id;\n             if return_assoc_item != projection.projection_def_id() {\n                 debug!(\"deduce_sig_from_projection: not return assoc item of generator\");\n                 return None;\n@@ -673,7 +673,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // The `Future` trait has only one associted item, `Output`,\n         // so check that this is what we see.\n-        let output_assoc_item = self.tcx.associated_items(future_trait).nth(0).unwrap().def_id;\n+        let output_assoc_item = self.tcx.associated_items(future_trait)[0].def_id;\n         if output_assoc_item != predicate.projection_ty.item_def_id {\n             span_bug!(\n                 cause_span,"}, {"sha": "8c7f1330820e37faaf36013cc490c564f0191e64", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -536,6 +536,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(deref_trait)\n+                    .iter()\n                     .find(|item| item.kind == ty::AssocKind::Type)\n                     .unwrap()\n                     .def_id;"}, {"sha": "67d8030a9d69bd95a487a0dcd669cd3d79f1d59b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -474,8 +474,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         item_name: ast::Ident,\n         ns: Namespace,\n     ) -> Option<ty::AssocItem> {\n-        self.tcx.associated_items(def_id).find(|item| {\n-            Namespace::from(item.kind) == ns && self.tcx.hygienic_eq(item_name, item.ident, def_id)\n-        })\n+        self.tcx\n+            .associated_items(def_id)\n+            .iter()\n+            .find(|item| {\n+                Namespace::from(item.kind) == ns\n+                    && self.tcx.hygienic_eq(item_name, item.ident, def_id)\n+            })\n+            .copied()\n     }\n }"}, {"sha": "497a401a031e582f3d3a0abbd6def4da9d2482d2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1696,18 +1696,20 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 let max_dist = max(name.as_str().len(), 3) / 3;\n                 self.tcx\n                     .associated_items(def_id)\n+                    .iter()\n                     .filter(|x| {\n                         let dist = lev_distance(&*name.as_str(), &x.ident.as_str());\n                         Namespace::from(x.kind) == Namespace::Value && dist > 0 && dist <= max_dist\n                     })\n+                    .copied()\n                     .collect()\n             } else {\n                 self.fcx\n                     .associated_item(def_id, name, Namespace::Value)\n                     .map_or(Vec::new(), |x| vec![x])\n             }\n         } else {\n-            self.tcx.associated_items(def_id).collect()\n+            self.tcx.associated_items(def_id).to_vec()\n         }\n     }\n }"}, {"sha": "f7cba1521cb06ded24042894c90503d19ad3e231", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1976,13 +1976,15 @@ fn check_impl_items_against_trait<'tcx>(\n         let ty_impl_item = tcx.associated_item(tcx.hir().local_def_id(impl_item.hir_id));\n         let ty_trait_item = tcx\n             .associated_items(impl_trait_ref.def_id)\n+            .iter()\n             .find(|ac| {\n                 Namespace::from(&impl_item.kind) == Namespace::from(ac.kind)\n                     && tcx.hygienic_eq(ty_impl_item.ident, ac.ident, impl_trait_ref.def_id)\n             })\n             .or_else(|| {\n                 // Not compatible, but needed for the error message\n                 tcx.associated_items(impl_trait_ref.def_id)\n+                    .iter()\n                     .find(|ac| tcx.hygienic_eq(ty_impl_item.ident, ac.ident, impl_trait_ref.def_id))\n             });\n \n@@ -2096,7 +2098,7 @@ fn check_impl_items_against_trait<'tcx>(\n \n         if !is_implemented && !traits::impl_is_default(tcx, impl_id) {\n             if !trait_item.defaultness.has_value() {\n-                missing_items.push(trait_item);\n+                missing_items.push(*trait_item);\n             } else if associated_type_overridden {\n                 invalidated_items.push(trait_item.ident);\n             }\n@@ -5175,7 +5177,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check for `Future` implementations by constructing a predicate to\n                 // prove: `<T as Future>::Output == U`\n                 let future_trait = self.tcx.lang_items().future_trait().unwrap();\n-                let item_def_id = self.tcx.associated_items(future_trait).next().unwrap().def_id;\n+                let item_def_id = self.tcx.associated_items(future_trait)[0].def_id;\n                 let predicate =\n                     ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n                         // `<T as Future>::Output`"}, {"sha": "fb9c173f52000759c40d1b9fb9a62ea11b64a6ae", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 59, "deletions": 35, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -1,6 +1,6 @@\n use crate::namespace::Namespace;\n use rustc::traits::{self, IntercrateMode, SkipLeakCheck};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{AssocItem, TyCtxt};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -17,38 +17,60 @@ struct InherentOverlapChecker<'tcx> {\n }\n \n impl InherentOverlapChecker<'tcx> {\n+    /// Checks whether any associated items in impls 1 and 2 share the same identifier and\n+    /// namespace.\n+    fn impls_have_common_items(&self, impl1: DefId, impl2: DefId) -> bool {\n+        let impl_items1 = self.tcx.associated_items(impl1);\n+        let impl_items2 = self.tcx.associated_items(impl2);\n+\n+        for item1 in &impl_items1[..] {\n+            for item2 in &impl_items2[..] {\n+                // Avoid costly `.modern()` calls as much as possible by doing them as late as we\n+                // can. Compare raw symbols first.\n+                if item1.ident.name == item2.ident.name\n+                    && Namespace::from(item1.kind) == Namespace::from(item2.kind)\n+                {\n+                    // Symbols and namespace match, compare hygienically.\n+                    if item1.ident.modern() == item2.ident.modern() {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n+\n     fn check_for_common_items_in_impls(\n         &self,\n         impl1: DefId,\n         impl2: DefId,\n         overlap: traits::OverlapResult<'_>,\n     ) {\n-        let name_and_namespace = |def_id| {\n-            let item = self.tcx.associated_item(def_id);\n-            (item.ident.modern(), Namespace::from(item.kind))\n-        };\n+        let name_and_namespace =\n+            |assoc: &AssocItem| (assoc.ident.modern(), Namespace::from(assoc.kind));\n \n-        let impl_items1 = self.tcx.associated_item_def_ids(impl1);\n-        let impl_items2 = self.tcx.associated_item_def_ids(impl2);\n+        let impl_items1 = self.tcx.associated_items(impl1);\n+        let impl_items2 = self.tcx.associated_items(impl2);\n \n-        for &item1 in &impl_items1[..] {\n+        for item1 in &impl_items1[..] {\n             let (name, namespace) = name_and_namespace(item1);\n \n-            for &item2 in &impl_items2[..] {\n+            for item2 in &impl_items2[..] {\n                 if (name, namespace) == name_and_namespace(item2) {\n                     let mut err = struct_span_err!(\n                         self.tcx.sess,\n-                        self.tcx.span_of_impl(item1).unwrap(),\n+                        self.tcx.span_of_impl(item1.def_id).unwrap(),\n                         E0592,\n                         \"duplicate definitions with name `{}`\",\n                         name\n                     );\n                     err.span_label(\n-                        self.tcx.span_of_impl(item1).unwrap(),\n+                        self.tcx.span_of_impl(item1.def_id).unwrap(),\n                         format!(\"duplicate definitions for `{}`\", name),\n                     );\n                     err.span_label(\n-                        self.tcx.span_of_impl(item2).unwrap(),\n+                        self.tcx.span_of_impl(item2.def_id).unwrap(),\n                         format!(\"other definition for `{}`\", name),\n                     );\n \n@@ -66,27 +88,21 @@ impl InherentOverlapChecker<'tcx> {\n         }\n     }\n \n-    fn check_for_overlapping_inherent_impls(&self, ty_def_id: DefId) {\n-        let impls = self.tcx.inherent_impls(ty_def_id);\n-\n-        for (i, &impl1_def_id) in impls.iter().enumerate() {\n-            for &impl2_def_id in &impls[(i + 1)..] {\n-                traits::overlapping_impls(\n-                    self.tcx,\n-                    impl1_def_id,\n-                    impl2_def_id,\n-                    IntercrateMode::Issue43355,\n-                    // We go ahead and just skip the leak check for\n-                    // inherent impls without warning.\n-                    SkipLeakCheck::Yes,\n-                    |overlap| {\n-                        self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id, overlap);\n-                        false\n-                    },\n-                    || true,\n-                );\n-            }\n-        }\n+    fn check_for_overlapping_inherent_impls(&self, impl1_def_id: DefId, impl2_def_id: DefId) {\n+        traits::overlapping_impls(\n+            self.tcx,\n+            impl1_def_id,\n+            impl2_def_id,\n+            IntercrateMode::Issue43355,\n+            // We go ahead and just skip the leak check for\n+            // inherent impls without warning.\n+            SkipLeakCheck::Yes,\n+            |overlap| {\n+                self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id, overlap);\n+                false\n+            },\n+            || true,\n+        );\n     }\n }\n \n@@ -97,8 +113,16 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::Union(..) => {\n-                let type_def_id = self.tcx.hir().local_def_id(item.hir_id);\n-                self.check_for_overlapping_inherent_impls(type_def_id);\n+                let ty_def_id = self.tcx.hir().local_def_id(item.hir_id);\n+                let impls = self.tcx.inherent_impls(ty_def_id);\n+\n+                for (i, &impl1_def_id) in impls.iter().enumerate() {\n+                    for &impl2_def_id in &impls[(i + 1)..] {\n+                        if self.impls_have_common_items(impl1_def_id, impl2_def_id) {\n+                            self.check_for_overlapping_inherent_impls(impl1_def_id, impl2_def_id);\n+                        }\n+                    }\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "288446b6219cea21533ec96ed5c7a7a8d5499b3c", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -87,7 +87,6 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     .cx\n                     .tcx\n                     .provided_trait_methods(trait_def_id)\n-                    .into_iter()\n                     .map(|meth| meth.ident.to_string())\n                     .collect();\n \n@@ -115,6 +114,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .cx\n                             .tcx\n                             .associated_items(impl_def_id)\n+                            .iter()\n+                            .copied()\n                             .collect::<Vec<_>>()\n                             .clean(self.cx),\n                         polarity: None,"}, {"sha": "90ce8802f65845d7dfbc0722b441bfdd337bf033", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -191,7 +191,7 @@ pub fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind)\n \n pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let auto_trait = cx.tcx.trait_def(did).has_auto_impl;\n-    let trait_items = cx.tcx.associated_items(did).map(|item| item.clean(cx)).collect();\n+    let trait_items = cx.tcx.associated_items(did).iter().map(|item| item.clean(cx)).collect();\n     let predicates = cx.tcx.predicates_of(did);\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n@@ -376,6 +376,7 @@ pub fn build_impl(\n     } else {\n         (\n             tcx.associated_items(did)\n+                .iter()\n                 .filter_map(|item| {\n                     if associated_trait.is_some() || item.vis == ty::Visibility::Public {\n                         Some(item.clean(cx))\n@@ -401,9 +402,7 @@ pub fn build_impl(\n \n     let provided = trait_\n         .def_id()\n-        .map(|did| {\n-            tcx.provided_trait_methods(did).into_iter().map(|meth| meth.ident.to_string()).collect()\n-        })\n+        .map(|did| tcx.provided_trait_methods(did).map(|meth| meth.ident.to_string()).collect())\n         .unwrap_or_default();\n \n     debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());"}, {"sha": "87edc88611f3ab64a2868784bab79450f05905df", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -2108,11 +2108,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n         let provided: FxHashSet<String> = trait_\n             .def_id()\n             .map(|did| {\n-                cx.tcx\n-                    .provided_trait_methods(did)\n-                    .into_iter()\n-                    .map(|meth| meth.ident.to_string())\n-                    .collect()\n+                cx.tcx.provided_trait_methods(did).map(|meth| meth.ident.to_string()).collect()\n             })\n             .unwrap_or_default();\n "}, {"sha": "9ecf6d531299fb803330fa95cc081a784e8a7ada", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -206,6 +206,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 return cx\n                     .tcx\n                     .associated_items(did)\n+                    .iter()\n                     .find(|item| item.ident.name == item_name)\n                     .and_then(|item| match item.kind {\n                         ty::AssocKind::Method => Some(\"method\"),"}, {"sha": "0c95add490110babd0de86c8bd6d85714cf1ca0d", "filename": "src/test/pretty/gat-bounds.pp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Ftest%2Fpretty%2Fgat-bounds.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.pp?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -0,0 +1,25 @@\n+// Check that associated types print generic parameters and where clauses.\n+// See issue #67509.\n+\n+// pretty-compare-only\n+// pp-exact:gat-bounds.pp\n+\n+#![feature(generic_associated_types)]\n+\n+trait X {\n+    type\n+    Y<T>: Trait\n+    where\n+    Self: Sized;\n+}\n+\n+impl X for () {\n+    type\n+    Y<T>\n+    where\n+    Self: Sized\n+    =\n+    u32;\n+}\n+\n+fn main() { }"}, {"sha": "1275f432a3c500e156de02e79ef7ad4ae732e51c", "filename": "src/test/pretty/gat-bounds.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c7e149e42cb0fc78a80db70d2525973311d488/src%2Ftest%2Fpretty%2Fgat-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fgat-bounds.rs?ref=71c7e149e42cb0fc78a80db70d2525973311d488", "patch": "@@ -0,0 +1,17 @@\n+// Check that associated types print generic parameters and where clauses.\n+// See issue #67509.\n+\n+// pretty-compare-only\n+// pp-exact:gat-bounds.pp\n+\n+#![feature(generic_associated_types)]\n+\n+trait X {\n+    type Y<T>: Trait where Self: Sized;\n+}\n+\n+impl X for () {\n+    type Y<T> where Self: Sized = u32;\n+}\n+\n+fn main() { }"}]}