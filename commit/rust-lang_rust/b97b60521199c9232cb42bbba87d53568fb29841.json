{"sha": "b97b60521199c9232cb42bbba87d53568fb29841", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5N2I2MDUyMTE5OWM5MjMyY2I0MmJiYmE4N2Q1MzU2OGZiMjk4NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-07T19:21:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-07T19:21:49Z"}, "message": "Auto merge of #38733 - sfackler:peek-mut-pop, r=alexcrichton\n\nAdd PeekMut::pop\n\nA fairly common workflow is to put a bunch of stuff into a binary heap\nand then mutate the top value until its empty. This both makes that a\nbit more convenient (no need to save a boolean off and pop after to\navoid borrowck issues), and a bit more efficient since you only shift\nonce.\n\nr? @alexcrichton\n\ncc @rust-lang/libs", "tree": {"sha": "23e450c0b5943617c9bb4ae87a32e9784d406f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e450c0b5943617c9bb4ae87a32e9784d406f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97b60521199c9232cb42bbba87d53568fb29841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97b60521199c9232cb42bbba87d53568fb29841", "html_url": "https://github.com/rust-lang/rust/commit/b97b60521199c9232cb42bbba87d53568fb29841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97b60521199c9232cb42bbba87d53568fb29841/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31918864261c9fde79df1f84c5f22ab40b115ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/31918864261c9fde79df1f84c5f22ab40b115ca9", "html_url": "https://github.com/rust-lang/rust/commit/31918864261c9fde79df1f84c5f22ab40b115ca9"}, {"sha": "54dc533494bba8256dcd7c54597fb1d42ef070ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/54dc533494bba8256dcd7c54597fb1d42ef070ab", "html_url": "https://github.com/rust-lang/rust/commit/54dc533494bba8256dcd7c54597fb1d42ef070ab"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "7d245f79f6998ccd61a816ecf50d907b314fc96d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b97b60521199c9232cb42bbba87d53568fb29841/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97b60521199c9232cb42bbba87d53568fb29841/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=b97b60521199c9232cb42bbba87d53568fb29841", "patch": "@@ -153,8 +153,7 @@\n \n use core::ops::{Deref, DerefMut};\n use core::iter::{FromIterator, FusedIterator};\n-use core::mem::swap;\n-use core::mem::size_of;\n+use core::mem::{swap, size_of};\n use core::ptr;\n use core::fmt;\n \n@@ -226,12 +225,15 @@ pub struct BinaryHeap<T> {\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>,\n+    sift: bool,\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n     fn drop(&mut self) {\n-        self.heap.sift_down(0);\n+        if self.sift {\n+            self.heap.sift_down(0);\n+        }\n     }\n }\n \n@@ -250,6 +252,16 @@ impl<'a, T: Ord> DerefMut for PeekMut<'a, T> {\n     }\n }\n \n+impl<'a, T: Ord> PeekMut<'a, T> {\n+    /// Removes the peeked value from the heap and returns it.\n+    #[unstable(feature = \"binary_heap_peek_mut_pop\", issue = \"38863\")]\n+    pub fn pop(mut this: PeekMut<'a, T>) -> T {\n+        let value = this.heap.pop().unwrap();\n+        this.sift = false;\n+        value\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for BinaryHeap<T> {\n     fn clone(&self) -> Self {\n@@ -385,7 +397,10 @@ impl<T: Ord> BinaryHeap<T> {\n         if self.is_empty() {\n             None\n         } else {\n-            Some(PeekMut { heap: self })\n+            Some(PeekMut {\n+                heap: self,\n+                sift: true,\n+            })\n         }\n     }\n "}, {"sha": "1df341d1fc28a1e35dcd5ab36e89d0002b2db559", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b97b60521199c9232cb42bbba87d53568fb29841/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97b60521199c9232cb42bbba87d53568fb29841/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=b97b60521199c9232cb42bbba87d53568fb29841", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::collections::BinaryHeap;\n-use std::collections::binary_heap::Drain;\n+use std::collections::binary_heap::{Drain, PeekMut};\n \n #[test]\n fn test_iterator() {\n@@ -94,6 +94,19 @@ fn test_peek_mut() {\n     assert_eq!(heap.peek(), Some(&9));\n }\n \n+#[test]\n+fn test_peek_mut_pop() {\n+    let data = vec![2, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];\n+    let mut heap = BinaryHeap::from(data);\n+    assert_eq!(heap.peek(), Some(&10));\n+    {\n+        let mut top = heap.peek_mut().unwrap();\n+        *top -= 2;\n+        assert_eq!(PeekMut::pop(top), 8);\n+    }\n+    assert_eq!(heap.peek(), Some(&9));\n+}\n+\n #[test]\n fn test_push() {\n     let mut heap = BinaryHeap::from(vec![2, 4, 9]);"}, {"sha": "bec3965a9589be5036db63e6b5554ad90b7e6ef4", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b97b60521199c9232cb42bbba87d53568fb29841/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97b60521199c9232cb42bbba87d53568fb29841/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=b97b60521199c9232cb42bbba87d53568fb29841", "patch": "@@ -11,6 +11,7 @@\n #![deny(warnings)]\n \n #![feature(binary_heap_extras)]\n+#![feature(binary_heap_peek_mut_pop)]\n #![feature(box_syntax)]\n #![feature(btree_range)]\n #![feature(collection_placement)]"}]}