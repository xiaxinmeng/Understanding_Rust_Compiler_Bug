{"sha": "f57760c609d636d2e4698a26848f5c990d417265", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Nzc2MGM2MDlkNjM2ZDJlNDY5OGEyNjg0OGY1Yzk5MGQ0MTcyNjU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-03T23:26:25Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-04T00:24:41Z"}, "message": "Add task-perf-linked-failure.rs", "tree": {"sha": "cadd5ab6303c1fc097218b83bc080dfeda95d2cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cadd5ab6303c1fc097218b83bc080dfeda95d2cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57760c609d636d2e4698a26848f5c990d417265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57760c609d636d2e4698a26848f5c990d417265", "html_url": "https://github.com/rust-lang/rust/commit/f57760c609d636d2e4698a26848f5c990d417265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57760c609d636d2e4698a26848f5c990d417265/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe2f3d210a536ea951596c7df491c9b1d33764e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2f3d210a536ea951596c7df491c9b1d33764e0", "html_url": "https://github.com/rust-lang/rust/commit/fe2f3d210a536ea951596c7df491c9b1d33764e0"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "0542204bf99c50affb777fb2f34685948590471b", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57760c609d636d2e4698a26848f5c990d417265/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57760c609d636d2e4698a26848f5c990d417265/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=f57760c609d636d2e4698a26848f5c990d417265", "patch": "@@ -3,12 +3,12 @@\n // Each child task has to enlist as a descendant in each of its ancestor\n // groups, but that shouldn't have to happen for already-dead groups.\n //\n-// The filename is a reference; google it in quotes.\n+// The filename is a song reference; google it in quotes.\n \n fn child_generation(gens_left: uint) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n-    // alive at a time, \n+    // alive at a time,\n     do task::spawn_supervised {\n         if gens_left & 1 == 1 {\n             task::yield(); // shake things up a bit"}, {"sha": "a806950d0f758ba1b2d1389da87b654ab81b3502", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f57760c609d636d2e4698a26848f5c990d417265/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57760c609d636d2e4698a26848f5c990d417265/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=f57760c609d636d2e4698a26848f5c990d417265", "patch": "@@ -0,0 +1,67 @@\n+/**\n+ * Test performance of killing many tasks in a taskgroup.\n+ * Along the way, tests various edge cases of ancestor group management.\n+ * In particular, this tries to get each grandchild task to hit the\n+ * \"nobe_is_dead\" case in each_ancestor only during task exit, but not during\n+ * task spawn. This makes sure that defunct ancestor groups are handled correctly\n+ * w.r.t. possibly leaving stale *rust_tasks lying around.\n+ */\n+\n+// Creates in the background 'num_tasks' tasks, all blocked forever.\n+// Doesn't return until all such tasks are ready, but doesn't block forever itself.\n+fn grandchild_group(num_tasks: uint) {\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n+\n+    for num_tasks.times {\n+        do task::spawn { // linked\n+            comm::send(ch, ());\n+            comm::recv(comm::port::<()>()); // block forever\n+        }\n+    }\n+    #error[\"Grandchild group getting started\"];\n+    for num_tasks.times {\n+        // Make sure all above children are fully spawned; i.e., enlisted in\n+        // their ancestor groups.\n+        comm::recv(po);\n+    }\n+    #error[\"Grandchild group ready to go.\"];\n+    // Master grandchild task exits early.\n+}\n+\n+fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n+    let mut res = none;\n+    task::task().future_result(|-r| res = some(r)).supervised().spawn(f);\n+    #error[\"%s group waiting\", myname];\n+    let x = future::get(option::unwrap(res));\n+    assert x == task::success;\n+}\n+\n+fn main(args: ~[~str]) {\n+    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+        ~[~\"\", ~\"100000\"]\n+    } else if args.len() <= 1u {\n+        ~[~\"\", ~\"100\"]\n+    } else {\n+        copy args\n+    };\n+\n+    let num_tasks = uint::from_str(args[1]).get();\n+\n+    // Main group #0 waits for unsupervised group #1.\n+    // Grandparent group #1 waits for middle group #2, then fails, killing #3.\n+    // Middle group #2 creates grandchild_group #3, waits for it to be ready, exits.\n+    let x: result::result<(),()> = do task::try { // unlinked\n+        do spawn_supervised_blocking(\"grandparent\") {\n+            do spawn_supervised_blocking(\"middle\") {\n+                grandchild_group(num_tasks);\n+            }\n+            // When grandchild group is ready to go, make the middle group exit.\n+            #error[\"Middle group wakes up and exits\"];\n+        }\n+        // Grandparent group waits for middle group to be gone, then fails\n+        #error[\"Grandparent group wakes up and fails\"];\n+        fail;\n+    };\n+    assert x.is_err();\n+}"}]}