{"sha": "ff4df04799c406c8149a041c3163321758aac924", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNGRmMDQ3OTljNDA2YzgxNDlhMDQxYzMxNjMzMjE3NThhYWM5MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T01:48:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T01:48:07Z"}, "message": "Auto merge of #71866 - Dylan-DPC:rollup-g9xqc8k, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #71645 (Direct contributors to try stage 0 rustdoc first)\n - #71801 (Correctly check comparison operator in MIR typeck)\n - #71844 (List Clippy as a subtree, instead of a submodule)\n - #71864 (Update link in contributing.md)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b132bf7a1ea2090e84a2b73c4143118f4fff71b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b132bf7a1ea2090e84a2b73c4143118f4fff71b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff4df04799c406c8149a041c3163321758aac924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4df04799c406c8149a041c3163321758aac924", "html_url": "https://github.com/rust-lang/rust/commit/ff4df04799c406c8149a041c3163321758aac924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff4df04799c406c8149a041c3163321758aac924/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c61a904482129989f5c1e5cb9f1008efb76f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "html_url": "https://github.com/rust-lang/rust/commit/a0c61a904482129989f5c1e5cb9f1008efb76f7f"}, {"sha": "53702a67e2ae8a404169a0329f6a38d73bf7494d", "url": "https://api.github.com/repos/rust-lang/rust/commits/53702a67e2ae8a404169a0329f6a38d73bf7494d", "html_url": "https://github.com/rust-lang/rust/commit/53702a67e2ae8a404169a0329f6a38d73bf7494d"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "9c4afcefa1f220a1754cddcc82d838e6102bff83", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff4df04799c406c8149a041c3163321758aac924/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff4df04799c406c8149a041c3163321758aac924/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=ff4df04799c406c8149a041c3163321758aac924", "patch": "@@ -193,7 +193,7 @@ it can be found [here][rctd].\n As a developer to this repository, you don't have to treat the following external projects\n differently from other crates that are directly in this repo:\n \n-* none so far, see https://github.com/rust-lang/rust/issues/70651 for more info\n+* Clippy\n \n They are just regular files and directories. This is in contrast to `submodule` dependencies\n (see below for those). Only tool authors will actually use any operations here.\n@@ -247,15 +247,14 @@ git subtree add -P src/tools/clippy https://github.com/rust-lang/rust-clippy.git\n This will create a new commit, which you may not rebase under any circumstances! Delete the commit\n and redo the operation if you need to rebase.\n \n-Now you're done, the `src/tools/clippy` directory behaves as if clippy were part of the rustc\n+Now you're done, the `src/tools/clippy` directory behaves as if Clippy were part of the rustc\n monorepo, so no one but you (or others that synchronize subtrees) actually needs to use `git subtree`.\n \n \n ### External Dependencies (submodules)\n \n Currently building Rust will also build the following external projects:\n \n-* [clippy](https://github.com/rust-lang/rust-clippy)\n * [miri](https://github.com/rust-lang/miri)\n * [rustfmt](https://github.com/rust-lang/rustfmt)\n * [rls](https://github.com/rust-lang/rls/)\n@@ -393,10 +392,18 @@ You can find documentation style guidelines in [RFC 1574][rfc1574].\n \n [rfc1574]: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#appendix-a-full-conventions-text\n \n-In many cases, you don't need a full `./x.py doc`. You can use `rustdoc` directly\n-to check small fixes. For example, `rustdoc src/doc/reference.md` will render\n-reference to `doc/reference.html`. The CSS might be messed up, but you can\n-verify that the HTML is right.\n+In many cases, you don't need a full `./x.py doc`, which will build the entire\n+stage 2 compiler and compile the various books published on\n+[doc.rust-lang.org]. When updating documentation for the standard library,\n+first try `./x.py doc --stage 0 src/libstd`. If that fails, or if you need to\n+see the output from the latest version of `rustdoc`, use `--stage 1` instead of\n+`--stage 0`. Results should appear in `build/$TARGET/crate-docs`.\n+\n+[doc.rust-lang.org]: htts://doc.rust-lang.org\n+\n+You can also use `rustdoc` directly to check small fixes. For example,\n+`rustdoc src/doc/reference.md` will render reference to `doc/reference.html`.\n+The CSS might be messed up, but you can verify that the HTML is right.\n \n Additionally, contributions to the [rustc-dev-guide] are always welcome. Contributions\n can be made directly at [the\n@@ -511,7 +518,7 @@ are:\n * Don't be afraid to ask! The Rust community is friendly and helpful.\n \n [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/about-this-guide.html\n-[gdfrustc]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n+[gdfrustc]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/\n [gsearchdocs]: https://www.google.com/search?q=site:doc.rust-lang.org+your+query+here\n [rif]: http://internals.rust-lang.org\n [rr]: https://doc.rust-lang.org/book/README.html"}, {"sha": "36ccc0aaa8bb490544e6e3f2cf22f5a006f5f659", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ff4df04799c406c8149a041c3163321758aac924/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4df04799c406c8149a041c3163321758aac924/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=ff4df04799c406c8149a041c3163321758aac924", "patch": "@@ -2290,36 +2290,54 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 right,\n             ) => {\n                 let ty_left = left.ty(body, tcx);\n-                if let ty::RawPtr(_) | ty::FnPtr(_) = ty_left.kind {\n-                    let ty_right = right.ty(body, tcx);\n-                    let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::MiscVariable,\n-                        span: body.source_info(location).span,\n-                    });\n-                    self.sub_types(\n-                        common_ty,\n-                        ty_left,\n-                        location.to_locations(),\n-                        ConstraintCategory::Boring,\n-                    )\n-                    .unwrap_or_else(|err| {\n-                        bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n-                    });\n-                    if let Err(terr) = self.sub_types(\n-                        common_ty,\n-                        ty_right,\n-                        location.to_locations(),\n-                        ConstraintCategory::Boring,\n-                    ) {\n-                        span_mirbug!(\n-                            self,\n-                            rvalue,\n-                            \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                match ty_left.kind {\n+                    // Types with regions are comparable if they have a common super-type.\n+                    ty::RawPtr(_) | ty::FnPtr(_) => {\n+                        let ty_right = right.ty(body, tcx);\n+                        let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span: body.source_info(location).span,\n+                        });\n+                        self.relate_types(\n+                            common_ty,\n+                            ty::Variance::Contravariant,\n                             ty_left,\n-                            ty_right,\n-                            terr\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n                         )\n+                        .unwrap_or_else(|err| {\n+                            bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n+                        });\n+                        if let Err(terr) = self.relate_types(\n+                            common_ty,\n+                            ty::Variance::Contravariant,\n+                            ty_right,\n+                            location.to_locations(),\n+                            ConstraintCategory::Boring,\n+                        ) {\n+                            span_mirbug!(\n+                                self,\n+                                rvalue,\n+                                \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                                ty_left,\n+                                ty_right,\n+                                terr\n+                            )\n+                        }\n                     }\n+                    // For types with no regions we can just check that the\n+                    // both operands have the same type.\n+                    ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)\n+                        if ty_left == right.ty(body, tcx) => {}\n+                    // Other types are compared by trait methods, not by\n+                    // `Rvalue::BinaryOp`.\n+                    _ => span_mirbug!(\n+                        self,\n+                        rvalue,\n+                        \"unexpected comparison types {:?} and {:?}\",\n+                        ty_left,\n+                        right.ty(body, tcx)\n+                    ),\n                 }\n             }\n "}, {"sha": "3c900356fab3b0bba2ab44f20d367bb0a83e28d9", "filename": "src/test/ui/nll/type-check-pointer-comparisons.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff4df04799c406c8149a041c3163321758aac924/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4df04799c406c8149a041c3163321758aac924/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs?ref=ff4df04799c406c8149a041c3163321758aac924", "patch": "@@ -21,13 +21,13 @@ fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32)) {\n }\n \n fn compare_hr_fn_ptr<'a>(f: fn(&'a i32), g: fn(&i32)) {\n-    f == g;\n-    //~^ ERROR higher-ranked subtype error\n+    // Ideally this should compile with the operands swapped as well, but HIR\n+    // type checking prevents it (and stops compilation) for now.\n+    f == g; // OK\n }\n \n fn compare_const_fn_ptr<'a>(f: *const fn(&'a i32), g: *const fn(&i32)) {\n-    f == g;\n-    //~^ ERROR higher-ranked subtype error\n+    f == g; // OK\n }\n \n fn main() {}"}, {"sha": "f350b861eb6d2447c690d0852f9d4df910fc75ba", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff4df04799c406c8149a041c3163321758aac924/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff4df04799c406c8149a041c3163321758aac924/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=ff4df04799c406c8149a041c3163321758aac924", "patch": "@@ -76,17 +76,5 @@ LL |     f == g;\n \n help: `'a` and `'b` must be the same: replace one with the other\n \n-error: higher-ranked subtype error\n-  --> $DIR/type-check-pointer-comparisons.rs:24:5\n-   |\n-LL |     f == g;\n-   |     ^^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/type-check-pointer-comparisons.rs:29:5\n-   |\n-LL |     f == g;\n-   |     ^^^^^^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n "}]}