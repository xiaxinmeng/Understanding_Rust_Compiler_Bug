{"sha": "b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "node_id": "C_kwDOAAsO6NoAKGIwODJlODBlMjA0NzViMWVjNWIwYmQwZGQxZGFjM2U2NzU5YzgwMjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T00:34:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T00:34:18Z"}, "message": "Auto merge of #107688 - lukas-code:projection-with-lifetime, r=jackh726\n\nReErased regions are local\n\nfix https://github.com/rust-lang/rust/issues/107678\nfix https://github.com/rust-lang/rust/issues/107684\nfix https://github.com/rust-lang/rust/issues/107686\nfix https://github.com/rust-lang/rust/issues/107691\nfix https://github.com/rust-lang/rust/issues/107730", "tree": {"sha": "c4b4d17ca673a4f1e23e626ef0f32ddbc7c5ed54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b4d17ca673a4f1e23e626ef0f32ddbc7c5ed54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "html_url": "https://github.com/rust-lang/rust/commit/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f059f60467419823e2a63d6d20f414829040f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f059f60467419823e2a63d6d20f414829040f2f", "html_url": "https://github.com/rust-lang/rust/commit/3f059f60467419823e2a63d6d20f414829040f2f"}, {"sha": "e2a1a2ab79dc51f7258e8bd4db3d916a4a254e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a1a2ab79dc51f7258e8bd4db3d916a4a254e7d", "html_url": "https://github.com/rust-lang/rust/commit/e2a1a2ab79dc51f7258e8bd4db3d916a4a254e7d"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "4aa958878d4b304678644cd7eb50c5d92812371a", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "patch": "@@ -220,7 +220,8 @@ bitflags! {\n                                           // which is different from how types/const are freshened.\n                                           | TypeFlags::HAS_TY_FRESH.bits\n                                           | TypeFlags::HAS_CT_FRESH.bits\n-                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n+                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits\n+                                          | TypeFlags::HAS_RE_ERASED.bits;\n \n         /// Does this have `Projection`?\n         const HAS_TY_PROJECTION           = 1 << 10;"}, {"sha": "14a45687875f849865d7d8168f74996cfef697e6", "filename": "tests/ui/mir/issue-107678-projection-with-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/tests%2Fui%2Fmir%2Fissue-107678-projection-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/tests%2Fui%2Fmir%2Fissue-107678-projection-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-107678-projection-with-lifetime.rs?ref=b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "patch": "@@ -0,0 +1,20 @@\n+// build-pass\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait StreamOnce {\n+    type Error;\n+}\n+\n+pub trait ResetStream: StreamOnce {\n+    fn reset(&mut self) -> Result<(), Self::Error>;\n+}\n+\n+impl<'a> ResetStream for &'a str\n+    where Self: StreamOnce\n+{\n+    #[inline]\n+    fn reset(&mut self) -> Result<(), Self::Error> {\n+        Ok(())\n+    }\n+}"}, {"sha": "517a172089fe93e720a276ed51e89c822ee557c1", "filename": "tests/ui/mir/issue-107691.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/tests%2Fui%2Fmir%2Fissue-107691.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/tests%2Fui%2Fmir%2Fissue-107691.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-107691.rs?ref=b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "patch": "@@ -0,0 +1,42 @@\n+// build-pass\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Archive {\n+    type Archived;\n+    type Resolver;\n+\n+    fn resolve(resolver: Self::Resolver, out: *mut Self::Archived);\n+}\n+\n+pub type Archived<T> = <T as Archive>::Archived;\n+pub type Resolver<T> = <T as Archive>::Resolver;\n+\n+pub struct Record<'a> {\n+    _payload: &'a [u8],\n+}\n+\n+pub struct ArchivedRecord<'a>\n+where\n+    &'a [u8]: Archive,\n+{\n+    _payload: Archived<&'a [u8]>,\n+}\n+\n+pub struct RecordResolver<'a>\n+where\n+    &'a [u8]: Archive,\n+{\n+    _payload: Resolver<&'a [u8]>,\n+}\n+\n+impl<'a> Archive for Record<'a>\n+where\n+    &'a [u8]: Archive,\n+{\n+    type Archived = ArchivedRecord<'a>;\n+    type Resolver = RecordResolver<'a>;\n+\n+    fn resolve(_resolver: Self::Resolver, _out: *mut Self::Archived) {}\n+}"}, {"sha": "64683ae3a6ebd13c175e91fb9dce51109f22c756", "filename": "tests/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/tests%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b082e80e20475b1ec5b0bd0dd1dac3e6759c8022/tests%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Fissue-83150.stderr?ref=b082e80e20475b1ec5b0bd0dd1dac3e6759c8022", "patch": "@@ -9,9 +9,11 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>: Iterator`\n+error[E0275]: overflow evaluating the requirement `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n+   = note: required for `&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n+   = note: 65 redundant requirements hidden\n    = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>, ...>, ...>, ...>, ...>` to implement `Iterator`\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n "}]}