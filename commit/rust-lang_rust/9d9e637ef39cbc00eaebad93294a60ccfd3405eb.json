{"sha": "9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOWU2MzdlZjM5Y2JjMDBlYWViYWQ5MzI5NGE2MGNjZmQzNDA1ZWI=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2018-10-15T18:54:27Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2018-10-15T18:54:27Z"}, "message": "Refactor the constants", "tree": {"sha": "ec844156b4f2c867a860d802edfb463c156a2f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec844156b4f2c867a860d802edfb463c156a2f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEPNYzeVcwyOf+o1ZNnUcuizYJiVYFAlvE4mMACgkQnUcuizYJ\niVZIOw/8DNFlR2EeKs/eExwsxNX/w5U1ftZ/QMa/YbIvj/wQ5IftGDJZxu17T6OJ\n0OnzTR7382SDcuNlNLVc6bsX3xn0/hgozfSXPOW99cOAZ0WMKwZ3MNBisK1zIlN4\nCsxrycrtEuZ9s6nJkFYIOemYTFGfYUTyCZASsoaR3VEXaWWNzThUhVgwrXq91Ch9\nrJSdyeLawJj0kdd3CmxS3YvVv+eIFuxifyB9fm3npZGnDVY3n0tFxcHmPBBjyZps\nSHvhg1ZQihk7vuiHz5+9HZG3pwB/jLdF45u6Ebaa0PeyWVTCB4DolCxRdDFFqPZS\nsGNjxL2Pmj03ZV9I5TDFvPiTCFlq/I8EXEhaui/pa97lpQOBb+Plb5D7uVX3N2R6\naO/sBQuBrr37TPWEejYqBtNPiO47A9qARlqNzTN67SaLCxPZYWaSgLdLppUYKvq5\nxMj0K+NDvezNtzxaJkiIa1jCZ1Ly9ME8zi/PetoWx9nFxf3gLzgOwu/aarBNuQVE\nUkhbkhB6xUR+UHXYHvjRnD59h9wH4ePoJ3Cke/1wxOZgca7OwlmP2+bM8FiJ783S\n6jz5fOUKM9a46L25f+YaOAdKgPgQQdK8NVXZ8U25eEazawmrI4YrlBSDWHOxIVT3\nBGb2SY/2FtI91aibTkIoMBay2SNo/LzSt7LoqqtRPY0yjvrFXck=\n=DIAf\n-----END PGP SIGNATURE-----", "payload": "tree ec844156b4f2c867a860d802edfb463c156a2f37\nparent ce73df065f89bb5aa17517de16c10f9e4d3abaeb\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1539629667 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1539629667 +0600\n\nRefactor the constants\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "html_url": "https://github.com/rust-lang/rust/commit/9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce73df065f89bb5aa17517de16c10f9e4d3abaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce73df065f89bb5aa17517de16c10f9e4d3abaeb", "html_url": "https://github.com/rust-lang/rust/commit/ce73df065f89bb5aa17517de16c10f9e4d3abaeb"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "548b157ddbebf0be12c96461817380f5da66cc7d", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "patch": "@@ -8,13 +8,19 @@ extern crate heck;\n use std::{\n     collections::HashMap,\n     fs,\n-    path::Path,\n+    path::{Path, PathBuf},\n };\n use itertools::Itertools;\n use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n \n pub type Result<T> = ::std::result::Result<T, failure::Error>;\n \n+const GRAMMAR: &str = \"ra_syntax/src/grammar.ron\";\n+pub const SYNTAX_KINDS: &str = \"ra_syntax/src/syntax_kinds/generated.rs\";\n+pub const SYNTAX_KINDS_TEMPLATE: &str = \"ra_syntax/src/syntax_kinds/generated.rs.tera\";\n+pub const AST: &str = \"ra_syntax/src/ast/generated.rs\";\n+pub const AST_TEMPLATE: &str = \"ra_syntax/src/ast/generated.rs.tera\";\n+\n #[derive(Debug)]\n pub struct Test {\n     pub name: String,\n@@ -71,9 +77,9 @@ pub fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n     Ok(())\n }\n \n-pub fn render_template(template: &str) -> Result<String> {\n+pub fn render_template(template: PathBuf) -> Result<String> {\n     let grammar: ron::value::Value = {\n-        let text = fs::read_to_string(format!(\"{}{}\", Path::new(&std::env::var(\"CARGO_MANIFEST_DIR\").unwrap()).parent().unwrap().to_str().unwrap(), \"/ra_syntax/src/grammar.ron\"))?;\n+        let text = fs::read_to_string(project_root().join(GRAMMAR))?;\n         ron::de::from_str(&text)?\n     };\n     let template = fs::read_to_string(template)?;\n@@ -108,3 +114,7 @@ pub fn render_template(template: &str) -> Result<String> {\n         Ok(tera::Value::Array(elements))\n     }\n }\n+\n+pub fn project_root() -> PathBuf {\n+    Path::new(&std::env::var(\"CARGO_MANIFEST_DIR\").unwrap()).parent().unwrap().to_path_buf()\n+}"}, {"sha": "549892bc630ac3e5934b8e939a6c00ec7d331aab", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "patch": "@@ -11,15 +11,10 @@ use std::{\n     path::{Path, PathBuf},\n     process::Command,\n };\n-use tools::{Test, collect_tests, render_template, update, Result};\n+use tools::{AST, AST_TEMPLATE, Result, SYNTAX_KINDS, SYNTAX_KINDS_TEMPLATE, Test, collect_tests, render_template, update, project_root};\n \n const GRAMMAR_DIR: &str = \"./crates/ra_syntax/src/grammar\";\n const INLINE_TESTS_DIR: &str = \"./crates/ra_syntax/tests/data/parser/inline\";\n-const GRAMMAR: &str = \"./crates/ra_syntax/src/grammar.ron\";\n-const SYNTAX_KINDS: &str = \"./crates/ra_syntax/src/syntax_kinds/generated.rs\";\n-const SYNTAX_KINDS_TEMPLATE: &str = \"./crates/ra_syntax/src/syntax_kinds/generated.rs.tera\";\n-const AST: &str = \"./crates/ra_syntax/src/ast/generated.rs\";\n-const AST_TEMPLATE: &str = \"./crates/ra_syntax/src/ast/generated.rs.tera\";\n \n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")\n@@ -45,8 +40,8 @@ fn main() -> Result<()> {\n fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n     match name {\n         \"gen-kinds\" => {\n-            update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE)?, verify)?;\n-            update(Path::new(AST), &render_template(AST_TEMPLATE)?, verify)?;\n+            update(&project_root().join(SYNTAX_KINDS), &render_template(project_root().join(SYNTAX_KINDS_TEMPLATE))?, verify)?;\n+            update(&project_root().join(AST), &render_template(project_root().join(AST_TEMPLATE))?, verify)?;\n         },\n         \"gen-tests\" => {\n             gen_tests(verify)?"}, {"sha": "d0ed60f7ae0ead98b1e765bbe35127375ad60498", "filename": "crates/tools/tests/cli.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/crates%2Ftools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9e637ef39cbc00eaebad93294a60ccfd3405eb/crates%2Ftools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Ftests%2Fcli.rs?ref=9d9e637ef39cbc00eaebad93294a60ccfd3405eb", "patch": "@@ -1,19 +1,13 @@\n extern crate tools;\n \n-use std::path::Path;\n-use tools::{render_template, update};\n-\n-const SYNTAX_KINDS: &str = \"../ra_syntax/src/syntax_kinds/generated.rs\";\n-const SYNTAX_KINDS_TEMPLATE: &str = \"../ra_syntax/src/syntax_kinds/generated.rs.tera\";\n-const AST: &str = \"../ra_syntax/src/ast/generated.rs\";\n-const AST_TEMPLATE: &str = \"../ra_syntax/src/ast/generated.rs.tera\";\n+use tools::{AST, AST_TEMPLATE, SYNTAX_KINDS, SYNTAX_KINDS_TEMPLATE, render_template, update, project_root};\n \n #[test]\n fn verify_template_generation() {\n-    if let Err(error) = update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE).unwrap(), true) {\n+    if let Err(error) = update(&project_root().join(SYNTAX_KINDS), &render_template(project_root().join(SYNTAX_KINDS_TEMPLATE)).unwrap(), true) {\n         panic!(\"{}. Please update it by running `cargo gen-kinds`\", error);\n     }\n-    if let Err(error) = update(Path::new(AST), &render_template(AST_TEMPLATE).unwrap(), true) {\n+    if let Err(error) = update(&project_root().join(AST), &render_template(project_root().join(AST_TEMPLATE)).unwrap(), true) {\n         panic!(\"{}. Please update it by running `cargo gen-kinds`\", error);\n     }\n }"}]}