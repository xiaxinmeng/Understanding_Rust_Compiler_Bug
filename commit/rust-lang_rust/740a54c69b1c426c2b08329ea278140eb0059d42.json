{"sha": "740a54c69b1c426c2b08329ea278140eb0059d42", "node_id": "C_kwDOAAsO6NoAKDc0MGE1NGM2OWIxYzQyNmMyYjA4MzI5ZWEyNzgxNDBlYjAwNTlkNDI", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-05-18T18:52:10Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-06-20T11:21:39Z"}, "message": "Windows: `CommandExt::async_pipes`", "tree": {"sha": "cf460596a832418b674a918ee626b9009c65f6b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf460596a832418b674a918ee626b9009c65f6b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740a54c69b1c426c2b08329ea278140eb0059d42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmKwWEQACgkQcTRy8vRW\nJ952JRAApTtah3t7hyeJqfQXTFIySZxZwBmwPQ5D+K5TqgAh/Vl9cLsxPcnhm+qF\nIsXXfwO1Z2M7fQpGvvkbsg0MW44ULKL7wGpelvnuNDDmKyOlPyw0HpfuQtbDU5Il\ndLMT+AQ+Ezhu7D+vbU939ymNTGdrgC8716yqj3O/WnkrUJnLram2jJDxFa8EZ0vs\nMgcfAywMabTm9JU+/yqviMFSlIdC13RUwJMqfmFEA5dq7BlFbF73KPofPyHt15Rf\nshSdYOU/TEgJZ6CLmktyhlPivczrqwM3Lxvc1mv4KDj8aON28shfNpMZbvQcCeYy\nTfhcr2hO4g+g6UP0rpS989i7Ng0oKjYzmZKIokN8YvUx5JsKdq5dwNLmZLbfHYpD\nZDvm7qYif5OoVXPs8owBln8tpuElXoveFI4+q0MzGlwrmOeg/Wfh7G6pOcme5N2O\ndcp856Usw7dfyOcib4eXeGThItnaRYUb3cgAutegK23eU/TxcKXOm2KdqKL3VkdY\nb0/Loglxyd1ypPZSVMxSC+CVQcCh/y5qIxkzzkYk8tVYJ0mlqmNQuC9eeGcnYIV9\nupHVGLGIIEYZZf/n6f3IJrjS+N7ah1rVT/N8X+KI32bP/oLUPYtExojbMJ0s3GeV\nG0In/znYxsHUN+qxNPt2mBdAs2tYERLLfemGALhLcmNbpJiMYJg=\n=/R5N\n-----END PGP SIGNATURE-----", "payload": "tree cf460596a832418b674a918ee626b9009c65f6b3\nparent 936eba3b348e65b658b60218cc9237f02abdbeb4\nauthor Chris Denton <christophersdenton@gmail.com> 1652899930 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1655724099 +0100\n\nWindows: `CommandExt::async_pipes`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740a54c69b1c426c2b08329ea278140eb0059d42", "html_url": "https://github.com/rust-lang/rust/commit/740a54c69b1c426c2b08329ea278140eb0059d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740a54c69b1c426c2b08329ea278140eb0059d42/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936eba3b348e65b658b60218cc9237f02abdbeb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/936eba3b348e65b658b60218cc9237f02abdbeb4", "html_url": "https://github.com/rust-lang/rust/commit/936eba3b348e65b658b60218cc9237f02abdbeb4"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "cf693618ac1f617e034e2ffe86e07e70b3f252b2", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/740a54c69b1c426c2b08329ea278140eb0059d42/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740a54c69b1c426c2b08329ea278140eb0059d42/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=740a54c69b1c426c2b08329ea278140eb0059d42", "patch": "@@ -161,6 +161,37 @@ pub trait CommandExt: Sealed {\n     /// `CommandLineToArgvW` escaping rules.\n     #[stable(feature = \"windows_process_extensions_raw_arg\", since = \"1.62.0\")]\n     fn raw_arg<S: AsRef<OsStr>>(&mut self, text_to_append_as_is: S) -> &mut process::Command;\n+\n+    /// When [`process::Command`] creates pipes, request that our side is always async.\n+    ///\n+    /// By default [`process::Command`] may choose to use pipes where both ends\n+    /// are opened for synchronous read or write operations. By using\n+    /// `async_pipes(true)`, this behavior is overridden so that our side is\n+    /// always async.\n+    ///\n+    /// This is important because if doing async I/O a pipe or a file has to be\n+    /// opened for async access.\n+    ///\n+    /// The end of the pipe sent to the child process will always be synchronous\n+    /// regardless of this option.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(windows_process_extensions_async_pipes)]\n+    /// use std::os::windows::process::CommandExt;\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// # let program = \"\";\n+    ///\n+    /// Command::new(program)\n+    ///     .async_pipes(true)\n+    ///     .stdin(Stdio::piped())\n+    ///     .stdout(Stdio::piped())\n+    ///     .stderr(Stdio::piped());\n+    /// ```\n+    #[unstable(feature = \"windows_process_extensions_async_pipes\", issue = \"98289\")]\n+    fn async_pipes(&mut self, always_async: bool) -> &mut process::Command;\n }\n \n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n@@ -179,6 +210,15 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().raw_arg(raw_text.as_ref());\n         self\n     }\n+\n+    fn async_pipes(&mut self, always_async: bool) -> &mut process::Command {\n+        // FIXME: This currently has an intentional no-op implementation.\n+        // For the time being our side of the pipes will always be async.\n+        // Once the ecosystem has adjusted, we may then be able to start making\n+        // use of synchronous pipes within the standard library.\n+        let _ = always_async;\n+        self\n+    }\n }\n \n #[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]"}]}