{"sha": "1eb828ecb1675073c7995db80be2e63719fd73c9", "node_id": "C_kwDOAAsO6NoAKDFlYjgyOGVjYjE2NzUwNzNjNzk5NWRiODBiZTJlNjM3MTlmZDczYzk", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-02T05:28:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T21:03:26Z"}, "message": "Structured suggestion for `&mut dyn Iterator` when possible\n\nFix #37914.", "tree": {"sha": "4d42d515993294cc7d216f36d14e9405383bb4fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d42d515993294cc7d216f36d14e9405383bb4fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb828ecb1675073c7995db80be2e63719fd73c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb828ecb1675073c7995db80be2e63719fd73c9", "html_url": "https://github.com/rust-lang/rust/commit/1eb828ecb1675073c7995db80be2e63719fd73c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb828ecb1675073c7995db80be2e63719fd73c9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe8c4537c9009a251a31e8f022b7795fc305d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe8c4537c9009a251a31e8f022b7795fc305d4f", "html_url": "https://github.com/rust-lang/rust/commit/afe8c4537c9009a251a31e8f022b7795fc305d4f"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "f3c43e3f4973b0ab9bf3ee3b41a7797d51af9fec", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -57,7 +57,7 @@ pub enum MethodError<'tcx> {\n     PrivateMatch(DefKind, DefId, Vec<DefId>),\n \n     // Found a `Self: Sized` bound where `Self` is a trait object.\n-    IllegalSizedBound(Vec<DefId>, bool, Span),\n+    IllegalSizedBound(Vec<DefId>, bool, Span, &'tcx hir::Expr<'tcx>),\n \n     // Found a match, but the return type is wrong\n     BadReturnType,\n@@ -236,7 +236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Vec::new(),\n                 };\n \n-            return Err(IllegalSizedBound(candidates, needs_mut, span));\n+            return Err(IllegalSizedBound(candidates, needs_mut, span, self_expr));\n         }\n \n         Ok(result.callee)"}, {"sha": "5a43db69fd4995ac81ad016ff5819a35ebf5da58", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.emit();\n             }\n \n-            MethodError::IllegalSizedBound(candidates, needs_mut, bound_span) => {\n+            MethodError::IllegalSizedBound(candidates, needs_mut, bound_span, self_expr) => {\n                 let msg = format!(\"the `{}` method cannot be invoked on a trait object\", item_name);\n                 let mut err = self.sess().struct_span_err(span, &msg);\n                 err.span_label(bound_span, \"this has a `Sized` requirement\");\n@@ -197,7 +197,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             *region,\n                             ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() },\n                         );\n-                        err.note(&format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty));\n+                        let msg = format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty);\n+                        let mut kind = &self_expr.kind;\n+                        while let hir::ExprKind::AddrOf(_, _, expr)\n+                        | hir::ExprKind::Unary(hir::UnOp::Deref, expr) = kind\n+                        {\n+                            kind = &expr.kind;\n+                        }\n+                        if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = kind\n+                            && let hir::def::Res::Local(hir_id) = path.res\n+                            && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(hir_id)\n+                            && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n+                            && let Some(hir::Node::Param(param)) = self.tcx.hir().find(parent_hir_id)\n+                            && let parent_hir_id = self.tcx.hir().get_parent_node(param.hir_id)\n+                            && let Some(node) = self.tcx.hir().find(parent_hir_id)\n+                            && let Some(decl) = node.fn_decl()\n+                            && let Some(ty) = decl.inputs.iter().find(|ty| ty.span == param.ty_span)\n+                            && let hir::TyKind::Ref(_, mut_ty) = &ty.kind\n+                            && let hir::Mutability::Not = mut_ty.mutbl\n+                        {\n+                            err.span_suggestion_verbose(\n+                                mut_ty.ty.span.shrink_to_lo(),\n+                                &msg,\n+                                \"mut \",\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.help(&msg);\n+                        }\n                     }\n                 }\n                 err.emit();"}, {"sha": "260ef5458d4b46adfd31b2e38ac0d969a8fe9a5e", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.fixed?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+     *t.min().unwrap() //~ ERROR the `min` method cannot be invoked on a trait object\n+}\n+\n+fn main() {\n+     let array = [0u64];\n+     test(&mut array.iter());\n+}"}, {"sha": "7a1656507f2cd1fc1b4fcd262983aa8ed2ac97e5", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.rs?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n+     *t.min().unwrap() //~ ERROR the `min` method cannot be invoked on a trait object\n+}\n+\n+fn main() {\n+     let array = [0u64];\n+     test(&mut array.iter());\n+}"}, {"sha": "9b4b9b65d104116f8ac1443266f109e930e45a3b", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch-arg.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch-arg.stderr?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -0,0 +1,16 @@\n+error: the `min` method cannot be invoked on a trait object\n+  --> $DIR/mutability-mismatch-arg.rs:3:9\n+   |\n+LL |      *t.min().unwrap()\n+   |         ^^^\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+   = note: this has a `Sized` requirement\n+   |\n+help: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+   |\n+LL | fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+   |             +++\n+\n+error: aborting due to previous error\n+"}, {"sha": "aa9b3d0389148c286e4b3be460cbe778effed485", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.rs?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -27,8 +27,8 @@ impl Trait for Type {\n fn main() {\n     (&MutType as &dyn MutTrait).function();\n     //~^ ERROR the `function` method cannot be invoked on a trait object\n-    //~| NOTE you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+    //~| HELP you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n     (&mut Type as &mut dyn Trait).function();\n     //~^ ERROR the `function` method cannot be invoked on a trait object\n-    //~| NOTE you need `&dyn Trait` instead of `&mut dyn Trait`\n+    //~| HELP you need `&dyn Trait` instead of `&mut dyn Trait`\n }"}, {"sha": "0120b9f91e94afa9777ef9c33512bbd9bead5bdb", "filename": "src/test/ui/illegal-sized-bound/mutability-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-sized-bound%2Fmutability-mismatch.stderr?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -7,7 +7,7 @@ LL |         Self: Sized;\n LL |     (&MutType as &dyn MutTrait).function();\n    |                                 ^^^^^^^^\n    |\n-   = note: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n+   = help: you need `&mut dyn MutTrait` instead of `&dyn MutTrait`\n \n error: the `function` method cannot be invoked on a trait object\n   --> $DIR/mutability-mismatch.rs:31:35\n@@ -18,7 +18,7 @@ LL |         Self: Sized;\n LL |     (&mut Type as &mut dyn Trait).function();\n    |                                   ^^^^^^^^\n    |\n-   = note: you need `&dyn Trait` instead of `&mut dyn Trait`\n+   = help: you need `&dyn Trait` instead of `&mut dyn Trait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "02847ed8c4c6e746082596f8a4b66e6041356f2a", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb828ecb1675073c7995db80be2e63719fd73c9/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=1eb828ecb1675073c7995db80be2e63719fd73c9", "patch": "@@ -7,7 +7,10 @@ LL |      t.min().unwrap()\n    |\n    = note: this has a `Sized` requirement\n    |\n-   = note: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+help: you need `&mut dyn Iterator<Item = &u64>` instead of `&dyn Iterator<Item = &u64>`\n+   |\n+LL | fn test(t: &mut dyn Iterator<Item=&u64>) -> u64 {\n+   |             +++\n \n error: aborting due to previous error\n "}]}