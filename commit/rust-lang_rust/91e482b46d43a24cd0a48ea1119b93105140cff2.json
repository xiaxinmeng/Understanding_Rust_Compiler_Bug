{"sha": "91e482b46d43a24cd0a48ea1119b93105140cff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZTQ4MmI0NmQ0M2EyNGNkMGE0OGVhMTExOWI5MzEwNTE0MGNmZjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-27T11:12:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-27T11:15:46Z"}, "message": "Replace if with if-let", "tree": {"sha": "3fd91a247ca1a9297884139d135aca4763d02da8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd91a247ca1a9297884139d135aca4763d02da8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91e482b46d43a24cd0a48ea1119b93105140cff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91e482b46d43a24cd0a48ea1119b93105140cff2", "html_url": "https://github.com/rust-lang/rust/commit/91e482b46d43a24cd0a48ea1119b93105140cff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91e482b46d43a24cd0a48ea1119b93105140cff2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbb53cf55ca350bbcada5fc759b0119d932e879d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb53cf55ca350bbcada5fc759b0119d932e879d", "html_url": "https://github.com/rust-lang/rust/commit/cbb53cf55ca350bbcada5fc759b0119d932e879d"}], "stats": {"total": 175, "additions": 170, "deletions": 5}, "files": [{"sha": "c0486a8a91a46d9977678089c2aa8e080c169afa", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=91e482b46d43a24cd0a48ea1119b93105140cff2", "patch": "@@ -607,6 +607,32 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_replace_let_with_if_let() {\n+    check(\n+        \"replace_let_with_if_let\",\n+        r#####\"\n+enum Option<T> { Some(T), None }\n+\n+fn main(action: Action) {\n+    <|>let x = compute();\n+}\n+\n+fn compute() -> Option<i32> { None }\n+\"#####,\n+        r#####\"\n+enum Option<T> { Some(T), None }\n+\n+fn main(action: Action) {\n+    if let Some(x) = compute() {\n+    }\n+}\n+\n+fn compute() -> Option<i32> { None }\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_qualified_name_with_use() {\n     check("}, {"sha": "10e41f97e37ac50d89bc6444e257c6919b4cf020", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=91e482b46d43a24cd0a48ea1119b93105140cff2", "patch": "@@ -0,0 +1,108 @@\n+use hir::Adt;\n+use ra_syntax::{\n+    ast::{self, make},\n+    AstNode, T,\n+};\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n+use ast::edit::{AstNodeEdit, IndentLevel};\n+use std::iter::once;\n+\n+// Assist: replace_let_with_if_let\n+//\n+// Replaces `if let` with an else branch with a `match` expression.\n+//\n+// ```\n+// # enum Option<T> { Some(T), None }\n+//\n+// fn main(action: Action) {\n+//     <|>let x = compute();\n+// }\n+//\n+// fn compute() -> Option<i32> { None }\n+// ```\n+// ->\n+// ```\n+// # enum Option<T> { Some(T), None }\n+//\n+// fn main(action: Action) {\n+//     if let Some(x) = compute() {\n+//     }\n+// }\n+//\n+// fn compute() -> Option<i32> { None }\n+// ```\n+pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n+    let let_kw = ctx.find_token_at_offset(T![let])?;\n+    let let_stmt = let_kw.ancestors().find_map(ast::LetStmt::cast)?;\n+    let init = let_stmt.initializer()?;\n+    let original_pat = let_stmt.pat()?;\n+    let ty = ctx.sema.type_of_expr(&init)?;\n+    let enum_ = match ty.as_adt() {\n+        Some(Adt::Enum(it)) => it,\n+        _ => return None,\n+    };\n+    let happy_case =\n+        [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter().find_map(|(known_type, happy_case)| {\n+            if &enum_.name(ctx.db).to_string() == known_type {\n+                return Some(happy_case);\n+            }\n+            None\n+        });\n+\n+    ctx.add_assist(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", |edit| {\n+        let with_placeholder: ast::Pat = match happy_case {\n+            None => make::placeholder_pat().into(),\n+            Some(var_name) => make::tuple_struct_pat(\n+                make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n+                once(make::placeholder_pat().into()),\n+            )\n+            .into(),\n+        };\n+        let block =\n+            IndentLevel::from_node(let_stmt.syntax()).increase_indent(make::block_expr(None, None));\n+        let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n+        let stmt = make::expr_stmt(if_);\n+\n+        let placeholder = stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n+        let target_offset =\n+            let_stmt.syntax().text_range().start() + placeholder.syntax().text_range().start();\n+        let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n+\n+        edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n+        edit.target(let_kw.text_range());\n+        edit.set_cursor(target_offset);\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_let_unknown_enum() {\n+        check_assist(\n+            replace_let_with_if_let,\n+            r\"\n+enum E<T> { X(T), Y(T) }\n+\n+fn main() {\n+    <|>let x = E::X(92);\n+}\n+            \",\n+            r\"\n+enum E<T> { X(T), Y(T) }\n+\n+fn main() {\n+    if let <|>x = E::X(92) {\n+    }\n+}\n+            \",\n+        )\n+    }\n+}"}, {"sha": "67a58fc1fbd6c510e7861a359617a93d1ed4e89f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=91e482b46d43a24cd0a48ea1119b93105140cff2", "patch": "@@ -118,6 +118,7 @@ mod handlers {\n     mod remove_dbg;\n     mod remove_mut;\n     mod replace_if_let_with_match;\n+    mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod split_import;\n \n@@ -153,6 +154,7 @@ mod handlers {\n             remove_dbg::remove_dbg,\n             remove_mut::remove_mut,\n             replace_if_let_with_match::replace_if_let_with_match,\n+            replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             split_import::split_import,\n         ]"}, {"sha": "bdaecdc43d417e9ccaab6574e47d60bc8fa18099", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=91e482b46d43a24cd0a48ea1119b93105140cff2", "patch": "@@ -251,7 +251,7 @@ impl ast::UseItem {\n     #[must_use]\n     pub fn with_use_tree(&self, use_tree: ast::UseTree) -> ast::UseItem {\n         if let Some(old) = self.use_tree() {\n-            return self.replace_descendants(iter::once((old, use_tree)));\n+            return self.replace_descendant(old, use_tree);\n         }\n         self.clone()\n     }\n@@ -283,15 +283,15 @@ impl ast::UseTree {\n     #[must_use]\n     pub fn with_path(&self, path: ast::Path) -> ast::UseTree {\n         if let Some(old) = self.path() {\n-            return self.replace_descendants(iter::once((old, path)));\n+            return self.replace_descendant(old, path);\n         }\n         self.clone()\n     }\n \n     #[must_use]\n     pub fn with_use_tree_list(&self, use_tree_list: ast::UseTreeList) -> ast::UseTree {\n         if let Some(old) = self.use_tree_list() {\n-            return self.replace_descendants(iter::once((old, use_tree_list)));\n+            return self.replace_descendant(old, use_tree_list);\n         }\n         self.clone()\n     }\n@@ -465,6 +465,11 @@ pub trait AstNodeEdit: AstNode + Sized {\n         Self::cast(new_syntax).unwrap()\n     }\n \n+    #[must_use]\n+    fn replace_descendant<D: AstNode>(&self, old: D, new: D) -> Self {\n+        self.replace_descendants(iter::once((old, new)))\n+    }\n+\n     #[must_use]\n     fn replace_descendants<D: AstNode>(\n         &self,"}, {"sha": "c818bba5559fbf567e40997305e8481de245c9fa", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e482b46d43a24cd0a48ea1119b93105140cff2/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=91e482b46d43a24cd0a48ea1119b93105140cff2", "patch": "@@ -127,7 +127,7 @@ pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n     match pattern {\n         None => ast_from_text(&format!(\"const _: () = while {} {{}};\", expr)),\n         Some(pattern) => {\n-            ast_from_text(&format!(\"const _: () = while {} = {} {{}};\", pattern, expr))\n+            ast_from_text(&format!(\"const _: () = while let {} = {} {{}};\", pattern, expr))\n         }\n     }\n }\n@@ -245,7 +245,8 @@ pub fn let_stmt(pattern: ast::Pat, initializer: Option<ast::Expr>) -> ast::LetSt\n     ast_from_text(&format!(\"fn f() {{ {} }}\", text))\n }\n pub fn expr_stmt(expr: ast::Expr) -> ast::ExprStmt {\n-    ast_from_text(&format!(\"fn f() {{ {}; }}\", expr))\n+    let semi = if expr.is_block_like() { \"\" } else { \";\" };\n+    ast_from_text(&format!(\"fn f() {{ {}{} (); }}\", expr, semi))\n }\n \n pub fn token(kind: SyntaxKind) -> SyntaxToken {"}, {"sha": "3b7467a26d20b53643065fa78236f659ebbb78a6", "filename": "docs/user/assists.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/91e482b46d43a24cd0a48ea1119b93105140cff2/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/91e482b46d43a24cd0a48ea1119b93105140cff2/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=91e482b46d43a24cd0a48ea1119b93105140cff2", "patch": "@@ -583,6 +583,29 @@ fn handle(action: Action) {\n }\n ```\n \n+## `replace_let_with_if_let`\n+\n+Replaces `if let` with an else branch with a `match` expression.\n+\n+```rust\n+// BEFORE\n+\n+fn main(action: Action) {\n+    \u2503let x = compute();\n+}\n+\n+fn compute() -> Option<i32> { None }\n+\n+// AFTER\n+\n+fn main(action: Action) {\n+    if let Some(x) = compute() {\n+    }\n+}\n+\n+fn compute() -> Option<i32> { None }\n+```\n+\n ## `replace_qualified_name_with_use`\n \n Adds a use statement for a given fully-qualified name."}]}