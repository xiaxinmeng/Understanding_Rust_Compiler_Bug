{"sha": "b404b91da68556141ad39fffcef2865f073dd3d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MDRiOTFkYTY4NTU2MTQxYWQzOWZmZmNlZjI4NjVmMDczZGQzZDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T19:11:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T19:11:33Z"}, "message": "minor: dead code", "tree": {"sha": "85c6549df052ca97ec04a7038c35025b52981f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c6549df052ca97ec04a7038c35025b52981f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b404b91da68556141ad39fffcef2865f073dd3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b404b91da68556141ad39fffcef2865f073dd3d1", "html_url": "https://github.com/rust-lang/rust/commit/b404b91da68556141ad39fffcef2865f073dd3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b404b91da68556141ad39fffcef2865f073dd3d1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff52167c9a8dd6f99a56a35eae8d634d0ddf1286", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff52167c9a8dd6f99a56a35eae8d634d0ddf1286", "html_url": "https://github.com/rust-lang/rust/commit/ff52167c9a8dd6f99a56a35eae8d634d0ddf1286"}], "stats": {"total": 84, "additions": 34, "deletions": 50}, "files": [{"sha": "253c360bbae8496a99e067d18055343374973625", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 40, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b404b91da68556141ad39fffcef2865f073dd3d1/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b404b91da68556141ad39fffcef2865f073dd3d1/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b404b91da68556141ad39fffcef2865f073dd3d1", "patch": "@@ -86,36 +86,14 @@ impl Diagnostic {\n         self\n     }\n \n-    fn error(range: TextRange, message: String) -> Self {\n-        Self {\n-            message,\n-            range,\n-            severity: Severity::Error,\n-            fixes: None,\n-            unused: false,\n-            code: None,\n-            experimental: false,\n-        }\n-    }\n-\n-    fn hint(range: TextRange, message: String) -> Self {\n-        Self {\n-            message,\n-            range,\n-            severity: Severity::WeakWarning,\n-            fixes: None,\n-            unused: false,\n-            code: None,\n-            experimental: false,\n-        }\n-    }\n-\n-    fn with_fixes(self, fixes: Option<Vec<Assist>>) -> Self {\n-        Self { fixes, ..self }\n+    fn with_fixes(mut self, fixes: Option<Vec<Assist>>) -> Diagnostic {\n+        self.fixes = fixes;\n+        self\n     }\n \n-    fn with_unused(self, unused: bool) -> Self {\n-        Self { unused, ..self }\n+    fn with_unused(mut self, unused: bool) -> Diagnostic {\n+        self.unused = unused;\n+        self\n     }\n }\n \n@@ -150,11 +128,9 @@ pub(crate) fn diagnostics(\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n     res.extend(\n-        parse\n-            .errors()\n-            .iter()\n-            .take(128)\n-            .map(|err| Diagnostic::error(err.range(), format!(\"Syntax Error: {}\", err))),\n+        parse.errors().iter().take(128).map(|err| {\n+            Diagnostic::new(\"syntax-error\", format!(\"Syntax Error: {}\", err), err.range())\n+        }),\n     );\n \n     for node in parse.tree().syntax().descendants() {\n@@ -244,13 +220,18 @@ fn check_unnecessary_braces_in_use_statement(\n                 });\n \n         acc.push(\n-            Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n-                .with_fixes(Some(vec![fix(\n-                    \"remove_braces\",\n-                    \"Remove unnecessary braces\",\n-                    SourceChange::from_text_edit(file_id, edit),\n-                    use_range,\n-                )])),\n+            Diagnostic::new(\n+                \"unnecessary-braces\",\n+                \"Unnecessary braces in use statement\".to_string(),\n+                use_range,\n+            )\n+            .severity(Severity::WeakWarning)\n+            .with_fixes(Some(vec![fix(\n+                \"remove_braces\",\n+                \"Remove unnecessary braces\",\n+                SourceChange::from_text_edit(file_id, edit),\n+                use_range,\n+            )])),\n         );\n     }\n "}, {"sha": "c7f4dab8ea1d92199a1d8990ce92cdb530831f43", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b404b91da68556141ad39fffcef2865f073dd3d1/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b404b91da68556141ad39fffcef2865f073dd3d1/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=b404b91da68556141ad39fffcef2865f073dd3d1", "patch": "@@ -5,7 +5,7 @@ use ide_db::{base_db::FileId, source_change::SourceChange};\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;\n \n-use crate::{diagnostics::fix, Diagnostic};\n+use crate::{diagnostics::fix, Diagnostic, Severity};\n \n pub(super) fn check(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n     match_ast! {\n@@ -46,7 +46,8 @@ fn check_expr_field_shorthand(\n \n         let field_range = record_field.syntax().text_range();\n         acc.push(\n-            Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string())\n+            Diagnostic::new(\"use-field-shorthand\", \"Shorthand struct initialization\", field_range)\n+                .severity(Severity::WeakWarning)\n                 .with_fixes(Some(vec![fix(\n                     \"use_expr_field_shorthand\",\n                     \"Use struct shorthand initialization\",\n@@ -85,14 +86,16 @@ fn check_pat_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_pat_field.syntax().text_range();\n-        acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fixes(\n-            Some(vec![fix(\n-                \"use_pat_field_shorthand\",\n-                \"Use struct field shorthand\",\n-                SourceChange::from_text_edit(file_id, edit),\n-                field_range,\n-            )]),\n-        ));\n+        acc.push(\n+            Diagnostic::new(\"use-field-shorthand\", \"Shorthand struct pattern\", field_range)\n+                .severity(Severity::WeakWarning)\n+                .with_fixes(Some(vec![fix(\n+                    \"use_pat_field_shorthand\",\n+                    \"Use struct field shorthand\",\n+                    SourceChange::from_text_edit(file_id, edit),\n+                    field_range,\n+                )])),\n+        );\n     }\n }\n "}]}