{"sha": "ef8843428664c64a1681663f93f0dc4d2ce24276", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODg0MzQyODY2NGM2NGExNjgxNjYzZjkzZjBkYzRkMmNlMjQyNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-18T14:39:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-18T14:39:34Z"}, "message": "Auto merge of #84274 - nagisa:fix-simd, r=nikic\n\nDon't set fast-math for the SIMD operations we set it for previously\n\nInstead of `fast-math`. `fast-math` implies things like functions not\nbeing able to accept as an argument or return as a result, say, `inf`\nwhich made these functions confusingly named or behaving incorrectly,\ndepending on how you interpret it. It seems that the intended behaviour\nwas to set a `afn` flag instead. In doing so we also renamed the\nintrinsics to say `_approx` so that it is clear these are not precision\noriented and the users can act accordingly.\n\nFixes #84268", "tree": {"sha": "e02830a3cafd5e34a92b2a0faf1bbc965e154a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e02830a3cafd5e34a92b2a0faf1bbc965e154a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef8843428664c64a1681663f93f0dc4d2ce24276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8843428664c64a1681663f93f0dc4d2ce24276", "html_url": "https://github.com/rust-lang/rust/commit/ef8843428664c64a1681663f93f0dc4d2ce24276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef8843428664c64a1681663f93f0dc4d2ce24276/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b021beeb6021d8885dc3f21e75a7f56502849633", "url": "https://api.github.com/repos/rust-lang/rust/commits/b021beeb6021d8885dc3f21e75a7f56502849633", "html_url": "https://github.com/rust-lang/rust/commit/b021beeb6021d8885dc3f21e75a7f56502849633"}, {"sha": "487e27350a16e35f77ca471f368be3da28dac27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/487e27350a16e35f77ca471f368be3da28dac27c", "html_url": "https://github.com/rust-lang/rust/commit/487e27350a16e35f77ca471f368be3da28dac27c"}], "stats": {"total": 285, "additions": 154, "deletions": 131}, "files": [{"sha": "f823792fabe63767e9e82580e478f3235f910193", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -261,39 +261,39 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn fadd_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFAdd(self.llbuilder, lhs, rhs, UNNAMED);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n \n     fn fsub_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFSub(self.llbuilder, lhs, rhs, UNNAMED);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n \n     fn fmul_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFMul(self.llbuilder, lhs, rhs, UNNAMED);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n \n     fn fdiv_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFDiv(self.llbuilder, lhs, rhs, UNNAMED);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n \n     fn frem_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFRem(self.llbuilder, lhs, rhs, UNNAMED);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n@@ -1242,14 +1242,14 @@ impl Builder<'a, 'll, 'tcx> {\n     pub fn vector_reduce_fadd_fast(&mut self, acc: &'ll Value, src: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMRustBuildVectorReduceFAdd(self.llbuilder, acc, src);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n     pub fn vector_reduce_fmul_fast(&mut self, acc: &'ll Value, src: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMRustBuildVectorReduceFMul(self.llbuilder, acc, src);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n@@ -1282,15 +1282,15 @@ impl Builder<'a, 'll, 'tcx> {\n         unsafe {\n             let instr =\n                 llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, /*NoNaNs:*/ true);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }\n     pub fn vector_reduce_fmax_fast(&mut self, src: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr =\n                 llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, /*NoNaNs:*/ true);\n-            llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n+            llvm::LLVMRustSetFastMath(instr);\n             instr\n         }\n     }"}, {"sha": "fc6c1abf4af5639ca8604399be1666419cbdead9", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -1053,50 +1053,48 @@ fn generic_simd_intrinsic(\n         let vec_ty = bx.type_vector(elem_ty, in_len);\n \n         let (intr_name, fn_ty) = match name {\n-            sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n-            sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n             sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n             sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n-            sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n+            sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n             _ => return_error!(\"unrecognized intrinsic `{}`\", name),\n         };\n-\n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n         let f = bx.declare_cfn(&llvm_name, llvm::UnnamedAddr::No, fn_ty);\n         let c = bx.call(f, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n-        unsafe { llvm::LLVMRustSetHasUnsafeAlgebra(c) };\n         Ok(c)\n     }\n \n     if std::matches!(\n         name,\n-        sym::simd_fsqrt\n-            | sym::simd_fsin\n-            | sym::simd_fcos\n+        sym::simd_ceil\n             | sym::simd_fabs\n-            | sym::simd_ceil\n-            | sym::simd_floor\n-            | sym::simd_round\n-            | sym::simd_trunc\n-            | sym::simd_fexp\n+            | sym::simd_fcos\n             | sym::simd_fexp2\n+            | sym::simd_fexp\n             | sym::simd_flog10\n             | sym::simd_flog2\n             | sym::simd_flog\n-            | sym::simd_fpowi\n-            | sym::simd_fpow\n+            | sym::simd_floor\n             | sym::simd_fma\n+            | sym::simd_fpow\n+            | sym::simd_fpowi\n+            | sym::simd_fsin\n+            | sym::simd_fsqrt\n+            | sym::simd_round\n+            | sym::simd_trunc\n     ) {\n         return simd_simple_float_intrinsic(name, in_elem, in_ty, in_len, bx, span, args);\n     }"}, {"sha": "32b1526f6e44c3463440a0e3abfad1ea6f3b70cf", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -1354,7 +1354,7 @@ extern \"C\" {\n     pub fn LLVMBuildNeg(B: &Builder<'a>, V: &'a Value, Name: *const c_char) -> &'a Value;\n     pub fn LLVMBuildFNeg(B: &Builder<'a>, V: &'a Value, Name: *const c_char) -> &'a Value;\n     pub fn LLVMBuildNot(B: &Builder<'a>, V: &'a Value, Name: *const c_char) -> &'a Value;\n-    pub fn LLVMRustSetHasUnsafeAlgebra(Instr: &Value);\n+    pub fn LLVMRustSetFastMath(Instr: &Value);\n \n     // Memory\n     pub fn LLVMBuildAlloca(B: &Builder<'a>, Ty: &'a Type, Name: *const c_char) -> &'a Value;"}, {"sha": "ef27f04ae218bca54846e115942faa51851df64e", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -349,8 +349,10 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n   F->setAttributes(PALNew);\n }\n \n-// enable fpmath flag UnsafeAlgebra\n-extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n+// Enable a fast-math flag\n+//\n+// https://llvm.org/docs/LangRef.html#fast-math-flags\n+extern \"C\" void LLVMRustSetFastMath(LLVMValueRef V) {\n   if (auto I = dyn_cast<Instruction>(unwrap<Value>(V))) {\n     I->setFast(true);\n   }"}, {"sha": "7ca1954470075ded1d98c43ee52b523624c4364b", "filename": "src/test/codegen/issue-84268.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fissue-84268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fissue-84268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-84268.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -O --crate-type=rlib\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_fabs<T>(x: T) -> T;\n+    fn simd_eq<T, U>(x: T, y: T) -> U;\n+}\n+\n+#[repr(simd)]\n+pub struct V([f32; 4]);\n+\n+#[repr(simd)]\n+pub struct M([i32; 4]);\n+\n+#[no_mangle]\n+// CHECK-LABEL: @is_infinite\n+pub fn is_infinite(v: V) -> M {\n+    // CHECK: fabs\n+    // CHECK: cmp oeq\n+    unsafe {\n+        simd_eq(simd_fabs(v), V([f32::INFINITY; 4]))\n+    }\n+}"}, {"sha": "e7bb2327a6e03b807fe5480736358d47ec9263ad", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-abs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fabs_32x2\n #[no_mangle]\n pub unsafe fn fabs_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.fabs.v2f32\n+    // CHECK: call <2 x float> @llvm.fabs.v2f32\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_32x4\n #[no_mangle]\n pub unsafe fn fabs_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.fabs.v4f32\n+    // CHECK: call <4 x float> @llvm.fabs.v4f32\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_32x8\n #[no_mangle]\n pub unsafe fn fabs_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.fabs.v8f32\n+    // CHECK: call <8 x float> @llvm.fabs.v8f32\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_32x16\n #[no_mangle]\n pub unsafe fn fabs_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.fabs.v16f32\n+    // CHECK: call <16 x float> @llvm.fabs.v16f32\n     simd_fabs(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fabs_64x4\n #[no_mangle]\n pub unsafe fn fabs_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.fabs.v4f64\n+    // CHECK: call <4 x double> @llvm.fabs.v4f64\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_64x2\n #[no_mangle]\n pub unsafe fn fabs_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.fabs.v2f64\n+    // CHECK: call <2 x double> @llvm.fabs.v2f64\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_64x8\n #[no_mangle]\n pub unsafe fn fabs_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.fabs.v8f64\n+    // CHECK: call <8 x double> @llvm.fabs.v8f64\n     simd_fabs(a)\n }"}, {"sha": "e33482d7556265705422b66307f880d26928734c", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-ceil.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @ceil_32x2\n #[no_mangle]\n pub unsafe fn ceil_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.ceil.v2f32\n+    // CHECK: call <2 x float> @llvm.ceil.v2f32\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_32x4\n #[no_mangle]\n pub unsafe fn ceil_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.ceil.v4f32\n+    // CHECK: call <4 x float> @llvm.ceil.v4f32\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_32x8\n #[no_mangle]\n pub unsafe fn ceil_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.ceil.v8f32\n+    // CHECK: call <8 x float> @llvm.ceil.v8f32\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_32x16\n #[no_mangle]\n pub unsafe fn ceil_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.ceil.v16f32\n+    // CHECK: call <16 x float> @llvm.ceil.v16f32\n     simd_ceil(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @ceil_64x4\n #[no_mangle]\n pub unsafe fn ceil_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.ceil.v4f64\n+    // CHECK: call <4 x double> @llvm.ceil.v4f64\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_64x2\n #[no_mangle]\n pub unsafe fn ceil_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.ceil.v2f64\n+    // CHECK: call <2 x double> @llvm.ceil.v2f64\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_64x8\n #[no_mangle]\n pub unsafe fn ceil_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.ceil.v8f64\n+    // CHECK: call <8 x double> @llvm.ceil.v8f64\n     simd_ceil(a)\n }"}, {"sha": "0f52952bc0c9cbc6e71992fb59dad7fe2fb1f910", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-cos.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fcos_32x2\n #[no_mangle]\n pub unsafe fn fcos_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.cos.v2f32\n+    // CHECK: call <2 x float> @llvm.cos.v2f32\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_32x4\n #[no_mangle]\n pub unsafe fn fcos_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.cos.v4f32\n+    // CHECK: call <4 x float> @llvm.cos.v4f32\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_32x8\n #[no_mangle]\n pub unsafe fn fcos_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.cos.v8f32\n+    // CHECK: call <8 x float> @llvm.cos.v8f32\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_32x16\n #[no_mangle]\n pub unsafe fn fcos_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.cos.v16f32\n+    // CHECK: call <16 x float> @llvm.cos.v16f32\n     simd_fcos(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fcos_64x4\n #[no_mangle]\n pub unsafe fn fcos_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.cos.v4f64\n+    // CHECK: call <4 x double> @llvm.cos.v4f64\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_64x2\n #[no_mangle]\n pub unsafe fn fcos_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.cos.v2f64\n+    // CHECK: call <2 x double> @llvm.cos.v2f64\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_64x8\n #[no_mangle]\n pub unsafe fn fcos_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.cos.v8f64\n+    // CHECK: call <8 x double> @llvm.cos.v8f64\n     simd_fcos(a)\n }"}, {"sha": "1154acf6924a07eac5db8fd2a082744cca980422", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @exp_32x2\n #[no_mangle]\n pub unsafe fn exp_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.exp.v2f32\n+    // CHECK: call <2 x float> @llvm.exp.v2f32\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_32x4\n #[no_mangle]\n pub unsafe fn exp_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.exp.v4f32\n+    // CHECK: call <4 x float> @llvm.exp.v4f32\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_32x8\n #[no_mangle]\n pub unsafe fn exp_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.exp.v8f32\n+    // CHECK: call <8 x float> @llvm.exp.v8f32\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_32x16\n #[no_mangle]\n pub unsafe fn exp_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.exp.v16f32\n+    // CHECK: call <16 x float> @llvm.exp.v16f32\n     simd_fexp(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @exp_64x4\n #[no_mangle]\n pub unsafe fn exp_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.exp.v4f64\n+    // CHECK: call <4 x double> @llvm.exp.v4f64\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_64x2\n #[no_mangle]\n pub unsafe fn exp_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.exp.v2f64\n+    // CHECK: call <2 x double> @llvm.exp.v2f64\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_64x8\n #[no_mangle]\n pub unsafe fn exp_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.exp.v8f64\n+    // CHECK: call <8 x double> @llvm.exp.v8f64\n     simd_fexp(a)\n }"}, {"sha": "929dc9ac8dfead5d4ae6018676141def6e366f19", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @exp2_32x2\n #[no_mangle]\n pub unsafe fn exp2_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.exp2.v2f32\n+    // CHECK: call <2 x float> @llvm.exp2.v2f32\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_32x4\n #[no_mangle]\n pub unsafe fn exp2_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.exp2.v4f32\n+    // CHECK: call <4 x float> @llvm.exp2.v4f32\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_32x8\n #[no_mangle]\n pub unsafe fn exp2_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.exp2.v8f32\n+    // CHECK: call <8 x float> @llvm.exp2.v8f32\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_32x16\n #[no_mangle]\n pub unsafe fn exp2_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.exp2.v16f32\n+    // CHECK: call <16 x float> @llvm.exp2.v16f32\n     simd_fexp2(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @exp2_64x4\n #[no_mangle]\n pub unsafe fn exp2_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.exp2.v4f64\n+    // CHECK: call <4 x double> @llvm.exp2.v4f64\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_64x2\n #[no_mangle]\n pub unsafe fn exp2_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.exp2.v2f64\n+    // CHECK: call <2 x double> @llvm.exp2.v2f64\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_64x8\n #[no_mangle]\n pub unsafe fn exp2_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.exp2.v8f64\n+    // CHECK: call <8 x double> @llvm.exp2.v8f64\n     simd_fexp2(a)\n }"}, {"sha": "56ca644f6bd91cce00d679d54eadf0289bcf47b4", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-floor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @floor_32x2\n #[no_mangle]\n pub unsafe fn floor_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.floor.v2f32\n+    // CHECK: call <2 x float> @llvm.floor.v2f32\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_32x4\n #[no_mangle]\n pub unsafe fn floor_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.floor.v4f32\n+    // CHECK: call <4 x float> @llvm.floor.v4f32\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_32x8\n #[no_mangle]\n pub unsafe fn floor_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.floor.v8f32\n+    // CHECK: call <8 x float> @llvm.floor.v8f32\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_32x16\n #[no_mangle]\n pub unsafe fn floor_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.floor.v16f32\n+    // CHECK: call <16 x float> @llvm.floor.v16f32\n     simd_floor(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @floor_64x4\n #[no_mangle]\n pub unsafe fn floor_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.floor.v4f64\n+    // CHECK: call <4 x double> @llvm.floor.v4f64\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_64x2\n #[no_mangle]\n pub unsafe fn floor_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.floor.v2f64\n+    // CHECK: call <2 x double> @llvm.floor.v2f64\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_64x8\n #[no_mangle]\n pub unsafe fn floor_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.floor.v8f64\n+    // CHECK: call <8 x double> @llvm.floor.v8f64\n     simd_floor(a)\n }"}, {"sha": "fd65cb72baa4c146bc24293336391c7f11f957eb", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fma.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fma_32x2\n #[no_mangle]\n pub unsafe fn fma_32x2(a: f32x2, b: f32x2, c: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.fma.v2f32\n+    // CHECK: call <2 x float> @llvm.fma.v2f32\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_32x4\n #[no_mangle]\n pub unsafe fn fma_32x4(a: f32x4, b: f32x4, c: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.fma.v4f32\n+    // CHECK: call <4 x float> @llvm.fma.v4f32\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_32x8\n #[no_mangle]\n pub unsafe fn fma_32x8(a: f32x8, b: f32x8, c: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.fma.v8f32\n+    // CHECK: call <8 x float> @llvm.fma.v8f32\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_32x16\n #[no_mangle]\n pub unsafe fn fma_32x16(a: f32x16, b: f32x16, c: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.fma.v16f32\n+    // CHECK: call <16 x float> @llvm.fma.v16f32\n     simd_fma(a, b, c)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fma_64x4\n #[no_mangle]\n pub unsafe fn fma_64x4(a: f64x4, b: f64x4, c: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.fma.v4f64\n+    // CHECK: call <4 x double> @llvm.fma.v4f64\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_64x2\n #[no_mangle]\n pub unsafe fn fma_64x2(a: f64x2, b: f64x2, c: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.fma.v2f64\n+    // CHECK: call <2 x double> @llvm.fma.v2f64\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_64x8\n #[no_mangle]\n pub unsafe fn fma_64x8(a: f64x8, b: f64x8, c: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.fma.v8f64\n+    // CHECK: call <8 x double> @llvm.fma.v8f64\n     simd_fma(a, b, c)\n }"}, {"sha": "adc1919256e76ac88d93e6c4f87c925d7b87d374", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fsqrt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fsqrt_32x2\n #[no_mangle]\n pub unsafe fn fsqrt_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.sqrt.v2f32\n+    // CHECK: call <2 x float> @llvm.sqrt.v2f32\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_32x4\n #[no_mangle]\n pub unsafe fn fsqrt_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.sqrt.v4f32\n+    // CHECK: call <4 x float> @llvm.sqrt.v4f32\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_32x8\n #[no_mangle]\n pub unsafe fn fsqrt_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.sqrt.v8f32\n+    // CHECK: call <8 x float> @llvm.sqrt.v8f32\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_32x16\n #[no_mangle]\n pub unsafe fn fsqrt_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.sqrt.v16f32\n+    // CHECK: call <16 x float> @llvm.sqrt.v16f32\n     simd_fsqrt(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fsqrt_64x4\n #[no_mangle]\n pub unsafe fn fsqrt_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.sqrt.v4f64\n+    // CHECK: call <4 x double> @llvm.sqrt.v4f64\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_64x2\n #[no_mangle]\n pub unsafe fn fsqrt_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.sqrt.v2f64\n+    // CHECK: call <2 x double> @llvm.sqrt.v2f64\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_64x8\n #[no_mangle]\n pub unsafe fn fsqrt_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.sqrt.v8f64\n+    // CHECK: call <8 x double> @llvm.sqrt.v8f64\n     simd_fsqrt(a)\n }"}, {"sha": "c072519c0d65dfaa0a0044924c4c5a01dbc23b35", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @log_32x2\n #[no_mangle]\n pub unsafe fn log_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.log.v2f32\n+    // CHECK: call <2 x float> @llvm.log.v2f32\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_32x4\n #[no_mangle]\n pub unsafe fn log_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.log.v4f32\n+    // CHECK: call <4 x float> @llvm.log.v4f32\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_32x8\n #[no_mangle]\n pub unsafe fn log_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.log.v8f32\n+    // CHECK: call <8 x float> @llvm.log.v8f32\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_32x16\n #[no_mangle]\n pub unsafe fn log_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.log.v16f32\n+    // CHECK: call <16 x float> @llvm.log.v16f32\n     simd_flog(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @log_64x4\n #[no_mangle]\n pub unsafe fn log_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.log.v4f64\n+    // CHECK: call <4 x double> @llvm.log.v4f64\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_64x2\n #[no_mangle]\n pub unsafe fn log_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.log.v2f64\n+    // CHECK: call <2 x double> @llvm.log.v2f64\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_64x8\n #[no_mangle]\n pub unsafe fn log_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.log.v8f64\n+    // CHECK: call <8 x double> @llvm.log.v8f64\n     simd_flog(a)\n }"}, {"sha": "5fd64899507822b3c0c6c6bd9932b92edb652cdf", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log10.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @log10_32x2\n #[no_mangle]\n pub unsafe fn log10_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.log10.v2f32\n+    // CHECK: call <2 x float> @llvm.log10.v2f32\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_32x4\n #[no_mangle]\n pub unsafe fn log10_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.log10.v4f32\n+    // CHECK: call <4 x float> @llvm.log10.v4f32\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_32x8\n #[no_mangle]\n pub unsafe fn log10_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.log10.v8f32\n+    // CHECK: call <8 x float> @llvm.log10.v8f32\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_32x16\n #[no_mangle]\n pub unsafe fn log10_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.log10.v16f32\n+    // CHECK: call <16 x float> @llvm.log10.v16f32\n     simd_flog10(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @log10_64x4\n #[no_mangle]\n pub unsafe fn log10_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.log10.v4f64\n+    // CHECK: call <4 x double> @llvm.log10.v4f64\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_64x2\n #[no_mangle]\n pub unsafe fn log10_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.log10.v2f64\n+    // CHECK: call <2 x double> @llvm.log10.v2f64\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_64x8\n #[no_mangle]\n pub unsafe fn log10_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.log10.v8f64\n+    // CHECK: call <8 x double> @llvm.log10.v8f64\n     simd_flog10(a)\n }"}, {"sha": "35175f0ca572be5aa5d38c91bf9445a1893b5ea8", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @log2_32x2\n #[no_mangle]\n pub unsafe fn log2_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.log2.v2f32\n+    // CHECK: call <2 x float> @llvm.log2.v2f32\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_32x4\n #[no_mangle]\n pub unsafe fn log2_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.log2.v4f32\n+    // CHECK: call <4 x float> @llvm.log2.v4f32\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_32x8\n #[no_mangle]\n pub unsafe fn log2_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.log2.v8f32\n+    // CHECK: call <8 x float> @llvm.log2.v8f32\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_32x16\n #[no_mangle]\n pub unsafe fn log2_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.log2.v16f32\n+    // CHECK: call <16 x float> @llvm.log2.v16f32\n     simd_flog2(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @log2_64x4\n #[no_mangle]\n pub unsafe fn log2_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.log2.v4f64\n+    // CHECK: call <4 x double> @llvm.log2.v4f64\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_64x2\n #[no_mangle]\n pub unsafe fn log2_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.log2.v2f64\n+    // CHECK: call <2 x double> @llvm.log2.v2f64\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_64x8\n #[no_mangle]\n pub unsafe fn log2_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.log2.v8f64\n+    // CHECK: call <8 x double> @llvm.log2.v8f64\n     simd_flog2(a)\n }"}, {"sha": "3b8d611ab675bf4e9f0008800e2bb05aec4f20f8", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-pow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fpow_32x2\n #[no_mangle]\n pub unsafe fn fpow_32x2(a: f32x2, b: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.pow.v2f32\n+    // CHECK: call <2 x float> @llvm.pow.v2f32\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_32x4\n #[no_mangle]\n pub unsafe fn fpow_32x4(a: f32x4, b: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.pow.v4f32\n+    // CHECK: call <4 x float> @llvm.pow.v4f32\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_32x8\n #[no_mangle]\n pub unsafe fn fpow_32x8(a: f32x8, b: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.pow.v8f32\n+    // CHECK: call <8 x float> @llvm.pow.v8f32\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_32x16\n #[no_mangle]\n pub unsafe fn fpow_32x16(a: f32x16, b: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.pow.v16f32\n+    // CHECK: call <16 x float> @llvm.pow.v16f32\n     simd_fpow(a, b)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fpow_64x4\n #[no_mangle]\n pub unsafe fn fpow_64x4(a: f64x4, b: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.pow.v4f64\n+    // CHECK: call <4 x double> @llvm.pow.v4f64\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_64x2\n #[no_mangle]\n pub unsafe fn fpow_64x2(a: f64x2, b: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.pow.v2f64\n+    // CHECK: call <2 x double> @llvm.pow.v2f64\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_64x8\n #[no_mangle]\n pub unsafe fn fpow_64x8(a: f64x8, b: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.pow.v8f64\n+    // CHECK: call <8 x double> @llvm.pow.v8f64\n     simd_fpow(a, b)\n }"}, {"sha": "e80c50c1076741b87813a386ea090a0d33e723bd", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-powi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fpowi_32x2\n #[no_mangle]\n pub unsafe fn fpowi_32x2(a: f32x2, b: i32) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.powi.v2f32\n+    // CHECK: call <2 x float> @llvm.powi.v2f32\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_32x4\n #[no_mangle]\n pub unsafe fn fpowi_32x4(a: f32x4, b: i32) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.powi.v4f32\n+    // CHECK: call <4 x float> @llvm.powi.v4f32\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_32x8\n #[no_mangle]\n pub unsafe fn fpowi_32x8(a: f32x8, b: i32) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.powi.v8f32\n+    // CHECK: call <8 x float> @llvm.powi.v8f32\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_32x16\n #[no_mangle]\n pub unsafe fn fpowi_32x16(a: f32x16, b: i32) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.powi.v16f32\n+    // CHECK: call <16 x float> @llvm.powi.v16f32\n     simd_fpowi(a, b)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fpowi_64x4\n #[no_mangle]\n pub unsafe fn fpowi_64x4(a: f64x4, b: i32) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.powi.v4f64\n+    // CHECK: call <4 x double> @llvm.powi.v4f64\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_64x2\n #[no_mangle]\n pub unsafe fn fpowi_64x2(a: f64x2, b: i32) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.powi.v2f64\n+    // CHECK: call <2 x double> @llvm.powi.v2f64\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_64x8\n #[no_mangle]\n pub unsafe fn fpowi_64x8(a: f64x8, b: i32) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.powi.v8f64\n+    // CHECK: call <8 x double> @llvm.powi.v8f64\n     simd_fpowi(a, b)\n }"}, {"sha": "9e3fab49aff63fb9ea14c54916383b7b8dda420c", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-sin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8843428664c64a1681663f93f0dc4d2ce24276/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs?ref=ef8843428664c64a1681663f93f0dc4d2ce24276", "patch": "@@ -32,28 +32,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fsin_32x2\n #[no_mangle]\n pub unsafe fn fsin_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call fast <2 x float> @llvm.sin.v2f32\n+    // CHECK: call <2 x float> @llvm.sin.v2f32\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_32x4\n #[no_mangle]\n pub unsafe fn fsin_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call fast <4 x float> @llvm.sin.v4f32\n+    // CHECK: call <4 x float> @llvm.sin.v4f32\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_32x8\n #[no_mangle]\n pub unsafe fn fsin_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call fast <8 x float> @llvm.sin.v8f32\n+    // CHECK: call <8 x float> @llvm.sin.v8f32\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_32x16\n #[no_mangle]\n pub unsafe fn fsin_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call fast <16 x float> @llvm.sin.v16f32\n+    // CHECK: call <16 x float> @llvm.sin.v16f32\n     simd_fsin(a)\n }\n \n@@ -73,20 +73,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fsin_64x4\n #[no_mangle]\n pub unsafe fn fsin_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call fast <4 x double> @llvm.sin.v4f64\n+    // CHECK: call <4 x double> @llvm.sin.v4f64\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_64x2\n #[no_mangle]\n pub unsafe fn fsin_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call fast <2 x double> @llvm.sin.v2f64\n+    // CHECK: call <2 x double> @llvm.sin.v2f64\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_64x8\n #[no_mangle]\n pub unsafe fn fsin_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call fast <8 x double> @llvm.sin.v8f64\n+    // CHECK: call <8 x double> @llvm.sin.v8f64\n     simd_fsin(a)\n }"}]}