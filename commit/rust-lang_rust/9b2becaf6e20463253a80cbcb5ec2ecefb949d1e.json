{"sha": "9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmJlY2FmNmUyMDQ2MzI1M2E4MGNiY2I1ZWMyZWNlZmI5NDlkMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-07T13:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-07T13:31:32Z"}, "message": "Auto merge of #34128 - eddyb:mir-trans-fixes, r=luqmana\n\n[MIR] Fix MIR trans edge cases that showed up on crater.\n\nThese fixes cover all of the [regressions found by crater](https://gist.github.com/nikomatsakis/88ce89ed06ef7f7f19bfd1e221d7f7ec) (for #34096).\n\nTwo of them were `Pair` edge cases (ZSTs and constants) causing LLVM assertions, the other one was  causing stack overflows in debug scripts compiled in debug mode, due to the `fn_ret_cast` `alloca` ending up in a loop.", "tree": {"sha": "46d640fca6be8744989981e61641074284ed412b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d640fca6be8744989981e61641074284ed412b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "html_url": "https://github.com/rust-lang/rust/commit/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35255038bacaf2dd3c8a1188657f76c8f974375", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35255038bacaf2dd3c8a1188657f76c8f974375", "html_url": "https://github.com/rust-lang/rust/commit/f35255038bacaf2dd3c8a1188657f76c8f974375"}, {"sha": "02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cbc0ef8ce62ca2c903052fdf13e33af152a38d", "html_url": "https://github.com/rust-lang/rust/commit/02cbc0ef8ce62ca2c903052fdf13e33af152a38d"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "56bf803fcd818586a9e91a60b3cf3b2e320ac1b6", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "patch": "@@ -894,8 +894,11 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         //   bitcasting to the struct type yields invalid cast errors.\n \n         // We instead thus allocate some scratch space...\n-        let llscratch = bcx.alloca(llcast_ty, \"fn_ret_cast\");\n-        bcx.with_block(|bcx| base::call_lifetime_start(bcx, llscratch));\n+        let llscratch = bcx.with_block(|bcx| {\n+            let alloca = base::alloca(bcx, llcast_ty, \"fn_ret_cast\");\n+            base::call_lifetime_start(bcx, alloca);\n+            alloca\n+        });\n \n         // ...where we first store the value...\n         bcx.store(op.immediate(), llscratch);"}, {"sha": "ed1830560ed239a4c9b19bbc5eaf471e542da27a", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "patch": "@@ -125,10 +125,10 @@ impl<'tcx> Const<'tcx> {\n         let llty = type_of::immediate_type_of(ccx, self.ty);\n         let llvalty = val_ty(self.llval);\n \n-        let val = if common::type_is_imm_pair(ccx, self.ty) {\n+        let val = if llty == llvalty && common::type_is_imm_pair(ccx, self.ty) {\n             let (a, b) = self.get_pair();\n             OperandValue::Pair(a, b)\n-        } else if common::type_is_immediate(ccx, self.ty) && llty == llvalty {\n+        } else if llty == llvalty && common::type_is_immediate(ccx, self.ty) {\n             // If the types match, we can use the value directly.\n             OperandValue::Immediate(self.llval)\n         } else {"}, {"sha": "408b30c72582cd398acd6baae0a2c12cbef86a86", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "patch": "@@ -124,7 +124,12 @@ impl<'tcx> TempRef<'tcx> {\n             // Zero-size temporaries aren't always initialized, which\n             // doesn't matter because they don't contain data, but\n             // we need something in the operand.\n-            let val = OperandValue::Immediate(common::C_nil(ccx));\n+            let nil = common::C_nil(ccx);\n+            let val = if common::type_is_imm_pair(ccx, ty) {\n+                OperandValue::Pair(nil, nil)\n+            } else {\n+                OperandValue::Immediate(nil)\n+            };\n             let op = OperandRef {\n                 val: val,\n                 ty: ty"}, {"sha": "0ce9e88ef3dbea7cc8d03c9f3212e0143d556b8a", "filename": "src/test/run-pass/mir_constval_adts.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs?ref=9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "patch": "@@ -15,21 +15,23 @@ struct Point {\n     _y: i32,\n }\n \n+#[derive(PartialEq, Eq, Debug)]\n+struct Newtype<T>(T);\n+\n const STRUCT: Point = Point { _x: 42, _y: 42 };\n const TUPLE1: (i32, i32) = (42, 42);\n const TUPLE2: (&'static str, &'static str) = (\"hello\",\"world\");\n+const PAIR_NEWTYPE: (Newtype<i32>, Newtype<i32>) = (Newtype(42), Newtype(42));\n \n #[rustc_mir]\n-fn mir() -> (Point, (i32, i32), (&'static str, &'static str)){\n+fn mir() -> (Point, (i32, i32), (&'static str, &'static str), (Newtype<i32>, Newtype<i32>)) {\n     let struct1 = STRUCT;\n     let tuple1 = TUPLE1;\n     let tuple2 = TUPLE2;\n-    (struct1, tuple1, tuple2)\n+    let pair_newtype = PAIR_NEWTYPE;\n+    (struct1, tuple1, tuple2, pair_newtype)\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n-struct Newtype<T>(T);\n-\n const NEWTYPE: Newtype<&'static str> = Newtype(\"foobar\");\n \n #[rustc_mir]\n@@ -39,7 +41,7 @@ fn test_promoted_newtype_str_ref() {\n }\n \n fn main(){\n-    assert_eq!(mir(), (STRUCT, TUPLE1, TUPLE2));\n+    assert_eq!(mir(), (STRUCT, TUPLE1, TUPLE2, PAIR_NEWTYPE));\n     test_promoted_newtype_str_ref();\n }\n "}, {"sha": "0527f38a9c36dfbc3fa96b8452eba33791a05baf", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2becaf6e20463253a80cbcb5ec2ecefb949d1e/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=9b2becaf6e20463253a80cbcb5ec2ecefb949d1e", "patch": "@@ -147,6 +147,16 @@ fn test_fn_transmute_zst(x: ()) -> [(); 1] {\n     })\n }\n \n+#[rustc_mir]\n+fn test_fn_ignored_pair() -> ((), ()) {\n+    ((), ())\n+}\n+\n+#[rustc_mir]\n+fn test_fn_ignored_pair_0() {\n+    test_fn_ignored_pair().0\n+}\n+\n fn main() {\n     assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n     assert_eq!(test2(98), 98);\n@@ -169,4 +179,6 @@ fn main() {\n \n     assert_eq!(test_fn_nil_call(&(|| 42)), 42);\n     assert_eq!(test_fn_transmute_zst(()), [()]);\n+\n+    assert_eq!(test_fn_ignored_pair_0(), ());\n }"}]}