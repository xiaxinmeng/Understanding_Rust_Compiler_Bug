{"sha": "6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "node_id": "C_kwDOAAsO6NoAKDZjZjk5Njk1NDZkZDMyZGJiNTcxM2UzZmE2ZTAxZjYyNDdiNzdkMjU", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T05:28:22Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T05:28:22Z"}, "message": "collect macro_rules! macros into macro declarations", "tree": {"sha": "8a0fe3118386227dadc8f3890a3cbfcaecd9583d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0fe3118386227dadc8f3890a3cbfcaecd9583d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "html_url": "https://github.com/rust-lang/rust/commit/6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ed5699355cb6d29d1e1ef2cbb1188c2319c5e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed5699355cb6d29d1e1ef2cbb1188c2319c5e7f", "html_url": "https://github.com/rust-lang/rust/commit/1ed5699355cb6d29d1e1ef2cbb1188c2319c5e7f"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "37599371f61fee8f13a6ddae18172740f0061e39", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "patch": "@@ -127,7 +127,7 @@ impl ItemScope {\n     }\n \n     /// Iterate over all legacy textual scoped macros visible at the end of the module\n-    pub fn legacy_macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n+    pub(crate) fn legacy_macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.legacy_macros.iter().map(|(name, def)| (name, *def))\n     }\n "}, {"sha": "d7a35caf29eef4c774c73f6cff2be6ff737c3fe0", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "patch": "@@ -594,6 +594,7 @@ impl DefCollector<'_> {\n     ) {\n         // Textual scoping\n         self.define_legacy_macro(module_id, name.clone(), macro_);\n+        self.def_map.modules[module_id].scope.declare_macro(macro_);\n \n         // Module scoping\n         // In Rust, `#[macro_export]` macros are unconditionally visible at the"}, {"sha": "b8efa279e1bae693c4f0b5c0cc337e1d1f0629c3", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf9969546dd32dbb5713e3fa6e01f6247b77d25/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "patch": "@@ -490,8 +490,6 @@ impl<'a> SymbolCollector<'a> {\n         let module_data = &def_map[module_id.local_id];\n         let scope = &module_data.scope;\n \n-        dbg!(scope);\n-\n         for module_def_id in scope.declarations() {\n             match module_def_id {\n                 ModuleDefId::ModuleId(id) => self.push_module(id),\n@@ -533,13 +531,6 @@ impl<'a> SymbolCollector<'a> {\n             self.work.push(SymbolCollectorWorkItem::Body { body: const_id.into() })\n         }\n \n-        // Collect legacy macros from the root module only:\n-        if module_data.parent.is_none() {\n-            for (_, macro_def_id) in scope.legacy_macros() {\n-                self.push_decl_macro(macro_def_id.into());\n-            }\n-        }\n-\n         for macro_def_id in scope.macro_declarations() {\n             self.push_decl_macro(macro_def_id.into());\n         }\n@@ -699,7 +690,7 @@ impl<'a> SymbolCollector<'a> {\n         })\n     }\n \n-    pub(crate) fn push_decl_macro(&mut self, macro_def: MacroDef) {\n+    fn push_decl_macro(&mut self, macro_def: MacroDef) {\n         self.push_file_symbol(|s| {\n             let name = macro_def.name(s.db.upcast())?.as_text()?;\n             let source = macro_def.source(s.db.upcast())?;"}]}