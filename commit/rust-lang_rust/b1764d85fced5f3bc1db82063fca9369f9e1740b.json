{"sha": "b1764d85fced5f3bc1db82063fca9369f9e1740b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzY0ZDg1ZmNlZDVmM2JjMWRiODIwNjNmY2E5MzY5ZjllMTc0MGI=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-01-28T05:13:18Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-03T22:00:55Z"}, "message": "ra_syntax: fixed a typo in doc comment", "tree": {"sha": "0f722e395a03184b37f58b23d1f587cb9eeedef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f722e395a03184b37f58b23d1f587cb9eeedef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1764d85fced5f3bc1db82063fca9369f9e1740b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1764d85fced5f3bc1db82063fca9369f9e1740b", "html_url": "https://github.com/rust-lang/rust/commit/b1764d85fced5f3bc1db82063fca9369f9e1740b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1764d85fced5f3bc1db82063fca9369f9e1740b/comments", "author": null, "committer": null, "parents": [{"sha": "9e7eaa959f9dc368a55f1a80b35651b78b3d0883", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7eaa959f9dc368a55f1a80b35651b78b3d0883", "html_url": "https://github.com/rust-lang/rust/commit/9e7eaa959f9dc368a55f1a80b35651b78b3d0883"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "d1315e6044bbff9e8324afb8844a8792a101b42f", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1764d85fced5f3bc1db82063fca9369f9e1740b/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1764d85fced5f3bc1db82063fca9369f9e1740b/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=b1764d85fced5f3bc1db82063fca9369f9e1740b", "patch": "@@ -69,7 +69,7 @@ pub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxEr\n         .map(|(token, error)| (token.kind, error))\n }\n \n-/// The same as `single_syntax_kind()` but returns only `SyntaxKind` and\n+/// The same as `lex_single_syntax_kind()` but returns only `SyntaxKind` and\n /// returns `None` if any tokenization error occured.\n ///\n /// Beware that unescape errors are not checked at tokenization time.\n@@ -79,10 +79,12 @@ pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n         .map(|(token, _error)| token.kind)\n }\n \n-/// Returns the first encountered token at the beginning of the string.\n+/// Returns `SyntaxKind` and `Option<SyntaxError>` of the first token\n+/// encountered at the beginning of the string.\n ///\n /// Returns `None` if the string contains zero tokens or if the token was parsed\n /// with an error.\n+/// The token is malformed if the returned error is not `None`.\n ///\n /// Beware that unescape errors are not checked at tokenization time.\n fn first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {"}]}