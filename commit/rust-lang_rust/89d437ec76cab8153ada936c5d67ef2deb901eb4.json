{"sha": "89d437ec76cab8153ada936c5d67ef2deb901eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDQzN2VjNzZjYWI4MTUzYWRhOTM2YzVkNjdlZjJkZWI5MDFlYjQ=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-05-04T19:37:12Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-05-22T17:27:53Z"}, "message": "do not print panic message on doctest failures", "tree": {"sha": "d2a392b5225ec939b25848daa1725e3309f91553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a392b5225ec939b25848daa1725e3309f91553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d437ec76cab8153ada936c5d67ef2deb901eb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlzlhp0WHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdHO4B/kBG7DN09/57KF6WTDClehTUGRf\nN/yoMNCYVvh14A5vsHN7gCUakSh2kg0Y1m2j0G0JA9y022u4fJbk13B1QnGrj3pr\nai1+WfMtBFzrc8FxAp/e1eh8f4wapxH9gV2c+JWBuWvszlsRQQkQF7EyoFq3mGyU\nDhBQdT5h/oD+bX4HO3lfZ5TDGZN6mQCcnVCT1NtDctr3B7R1UyDt5I3NAyDIsXpi\nPbGkCKFXmKTkd5y9jTxIcYea2F2G8Fy930WpDC6K0UhDKHwm0/FCGggDG6J+kk6D\nKKPvGN29nr8S7xuO13iAVhdDRQd4nhYQbW2D+NV51igzPUhNJ6eIgjGyGWzQ\n=3Vdk\n-----END PGP SIGNATURE-----", "payload": "tree d2a392b5225ec939b25848daa1725e3309f91553\nparent 37ff5d388f8c004ca248adb635f1cc84d347eda0\nauthor Andy Russell <arussell123@gmail.com> 1556998632 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1558546073 -0400\n\ndo not print panic message on doctest failures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d437ec76cab8153ada936c5d67ef2deb901eb4", "html_url": "https://github.com/rust-lang/rust/commit/89d437ec76cab8153ada936c5d67ef2deb901eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d437ec76cab8153ada936c5d67ef2deb901eb4/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ff5d388f8c004ca248adb635f1cc84d347eda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff5d388f8c004ca248adb635f1cc84d347eda0", "html_url": "https://github.com/rust-lang/rust/commit/37ff5d388f8c004ca248adb635f1cc84d347eda0"}], "stats": {"total": 267, "additions": 224, "deletions": 43}, "files": [{"sha": "9d1a0cc074c8814a40f6a16dc4d5bd04419bd6ea", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 114, "deletions": 25, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -17,7 +17,7 @@ use std::io::prelude::*;\n use std::io;\n use std::panic::{self, AssertUnwindSafe};\n use std::path::PathBuf;\n-use std::process::Command;\n+use std::process::{self, Command};\n use std::str;\n use std::sync::{Arc, Mutex};\n use syntax::symbol::sym;\n@@ -160,13 +160,45 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n     opts\n }\n \n-fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n-            cfgs: Vec<String>, libs: Vec<SearchPath>,\n-            cg: CodegenOptions, externs: Externs,\n-            should_panic: bool, no_run: bool, as_test_harness: bool,\n-            compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n-            persist_doctests: Option<PathBuf>) {\n+/// Documentation test failure modes.\n+enum TestFailure {\n+    /// The test failed to compile.\n+    CompileError,\n+    /// The test is marked `compile_fail` but compiled successfully.\n+    UnexpectedCompilePass,\n+    /// The test failed to compile (as expected) but the compiler output did not contain all\n+    /// expected error codes.\n+    MissingErrorCodes(Vec<String>),\n+    /// The test binary was unable to be executed.\n+    ExecutionError(io::Error),\n+    /// The test binary exited with a non-zero exit code.\n+    ///\n+    /// This typically means an assertion in the test failed or another form of panic occurred.\n+    ExecutionFailure(process::Output),\n+    /// The test is marked `should_panic` but the test binary executed successfully.\n+    UnexpectedRunPass,\n+}\n+\n+fn run_test(\n+    test: &str,\n+    cratename: &str,\n+    filename: &FileName,\n+    line: usize,\n+    cfgs: Vec<String>,\n+    libs: Vec<SearchPath>,\n+    cg: CodegenOptions,\n+    externs: Externs,\n+    should_panic: bool,\n+    no_run: bool,\n+    as_test_harness: bool,\n+    compile_fail: bool,\n+    mut error_codes: Vec<String>,\n+    opts: &TestOptions,\n+    maybe_sysroot: Option<PathBuf>,\n+    linker: Option<PathBuf>,\n+    edition: Edition,\n+    persist_doctests: Option<PathBuf>,\n+) -> Result<(), TestFailure> {\n     let (test, line_offset) = match panic::catch_unwind(|| {\n         make_test(test, Some(cratename), as_test_harness, opts, edition)\n     }) {\n@@ -307,44 +339,43 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n \n     match (compile_result, compile_fail) {\n         (Ok(()), true) => {\n-            panic!(\"test compiled while it wasn't supposed to\")\n+            return Err(TestFailure::UnexpectedCompilePass);\n         }\n         (Ok(()), false) => {}\n         (Err(_), true) => {\n-            if error_codes.len() > 0 {\n+            if !error_codes.is_empty() {\n                 let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n                 error_codes.retain(|err| !out.contains(err));\n+\n+                if !error_codes.is_empty() {\n+                    return Err(TestFailure::MissingErrorCodes(error_codes));\n+                }\n             }\n         }\n         (Err(_), false) => {\n-            panic!(\"couldn't compile the test\")\n+            return Err(TestFailure::CompileError);\n         }\n     }\n \n-    if error_codes.len() > 0 {\n-        panic!(\"Some expected error codes were not found: {:?}\", error_codes);\n+    if no_run {\n+        return Ok(());\n     }\n \n-    if no_run { return }\n-\n     // Run the code!\n     let mut cmd = Command::new(output_file);\n \n     match cmd.output() {\n-        Err(e) => panic!(\"couldn't run the test: {}{}\", e,\n-                        if e.kind() == io::ErrorKind::PermissionDenied {\n-                            \" - maybe your tempdir is mounted with noexec?\"\n-                        } else { \"\" }),\n+        Err(e) => return Err(TestFailure::ExecutionError(e)),\n         Ok(out) => {\n             if should_panic && out.status.success() {\n-                panic!(\"test executable succeeded when it should have failed\");\n+                return Err(TestFailure::UnexpectedRunPass);\n             } else if !should_panic && !out.status.success() {\n-                panic!(\"test executable failed:\\n{}\\n{}\\n\",\n-                       str::from_utf8(&out.stdout).unwrap_or(\"\"),\n-                       str::from_utf8(&out.stderr).unwrap_or(\"\"));\n+                return Err(TestFailure::ExecutionFailure(out));\n             }\n         }\n     }\n+\n+    Ok(())\n }\n \n /// Transforms a test into code that can be compiled into a Rust binary, and returns the number of\n@@ -711,7 +742,7 @@ impl Tester for Collector {\n                 allow_fail: config.allow_fail,\n             },\n             testfn: testing::DynTestFn(box move || {\n-                run_test(\n+                let res = run_test(\n                     &test,\n                     &cratename,\n                     &filename,\n@@ -730,7 +761,65 @@ impl Tester for Collector {\n                     linker,\n                     edition,\n                     persist_doctests\n-                )\n+                );\n+\n+                if let Err(err) = res {\n+                    match err {\n+                        TestFailure::CompileError => {\n+                            eprint!(\"Couldn't compile the test.\");\n+                        }\n+                        TestFailure::UnexpectedCompilePass => {\n+                            eprint!(\"Test compiled successfully, but it's marked `compile_fail`.\");\n+                        }\n+                        TestFailure::UnexpectedRunPass => {\n+                            eprint!(\"Test executable succeeded, but it's marked `should_panic`.\");\n+                        }\n+                        TestFailure::MissingErrorCodes(codes) => {\n+                            eprint!(\"Some expected error codes were not found: {:?}\", codes);\n+                        }\n+                        TestFailure::ExecutionError(err) => {\n+                            eprint!(\"Couldn't run the test: {}\", err);\n+                            if err.kind() == io::ErrorKind::PermissionDenied {\n+                                eprint!(\" - maybe your tempdir is mounted with noexec?\");\n+                            }\n+                        }\n+                        TestFailure::ExecutionFailure(out) => {\n+                            let reason = if let Some(code) = out.status.code() {\n+                                format!(\"exit code {}\", code)\n+                            } else {\n+                                String::from(\"terminated by signal\")\n+                            };\n+\n+                            eprintln!(\"Test executable failed ({}).\", reason);\n+\n+                            // FIXME(#12309): An unfortunate side-effect of capturing the test\n+                            // executable's output is that the relative ordering between the test's\n+                            // stdout and stderr is lost. However, this is better than the\n+                            // alternative: if the test executable inherited the parent's I/O\n+                            // handles the output wouldn't be captured at all, even on success.\n+                            //\n+                            // The ordering could be preserved if the test process' stderr was\n+                            // redirected to stdout, but that functionality does not exist in the\n+                            // standard library, so it may not be portable enough.\n+                            let stdout = str::from_utf8(&out.stdout).unwrap_or_default();\n+                            let stderr = str::from_utf8(&out.stderr).unwrap_or_default();\n+\n+                            if !stdout.is_empty() || !stderr.is_empty() {\n+                                eprintln!();\n+\n+                                if !stdout.is_empty() {\n+                                    eprintln!(\"stdout:\\n{}\", stdout);\n+                                }\n+\n+                                if !stderr.is_empty() {\n+                                    eprintln!(\"stderr:\\n{}\", stderr);\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+                    panic::resume_unwind(box ());\n+                }\n             }),\n         });\n     }"}, {"sha": "297d6efd45fee44aff913a50a5e85bd178688cfd", "filename": "src/test/rustdoc-ui/failed-doctest-compile-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.rs?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -0,0 +1,11 @@\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// failure-status: 101\n+\n+/// ```compile_fail\n+/// println!(\"Hello\");\n+/// ```\n+pub struct Foo;"}, {"sha": "74e33d7beebeb66ae72032915f25bd6387b52eaf", "filename": "src/test/rustdoc-ui/failed-doctest-compile-fail.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -0,0 +1,14 @@\n+\n+running 1 test\n+test $DIR/failed-doctest-compile-fail.rs - Foo (line 8) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-compile-fail.rs - Foo (line 8) stdout ----\n+Test compiled successfully, but it's marked `compile_fail`.\n+\n+failures:\n+    $DIR/failed-doctest-compile-fail.rs - Foo (line 8)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "62102062d4991381c1a8d23d43536a03089742e7", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.rs?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -0,0 +1,11 @@\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// failure-status: 101\n+\n+/// ```compile_fail,E0004\n+/// let x: () = 5i32;\n+/// ```\n+pub struct Foo;"}, {"sha": "d206b721765b2470d7b5b877046fda122fe1a8fc", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -0,0 +1,26 @@\n+\n+running 1 test\n+test $DIR/failed-doctest-missing-codes.rs - Foo (line 8) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-missing-codes.rs - Foo (line 8) stdout ----\n+error[E0308]: mismatched types\n+ --> $DIR/failed-doctest-missing-codes.rs:9:13\n+  |\n+3 | let x: () = 5i32;\n+  |             ^^^^ expected (), found i32\n+  |\n+  = note: expected type `()`\n+             found type `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`.\n+Some expected error codes were not found: [\"E0004\"]\n+\n+failures:\n+    $DIR/failed-doctest-missing-codes.rs - Foo (line 8)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "d2cdeb8f8f50e8d110b884464e8b15611830bf0e", "filename": "src/test/rustdoc-ui/failed-doctest-output.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -5,10 +5,13 @@\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n // failure-status: 101\n-// rustc-env:RUST_BACKTRACE=0\n \n // doctest fails at runtime\n /// ```\n+/// println!(\"stdout 1\");\n+/// eprintln!(\"stderr 1\");\n+/// println!(\"stdout 2\");\n+/// eprintln!(\"stderr 2\");\n /// panic!(\"oh no\");\n /// ```\n pub struct SomeStruct;"}, {"sha": "0c42c652d786c724b1e23dd3afb398e41902d608", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -1,35 +1,39 @@\n \n running 2 tests\n-test $DIR/failed-doctest-output.rs - OtherStruct (line 17) ... FAILED\n-test $DIR/failed-doctest-output.rs - SomeStruct (line 11) ... FAILED\n+test $DIR/failed-doctest-output.rs - OtherStruct (line 20) ... FAILED\n+test $DIR/failed-doctest-output.rs - SomeStruct (line 10) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-output.rs - OtherStruct (line 17) stdout ----\n+---- $DIR/failed-doctest-output.rs - OtherStruct (line 20) stdout ----\n error[E0425]: cannot find value `no` in this scope\n- --> $DIR/failed-doctest-output.rs:18:1\n+ --> $DIR/failed-doctest-output.rs:21:1\n   |\n 3 | no\n   | ^^ not found in this scope\n \n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:320:13\n+Couldn't compile the test.\n+---- $DIR/failed-doctest-output.rs - SomeStruct (line 10) stdout ----\n+Test executable failed (exit code 101).\n+\n+stdout:\n+stdout 1\n+stdout 2\n+\n+stderr:\n+stderr 1\n+stderr 2\n+thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:7:1\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n----- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n-thread '$DIR/failed-doctest-output.rs - SomeStruct (line 11)' panicked at 'test executable failed:\n-\n-thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n-note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n-\n-', src/librustdoc/test.rs:342:17\n \n \n failures:\n-    $DIR/failed-doctest-output.rs - OtherStruct (line 17)\n-    $DIR/failed-doctest-output.rs - SomeStruct (line 11)\n+    $DIR/failed-doctest-output.rs - OtherStruct (line 20)\n+    $DIR/failed-doctest-output.rs - SomeStruct (line 10)\n \n test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "400fb97804aabcef1e0b1de46bc9983d89ab2828", "filename": "src/test/rustdoc-ui/failed-doctest-should-panic.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.rs?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -0,0 +1,11 @@\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// failure-status: 101\n+\n+/// ```should_panic\n+/// println!(\"Hello, world!\");\n+/// ```\n+pub struct Foo;"}, {"sha": "081b64b50af9b9aba65269cd2371c117bf865878", "filename": "src/test/rustdoc-ui/failed-doctest-should-panic.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.stdout?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -0,0 +1,14 @@\n+\n+running 1 test\n+test $DIR/failed-doctest-should-panic.rs - Foo (line 8) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-should-panic.rs - Foo (line 8) stdout ----\n+Test executable succeeded, but it's marked `should_panic`.\n+\n+failures:\n+    $DIR/failed-doctest-should-panic.rs - Foo (line 8)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "0350c016436071649470192ac656dcd9fd830ea0", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/89d437ec76cab8153ada936c5d67ef2deb901eb4/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=89d437ec76cab8153ada936c5d67ef2deb901eb4", "patch": "@@ -13,9 +13,7 @@ error: unterminated double quote string\n \n error: aborting due to previous error\n \n-thread '$DIR/unparseable-doc-test.rs - foo (line 6)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:320:13\n-note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n-\n+Couldn't compile the test.\n \n failures:\n     $DIR/unparseable-doc-test.rs - foo (line 6)"}]}