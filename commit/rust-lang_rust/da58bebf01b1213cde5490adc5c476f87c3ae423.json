{"sha": "da58bebf01b1213cde5490adc5c476f87c3ae423", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNThiZWJmMDFiMTIxM2NkZTU0OTBhZGM1YzQ3NmY4N2MzYWU0MjM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "mackendy@localhost.localdomain", "date": "2018-05-24T03:55:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-29T08:10:58Z"}, "message": "Mention alignment in top-level docs\n\nThis also removes the overlong link that failed tidy xD.", "tree": {"sha": "61b47ecadee07b798c232939dd574c1e73765771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b47ecadee07b798c232939dd574c1e73765771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da58bebf01b1213cde5490adc5c476f87c3ae423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da58bebf01b1213cde5490adc5c476f87c3ae423", "html_url": "https://github.com/rust-lang/rust/commit/da58bebf01b1213cde5490adc5c476f87c3ae423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da58bebf01b1213cde5490adc5c476f87c3ae423/comments", "author": null, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911d35f0bfd207112806eaec2763201dad06d1c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/911d35f0bfd207112806eaec2763201dad06d1c7", "html_url": "https://github.com/rust-lang/rust/commit/911d35f0bfd207112806eaec2763201dad06d1c7"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "3faadca3f3937dcc2bf5791917a8b868c9e04682", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da58bebf01b1213cde5490adc5c476f87c3ae423/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da58bebf01b1213cde5490adc5c476f87c3ae423/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=da58bebf01b1213cde5490adc5c476f87c3ae423", "patch": "@@ -16,18 +16,23 @@\n //!\n //! # Safety\n //!\n-//! Most functions in this module [dereference raw pointers].\n-//!\n-//! In order for a pointer dereference to be safe, the pointer must be \"valid\".\n-//! A valid pointer is one that satisfies **all** of the following conditions:\n+//! Many functions in this module take raw pointers as arguments and dereference\n+//! them. For this to be safe, these pointers must be valid. A valid pointer\n+//! is one that satisfies **all** of the following conditions:\n //!\n //! * The pointer is not null.\n //! * The pointer is not dangling (it does not point to memory which has been\n //!   freed).\n //! * The pointer satisfies [LLVM's pointer aliasing rules].\n //!\n-//! [dereference raw pointers]: https://doc.rust-lang.org/book/second-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n+//! Valid pointers are not necessarily properly aligned. However, except for\n+//! [`read_unaligned`] and [`write_unaligned`], most functions require their\n+//! arguments to be aligned. Any alignment requirements will be explicitly\n+//! stated in the function's documentation.\n+//!\n //! [LLVM's pointer aliasing rules]: https://llvm.org/docs/LangRef.html#pointer-aliasing-rules\n+//! [`read_unaligned`]: ./fn.read_unaligned.html\n+//! [`write_unaligned`]: ./fn.write_unaligned.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -667,6 +672,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// // Accessing unaligned values directly is safe.\n /// assert!(x.unaligned == v);\n+/// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {"}]}