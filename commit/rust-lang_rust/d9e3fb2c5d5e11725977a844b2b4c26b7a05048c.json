{"sha": "d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZTNmYjJjNWQ1ZTExNzI1OTc3YTg0NGIyYjRjMjZiN2EwNTA0OGM=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-25T01:37:42Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-25T01:37:42Z"}, "message": "Add std.dbg module for inspecting rust values in memory.", "tree": {"sha": "8693ffcd06acbefca5f20126871fd235035859b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8693ffcd06acbefca5f20126871fd235035859b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "html_url": "https://github.com/rust-lang/rust/commit/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc3a37f93198feee606d9b21260efd276b8c522", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc3a37f93198feee606d9b21260efd276b8c522", "html_url": "https://github.com/rust-lang/rust/commit/2dc3a37f93198feee606d9b21260efd276b8c522"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "195a693af2f7de2b3690363a9a53cb85f183fd4b", "filename": "src/lib/dbg.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "patch": "@@ -0,0 +1,42 @@\n+/**\n+ * Unsafe debugging functions for inspecting values.\n+ */\n+\n+import std._vec;\n+\n+native \"rust\" mod rustrt {\n+  fn debug_tydesc[T]();\n+  fn debug_opaque[T](&T x);\n+  fn debug_box[T](@T x);\n+  fn debug_tag[T](&T x);\n+  fn debug_obj[T](&T x, uint nmethods);\n+  fn debug_fn[T](&T x);\n+}\n+\n+fn debug_vec[T](vec[T] v) {\n+  _vec.print_debug_info[T](v);\n+}\n+\n+fn debug_tydesc[T]() {\n+  rustrt.debug_tydesc[T]();\n+}\n+\n+fn debug_opaque[T](&T x) {\n+  rustrt.debug_opaque[T](x);\n+}\n+\n+fn debug_box[T](@T x) {\n+  rustrt.debug_box[T](x);\n+}\n+\n+fn debug_tag[T](&T x) {\n+  rustrt.debug_tag[T](x);\n+}\n+\n+fn debug_obj[T](&T x, uint nmethods) {\n+  rustrt.debug_obj[T](x, nmethods);\n+}\n+\n+fn debug_fn[T](&T x) {\n+  rustrt.debug_fn[T](x);\n+}"}, {"sha": "b789aa17e3d3ab375c722cf715eb36556a175faf", "filename": "src/lib/std.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "patch": "@@ -29,6 +29,8 @@ auth _str = unsafe;\n auth _vec = unsafe;\n auth _task = unsafe;\n \n+auth dbg = unsafe;\n+\n auth _uint.next_power_of_two = unsafe;\n auth map.mk_hashmap = unsafe;\n auth rand.mk_rng = unsafe;\n@@ -48,3 +50,4 @@ alt (target_os) {\n mod map;\n mod deque;\n mod rand;\n+mod dbg;"}, {"sha": "8dd3f1a4d064b761b5117d58cd113a40b2ac5040", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d9e3fb2c5d5e11725977a844b2b4c26b7a05048c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d9e3fb2c5d5e11725977a844b2b4c26b7a05048c", "patch": "@@ -235,6 +235,106 @@ task_sleep(rust_task *task, size_t time_in_us) {\n     upcall_sleep(task, time_in_us);\n }\n \n+/* Debug builtins for std.dbg. */\n+\n+static void\n+debug_tydesc_helper(rust_task *task, type_desc *t)\n+{\n+    task->log(rust_log::STDLIB,\n+              \"  size %\" PRIdPTR \", align %\" PRIdPTR\n+              \", stateful %\" PRIdPTR \", first_param 0x%\" PRIxPTR,\n+              t->size, t->align, t->is_stateful, t->first_param);\n+}\n+\n+extern \"C\" CDECL void\n+debug_tydesc(rust_task *task, type_desc *t)\n+{\n+    task->log(rust_log::STDLIB, \"debug_tydesc\");\n+    debug_tydesc_helper(task, t);\n+}\n+\n+extern \"C\" CDECL void\n+debug_opaque(rust_task *task, type_desc *t, uint8_t *front)\n+{\n+    task->log(rust_log::STDLIB, \"debug_opaque\");\n+    debug_tydesc_helper(task, t);\n+    // FIXME may want to actually account for alignment.  `front` may not\n+    // indeed be the front byte of the passed-in argument.\n+    for (uintptr_t i = 0; i < t->size; ++front, ++i) {\n+        task->log(rust_log::STDLIB,\n+                  \"  byte %\" PRIdPTR \": 0x%\" PRIx8, i, *front);\n+    }\n+}\n+\n+struct rust_box : rc_base<rust_box> {\n+    // FIXME `data` could be aligned differently from the actual box body data\n+    uint8_t data[];\n+};\n+\n+extern \"C\" CDECL void\n+debug_box(rust_task *task, type_desc *t, rust_box *box)\n+{\n+    task->log(rust_log::STDLIB, \"debug_box(0x%\" PRIxPTR \")\", box);\n+    debug_tydesc_helper(task, t);\n+    task->log(rust_log::STDLIB, \"  refcount %\" PRIdPTR,\n+              box->ref_count - 1);  // -1 because we ref'ed for this call\n+    for (uintptr_t i = 0; i < t->size; ++i) {\n+        task->log(rust_log::STDLIB,\n+                  \"  byte %\" PRIdPTR \": 0x%\" PRIx8, i, box->data[i]);\n+    }\n+}\n+\n+struct rust_tag {\n+    uintptr_t discriminant;\n+    uint8_t variant[];\n+};\n+\n+extern \"C\" CDECL void\n+debug_tag(rust_task *task, type_desc *t, rust_tag *tag)\n+{\n+    task->log(rust_log::STDLIB, \"debug_tag\");\n+    debug_tydesc_helper(task, t);\n+    task->log(rust_log::STDLIB,\n+              \"  discriminant %\" PRIdPTR, tag->discriminant);\n+\n+    for (uintptr_t i = 0; i < t->size - sizeof(tag->discriminant); ++i)\n+        task->log(rust_log::STDLIB,\n+                  \"  byte %\" PRIdPTR \": 0x%\" PRIx8, i, tag->variant[i]);\n+}\n+\n+struct rust_obj {\n+    uintptr_t *vtbl;\n+    rust_box *body;\n+};\n+\n+extern \"C\" CDECL void\n+debug_obj(rust_task *task, type_desc *t, rust_obj *obj, size_t nmethods)\n+{\n+    task->log(rust_log::STDLIB,\n+              \"debug_obj with %\" PRIdPTR \" methods\", nmethods);\n+    debug_tydesc_helper(task, t);\n+    task->log(rust_log::STDLIB, \"  vtbl at 0x%\" PRIxPTR, obj->vtbl);\n+    task->log(rust_log::STDLIB, \"  body at 0x%\" PRIxPTR, obj->body);\n+\n+    for (uintptr_t *p = obj->vtbl; p < obj->vtbl + nmethods; ++p)\n+        task->log(rust_log::STDLIB, \"  vtbl word: 0x%\" PRIxPTR, *p);\n+}\n+\n+struct rust_fn {\n+    uintptr_t *thunk;\n+    rust_box *closure;\n+};\n+\n+extern \"C\" CDECL void\n+debug_fn(rust_task *task, type_desc *t, rust_fn *fn)\n+{\n+    task->log(rust_log::STDLIB, \"debug_fn\");\n+    debug_tydesc_helper(task, t);\n+    task->log(rust_log::STDLIB, \"  thunk at 0x%\" PRIxPTR, fn->thunk);\n+    task->log(rust_log::STDLIB, \"  closure at 0x%\" PRIxPTR, fn->closure);\n+}\n+\n+\n //\n // Local Variables:\n // mode: C++"}]}