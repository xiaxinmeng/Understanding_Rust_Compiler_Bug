{"sha": "86e2fcbf314f869670bf0f91836275987f61f686", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTJmY2JmMzE0Zjg2OTY3MGJmMGY5MTgzNjI3NTk4N2Y2MWY2ODY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-11T22:31:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-19T01:53:22Z"}, "message": "Don't include quite so much detail about the implementation", "tree": {"sha": "19a6e1ff002158f2e987538294078a4beb60160b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a6e1ff002158f2e987538294078a4beb60160b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e2fcbf314f869670bf0f91836275987f61f686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e2fcbf314f869670bf0f91836275987f61f686", "html_url": "https://github.com/rust-lang/rust/commit/86e2fcbf314f869670bf0f91836275987f61f686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e2fcbf314f869670bf0f91836275987f61f686/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c72f65d600aa1e76c0948ceb07cac9cf175e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c72f65d600aa1e76c0948ceb07cac9cf175e5e", "html_url": "https://github.com/rust-lang/rust/commit/44c72f65d600aa1e76c0948ceb07cac9cf175e5e"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "0ca280221787bb20ff81bb846e57beea9663d3f0", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/86e2fcbf314f869670bf0f91836275987f61f686/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/86e2fcbf314f869670bf0f91836275987f61f686/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=86e2fcbf314f869670bf0f91836275987f61f686", "patch": "@@ -25,7 +25,7 @@ pub struct Bar;\n ```\n \n Unlike normal Markdown, `[bar][Bar]` syntax is also supported without needing a\n-`[Bar]: ...` reference link, and links are case-sensitive.\n+`[Bar]: ...` reference link.\n \n Backticks around the link will be stripped, so ``[`Option`]`` will correctly\n link to `Option`.\n@@ -34,17 +34,8 @@ link to `Option`.\n \n You can refer to anything in scope, and use paths, including `Self`, `self`, `super`, and\n `crate`. Associated items (functions, types, and constants) are supported, but [not for blanket\n-trait implementations][#79682]. Rustdoc also supports linking to the following primitives, which\n-have no path and cannot be imported:\n-\n-- [`slice`](../std/primitive.slice.html)\n-- [`array`](../std/primitive.array.html)\n-- [`tuple`](../std/primitive.tuple.html)\n-- [`unit`](../std/primitive.unit.html)\n-- [`fn`](../std/primitive.fn.html)\n-- [`pointer`](../std/primitive.pointer.html), `*`, `*const`, or `*mut`\n-- [`reference`](../std/primitive.reference.html), `&`, or `&mut`\n-- [`never`](../std/primitive.never.html) or `!`\n+trait implementations][#79682]. Rustdoc also supports linking to all primitives listed in\n+[the standard library documentation](../std/index.html#primitives).\n \n [#79682]: https://github.com/rust-lang/rust/pull/79682\n \n@@ -84,7 +75,7 @@ struct MySpecialFormatter;\n \n Paths in Rust have three namespaces: type, value, and macro. Item names must be unique within\n their namespace, but can overlap with items in other namespaces. In case of ambiguity,\n-rustdoc will warn about the ambiguity and ask you to disambiguate.\n+rustdoc will warn about the ambiguity and suggest a disambiguator.\n \n ```rust\n /// See also: [`Foo`](struct@Foo)\n@@ -96,24 +87,8 @@ struct Foo {}\n fn Foo() {}\n ```\n \n-The following prefixes can be used:\n-\n-- `struct@`\n-- `enum@`\n-- `type@`\n-- `trait@`\n-- `union@`\n-- `const@`\n-- `static@`\n-- `value@`\n-- `fn@` / `function@` / `method@`\n-- `mod@` / `module@`\n-- `prim@` / `primitive@`\n-- `macro@`\n-- `derive@`\n-\n-These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]`\n-will be rendered as `Foo`.\n+These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]` will be\n+rendered as `Foo`.\n \n You can also disambiguate for functions by adding `()` after the function name,\n or for macros by adding `!` after the macro name:\n@@ -134,6 +109,15 @@ Links are resolved in the scope of the module where the item is defined, even\n when the item is re-exported. If a link from another crate fails to resolve, no\n warning is given.\n \n+```rust\n+mod inner {\n+    /// Link to [f()]\n+    pub struct S;\n+    pub fn f() {}\n+}\n+pub use inner::S; // the link to `f` will still resolve correctly\n+```\n+\n When re-exporting an item, rustdoc allows adding additional documentation to it.\n That additional documentation will be resolved in the scope of the re-export, not\n the original, allowing you to link to items in the new crate. The new links\n@@ -154,8 +138,6 @@ module it is defined in.\n \n If links do not look 'sufficiently like' an intra-doc link, they will be ignored and no warning\n will be given, even if the link fails to resolve. For example, any link containing `/` or `[]`\n-characters will be ignored. You can see the full criteria for 'sufficiently like' in [the source\n-code].\n+characters will be ignored.\n \n [#72243]: https://github.com/rust-lang/rust/issues/72243\n-[the source code]: https://github.com/rust-lang/rust/blob/34628e5b533d35840b61c5db0665cf7633ed3c5a/src/librustdoc/passes/collect_intra_doc_links.rs#L982"}]}