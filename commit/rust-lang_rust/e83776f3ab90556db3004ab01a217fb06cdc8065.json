{"sha": "e83776f3ab90556db3004ab01a217fb06cdc8065", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Mzc3NmYzYWI5MDU1NmRiMzAwNGFiMDFhMjE3ZmIwNmNkYzgwNjU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-29T12:41:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T12:41:05Z"}, "message": "Rollup merge of #61217 - estebank:issue-52820, r=Centril\n\nAccount for short-hand init structs when suggesting conversion\n\nFix #52820.", "tree": {"sha": "60befed3420fb0d05842fc623a365307a449b666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60befed3420fb0d05842fc623a365307a449b666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83776f3ab90556db3004ab01a217fb06cdc8065", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7n3hCRBK7hj4Ov3rIwAAdHIIAG3nSSzUaZts3SDpOhhXtTYe\ndUzbEIM/1qPlqB9WtEdqD07GLOAzrnUZ4quWtwBPRtaFIpL2PIAuiCyqJBM130Kv\ndcY7qyajvFFv5EMJQ8FsPcZfeaOmPxOIT2MB9ZkwXjAQ8XaVCRy/ABGeloxp4q0M\nR8FgE9ynFBZzULXfb2M8zghEj6PTkw/AF2bVBplNXYc8N1lZHsAwRWe9WAMrqUHh\nYtFnKNIUQ0d2JvVamt2xggYZ7u0c5l7S+kjlUYGgGiPy1RAHTuIDYa0PKX52KjOD\ngZ6InOZrV08C+zRUBxOyXdHZt+Fy88tWF2fvs4MfArY/vlJ06xiNLDHZ/S06aoU=\n=P0T5\n-----END PGP SIGNATURE-----\n", "payload": "tree 60befed3420fb0d05842fc623a365307a449b666\nparent e84c9f37994e78c1df180f95683e047bc5223f5c\nparent 24b2e20b3127b5a8da20c4910080bf9756dd2a45\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1559133665 +0200\ncommitter GitHub <noreply@github.com> 1559133665 +0200\n\nRollup merge of #61217 - estebank:issue-52820, r=Centril\n\nAccount for short-hand init structs when suggesting conversion\n\nFix #52820.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83776f3ab90556db3004ab01a217fb06cdc8065", "html_url": "https://github.com/rust-lang/rust/commit/e83776f3ab90556db3004ab01a217fb06cdc8065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83776f3ab90556db3004ab01a217fb06cdc8065/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84c9f37994e78c1df180f95683e047bc5223f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84c9f37994e78c1df180f95683e047bc5223f5c", "html_url": "https://github.com/rust-lang/rust/commit/e84c9f37994e78c1df180f95683e047bc5223f5c"}, {"sha": "24b2e20b3127b5a8da20c4910080bf9756dd2a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b2e20b3127b5a8da20c4910080bf9756dd2a45", "html_url": "https://github.com/rust-lang/rust/commit/24b2e20b3127b5a8da20c4910080bf9756dd2a45"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "c3ea9ff40a84341b6dafd36ee91dd44a58b157a8", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e83776f3ab90556db3004ab01a217fb06cdc8065", "patch": "@@ -270,7 +270,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    fn is_hir_id_from_struct_pattern_shorthand_field(&self, hir_id: hir::HirId, sp: Span) -> bool {\n+    crate fn is_hir_id_from_struct_pattern_shorthand_field(\n+        &self,\n+        hir_id: hir::HirId,\n+        sp: Span,\n+    ) -> bool {\n         let cm = self.sess().source_map();\n         let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n         if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {"}, {"sha": "c5b85d52566d3ea2a767e468fcaef4c5cf2b6b0f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e83776f3ab90556db3004ab01a217fb06cdc8065", "patch": "@@ -5010,6 +5010,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n         } else if !self.check_for_cast(err, expr, found, expected) {\n+            let is_struct_pat_shorthand_field = self.is_hir_id_from_struct_pattern_shorthand_field(\n+                expr.hir_id,\n+                expr.span,\n+            );\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n                 let mut suggestions = iter::repeat(&expr_text).zip(methods.iter())\n@@ -5019,14 +5023,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             None  // do not suggest code that is already there (#53348)\n                         } else {\n                             let method_call_list = [\".to_vec()\", \".to_string()\"];\n-                            if receiver.ends_with(\".clone()\")\n+                            let sugg = if receiver.ends_with(\".clone()\")\n                                     && method_call_list.contains(&method_call.as_str()) {\n                                 let max_len = receiver.rfind(\".\").unwrap();\n-                                Some(format!(\"{}{}\", &receiver[..max_len], method_call))\n-                            }\n-                            else {\n-                                Some(format!(\"{}{}\", receiver, method_call))\n-                            }\n+                                format!(\"{}{}\", &receiver[..max_len], method_call)\n+                            } else {\n+                                format!(\"{}{}\", receiver, method_call)\n+                            };\n+                            Some(if is_struct_pat_shorthand_field {\n+                                format!(\"{}: {}\", receiver, sugg)\n+                            } else {\n+                                sugg\n+                            })\n                         }\n                     }).peekable();\n                 if suggestions.peek().is_some() {"}, {"sha": "075b07f56520398df7cfecad7a7307b126ae19f6", "filename": "src/test/ui/suggestions/issue-52820.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.rs?ref=e83776f3ab90556db3004ab01a217fb06cdc8065", "patch": "@@ -0,0 +1,12 @@\n+struct Bravery {\n+    guts: String,\n+    brains: String,\n+}\n+\n+fn main() {\n+    let guts = \"mettle\";\n+    let _ = Bravery {\n+        guts, //~ ERROR mismatched types\n+        brains: guts.clone(), //~ ERROR mismatched types\n+    };\n+}"}, {"sha": "fb568aca250e773b048c32840f7ae1767c462d59", "filename": "src/test/ui/suggestions/issue-52820.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e83776f3ab90556db3004ab01a217fb06cdc8065/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr?ref=e83776f3ab90556db3004ab01a217fb06cdc8065", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52820.rs:9:9\n+   |\n+LL |         guts,\n+   |         ^^^^\n+   |         |\n+   |         expected struct `std::string::String`, found &str\n+   |         help: try using a conversion method: `guts: guts.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `&str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52820.rs:10:17\n+   |\n+LL |         brains: guts.clone(),\n+   |                 ^^^^^^^^^^^^\n+   |                 |\n+   |                 expected struct `std::string::String`, found &str\n+   |                 help: try using a conversion method: `guts.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `&str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}