{"sha": "8eb7ac561eb42b70bc7db3852c502dd63186a119", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjdhYzU2MWViNDJiNzBiYzdkYjM4NTJjNTAyZGQ2MzE4NmExMTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-28T21:48:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-10T19:40:29Z"}, "message": "Use `def_span` to minimize definition span to first line when possible", "tree": {"sha": "4dfa0c80464c3779a8d3becde0d3c71671afb7b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfa0c80464c3779a8d3becde0d3c71671afb7b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb7ac561eb42b70bc7db3852c502dd63186a119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb7ac561eb42b70bc7db3852c502dd63186a119", "html_url": "https://github.com/rust-lang/rust/commit/8eb7ac561eb42b70bc7db3852c502dd63186a119", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb7ac561eb42b70bc7db3852c502dd63186a119/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c96a0f534366b3970ff0f8cd831be4386961dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c96a0f534366b3970ff0f8cd831be4386961dc", "html_url": "https://github.com/rust-lang/rust/commit/39c96a0f534366b3970ff0f8cd831be4386961dc"}], "stats": {"total": 122, "additions": 45, "deletions": 77}, "files": [{"sha": "411a72447a4f634fb0adc6ef46c3597ef70ea0c6", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -782,7 +782,10 @@ impl<'a> Resolver<'a> {\n             );\n             let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n                 LOCAL_CRATE => self.definitions.opt_span(def_id),\n-                _ => Some(self.cstore().get_span_untracked(def_id, self.session)),\n+                _ => Some(self.session.source_map().def_span(self.cstore().get_span_untracked(\n+                    def_id,\n+                    self.session,\n+                ))),\n             });\n             if let Some(span) = def_span {\n                 err.span_label("}, {"sha": "666cc69f6e967ccfa50e9240a35e2820a194959c", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -7,7 +7,7 @@ LL | #[derive(Eqr)]\n   ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n    |\n LL | pub macro Eq($item:item) { /* compiler built-in */ }\n-   | ---------------------------------------------------- similarly named derive macro `Eq` defined here\n+   | ------------------------ similarly named derive macro `Eq` defined here\n \n error: cannot find derive macro `Eqr` in this scope\n   --> $DIR/deriving-meta-unknown-trait.rs:1:10"}, {"sha": "5bbe6d3b17176e9a168a617a3cc3fb08876fd3db", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -1,19 +1,13 @@\n error[E0573]: expected type, found variant `NoResult`\n   --> $DIR/issue-17546.rs:12:17\n    |\n-LL |       fn new() -> NoResult<MyEnum, String> {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn new() -> NoResult<MyEnum, String> {\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    | \n   ::: $SRC_DIR/libcore/result.rs:LL:COL\n    |\n-LL | / pub enum Result<T, E> {\n-LL | |     /// Contains the success value\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-...  |\n-LL | |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-LL | | }\n-   | |_- similarly named enum `Result` defined here\n+LL | pub enum Result<T, E> {\n+   | --------------------- similarly named enum `Result` defined here\n    |\n help: try using the variant's enum\n    |\n@@ -63,19 +57,13 @@ LL | use std::result::Result;\n error[E0573]: expected type, found variant `NoResult`\n   --> $DIR/issue-17546.rs:33:15\n    |\n-LL |   fn newer() -> NoResult<foo::MyEnum, String> {\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn newer() -> NoResult<foo::MyEnum, String> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | \n   ::: $SRC_DIR/libcore/result.rs:LL:COL\n    |\n-LL | / pub enum Result<T, E> {\n-LL | |     /// Contains the success value\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-...  |\n-LL | |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n-LL | | }\n-   | |_- similarly named enum `Result` defined here\n+LL | pub enum Result<T, E> {\n+   | --------------------- similarly named enum `Result` defined here\n    |\n help: try using the variant's enum\n    |"}, {"sha": "472f8e013a92211b4fa666ab654c84182753c157", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -1,17 +1,13 @@\n error[E0412]: cannot find type `Fo` in this scope\n   --> $DIR/issue-7607-1.rs:5:6\n    |\n-LL |   impl Fo {\n-   |        ^^ help: a trait with a similar name exists: `Fn`\n+LL | impl Fo {\n+   |      ^^ help: a trait with a similar name exists: `Fn`\n    | \n   ::: $SRC_DIR/libcore/ops/function.rs:LL:COL\n    |\n-LL | / pub trait Fn<Args> : FnMut<Args> {\n-LL | |     /// Performs the call operation.\n-LL | |     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-LL | |     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-LL | | }\n-   | |_- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args> : FnMut<Args> {\n+   | -------------------------------- similarly named trait `Fn` defined here\n \n error: aborting due to previous error\n "}, {"sha": "5604341fa34dccb1785affe55befb1cd4df4900b", "filename": "src/test/ui/macros/macro-name-typo.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -1,18 +1,13 @@\n error: cannot find macro `printlx` in this scope\n   --> $DIR/macro-name-typo.rs:2:5\n    |\n-LL |       printlx!(\"oh noes!\");\n-   |       ^^^^^^^ help: a macro with a similar name exists: `println`\n+LL |     printlx!(\"oh noes!\");\n+   |     ^^^^^^^ help: a macro with a similar name exists: `println`\n    | \n   ::: $SRC_DIR/libstd/macros.rs:LL:COL\n    |\n-LL | / macro_rules! println {\n-LL | |     () => ($crate::print!(\"\\n\"));\n-LL | |     ($($arg:tt)*) => ({\n-LL | |         $crate::io::_print($crate::format_args_nl!($($arg)*));\n-LL | |     })\n-LL | | }\n-   | |_- similarly named macro `println` defined here\n+LL | macro_rules! println {\n+   | -------------------- similarly named macro `println` defined here\n \n error: aborting due to previous error\n "}, {"sha": "e26a914e243eef1bf5a72789ab581b827878d093", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -7,7 +7,7 @@ LL |     inline!();\n   ::: $SRC_DIR/libcore/macros.rs:LL:COL\n    |\n LL |     macro_rules! line { () => { /* compiler built-in */ } }\n-   |     ------------------------------------------------------- similarly named macro `line` defined here\n+   |     ----------------- similarly named macro `line` defined here\n \n error: aborting due to previous error\n "}, {"sha": "74fb519cc82ffe6be0ce4a10c582bd89490d9caa", "filename": "src/test/ui/macros/macro-use-wrong-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -7,7 +7,7 @@ LL |     macro_two!();\n   ::: $DIR/auxiliary/two_macros.rs:2:1\n    |\n LL | macro_rules! macro_one { () => (\"one\") }\n-   | ---------------------------------------- similarly named macro `macro_one` defined here\n+   | ---------------------- similarly named macro `macro_one` defined here\n \n error: aborting due to previous error\n "}, {"sha": "61868f4203bb0e7dac334cff88ba1234dff1ed3e", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -1,15 +1,13 @@\n error: cannot find macro `bang_proc_macrp` in this scope\n   --> $DIR/resolve-error.rs:60:5\n    |\n-LL |       bang_proc_macrp!();\n-   |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `bang_proc_macro`\n+LL |     bang_proc_macrp!();\n+   |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `bang_proc_macro`\n    | \n   ::: $DIR/auxiliary/test-macros.rs:15:1\n    |\n-LL | / pub fn empty(_: TokenStream) -> TokenStream {\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_- similarly named macro `bang_proc_macro` defined here\n+LL | pub fn empty(_: TokenStream) -> TokenStream {\n+   | ------------------------------------------- similarly named macro `bang_proc_macro` defined here\n \n error: cannot find macro `Dlona` in this scope\n   --> $DIR/resolve-error.rs:57:5\n@@ -60,15 +58,13 @@ LL | #[derive(Dlona)]\n error: cannot find derive macro `Dlona` in this scope\n   --> $DIR/resolve-error.rs:40:10\n    |\n-LL |   #[derive(Dlona)]\n-   |            ^^^^^ help: a derive macro with a similar name exists: `Clona`\n+LL | #[derive(Dlona)]\n+   |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n    | \n   ::: $DIR/auxiliary/derive-clona.rs:11:1\n    |\n-LL | / pub fn derive_clonea(input: TokenStream) -> TokenStream {\n-LL | |     \"\".parse().unwrap()\n-LL | | }\n-   | |_- similarly named derive macro `Clona` defined here\n+LL | pub fn derive_clonea(input: TokenStream) -> TokenStream {\n+   | ------------------------------------------------------- similarly named derive macro `Clona` defined here\n \n error: cannot find derive macro `Dlone` in this scope\n   --> $DIR/resolve-error.rs:35:10\n@@ -85,7 +81,7 @@ LL | #[derive(Dlone)]\n   ::: $SRC_DIR/libcore/clone.rs:LL:COL\n    |\n LL | pub macro Clone($item:item) { /* compiler built-in */ }\n-   | ------------------------------------------------------- similarly named derive macro `Clone` defined here\n+   | --------------------------- similarly named derive macro `Clone` defined here\n \n error: cannot find attribute `FooWithLongNan` in this scope\n   --> $DIR/resolve-error.rs:32:3\n@@ -96,28 +92,24 @@ LL | #[FooWithLongNan]\n error: cannot find attribute `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:28:3\n    |\n-LL |   #[attr_proc_macra]\n-   |     ^^^^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `attr_proc_macro`\n+LL | #[attr_proc_macra]\n+   |   ^^^^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `attr_proc_macro`\n    | \n   ::: $DIR/auxiliary/test-macros.rs:20:1\n    |\n-LL | / pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_- similarly named attribute macro `attr_proc_macro` defined here\n+LL | pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n+   | ---------------------------------------------------------------- similarly named attribute macro `attr_proc_macro` defined here\n \n error: cannot find derive macro `FooWithLongNan` in this scope\n   --> $DIR/resolve-error.rs:22:10\n    |\n-LL |   #[derive(FooWithLongNan)]\n-   |            ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n+LL | #[derive(FooWithLongNan)]\n+   |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n    | \n   ::: $DIR/auxiliary/derive-foo.rs:11:1\n    |\n-LL | / pub fn derive_foo(input: TokenStream) -> TokenStream {\n-LL | |     \"\".parse().unwrap()\n-LL | | }\n-   | |_- similarly named derive macro `FooWithLongName` defined here\n+LL | pub fn derive_foo(input: TokenStream) -> TokenStream {\n+   | ---------------------------------------------------- similarly named derive macro `FooWithLongName` defined here\n \n error: cannot find derive macro `FooWithLongNan` in this scope\n   --> $DIR/resolve-error.rs:22:10"}, {"sha": "a176a19da08a2881949ec26fde4a251c8a39bcb3", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -16,19 +16,13 @@ LL | type A = Baz; // Misspelled type name.\n error[E0412]: cannot find type `Opiton` in this scope\n   --> $DIR/levenshtein.rs:12:10\n    |\n-LL |   type B = Opiton<u8>; // Misspelled type name from the prelude.\n-   |            ^^^^^^ help: an enum with a similar name exists: `Option`\n+LL | type B = Opiton<u8>; // Misspelled type name from the prelude.\n+   |          ^^^^^^ help: an enum with a similar name exists: `Option`\n    | \n   ::: $SRC_DIR/libcore/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-LL | |     None,\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-LL | | }\n-   | |_- similarly named enum `Option` defined here\n+LL | pub enum Option<T> {\n+   | ------------------ similarly named enum `Option` defined here\n \n error[E0412]: cannot find type `Baz` in this scope\n   --> $DIR/levenshtein.rs:16:14"}, {"sha": "952ed26ccc07acc241a4f0acc56ca086d680d792", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7ac561eb42b70bc7db3852c502dd63186a119/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=8eb7ac561eb42b70bc7db3852c502dd63186a119", "patch": "@@ -22,7 +22,7 @@ LL | #[tests]\n   ::: $SRC_DIR/libcore/macros.rs:LL:COL\n    |\n LL |     pub macro test($item:item) { /* compiler built-in */ }\n-   |     ------------------------------------------------------ similarly named attribute macro `test` defined here\n+   |     -------------------------- similarly named attribute macro `test` defined here\n \n error: cannot find attribute `deprcated` in this scope\n   --> $DIR/attribute-typos.rs:1:3"}]}