{"sha": "19d192920b69118619d18ab7dd66faae1f7b61f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDE5MjkyMGI2OTExODYxOWQxOGFiN2RkNjZmYWFlMWY3YjYxZjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-05T18:00:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-05T18:00:55Z"}, "message": "configure: Add options for separate musl roots\n\nThis allows using the `./configure` script to enable rustbuild to compile\nmultiple musl targets at once. We'll hopefully use this soon on our bots to\nproduce a bunch of targets.", "tree": {"sha": "6732526bf772b9e5ff5609796f15085d54fdd2ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6732526bf772b9e5ff5609796f15085d54fdd2ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d192920b69118619d18ab7dd66faae1f7b61f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d192920b69118619d18ab7dd66faae1f7b61f9", "html_url": "https://github.com/rust-lang/rust/commit/19d192920b69118619d18ab7dd66faae1f7b61f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d192920b69118619d18ab7dd66faae1f7b61f9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd1ea1330ed6d20dde29cd9efa1a0a63e6729eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1ea1330ed6d20dde29cd9efa1a0a63e6729eaf", "html_url": "https://github.com/rust-lang/rust/commit/fd1ea1330ed6d20dde29cd9efa1a0a63e6729eaf"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "754fd5deb9ade83d921cc18c26734f7095be0998", "filename": "configure", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19d192920b69118619d18ab7dd66faae1f7b61f9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/19d192920b69118619d18ab7dd66faae1f7b61f9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=19d192920b69118619d18ab7dd66faae1f7b61f9", "patch": "@@ -653,7 +653,12 @@ valopt arm-linux-androideabi-ndk \"\" \"arm-linux-androideabi NDK standalone path\"\n valopt armv7-linux-androideabi-ndk \"\" \"armv7-linux-androideabi NDK standalone path\"\n valopt aarch64-linux-android-ndk \"\" \"aarch64-linux-android NDK standalone path\"\n valopt nacl-cross-path  \"\" \"NaCl SDK path (Pepper Canary is recommended). Must be absolute!\"\n-valopt musl-root \"/usr/local\" \"MUSL root installation directory\"\n+valopt musl-root \"/usr/local\" \"MUSL root installation directory (deprecated)\"\n+valopt musl-root-x86_64 \"/usr/local\" \"x86_64-unknown-linux-musl install directory\"\n+valopt musl-root-i686 \"/usr/local\" \"i686-unknown-linux-musl install directory\"\n+valopt musl-root-arm \"/usr/local\" \"arm-unknown-linux-musleabi install directory\"\n+valopt musl-root-armhf \"/usr/local\" \"arm-unknown-linux-musleabihf install directory\"\n+valopt musl-root-armv7 \"/usr/local\" \"armv7-unknown-linux-musleabihf install directory\"\n valopt extra-filename \"\" \"Additional data that is hashed and passed to the -C extra-filename flag\"\n \n if [ -e ${CFG_SRC_DIR}.git ]\n@@ -1212,14 +1217,6 @@ do\n             fi\n             ;;\n \n-\n-        x86_64-*-musl | arm-*-musleabi)\n-            if [ ! -f $CFG_MUSL_ROOT/lib/libc.a ]\n-            then\n-                err \"musl libc $CFG_MUSL_ROOT/lib/libc.a not found\"\n-            fi\n-            ;;\n-\n         *-msvc)\n             # There are three builds of cmake on windows: MSVC, MinGW and Cygwin\n             # The Cygwin build does not have generators for Visual Studio, so"}, {"sha": "589ee8258ec27b9483464b97a657608e8223d2f1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19d192920b69118619d18ab7dd66faae1f7b61f9/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d192920b69118619d18ab7dd66faae1f7b61f9/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=19d192920b69118619d18ab7dd66faae1f7b61f9", "patch": "@@ -345,6 +345,36 @@ impl Config {\n                 \"CFG_MUSL_ROOT\" if value.len() > 0 => {\n                     self.musl_root = Some(PathBuf::from(value));\n                 }\n+                \"CFG_MUSL_ROOT_X86_64\" if value.len() > 0 => {\n+                    let target = \"x86_64-unknown-linux-musl\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.musl_root = Some(PathBuf::from(value));\n+                }\n+                \"CFG_MUSL_ROOT_I686\" if value.len() > 0 => {\n+                    let target = \"i686-unknown-linux-musl\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.musl_root = Some(PathBuf::from(value));\n+                }\n+                \"CFG_MUSL_ROOT_ARM\" if value.len() > 0 => {\n+                    let target = \"arm-unknown-linux-musleabi\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.musl_root = Some(PathBuf::from(value));\n+                }\n+                \"CFG_MUSL_ROOT_ARMHF\" if value.len() > 0 => {\n+                    let target = \"arm-unknown-linux-musleabihf\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.musl_root = Some(PathBuf::from(value));\n+                }\n+                \"CFG_MUSL_ROOT_ARMV7\" if value.len() > 0 => {\n+                    let target = \"armv7-unknown-linux-musleabihf\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.musl_root = Some(PathBuf::from(value));\n+                }\n                 \"CFG_DEFAULT_AR\" if value.len() > 0 => {\n                     self.rustc_default_ar = Some(value.to_string());\n                 }"}]}