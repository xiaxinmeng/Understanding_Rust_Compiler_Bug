{"sha": "b56b23988de532744fd05301f87c329b612700e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmIyMzk4OGRlNTMyNzQ0ZmQwNTMwMWY4N2MzMjliNjEyNzAwZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-24T10:52:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-24T10:52:12Z"}, "message": "Auto merge of #66393 - ssomers:hash_benches, r=dtolnay\n\nintroduce benchmarks of HashSet operations\n\nTo avoid goofs such as corrected by #66280, I added benchmarks of binary HashSet operations.\n\nDue to the fact x.py keeps recompiling the whole shebang (or at least a big part of it) whenever you touch the test code, and because piling up all tests in one file does not strike me as future proof, I tried moving the hash benches to the separate place they are for liballoc/collections/btree. But it turns out that, in a cleaned checkout, x.py still recompiles the whole shebang whenever you touch the test code (PS or when you add or delete any irrelevant file). So I'm not going to add more tests, and I doubt others will, and these tests have proven their point already, so this PR is kind of pointless", "tree": {"sha": "a984f7a4ce51ccf1633473096635d2e71897ef94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a984f7a4ce51ccf1633473096635d2e71897ef94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56b23988de532744fd05301f87c329b612700e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56b23988de532744fd05301f87c329b612700e3", "html_url": "https://github.com/rust-lang/rust/commit/b56b23988de532744fd05301f87c329b612700e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56b23988de532744fd05301f87c329b612700e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d761fe0462ba0f671a237d0bb35e3579b8ba0e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d761fe0462ba0f671a237d0bb35e3579b8ba0e8", "html_url": "https://github.com/rust-lang/rust/commit/7d761fe0462ba0f671a237d0bb35e3579b8ba0e8"}, {"sha": "4decb58a64fd3d0a0da5cbea4a77327996cbe44a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4decb58a64fd3d0a0da5cbea4a77327996cbe44a", "html_url": "https://github.com/rust-lang/rust/commit/4decb58a64fd3d0a0da5cbea4a77327996cbe44a"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "18502ded308c73f924e04122b327c27d8d7c8129", "filename": "src/liballoc/benches/btree/set.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b56b23988de532744fd05301f87c329b612700e3/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56b23988de532744fd05301f87c329b612700e3/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs?ref=b56b23988de532744fd05301f87c329b612700e3", "patch": "@@ -1,7 +1,7 @@\n use std::collections::BTreeSet;\n \n use rand::{thread_rng, Rng};\n-use test::{black_box, Bencher};\n+use test::Bencher;\n \n fn random(n: usize) -> BTreeSet<usize> {\n     let mut rng = thread_rng();\n@@ -31,7 +31,6 @@ fn pos(n: usize) -> BTreeSet<i32> {\n     set\n }\n \n-\n fn stagger(n1: usize, factor: usize) -> [BTreeSet<u32>; 2] {\n     let n2 = n1 * factor;\n     let mut sets = [BTreeSet::new(), BTreeSet::new()];\n@@ -52,10 +51,7 @@ macro_rules! set_bench {\n             let sets = $sets;\n \n             // measure\n-            b.iter(|| {\n-                let x = sets[0].$set_func(&sets[1]).$result_func();\n-                black_box(x);\n-            })\n+            b.iter(|| sets[0].$set_func(&sets[1]).$result_func())\n         }\n     };\n }"}, {"sha": "25425c5968e25f0ba086130d1c1e5595fe1e488a", "filename": "src/libstd/benches/hash/map.rs", "status": "renamed", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbenches%2Fhash%2Fmap.rs?ref=b56b23988de532744fd05301f87c329b612700e3", "patch": "@@ -1,11 +1,10 @@\n #![cfg(test)]\n \n use test::Bencher;\n+use std::collections::HashMap;\n \n #[bench]\n fn new_drop(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     b.iter(|| {\n         let m: HashMap<i32, i32> = HashMap::new();\n         assert_eq!(m.len(), 0);\n@@ -14,8 +13,6 @@ fn new_drop(b: &mut Bencher) {\n \n #[bench]\n fn new_insert_drop(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     b.iter(|| {\n         let mut m = HashMap::new();\n         m.insert(0, 0);\n@@ -25,8 +22,6 @@ fn new_insert_drop(b: &mut Bencher) {\n \n #[bench]\n fn grow_by_insertion(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     let mut m = HashMap::new();\n \n     for i in 1..1001 {\n@@ -43,8 +38,6 @@ fn grow_by_insertion(b: &mut Bencher) {\n \n #[bench]\n fn find_existing(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     let mut m = HashMap::new();\n \n     for i in 1..1001 {\n@@ -60,8 +53,6 @@ fn find_existing(b: &mut Bencher) {\n \n #[bench]\n fn find_nonexisting(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     let mut m = HashMap::new();\n \n     for i in 1..1001 {\n@@ -77,8 +68,6 @@ fn find_nonexisting(b: &mut Bencher) {\n \n #[bench]\n fn hashmap_as_queue(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     let mut m = HashMap::new();\n \n     for i in 1..1001 {\n@@ -96,8 +85,6 @@ fn hashmap_as_queue(b: &mut Bencher) {\n \n #[bench]\n fn get_remove_insert(b: &mut Bencher) {\n-    use super::map::HashMap;\n-\n     let mut m = HashMap::new();\n \n     for i in 1..1001 {", "previous_filename": "src/libstd/collections/hash/bench.rs"}, {"sha": "42401a21b766d1e588cfe511dbc22b5bcccbcf68", "filename": "src/libstd/benches/hash/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbenches%2Fhash%2Fmod.rs?ref=b56b23988de532744fd05301f87c329b612700e3", "patch": "@@ -0,0 +1,2 @@\n+mod map;\n+mod set_ops;"}, {"sha": "1a4c4a66ee9e0ec8632f16ed152e185f69b64d50", "filename": "src/libstd/benches/hash/set_ops.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Fhash%2Fset_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Fhash%2Fset_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbenches%2Fhash%2Fset_ops.rs?ref=b56b23988de532744fd05301f87c329b612700e3", "patch": "@@ -0,0 +1,42 @@\n+use std::collections::HashSet;\n+use test::Bencher;\n+\n+#[bench]\n+fn set_difference(b: &mut Bencher) {\n+    let small: HashSet<_> = (0..10).collect();\n+    let large: HashSet<_> = (0..100).collect();\n+\n+    b.iter(|| small.difference(&large).count());\n+}\n+\n+#[bench]\n+fn set_is_subset(b: &mut Bencher) {\n+    let small: HashSet<_> = (0..10).collect();\n+    let large: HashSet<_> = (0..100).collect();\n+\n+    b.iter(|| small.is_subset(&large));\n+}\n+\n+#[bench]\n+fn set_intersection(b: &mut Bencher) {\n+    let small: HashSet<_> = (0..10).collect();\n+    let large: HashSet<_> = (0..100).collect();\n+\n+    b.iter(|| small.intersection(&large).count());\n+}\n+\n+#[bench]\n+fn set_symmetric_difference(b: &mut Bencher) {\n+    let small: HashSet<_> = (0..10).collect();\n+    let large: HashSet<_> = (0..100).collect();\n+\n+    b.iter(|| small.symmetric_difference(&large).count());\n+}\n+\n+#[bench]\n+fn set_union(b: &mut Bencher) {\n+    let small: HashSet<_> = (0..10).collect();\n+    let large: HashSet<_> = (0..100).collect();\n+\n+    b.iter(|| small.union(&large).count());\n+}"}, {"sha": "4d1cf7fab7b7b45e609dae8acae7e2f654c8cf08", "filename": "src/libstd/benches/lib.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbenches%2Flib.rs?ref=b56b23988de532744fd05301f87c329b612700e3", "patch": "@@ -0,0 +1,5 @@\n+#![feature(test)]\n+\n+extern crate test;\n+\n+mod hash;"}, {"sha": "348820af54bffabcb2e7c8e32a84dd5b8124a7c5", "filename": "src/libstd/collections/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56b23988de532744fd05301f87c329b612700e3/src%2Flibstd%2Fcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmod.rs?ref=b56b23988de532744fd05301f87c329b612700e3", "patch": "@@ -1,5 +1,4 @@\n //! Unordered containers, implemented as hash-tables\n \n-mod bench;\n pub mod map;\n pub mod set;"}]}