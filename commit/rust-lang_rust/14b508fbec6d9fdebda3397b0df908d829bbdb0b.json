{"sha": "14b508fbec6d9fdebda3397b0df908d829bbdb0b", "node_id": "C_kwDOAAsO6NoAKDE0YjUwOGZiZWM2ZDlmZGViZGEzMzk3YjBkZjkwOGQ4MjliYmRiMGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-12-16T13:51:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-12-16T13:52:35Z"}, "message": "Don't add \"Read more\" link if there is no extra content", "tree": {"sha": "2e653c74053780f3be2234cce3a16acaf476c249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e653c74053780f3be2234cce3a16acaf476c249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b508fbec6d9fdebda3397b0df908d829bbdb0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b508fbec6d9fdebda3397b0df908d829bbdb0b", "html_url": "https://github.com/rust-lang/rust/commit/14b508fbec6d9fdebda3397b0df908d829bbdb0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b508fbec6d9fdebda3397b0df908d829bbdb0b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984eab57f708e62c09b3d708033fe620130b5f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/984eab57f708e62c09b3d708033fe620130b5f39", "html_url": "https://github.com/rust-lang/rust/commit/984eab57f708e62c09b3d708033fe620130b5f39"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "aeaee524fd4532b820f130d04ccb7912ceb68411", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/14b508fbec6d9fdebda3397b0df908d829bbdb0b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b508fbec6d9fdebda3397b0df908d829bbdb0b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=14b508fbec6d9fdebda3397b0df908d829bbdb0b", "patch": "@@ -567,11 +567,12 @@ struct SummaryLine<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n     started: bool,\n     depth: u32,\n+    skipped_tags: u32,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> SummaryLine<'a, I> {\n     fn new(iter: I) -> Self {\n-        SummaryLine { inner: iter, started: false, depth: 0 }\n+        SummaryLine { inner: iter, started: false, depth: 0, skipped_tags: 0 }\n     }\n }\n \n@@ -601,13 +602,15 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n             let is_allowed_tag = match event {\n                 Event::Start(ref c) => {\n                     if is_forbidden_tag(c) {\n+                        self.skipped_tags += 1;\n                         return None;\n                     }\n                     self.depth += 1;\n                     check_if_allowed_tag(c)\n                 }\n                 Event::End(ref c) => {\n                     if is_forbidden_tag(c) {\n+                        self.skipped_tags += 1;\n                         return None;\n                     }\n                     self.depth -= 1;\n@@ -616,6 +619,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n                 }\n                 _ => true,\n             };\n+            if !is_allowed_tag {\n+                self.skipped_tags += 1;\n+            }\n             return if !is_allowed_tag {\n                 if is_start {\n                     Some(Event::Start(Tag::Paragraph))\n@@ -1096,11 +1102,11 @@ impl MarkdownItemInfo<'_> {\n }\n \n impl MarkdownSummaryLine<'_> {\n-    pub(crate) fn into_string(self) -> String {\n+    pub(crate) fn into_string_with_has_more_content(self) -> (String, bool) {\n         let MarkdownSummaryLine(md, links) = self;\n         // This is actually common enough to special-case\n         if md.is_empty() {\n-            return String::new();\n+            return (String::new(), false);\n         }\n \n         let mut replacer = |broken_link: BrokenLink<'_>| {\n@@ -1110,17 +1116,26 @@ impl MarkdownSummaryLine<'_> {\n                 .map(|link| (link.href.as_str().into(), link.new_text.as_str().into()))\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n+        let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer))\n+            .peekable();\n+        let mut summary = SummaryLine::new(p);\n \n         let mut s = String::new();\n \n-        let without_paragraphs = LinkReplacer::new(SummaryLine::new(p), links).filter(|event| {\n+        let without_paragraphs = LinkReplacer::new(&mut summary, links).filter(|event| {\n             !matches!(event, Event::Start(Tag::Paragraph) | Event::End(Tag::Paragraph))\n         });\n \n         html::push_html(&mut s, without_paragraphs);\n \n-        s\n+        let has_more_content =\n+            matches!(summary.inner.peek(), Some(Event::Start(_))) || summary.skipped_tags > 0;\n+\n+        (s, has_more_content)\n+    }\n+\n+    pub(crate) fn into_string(self) -> String {\n+        self.into_string_with_has_more_content().0\n     }\n }\n "}, {"sha": "146e5010e4e42827d7743a3ef2e73ae04d15f354", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14b508fbec6d9fdebda3397b0df908d829bbdb0b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b508fbec6d9fdebda3397b0df908d829bbdb0b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=14b508fbec6d9fdebda3397b0df908d829bbdb0b", "patch": "@@ -467,9 +467,10 @@ fn document_short(\n         return;\n     }\n     if let Some(s) = item.doc_value() {\n-        let mut summary_html = MarkdownSummaryLine(&s, &item.links(cx)).into_string();\n+        let (mut summary_html, has_more_content) =\n+            MarkdownSummaryLine(&s, &item.links(cx)).into_string_with_has_more_content();\n \n-        if s.contains('\\n') {\n+        if has_more_content {\n             let link = format!(r#\" <a{}>Read more</a>\"#, assoc_href_attr(item, link, cx));\n \n             if let Some(idx) = summary_html.rfind(\"</p>\") {"}]}