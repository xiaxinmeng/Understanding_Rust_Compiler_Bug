{"sha": "14038c7df25d38b2f5b6790604374e1a33a01fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MDM4YzdkZjI1ZDM4YjJmNWI2NzkwNjA0Mzc0ZTFhMzNhMDFmZTU=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-14T14:06:18Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-14T14:06:18Z"}, "message": "Remove duplicate asserts, replace eq assert with assert_eq", "tree": {"sha": "44aa25a0d173e3a5eef23d6734e1e0b1d6f950b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44aa25a0d173e3a5eef23d6734e1e0b1d6f950b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14038c7df25d38b2f5b6790604374e1a33a01fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14038c7df25d38b2f5b6790604374e1a33a01fe5", "html_url": "https://github.com/rust-lang/rust/commit/14038c7df25d38b2f5b6790604374e1a33a01fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14038c7df25d38b2f5b6790604374e1a33a01fe5/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddd840f36a3951fb1ef9c7649fab161500c8268", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddd840f36a3951fb1ef9c7649fab161500c8268", "html_url": "https://github.com/rust-lang/rust/commit/6ddd840f36a3951fb1ef9c7649fab161500c8268"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "a2adbdddc40fe323c878a8b8e1b68d4b618cf944", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14038c7df25d38b2f5b6790604374e1a33a01fe5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14038c7df25d38b2f5b6790604374e1a33a01fe5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=14038c7df25d38b2f5b6790604374e1a33a01fe5", "patch": "@@ -427,7 +427,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n             ExprKind::Index { .. } | ExprKind::Deref { .. } | ExprKind::Field { .. } => {\n-                debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n+                debug_assert_eq!(Category::of(&expr.kind), Some(Category::Place));\n \n                 // Create a \"fake\" temporary variable so that we check that the\n                 // value is Sized. Usually, this is caught in type checking, but\n@@ -436,8 +436,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.local_decls.push(LocalDecl::new(expr.ty, expr.span));\n                 }\n \n-                debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n-\n                 let place = unpack!(block = this.as_place(block, expr));\n                 let rvalue = Rvalue::Use(this.consume_by_copy_or_move(place));\n                 this.cfg.push_assign(block, source_info, destination, rvalue);"}]}