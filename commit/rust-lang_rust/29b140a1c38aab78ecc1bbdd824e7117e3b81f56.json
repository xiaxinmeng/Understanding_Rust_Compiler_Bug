{"sha": "29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjE0MGExYzM4YWFiNzhlY2MxYmJkZDgyNGU3MTE3ZTNiODFmNTY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-05T18:30:42Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T20:17:18Z"}, "message": "Use `TypeVisitor::BreakTy` in `HasTypeFlagsVisitor`", "tree": {"sha": "268107541e9c344c9ad863a8a250eb0dc5c0b916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/268107541e9c344c9ad863a8a250eb0dc5c0b916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "html_url": "https://github.com/rust-lang/rust/commit/29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b140a1c38aab78ecc1bbdd824e7117e3b81f56/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23feec397713918c7cd960d52348d088a32837a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/23feec397713918c7cd960d52348d088a32837a5", "html_url": "https://github.com/rust-lang/rust/commit/23feec397713918c7cd960d52348d088a32837a5"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "027d43d186a65dd32e38d1a268d8f96063ef4fd4", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29b140a1c38aab78ecc1bbdd824e7117e3b81f56/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b140a1c38aab78ecc1bbdd824e7117e3b81f56/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=29b140a1c38aab78ecc1bbdd824e7117e3b81f56", "patch": "@@ -73,7 +73,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags }).is_break()\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n@@ -901,32 +901,49 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+struct FoundFlags;\n+\n // FIXME: Optimize for checking for infer flags\n struct HasTypeFlagsVisitor {\n     flags: ty::TypeFlags,\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+    type BreakTy = FoundFlags;\n+\n     fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n             t,\n             t.flags(),\n             self.flags\n         );\n-        if t.flags().intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+        if t.flags().intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = r.type_flags();\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n-        if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n-        if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -935,7 +952,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n             predicate, predicate.inner.flags, self.flags\n         );\n         if predicate.inner.flags.intersects(self.flags) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(FoundFlags)\n         } else {\n             ControlFlow::CONTINUE\n         }"}]}