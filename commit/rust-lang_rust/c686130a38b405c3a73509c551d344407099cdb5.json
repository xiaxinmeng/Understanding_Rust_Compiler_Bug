{"sha": "c686130a38b405c3a73509c551d344407099cdb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ODYxMzBhMzhiNDA1YzNhNzM1MDljNTUxZDM0NDQwNzA5OWNkYjU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-06-21T11:36:04Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-06-21T11:46:27Z"}, "message": "Fix nits", "tree": {"sha": "b8127f5e52838f6fe2ddf5feea40607bb021c5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8127f5e52838f6fe2ddf5feea40607bb021c5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c686130a38b405c3a73509c551d344407099cdb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c686130a38b405c3a73509c551d344407099cdb5", "html_url": "https://github.com/rust-lang/rust/commit/c686130a38b405c3a73509c551d344407099cdb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c686130a38b405c3a73509c551d344407099cdb5/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "164ed087abe2c0e99270326b7fd6f3c93548903f", "url": "https://api.github.com/repos/rust-lang/rust/commits/164ed087abe2c0e99270326b7fd6f3c93548903f", "html_url": "https://github.com/rust-lang/rust/commit/164ed087abe2c0e99270326b7fd6f3c93548903f"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "b5dbaaa2327ce32501e96cb9563c81373e2c05d2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c686130a38b405c3a73509c551d344407099cdb5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c686130a38b405c3a73509c551d344407099cdb5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c686130a38b405c3a73509c551d344407099cdb5", "patch": "@@ -59,7 +59,7 @@ impl MirPass for ConstProp {\n \n         trace!(\"ConstProp starting for {:?}\", source.def_id());\n \n-        // steal some data we need from `body`\n+        // Steal some data we need from `body`.\n         let source_scope_local_data = std::mem::replace(\n             &mut body.source_scope_local_data,\n             ClearCrossCrate::Clear\n@@ -188,31 +188,49 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn release_stolen_data(self) ->\n-        (ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n-         IndexVec<Promoted, Body<'tcx>>)\n-    {\n+    fn release_stolen_data(\n+        self,\n+    ) -> (\n+        ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n+        IndexVec<Promoted, Body<'tcx>>,\n+    ) {\n         (self.source_scope_local_data, self.promoted)\n     }\n \n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n         let l = &self.ecx.frame().locals[local];\n-        if l.value == LocalValue::Uninitialized || l.value == LocalValue::Dead {\n+\n+        // If the local is `Unitialized` or `Dead` then we haven't propagated a value into it.\n+        //\n+        // `InterpretCx::access_local()` mostly takes care of this for us however, for ZSTs,\n+        // it will synthesize a value for us. In doing so, that will cause the\n+        // `get_const(l).is_empty()` assert right before we call `set_const()` in `visit_statement`\n+        // to fail.\n+        if let LocalValue::Uninitialized | LocalValue::Dead = l.value {\n             return None;\n         }\n \n         self.ecx.access_local(self.ecx.frame(), local, None).ok()\n     }\n \n-    fn set_const(&mut self, local: Local, c: Option<Const<'tcx>>) {\n-        self.ecx.frame_mut().locals[local] =\n-            match c {\n-                Some(op_ty) => LocalState {\n-                    value: LocalValue::Live(*op_ty),\n-                    layout: Cell::new(Some(op_ty.layout)),\n-                },\n-                None => LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) },\n-            };\n+    fn set_const(&mut self, local: Local, c: Const<'tcx>) {\n+        let frame = self.ecx.frame_mut();\n+\n+        if let Some(layout) = frame.locals[local].layout.get() {\n+            debug_assert_eq!(c.layout, layout);\n+        }\n+\n+        frame.locals[local] = LocalState {\n+            value: LocalValue::Live(*c),\n+            layout: Cell::new(Some(c.layout)),\n+        };\n+    }\n+\n+    fn remove_const(&mut self, local: Local) {\n+        self.ecx.frame_mut().locals[local] = LocalState {\n+            value: LocalValue::Uninitialized,\n+            layout: Cell::new(None),\n+        };\n     }\n \n     fn use_ecx<F, T>(\n@@ -768,7 +786,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         if self.can_const_prop[local] {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n                             assert!(self.get_const(local).is_none());\n-                            self.set_const(local, Some(value));\n+                            self.set_const(local, value);\n \n                             if self.should_const_prop() {\n                                 self.replace_with_const(\n@@ -808,7 +826,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                                     place = &proj.base;\n                                 }\n                                 if let Place::Base(PlaceBase::Local(local)) = *place {\n-                                    self.set_const(local, None);\n+                                    self.remove_const(local);\n                                 }\n                             },\n                             Operand::Constant(_) => {}"}]}