{"sha": "dbf11b16da95d72e220ff11f57bd97ece3611361", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjExYjE2ZGE5NWQ3MmUyMjBmZjExZjU3YmQ5N2VjZTM2MTEzNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T12:13:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T12:13:42Z"}, "message": "typo", "tree": {"sha": "1e9f0ac2d9428d78492c4bd1173bcfe8458ae58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e9f0ac2d9428d78492c4bd1173bcfe8458ae58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf11b16da95d72e220ff11f57bd97ece3611361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf11b16da95d72e220ff11f57bd97ece3611361", "html_url": "https://github.com/rust-lang/rust/commit/dbf11b16da95d72e220ff11f57bd97ece3611361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf11b16da95d72e220ff11f57bd97ece3611361/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1171dc74e0b8c06289d4cd628cc67368820cbbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1171dc74e0b8c06289d4cd628cc67368820cbbec", "html_url": "https://github.com/rust-lang/rust/commit/1171dc74e0b8c06289d4cd628cc67368820cbbec"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "7e480bd34cbdf8290c88c35537282f561e54b7e1", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbf11b16da95d72e220ff11f57bd97ece3611361/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf11b16da95d72e220ff11f57bd97ece3611361/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=dbf11b16da95d72e220ff11f57bd97ece3611361", "patch": "@@ -101,8 +101,8 @@ impl Definition {\n /// scope. That is, that, by just looking at the syntactical category, we can\n /// unambiguously define the semantic category.\n ///\n-/// Sadly, that's not 100% true, there are special cases. To make sure that call\n-/// the code handles all the special cases correctly via exhaustive matching, we\n+/// Sadly, that's not 100% true, there are special cases. To make sure that\n+/// callers handle all the special cases correctly via exhaustive matching, we\n /// add a [`NameClass`] enum which lists all of them!\n ///\n /// A model special case is `None` constant in pattern."}]}