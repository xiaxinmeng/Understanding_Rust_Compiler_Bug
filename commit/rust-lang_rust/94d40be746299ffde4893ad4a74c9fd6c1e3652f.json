{"sha": "94d40be746299ffde4893ad4a74c9fd6c1e3652f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDQwYmU3NDYyOTlmZmRlNDg5M2FkNGE3NGM5ZmQ2YzFlMzY1MmY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T15:51:25Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T16:30:36Z"}, "message": "Prevent typenames in param bounds from resolving to their own param\n\nI.e. fn foo<T: seq<T>>(...). This leads to weird circularities that seem to\nnever make any sense, so it seems prudent to forbid it.\n\nIssue #1227", "tree": {"sha": "31905d9e237b39367f9720c8079196c1ae67ab34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31905d9e237b39367f9720c8079196c1ae67ab34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d40be746299ffde4893ad4a74c9fd6c1e3652f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d40be746299ffde4893ad4a74c9fd6c1e3652f", "html_url": "https://github.com/rust-lang/rust/commit/94d40be746299ffde4893ad4a74c9fd6c1e3652f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d40be746299ffde4893ad4a74c9fd6c1e3652f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f6608ffdeb823c2299d5166a19b9557eb30da1", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f6608ffdeb823c2299d5166a19b9557eb30da1", "html_url": "https://github.com/rust-lang/rust/commit/42f6608ffdeb823c2299d5166a19b9557eb30da1"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "29d29a32fba3472984510e73b100e9197f656ca9", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/94d40be746299ffde4893ad4a74c9fd6c1e3652f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d40be746299ffde4893ad4a74c9fd6c1e3652f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=94d40be746299ffde4893ad4a74c9fd6c1e3652f", "patch": "@@ -142,6 +142,7 @@ type env =\n                     mutable data: [ast::node_id]},\n      mutable reported: [{ident: str, sc: scope}],\n      mutable ignored_imports: [node_id],\n+     mutable current_tp: option::t<uint>,\n      sess: session};\n \n \n@@ -168,6 +169,7 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n           used_imports: {mutable track: false, mutable data:  []},\n           mutable reported: [],\n           mutable ignored_imports: [],\n+          mutable current_tp: none,\n           sess: sess};\n     map_crate(e, crate);\n     resolve_imports(*e);\n@@ -336,6 +338,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           visit_pat: bind walk_pat(e, _, _, _),\n           visit_expr: bind walk_expr(e, _, _, _),\n           visit_ty: bind walk_ty(e, _, _, _),\n+          visit_ty_params: bind walk_tps(e, _, _, _),\n           visit_constr: bind walk_constr(e, _, _, _, _, _),\n           visit_fn: bind visit_fn_with_scope(e, _, _, _, _, _, _, _)\n           with *visit::default_visitor()};\n@@ -369,6 +372,20 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           _ { }\n         }\n     }\n+    fn walk_tps(e: @env, tps: [ast::ty_param], sc: scopes, v: vt<scopes>) {\n+        let outer_current_tp = e.current_tp, current = 0u;\n+        for tp in tps {\n+            e.current_tp = some(current);\n+            for bound in *tp.bounds {\n+                alt bound {\n+                  bound_iface(t) { v.visit_ty(t, sc, v); }\n+                  _ {}\n+                }\n+            }\n+            current += 1u;\n+        }\n+        e.current_tp = outer_current_tp;\n+    }\n     fn walk_constr(e: @env, p: @ast::path, sp: span, id: node_id, sc: scopes,\n                    _v: vt<scopes>) {\n         maybe_insert(e, id, lookup_path_strict(*e, sc, sp, p.node, ns_value));\n@@ -806,14 +823,14 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n           scope_item(it) {\n             alt it.node {\n               ast::item_obj(ob, ty_params, _) {\n-                ret lookup_in_obj(name, ob, ty_params, ns, it.id);\n+                ret lookup_in_obj(e, name, ob, ty_params, ns, it.id);\n               }\n-              ast::item_impl(ty_params, _, _, _) {\n-                if ns == ns_type { ret lookup_in_ty_params(name, ty_params); }\n+              ast::item_impl(tps, _, _, _) {\n+                if ns == ns_type { ret lookup_in_ty_params(e, name, tps); }\n               }\n               ast::item_iface(tps, _) | ast::item_tag(_, tps) |\n               ast::item_ty(_, tps) {\n-                if ns == ns_type { ret lookup_in_ty_params(name, tps); }\n+                if ns == ns_type { ret lookup_in_ty_params(e, name, tps); }\n               }\n               ast::item_mod(_) {\n                 ret lookup_in_local_mod(e, it.id, sp, name, ns, inside);\n@@ -828,19 +845,19 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n             if (name == \"self\" && ns == ns_value) {\n                 ret some(ast::def_self(local_def(id)));\n             } else if ns == ns_type {\n-                ret lookup_in_ty_params(name, tps);\n+                ret lookup_in_ty_params(e, name, tps);\n             }\n           }\n           scope_native_item(it) {\n             alt it.node {\n               ast::native_item_fn(decl, ty_params) {\n-                ret lookup_in_fn(name, decl, ty_params, ns);\n+                ret lookup_in_fn(e, name, decl, ty_params, ns);\n               }\n             }\n           }\n           scope_bare_fn(decl, _, ty_params) |\n           scope_fn_expr(decl, _, ty_params) {\n-            ret lookup_in_fn(name, decl, ty_params, ns);\n+            ret lookup_in_fn(e, name, decl, ty_params, ns);\n           }\n           scope_loop(local) {\n             if ns == ns_value {\n@@ -915,13 +932,13 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n     e.sess.bug(\"reached unreachable code in lookup_in_scope\"); // sigh\n }\n \n-fn lookup_in_ty_params(name: ident, ty_params: [ast::ty_param]) ->\n-   option::t<def> {\n+fn lookup_in_ty_params(e: env, name: ident, ty_params: [ast::ty_param])\n+    -> option::t<def> {\n     let n = 0u;\n     for tp: ast::ty_param in ty_params {\n-        if str::eq(tp.ident, name) {\n-            ret some(ast::def_ty_param(local_def(tp.id), n));\n-        }\n+        if str::eq(tp.ident, name) && alt e.current_tp {\n+            some(cur) { n < cur } none. { true }\n+        } { ret some(ast::def_ty_param(local_def(tp.id), n)); }\n         n += 1u;\n     }\n     ret none::<def>;\n@@ -936,7 +953,8 @@ fn lookup_in_pat(name: ident, pat: @ast::pat) -> option::t<def_id> {\n     ret found;\n }\n \n-fn lookup_in_fn(name: ident, decl: ast::fn_decl, ty_params: [ast::ty_param],\n+fn lookup_in_fn(e: env, name: ident, decl: ast::fn_decl,\n+                ty_params: [ast::ty_param],\n                 ns: namespace) -> option::t<def> {\n     alt ns {\n       ns_value. {\n@@ -947,12 +965,13 @@ fn lookup_in_fn(name: ident, decl: ast::fn_decl, ty_params: [ast::ty_param],\n         }\n         ret none::<def>;\n       }\n-      ns_type. { ret lookup_in_ty_params(name, ty_params); }\n+      ns_type. { ret lookup_in_ty_params(e, name, ty_params); }\n       _ { ret none::<def>; }\n     }\n }\n \n-fn lookup_in_obj(name: ident, ob: ast::_obj, ty_params: [ast::ty_param],\n+fn lookup_in_obj(e: env, name: ident, ob: ast::_obj,\n+                 ty_params: [ast::ty_param],\n                  ns: namespace, id: node_id) -> option::t<def> {\n     alt ns {\n       ns_value. {\n@@ -964,7 +983,7 @@ fn lookup_in_obj(name: ident, ob: ast::_obj, ty_params: [ast::ty_param],\n         }\n         ret none::<def>;\n       }\n-      ns_type. { ret lookup_in_ty_params(name, ty_params); }\n+      ns_type. { ret lookup_in_ty_params(e, name, ty_params); }\n       _ { ret none::<def>; }\n     }\n }"}, {"sha": "2becc452ebc082945484f50fe9d64a528964c8a3", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94d40be746299ffde4893ad4a74c9fd6c1e3652f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d40be746299ffde4893ad4a74c9fd6c1e3652f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=94d40be746299ffde4893ad4a74c9fd6c1e3652f", "patch": "@@ -2748,7 +2748,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span, impl_m: ty::method,\n         let substs = substs + vec::init_fn({|i|\n             ty::mk_param(tcx, i + impl_tps, {crate: 0, node: 0})\n         }, vec::len(*if_m.tps));\n-        let if_fty = ty::substitute_type_params(tcx, substs, \n+        let if_fty = ty::substitute_type_params(tcx, substs,\n                                                 ty::mk_fn(tcx, if_m.fty));\n         alt ty::unify::unify(impl_fty, if_fty, ty::unify::precise, tcx) {\n           ty::unify::ures_err(err) {\n@@ -3064,8 +3064,8 @@ mod dict {\n         visit::visit_expr(ex, fcx, v);\n     }\n \n-    // Detect points where an interface-bounded type parameter is instantiated,\n-    // resolve the impls for the parameters.\n+    // Detect points where an interface-bounded type parameter is\n+    // instantiated, resolve the impls for the parameters.\n     fn resolve_in_block(fcx: @fn_ctxt, bl: ast::blk) {\n         visit::visit_block(bl, fcx, visit::mk_vt(@{\n             visit_expr: resolve_expr,"}]}