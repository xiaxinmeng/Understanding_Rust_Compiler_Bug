{"sha": "6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "node_id": "C_kwDOAAsO6NoAKDZlNGJmMjI3MjQ3YWNiYjYyZTFjOWMwMDBjZjhjZThkOGNiZmRmYzA", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-09-25T16:57:11Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-09-27T13:20:40Z"}, "message": "Make impls of `HasChildSource` and `ChildBySource` for `GenericDefId` not use `GenericParams::new`", "tree": {"sha": "8c0daf973155672f1136fec381d102bc160752ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c0daf973155672f1136fec381d102bc160752ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "html_url": "https://github.com/rust-lang/rust/commit/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4251319fd3acf7b7781275ec77b53cc0efe6140", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4251319fd3acf7b7781275ec77b53cc0efe6140", "html_url": "https://github.com/rust-lang/rust/commit/c4251319fd3acf7b7781275ec77b53cc0efe6140"}], "stats": {"total": 127, "additions": 110, "deletions": 17}, "files": [{"sha": "03a6efdb1bbf0729742756a0c22b3acfc560c0d1", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 110, "deletions": 17, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "patch": "@@ -407,13 +407,71 @@ impl GenericParams {\n     }\n }\n \n+fn file_id_and_params_of(\n+    def: GenericDefId,\n+    db: &dyn DefDatabase,\n+) -> (HirFileId, Option<ast::GenericParamList>) {\n+    match def {\n+        GenericDefId::FunctionId(it) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        GenericDefId::AdtId(AdtId::StructId(it)) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        GenericDefId::AdtId(AdtId::UnionId(it)) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        GenericDefId::AdtId(AdtId::EnumId(it)) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        GenericDefId::TraitId(it) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        GenericDefId::TypeAliasId(it) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        GenericDefId::ImplId(it) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n+        // We won't be using this ID anyway\n+        GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => (FileId(!0).into(), None),\n+    }\n+}\n+\n impl HasChildSource<LocalTypeParamId> for GenericDefId {\n     type Value = Either<ast::TypeParam, ast::Trait>;\n     fn child_source(\n         &self,\n         db: &dyn DefDatabase,\n     ) -> InFile<ArenaMap<LocalTypeParamId, Self::Value>> {\n-        GenericParams::new(db, *self).1.map(|source_maps| source_maps.type_params)\n+        let generic_params = db.generic_params(*self);\n+        let mut idx_iter = generic_params.types.iter().map(|(idx, _)| idx);\n+\n+        let (file_id, generic_params_list) = file_id_and_params_of(*self, db);\n+\n+        let mut params = ArenaMap::default();\n+\n+        // For traits the first type index is `Self`, we need to add it before the other params.\n+        if let GenericDefId::TraitId(id) = *self {\n+            let trait_ref = id.lookup(db).source(db).value.clone();\n+            let idx = idx_iter.next().unwrap();\n+            params.insert(idx, Either::Right(trait_ref))\n+        }\n+\n+        if let Some(generic_params_list) = generic_params_list {\n+            for (idx, ast_param) in idx_iter.zip(generic_params_list.type_params()) {\n+                params.insert(idx, Either::Left(ast_param));\n+            }\n+        }\n+\n+        InFile::new(file_id, params)\n     }\n }\n \n@@ -423,7 +481,20 @@ impl HasChildSource<LocalLifetimeParamId> for GenericDefId {\n         &self,\n         db: &dyn DefDatabase,\n     ) -> InFile<ArenaMap<LocalLifetimeParamId, Self::Value>> {\n-        GenericParams::new(db, *self).1.map(|source_maps| source_maps.lifetime_params)\n+        let generic_params = db.generic_params(*self);\n+        let idx_iter = generic_params.lifetimes.iter().map(|(idx, _)| idx);\n+\n+        let (file_id, generic_params_list) = file_id_and_params_of(*self, db);\n+\n+        let mut params = ArenaMap::default();\n+\n+        if let Some(generic_params_list) = generic_params_list {\n+            for (idx, ast_param) in idx_iter.zip(generic_params_list.lifetime_params()) {\n+                params.insert(idx, ast_param);\n+            }\n+        }\n+\n+        InFile::new(file_id, params)\n     }\n }\n \n@@ -433,28 +504,50 @@ impl HasChildSource<LocalConstParamId> for GenericDefId {\n         &self,\n         db: &dyn DefDatabase,\n     ) -> InFile<ArenaMap<LocalConstParamId, Self::Value>> {\n-        GenericParams::new(db, *self).1.map(|source_maps| source_maps.const_params)\n+        let generic_params = db.generic_params(*self);\n+        let idx_iter = generic_params.consts.iter().map(|(idx, _)| idx);\n+\n+        let (file_id, generic_params_list) = file_id_and_params_of(*self, db);\n+\n+        let mut params = ArenaMap::default();\n+\n+        if let Some(generic_params_list) = generic_params_list {\n+            for (idx, ast_param) in idx_iter.zip(generic_params_list.const_params()) {\n+                params.insert(idx, ast_param);\n+            }\n+        }\n+\n+        InFile::new(file_id, params)\n     }\n }\n \n impl ChildBySource for GenericDefId {\n     fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, _: HirFileId) {\n-        let (_, sm) = GenericParams::new(db, *self);\n+        let generic_params = db.generic_params(*self);\n+        let mut types_idx_iter = generic_params.types.iter().map(|(idx, _)| idx);\n+        let lts_idx_iter = generic_params.lifetimes.iter().map(|(idx, _)| idx);\n+        let consts_idx_iter = generic_params.consts.iter().map(|(idx, _)| idx);\n \n-        let sm = sm.as_ref();\n-        for (local_id, src) in sm.value.type_params.iter() {\n-            let id = TypeParamId { parent: *self, local_id };\n-            if let Either::Left(type_param) = src {\n-                res[keys::TYPE_PARAM].insert(sm.with_value(type_param.clone()), id)\n-            }\n-        }\n-        for (local_id, src) in sm.value.lifetime_params.iter() {\n-            let id = LifetimeParamId { parent: *self, local_id };\n-            res[keys::LIFETIME_PARAM].insert(sm.with_value(src.clone()), id);\n+        let (file_id, generic_params_list) = file_id_and_params_of(*self, db);\n+\n+        // For traits the first type index is `Self`, skip it.\n+        if let GenericDefId::TraitId(_) = *self {\n+            types_idx_iter.next().unwrap(); // advance_by(1);\n         }\n-        for (local_id, src) in sm.value.const_params.iter() {\n-            let id = ConstParamId { parent: *self, local_id };\n-            res[keys::CONST_PARAM].insert(sm.with_value(src.clone()), id);\n+\n+        if let Some(generic_params_list) = generic_params_list {\n+            for (local_id, ast_param) in types_idx_iter.zip(generic_params_list.type_params()) {\n+                let id = TypeParamId { parent: *self, local_id };\n+                res[keys::TYPE_PARAM].insert(InFile::new(file_id, ast_param), id);\n+            }\n+            for (local_id, ast_param) in lts_idx_iter.zip(generic_params_list.lifetime_params()) {\n+                let id = LifetimeParamId { parent: *self, local_id };\n+                res[keys::LIFETIME_PARAM].insert(InFile::new(file_id, ast_param), id);\n+            }\n+            for (local_id, ast_param) in consts_idx_iter.zip(generic_params_list.const_params()) {\n+                let id = ConstParamId { parent: *self, local_id };\n+                res[keys::CONST_PARAM].insert(InFile::new(file_id, ast_param), id);\n+            }\n         }\n     }\n }"}]}