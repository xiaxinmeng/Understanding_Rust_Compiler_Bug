{"sha": "8bc265bdd13330fade56387269027ab846cda187", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzI2NWJkZDEzMzMwZmFkZTU2Mzg3MjY5MDI3YWI4NDZjZGExODc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-14T09:57:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-14T09:57:48Z"}, "message": "Rollup merge of #33555 - soltanmm:ambiguous-nixon, r=nikomatsakis\n\nRemove unification despite ambiguity in projection\n\nTurns out that closures aren't explicitly considered in `project.rs`, so the ambiguity handling w.r.t. closures can just be removed as the change done in `select.rs` covers it.\n\nr? @nikomatsakis", "tree": {"sha": "8effbc9213c58ad17bfcda167a112607e6153149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8effbc9213c58ad17bfcda167a112607e6153149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc265bdd13330fade56387269027ab846cda187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc265bdd13330fade56387269027ab846cda187", "html_url": "https://github.com/rust-lang/rust/commit/8bc265bdd13330fade56387269027ab846cda187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc265bdd13330fade56387269027ab846cda187/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1ce9831cae8e49a0cf61cabda97042d85d911e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1ce9831cae8e49a0cf61cabda97042d85d911e", "html_url": "https://github.com/rust-lang/rust/commit/4a1ce9831cae8e49a0cf61cabda97042d85d911e"}, {"sha": "4e5a2e01cf7fd13dccac12deaf7868f3855e54c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5a2e01cf7fd13dccac12deaf7868f3855e54c5", "html_url": "https://github.com/rust-lang/rust/commit/4e5a2e01cf7fd13dccac12deaf7868f3855e54c5"}], "stats": {"total": 58, "additions": 1, "deletions": 57}, "files": [{"sha": "a67188713c628495f1df27fd1cd4b69244de4afc", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8bc265bdd13330fade56387269027ab846cda187/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc265bdd13330fade56387269027ab846cda187/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=8bc265bdd13330fade56387269027ab846cda187", "patch": "@@ -218,10 +218,7 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n                                             obligation.cause.clone(),\n                                             obligation.recursion_depth) {\n             Some(n) => n,\n-            None => {\n-                consider_unification_despite_ambiguity(selcx, obligation);\n-                return Ok(None);\n-            }\n+            None => return Ok(None),\n         };\n \n     debug!(\"project_and_unify_type: normalized_ty={:?} obligations={:?}\",\n@@ -240,59 +237,6 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n     }\n }\n \n-fn consider_unification_despite_ambiguity<'cx, 'gcx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n-    obligation: &ProjectionObligation<'tcx>)\n-{\n-    debug!(\"consider_unification_despite_ambiguity(obligation={:?})\",\n-           obligation);\n-\n-    let def_id = obligation.predicate.projection_ty.trait_ref.def_id;\n-    match selcx.tcx().lang_items.fn_trait_kind(def_id) {\n-        Some(_) => { }\n-        None => { return; }\n-    }\n-\n-    let infcx = selcx.infcx();\n-    let self_ty = obligation.predicate.projection_ty.trait_ref.self_ty();\n-    let self_ty = infcx.shallow_resolve(self_ty);\n-    debug!(\"consider_unification_despite_ambiguity: self_ty.sty={:?}\",\n-           self_ty.sty);\n-    match self_ty.sty {\n-        ty::TyClosure(closure_def_id, substs) => {\n-            let closure_typer = selcx.closure_typer();\n-            let closure_type = closure_typer.closure_type(closure_def_id, substs);\n-            let ty::Binder((_, ret_type)) =\n-                infcx.tcx.closure_trait_ref_and_return_type(def_id,\n-                                                            self_ty,\n-                                                            &closure_type.sig,\n-                                                            util::TupleArgumentsFlag::No);\n-            // We don't have to normalize the return type here - this is only\n-            // reached for TyClosure: Fn inputs where the closure kind is\n-            // still unknown, which should only occur in typeck where the\n-            // closure type is already normalized.\n-            let (ret_type, _) =\n-                infcx.replace_late_bound_regions_with_fresh_var(\n-                    obligation.cause.span,\n-                    infer::AssocTypeProjection(obligation.predicate.projection_ty.item_name),\n-                    &ty::Binder(ret_type));\n-\n-            debug!(\"consider_unification_despite_ambiguity: ret_type={:?}\",\n-                   ret_type);\n-            let origin = TypeOrigin::RelateOutputImplTypes(obligation.cause.span);\n-            let obligation_ty = obligation.predicate.ty;\n-            match infcx.eq_types(true, origin, obligation_ty, ret_type) {\n-                Ok(InferOk { obligations, .. }) => {\n-                    // FIXME(#32730) propagate obligations\n-                    assert!(obligations.is_empty());\n-                }\n-                Err(_) => { /* ignore errors */ }\n-            }\n-        }\n-        _ => { }\n-    }\n-}\n-\n /// Normalizes any associated type projections in `value`, replacing\n /// them with a fully resolved type where possible. The return value\n /// combines the normalized result and any additional obligations that"}]}