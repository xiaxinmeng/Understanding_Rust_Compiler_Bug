{"sha": "f5723791e910381cebcbdde84575450898074795", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzIzNzkxZTkxMDM4MWNlYmNiZGRlODQ1NzU0NTA4OTgwNzQ3OTU=", "commit": {"author": {"name": "xales", "email": "xales@naveria.com", "date": "2014-01-27T06:18:17Z"}, "committer": {"name": "xales", "email": "xales@naveria.com", "date": "2014-01-27T06:18:17Z"}, "message": "Minor fix to docs.", "tree": {"sha": "c04b5dd107087794466cb6faed654af406da9ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c04b5dd107087794466cb6faed654af406da9ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5723791e910381cebcbdde84575450898074795", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5723791e910381cebcbdde84575450898074795", "html_url": "https://github.com/rust-lang/rust/commit/f5723791e910381cebcbdde84575450898074795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5723791e910381cebcbdde84575450898074795/comments", "author": {"login": "xales", "id": 341605, "node_id": "MDQ6VXNlcjM0MTYwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xales", "html_url": "https://github.com/xales", "followers_url": "https://api.github.com/users/xales/followers", "following_url": "https://api.github.com/users/xales/following{/other_user}", "gists_url": "https://api.github.com/users/xales/gists{/gist_id}", "starred_url": "https://api.github.com/users/xales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xales/subscriptions", "organizations_url": "https://api.github.com/users/xales/orgs", "repos_url": "https://api.github.com/users/xales/repos", "events_url": "https://api.github.com/users/xales/events{/privacy}", "received_events_url": "https://api.github.com/users/xales/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xales", "id": 341605, "node_id": "MDQ6VXNlcjM0MTYwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xales", "html_url": "https://github.com/xales", "followers_url": "https://api.github.com/users/xales/followers", "following_url": "https://api.github.com/users/xales/following{/other_user}", "gists_url": "https://api.github.com/users/xales/gists{/gist_id}", "starred_url": "https://api.github.com/users/xales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xales/subscriptions", "organizations_url": "https://api.github.com/users/xales/orgs", "repos_url": "https://api.github.com/users/xales/repos", "events_url": "https://api.github.com/users/xales/events{/privacy}", "received_events_url": "https://api.github.com/users/xales/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0119e46204d1bc8937b8c3fb10e3f41a7ebb7733", "url": "https://api.github.com/repos/rust-lang/rust/commits/0119e46204d1bc8937b8c3fb10e3f41a7ebb7733", "html_url": "https://github.com/rust-lang/rust/commit/0119e46204d1bc8937b8c3fb10e3f41a7ebb7733"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "fa5a2b23ca878c43fceb5120b2b62ba3f5542ee0", "filename": "doc/guide-runtime.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5723791e910381cebcbdde84575450898074795/doc%2Fguide-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5723791e910381cebcbdde84575450898074795/doc%2Fguide-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-runtime.md?ref=f5723791e910381cebcbdde84575450898074795", "patch": "@@ -176,7 +176,7 @@ implemented in user-space.\n The primary concern of an M:N runtime is that a Rust task cannot block itself in\n a syscall. If this happens, then the entire OS thread is frozen and unavailable\n for running more Rust tasks, making this a (M-1):N runtime (and you can see how\n-this can reach 0/deadlock. By using asynchronous I/O under the hood (all I/O\n+this can reach 0/deadlock). By using asynchronous I/O under the hood (all I/O\n still looks synchronous in terms of code), OS threads are never blocked until\n the appropriate time comes.\n "}]}