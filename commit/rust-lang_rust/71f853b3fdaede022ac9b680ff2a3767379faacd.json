{"sha": "71f853b3fdaede022ac9b680ff2a3767379faacd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjg1M2IzZmRhZWRlMDIyYWM5YjY4MGZmMmEzNzY3Mzc5ZmFhY2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-02T00:37:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-02T00:37:17Z"}, "message": "rustc: Add logic for generic tags to dynamic_size_of().", "tree": {"sha": "1eeda071c57c5346bfe872c9138033fb6b5d37b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eeda071c57c5346bfe872c9138033fb6b5d37b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f853b3fdaede022ac9b680ff2a3767379faacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f853b3fdaede022ac9b680ff2a3767379faacd", "html_url": "https://github.com/rust-lang/rust/commit/71f853b3fdaede022ac9b680ff2a3767379faacd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f853b3fdaede022ac9b680ff2a3767379faacd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "html_url": "https://github.com/rust-lang/rust/commit/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "ed61fdd7e1eb49ec0feb59ccbf1fbb06cfa93bd3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/71f853b3fdaede022ac9b680ff2a3767379faacd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f853b3fdaede022ac9b680ff2a3767379faacd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=71f853b3fdaede022ac9b680ff2a3767379faacd", "patch": "@@ -891,6 +891,26 @@ fn dynamic_size_of(@block_ctxt cx, @ty.t t) -> result {\n             }\n             ret align_elements(cx, tys);\n         }\n+        case (ty.ty_tag(?tid, ?tps)) {\n+            auto bcx = cx;\n+\n+            // Compute max(variant sizes).\n+            let ValueRef max_size = bcx.build.Alloca(T_int());\n+            bcx.build.Store(C_int(0), max_size);\n+\n+            auto variants = tag_variants(bcx.fcx.ccx, tid);\n+            for (ast.variant variant in variants) {\n+                let vec[@ty.t] tys = variant_types(bcx.fcx.ccx, variant);\n+                auto rslt = align_elements(bcx, tys);\n+                bcx = rslt.bcx;\n+\n+                auto this_size = rslt.val;\n+                auto old_max_size = bcx.build.Load(max_size);\n+                bcx.build.Store(umax(bcx, this_size, old_max_size), max_size);\n+            }\n+\n+            ret res(bcx, bcx.build.Load(max_size));\n+        }\n     }\n }\n \n@@ -1450,16 +1470,25 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n \n // Tag information\n \n-fn type_of_variant(@crate_ctxt cx, &ast.variant v) -> TypeRef {\n-    let vec[TypeRef] lltys = vec();\n+fn variant_types(@crate_ctxt cx, &ast.variant v) -> vec[@ty.t] {\n+    let vec[@ty.t] tys = vec();\n     alt (ty.ann_to_type(v.ann).struct) {\n         case (ty.ty_fn(_, ?args, _)) {\n             for (ty.arg arg in args) {\n-                lltys += vec(type_of(cx, arg.ty));\n+                tys += vec(arg.ty);\n             }\n         }\n         case (_) { fail; }\n     }\n+    ret tys;\n+}\n+\n+fn type_of_variant(@crate_ctxt cx, &ast.variant v) -> TypeRef {\n+    let vec[TypeRef] lltys = vec();\n+    auto tys = variant_types(cx, v);\n+    for (@ty.t typ in tys) {\n+        lltys += vec(type_of(cx, typ));\n+    }\n     ret T_struct(lltys);\n }\n "}]}