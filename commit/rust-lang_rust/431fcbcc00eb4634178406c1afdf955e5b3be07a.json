{"sha": "431fcbcc00eb4634178406c1afdf955e5b3be07a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMWZjYmNjMDBlYjQ2MzQxNzg0MDZjMWFmZGY5NTVlNWIzYmUwN2E=", "commit": {"author": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-10-17T21:07:22Z"}, "committer": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:18:47Z"}, "message": "Moved the tests for lint `search_is_some` to new files\n`search_is_some.rs` and `search_is_some_fixable.rs`", "tree": {"sha": "4bbe288908acbc86bf950c6649e32b844570028b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bbe288908acbc86bf950c6649e32b844570028b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431fcbcc00eb4634178406c1afdf955e5b3be07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431fcbcc00eb4634178406c1afdf955e5b3be07a", "html_url": "https://github.com/rust-lang/rust/commit/431fcbcc00eb4634178406c1afdf955e5b3be07a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431fcbcc00eb4634178406c1afdf955e5b3be07a/comments", "author": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1cf2d334d685fa11fdc96fc98f35292254e5651", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cf2d334d685fa11fdc96fc98f35292254e5651", "html_url": "https://github.com/rust-lang/rust/commit/a1cf2d334d685fa11fdc96fc98f35292254e5651"}], "stats": {"total": 137, "additions": 74, "deletions": 63}, "files": [{"sha": "513d930e0568758783426279201dfa1bbfe9d8b7", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/431fcbcc00eb4634178406c1afdf955e5b3be07a/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431fcbcc00eb4634178406c1afdf955e5b3be07a/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=431fcbcc00eb4634178406c1afdf955e5b3be07a", "patch": "@@ -133,69 +133,6 @@ fn filter_next() {\n     let _ = foo.filter().next();\n }\n \n-/// Checks implementation of `SEARCH_IS_SOME` lint.\n-#[rustfmt::skip]\n-fn search_is_some() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n-\n-    // Check `find().is_some()`, single-line case.\n-    let _ = v.iter().find(|&x| *x < 0).is_some();\n-    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-    let _ = (0..1).find(|x| *x == 0).is_some();\n-    let _ = v.iter().find(|x| **x == 0).is_some();\n-\n-    // Check `find().is_some()`, multi-line case.\n-    let _ = v.iter().find(|&x| {\n-                              *x < 0\n-                          }\n-                   ).is_some();\n-\n-    // Check `position().is_some()`, single-line case.\n-    let _ = v.iter().position(|&x| x < 0).is_some();\n-\n-    // Check `position().is_some()`, multi-line case.\n-    let _ = v.iter().position(|&x| {\n-                                  x < 0\n-                              }\n-                   ).is_some();\n-\n-    // Check `rposition().is_some()`, single-line case.\n-    let _ = v.iter().rposition(|&x| x < 0).is_some();\n-\n-    // Check `rposition().is_some()`, multi-line case.\n-    let _ = v.iter().rposition(|&x| {\n-                                   x < 0\n-                               }\n-                   ).is_some();\n-    \n-    let s1 = String::from(\"hello world\");\n-    let s2 = String::from(\"world\");\n-    // Check caller `find()` is a &`static str case\n-    let _ = \"hello world\".find(\"world\").is_some();\n-    let _ = \"hello world\".find(&s2).is_some();\n-    let _ = \"hello world\".find(&s2[2..]).is_some();\n-    // Check caller of `find()` is a String case\n-    let _ = s1.find(\"world\").is_some();\n-    let _ = s1.find(&s2).is_some();\n-    let _ = s1.find(&s2[2..]).is_some();\n-    //  Check caller of `find()` is a slice of String case\n-    let _ = s1[2..].find(\"world\").is_some();\n-    let _ = s1[2..].find(&s2).is_some();\n-    let _ = s1[2..].find(&s2[2..]).is_some();\n-\n-    // Check that we don't lint if `find()` is called with\n-    // Pattern that is not a string\n-    let _ = s1.find(|c: char| c == 'o' || c == 'l').is_some();\n-\n-    // Check that we don't lint if the caller is not an `Iterator` or string\n-    let foo = IteratorFalsePositives { foo: 0 };\n-    let _ = foo.find().is_some();\n-    let _ = foo.position().is_some();\n-    let _ = foo.rposition().is_some();\n-}\n-\n fn main() {\n     filter_next();\n-    search_is_some();\n }"}, {"sha": "1ce372ab1d37422173a47429a2217fabfdc8780f", "filename": "tests/ui/search_is_some.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/431fcbcc00eb4634178406c1afdf955e5b3be07a/tests%2Fui%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431fcbcc00eb4634178406c1afdf955e5b3be07a/tests%2Fui%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.rs?ref=431fcbcc00eb4634178406c1afdf955e5b3be07a", "patch": "@@ -0,0 +1,39 @@\n+#[macro_use]\n+extern crate option_helpers;\n+use option_helpers::IteratorFalsePositives;\n+\n+#[warn(clippy::search_is_some)]\n+#[rustfmt::skip]\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+\n+    // Check `find().is_some()`, multi-line case.\n+    let _ = v.iter().find(|&x| {\n+                              *x < 0\n+                          }\n+                   ).is_some();\n+\n+    // Check `position().is_some()`, multi-line case.\n+    let _ = v.iter().position(|&x| {\n+                                  x < 0\n+                              }\n+                   ).is_some();\n+\n+    // Check `rposition().is_some()`, multi-line case.\n+    let _ = v.iter().rposition(|&x| {\n+                                   x < 0\n+                               }\n+                   ).is_some();\n+\n+    // Check that we don't lint if the caller is not an `Iterator` or string\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.find().is_some();\n+    let _ = foo.position().is_some();\n+    let _ = foo.rposition().is_some();\n+    // check that we don't lint if `find()` is called with\n+    // `Pattern` that is not a string\n+    let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_some();\n+}\n+    "}, {"sha": "5bffb7e849fedea4b2a0d5b58c68a3debbe98643", "filename": "tests/ui/search_is_some_fixable.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/431fcbcc00eb4634178406c1afdf955e5b3be07a/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431fcbcc00eb4634178406c1afdf955e5b3be07a/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=431fcbcc00eb4634178406c1afdf955e5b3be07a", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+    \n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_some();\n+    let _ = v.iter().find(|x| **x == 0).is_some();\n+    \n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+    \n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".find(\"world\").is_some();\n+    let _ = \"hello world\".find(&s2).is_some();\n+    let _ = \"hello world\".find(&s2[2..]).is_some();\n+    // caller of `find()` is a `String`\n+    let _ = s1.find(\"world\").is_some();\n+    let _ = s1.find(&s2).is_some();\n+    let _ = s1.find(&s2[2..]).is_some();\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].find(\"world\").is_some();\n+    let _ = s1[2..].find(&s2).is_some();\n+    let _ = s1[2..].find(&s2[2..]).is_some();\n+}"}]}