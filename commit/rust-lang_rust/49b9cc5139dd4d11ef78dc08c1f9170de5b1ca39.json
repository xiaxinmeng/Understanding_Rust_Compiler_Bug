{"sha": "49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "node_id": "C_kwDOAAsO6NoAKDQ5YjljYzUxMzlkZDRkMTFlZjc4ZGMwOGMxZjkxNzBkZTViMWNhMzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T07:00:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-27T07:00:27Z"}, "message": "Auto merge of #108521 - matthiaskrgr:rollup-exkviev, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #108319 (Don't project specializable RPITIT projection)\n - #108364 (Unify validity checks into a single query)\n - #108463 (bootstrap: Update the output of the `check` descriptions)\n - #108477 (Make `match` arm comma suggestion more clear)\n - #108486 (Merge diagnostic_items duplicate diagnostics)\n - #108494 (Clean up JS files code a bit)\n - #108500 (update Miri)\n - #108502 (Don't trigger error for ReError when other region is empty.)\n - #108513 (Remove `@nagisa` from review rotation)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "26fc18407f34d44ed4dfbc51d71f9e4568ebf253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26fc18407f34d44ed4dfbc51d71f9e4568ebf253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "html_url": "https://github.com/rust-lang/rust/commit/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58136ffa92c81ec9e6ac1f91773254914da2ca01", "url": "https://api.github.com/repos/rust-lang/rust/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01", "html_url": "https://github.com/rust-lang/rust/commit/58136ffa92c81ec9e6ac1f91773254914da2ca01"}, {"sha": "ce3397503bb86aa520a100dad0a24ac31efc5179", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3397503bb86aa520a100dad0a24ac31efc5179", "html_url": "https://github.com/rust-lang/rust/commit/ce3397503bb86aa520a100dad0a24ac31efc5179"}], "stats": {"total": 892, "additions": 660, "deletions": 232}, "files": [{"sha": "c4704fb0dd593a1f5bcc7da60d20a8e7ef0412fa", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -444,7 +444,7 @@ dependencies = [\n  \"directories\",\n  \"rustc-build-sysroot\",\n  \"rustc-workspace-hack\",\n- \"rustc_tools_util 0.2.1\",\n+ \"rustc_tools_util\",\n  \"rustc_version\",\n  \"serde\",\n  \"serde_json\",\n@@ -738,7 +738,7 @@ dependencies = [\n  \"regex\",\n  \"rustc-semver\",\n  \"rustc-workspace-hack\",\n- \"rustc_tools_util 0.3.0\",\n+ \"rustc_tools_util\",\n  \"semver\",\n  \"serde\",\n  \"syn\",\n@@ -4725,12 +4725,6 @@ dependencies = [\n  \"tracing\",\n ]\n \n-[[package]]\n-name = \"rustc_tools_util\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"598f48ce2a421542b3e64828aa742b687cc1b91d2f96591cfdb7ac5988cd6366\"\n-\n [[package]]\n name = \"rustc_tools_util\"\n version = \"0.3.0\""}, {"sha": "39574ca558f8b3616dbe9cbeefc4366b88593b8d", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -1505,14 +1505,6 @@ pub struct PointeeInfo {\n     pub safe: Option<PointerKind>,\n }\n \n-/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n-/// that is checked to be valid\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum InitKind {\n-    Zero,\n-    UninitMitigated0x01Fill,\n-}\n-\n impl LayoutS {\n     /// Returns `true` if the layout corresponds to an unsized type.\n     pub fn is_unsized(&self) -> bool {"}, {"sha": "f00e9321070582d0581160d68aa45837e3f6bcac", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -21,7 +21,8 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n-use rustc_middle::ty::layout::HasParamEnv;\n+use rustc_middle::ty;\n+use rustc_middle::ty::layout::{HasParamEnv, InitKind};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -642,7 +643,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             if intrinsic == sym::assert_zero_valid\n                 && !fx\n                     .tcx\n-                    .permits_zero_init(fx.param_env().and(ty))\n+                    .check_validity_of_init((InitKind::Zero, fx.param_env().and(ty)))\n                     .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n@@ -661,7 +662,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             if intrinsic == sym::assert_mem_uninitialized_valid\n                 && !fx\n                     .tcx\n-                    .permits_uninit_init(fx.param_env().and(ty))\n+                    .check_validity_of_init((\n+                        InitKind::UninitMitigated0x01Fill,\n+                        fx.param_env().and(ty),\n+                    ))\n                     .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({"}, {"sha": "b1abbd673a53a238fb61328a52d3e25f3ae4fdb6", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n-use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::{HasTyCtxt, InitKind, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::{self, Instance, Ty, TypeVisitableExt};\n use rustc_session::config::OptLevel;\n@@ -676,11 +676,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 Inhabited => layout.abi.is_uninhabited(),\n                 ZeroValid => !bx\n                     .tcx()\n-                    .permits_zero_init(bx.param_env().and(ty))\n+                    .check_validity_of_init((InitKind::Zero, bx.param_env().and(ty)))\n                     .expect(\"expected to have layout during codegen\"),\n                 MemUninitializedValid => !bx\n                     .tcx()\n-                    .permits_uninit_init(bx.param_env().and(ty))\n+                    .check_validity_of_init((\n+                        InitKind::UninitMitigated0x01Fill,\n+                        bx.param_env().and(ty),\n+                    ))\n                     .expect(\"expected to have layout during codegen\"),\n             };\n             Some(if do_panic {"}, {"sha": "26c84b4ce612774a57685516a09daa6dc386c5eb", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{\n     BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::LayoutOf as _;\n+use rustc_middle::ty::layout::{InitKind, LayoutOf as _};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n@@ -437,7 +437,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if intrinsic_name == sym::assert_zero_valid {\n                     let should_panic = !self\n                         .tcx\n-                        .permits_zero_init(self.param_env.and(ty))\n+                        .check_validity_of_init((InitKind::Zero, self.param_env.and(ty)))\n                         .map_err(|_| err_inval!(TooGeneric))?;\n \n                     if should_panic {\n@@ -454,7 +454,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if intrinsic_name == sym::assert_mem_uninitialized_valid {\n                     let should_panic = !self\n                         .tcx\n-                        .permits_uninit_init(self.param_env.and(ty))\n+                        .check_validity_of_init((\n+                            InitKind::UninitMitigated0x01Fill,\n+                            self.param_env.and(ty),\n+                        ))\n                         .map_err(|_| err_inval!(TooGeneric))?;\n \n                     if should_panic {"}, {"sha": "092a7dc3d3b51c4482a6a8a95227079b6abd0f3f", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -38,7 +38,6 @@ use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_macros::fluent_messages;\n use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n-use rustc_target::abi::InitKind;\n \n fluent_messages! { \"../locales/en-US.ftl\" }\n \n@@ -62,9 +61,7 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::deref_mir_constant(tcx, param_env, value)\n     };\n-    providers.permits_uninit_init = |tcx, param_env_and_ty| {\n-        util::might_permit_raw_init(tcx, param_env_and_ty, InitKind::UninitMitigated0x01Fill)\n+    providers.check_validity_of_init = |tcx, (init_kind, param_env_and_ty)| {\n+        util::might_permit_raw_init(tcx, init_kind, param_env_and_ty)\n     };\n-    providers.permits_zero_init =\n-        |tcx, param_env_and_ty| util::might_permit_raw_init(tcx, param_env_and_ty, InitKind::Zero);\n }"}, {"sha": "a78bf927ca1dc9c20d8a177bca326f58f90bd585", "filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -1,7 +1,7 @@\n-use rustc_middle::ty::layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{InitKind, LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::Limit;\n-use rustc_target::abi::{Abi, FieldsShape, InitKind, Scalar, Variants};\n+use rustc_target::abi::{Abi, FieldsShape, Scalar, Variants};\n \n use crate::const_eval::{CheckAlignment, CompileTimeInterpreter};\n use crate::interpret::{InterpCx, MemoryKind, OpTy};\n@@ -20,8 +20,8 @@ use crate::interpret::{InterpCx, MemoryKind, OpTy};\n /// to the full uninit check).\n pub fn might_permit_raw_init<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     kind: InitKind,\n+    param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Result<bool, LayoutError<'tcx>> {\n     if tcx.sess.opts.unstable_opts.strict_init_checks {\n         might_permit_raw_init_strict(tcx.layout_of(param_env_and_ty)?, tcx, kind)"}, {"sha": "b0dc6b1dcacc321798a78c94416fe5d90157881b", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -648,6 +648,13 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n             tcx.fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n         .fold_with(&mut collector);\n+\n+    debug_assert_ne!(\n+        collector.types.len(),\n+        0,\n+        \"expect >1 RPITITs in call to `collect_return_position_impl_trait_in_trait_tys`\"\n+    );\n+\n     let trait_sig = ocx.normalize(&norm_cause, param_env, unnormalized_trait_sig);\n     trait_sig.error_reported()?;\n     let trait_return_ty = trait_sig.output();"}, {"sha": "a499018d3a2b08279006371ab545801ae6e61f43", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -438,7 +438,11 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Value(a), VarValue::Empty(_)) => {\n                 match *a {\n-                    ReLateBound(..) | ReErased | ReError(_) => {\n+                    // this is always on an error path,\n+                    // so it doesn't really matter if it's shorter or longer than an empty region\n+                    ReError(_) => false,\n+\n+                    ReLateBound(..) | ReErased => {\n                         bug!(\"cannot relate region: {:?}\", a);\n                     }\n \n@@ -467,7 +471,11 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Empty(a_ui), VarValue::Value(b)) => {\n                 match *b {\n-                    ReLateBound(..) | ReErased | ReError(_) => {\n+                    // this is always on an error path,\n+                    // so it doesn't really matter if it's shorter or longer than an empty region\n+                    ReError(_) => false,\n+\n+                    ReLateBound(..) | ReErased => {\n                         bug!(\"cannot relate region: {:?}\", b);\n                     }\n "}, {"sha": "ad119c4e07306c09e5ac4b23567bf5f3febe7fd0", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -64,13 +64,17 @@ impl ModuleItems {\n         self.foreign_items.iter().copied()\n     }\n \n-    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+    pub fn owners(&self) -> impl Iterator<Item = OwnerId> + '_ {\n         self.items\n             .iter()\n-            .map(|id| id.owner_id.def_id)\n-            .chain(self.trait_items.iter().map(|id| id.owner_id.def_id))\n-            .chain(self.impl_items.iter().map(|id| id.owner_id.def_id))\n-            .chain(self.foreign_items.iter().map(|id| id.owner_id.def_id))\n+            .map(|id| id.owner_id)\n+            .chain(self.trait_items.iter().map(|id| id.owner_id))\n+            .chain(self.impl_items.iter().map(|id| id.owner_id))\n+            .chain(self.foreign_items.iter().map(|id| id.owner_id))\n+    }\n+\n+    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+        self.owners().map(|id| id.def_id)\n     }\n \n     pub fn par_items(&self, f: impl Fn(ItemId) + Send + Sync) {"}, {"sha": "111ea6b8cddc01505fe9b65ad9c0d8303adab320", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -4,8 +4,9 @@ use crate::infer::canonical::Canonical;\n use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::layout::{InitKind, TyAndLayout};\n use crate::ty::subst::{GenericArg, SubstsRef};\n-use crate::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::hir_id::{HirId, OwnerId};\n use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCacheSelector};\n@@ -696,3 +697,24 @@ impl Key for HirId {\n         None\n     }\n }\n+\n+impl<'tcx> Key for (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n+    // Just forward to `Ty<'tcx>`\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+\n+    fn ty_adt_id(&self) -> Option<DefId> {\n+        match self.1.value.kind() {\n+            ty::Adt(adt, _) => Some(adt.did()),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "d4435a54b4ab6d2d60cbaadb8ffa660948463f72", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -2173,12 +2173,8 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query permits_uninit_init(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n-        desc { \"checking to see if `{}` permits being left uninit\", key.value }\n-    }\n-\n-    query permits_zero_init(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n-        desc { \"checking to see if `{}` permits being left zeroed\", key.value }\n+    query check_validity_of_init(key: (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>)) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n+        desc { \"checking to see if `{}` permits being left {}\", key.1.value, key.0 }\n     }\n \n     query compare_impl_const("}, {"sha": "f0b52455889aa50de0ad687b797f5dfe9755a399", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -169,6 +169,23 @@ pub const FAT_PTR_EXTRA: usize = 1;\n /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n \n+/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n+/// that is checked to be valid\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+pub enum InitKind {\n+    Zero,\n+    UninitMitigated0x01Fill,\n+}\n+\n+impl fmt::Display for InitKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::Zero => f.write_str(\"zeroed\"),\n+            Self::UninitMitigated0x01Fill => f.write_str(\"filled with 0x01\"),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),"}, {"sha": "d743c30684958fd6c8809664fdbec7bae3375f14", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -32,6 +32,7 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::context::TyCtxtFeed;\n use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::layout::InitKind;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;"}, {"sha": "05286b71d47e4b28e0fb9032110e65b83aecdab1", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -6,8 +6,8 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::{self, ParamEnv, ParamEnvAnd, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::layout::InitKind;\n+use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n pub struct InstCombine;\n@@ -234,16 +234,15 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         }\n         let ty = substs.type_at(0);\n \n-        // Check this is a foldable intrinsic before we query the layout of our generic parameter\n-        let Some(assert_panics) = intrinsic_assert_panics(intrinsic_name) else { return; };\n-        match assert_panics(self.tcx, self.param_env.and(ty)) {\n-            // We don't know the layout, don't touch the assertion\n-            Err(_) => {}\n-            Ok(true) => {\n+        let known_is_valid = intrinsic_assert_panics(self.tcx, self.param_env, ty, intrinsic_name);\n+        match known_is_valid {\n+            // We don't know the layout or it's not validity assertion at all, don't touch it\n+            None => {}\n+            Some(true) => {\n                 // If we know the assert panics, indicate to later opts that the call diverges\n                 *target = None;\n             }\n-            Ok(false) => {\n+            Some(false) => {\n                 // If we know the assert does not panic, turn the call into a Goto\n                 terminator.kind = TerminatorKind::Goto { target: *target_block };\n             }\n@@ -252,33 +251,21 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n }\n \n fn intrinsic_assert_panics<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n     intrinsic_name: Symbol,\n-) -> Option<fn(TyCtxt<'tcx>, ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, LayoutError<'tcx>>> {\n-    fn inhabited_predicate<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, LayoutError<'tcx>> {\n-        Ok(tcx.layout_of(param_env_and_ty)?.abi.is_uninhabited())\n-    }\n-    fn zero_valid_predicate<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, LayoutError<'tcx>> {\n-        Ok(!tcx.permits_zero_init(param_env_and_ty)?)\n-    }\n-    fn mem_uninitialized_valid_predicate<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, LayoutError<'tcx>> {\n-        Ok(!tcx.permits_uninit_init(param_env_and_ty)?)\n-    }\n-\n-    match intrinsic_name {\n-        sym::assert_inhabited => Some(inhabited_predicate),\n-        sym::assert_zero_valid => Some(zero_valid_predicate),\n-        sym::assert_mem_uninitialized_valid => Some(mem_uninitialized_valid_predicate),\n-        _ => None,\n-    }\n+) -> Option<bool> {\n+    Some(match intrinsic_name {\n+        sym::assert_inhabited => tcx.layout_of(param_env.and(ty)).ok()?.abi.is_uninhabited(),\n+        sym::assert_zero_valid => {\n+            !tcx.check_validity_of_init((InitKind::Zero, param_env.and(ty))).ok()?\n+        }\n+        sym::assert_mem_uninitialized_valid => !tcx\n+            .check_validity_of_init((InitKind::UninitMitigated0x01Fill, param_env.and(ty)))\n+            .ok()?,\n+        _ => return None,\n+    })\n }\n \n fn resolve_rust_intrinsic<'tcx>("}, {"sha": "4ddeeed5b7e0a4e862f57f82fbed40a7fdf4d93b", "filename": "compiler/rustc_parse/locales/en-US.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -220,7 +220,7 @@ parse_match_arm_body_without_braces = `match` arm body without braces\n             [one] statement\n            *[other] statements\n         } with a body\n-    .suggestion_use_comma_not_semicolon = use a comma to end a `match` arm expression\n+    .suggestion_use_comma_not_semicolon = replace `;` with `,` to end a `match` arm expression\n \n parse_inclusive_range_extra_equals = unexpected `=` after inclusive range\n     .suggestion_remove_eq = use `..=` instead"}, {"sha": "3fa78efc290ba2406cd46cd7723e2dbf2460fd1c", "filename": "compiler/rustc_passes/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -402,9 +402,6 @@ passes_invalid_attr_at_crate_level =\n     `{$name}` attribute cannot be used at crate level\n     .suggestion = perhaps you meant to use an outer attribute\n \n-passes_duplicate_diagnostic_item =\n-    duplicate diagnostic item found: `{$name}`.\n-\n passes_duplicate_diagnostic_item_in_crate =\n     duplicate diagnostic item in crate `{$crate_name}`: `{$name}`.\n     .note = the diagnostic item is first defined in crate `{$orig_crate_name}`."}, {"sha": "110eb210df9ad71b0184fd8ac53fafcc145a03a8", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -11,43 +11,49 @@\n \n use rustc_ast as ast;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n+use rustc_hir::OwnerId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use rustc_span::symbol::{kw::Empty, sym, Symbol};\n+use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_span::symbol::{sym, Symbol};\n \n-use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n+use crate::errors::DuplicateDiagnosticItemInCrate;\n \n-fn observe_item(tcx: TyCtxt<'_>, diagnostic_items: &mut DiagnosticItems, def_id: LocalDefId) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let attrs = tcx.hir().attrs(hir_id);\n+fn observe_item<'tcx>(tcx: TyCtxt<'tcx>, diagnostic_items: &mut DiagnosticItems, owner: OwnerId) {\n+    let attrs = tcx.hir().attrs(owner.into());\n     if let Some(name) = extract(attrs) {\n         // insert into our table\n-        collect_item(tcx, diagnostic_items, name, def_id.to_def_id());\n+        collect_item(tcx, diagnostic_items, name, owner.to_def_id());\n     }\n }\n \n fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item_def_id: DefId) {\n     items.id_to_name.insert(item_def_id, name);\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n-            let orig_span = tcx.hir().span_if_local(original_def_id);\n-            let orig_crate_name =\n-                orig_span.is_none().then(|| tcx.crate_name(original_def_id.krate));\n-            match tcx.hir().span_if_local(item_def_id) {\n-                Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n-                None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n-                    span: orig_span,\n-                    orig_crate_name: orig_crate_name.unwrap_or(Empty),\n-                    have_orig_crate_name: orig_crate_name.map(|_| ()),\n-                    crate_name: tcx.crate_name(item_def_id.krate),\n-                    name,\n-                }),\n-            };\n+            report_duplicate_item(tcx, name, original_def_id, item_def_id);\n         }\n     }\n }\n \n+fn report_duplicate_item(\n+    tcx: TyCtxt<'_>,\n+    name: Symbol,\n+    original_def_id: DefId,\n+    item_def_id: DefId,\n+) {\n+    let orig_span = tcx.hir().span_if_local(original_def_id);\n+    let duplicate_span = tcx.hir().span_if_local(item_def_id);\n+    tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n+        duplicate_span,\n+        orig_span,\n+        crate_name: tcx.crate_name(item_def_id.krate),\n+        orig_crate_name: tcx.crate_name(original_def_id.krate),\n+        different_crates: (item_def_id.krate != original_def_id.krate).then_some(()),\n+        name,\n+    });\n+}\n+\n /// Extract the first `rustc_diagnostic_item = \"$name\"` out of a list of attributes.\n fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n     attrs.iter().find_map(|attr| {\n@@ -64,21 +70,8 @@ fn diagnostic_items(tcx: TyCtxt<'_>, cnum: CrateNum) -> DiagnosticItems {\n \n     // Collect diagnostic items in this crate.\n     let crate_items = tcx.hir_crate_items(());\n-\n-    for id in crate_items.items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.trait_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.impl_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.foreign_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n+    for id in crate_items.owners() {\n+        observe_item(tcx, &mut diagnostic_items, id);\n     }\n \n     diagnostic_items"}, {"sha": "9f1c0b5a0b7bdf960802be254be100bacdcd8e4e", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -809,23 +809,17 @@ impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n     }\n }\n \n-#[derive(Diagnostic)]\n-#[diag(passes_duplicate_diagnostic_item)]\n-pub struct DuplicateDiagnosticItem {\n-    #[primary_span]\n-    pub span: Span,\n-    pub name: Symbol,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(passes_duplicate_diagnostic_item_in_crate)]\n pub struct DuplicateDiagnosticItemInCrate {\n+    #[primary_span]\n+    pub duplicate_span: Option<Span>,\n     #[note(passes_diagnostic_item_first_defined)]\n-    pub span: Option<Span>,\n-    pub orig_crate_name: Symbol,\n+    pub orig_span: Option<Span>,\n     #[note]\n-    pub have_orig_crate_name: Option<()>,\n+    pub different_crates: Option<()>,\n     pub crate_name: Symbol,\n+    pub orig_crate_name: Symbol,\n     pub name: Symbol,\n }\n "}, {"sha": "d542240be9b24f9faaefcc28e261a0cdf469a57e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -1307,21 +1307,38 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n-                    Ok(())\n+                    let Ok(leaf_def) = specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) else {\n+                        return Err(());\n+                    };\n+                    // Only reveal a specializable default if we're past type-checking\n+                    // and the obligation is monomorphic, otherwise passes such as\n+                    // transmute checking and polymorphic MIR optimizations could\n+                    // get a result which isn't correct for all monomorphizations.\n+                    if leaf_def.is_final()\n+                        || (obligation.param_env.reveal() == Reveal::All\n+                            && !selcx\n+                                .infcx\n+                                .resolve_vars_if_possible(obligation.predicate.trait_ref(tcx))\n+                                .still_further_specializable())\n+                    {\n+                        candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n+                        Ok(())\n+                    } else {\n+                        Err(())\n+                    }\n                 }\n                 Ok(None) => {\n                     candidate_set.mark_ambiguous();\n-                    return Err(());\n+                    Err(())\n                 }\n                 Ok(Some(_)) => {\n                     // Don't know enough about the impl to provide a useful signature\n-                    return Err(());\n+                    Err(())\n                 }\n                 Err(e) => {\n                     debug!(error = ?e, \"selection error\");\n                     candidate_set.mark_error(e);\n-                    return Err(());\n+                    Err(())\n                 }\n             }\n         });"}, {"sha": "cd19667139ab6274bf7105fc75accaa90d0e81a3", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 60, "deletions": 28, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -105,10 +105,15 @@ impl Step for Std {\n             cargo.arg(\"--lib\");\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} library artifacts ({} -> {})\",\n-            builder.top_stage, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} library artifacts ({target})\", builder.top_stage)\n+        } else {\n+            format!(\n+                \"Checking stage{} library artifacts ({} -> {})\",\n+                builder.top_stage, &compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -162,10 +167,18 @@ impl Step for Std {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} library test/bench/example targets ({} -> {})\",\n-            builder.top_stage, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\n+                \"Checking stage{} library test/bench/example targets ({target})\",\n+                builder.top_stage\n+            )\n+        } else {\n+            format!(\n+                \"Checking stage{} library test/bench/example targets ({} -> {})\",\n+                builder.top_stage, &compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -239,10 +252,15 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} compiler artifacts ({} -> {})\",\n-            builder.top_stage, &compiler.host, target\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} compiler artifacts ({target})\", builder.top_stage)\n+        } else {\n+            format!(\n+                \"Checking stage{} compiler artifacts ({} -> {})\",\n+                builder.top_stage, &compiler.host, target\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -299,10 +317,15 @@ impl Step for CodegenBackend {\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n         rustc_cargo_env(builder, &mut cargo, target);\n \n-        builder.info(&format!(\n-            \"Checking stage{} {} artifacts ({} -> {})\",\n-            builder.top_stage, backend, &compiler.host.triple, target.triple\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, backend)\n+        } else {\n+            format!(\n+                \"Checking stage{} {} library ({} -> {})\",\n+                builder.top_stage, backend, &compiler.host.triple, target.triple\n+            )\n+        };\n+        builder.info(&msg);\n \n         run_cargo(\n             builder,\n@@ -362,10 +385,15 @@ impl Step for RustAnalyzer {\n             cargo.arg(\"--benches\");\n         }\n \n-        builder.info(&format!(\n-            \"Checking stage{} {} artifacts ({} -> {})\",\n-            compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n-        ));\n+        let msg = if compiler.host == target {\n+            format!(\"Checking stage{} {} artifacts ({target})\", compiler.stage, \"rust-analyzer\")\n+        } else {\n+            format!(\n+                \"Checking stage{} {} artifacts ({} -> {})\",\n+                compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n+            )\n+        };\n+        builder.info(&msg);\n         run_cargo(\n             builder,\n             cargo,\n@@ -432,14 +460,18 @@ macro_rules! tool_check_step {\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n                 // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n                 cargo.rustflag(\"-Zunstable-options\");\n-\n-                builder.info(&format!(\n-                    \"Checking stage{} {} artifacts ({} -> {})\",\n-                    builder.top_stage,\n-                    stringify!($name).to_lowercase(),\n-                    &compiler.host.triple,\n-                    target.triple\n-                ));\n+                let msg = if compiler.host == target {\n+                    format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, stringify!($name).to_lowercase())\n+                } else {\n+                    format!(\n+                        \"Checking stage{} {} artifacts ({} -> {})\",\n+                        builder.top_stage,\n+                        stringify!($name).to_lowercase(),\n+                        &compiler.host.triple,\n+                        target.triple\n+                    )\n+                };\n+                builder.info(&msg);\n                 run_cargo(\n                     builder,\n                     cargo,"}, {"sha": "b3fc889431b38ed5fc4f791574697519551f2e81", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -463,11 +463,10 @@ function initSearch(rawSearchIndex) {\n      * @param {ParserState} parserState\n      */\n     function parseInput(query, parserState) {\n-        let c, before;\n         let foundStopChar = true;\n \n         while (parserState.pos < parserState.length) {\n-            c = parserState.userQuery[parserState.pos];\n+            const c = parserState.userQuery[parserState.pos];\n             if (isStopCharacter(c)) {\n                 foundStopChar = true;\n                 if (isSeparatorCharacter(c)) {\n@@ -506,7 +505,7 @@ function initSearch(rawSearchIndex) {\n                 }\n                 throw new Error(`Expected \\`,\\`, \\` \\`, \\`:\\` or \\`->\\`, found \\`${c}\\``);\n             }\n-            before = query.elems.length;\n+            const before = query.elems.length;\n             getNextElem(query, parserState, query.elems, false);\n             if (query.elems.length === before) {\n                 // Nothing was added, weird... Let's increase the position to not remain stuck.\n@@ -515,7 +514,6 @@ function initSearch(rawSearchIndex) {\n             foundStopChar = false;\n         }\n         while (parserState.pos < parserState.length) {\n-            c = parserState.userQuery[parserState.pos];\n             if (isReturnArrow(parserState)) {\n                 parserState.pos += 2;\n                 // Get returned elements.\n@@ -1940,7 +1938,6 @@ function initSearch(rawSearchIndex) {\n          */\n         const searchWords = [];\n         const charA = \"A\".charCodeAt(0);\n-        let i, word;\n         let currentIndex = 0;\n         let id = 0;\n \n@@ -2035,7 +2032,7 @@ function initSearch(rawSearchIndex) {\n             // convert `rawPaths` entries into object form\n             // generate normalizedPaths for function search mode\n             let len = paths.length;\n-            for (i = 0; i < len; ++i) {\n+            for (let i = 0; i < len; ++i) {\n                 lowercasePaths.push({ty: paths[i][0], name: paths[i][1].toLowerCase()});\n                 paths[i] = {ty: paths[i][0], name: paths[i][1]};\n             }\n@@ -2049,16 +2046,14 @@ function initSearch(rawSearchIndex) {\n             // faster analysis operations\n             len = itemTypes.length;\n             let lastPath = \"\";\n-            for (i = 0; i < len; ++i) {\n+            for (let i = 0; i < len; ++i) {\n+                let word = \"\";\n                 // This object should have exactly the same set of fields as the \"crateRow\"\n                 // object defined above.\n                 if (typeof itemNames[i] === \"string\") {\n                     word = itemNames[i].toLowerCase();\n-                    searchWords.push(word);\n-                } else {\n-                    word = \"\";\n-                    searchWords.push(\"\");\n                 }\n+                searchWords.push(word);\n                 const row = {\n                     crate: crate,\n                     ty: itemTypes.charCodeAt(i) - charA,"}, {"sha": "6c0f03b5bb07217267dfb0f8cd699c4145a12ef6", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -117,8 +117,7 @@ function createSourceSidebar() {\n     sidebar.appendChild(title);\n     Object.keys(sourcesIndex).forEach(key => {\n         sourcesIndex[key][NAME_OFFSET] = key;\n-        hasFoundFile = createDirEntry(sourcesIndex[key], sidebar, \"\",\n-            hasFoundFile);\n+        hasFoundFile = createDirEntry(sourcesIndex[key], sidebar, \"\", hasFoundFile);\n     });\n \n     container.appendChild(sidebar);"}, {"sha": "476075e9c914d3fc115d052296453399ce05df37", "filename": "src/tools/miri/CONTRIBUTING.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCONTRIBUTING.md?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -242,6 +242,13 @@ josh-proxy --local=$HOME/.cache/josh --remote=https://github.com --no-background\n \n This uses a directory `$HOME/.cache/josh` as a cache, to speed up repeated pulling/pushing.\n \n+To make josh push via ssh instead of https, you can add the following to your `.gitconfig`:\n+\n+```toml\n+[url \"git@github.com:\"]\n+    pushInsteadOf = https://github.com/\n+```\n+\n ### Importing changes from the rustc repo\n \n Josh needs to be running, as described above."}, {"sha": "1086d0481c83556ef8a0af77171fbd19ded2da2d", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -213,7 +213,9 @@ degree documented below):\n - The best-supported target is `x86_64-unknown-linux-gnu`. Miri releases are\n   blocked on things working with this target. Most other Linux targets should\n   also work well; we do run the test suite on `i686-unknown-linux-gnu` as a\n-  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target.\n+  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target, as\n+  well as the ARM targets `aarch64-unknown-linux-gnu` and\n+  `arm-unknown-linux-gnueabi`.\n - `x86_64-apple-darwin` should work basically as well as Linux. We also test\n   `aarch64-apple-darwin`. However, we might ship Miri with a nightly even when\n   some features on these targets regress.\n@@ -590,7 +592,7 @@ extern \"Rust\" {\n     /// `out` must point to at least `out_size` many bytes, and the result will be stored there\n     /// with a null terminator.\n     /// Returns 0 if the `out` buffer was large enough, and the required size otherwise.\n-    fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+    fn miri_host_to_target_path(path: *const std::ffi::c_char, out: *mut std::ffi::c_char, out_size: usize) -> usize;\n }\n ```\n "}, {"sha": "76badcf94afb3f5ca400467308848a42630a0cf2", "filename": "src/tools/miri/cargo-miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -193,9 +193,9 @@ checksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \n [[package]]\n name = \"rustc_tools_util\"\n-version = \"0.2.1\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"598f48ce2a421542b3e64828aa742b687cc1b91d2f96591cfdb7ac5988cd6366\"\n+checksum = \"8ba09476327c4b70ccefb6180f046ef588c26a24cf5d269a9feba316eb4f029f\"\n \n [[package]]\n name = \"rustc_version\""}, {"sha": "09079dbb818be305105bb53447eece5817857802", "filename": "src/tools/miri/cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -30,4 +30,4 @@ rustc-workspace-hack = \"1.0.0\"\n serde = { version = \"*\", features = [\"derive\"] }\n \n [build-dependencies]\n-rustc_tools_util = \"0.2\"\n+rustc_tools_util = \"0.3\""}, {"sha": "52e2a083512c4ddb8a6cafecf7ceb47d7f6ebdb0", "filename": "src/tools/miri/cargo-miri/build.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -2,12 +2,5 @@ fn main() {\n     // Don't rebuild miri when nothing changed.\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     // gather version info\n-    println!(\n-        \"cargo:rustc-env=GIT_HASH={}\",\n-        rustc_tools_util::get_commit_hash().unwrap_or_default()\n-    );\n-    println!(\n-        \"cargo:rustc-env=COMMIT_DATE={}\",\n-        rustc_tools_util::get_commit_date().unwrap_or_default()\n-    );\n+    rustc_tools_util::setup_version_info!();\n }"}, {"sha": "60450d0981545ce731864c6b7455239fe2d452d1", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -104,6 +104,7 @@ run_tests\n case $HOST_TARGET in\n   x86_64-unknown-linux-gnu)\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n+    MIRI_TEST_TARGET=aarch64-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n@@ -118,6 +119,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n     ;;\n   i686-pc-windows-msvc)\n+    MIRI_TEST_TARGET=arm-unknown-linux-gnueabi run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=x86_64-pc-windows-gnu run_tests\n     ;;"}, {"sha": "53ec1ba0821b02a7c0d07bee09a2d4e256048e86", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -1 +1 @@\n-c54c8cbac882e149e04a9e1f2d146fd548ae30ae\n+c4e0cd966062ca67daed20775f4e8a60c28e57df"}, {"sha": "b766916402e4f5689c7dbb75eb1ad40fb52f2b6e", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -148,8 +148,7 @@ impl NewPermission {\n             NewPermission::Uniform {\n                 perm: Permission::Unique,\n                 access: Some(AccessKind::Write),\n-                protector: (kind == RetagKind::FnEntry)\n-                    .then_some(ProtectorKind::WeakProtector),\n+                protector: (kind == RetagKind::FnEntry).then_some(ProtectorKind::WeakProtector),\n             }\n         } else {\n             // `!Unpin` boxes do not get `noalias` nor `dereferenceable`."}, {"sha": "f64f216520f00244ad8f8a9e0887e9355bc0c5b2", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -13,6 +13,7 @@\n #![allow(\n     clippy::collapsible_else_if,\n     clippy::collapsible_if,\n+    clippy::if_same_then_else,\n     clippy::comparison_chain,\n     clippy::enum_variant_names,\n     clippy::field_reassign_with_default,\n@@ -21,7 +22,7 @@\n     clippy::single_match,\n     clippy::useless_format,\n     clippy::derive_partial_eq_without_eq,\n-    clippy::derive_hash_xor_eq,\n+    clippy::derived_hash_with_manual_eq,\n     clippy::too_many_arguments,\n     clippy::type_complexity,\n     clippy::single_element_loop,"}, {"sha": "8bbf9f87b43e51652f8ef17349e0f659a42da9ad", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -477,7 +477,8 @@ pub struct MiriMachine<'mir, 'tcx> {\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n-        let local_crates = helpers::get_local_crates(layout_cx.tcx);\n+        let tcx = layout_cx.tcx;\n+        let local_crates = helpers::get_local_crates(tcx);\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n         let profiler = config.measureme_out.as_ref().map(|out| {\n@@ -486,10 +487,13 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n         let borrow_tracker = config.borrow_tracker.map(|bt| bt.instanciate_global_state(config));\n         let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n+        // Determinine page size, stack address, and stack size.\n+        // These values are mostly meaningless, but the stack address is also where we start\n+        // allocating physical integer addresses for all allocations.\n         let page_size = if let Some(page_size) = config.page_size {\n             page_size\n         } else {\n-            let target = &layout_cx.tcx.sess.target;\n+            let target = &tcx.sess.target;\n             match target.arch.as_ref() {\n                 \"wasm32\" | \"wasm64\" => 64 * 1024, // https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances\n                 \"aarch64\" =>\n@@ -504,10 +508,12 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                 _ => 4 * 1024,\n             }\n         };\n-        let stack_addr = page_size * 32;\n-        let stack_size = page_size * 16;\n+        // On 16bit targets, 32 pages is more than the entire address space!\n+        let stack_addr = if tcx.pointer_size().bits() < 32 { page_size } else { page_size * 32 };\n+        let stack_size =\n+            if tcx.pointer_size().bits() < 32 { page_size * 4 } else { page_size * 16 };\n         MiriMachine {\n-            tcx: layout_cx.tcx,\n+            tcx,\n             borrow_tracker,\n             data_race,\n             intptrcast: RefCell::new(intptrcast::GlobalStateInner::new(config, stack_addr)),\n@@ -902,8 +908,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n             };\n             let (shim_size, shim_align, _kind) = ecx.get_alloc_info(alloc_id);\n             let def_ty = ecx.tcx.type_of(def_id).subst_identity();\n-            let extern_decl_layout =\n-                ecx.tcx.layout_of(ty::ParamEnv::empty().and(def_ty)).unwrap();\n+            let extern_decl_layout = ecx.tcx.layout_of(ty::ParamEnv::empty().and(def_ty)).unwrap();\n             if extern_decl_layout.size != shim_size || extern_decl_layout.align.abi != shim_align {\n                 throw_unsup_format!(\n                     \"`extern` static `{name}` from crate `{krate}` has been declared \\"}, {"sha": "03275ed4ed163cbeb7f9837716a50a0071d6aba1", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -885,6 +885,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     }\n                 }\n             }\n+            \"llvm.arm.hint\" if this.tcx.sess.target.arch == \"arm\" => {\n+                let [arg] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n+                let arg = this.read_scalar(arg)?.to_i32()?;\n+                match arg {\n+                    // YIELD\n+                    1 => {\n+                        this.yield_active_thread();\n+                    }\n+                    _ => {\n+                        throw_unsup_format!(\"unsupported llvm.arm.hint argument {}\", arg);\n+                    }\n+                }\n+            }\n \n             // Platform-specific shims\n             _ =>"}, {"sha": "fd4927fa10ce39b876f8e4966def8d25e5e476eb", "filename": "src/tools/miri/src/shims/unix/linux/fd.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -7,6 +7,8 @@ use socketpair::SocketPair;\n \n use shims::unix::fs::EvalContextExt as _;\n \n+use std::cell::Cell;\n+\n pub mod epoll;\n pub mod event;\n pub mod socketpair;\n@@ -101,6 +103,60 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n     }\n \n+    /// The `epoll_wait()` system call waits for events on the `Epoll`\n+    /// instance referred to by the file descriptor `epfd`. The buffer\n+    /// pointed to by `events` is used to return information from the ready\n+    /// list about file descriptors in the interest list that have some\n+    /// events available. Up to `maxevents` are returned by `epoll_wait()`.\n+    /// The `maxevents` argument must be greater than zero.\n+\n+    /// The `timeout` argument specifies the number of milliseconds that\n+    /// `epoll_wait()` will block. Time is measured against the\n+    /// CLOCK_MONOTONIC clock.\n+\n+    /// A call to `epoll_wait()` will block until either:\n+    /// \u2022 a file descriptor delivers an event;\n+    /// \u2022 the call is interrupted by a signal handler; or\n+    /// \u2022 the timeout expires.\n+\n+    /// Note that the timeout interval will be rounded up to the system\n+    /// clock granularity, and kernel scheduling delays mean that the\n+    /// blocking interval may overrun by a small amount. Specifying a\n+    /// timeout of -1 causes `epoll_wait()` to block indefinitely, while\n+    /// specifying a timeout equal to zero cause `epoll_wait()` to return\n+    /// immediately, even if no events are available.\n+    ///\n+    /// On success, `epoll_wait()` returns the number of file descriptors\n+    /// ready for the requested I/O, or zero if no file descriptor became\n+    /// ready during the requested timeout milliseconds. On failure,\n+    /// `epoll_wait()` returns -1 and errno is set to indicate the error.\n+    ///\n+    /// <https://man7.org/linux/man-pages/man2/epoll_wait.2.html>\n+    fn epoll_wait(\n+        &mut self,\n+        epfd: &OpTy<'tcx, Provenance>,\n+        events: &OpTy<'tcx, Provenance>,\n+        maxevents: &OpTy<'tcx, Provenance>,\n+        timeout: &OpTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n+        let this = self.eval_context_mut();\n+\n+        let epfd = this.read_scalar(epfd)?.to_i32()?;\n+        let _events = this.read_scalar(events)?.to_pointer(this)?;\n+        let _maxevents = this.read_scalar(maxevents)?.to_i32()?;\n+        let _timeout = this.read_scalar(timeout)?.to_i32()?;\n+\n+        let numevents = 0;\n+        if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n+            let _epfd = epfd.as_epoll_handle()?;\n+\n+            // FIXME return number of events ready when scheme for marking events ready exists\n+            Ok(Scalar::from_i32(numevents))\n+        } else {\n+            Ok(Scalar::from_i32(this.handle_not_found()?))\n+        }\n+    }\n+\n     /// This function creates an `Event` that is used as an event wait/notify mechanism by\n     /// user-space applications, and by the kernel to notify user-space applications of events.\n     /// The `Event` contains an `u64` counter maintained by the kernel. The counter is initialized\n@@ -142,7 +198,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         let fh = &mut this.machine.file_handler;\n-        let fd = fh.insert_fd(Box::new(Event { val }));\n+        let fd = fh.insert_fd(Box::new(Event { val: Cell::new(val.into()) }));\n         Ok(Scalar::from_i32(fd))\n     }\n "}, {"sha": "b28a6e0c56eca8e27eba5e48fde7b3157d472dfe", "filename": "src/tools/miri/src/shims/unix/linux/fd/event.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -2,6 +2,7 @@ use crate::shims::unix::fs::FileDescriptor;\n \n use rustc_const_eval::interpret::InterpResult;\n \n+use std::cell::Cell;\n use std::io;\n \n /// A kind of file descriptor created by `eventfd`.\n@@ -13,7 +14,9 @@ use std::io;\n /// <https://man.netbsd.org/eventfd.2>\n #[derive(Debug)]\n pub struct Event {\n-    pub val: u32,\n+    /// The object contains an unsigned 64-bit integer (uint64_t) counter that is maintained by the\n+    /// kernel. This counter is initialized with the value specified in the argument initval.\n+    pub val: Cell<u64>,\n }\n \n impl FileDescriptor for Event {\n@@ -22,7 +25,7 @@ impl FileDescriptor for Event {\n     }\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n-        Ok(Box::new(Event { val: self.val }))\n+        Ok(Box::new(Event { val: self.val.clone() }))\n     }\n \n     fn is_tty(&self) -> bool {\n@@ -35,4 +38,32 @@ impl FileDescriptor for Event {\n     ) -> InterpResult<'tcx, io::Result<i32>> {\n         Ok(Ok(0))\n     }\n+\n+    /// A write call adds the 8-byte integer value supplied in\n+    /// its buffer to the counter.  The maximum value that may be\n+    /// stored in the counter is the largest unsigned 64-bit value\n+    /// minus 1 (i.e., 0xfffffffffffffffe).  If the addition would\n+    /// cause the counter's value to exceed the maximum, then the\n+    /// write either blocks until a read is performed on the\n+    /// file descriptor, or fails with the error EAGAIN if the\n+    /// file descriptor has been made nonblocking.\n+\n+    /// A write fails with the error EINVAL if the size of the\n+    /// supplied buffer is less than 8 bytes, or if an attempt is\n+    /// made to write the value 0xffffffffffffffff.\n+    ///\n+    /// FIXME: use endianness\n+    fn write<'tcx>(\n+        &self,\n+        _communicate_allowed: bool,\n+        bytes: &[u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        let v1 = self.val.get();\n+        // FIXME handle blocking when addition results in exceeding the max u64 value\n+        // or fail with EAGAIN if the file descriptor is nonblocking.\n+        let v2 = v1.checked_add(u64::from_be_bytes(bytes.try_into().unwrap())).unwrap();\n+        self.val.set(v2);\n+        assert_eq!(8, bytes.len());\n+        Ok(Ok(8))\n+    }\n }"}, {"sha": "f4e7824d91df47583e64493b7763677c3d2b573c", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -55,6 +55,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let result = this.epoll_ctl(epfd, op, fd, event)?;\n                 this.write_scalar(result, dest)?;\n             }\n+            \"epoll_wait\" => {\n+                let [epfd, events, maxevents, timeout] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.epoll_wait(epfd, events, maxevents, timeout)?;\n+                this.write_scalar(result, dest)?;\n+            }\n             \"eventfd\" => {\n                 let [val, flag] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "048577ef15a611f55fac354d7876fa1c81c94d16", "filename": "src/tools/miri/test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -23,16 +23,16 @@ fn main() {\n     // (We rely on the test runner to always disable isolation when passing no arguments.)\n     if std::env::args().len() <= 1 {\n         fn host_to_target_path(path: String) -> PathBuf {\n-            use std::ffi::{CStr, CString};\n+            use std::ffi::{c_char, CStr, CString};\n \n             let path = CString::new(path).unwrap();\n             let mut out = Vec::with_capacity(1024);\n \n             unsafe {\n                 extern \"Rust\" {\n                     fn miri_host_to_target_path(\n-                        path: *const i8,\n-                        out: *mut i8,\n+                        path: *const c_char,\n+                        out: *mut c_char,\n                         out_size: usize,\n                     ) -> usize;\n                 }"}, {"sha": "52161098788b50b4b41dac12edb9678e820e8e54", "filename": "src/tools/miri/test-cargo-miri/subcrate/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -5,16 +5,16 @@ fn main() {\n     println!(\"subcrate running\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "1681c721dc2e22ae912bb97d860eb288a937b71d", "filename": "src/tools/miri/test-cargo-miri/subcrate/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -8,16 +8,16 @@ fn main() {\n     println!(\"subcrate testing\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "8be1ee54672d863ca8bb0ea547aef9d22b0fece3", "filename": "src/tools/miri/test_dependencies/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -292,9 +292,9 @@ dependencies = [\n \n [[package]]\n name = \"tokio\"\n-version = \"1.23.1\"\n+version = \"1.24.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"38a54aca0c15d014013256222ba0ebed095673f89345dd79119d912eb561b7a8\"\n+checksum = \"597a12a59981d9e3c38d216785b0c37399f6e415e8d0712047620f189371b0bb\"\n dependencies = [\n  \"autocfg\",\n  \"bytes\","}, {"sha": "d1ff33379e40accc566359323d309cc7dd38825c", "filename": "src/tools/miri/test_dependencies/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -18,6 +18,6 @@ rand = { version = \"0.8\", features = [\"small_rng\"] }\n \n [target.'cfg(not(any(target_arch = \"wasm32\", target_arch = \"wasm64\")))'.dependencies]\n page_size = \"0.5\"\n-tokio = { version = \"1.23\", features = [\"full\"] }\n+tokio = { version = \"1.24\", features = [\"full\"] }\n \n [workspace]"}, {"sha": "4a43db0aac50ae3ad4ae6a37291aea0e0182d31b", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -3,7 +3,7 @@\n \n #![allow(dead_code, unused_variables)]\n \n-use std::{ptr, mem};\n+use std::{mem, ptr};\n \n #[repr(packed)]\n struct Foo {"}, {"sha": "cd071a7f32ac1f0a913437f172bd0caf9c4f4fcf", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -5,7 +5,7 @@\n #![feature(io_error_uncategorized)]\n \n use std::convert::TryInto;\n-use std::ffi::{CStr, CString};\n+use std::ffi::{c_char, CStr, CString};\n use std::fs::{canonicalize, remove_dir_all, remove_file, File};\n use std::io::{Error, ErrorKind, Write};\n use std::os::unix::ffi::OsStrExt;\n@@ -31,7 +31,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "98e1c3a0adb2ecef8e009918c4b5845661632bd9", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -7,7 +7,7 @@ use std::os::unix::io::AsRawFd;\n use std::path::PathBuf;\n \n fn tmp() -> PathBuf {\n-    use std::ffi::{CStr, CString};\n+    use std::ffi::{c_char, CStr, CString};\n \n     let path = std::env::var(\"MIRI_TEMP\")\n         .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n@@ -17,7 +17,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "1341484dda4753e1c4beb13b09f10969f29baae5", "filename": "src/tools/miri/tests/pass-dep/tokio/sleep.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -0,0 +1,14 @@\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance -Zmiri-backtrace=full\n+//@only-target-x86_64-unknown-linux: support for tokio only on linux and x86\n+\n+use tokio::time::{sleep, Duration, Instant};\n+\n+#[tokio::main]\n+async fn main() {\n+    let start = Instant::now();\n+    sleep(Duration::from_secs(1)).await;\n+    // It takes 96 millisecond to sleep for 1 millisecond\n+    // It takes 1025 millisecond to sleep for 1 second\n+    let time_elapsed = &start.elapsed().as_millis();\n+    assert!(time_elapsed > &1000, \"{}\", time_elapsed);\n+}"}, {"sha": "0bca7cc069a78310f7e2b94516a03d679846b92f", "filename": "src/tools/miri/tests/pass-dep/tokio/tokio_mvp.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -1,5 +1,5 @@\n // Need to disable preemption to stay on the supported MVP codepath in mio.\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance\n //@only-target-x86_64-unknown-linux: support for tokio exists only on linux and x86\n \n #[tokio::main]", "previous_filename": "src/tools/miri/tests/pass-dep/tokio_mvp.rs"}, {"sha": "1fac16352a448f9a9cfe388dc3c15f826ec442f6", "filename": "src/tools/miri/tests/pass/dyn-star.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-star.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -1,5 +1,8 @@\n #![feature(dyn_star)]\n #![allow(incomplete_features)]\n+#![feature(custom_inner_attributes)]\n+// rustfmt destroys `dyn* Trait` syntax\n+#![rustfmt::skip]\n \n use std::fmt::{Debug, Display};\n "}, {"sha": "489fae66ffb2b4c53c6ba92bafc3350399f5a6a0", "filename": "src/tools/miri/tests/pass/move-data-across-await-point.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-data-across-await-point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-data-across-await-point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-data-across-await-point.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -0,0 +1,81 @@\n+use std::future::Future;\n+use std::ptr;\n+\n+// This test:\n+// - Compares addresses of non-Copy data before and after moving it\n+// - Writes to the pointer after it has moved across the await point\n+//\n+// This is only meant to assert current behavior, not guarantee that this is\n+// how it should work in the future. In fact, upcoming changes to rustc\n+// *should* break these tests.\n+// See: https://github.com/rust-lang/rust/issues/62958\n+async fn data_moved_async() {\n+    async fn helper(mut data: Vec<u8>, raw_pointer: *mut Vec<u8>) {\n+        let raw_pointer2 = ptr::addr_of_mut!(data);\n+        // `raw_pointer` points to the original location where the Vec was stored in the caller.\n+        // `data` is where that Vec (to be precise, its ptr+capacity+len on-stack data)\n+        // got moved to. Those will usually not be the same since the Vec got moved twice\n+        // (into the function call, and then into the generator upvar).\n+        assert_ne!(raw_pointer, raw_pointer2);\n+        unsafe {\n+            // This writes into the `x` in `data_moved_async`, re-initializing it.\n+            std::ptr::write(raw_pointer, vec![3]);\n+        }\n+    }\n+    // Vec<T> is not Copy\n+    let mut x: Vec<u8> = vec![2];\n+    let raw_pointer = ptr::addr_of_mut!(x);\n+    helper(x, raw_pointer).await;\n+    unsafe {\n+        assert_eq!(*raw_pointer, vec![3]);\n+        // Drop to prevent leak.\n+        std::ptr::drop_in_place(raw_pointer);\n+    }\n+}\n+\n+// Same thing as above, but non-async.\n+fn data_moved() {\n+    fn helper(mut data: Vec<u8>, raw_pointer: *mut Vec<u8>) {\n+        let raw_pointer2 = ptr::addr_of_mut!(data);\n+        assert_ne!(raw_pointer, raw_pointer2);\n+        unsafe {\n+            std::ptr::write(raw_pointer, vec![3]);\n+        }\n+    }\n+\n+    let mut x: Vec<u8> = vec![2];\n+    let raw_pointer = ptr::addr_of_mut!(x);\n+    helper(x, raw_pointer);\n+    unsafe {\n+        assert_eq!(*raw_pointer, vec![3]);\n+        std::ptr::drop_in_place(raw_pointer);\n+    }\n+}\n+\n+fn run_fut<T>(fut: impl Future<Output = T>) -> T {\n+    use std::sync::Arc;\n+    use std::task::{Context, Poll, Wake, Waker};\n+\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    let waker = Waker::from(Arc::new(MyWaker));\n+    let mut context = Context::from_waker(&waker);\n+\n+    let mut pinned = Box::pin(fut);\n+    loop {\n+        match pinned.as_mut().poll(&mut context) {\n+            Poll::Pending => continue,\n+            Poll::Ready(v) => return v,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    run_fut(data_moved_async());\n+    data_moved();\n+}"}, {"sha": "7a9974f393895e44ddcbebbcd79db21014a4ce4f", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -6,7 +6,7 @@\n #![feature(is_terminal)]\n \n use std::collections::HashMap;\n-use std::ffi::OsString;\n+use std::ffi::{c_char, OsString};\n use std::fs::{\n     canonicalize, create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename,\n     File, OpenOptions,\n@@ -39,7 +39,11 @@ fn host_to_target_path(path: String) -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "afd3db5e0525ef416737786bc8bb896bd8eed7f8", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -0,0 +1,71 @@\n+// edition: 2021\n+// known-bug: #108309\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(min_specialization)]\n+\n+struct MyStruct;\n+\n+trait MyTrait<T> {\n+    async fn foo(_: T) -> &'static str;\n+}\n+\n+impl<T> MyTrait<T> for MyStruct {\n+    default async fn foo(_: T) -> &'static str {\n+        \"default\"\n+    }\n+}\n+\n+impl MyTrait<i32> for MyStruct {\n+    async fn foo(_: i32) -> &'static str {\n+        \"specialized\"\n+    }\n+}\n+\n+async fn async_main() {\n+    assert_eq!(MyStruct::foo(42).await, \"specialized\");\n+    assert_eq!(indirection(42).await, \"specialized\");\n+}\n+\n+async fn indirection<T>(x: T) -> &'static str {\n+    //explicit type coercion is currently necessary\n+    // because of https://github.com/rust-lang/rust/issues/67918\n+    <MyStruct as MyTrait<T>>::foo(x).await\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "371122ea71ec0e2ec43918f8638a737945f7a413", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-specializable-projection.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:14:35\n+   |\n+LL |     default async fn foo(_: T) -> &'static str {\n+   |                                   ^^^^^^^^^^^^ expected associated type, found future\n+   |\n+note: type in trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:10:27\n+   |\n+LL |     async fn foo(_: T) -> &'static str;\n+   |                           ^^^^^^^^^^^^\n+   = note: expected signature `fn(_) -> impl Future<Output = &'static str>`\n+              found signature `fn(_) -> impl Future<Output = &'static str>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "92cb60a06a2b0bae16bf35954db27428b5776588", "filename": "tests/ui/lifetimes/issue-107988.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Flifetimes%2Fissue-107988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Flifetimes%2Fissue-107988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-107988.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -0,0 +1,13 @@\n+pub trait TraitEngine<'tcx>: 'tcx {}\n+\n+pub trait TraitEngineExt<'tcx> {\n+    fn register_predicate_obligations(&mut self);\n+}\n+\n+impl<T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+  //~^ ERROR use of undeclared lifetime name `'tcx`\n+  //~| ERROR use of undeclared lifetime name `'tcx`\n+    fn register_predicate_obligations(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "c2d8c7050e97f710eac422c83dad8bbd9841db02", "filename": "tests/ui/lifetimes/issue-107988.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Flifetimes%2Fissue-107988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Flifetimes%2Fissue-107988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-107988.stderr?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -0,0 +1,27 @@\n+error[E0261]: use of undeclared lifetime name `'tcx`\n+  --> $DIR/issue-107988.rs:7:52\n+   |\n+LL | impl<T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+   |      -                                             ^^^^ undeclared lifetime\n+   |      |\n+   |      help: consider introducing lifetime `'tcx` here: `'tcx,`\n+\n+error[E0261]: use of undeclared lifetime name `'tcx`\n+  --> $DIR/issue-107988.rs:7:30\n+   |\n+LL | impl<T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+   |                              ^^^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'tcx` lifetime\n+   |\n+LL | impl<T: ?Sized + for<'tcx> TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+   |                  +++++++++\n+help: consider introducing lifetime `'tcx` here\n+   |\n+LL | impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+   |      +++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "ee1c8e562fc335a35380e43409277a1ad0abe5a7", "filename": "tests/ui/parser/match-arm-without-braces.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -2,10 +2,14 @@ error: `match` arm body without braces\n   --> $DIR/match-arm-without-braces.rs:26:27\n    |\n LL |         Some(Val::Foo) => 3;\n-   |                        -- ^- help: use a comma to end a `match` arm expression: `,`\n-   |                        |  |\n-   |                        |  this statement is not surrounded by a body\n+   |                        -- ^ this statement is not surrounded by a body\n+   |                        |\n    |                        while parsing the `match` arm starting here\n+   |\n+help: replace `;` with `,` to end a `match` arm expression\n+   |\n+LL |         Some(Val::Foo) => 3,\n+   |                            ~\n \n error: `match` arm body without braces\n   --> $DIR/match-arm-without-braces.rs:31:11"}, {"sha": "e2cf9508757be7545ed92e75cf8ac602ceb9589d", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -9,5 +9,5 @@ extern crate p1;\n extern crate p2;\n \n #[rustc_diagnostic_item = \"Foo\"]\n-pub struct Foo {} //~ ERROR duplicate diagnostic item found\n+pub struct Foo {} //~ ERROR duplicate diagnostic item in crate `duplicate_diagnostic`: `Foo`\n fn main() {}"}, {"sha": "26bd6a82e341722980cbc7870614ca8ae4232382", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -2,11 +2,13 @@ error: duplicate diagnostic item in crate `p2`: `Foo`.\n    |\n    = note: the diagnostic item is first defined in crate `p1`.\n \n-error: duplicate diagnostic item found: `Foo`.\n+error: duplicate diagnostic item in crate `duplicate_diagnostic`: `Foo`.\n   --> $DIR/duplicate-diagnostic.rs:12:1\n    |\n LL | pub struct Foo {}\n    | ^^^^^^^^^^^^^^\n+   |\n+   = note: the diagnostic item is first defined in crate `p2`.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7607d522c1b92dc736752440adde19ddb985b8f", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "patch": "@@ -482,7 +482,6 @@ compiler-team = [\n     \"@davidtwco\",\n     \"@oli-obk\",\n     \"@lcnr\",\n-    \"@nagisa\",\n     \"@wesleywiser\",\n     \"@michaelwoerister\",\n ]\n@@ -552,7 +551,6 @@ mir = [\n     \"@oli-obk\",\n ]\n mir-opt = [\n-    \"@nagisa\",\n     \"@oli-obk\",\n     \"@wesleywiser\",\n ]"}]}