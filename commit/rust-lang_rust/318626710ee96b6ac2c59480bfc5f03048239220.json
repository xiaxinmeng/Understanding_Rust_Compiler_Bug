{"sha": "318626710ee96b6ac2c59480bfc5f03048239220", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxODYyNjcxMGVlOTZiNmFjMmM1OTQ4MGJmYzVmMDMwNDgyMzkyMjA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-09-18T21:46:56Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-12-07T01:50:49Z"}, "message": "Do not make local copies of inline fns in debug mode", "tree": {"sha": "684c7eeea8c270579d71671b90e82bc1321c7091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684c7eeea8c270579d71671b90e82bc1321c7091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/318626710ee96b6ac2c59480bfc5f03048239220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/318626710ee96b6ac2c59480bfc5f03048239220", "html_url": "https://github.com/rust-lang/rust/commit/318626710ee96b6ac2c59480bfc5f03048239220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/318626710ee96b6ac2c59480bfc5f03048239220/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "html_url": "https://github.com/rust-lang/rust/commit/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "b79c1a19a907e11d7f863fbf60ebe6e2f744088e", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/318626710ee96b6ac2c59480bfc5f03048239220/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318626710ee96b6ac2c59480bfc5f03048239220/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=318626710ee96b6ac2c59480bfc5f03048239220", "patch": "@@ -1,7 +1,6 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n-use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -103,17 +102,13 @@ impl<'tcx> MonoItem<'tcx> {\n                 // inlined function. If we're inlining into all CGUs then we'll\n                 // be creating a local copy per CGU.\n                 if generate_cgu_internal_copies {\n-                    return InstantiationMode::LocalCopy;\n-                }\n-\n-                // Finally, if this is `#[inline(always)]` we're sure to respect\n-                // that with an inline copy per CGU, but otherwise we'll be\n-                // creating one copy of this `#[inline]` function which may\n-                // conflict with upstream crates as it could be an exported\n-                // symbol.\n-                match tcx.codegen_fn_attrs(instance.def_id()).inline {\n-                    InlineAttr::Always => InstantiationMode::LocalCopy,\n-                    _ => InstantiationMode::GloballyShared { may_conflict: true },\n+                    InstantiationMode::LocalCopy\n+                } else {\n+                    // Finally, if we've reached this point, then we should optimize for\n+                    // compilation speed. In that regard, we will ignore any `#[inline]`\n+                    // annotations on the function and simply codegen it as usual. This could\n+                    // conflict with upstream crates as it could be an exported symbol.\n+                    InstantiationMode::GloballyShared { may_conflict: true }\n                 }\n             }\n             MonoItem::Static(..) | MonoItem::GlobalAsm(..) => {"}, {"sha": "d12a23fbbf0137b528f3cbd2739f2407e6cd2a5f", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/Makefile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/318626710ee96b6ac2c59480bfc5f03048239220/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/318626710ee96b6ac2c59480bfc5f03048239220/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile?ref=318626710ee96b6ac2c59480bfc5f03048239220", "patch": "@@ -1,7 +1,12 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=0\n+\tif ![cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b']; then \\\n+\t\techo \"not found call instruction when one was expected\"; \\\n+\t\texit 1; \\\n+\tfi\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=1\n \tif cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b'; then \\\n \t\techo \"found call instruction when one wasn't expected\"; \\\n \t\texit 1; \\"}]}