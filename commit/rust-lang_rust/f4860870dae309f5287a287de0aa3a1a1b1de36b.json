{"sha": "f4860870dae309f5287a287de0aa3a1a1b1de36b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ODYwODcwZGFlMzA5ZjUyODdhMjg3ZGUwYWEzYTFhMWIxZGUzNmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T13:55:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T15:25:35Z"}, "message": "scope-based resolve path", "tree": {"sha": "b487b5623db2a45f3c6cd3ae52e60b5fc90033a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b487b5623db2a45f3c6cd3ae52e60b5fc90033a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4860870dae309f5287a287de0aa3a1a1b1de36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4860870dae309f5287a287de0aa3a1a1b1de36b", "html_url": "https://github.com/rust-lang/rust/commit/f4860870dae309f5287a287de0aa3a1a1b1de36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4860870dae309f5287a287de0aa3a1a1b1de36b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f66e0f446a2bd2385cfd236856f2a73bd58a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f66e0f446a2bd2385cfd236856f2a73bd58a3d", "html_url": "https://github.com/rust-lang/rust/commit/68f66e0f446a2bd2385cfd236856f2a73bd58a3d"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "a0af59178349181bef551cc72fcafb0d5a579a51", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4860870dae309f5287a287de0aa3a1a1b1de36b/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4860870dae309f5287a287de0aa3a1a1b1de36b/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=f4860870dae309f5287a287de0aa3a1a1b1de36b", "patch": "@@ -42,8 +42,7 @@ pub(super) fn completions(\n             let module_scope = module.scope(db)?;\n             acc.extend(\n                 module_scope\n-                    .items\n-                    .iter()\n+                    .entries()\n                     .filter(|(_name, res)| {\n                         // Don't expose this item\n                         match res.import {\n@@ -162,14 +161,11 @@ fn complete_path(\n         Some(it) => it,\n     };\n     let module_scope = target_module.scope(db)?;\n-    let completions = module_scope\n-        .items\n-        .iter()\n-        .map(|(name, _res)| CompletionItem {\n-            label: name.to_string(),\n-            lookup: None,\n-            snippet: None,\n-        });\n+    let completions = module_scope.entries().map(|(name, _res)| CompletionItem {\n+        label: name.to_string(),\n+        lookup: None,\n+        snippet: None,\n+    });\n     acc.extend(completions);\n     Ok(())\n }"}, {"sha": "51bc84bf1c38dbe92ce8a7dbfcc2c9ef2d6b316e", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f4860870dae309f5287a287de0aa3a1a1b1de36b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4860870dae309f5287a287de0aa3a1a1b1de36b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=f4860870dae309f5287a287de0aa3a1a1b1de36b", "patch": "@@ -17,6 +17,7 @@ use crate::{\n     descriptors::{Path, PathKind, DescriptorDatabase},\n     input::SourceRootId,\n     arena::{Arena, Id},\n+    loc2id::DefLoc,\n };\n \n pub(crate) use self::nameres::ModuleScope;\n@@ -76,6 +77,20 @@ impl ModuleDescriptor {\n         Ok(res)\n     }\n \n+    fn new(\n+        db: &impl DescriptorDatabase,\n+        source_root_id: SourceRootId,\n+        module_id: ModuleId,\n+    ) -> Cancelable<ModuleDescriptor> {\n+        let module_tree = db._module_tree(source_root_id)?;\n+        let res = ModuleDescriptor {\n+            tree: module_tree,\n+            source_root_id,\n+            module_id,\n+        };\n+        Ok(res)\n+    }\n+\n     /// Returns `mod foo;` or `mod foo {}` node whihc declared this module.\n     /// Returns `None` for the root module\n     pub fn parent_link_source(\n@@ -133,25 +148,37 @@ impl ModuleDescriptor {\n         Ok(res)\n     }\n \n-    pub(crate) fn resolve_path(&self, db: &impl DescriptorDatabase, path: Path) -> Cancelable<Option<ModuleDescriptor>> {\n-        let res = match self.do_resolve_path(path) {\n-            None => return Ok(None),\n-            Some(it) => it,\n+    pub(crate) fn resolve_path(\n+        &self,\n+        db: &impl DescriptorDatabase,\n+        path: Path,\n+    ) -> Cancelable<Option<ModuleDescriptor>> {\n+        macro_rules! ctry {\n+            ($expr:expr) => {\n+                match $expr {\n+                    None => return Ok(None),\n+                    Some(it) => it,\n+                }\n+            };\n         };\n-        Ok(Some(res))\n-    }\n \n-    fn do_resolve_path(&self, path: Path) -> Option<ModuleDescriptor> {\n         let mut curr = match path.kind {\n             PathKind::Crate => self.crate_root(),\n             PathKind::Self_ | PathKind::Plain => self.clone(),\n-            PathKind::Super => self.parent()?,\n+            PathKind::Super => ctry!(self.parent()),\n         };\n+\n         let segments = path.segments;\n         for name in segments {\n-            curr = curr.child(&name)?;\n+            let scope = curr.scope(db)?;\n+            let def_id = ctry!(ctry!(scope.get(&name)).def_id);\n+            curr = match db.id_maps().def_loc(def_id) {\n+                DefLoc::Module { id, source_root } => ModuleDescriptor::new(db, source_root, id)?,\n+                _ => return Ok(None),\n+            };\n         }\n-        Some(curr)\n+\n+        Ok(Some(curr))\n     }\n \n     pub fn problems(&self, db: &impl DescriptorDatabase) -> Vec<(SyntaxNode, Problem)> {"}, {"sha": "d2964f67f9287eadc59d6ffd774a6216203161e7", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4860870dae309f5287a287de0aa3a1a1b1de36b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4860870dae309f5287a287de0aa3a1a1b1de36b/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=f4860870dae309f5287a287de0aa3a1a1b1de36b", "patch": "@@ -103,7 +103,16 @@ pub(crate) struct ItemMap {\n \n #[derive(Debug, Default, PartialEq, Eq, Clone)]\n pub(crate) struct ModuleScope {\n-    pub(crate) items: FxHashMap<SmolStr, Resolution>,\n+    items: FxHashMap<SmolStr, Resolution>,\n+}\n+\n+impl ModuleScope {\n+    pub(crate) fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a SmolStr, &Resolution)> + 'a {\n+        self.items.iter()\n+    }\n+    pub(crate) fn get(&self, name: &SmolStr) -> Option<&Resolution> {\n+        self.items.get(name)\n+    }\n }\n \n /// A set of items and imports declared inside a module, without relation to"}]}