{"sha": "f98ffa271d0112d04b482e1d61228d99bf006ccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OGZmYTI3MWQwMTEyZDA0YjQ4MmUxZDYxMjI4ZDk5YmYwMDZjY2Y=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-08-14T13:54:12Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-08-14T13:54:12Z"}, "message": "Fix FP for `same_item_push`\n\nDon't emit a lint when `pushed_item` was declared as mutable variable.", "tree": {"sha": "e8e76c3bf702a3e9b41a28a119740ebe66f97fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e76c3bf702a3e9b41a28a119740ebe66f97fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98ffa271d0112d04b482e1d61228d99bf006ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98ffa271d0112d04b482e1d61228d99bf006ccf", "html_url": "https://github.com/rust-lang/rust/commit/f98ffa271d0112d04b482e1d61228d99bf006ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98ffa271d0112d04b482e1d61228d99bf006ccf/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c", "html_url": "https://github.com/rust-lang/rust/commit/dc1e09bdc1b1fdfe35293efd9fa6884b06581b6c"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "f7db2563d2b1a0a6b7d3ede53d8d2b2f662bb329", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffa271d0112d04b482e1d61228d99bf006ccf/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffa271d0112d04b482e1d61228d99bf006ccf/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f98ffa271d0112d04b482e1d61228d99bf006ccf", "patch": "@@ -1141,11 +1141,36 @@ fn detect_same_item_push<'tcx>(\n     if same_item_push_visitor.should_lint {\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push {\n             // Make sure that the push does not involve possibly mutating values\n-            if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n-                if let PatKind::Wild = pat.kind {\n-                    let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n-                    let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n-\n+            if let PatKind::Wild = pat.kind {\n+                let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n+                let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+                if let ExprKind::Path(ref qpath) = pushed_item.kind {\n+                    if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id) {\n+                        let node = cx.tcx.hir().get(hir_id);\n+                        if_chain! {\n+                            if let Node::Binding(pat) = node;\n+                            if let PatKind::Binding(bind_ann, ..) = pat.kind;\n+                            then {\n+                                match bind_ann {\n+                                    BindingAnnotation::RefMut | BindingAnnotation::Mutable => {},\n+                                    _ => {\n+                                        span_lint_and_help(\n+                                            cx,\n+                                            SAME_ITEM_PUSH,\n+                                            vec.span,\n+                                            \"it looks like the same item is being pushed into this Vec\",\n+                                            None,\n+                                            &format!(\n+                                                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                                item_str, vec_str, item_str\n+                                            ),\n+                                        )\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n                     span_lint_and_help(\n                         cx,\n                         SAME_ITEM_PUSH,"}, {"sha": "bfe27e020445c77b83c4ddfb14f773eb4ee36b85", "filename": "tests/ui/same_item_push.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f98ffa271d0112d04b482e1d61228d99bf006ccf/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98ffa271d0112d04b482e1d61228d99bf006ccf/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=f98ffa271d0112d04b482e1d61228d99bf006ccf", "patch": "@@ -86,4 +86,12 @@ fn main() {\n     for a in vec_a {\n         vec12.push(2u8.pow(a.kind));\n     }\n+\n+    // Fix #5902\n+    let mut vec13: Vec<u8> = Vec::new();\n+    let mut item = 0;\n+    for _ in 0..10 {\n+        vec13.push(item);\n+        item += 10;\n+    }\n }"}]}