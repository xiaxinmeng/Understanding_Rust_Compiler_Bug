{"sha": "a8b854bde0145f0ca052f067a4b86b778ecc17ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Yjg1NGJkZTAxNDVmMGNhMDUyZjA2N2E0Yjg2Yjc3OGVjYzE3YWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-01T06:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-01T06:29:09Z"}, "message": "Rollup merge of #60287 - Zoxc:the-arena-variances_of, r=eddyb\n\nUse references for variances_of\n\nBased on https://github.com/rust-lang/rust/pull/60280.\n\ncc @varkor\nr? @eddyb", "tree": {"sha": "3d3952464c2929f290246105934b7cbaeb5b7e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d3952464c2929f290246105934b7cbaeb5b7e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b854bde0145f0ca052f067a4b86b778ecc17ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyTy1CRBK7hj4Ov3rIwAAdHIIAHPaRkh0P93A0gwi4nGtZ7Os\nRXq0m2ebZM0BGpwGTR/qvlq89liQqMKYgDbUFhboKy6cPTRgYoTgvZGdeGalw3C4\nHfNluaIABVCJNH+cfGi5/IF3+Fj3J/oheZuXbcm/9aAX7bpUY5F+Psbl6DLTfa+S\nGB74ccAUrRskJWkSu+QlJP6Yh8BoQ2i1f62t2hsY0ETk0sPUVv1lvvFbYvdarWPQ\n5KxZN/6vXXsJ1YmbNd9hBaXgjMtcvK/f2UByKWG5rQeThMAiAhRQLrDer33gizgZ\nv9/mLw6g8WGWwmL7rXwfa/xfTX/VYQddPXj/7aSn25j4gWDDCgXgYW69MghZ6LA=\n=3mnw\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d3952464c2929f290246105934b7cbaeb5b7e0a\nparent 834bd1959cc06bbae08e7de65f09f326d1702a95\nparent d2ff829433222f563425f3f7b13d20002e0708fd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556692149 +0200\ncommitter GitHub <noreply@github.com> 1556692149 +0200\n\nRollup merge of #60287 - Zoxc:the-arena-variances_of, r=eddyb\n\nUse references for variances_of\n\nBased on https://github.com/rust-lang/rust/pull/60280.\n\ncc @varkor\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b854bde0145f0ca052f067a4b86b778ecc17ab", "html_url": "https://github.com/rust-lang/rust/commit/a8b854bde0145f0ca052f067a4b86b778ecc17ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b854bde0145f0ca052f067a4b86b778ecc17ab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834bd1959cc06bbae08e7de65f09f326d1702a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/834bd1959cc06bbae08e7de65f09f326d1702a95", "html_url": "https://github.com/rust-lang/rust/commit/834bd1959cc06bbae08e7de65f09f326d1702a95"}, {"sha": "d2ff829433222f563425f3f7b13d20002e0708fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ff829433222f563425f3f7b13d20002e0708fd", "html_url": "https://github.com/rust-lang/rust/commit/d2ff829433222f563425f3f7b13d20002e0708fd"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "b48d81f2ef8f4731623fb7ffe50747ab64954529", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -144,6 +144,14 @@ impl<'tcx> Arena<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn alloc_slice<T: Copy>(&self, value: &[T]) -> &mut [T] {\n+        if value.len() == 0 {\n+            return &mut []\n+        }\n+        self.dropless.alloc_slice(value)\n+    }\n+\n     pub fn alloc_from_iter<\n         T: ArenaAllocatable,\n         I: IntoIterator<Item = T>"}, {"sha": "b96ef1b7a869bd0a8711ba804348ece050263342", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -245,13 +245,13 @@ rustc_queries! {\n \n         /// Get a map with the variance of every item; use `item_variance`\n         /// instead.\n-        query crate_variances(_: CrateNum) -> Lrc<ty::CrateVariancesMap> {\n+        query crate_variances(_: CrateNum) -> Lrc<ty::CrateVariancesMap<'tcx>> {\n             desc { \"computing the variances for items in this crate\" }\n         }\n \n         /// Maps from def-id of a type or region parameter to its\n         /// (inferred) variance.\n-        query variances_of(_: DefId) -> Lrc<Vec<ty::Variance>> {}\n+        query variances_of(_: DefId) -> &'tcx [ty::Variance] {}\n     }\n \n     TypeChecking {"}, {"sha": "6b938ea2fccdc62e4e37673ed0f423778306827a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -332,15 +332,11 @@ pub enum Variance {\n /// `tcx.variances_of()` to get the variance for a *particular*\n /// item.\n #[derive(HashStable)]\n-pub struct CrateVariancesMap {\n+pub struct CrateVariancesMap<'tcx> {\n     /// For each item with generics, maps to a vector of the variance\n     /// of its generics. If an item has no generics, it will have no\n     /// entry.\n-    pub variances: FxHashMap<DefId, Lrc<Vec<ty::Variance>>>,\n-\n-    /// An empty vector, useful for cloning.\n-    #[stable_hasher(ignore)]\n-    pub empty_variance: Lrc<Vec<ty::Variance>>,\n+    pub variances: FxHashMap<DefId, &'tcx [ty::Variance]>,\n }\n \n impl Variance {"}, {"sha": "2638a1c7c8808e065c69d3a063e569e5fa8b8128", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -60,7 +60,7 @@ pub trait TypeRelation<'a, 'gcx: 'a+'tcx, 'tcx: 'a> : Sized {\n                b_subst);\n \n         let opt_variances = self.tcx().variances_of(item_def_id);\n-        relate_substs(self, Some(&opt_variances), a_subst, b_subst)\n+        relate_substs(self, Some(opt_variances), a_subst, b_subst)\n     }\n \n     /// Switch variance for the purpose of relating `a` and `b`.\n@@ -122,7 +122,7 @@ impl<'tcx> Relate<'tcx> for ty::TypeAndMut<'tcx> {\n }\n \n pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,\n-                                        variances: Option<&Vec<ty::Variance>>,\n+                                        variances: Option<&[ty::Variance]>,\n                                         a_subst: SubstsRef<'tcx>,\n                                         b_subst: SubstsRef<'tcx>)\n                                         -> RelateResult<'tcx, SubstsRef<'tcx>>"}, {"sha": "b3439e4c9708f069a3b4624bc78e449fbf3aafcd", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -106,7 +106,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let _ = cdata;\n         tcx.calculate_dtor(def_id, &mut |_,_| Ok(()))\n     }\n-    variances_of => { Lrc::new(cdata.get_item_variances(def_id.index)) }\n+    variances_of => { tcx.arena.alloc_from_iter(cdata.get_item_variances(def_id.index)) }\n     associated_item_def_ids => {\n         let mut result = vec![];\n         cdata.each_child_of_item(def_id.index,"}, {"sha": "88ee1d79f5435dd165bc30e1402a1c191f5915fa", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -36,7 +36,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n-                             -> Lrc<CrateVariancesMap> {\n+                             -> Lrc<CrateVariancesMap<'tcx>> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n@@ -45,7 +45,7 @@ fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n }\n \n fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n-                          -> Lrc<Vec<ty::Variance>> {\n+                          -> &'tcx [ty::Variance] {\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {\n         // Variance not relevant.\n@@ -88,6 +88,6 @@ fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n \n     let crate_map = tcx.crate_variances(LOCAL_CRATE);\n     crate_map.variances.get(&item_def_id)\n-                       .unwrap_or(&crate_map.empty_variance)\n-                       .clone()\n+                       .map(|p| *p)\n+                       .unwrap_or(&[])\n }"}, {"sha": "8edf3c52ccc221807d34fdeb65cf6f04f63b11ae", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b854bde0145f0ca052f067a4b86b778ecc17ab/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=a8b854bde0145f0ca052f067a4b86b778ecc17ab", "patch": "@@ -8,7 +8,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n \n use super::constraints::*;\n use super::terms::*;\n@@ -23,7 +22,9 @@ struct SolveContext<'a, 'tcx: 'a> {\n     solutions: Vec<ty::Variance>,\n }\n \n-pub fn solve_constraints(constraints_cx: ConstraintContext<'_, '_>) -> ty::CrateVariancesMap {\n+pub fn solve_constraints<'tcx>(\n+    constraints_cx: ConstraintContext<'_, 'tcx>\n+) -> ty::CrateVariancesMap<'tcx> {\n     let ConstraintContext { terms_cx, constraints, .. } = constraints_cx;\n \n     let mut solutions = vec![ty::Bivariant; terms_cx.inferred_terms.len()];\n@@ -41,9 +42,8 @@ pub fn solve_constraints(constraints_cx: ConstraintContext<'_, '_>) -> ty::Crate\n     };\n     solutions_cx.solve();\n     let variances = solutions_cx.create_map();\n-    let empty_variance = Lrc::new(Vec::new());\n \n-    ty::CrateVariancesMap { variances, empty_variance }\n+    ty::CrateVariancesMap { variances }\n }\n \n impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n@@ -78,7 +78,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         }\n     }\n \n-    fn enforce_const_invariance(&self, generics: &ty::Generics, variances: &mut Vec<ty::Variance>) {\n+    fn enforce_const_invariance(&self, generics: &ty::Generics, variances: &mut [ty::Variance]) {\n         let tcx = self.terms_cx.tcx;\n \n         // Make all const parameters invariant.\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         }\n     }\n \n-    fn create_map(&self) -> FxHashMap<DefId, Lrc<Vec<ty::Variance>>> {\n+    fn create_map(&self) -> FxHashMap<DefId, &'tcx [ty::Variance]> {\n         let tcx = self.terms_cx.tcx;\n \n         let solutions = &self.solutions;\n@@ -103,22 +103,21 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n             let generics = tcx.generics_of(def_id);\n             let count = generics.count();\n \n-            let mut variances = solutions[start..(start + count)].to_vec();\n-            debug!(\"id={} variances={:?}\", id, variances);\n+            let variances = tcx.arena.alloc_slice(&solutions[start..(start + count)]);\n \n             // Const parameters are always invariant.\n-            self.enforce_const_invariance(generics, &mut variances);\n+            self.enforce_const_invariance(generics, variances);\n \n             // Functions are permitted to have unused generic parameters: make those invariant.\n             if let ty::FnDef(..) = tcx.type_of(def_id).sty {\n-                for variance in &mut variances {\n+                for variance in variances.iter_mut() {\n                     if *variance == ty::Bivariant {\n                         *variance = ty::Invariant;\n                     }\n                 }\n             }\n \n-            (def_id, Lrc::new(variances))\n+            (def_id, &*variances)\n         }).collect()\n     }\n "}]}