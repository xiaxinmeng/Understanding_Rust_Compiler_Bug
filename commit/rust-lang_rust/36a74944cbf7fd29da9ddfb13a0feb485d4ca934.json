{"sha": "36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTc0OTQ0Y2JmN2ZkMjlkYTlkZGZiMTNhMGZlYjQ4NWQ0Y2E5MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T02:27:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T02:27:09Z"}, "message": "Auto merge of #77526 - RalfJung:dont-promote-unions, r=lcnr\n\nstop promoting union field accesses in 'const'\n\nTurns out that promotion of union field accesses is the only difference between \"promotion in `const`/`static` bodies\" and \"explicit promotion\". So if we can remove this, we have finally achieved what I thought to already be the case -- that the bodies of `const`/`static` initializers behave the same as explicit promotion contexts.\n\nThe reason we do not want to promote union field accesses is that they can introduce UB, i.e., they can go wrong. We want to [minimize the ways promoteds can fail to evaluate](https://github.com/rust-lang/const-eval/issues/53). Also this change makes things more consistent overall, removing a special case that was added without much consideration (as far as I can tell).\n\nCc `@rust-lang/wg-const-eval`", "tree": {"sha": "a56dd1da976f80d31e824c64f9318e0a5d3869d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a56dd1da976f80d31e824c64f9318e0a5d3869d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "html_url": "https://github.com/rust-lang/rust/commit/36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c533c89b3d98a0154048c6a4e90252335253ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c533c89b3d98a0154048c6a4e90252335253ac8", "html_url": "https://github.com/rust-lang/rust/commit/7c533c89b3d98a0154048c6a4e90252335253ac8"}, {"sha": "d727f642b939305ed7a68e5f74875d4d52304ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d727f642b939305ed7a68e5f74875d4d52304ebf", "html_url": "https://github.com/rust-lang/rust/commit/d727f642b939305ed7a68e5f74875d4d52304ebf"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "292380d7fec2d638d7ffc9010ef77a81ae51926e", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "patch": "@@ -301,17 +301,6 @@ impl std::ops::Deref for Validator<'a, 'tcx> {\n struct Unpromotable;\n \n impl<'tcx> Validator<'_, 'tcx> {\n-    /// Determines if this code could be executed at runtime and thus is subject to codegen.\n-    /// That means even unused constants need to be evaluated.\n-    ///\n-    /// `const_kind` should not be used in this file other than through this method!\n-    fn maybe_runtime(&self) -> bool {\n-        match self.const_kind {\n-            None | Some(hir::ConstContext::ConstFn) => true,\n-            Some(hir::ConstContext::Static(_) | hir::ConstContext::Const) => false,\n-        }\n-    }\n-\n     fn validate_candidate(&self, candidate: Candidate) -> Result<(), Unpromotable> {\n         match candidate {\n             Candidate::Ref(loc) => {\n@@ -562,14 +551,12 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     }\n \n                     ProjectionElem::Field(..) => {\n-                        if self.maybe_runtime() {\n-                            let base_ty =\n-                                Place::ty_from(place.local, proj_base, self.body, self.tcx).ty;\n-                            if let Some(def) = base_ty.ty_adt_def() {\n-                                // No promotion of union field accesses.\n-                                if def.is_union() {\n-                                    return Err(Unpromotable);\n-                                }\n+                        let base_ty =\n+                            Place::ty_from(place.local, proj_base, self.body, self.tcx).ty;\n+                        if let Some(def) = base_ty.ty_adt_def() {\n+                            // No promotion of union field accesses.\n+                            if def.is_union() {\n+                                return Err(Unpromotable);\n                             }\n                         }\n                     }\n@@ -751,7 +738,14 @@ impl<'tcx> Validator<'_, 'tcx> {\n     ) -> Result<(), Unpromotable> {\n         let fn_ty = callee.ty(self.body, self.tcx);\n \n-        if !self.explicit && self.maybe_runtime() {\n+        // When doing explicit promotion and inside const/static items, we promote all (eligible) function calls.\n+        // Everywhere else, we require `#[rustc_promotable]` on the callee.\n+        let promote_all_const_fn = self.explicit\n+            || matches!(\n+                self.const_kind,\n+                Some(hir::ConstContext::Static(_) | hir::ConstContext::Const)\n+            );\n+        if !promote_all_const_fn {\n             if let ty::FnDef(def_id, _) = *fn_ty.kind() {\n                 // Never promote runtime `const fn` calls of\n                 // functions without `#[rustc_promotable]`."}, {"sha": "30bb9917bf7ade5125fc15826075aed0d77e2144", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "patch": "@@ -27,4 +27,9 @@ pub const fn promote_union() {\n     let _x: &'static i32 = &unsafe { U { x: 0 }.x }; //~ ERROR temporary value dropped while borrowed\n }\n \n+// We do not promote union field accesses in `const`, either.\n+const TEST_UNION: () = {\n+    let _x: &'static i32 = &unsafe { U { x: 0 }.x }; //~ ERROR temporary value dropped while borrowed\n+};\n+\n fn main() {}"}, {"sha": "6ca7a4c273ee22df755fe3d1bf7f4105a43ade61", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36a74944cbf7fd29da9ddfb13a0feb485d4ca934/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=36a74944cbf7fd29da9ddfb13a0feb485d4ca934", "patch": "@@ -38,6 +38,16 @@ LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 4 previous errors\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:32:29\n+   |\n+LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n+   |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |             |\n+   |             type annotation requires that borrow lasts for `'static`\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}]}