{"sha": "df6fa50f92af1232df5c044b8fe223817588ec8b", "node_id": "C_kwDOAAsO6NoAKGRmNmZhNTBmOTJhZjEyMzJkZjVjMDQ0YjhmZTIyMzgxNzU4OGVjOGI", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-12-31T15:11:17Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-12-31T15:29:08Z"}, "message": "feat(diagnostics): add new config to fill default expression\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "63ec4a2200a1d693a717a4daa3683fe87a0528b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ec4a2200a1d693a717a4daa3683fe87a0528b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6fa50f92af1232df5c044b8fe223817588ec8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6fa50f92af1232df5c044b8fe223817588ec8b", "html_url": "https://github.com/rust-lang/rust/commit/df6fa50f92af1232df5c044b8fe223817588ec8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6fa50f92af1232df5c044b8fe223817588ec8b/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0435463439471a81477ccdc0313f312abb14331e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0435463439471a81477ccdc0313f312abb14331e", "html_url": "https://github.com/rust-lang/rust/commit/0435463439471a81477ccdc0313f312abb14331e"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "b8482d0222b4ae20816c305b155c1e00605d2406", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=df6fa50f92af1232df5c044b8fe223817588ec8b", "patch": "@@ -118,7 +118,7 @@ pub use ide_db::{\n     symbol_index::Query,\n     RootDatabase, SymbolKind,\n };\n-pub use ide_diagnostics::{Diagnostic, DiagnosticsConfig, Severity};\n+pub use ide_diagnostics::{Diagnostic, DiagnosticsConfig, ExprFillDefaultMode, Severity};\n pub use ide_ssr::SsrError;\n pub use syntax::{TextRange, TextSize};\n pub use text_edit::{Indel, TextEdit};"}, {"sha": "b5860fb8587a24c6e31a20293aa97385f860a822", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=df6fa50f92af1232df5c044b8fe223817588ec8b", "patch": "@@ -64,15 +64,18 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     });\n     let missing_fields = ctx.sema.record_literal_missing_fields(&field_list_parent);\n \n-    let generate_default_expr = |ty: &Type| {\n-        let krate = ctx.sema.to_module_def(d.file.original_file(ctx.sema.db))?.krate();\n-        let default_trait = FamousDefs(&ctx.sema, Some(krate)).core_default_Default();\n-\n-        match default_trait {\n-            Some(default_trait) if ty.impls_trait(ctx.sema.db, default_trait, &[]) => {\n-                Some(make::ext::expr_default())\n+    let generate_fill_expr = |ty: &Type| match ctx.config.expr_fill_default {\n+        crate::ExprFillDefaultMode::Todo => Some(make::ext::expr_todo()),\n+        crate::ExprFillDefaultMode::DefaultImpl => {\n+            let krate = ctx.sema.to_module_def(d.file.original_file(ctx.sema.db))?.krate();\n+            let default_trait = FamousDefs(&ctx.sema, Some(krate)).core_default_Default();\n+\n+            match default_trait {\n+                Some(default_trait) if ty.impls_trait(ctx.sema.db, default_trait, &[]) => {\n+                    Some(make::ext::expr_default())\n+                }\n+                _ => Some(make::ext::expr_todo()),\n             }\n-            _ => Some(make::ext::expr_todo()),\n         }\n     };\n \n@@ -83,10 +86,10 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n             if ty.could_unify_with(ctx.sema.db, &candidate_ty) {\n                 None\n             } else {\n-                generate_default_expr(ty)\n+                generate_fill_expr(ty)\n             }\n         } else {\n-            generate_default_expr(ty)\n+            generate_fill_expr(ty)\n         };\n         let field =\n             make::record_expr_field(make::name_ref(&f.name(ctx.sema.db).to_smol_str()), field_expr)"}, {"sha": "f4c613840e3e26282b2a5ce0149bcd79e3a8affd", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=df6fa50f92af1232df5c044b8fe223817588ec8b", "patch": "@@ -129,10 +129,22 @@ pub enum Severity {\n     WeakWarning,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum ExprFillDefaultMode {\n+    Todo,\n+    DefaultImpl,\n+}\n+impl Default for ExprFillDefaultMode {\n+    fn default() -> Self {\n+        Self::Todo\n+    }\n+}\n+\n #[derive(Default, Debug, Clone)]\n pub struct DiagnosticsConfig {\n     pub disable_experimental: bool,\n     pub disabled: FxHashSet<String>,\n+    pub expr_fill_default: ExprFillDefaultMode,\n }\n \n struct DiagnosticsContext<'a> {"}, {"sha": "9cef5584576567289eb0494c03ab087939e5b4a3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6fa50f92af1232df5c044b8fe223817588ec8b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=df6fa50f92af1232df5c044b8fe223817588ec8b", "patch": "@@ -11,8 +11,8 @@ use std::{ffi::OsString, iter, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use ide::{\n-    AssistConfig, CompletionConfig, DiagnosticsConfig, HighlightRelatedConfig, HoverConfig,\n-    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n+    AssistConfig, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode, HighlightRelatedConfig,\n+    HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -45,6 +45,8 @@ use crate::{\n // parsing the old name.\n config_data! {\n     struct ConfigData {\n+        /// How assists will fill missing elements in an expression.\n+        assist_exprFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n         /// How imports should be grouped into use statements.\n         assist_importGranularity |\n         assist_importMergeBehavior |\n@@ -694,6 +696,10 @@ impl Config {\n         DiagnosticsConfig {\n             disable_experimental: !self.data.diagnostics_enableExperimental,\n             disabled: self.data.diagnostics_disabled.clone(),\n+            expr_fill_default: match self.data.assist_exprFillDefault {\n+                ExprFillDefaultDef::Todo => ExprFillDefaultMode::Todo,\n+                ExprFillDefaultDef::DefaultImpl => ExprFillDefaultMode::DefaultImpl,\n+            },\n         }\n     }\n     pub fn diagnostics_map(&self) -> DiagnosticsMapConfig {\n@@ -1059,6 +1065,15 @@ enum ManifestOrProjectJson {\n     ProjectJson(ProjectJsonData),\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum ExprFillDefaultDef {\n+    #[serde(alias = \"todo\")]\n+    Todo,\n+    #[serde(alias = \"defaultImpl\")]\n+    DefaultImpl,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum ImportGranularityDef {\n@@ -1253,6 +1268,14 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Merge imports from the same module into a single `use` statement.\"\n             ],\n         },\n+        \"ExprFillDefaultDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"todo\", \"defaultImpl\"],\n+            \"enumDescriptions\": [\n+                \"Fill missing elements with 'todo' macro\",\n+                \"Fill missing elements with Default::default()\"\n+            ],\n+        },\n         \"ImportGranularityDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"preserve\", \"crate\", \"module\", \"item\"],"}, {"sha": "28350374d1398fcf4bd4e0d360bf92f3830f450f", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df6fa50f92af1232df5c044b8fe223817588ec8b/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/df6fa50f92af1232df5c044b8fe223817588ec8b/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=df6fa50f92af1232df5c044b8fe223817588ec8b", "patch": "@@ -1,3 +1,8 @@\n+[[rust-analyzer.assist.exprFillDefault]]rust-analyzer.assist.exprFillDefault (default: `\"todo\"`)::\n++\n+--\n+How assists will fill missing elements in an expression.\n+--\n [[rust-analyzer.assist.importGranularity]]rust-analyzer.assist.importGranularity (default: `\"crate\"`)::\n +\n --"}, {"sha": "cbe9bf544274e6364919aff6f825aba233022bc7", "filename": "editors/code/package.json", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df6fa50f92af1232df5c044b8fe223817588ec8b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/df6fa50f92af1232df5c044b8fe223817588ec8b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=df6fa50f92af1232df5c044b8fe223817588ec8b", "patch": "@@ -378,6 +378,19 @@\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"$generated-start\": {},\n+                \"rust-analyzer.assist.exprFillDefault\": {\n+                    \"markdownDescription\": \"How assists will fill missing elements in an expression.\",\n+                    \"default\": \"todo\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"todo\",\n+                        \"defaultImpl\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Fill missing elements with 'todo' macro\",\n+                        \"Fill missing elements with Default::default()\"\n+                    ]\n+                },\n                 \"rust-analyzer.assist.importGranularity\": {\n                     \"markdownDescription\": \"How imports should be grouped into use statements.\",\n                     \"default\": \"crate\",\n@@ -1494,4 +1507,4 @@\n             ]\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}]}