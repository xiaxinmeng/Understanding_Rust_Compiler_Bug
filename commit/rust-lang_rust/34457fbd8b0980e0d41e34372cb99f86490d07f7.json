{"sha": "34457fbd8b0980e0d41e34372cb99f86490d07f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDU3ZmJkOGIwOTgwZTBkNDFlMzQzNzJjYjk5Zjg2NDkwZDA3Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T09:13:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T09:13:51Z"}, "message": "Auto merge of #4388 - flip1995:rustup, r=phansch\n\nRustup\n\nSupersedes #4387 and #4385\n\nThis removes tests with the `try!` macro in them completely. There is no need for Clippy to support the `try!` macro, since it is deprecated now.\n\n[`StmtKind`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/enum.StmtKind.html) got a new variant [`Semi`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/enum.StmtKind.html#variant.Semi), which Just Works with the `author` lint. Nice.\n\nchangelog: none", "tree": {"sha": "b5f63f0e573b5c9d759c4250c06bdb07839d8aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f63f0e573b5c9d759c4250c06bdb07839d8aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34457fbd8b0980e0d41e34372cb99f86490d07f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34457fbd8b0980e0d41e34372cb99f86490d07f7", "html_url": "https://github.com/rust-lang/rust/commit/34457fbd8b0980e0d41e34372cb99f86490d07f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34457fbd8b0980e0d41e34372cb99f86490d07f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d829d9f6b02b735d57fab5e8e99b15e0f48a23f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d829d9f6b02b735d57fab5e8e99b15e0f48a23f0", "html_url": "https://github.com/rust-lang/rust/commit/d829d9f6b02b735d57fab5e8e99b15e0f48a23f0"}, {"sha": "87fa2d90f5601966caefe9bc67679b61b5361f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/87fa2d90f5601966caefe9bc67679b61b5361f78", "html_url": "https://github.com/rust-lang/rust/commit/87fa2d90f5601966caefe9bc67679b61b5361f78"}], "stats": {"total": 99, "additions": 43, "deletions": 56}, "files": [{"sha": "079b3bd3f4e51c21e710c9bde54eb1c303f2e954", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -43,10 +43,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;\n         }\n-        if let ItemKind::Enum(ref def, _) = item.node {\n+        if let ItemKind::Enum(def, _) = &item.node {\n             for var in &def.variants {\n-                let variant = &var.node;\n-                if let Some(ref anon_const) = variant.disr_expr {\n+                if let Some(anon_const) = &var.disr_expr {\n                     let param_env = ty::ParamEnv::empty();\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);\n                     let substs = InternalSubsts::identity_for_item(cx.tcx.global_tcx(), def_id);"}, {"sha": "cf61683cb7194b73ceac11b4d74ced9b032b52f2", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -123,7 +123,7 @@ impl_lint_pass!(EnumVariantNames => [\n ]);\n \n fn var2str(var: &Variant) -> LocalInternedString {\n-    var.node.ident.as_str()\n+    var.ident.as_str()\n }\n \n /// Returns the number of chars that match from the start"}, {"sha": "2c2f4d84c73ae0c3afd1e006b982ae37d9480cd5", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                         \"large size difference between variants\",\n                         |db| {\n                             if variant.fields.len() == 1 {\n-                                let span = match def.variants[i].node.data {\n+                                let span = match def.variants[i].data {\n                                     VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => {\n                                         fields[0].ty.span\n                                     },"}, {"sha": "15cbdf7180d7a861e9a78764d20f16743be72632", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -197,6 +197,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant, _: &hir::Generics) {\n-        self.check_missing_docs_attrs(cx, &v.node.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a variant\");\n     }\n }"}, {"sha": "6d9eddac8948c5007d63229e83c220b2f7ca5264", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant, generics: &hir::Generics) {\n-        if !has_attr(cx.sess(), &var.node.attrs) {\n+        if !has_attr(cx.sess(), &var.attrs) {\n             return;\n         }\n         prelude();"}, {"sha": "cabb0cc8c323d947ae45c35b139236a1c8385ca1", "filename": "tests/ui/author/blocks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fauthor%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fauthor%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -1,4 +1,5 @@\n #![feature(stmt_expr_attributes)]\n+#![allow(redundant_semicolon)]\n \n #[rustfmt::skip]\n fn main() {"}, {"sha": "1766663344c4bc91d899817f9513677998a6a380", "filename": "tests/ui/author/blocks.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fauthor%2Fblocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fauthor%2Fblocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stderr?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -1,10 +1,16 @@\n error: statement with no effect\n-  --> $DIR/blocks.rs:14:5\n+  --> $DIR/blocks.rs:8:9\n    |\n-LL |     -x;\n-   |     ^^^\n+LL |         ;;;;\n+   |         ^^^^\n    |\n    = note: `-D clippy::no-effect` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: statement with no effect\n+  --> $DIR/blocks.rs:15:5\n+   |\n+LL |     -x;\n+   |     ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "f7b78503b1d0bc6614e6f7bd19d208a37d37e59a", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -1,7 +1,10 @@\n if_chain! {\n     if let ExprKind::Block(ref block) = expr.node;\n     if let Some(trailing_expr) = &block.expr;\n-    if block.stmts.len() == 0;\n+    if block.stmts.len() == 1;\n+    if let StmtKind::Semi(ref e, _) = block.stmts[0].node\n+    if let ExprKind::Tup(ref elements) = e.node;\n+    if elements.len() == 0;\n     then {\n         // report your lint here\n     }"}, {"sha": "7c81cc73d3ca4c111c4d0cad2b827ca8d45e15b5", "filename": "tests/ui/cognitive_complexity.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -322,14 +322,14 @@ fn try_() -> Result<i32, &'static str> {\n \n #[clippy::cognitive_complexity = \"0\"]\n fn try_again() -> Result<i32, &'static str> {\n-    let _ = r#try!(Ok(42));\n-    let _ = r#try!(Ok(43));\n-    let _ = r#try!(Ok(44));\n-    let _ = r#try!(Ok(45));\n-    let _ = r#try!(Ok(46));\n-    let _ = r#try!(Ok(47));\n-    let _ = r#try!(Ok(48));\n-    let _ = r#try!(Ok(49));\n+    let _ = Ok(42)?;\n+    let _ = Ok(43)?;\n+    let _ = Ok(44)?;\n+    let _ = Ok(45)?;\n+    let _ = Ok(46)?;\n+    let _ = Ok(47)?;\n+    let _ = Ok(48)?;\n+    let _ = Ok(49)?;\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),"}, {"sha": "824b056388b2a6d698a85a911bd944756196c2f8", "filename": "tests/ui/cognitive_complexity.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -230,9 +230,9 @@ error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:324:1\n    |\n LL | / fn try_again() -> Result<i32, &'static str> {\n-LL | |     let _ = r#try!(Ok(42));\n-LL | |     let _ = r#try!(Ok(43));\n-LL | |     let _ = r#try!(Ok(44));\n+LL | |     let _ = Ok(42)?;\n+LL | |     let _ = Ok(43)?;\n+LL | |     let _ = Ok(44)?;\n ...  |\n LL | |     }\n LL | | }"}, {"sha": "ecdc5623ca585b75c9bbabfd098037fb7167f1d3", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -215,10 +215,10 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     };\n \n     if true {\n-        r#try!(Ok(\"foo\"));\n+        Ok(\"foo\")?;\n     } else {\n         //~ ERROR same body as `if` block\n-        r#try!(Ok(\"foo\"));\n+        Ok(\"foo\")?;\n     }\n \n     if true {"}, {"sha": "e1a7b6f7f8b8cde5932cb3237dcb64599743d96c", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -197,7 +197,7 @@ error: this `if` has identical blocks\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         r#try!(Ok(\"foo\"));\n+LL | |         Ok(\"foo\")?;\n LL | |     }\n    | |_____^\n    |\n@@ -206,7 +206,7 @@ note: same as this\n    |\n LL |       if true {\n    |  _____________^\n-LL | |         r#try!(Ok(\"foo\"));\n+LL | |         Ok(\"foo\")?;\n LL | |     } else {\n    | |_____^\n "}, {"sha": "2e81eea44003a8729ee59569e0378f0d8604aa60", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     #[allow(clippy::needless_return)]\n     (|| return 2)();\n     (|| -> Option<i32> { None? })();\n-    (|| -> Result<i32, i32> { r#try!(Err(2)) })();\n+    (|| -> Result<i32, i32> { Err(2)? })();\n }"}, {"sha": "9db8dcbf75e28da35cac650edf298ea34fd3384c", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name, unused_assignments)]\n+#![allow(clippy::blacklisted_name, clippy::no_effect, redundant_semicolon, unused_assignments)]\n \n struct Foo(u32);\n "}, {"sha": "75ddae7b7ea3ef8a8651bb3a09f041d995c1200e", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -3,13 +3,6 @@\n \n use std::io;\n \n-fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n-    r#try!(s.write(b\"test\"));\n-    let mut buf = [0u8; 4];\n-    r#try!(s.read(&mut buf));\n-    Ok(())\n-}\n-\n fn question_mark<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n     s.write(b\"test\")?;\n     let mut buf = [0u8; 4];"}, {"sha": "53975b51b7e0f524fd859521eb0eec6d55a042c5", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34457fbd8b0980e0d41e34372cb99f86490d07f7/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=34457fbd8b0980e0d41e34372cb99f86490d07f7", "patch": "@@ -1,43 +1,28 @@\n error: handle written amount returned or use `Write::write_all` instead\n   --> $DIR/unused_io_amount.rs:7:5\n    |\n-LL |     r#try!(s.write(b\"test\"));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     s.write(b\"test\")?;\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: handle read amount returned or use `Read::read_exact` instead\n   --> $DIR/unused_io_amount.rs:9:5\n    |\n-LL |     r#try!(s.read(&mut buf));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: handle written amount returned or use `Write::write_all` instead\n-  --> $DIR/unused_io_amount.rs:14:5\n-   |\n-LL |     s.write(b\"test\")?;\n-   |     ^^^^^^^^^^^^^^^^^\n-\n-error: handle read amount returned or use `Read::read_exact` instead\n-  --> $DIR/unused_io_amount.rs:16:5\n-   |\n LL |     s.read(&mut buf)?;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: handle written amount returned or use `Write::write_all` instead\n-  --> $DIR/unused_io_amount.rs:21:5\n+  --> $DIR/unused_io_amount.rs:14:5\n    |\n LL |     s.write(b\"test\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: handle read amount returned or use `Read::read_exact` instead\n-  --> $DIR/unused_io_amount.rs:23:5\n+  --> $DIR/unused_io_amount.rs:16:5\n    |\n LL |     s.read(&mut buf).unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}]}