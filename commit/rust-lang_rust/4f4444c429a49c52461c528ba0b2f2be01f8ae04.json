{"sha": "4f4444c429a49c52461c528ba0b2f2be01f8ae04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDQ0NGM0MjlhNDljNTI0NjFjNTI4YmEwYjJmMmJlMDFmOGFlMDQ=", "commit": {"author": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2019-12-22T11:51:39Z"}, "committer": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2019-12-22T11:51:39Z"}, "message": "Remove trailling .s", "tree": {"sha": "5449736aeea1dc4c858635f45036dca4b7b160a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5449736aeea1dc4c858635f45036dca4b7b160a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4444c429a49c52461c528ba0b2f2be01f8ae04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4444c429a49c52461c528ba0b2f2be01f8ae04", "html_url": "https://github.com/rust-lang/rust/commit/4f4444c429a49c52461c528ba0b2f2be01f8ae04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4444c429a49c52461c528ba0b2f2be01f8ae04/comments", "author": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c21b4ad7d46118c1fd0747b52dd3f052aee79021", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21b4ad7d46118c1fd0747b52dd3f052aee79021", "html_url": "https://github.com/rust-lang/rust/commit/c21b4ad7d46118c1fd0747b52dd3f052aee79021"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "fc265c5231bb75c5c97360b9526d4ce10e6aff3f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4444c429a49c52461c528ba0b2f2be01f8ae04/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4444c429a49c52461c528ba0b2f2be01f8ae04/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=4f4444c429a49c52461c528ba0b2f2be01f8ae04", "patch": "@@ -543,11 +543,11 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n             return;\n         }\n \n-        let mut message = \"wildcard match will miss any future added variants.\";\n+        let mut message = \"wildcard match will miss any future added variants\";\n \n         if let ty::Adt(def, _) = ty.kind {\n             if def.is_variant_list_non_exhaustive() {\n-                message = \"match on non-exhaustive enum doesn't explicitly match all known variants.\";\n+                message = \"match on non-exhaustive enum doesn't explicitly match all known variants\";\n                 suggestion.push(String::from(\"_\"));\n             }\n         }"}, {"sha": "735f610b7e5d31d56f834e39e0bd3d3be942a2a7", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f4444c429a49c52461c528ba0b2f2be01f8ae04/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f4444c429a49c52461c528ba0b2f2be01f8ae04/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=4f4444c429a49c52461c528ba0b2f2be01f8ae04", "patch": "@@ -1,4 +1,4 @@\n-error: wildcard match will miss any future added variants.\n+error: wildcard match will miss any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:31:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n@@ -10,25 +10,25 @@ note: lint level defined here\n LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: wildcard match will miss any future added variants.\n+error: wildcard match will miss any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:35:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n-error: wildcard match will miss any future added variants.\n+error: wildcard match will miss any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:39:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n-error: wildcard match will miss any future added variants.\n+error: wildcard match will miss any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:55:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants.\n+error: match on non-exhaustive enum doesn't explicitly match all known variants\n   --> $DIR/wildcard_enum_match_arm.rs:72:9\n    |\n LL |         _ => {},"}]}