{"sha": "e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMjlkNmU3M2IwYTY2NWFhYWQ4ODAyYjhiOWI2NmMxYzRmZWY0OTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-29T19:58:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T19:58:27Z"}, "message": "Rollup merge of #72103 - lcnr:borrowck-localdefid, r=jonas-schievink\n\nborrowck `DefId` -> `LocalDefId`\n\nReplaces some `DefId`s which must always be local with `LocalDefId` in `librustc_mir/borrowck`.\n\ncc @marmeladema", "tree": {"sha": "a75f5866d21a2fa021f3a7ce3e080eb8c782c140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a75f5866d21a2fa021f3a7ce3e080eb8c782c140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0WlkCRBK7hj4Ov3rIwAAdHIIAI2ohgmufzxLFaKaI7CGCsrp\nBkB1c5hzD22ELADaZHI2KBah6u/a2KqC8iiSq8fOISrid0Aj1ffUQVAOhuHRs9HL\nhP0cGLPbUP26LvmwSPcsmVBd0P+V4LvPTnA2veojcjgbPHMKozThjOB6rsaVaqfB\nOKlbr0xJGLx3nPj0m845v8cTJ46VVCegkyrbLL/fZzrrBmH/fvQn6BNRYpa1/zQj\nDFdq6cIus/3oVRCGxtkN+j4+QPWLRKe5Pgy64HEV8KIZpTsvug/Qq7M/Fn5MYWYc\ncBE0mMcIfoaQKNNTO9IK6M+WUee4p7eW1okkaTIiYOzCCVE/34eQrUC4pGgfZQQ=\n=BHFk\n-----END PGP SIGNATURE-----\n", "payload": "tree a75f5866d21a2fa021f3a7ce3e080eb8c782c140\nparent c442e43b3a6acd5f129ec63e02bc2db61f216520\nparent 3f661d25f9ce3b5ac6139c8d8bf4614b55dca5be\nauthor Ralf Jung <post@ralfj.de> 1590782307 +0200\ncommitter GitHub <noreply@github.com> 1590782307 +0200\n\nRollup merge of #72103 - lcnr:borrowck-localdefid, r=jonas-schievink\n\nborrowck `DefId` -> `LocalDefId`\n\nReplaces some `DefId`s which must always be local with `LocalDefId` in `librustc_mir/borrowck`.\n\ncc @marmeladema\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "html_url": "https://github.com/rust-lang/rust/commit/e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c442e43b3a6acd5f129ec63e02bc2db61f216520", "url": "https://api.github.com/repos/rust-lang/rust/commits/c442e43b3a6acd5f129ec63e02bc2db61f216520", "html_url": "https://github.com/rust-lang/rust/commit/c442e43b3a6acd5f129ec63e02bc2db61f216520"}, {"sha": "3f661d25f9ce3b5ac6139c8d8bf4614b55dca5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f661d25f9ce3b5ac6139c8d8bf4614b55dca5be", "html_url": "https://github.com/rust-lang/rust/commit/3f661d25f9ce3b5ac6139c8d8bf4614b55dca5be"}], "stats": {"total": 124, "additions": 58, "deletions": 66}, "files": [{"sha": "d0050f801fc6bbdd72ddbba27e8b018b255e247c", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -214,7 +214,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let generics = tcx.generics_of(self.mir_def_id);\n                     let param = generics.type_param(&param_ty, tcx);\n                     if let Some(generics) =\n-                        tcx.hir().get_generics(tcx.closure_base_def_id(self.mir_def_id))\n+                        tcx.hir().get_generics(tcx.closure_base_def_id(self.mir_def_id.to_def_id()))\n                     {\n                         suggest_constraining_type_param(\n                             tcx,\n@@ -865,49 +865,42 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"`{}` would have to be valid for `{}`...\", name, region_name),\n             );\n \n-            if let Some(def_id) = self.mir_def_id.as_local() {\n-                let fn_hir_id = self.infcx.tcx.hir().as_local_hir_id(def_id);\n-                err.span_label(\n-                    drop_span,\n-                    format!(\n-                        \"...but `{}` will be dropped here, when the {} returns\",\n-                        name,\n-                        self.infcx\n-                            .tcx\n-                            .hir()\n-                            .opt_name(fn_hir_id)\n-                            .map(|name| format!(\"function `{}`\", name))\n-                            .unwrap_or_else(|| {\n-                                match &self\n-                                    .infcx\n-                                    .tcx\n-                                    .typeck_tables_of(def_id)\n-                                    .node_type(fn_hir_id)\n-                                    .kind\n-                                {\n-                                    ty::Closure(..) => \"enclosing closure\",\n-                                    ty::Generator(..) => \"enclosing generator\",\n-                                    kind => bug!(\"expected closure or generator, found {:?}\", kind),\n-                                }\n-                                .to_string()\n-                            })\n-                    ),\n-                );\n+            let fn_hir_id = self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id);\n+            err.span_label(\n+                drop_span,\n+                format!(\n+                    \"...but `{}` will be dropped here, when the {} returns\",\n+                    name,\n+                    self.infcx\n+                        .tcx\n+                        .hir()\n+                        .opt_name(fn_hir_id)\n+                        .map(|name| format!(\"function `{}`\", name))\n+                        .unwrap_or_else(|| {\n+                            match &self\n+                                .infcx\n+                                .tcx\n+                                .typeck_tables_of(self.mir_def_id)\n+                                .node_type(fn_hir_id)\n+                                .kind\n+                            {\n+                                ty::Closure(..) => \"enclosing closure\",\n+                                ty::Generator(..) => \"enclosing generator\",\n+                                kind => bug!(\"expected closure or generator, found {:?}\", kind),\n+                            }\n+                            .to_string()\n+                        })\n+                ),\n+            );\n \n-                err.note(\n-                    \"functions cannot return a borrow to data owned within the function's scope, \\\n-                     functions can only return borrows to data passed as arguments\",\n-                );\n-                err.note(\n-                    \"to learn more, visit <https://doc.rust-lang.org/book/ch04-02-\\\n-                     references-and-borrowing.html#dangling-references>\",\n-                );\n-            } else {\n-                err.span_label(\n-                    drop_span,\n-                    format!(\"...but `{}` dropped here while still borrowed\", name),\n-                );\n-            }\n+            err.note(\n+                \"functions cannot return a borrow to data owned within the function's scope, \\\n+                    functions can only return borrows to data passed as arguments\",\n+            );\n+            err.note(\n+                \"to learn more, visit <https://doc.rust-lang.org/book/ch04-02-\\\n+                    references-and-borrowing.html#dangling-references>\",\n+            );\n \n             if let BorrowExplanation::MustBeValidFor { .. } = explanation {\n             } else {\n@@ -1237,7 +1230,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n \n-        let (_, escapes_from) = tcx.article_and_description(self.mir_def_id);\n+        let (_, escapes_from) = tcx.article_and_description(self.mir_def_id.to_def_id());\n \n         let mut err =\n             borrowck_errors::borrowed_data_escapes_closure(tcx, escape_span, escapes_from);\n@@ -1572,14 +1565,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> Option<AnnotatedBorrowFnSignature<'tcx>> {\n         // Define a fallback for when we can't match a closure.\n         let fallback = || {\n-            let is_closure = self.infcx.tcx.is_closure(self.mir_def_id);\n+            let is_closure = self.infcx.tcx.is_closure(self.mir_def_id.to_def_id());\n             if is_closure {\n                 None\n             } else {\n                 let ty = self.infcx.tcx.type_of(self.mir_def_id);\n                 match ty.kind {\n-                    ty::FnDef(_, _) | ty::FnPtr(_) => self\n-                        .annotate_fn_sig(self.mir_def_id, self.infcx.tcx.fn_sig(self.mir_def_id)),\n+                    ty::FnDef(_, _) | ty::FnPtr(_) => self.annotate_fn_sig(\n+                        self.mir_def_id.to_def_id(),\n+                        self.infcx.tcx.fn_sig(self.mir_def_id),\n+                    ),\n                     _ => None,\n                 }\n             }"}, {"sha": "b49e4187fb81070124337a95064b142081274184", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 self.cannot_move_out_of_interior_noncopy(span, ty, None)\n             }\n             ty::Closure(def_id, closure_substs)\n-                if def_id == self.mir_def_id && upvar_field.is_some() =>\n+                if def_id.as_local() == Some(self.mir_def_id) && upvar_field.is_some() =>\n             {\n                 let closure_kind_ty = closure_substs.as_closure().kind_ty();\n                 let closure_kind = closure_kind_ty.to_opt_closure_kind();"}, {"sha": "e04ed8b83debd94509c692098c517f03abb96de4", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err.span_label(sp, format!(\"cannot {}\", act));\n \n         let hir = self.infcx.tcx.hir();\n-        let closure_id = hir.as_local_hir_id(self.mir_def_id.expect_local());\n+        let closure_id = hir.as_local_hir_id(self.mir_def_id);\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n         let item_id = hir.get_parent_item(fn_call_id);"}, {"sha": "727c4d0605e124939a1a9c53886d713332f49549", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut diag =\n             self.infcx.tcx.sess.struct_span_err(*span, \"lifetime may not live long enough\");\n \n-        let (_, mir_def_name) = self.infcx.tcx.article_and_description(self.mir_def_id);\n+        let (_, mir_def_name) = self.infcx.tcx.article_and_description(self.mir_def_id.to_def_id());\n \n         let fr_name = self.give_region_a_name(*fr).unwrap();\n         fr_name.highlight_region_name(&mut diag);"}, {"sha": "2240eb81e1fa778aae5d63abc338b6582e11ec39", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -237,8 +237,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 }\n \n                 ty::BoundRegion::BrEnv => {\n-                    let mir_hir_id =\n-                        self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id.expect_local());\n+                    let mir_hir_id = self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id);\n                     let def_ty = self.regioncx.universal_regions().defining_ty;\n \n                     if let DefiningTy::Closure(_, substs) = def_ty {\n@@ -323,7 +322,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         argument_ty: Ty<'tcx>,\n         argument_index: usize,\n     ) -> Option<RegionName> {\n-        let mir_hir_id = self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id.as_local()?);\n+        let mir_hir_id = self.infcx.tcx.hir().as_local_hir_id(self.mir_def_id);\n         let fn_decl = self.infcx.tcx.hir().fn_decl_by_hir_id(mir_hir_id)?;\n         let argument_hir_ty: &hir::Ty<'_> = fn_decl.inputs.get(argument_index)?;\n         match argument_hir_ty.kind {\n@@ -634,7 +633,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n         let type_name = self.infcx.extract_type_name(&return_ty, Some(highlight)).0;\n \n-        let mir_hir_id = tcx.hir().as_local_hir_id(self.mir_def_id.expect_local());\n+        let mir_hir_id = tcx.hir().as_local_hir_id(self.mir_def_id);\n \n         let (return_span, mir_description) = match tcx.hir().get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n@@ -686,7 +685,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n         let type_name = self.infcx.extract_type_name(&yield_ty, Some(highlight)).0;\n \n-        let mir_hir_id = tcx.hir().as_local_hir_id(self.mir_def_id.expect_local());\n+        let mir_hir_id = tcx.hir().as_local_hir_id(self.mir_def_id);\n \n         let yield_span = match tcx.hir().get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {"}, {"sha": "710f8c0fb9005b4e6ffba234cd284578a6ed7eb3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -4,10 +4,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::{\n-    def_id::{DefId, LocalDefId},\n-    HirId, Node,\n-};\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::{HirId, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -174,7 +172,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let mut body = input_body.clone();\n     let mut promoted = input_promoted.clone();\n     let free_regions =\n-        nll::replace_regions_in_mir(infcx, def_id.to_def_id(), param_env, &mut body, &mut promoted);\n+        nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body, &mut promoted);\n     let body = &body; // no further changes\n \n     let location_table = &LocationTable::new(&body);\n@@ -275,7 +273,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n             let mut promoted_mbcx = MirBorrowckCtxt {\n                 infcx,\n                 body: promoted_body,\n-                mir_def_id: def_id.to_def_id(),\n+                mir_def_id: def_id,\n                 move_data: &move_data,\n                 location_table: &LocationTable::new(promoted_body),\n                 movable_generator,\n@@ -307,7 +305,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let mut mbcx = MirBorrowckCtxt {\n         infcx,\n         body,\n-        mir_def_id: def_id.to_def_id(),\n+        mir_def_id: def_id,\n         move_data: &mdpe.move_data,\n         location_table,\n         movable_generator,\n@@ -459,7 +457,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: &'cx Body<'tcx>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     move_data: &'cx MoveData<'tcx>,\n \n     /// Map from MIR `Location` to `LocationIndex`; created"}, {"sha": "1d3733371473b109cfe1518d81af2f17f1282044", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e229d6e73b0a665aaad8802b8b9b66c1c4fef499/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=e229d6e73b0a665aaad8802b8b9b66c1c4fef499", "patch": "@@ -58,20 +58,20 @@ crate struct NllOutput<'tcx> {\n /// `compute_regions`.\n pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n     debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n \n     // Compute named region information. This also renumbers the inputs/outputs.\n-    let universal_regions = UniversalRegions::new(infcx, def_id.expect_local(), param_env);\n+    let universal_regions = UniversalRegions::new(infcx, def_id, param_env);\n \n     // Replace all remaining regions with fresh inference variables.\n     renumber::renumber_mir(infcx, body, promoted);\n \n-    let source = MirSource::item(def_id);\n+    let source = MirSource::item(def_id.to_def_id());\n     mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, source, body, |_, _| Ok(()));\n \n     universal_regions"}]}