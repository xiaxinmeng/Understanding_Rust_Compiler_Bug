{"sha": "b4993ec8635a48d4467a69482f77c6370a9709df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTkzZWM4NjM1YTQ4ZDQ0NjdhNjk0ODJmNzdjNjM3MGE5NzA5ZGY=", "commit": {"author": {"name": "Alex Burka", "email": "durka42@gmail.com", "date": "2017-01-05T23:17:12Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-02-09T06:40:23Z"}, "message": "suggest doubling recursion limit in more situations", "tree": {"sha": "0f8bb145f0d65b4f8794281e4bc51a2f2fb948d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8bb145f0d65b4f8794281e4bc51a2f2fb948d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4993ec8635a48d4467a69482f77c6370a9709df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4993ec8635a48d4467a69482f77c6370a9709df", "html_url": "https://github.com/rust-lang/rust/commit/b4993ec8635a48d4467a69482f77c6370a9709df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4993ec8635a48d4467a69482f77c6370a9709df/comments", "author": null, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14f87e3b0823407a91a283796bf78ef83d5fe99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14f87e3b0823407a91a283796bf78ef83d5fe99", "html_url": "https://github.com/rust-lang/rust/commit/c14f87e3b0823407a91a283796bf78ef83d5fe99"}], "stats": {"total": 263, "additions": 202, "deletions": 61}, "files": [{"sha": "ca0ab8f1e8c7742b4310816e7a1a6efdc6125430", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -54,12 +54,16 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n \n         if self.steps.len() == tcx.sess.recursion_limit.get() {\n             // We've reached the recursion limit, error gracefully.\n+            let suggested_limit = tcx.sess.recursion_limit.get() * 2;\n             struct_span_err!(tcx.sess,\n                              self.span,\n                              E0055,\n                              \"reached the recursion limit while auto-dereferencing {:?}\",\n                              self.cur_ty)\n                 .span_label(self.span, &format!(\"deref recursion limit reached\"))\n+                .help(&format!(\n+                        \"consider adding a `#[recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n+                        suggested_limit))\n                 .emit();\n             return None;\n         }"}, {"sha": "e7f794328b8935984d39fa5ada410ff29936299c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -14,7 +14,7 @@ use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, ExpnInfo, Spanned, respan};\n use syntax_pos::{Span, ExpnId, NO_EXPANSION};\n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, FatalError};\n use ext::expand::{self, Expansion};\n use ext::hygiene::Mark;\n use fold::{self, Folder};\n@@ -674,9 +674,15 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn bt_push(&mut self, ei: ExpnInfo) {\n         if self.current_expansion.depth > self.ecfg.recursion_limit {\n-            self.span_fatal(ei.call_site,\n-                            &format!(\"recursion limit reached while expanding the macro `{}`\",\n-                                    ei.callee.name()));\n+            let suggested_limit = self.ecfg.recursion_limit * 2;\n+            let mut err = self.struct_span_fatal(ei.call_site,\n+                &format!(\"recursion limit reached while expanding the macro `{}`\",\n+                         ei.callee.name()));\n+            err.note(&format!(\n+                \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n+                suggested_limit));\n+            err.emit();\n+            panic!(FatalError);\n         }\n \n         let mut call_site = ei.call_site;"}, {"sha": "226a6d57ddbf039f7cfd982719a8b1d11fcb228a", "filename": "src/test/compile-fail/recursion_limit.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c14f87e3b0823407a91a283796bf78ef83d5fe99/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14f87e3b0823407a91a283796bf78ef83d5fe99/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs?ref=c14f87e3b0823407a91a283796bf78ef83d5fe99", "patch": "@@ -1,57 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that the recursion limit can be changed. In this case, we have\n-// deeply nested types that will fail the `Send` check by overflow\n-// when the recursion limit is set very low.\n-\n-#![allow(dead_code)]\n-#![recursion_limit=\"10\"]\n-\n-macro_rules! link {\n-    ($id:ident, $t:ty) => {\n-        enum $id { $id($t) }\n-    }\n-}\n-\n-link! { A, B }\n-link! { B, C }\n-link! { C, D }\n-link! { D, E }\n-link! { E, F }\n-link! { F, G }\n-link! { G, H }\n-link! { H, I }\n-link! { I, J }\n-link! { J, K }\n-link! { K, L }\n-link! { L, M }\n-link! { M, N }\n-\n-enum N { N(usize) }\n-\n-fn is_send<T:Send>() { }\n-\n-fn main() {\n-    is_send::<A>();\n-    //~^ ERROR overflow evaluating\n-    //~| NOTE consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n-    //~| NOTE required because it appears within the type `A`\n-    //~| NOTE required because it appears within the type `B`\n-    //~| NOTE required because it appears within the type `C`\n-    //~| NOTE required because it appears within the type `D`\n-    //~| NOTE required because it appears within the type `E`\n-    //~| NOTE required because it appears within the type `F`\n-    //~| NOTE required because it appears within the type `G`\n-    //~| NOTE required because it appears within the type `H`\n-    //~| NOTE required because it appears within the type `I`\n-    //~| NOTE required because it appears within the type `J`\n-    //~| NOTE required by `is_send`\n-}"}, {"sha": "becb81b1fff7ef8ca03b599e3e5de83eb425b436", "filename": "src/test/ui/did_you_mean/recursion_limit.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.rs?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the recursion limit can be changed and that the compiler\n+// suggests a fix. In this case, we have deeply nested types that will\n+// fail the `Send` check by overflow when the recursion limit is set\n+// very low.\n+\n+#![allow(dead_code)]\n+#![recursion_limit=\"10\"]\n+\n+macro_rules! link {\n+    ($id:ident, $t:ty) => {\n+        enum $id { $id($t) }\n+    }\n+}\n+\n+link! { A, B }\n+link! { B, C }\n+link! { C, D }\n+link! { D, E }\n+link! { E, F }\n+link! { F, G }\n+link! { G, H }\n+link! { H, I }\n+link! { I, J }\n+link! { J, K }\n+link! { K, L }\n+link! { L, M }\n+link! { M, N }\n+\n+enum N { N(usize) }\n+\n+fn is_send<T:Send>() { }\n+\n+fn main() {\n+    is_send::<A>();\n+}"}, {"sha": "524aab87ccfe2a7f2bb02224de511026f66a0ff0", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -0,0 +1,21 @@\n+error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n+  --> $DIR/recursion_limit.rs:44:5\n+   |\n+44 |     is_send::<A>();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+   = note: required because it appears within the type `J`\n+   = note: required because it appears within the type `I`\n+   = note: required because it appears within the type `H`\n+   = note: required because it appears within the type `G`\n+   = note: required because it appears within the type `F`\n+   = note: required because it appears within the type `E`\n+   = note: required because it appears within the type `D`\n+   = note: required because it appears within the type `C`\n+   = note: required because it appears within the type `B`\n+   = note: required because it appears within the type `A`\n+   = note: required by `is_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ebc56c94adf84395105e7c2317f18e635b79dff2", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.rs?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the recursion limit can be changed and that the compiler\n+// suggests a fix. In this case, we have a long chain of Deref impls\n+// which will cause an overflow during the autoderef loop.\n+\n+#![allow(dead_code)]\n+#![recursion_limit=\"10\"]\n+\n+macro_rules! link {\n+    ($outer:ident, $inner:ident) => {\n+        struct $outer($inner);\n+\n+        impl $outer {\n+            fn new() -> $outer {\n+                $outer($inner::new())\n+            }\n+        }\n+\n+        impl std::ops::Deref for $outer {\n+            type Target = $inner;\n+\n+            fn deref(&self) -> &$inner {\n+                &self.0\n+            }\n+        }\n+    }\n+}\n+\n+struct Bottom;\n+impl Bottom {\n+    fn new() -> Bottom {\n+        Bottom\n+    }\n+}\n+\n+link!(Top, A);\n+link!(A, B);\n+link!(B, C);\n+link!(C, D);\n+link!(D, E);\n+link!(E, F);\n+link!(F, G);\n+link!(G, H);\n+link!(H, I);\n+link!(I, J);\n+link!(J, K);\n+link!(K, Bottom);\n+\n+fn main() {\n+    let t = Top::new();\n+    let x: &Bottom = &t;\n+}\n+"}, {"sha": "57b28d037362239f237591faf6eb9dd7d7aa6456", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -0,0 +1,23 @@\n+error[E0055]: reached the recursion limit while auto-dereferencing I\n+  --> $DIR/recursion_limit_deref.rs:60:22\n+   |\n+60 |     let x: &Bottom = &t;\n+   |                      ^^ deref recursion limit reached\n+   |\n+   = help: consider adding a `#[recursion_limit=\"20\"]` attribute to your crate\n+\n+error[E0055]: reached the recursion limit while auto-dereferencing I\n+  |\n+  = help: consider adding a `#[recursion_limit=\"20\"]` attribute to your crate\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recursion_limit_deref.rs:60:22\n+   |\n+60 |     let x: &Bottom = &t;\n+   |                      ^^ expected struct `Bottom`, found struct `Top`\n+   |\n+   = note: expected type `&Bottom`\n+              found type `&Top`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9fb82b730c9b3ecda28976786cac4bfa0bba9fc6", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.rs?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the recursion limit can be changed and that the compiler\n+// suggests a fix. In this case, we have a recursing macro that will\n+// overflow if the number of arguments surpasses the recursion limit.\n+\n+#![allow(dead_code)]\n+#![recursion_limit=\"10\"]\n+\n+macro_rules! recurse {\n+    () => { };\n+    ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n+}\n+\n+fn main() {\n+    recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n+}\n+"}, {"sha": "6bed78a3badc8e38454d012894e17f0e47e18cfe", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4993ec8635a48d4467a69482f77c6370a9709df/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=b4993ec8635a48d4467a69482f77c6370a9709df", "patch": "@@ -0,0 +1,11 @@\n+error: recursion limit reached while expanding the macro `recurse`\n+  --> $DIR/recursion_limit_macro.rs:20:31\n+   |\n+20 |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n+   |                               ^^^^^^^^^^^^^^^^^^^\n+...\n+24 |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n+   |     -------------------------------------------------- in this macro invocation\n+   |\n+   = note: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+"}]}