{"sha": "63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzODExYmMzOGY1ZmNiOGJjODNlMmRkODcxOWNlNTQ0NGJiMjc3ZjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-18T00:16:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-18T00:16:01Z"}, "message": "rustc_infer: remove InferCtxt::closure_sig as the FnSig is always shallowly known.", "tree": {"sha": "0efc68f62c4941a837ccdbfecf62b84fabc0ab60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0efc68f62c4941a837ccdbfecf62b84fabc0ab60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "html_url": "https://github.com/rust-lang/rust/commit/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "html_url": "https://github.com/rust-lang/rust/commit/7ceebd98c6a15ae30e772eebb676b63ffa1a8122"}], "stats": {"total": 127, "additions": 51, "deletions": 76}, "files": [{"sha": "8fbb9f0891a00e393cbee6c0d7304af77b094be6", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -681,9 +681,9 @@ pub trait PrettyPrinter<'tcx>:\n \n                 if self.tcx().sess.verbose() {\n                     p!(write(\n-                        \" closure_kind_ty={:?} closure_sig_ty={:?}\",\n+                        \" closure_kind_ty={:?} closure_sig_as_fn_ptr_ty={:?}\",\n                         substs.as_closure().kind_ty(did, self.tcx()),\n-                        substs.as_closure().sig_ty(did, self.tcx())\n+                        substs.as_closure().sig_as_fn_ptr_ty(did, self.tcx())\n                     ));\n                 }\n "}, {"sha": "a4a8c2374435fd2b6a3b2f3106a489b083a93211", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -371,7 +371,7 @@ pub struct ClosureSubsts<'tcx> {\n /// parent slice and not canonical substs themselves.\n struct SplitClosureSubsts<'tcx> {\n     closure_kind_ty: Ty<'tcx>,\n-    closure_sig_ty: Ty<'tcx>,\n+    closure_sig_as_fn_ptr_ty: Ty<'tcx>,\n     upvar_kinds: &'tcx [GenericArg<'tcx>],\n }\n \n@@ -384,7 +384,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         let parent_len = generics.parent_count;\n         SplitClosureSubsts {\n             closure_kind_ty: self.substs.type_at(parent_len),\n-            closure_sig_ty: self.substs.type_at(parent_len + 1),\n+            closure_sig_as_fn_ptr_ty: self.substs.type_at(parent_len + 1),\n             upvar_kinds: &self.substs[parent_len + 2..],\n         }\n     }\n@@ -412,12 +412,10 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n-    /// Returns the type representing the closure signature for this\n-    /// closure; may contain type variables during inference. To get\n-    /// the closure signature during inference, use\n-    /// `infcx.fn_sig(def_id)`.\n-    pub fn sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).closure_sig_ty\n+    /// Returns the `fn` pointer type representing the closure signature for this\n+    /// closure.\n+    pub fn sig_as_fn_ptr_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).closure_sig_as_fn_ptr_ty\n     }\n \n     /// Returns the closure kind for this closure; only usable outside\n@@ -429,16 +427,12 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n \n-    /// Extracts the signature from the closure; only usable outside\n-    /// of an inference context, because in that context we know that\n-    /// there are no type variables.\n-    ///\n-    /// If you have an inference context, use `infcx.closure_sig()`.\n+    /// Extracts the signature from the closure.\n     pub fn sig(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.sig_ty(def_id, tcx);\n+        let ty = self.sig_as_fn_ptr_ty(def_id, tcx);\n         match ty.kind {\n             ty::FnPtr(sig) => sig,\n-            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.kind),\n+            _ => bug!(\"closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}\", ty.kind),\n         }\n     }\n }\n@@ -2200,9 +2194,9 @@ impl<'tcx> TyS<'tcx> {\n                 // ignore errors (#54954)\n                 ty::Binder::dummy(FnSig::fake())\n             }\n-            Closure(..) => {\n-                bug!(\"to get the signature of a closure, use `closure_sig()` not `fn_sig()`\",)\n-            }\n+            Closure(..) => bug!(\n+                \"to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`\",\n+            ),\n             _ => bug!(\"Ty::fn_sig() called on non-fn type: {:?}\", self),\n         }\n     }"}, {"sha": "0d8dcf18bbbda3c773e3201d5c4fc2b07dd5bafb", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -1486,16 +1486,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         closure_kind_ty.to_opt_closure_kind()\n     }\n \n-    /// Obtains the signature of a closure. For closures, unlike\n-    /// `tcx.fn_sig(def_id)`, this method will work during the\n-    /// type-checking of the enclosing function and return the closure\n-    /// signature in its partially inferred state.\n-    pub fn closure_sig(&self, def_id: DefId, substs: SubstsRef<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n-        let closure_sig_ty = self.shallow_resolve(closure_sig_ty);\n-        closure_sig_ty.fn_sig(self.tcx)\n-    }\n-\n     /// Clears the selection, evaluation, and projection caches. This is useful when\n     /// repeatedly attempting to select an `Obligation` while changing only\n     /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing."}, {"sha": "c545b6df70c11b29c7aad8fd28b4062b6929e5d2", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -1684,7 +1684,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // case it ends up being assigned into the return place.\n                                 annotated_closure = self.annotate_fn_sig(\n                                     *def_id,\n-                                    self.infcx.closure_sig(*def_id, *substs),\n+                                    substs.as_closure().sig(*def_id, self.infcx.tcx),\n                                 );\n                                 debug!(\n                                     \"annotate_argument_and_return_for_borrow: \\"}, {"sha": "bac69da12d76e7bcc0d0a3e37130a4c773903161", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -2083,9 +2083,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(*body, tcx).kind {\n-                            ty::Closure(def_id, substs) => {\n-                                substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx)\n-                            }\n+                            ty::Closure(def_id, substs) => substs.as_closure().sig(def_id, tcx),\n                             _ => bug!(),\n                         };\n                         let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig, *unsafety);"}, {"sha": "dcf14bd20db60b71f192c6f4f0e0824ef78b9664", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -580,7 +580,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let closure_sig = substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx);\n+                let closure_sig = substs.as_closure().sig(def_id, tcx);\n                 let inputs_and_output = closure_sig.inputs_and_output();\n                 let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 ty::Binder::fuse(closure_ty, inputs_and_output, |closure_ty, inputs_and_output| {"}, {"sha": "c068fef12c5dc7a066e363981b857e2513500b43", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -724,7 +724,7 @@ where\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.as_closure().sig_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_closure().sig_as_fn_ptr_ty(def_id, self.tcx).visit_with(self);\n             }\n \n             ty::Generator(def_id, ref substs, _) => {"}, {"sha": "8ba206031860d632aa5278d9fd69e78a9a03fb84", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let self_ty = trait_ref.self_ty();\n         let (def_id, output_ty, callable) = match self_ty.kind {\n             ty::Closure(def_id, substs) => {\n-                (def_id, self.closure_sig(def_id, substs).output(), \"closure\")\n+                (def_id, substs.as_closure().sig(def_id, self.tcx).output(), \"closure\")\n             }\n             ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n             _ => return,"}, {"sha": "6b14f6959bfb91d881ecb13a2ea6b77f3162e020", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -1311,9 +1311,7 @@ fn confirm_closure_candidate<'cx, 'tcx>(\n     vtable: VtableClosureData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n-    let infcx = selcx.infcx();\n-    let closure_sig_ty = vtable.substs.as_closure().sig_ty(vtable.closure_def_id, tcx);\n-    let closure_sig = infcx.shallow_resolve(closure_sig_ty).fn_sig(tcx);\n+    let closure_sig = vtable.substs.as_closure().sig(vtable.closure_def_id, tcx);\n     let Normalized { value: closure_sig, obligations } = normalize_with_depth(\n         selcx,\n         obligation.param_env,"}, {"sha": "660d4d14bc7286549477d228d34ba3c8807ec539", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -3349,9 +3349,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\",\n             obligation, closure_def_id, substs,\n         );\n-        let closure_type = self.infcx.closure_sig(closure_def_id, substs);\n+        let closure_sig = substs.as_closure().sig(closure_def_id, self.tcx());\n \n-        debug!(\"closure_trait_ref_unnormalized: closure_type = {:?}\", closure_type);\n+        debug!(\"closure_trait_ref_unnormalized: closure_sig = {:?}\", closure_sig);\n \n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an unboxed closure type and hence is\n@@ -3362,7 +3362,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.tcx(),\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().self_ty(), // (1)\n-            closure_type,\n+            closure_sig,\n             util::TupleArgumentsFlag::No,\n         )\n         .map_bound(|(trait_ref, _)| trait_ref)"}, {"sha": "056fe912d9e348cb7e37184e92a34baed56fd50f", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -105,12 +105,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(def_id, substs).is_none() {\n-                    let closure_ty = self.closure_sig(def_id, substs);\n-                    let fn_sig = self\n+                    let closure_sig = substs.as_closure().sig(def_id, self.tcx);\n+                    let closure_sig = self\n                         .replace_bound_vars_with_fresh_vars(\n                             call_expr.span,\n                             infer::FnCall,\n-                            &closure_ty,\n+                            &closure_sig,\n                         )\n                         .0;\n                     let adjustments = autoderef.adjust_steps(self, Needs::None);\n@@ -121,12 +121,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             callee_expr,\n                             adjusted_ty,\n                             adjustments,\n-                            fn_sig,\n+                            fn_sig: closure_sig,\n                             closure_def_id: def_id,\n                             closure_substs: substs,\n                         },\n                     );\n-                    return Some(CallStep::DeferredClosure(fn_sig));\n+                    return Some(CallStep::DeferredClosure(closure_sig));\n                 }\n             }\n "}, {"sha": "d8f5a83c50b2db7ed8dfdd19a3224735a457cba7", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -116,12 +116,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 interior,\n                 generator_substs.witness(expr_def_id, self.tcx),\n             );\n-            return self.tcx.mk_generator(expr_def_id, substs, movability);\n-        }\n \n-        let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n+            // HACK(eddyb) this forces the types equated above into `substs` but\n+            // it should rely on `GeneratorSubsts` providing a constructor, instead.\n+            let substs = self.resolve_vars_if_possible(&substs);\n \n-        debug!(\"check_closure: expr.hir_id={:?} closure_type={:?}\", expr.hir_id, closure_type);\n+            return self.tcx.mk_generator(expr_def_id, substs, movability);\n+        }\n \n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n@@ -144,7 +145,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype(\n             expr.span,\n             sig_fn_ptr_ty,\n-            substs.as_closure().sig_ty(expr_def_id, self.tcx),\n+            substs.as_closure().sig_as_fn_ptr_ty(expr_def_id, self.tcx),\n         );\n \n         if let Some(kind) = opt_kind {\n@@ -155,6 +156,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         }\n \n+        // HACK(eddyb) this forces the types equated above into `substs` but\n+        // it should rely on `ClosureSubsts` providing a constructor, instead.\n+        let substs = self.resolve_vars_if_possible(&substs);\n+\n+        let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n+\n+        debug!(\"check_closure: expr.hir_id={:?} closure_type={:?}\", expr.hir_id, closure_type);\n+\n         closure_type\n     }\n "}, {"sha": "689425bc19f200c0d2b65d98cd7e3b4fb836db07", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -749,9 +749,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 //     `fn(arg0,arg1,...) -> _`\n                 // or\n                 //     `unsafe fn(arg0,arg1,...) -> _`\n-                let sig = self.closure_sig(def_id_a, substs_a);\n+                let closure_sig = substs_a.as_closure().sig(def_id_a, self.tcx);\n                 let unsafety = fn_ty.unsafety();\n-                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig, unsafety);\n+                let pointer_ty = self.tcx.coerce_closure_fn_ty(closure_sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\", a, b, pointer_ty);\n                 self.unify_and(\n                     pointer_ty,"}, {"sha": "bbc7593fd7acc41aa0c0bf032f708652dacf1b08", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -4839,18 +4839,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         let (def_id, sig) = match found.kind {\n             ty::FnDef(def_id, _) => (def_id, found.fn_sig(self.tcx)),\n-            ty::Closure(def_id, substs) => {\n-                // We don't use `closure_sig` to account for malformed closures like\n-                // `|_: [_; continue]| {}` and instead we don't suggest anything.\n-                let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n-                (\n-                    def_id,\n-                    match closure_sig_ty.kind {\n-                        ty::FnPtr(sig) => sig,\n-                        _ => return false,\n-                    },\n-                )\n-            }\n+            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig(def_id, self.tcx)),\n             _ => return false,\n         };\n "}, {"sha": "055390780b40f77e2b834122e4a14f6b0d1ca32f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63811bc38f5fcb8bc83e2dd8719ce5444bb277f0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=63811bc38f5fcb8bc83e2dd8719ce5444bb277f0", "patch": "@@ -1527,16 +1527,13 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             // argument. In any case they are embedded within the\n             // closure type as part of the `ClosureSubsts`.\n             //\n-            // To get\n-            // the signature of a closure, you should use the\n-            // `closure_sig` method on the `ClosureSubsts`:\n+            // To get the signature of a closure, you should use the\n+            // `sig` method on the `ClosureSubsts`:\n             //\n-            //    closure_substs.sig(def_id, tcx)\n-            //\n-            // or, inside of an inference context, you can use\n-            //\n-            //    infcx.closure_sig(def_id, closure_substs)\n-            bug!(\"to get the signature of a closure, use `closure_sig()` not `fn_sig()`\");\n+            //    substs.as_closure().sig(def_id, tcx)\n+            bug!(\n+                \"to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`\",\n+            );\n         }\n \n         x => {"}]}