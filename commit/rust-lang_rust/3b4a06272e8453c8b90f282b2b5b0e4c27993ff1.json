{"sha": "3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNGEwNjI3MmU4NDUzYzhiOTBmMjgyYjJiNWIwZTRjMjc5OTNmZjE=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-23T13:29:01Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:14Z"}, "message": "Go back to checking only the LHS of trait predicates.", "tree": {"sha": "79908a1ce19c349d883cb8d8830355721d153bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79908a1ce19c349d883cb8d8830355721d153bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "html_url": "https://github.com/rust-lang/rust/commit/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c336afb782e30e90471887d7f63cfa4c28fc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c336afb782e30e90471887d7f63cfa4c28fc74", "html_url": "https://github.com/rust-lang/rust/commit/d9c336afb782e30e90471887d7f63cfa4c28fc74"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "a16b806b6f125c353b1c147d7369fe29c1e83183", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             let d = param_def.def_id;\n             fcx.register_wf_obligation(fcx.tcx.type_of(d), fcx.tcx.def_span(d), self.code.clone());\n             // Check the clauses are well-formed when the param is substituted by it's default.\n-            // In trait definitions, predicates as `Self: Trait` and `Self: Super` are problematic.\n+            // In trait definitions, the predicate `Self: Trait` is problematic.\n             // Therefore we skip such predicates. This means we check less than we could.\n             for pred in predicates.predicates.iter().filter(|p| !(is_trait && p.has_self_ty())) {\n                 let mut skip = true;\n@@ -418,9 +418,20 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                         }\n                     }\n                 });\n-                if !skip {\n-                    substituted_predicates.push(pred.subst(fcx.tcx, substs));\n-                }\n+                if skip { continue; }\n+                substituted_predicates.push(match pred {\n+                    // In trait predicates, substitute defaults only for the LHS.\n+                    ty::Predicate::Trait(trait_pred) => {\n+                        let t_pred = trait_pred.skip_binder();\n+                        let self_ty = t_pred.self_ty().subst(fcx.tcx, substs);\n+                        let mut trait_substs = t_pred.trait_ref.substs.to_vec();\n+                        trait_substs[0] = self_ty.into();\n+                        let trait_ref = ty::TraitRef::new(t_pred.def_id(),\n+                                                          fcx.tcx.intern_substs(&trait_substs));\n+                        ty::Predicate::Trait(ty::Binder(trait_ref).to_poly_trait_predicate())\n+                    }\n+                    _ => pred.subst(fcx.tcx, substs)\n+                });\n             }\n         }\n "}, {"sha": "92c7f8731bab1e496c643ce3ed07315096cf405c", "filename": "src/test/run-pass/defaults-well-formedness.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs?ref=3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait<T> {}\n+struct Foo<U, V=i32>(U, V) where U: Trait<V>;\n+\n+fn main() {}"}, {"sha": "7c379a1f1bc99ad96418c9a570dc8dd26f7779ef", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "patch": "@@ -7,32 +7,41 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-// compile-flags: --error-format=human\n \n use std::iter::FromIterator;\n use std::vec::IntoIter;\n use std::ops::Add;\n \n struct Foo<T, U: FromIterator<T>>(T, U);\n struct WellFormed<Z = Foo<i32, i32>>(Z);\n+//~^ error: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied [E0277]\n struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n+//~^ error: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied [E0277]\n \n struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n+//~^ error: the trait bound `A: std::iter::Iterator` is not satisfied [E0277]\n \n struct Bounds<T:Copy=String>(T);\n+//~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n struct WhereClause<T=String>(T) where T: Copy;\n+//~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n trait TraitBound<T:Copy=String> {}\n+//~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n \n trait SelfBound<T:Copy=Self> {}\n+//~^ error: the trait bound `Self: std::marker::Copy` is not satisfied [E0277]\n \n trait FooTrait<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+//~^ error: the trait bound `i32: std::ops::Add<u8>` is not satisfied [E0277]\n \n trait Trait {}\n struct TwoParams<T, U>(T, U);\n impl Trait for TwoParams<i32, i32> {}\n // Check that each default is substituted individually in the clauses.\n struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n+//~^ error: the trait bound `TwoParams<i32, U>: Trait` is not satisfied [E0277]\n+//~^^ error: the trait bound `TwoParams<T, i32>: Trait` is not satisfied [E0277]\n \n fn main() { }"}, {"sha": "3ac6e4c26b4f0ccacb8ffe5c3579492de2373605", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a06272e8453c8b90f282b2b5b0e4c27993ff1/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=3b4a06272e8453c8b90f282b2b5b0e4c27993ff1", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:17:19\n+  --> $DIR/type-check-defaults.rs:16:19\n    |\n-17 | struct WellFormed<Z = Foo<i32, i32>>(Z);\n+16 | struct WellFormed<Z = Foo<i32, i32>>(Z);\n    |                   ^ a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n@@ -17,69 +17,69 @@ error[E0277]: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfi\n    = note: required by `Foo`\n \n error[E0277]: the trait bound `A: std::iter::Iterator` is not satisfied\n-  --> $DIR/type-check-defaults.rs:20:1\n+  --> $DIR/type-check-defaults.rs:21:1\n    |\n-20 | struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n+21 | struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `A` is not an iterator; maybe try calling `.iter()` or a similar method\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `A`\n    = help: consider adding a `where A: std::iter::Iterator` bound\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:22:1\n+  --> $DIR/type-check-defaults.rs:24:1\n    |\n-22 | struct Bounds<T:Copy=String>(T);\n+24 | struct Bounds<T:Copy=String>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:24:1\n+  --> $DIR/type-check-defaults.rs:27:1\n    |\n-24 | struct WhereClause<T=String>(T) where T: Copy;\n+27 | struct WhereClause<T=String>(T) where T: Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:26:1\n+  --> $DIR/type-check-defaults.rs:30:1\n    |\n-26 | trait TraitBound<T:Copy=String> {}\n+30 | trait TraitBound<T:Copy=String> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:28:1\n+  --> $DIR/type-check-defaults.rs:33:1\n    |\n-28 | trait SelfBound<T:Copy=Self> {}\n+33 | trait SelfBound<T:Copy=Self> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::marker::Copy` bound\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `i32: std::ops::Add<u8>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:30:1\n+  --> $DIR/type-check-defaults.rs:36:1\n    |\n-30 | trait FooTrait<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+36 | trait FooTrait<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n    = note: required by `std::ops::Add`\n \n error[E0277]: the trait bound `TwoParams<i32, U>: Trait` is not satisfied\n-  --> $DIR/type-check-defaults.rs:36:1\n+  --> $DIR/type-check-defaults.rs:43:1\n    |\n-36 | struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n+43 | struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `TwoParams<i32, U>`\n    |\n    = help: consider adding a `where TwoParams<i32, U>: Trait` bound\n    = note: required by `Trait`\n \n error[E0277]: the trait bound `TwoParams<T, i32>: Trait` is not satisfied\n-  --> $DIR/type-check-defaults.rs:36:1\n+  --> $DIR/type-check-defaults.rs:43:1\n    |\n-36 | struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n+43 | struct Bogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `TwoParams<T, i32>`\n    |\n    = help: consider adding a `where TwoParams<T, i32>: Trait` bound"}]}