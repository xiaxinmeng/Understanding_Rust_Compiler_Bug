{"sha": "841e36eb21b35becaf369c6730691a61d8b127d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MWUzNmViMjFiMzViZWNhZjM2OWM2NzMwNjkxYTYxZDhiMTI3ZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T22:12:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T22:12:07Z"}, "message": "Auto merge of #29797 - oli-obk:remove-fromb, r=nikomatsakis\n\nthe const evaluator has a bool constant value, no need to use integers\n\nthe `fromb` function is very old. It took me a while of git-blame until i found where it was created. I think it was just a hack. All tests still pass.\n\nI also forbade `&&` and `||` on integral types", "tree": {"sha": "157642f4b12db1c942e05ef17c92c0587b7b9dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/157642f4b12db1c942e05ef17c92c0587b7b9dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/841e36eb21b35becaf369c6730691a61d8b127d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/841e36eb21b35becaf369c6730691a61d8b127d9", "html_url": "https://github.com/rust-lang/rust/commit/841e36eb21b35becaf369c6730691a61d8b127d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/841e36eb21b35becaf369c6730691a61d8b127d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f539375a24511f8dff5e67e549e0f08e5b961d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f539375a24511f8dff5e67e549e0f08e5b961d", "html_url": "https://github.com/rust-lang/rust/commit/b2f539375a24511f8dff5e67e549e0f08e5b961d"}, {"sha": "96cfac6301522bde59dda71e514fcbdacd282e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/96cfac6301522bde59dda71e514fcbdacd282e40", "html_url": "https://github.com/rust-lang/rust/commit/96cfac6301522bde59dda71e514fcbdacd282e40"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "832baa1515ffb52ff07d30944628179a81df8db8", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/841e36eb21b35becaf369c6730691a61d8b127d9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841e36eb21b35becaf369c6730691a61d8b127d9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=841e36eb21b35becaf369c6730691a61d8b127d9", "patch": "@@ -390,6 +390,8 @@ pub struct ConstEvalErr {\n pub enum ErrKind {\n     CannotCast,\n     CannotCastTo(&'static str),\n+    InvalidOpForInts(hir::BinOp_),\n+    InvalidOpForUInts(hir::BinOp_),\n     InvalidOpForBools(hir::BinOp_),\n     InvalidOpForFloats(hir::BinOp_),\n     InvalidOpForIntUint(hir::BinOp_),\n@@ -428,6 +430,8 @@ impl ConstEvalErr {\n         match self.kind {\n             CannotCast => \"can't cast this type\".into_cow(),\n             CannotCastTo(s) => format!(\"can't cast this type to {}\", s).into_cow(),\n+            InvalidOpForInts(_) =>  \"can't do this op on signed integrals\".into_cow(),\n+            InvalidOpForUInts(_) =>  \"can't do this op on unsigned integrals\".into_cow(),\n             InvalidOpForBools(_) =>  \"can't do this op on bools\".into_cow(),\n             InvalidOpForFloats(_) => \"can't do this op on floats\".into_cow(),\n             InvalidOpForIntUint(..) => \"can't do this op on an isize and usize\".into_cow(),\n@@ -764,8 +768,6 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                      e: &Expr,\n                                      ty_hint: EvalHint<'tcx>,\n                                      fn_args: FnArgMap) -> EvalResult {\n-    fn fromb(b: bool) -> ConstVal { Int(b as i64) }\n-\n     // Try to compute the type of the expression based on the EvalHint.\n     // (See also the definition of EvalHint, and the FIXME above EvalHint.)\n     let ety = match ty_hint {\n@@ -837,13 +839,13 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               hir::BiMul => Float(a * b),\n               hir::BiDiv => Float(a / b),\n               hir::BiRem => Float(a % b),\n-              hir::BiEq => fromb(a == b),\n-              hir::BiLt => fromb(a < b),\n-              hir::BiLe => fromb(a <= b),\n-              hir::BiNe => fromb(a != b),\n-              hir::BiGe => fromb(a >= b),\n-              hir::BiGt => fromb(a > b),\n-              _ => signal!(e, InvalidOpForFloats(op.node))\n+              hir::BiEq => Bool(a == b),\n+              hir::BiLt => Bool(a < b),\n+              hir::BiLe => Bool(a <= b),\n+              hir::BiNe => Bool(a != b),\n+              hir::BiGe => Bool(a >= b),\n+              hir::BiGt => Bool(a > b),\n+              _ => signal!(e, InvalidOpForFloats(op.node)),\n             }\n           }\n           (Int(a), Int(b)) => {\n@@ -853,17 +855,18 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               hir::BiMul => try!(const_int_checked_mul(a,b,e,expr_int_type)),\n               hir::BiDiv => try!(const_int_checked_div(a,b,e,expr_int_type)),\n               hir::BiRem => try!(const_int_checked_rem(a,b,e,expr_int_type)),\n-              hir::BiAnd | hir::BiBitAnd => Int(a & b),\n-              hir::BiOr | hir::BiBitOr => Int(a | b),\n+              hir::BiBitAnd => Int(a & b),\n+              hir::BiBitOr => Int(a | b),\n               hir::BiBitXor => Int(a ^ b),\n               hir::BiShl => try!(const_int_checked_shl(a,b,e,expr_int_type)),\n               hir::BiShr => try!(const_int_checked_shr(a,b,e,expr_int_type)),\n-              hir::BiEq => fromb(a == b),\n-              hir::BiLt => fromb(a < b),\n-              hir::BiLe => fromb(a <= b),\n-              hir::BiNe => fromb(a != b),\n-              hir::BiGe => fromb(a >= b),\n-              hir::BiGt => fromb(a > b)\n+              hir::BiEq => Bool(a == b),\n+              hir::BiLt => Bool(a < b),\n+              hir::BiLe => Bool(a <= b),\n+              hir::BiNe => Bool(a != b),\n+              hir::BiGe => Bool(a >= b),\n+              hir::BiGt => Bool(a > b),\n+              _ => signal!(e, InvalidOpForInts(op.node)),\n             }\n           }\n           (Uint(a), Uint(b)) => {\n@@ -873,17 +876,18 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               hir::BiMul => try!(const_uint_checked_mul(a,b,e,expr_uint_type)),\n               hir::BiDiv => try!(const_uint_checked_div(a,b,e,expr_uint_type)),\n               hir::BiRem => try!(const_uint_checked_rem(a,b,e,expr_uint_type)),\n-              hir::BiAnd | hir::BiBitAnd => Uint(a & b),\n-              hir::BiOr | hir::BiBitOr => Uint(a | b),\n+              hir::BiBitAnd => Uint(a & b),\n+              hir::BiBitOr => Uint(a | b),\n               hir::BiBitXor => Uint(a ^ b),\n               hir::BiShl => try!(const_uint_checked_shl(a,b,e,expr_uint_type)),\n               hir::BiShr => try!(const_uint_checked_shr(a,b,e,expr_uint_type)),\n-              hir::BiEq => fromb(a == b),\n-              hir::BiLt => fromb(a < b),\n-              hir::BiLe => fromb(a <= b),\n-              hir::BiNe => fromb(a != b),\n-              hir::BiGe => fromb(a >= b),\n-              hir::BiGt => fromb(a > b),\n+              hir::BiEq => Bool(a == b),\n+              hir::BiLt => Bool(a < b),\n+              hir::BiLe => Bool(a <= b),\n+              hir::BiNe => Bool(a != b),\n+              hir::BiGe => Bool(a >= b),\n+              hir::BiGt => Bool(a > b),\n+              _ => signal!(e, InvalidOpForUInts(op.node)),\n             }\n           }\n           // shifts can have any integral type as their rhs"}, {"sha": "37a93ec954d8dbd2152760eeee431fdbf776b114", "filename": "src/test/compile-fail/const-integer-bool-ops.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/841e36eb21b35becaf369c6730691a61d8b127d9/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841e36eb21b35becaf369c6730691a61d8b127d9/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs?ref=841e36eb21b35becaf369c6730691a61d8b127d9", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const X: usize = 42 && 39; //~ ERROR: can't do this op on unsigned integrals\n+const ARR: [i32; X] = [99; 34]; //~ NOTE: for array length here\n+\n+const X1: usize = 42 || 39; //~ ERROR: can't do this op on unsigned integrals\n+const ARR1: [i32; X1] = [99; 47]; //~ NOTE: for array length here\n+\n+// FIXME: the error should be `on signed integrals`\n+const X2: usize = -42 || -39; //~ ERROR: can't do this op on unsigned integrals\n+const ARR2: [i32; X2] = [99; 18446744073709551607]; //~ NOTE: for array length here\n+\n+// FIXME: the error should be `on signed integrals`\n+const X3: usize = -42 && -39; //~ ERROR: can't do this op on unsigned integrals\n+const ARR3: [i32; X3] = [99; 6]; //~ NOTE: for array length here\n+\n+const Y: usize = 42.0 == 42.0;\n+const ARRR: [i32; Y] = [99; 1]; //~ ERROR: expected constant integer expression for array length\n+const Y1: usize = 42.0 >= 42.0;\n+const ARRR1: [i32; Y] = [99; 1]; //~ ERROR: expected constant integer expression for array length\n+const Y2: usize = 42.0 <= 42.0;\n+const ARRR2: [i32; Y] = [99; 1]; //~ ERROR: expected constant integer expression for array length\n+const Y3: usize = 42.0 > 42.0;\n+const ARRR3: [i32; Y] = [99; 0]; //~ ERROR: expected constant integer expression for array length\n+const Y4: usize = 42.0 < 42.0;\n+const ARRR4: [i32; Y] = [99; 0]; //~ ERROR: expected constant integer expression for array length\n+const Y5: usize = 42.0 != 42.0;\n+const ARRR5: [i32; Y] = [99; 0]; //~ ERROR: expected constant integer expression for array length\n+\n+fn main() {\n+    let _ = ARR;\n+    let _ = ARRR;\n+    let _ = ARRR1;\n+    let _ = ARRR2;\n+    let _ = ARRR3;\n+    let _ = ARRR4;\n+    let _ = ARRR5;\n+}"}]}