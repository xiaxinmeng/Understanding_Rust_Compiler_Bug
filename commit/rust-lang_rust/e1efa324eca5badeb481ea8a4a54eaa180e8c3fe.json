{"sha": "e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZWZhMzI0ZWNhNWJhZGViNDgxZWE4YTRhNTRlYWExODBlOGMzZmU=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2016-07-10T14:22:13Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2016-07-10T14:22:13Z"}, "message": "Add help for target CPUs, features, relocation and code models.", "tree": {"sha": "fab86752fdced0de421e914e93e0d4deace17e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab86752fdced0de421e914e93e0d4deace17e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "html_url": "https://github.com/rust-lang/rust/commit/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11936251a93d7395169dfab9088c4dde0cca180", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11936251a93d7395169dfab9088c4dde0cca180", "html_url": "https://github.com/rust-lang/rust/commit/d11936251a93d7395169dfab9088c4dde0cca180"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "02c06618a0043707b0d3e98fcdc45063f132ee10", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "patch": "@@ -1,6 +1,6 @@\n [submodule \"src/llvm\"]\n \tpath = src/llvm\n-\turl = https://github.com/rust-lang/llvm.git\n+\turl = https://github.com/bitshifter/llvm.git\n \tbranch = master\n [submodule \"src/compiler-rt\"]\n \tpath = src/compiler-rt"}, {"sha": "107dc6a4651708c44372f343884c07dd1650f2ac", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "patch": "@@ -165,6 +165,10 @@ pub enum PrintRequest {\n     CrateName,\n     Cfg,\n     TargetList,\n+    TargetCPUs,\n+    TargetFeatures,\n+    RelocationModels,\n+    CodeModels,\n }\n \n pub enum Input {\n@@ -1197,6 +1201,24 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         early_error(error_format, \"Value for codegen units must be a positive nonzero integer\");\n     }\n \n+    let mut prints = Vec::<PrintRequest>::new();\n+    if cg.target_cpu.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::TargetCPUs);\n+        cg.target_cpu = None;\n+    };\n+    if cg.target_feature == \"help\" {\n+        prints.push(PrintRequest::TargetFeatures);\n+        cg.target_feature = \"\".to_string();\n+    }\n+    if cg.relocation_model.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::RelocationModels);\n+        cg.relocation_model = None;\n+    }\n+    if cg.code_model.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::CodeModels);\n+        cg.code_model = None;\n+    }\n+\n     let cg = cg;\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n@@ -1274,18 +1296,22 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n \n-    let prints = matches.opt_strs(\"print\").into_iter().map(|s| {\n+    prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| {\n         match &*s {\n             \"crate-name\" => PrintRequest::CrateName,\n             \"file-names\" => PrintRequest::FileNames,\n             \"sysroot\" => PrintRequest::Sysroot,\n             \"cfg\" => PrintRequest::Cfg,\n             \"target-list\" => PrintRequest::TargetList,\n+            \"target-cpus\" => PrintRequest::TargetCPUs,\n+            \"target-features\" => PrintRequest::TargetFeatures,\n+            \"relocation-models\" => PrintRequest::RelocationModels,\n+            \"code-models\" => PrintRequest::CodeModels,\n             req => {\n                 early_error(error_format, &format!(\"unknown print request `{}`\", req))\n             }\n         }\n-    }).collect::<Vec<_>>();\n+    }));\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n         early_warn(error_format, \"-C remark will not show source locations without \\"}, {"sha": "afa6f87f84f05b4c1442c1e8fc9a6e878d22f9b7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "patch": "@@ -69,6 +69,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_trans::back::link;\n+use rustc_trans::back::write::create_target_machine;\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n@@ -657,6 +658,29 @@ impl RustcDefaultCalls {\n                         }\n                     }\n                 }\n+                PrintRequest::TargetCPUs => {\n+                    let tm = create_target_machine(sess);\n+                    unsafe { llvm::LLVMRustPrintTargetCPUs(tm); }\n+                }\n+                PrintRequest::TargetFeatures => {\n+                    let tm = create_target_machine(sess);\n+                    unsafe { llvm::LLVMRustPrintTargetFeatures(tm); }\n+                }\n+                PrintRequest::RelocationModels => {\n+                    println!(\"Available relocation models:\\n\");\n+                    println!(\"    pic\");\n+                    println!(\"    static\");\n+                    println!(\"    default\");\n+                    println!(\"    dynamic-no-pic\\n\");\n+                }\n+                PrintRequest::CodeModels => {\n+                    println!(\"Available code models:\\n\");\n+                    println!(\"    default\");\n+                    println!(\"    small\");\n+                    println!(\"    kernel\");\n+                    println!(\"    medium\");\n+                    println!(\"    large\\n\");\n+                }\n             }\n         }\n         return Compilation::Stop;"}, {"sha": "033342b81a4cd26ca3e547dd4880141ccd4b0e05", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "patch": "@@ -2040,6 +2040,9 @@ extern {\n     pub fn LLVMRustHasFeature(T: TargetMachineRef,\n                               s: *const c_char) -> bool;\n \n+    pub fn LLVMRustPrintTargetCPUs(T: TargetMachineRef);\n+    pub fn LLVMRustPrintTargetFeatures(T: TargetMachineRef);\n+\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,"}, {"sha": "31d7a402746936d6a279d6e5bb7b1cfd88a66abd", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "patch": "@@ -1 +1 @@\n-Subproject commit 7ca76af03bb04659562890d6b4f223fffe0d748f\n+Subproject commit 31d7a402746936d6a279d6e5bb7b1cfd88a66abd"}, {"sha": "962e81b018b43575a52b331c436d15f91a042f60", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e1efa324eca5badeb481ea8a4a54eaa180e8c3fe/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e1efa324eca5badeb481ea8a4a54eaa180e8c3fe", "patch": "@@ -162,6 +162,44 @@ LLVMRustHasFeature(LLVMTargetMachineRef TM,\n     return (Bits & FeatureEntry->Value) == FeatureEntry->Value;\n }\n \n+/// getLongestEntryLength - Return the length of the longest entry in the table.\n+///\n+static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {\n+  size_t MaxLen = 0;\n+  for (auto &I : Table)\n+    MaxLen = std::max(MaxLen, std::strlen(I.Key));\n+  return MaxLen;\n+}\n+\n+extern \"C\" void\n+LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n+    const TargetMachine *Target = unwrap(TM);\n+    const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n+    const ArrayRef<SubtargetFeatureKV> CPUTable = MCInfo->getCPUTable();\n+    unsigned MaxCPULen = getLongestEntryLength(CPUTable);\n+\n+    printf(\"Available CPUs for this target:\\n\\n\");\n+    for (auto &CPU : CPUTable)\n+        printf(\"    %-*s - %s.\\n\", MaxCPULen, CPU.Key, CPU.Desc);\n+    printf(\"\\n\");\n+}\n+\n+extern \"C\" void\n+LLVMRustPrintTargetFeatures(LLVMTargetMachineRef TM) {\n+    const TargetMachine *Target = unwrap(TM);\n+    const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n+    const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n+    unsigned MaxFeatLen = getLongestEntryLength(FeatTable);\n+\n+    printf(\"Available features for this target:\\n\\n\");\n+    for (auto &Feature : FeatTable)\n+        printf(\"    %-*s - %s.\\n\", MaxFeatLen, Feature.Key, Feature.Desc);\n+    printf(\"\\n\");\n+\n+    printf(\"Use +feature to enable a feature, or -feature to disable it.\\n\"\n+            \"For example, rustc -C -target-cpu=mycpu -C target-feature=+feature1,-feature2\\n\");\n+}\n+\n extern \"C\" LLVMTargetMachineRef\n LLVMRustCreateTargetMachine(const char *triple,\n                             const char *cpu,"}]}