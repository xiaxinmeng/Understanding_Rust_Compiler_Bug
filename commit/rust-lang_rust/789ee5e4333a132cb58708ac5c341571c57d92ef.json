{"sha": "789ee5e4333a132cb58708ac5c341571c57d92ef", "node_id": "C_kwDOAAsO6NoAKDc4OWVlNWU0MzMzYTEzMmNiNTg3MDhhYzVjMzQxNTcxYzU3ZDkyZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T15:21:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T15:21:22Z"}, "message": "Auto merge of #108576 - megakorre:rustdock_additional_typecheck_before_clean, r=GuillaumeGomez\n\nrustdoc: run more HIR validation to mirror rustc\n\n# Explanation\n\nWhile investigating these issues: https://github.com/rust-lang/rust/issues/107093, https://github.com/rust-lang/rust/issues/106079\nI thought it maybe would be useful to test running `rustdoc` on all rust files under `tests/ui` grepping for files that causes any ICEs.\nAnd these are the files I found would cause ICEs.\n```\n// These are handled by this fix.\ntests/ui/late-bound-lifetimes/mismatched_arg_count.rs\ntests/ui/associated-consts/issue-102335-const.rs\ntests/ui/const-generics/generic_const_exprs/issue-102768.rs\ntests/ui/const-generics/const-arg-type-arg-misordered.rs\ntests/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs\ntests/ui/typeck/issue-88643.rs\ntests/ui/typeck/issue-75889.rs\ntests/ui/typeck/issue-83621-placeholder-static-in-extern.rs\n// These are not they will still produce a ICE after this change\ntests/ui/limits/issue-56762.rs\ntests/ui/union/projection-as-union-type-error-2.rs\ntests/ui/union/projection-as-union-type-error.rs\n```\n\nI reduces the issues handled by this PR down to the tests added in the PR. That includes the linked issues.\nBut the 3 files that are not handled I will leave for a future PR.\n\nThis PR adds the `type_collecting` step from `hir_analysis::check_crate` to the rustdoc typechecks.\nIt had the following comment on it.\n```\n// this ensures that later parts of type checking can assume that items\n// have valid types and not error\n```\nAdding the check report the same errors as rustc does for these input.\nAnd not ICE when the lint checker walks the HIR or when in the `rustdoc::clean` pass.\n\nThis PR updates the expected errors of some existing rustdoc-ui tests (some now report less errors).\nThese new reported errors does mirror the errors reported by rustc.\n\n# Performance\nIt does more checking so it will probably regress. We should run ``@bors` try `@rust-timer` queue` and see.\n\n# Discussion\n\nMaybe instead of calling a subset of the checks in `hir_analysis::check_crate` and having comments that say they should be kept in sync. We could instead call `check_crate` directly and pass in some flag. Maybe `check_toplevel_signatures_only` or something like that. That flag would have to skip most of the checks in that function tough.", "tree": {"sha": "482b98133c0f9d68491e120bc378f5bca2d62d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482b98133c0f9d68491e120bc378f5bca2d62d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/789ee5e4333a132cb58708ac5c341571c57d92ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/789ee5e4333a132cb58708ac5c341571c57d92ef", "html_url": "https://github.com/rust-lang/rust/commit/789ee5e4333a132cb58708ac5c341571c57d92ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/789ee5e4333a132cb58708ac5c341571c57d92ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516a6d320270f03548c04c0707a00c998787de45", "url": "https://api.github.com/repos/rust-lang/rust/commits/516a6d320270f03548c04c0707a00c998787de45", "html_url": "https://github.com/rust-lang/rust/commit/516a6d320270f03548c04c0707a00c998787de45"}, {"sha": "1f9e2d0538bf7b4271498654df14a06b7ced8bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9e2d0538bf7b4271498654df14a06b7ced8bdb", "html_url": "https://github.com/rust-lang/rust/commit/1f9e2d0538bf7b4271498654df14a06b7ced8bdb"}], "stats": {"total": 512, "additions": 483, "deletions": 29}, "files": [{"sha": "b392ba058360d7c8d5a2a5f522512a108229965a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -303,6 +303,9 @@ pub(crate) fn run_global_ctxt(\n \n     // HACK(jynelson) this calls an _extremely_ limited subset of `typeck`\n     // and might break if queries change their assumptions in the future.\n+    tcx.sess.time(\"type_collecting\", || {\n+        tcx.hir().for_each_module(|module| tcx.ensure().collect_mod_item_types(module))\n+    });\n \n     // NOTE: This is copy/pasted from typeck/lib.rs and should be kept in sync with those changes.\n     tcx.sess.time(\"item_types_checking\", || {"}, {"sha": "4969e8d195fb314bbd73556cd103374f6be643fe", "filename": "tests/rustdoc-ui/const_arg_in_type_position.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,6 @@\n+type Array<T, const N: usize> = [T; N];\n+\n+fn foo<const N: usize>() -> Array<N, ()> {\n+    //~^ ERROR constant provided when a type was expected\n+    unimplemented!()\n+}"}, {"sha": "ea05920dea79b99ff891a5b6e6ac1c06b2635ce4", "filename": "tests/rustdoc-ui/const_arg_in_type_position.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fconst_arg_in_type_position.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/const_arg_in_type_position.rs:3:35\n+   |\n+LL | fn foo<const N: usize>() -> Array<N, ()> {\n+   |                                   ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "6ab8c36f74041e4193dd236a1141de878c31525f", "filename": "tests/rustdoc-ui/invalid_associated_const.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_associated_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_associated_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_associated_const.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,10 @@\n+#![feature(associated_const_equality)]\n+\n+trait T {\n+    type A: S<C<X = 0i32> = 34>;\n+    //~^ ERROR associated type bindings are not allowed here\n+}\n+\n+trait S {\n+    const C: i32;\n+}"}, {"sha": "1a8863fb18f5d73006227fb2e90abb78ea128e35", "filename": "tests/rustdoc-ui/invalid_associated_const.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_associated_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_associated_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_associated_const.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,9 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/invalid_associated_const.rs:4:17\n+   |\n+LL |     type A: S<C<X = 0i32> = 34>;\n+   |                 ^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "c3f4fd63bac70bc43aa5d3b8368bf5d0eff78567", "filename": "tests/rustdoc-ui/invalid_const_in_lifetime_position.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,6 @@\n+trait X {\n+    type Y<'a>;\n+}\n+fn f<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+//~^ ERROR associated type takes 1 lifetime argument but 0 lifetime arguments\n+//~| ERROR associated type takes 0 generic arguments but 1 generic argument"}, {"sha": "527729a8228626056a5acd4872ec1289dc784388", "filename": "tests/rustdoc-ui/invalid_const_in_lifetime_position.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_const_in_lifetime_position.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,33 @@\n+error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/invalid_const_in_lifetime_position.rs:4:26\n+   |\n+LL | fn f<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   |                          ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/invalid_const_in_lifetime_position.rs:2:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn f<'a>(arg : Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n+   |                            +++\n+\n+error[E0107]: associated type takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/invalid_const_in_lifetime_position.rs:4:26\n+   |\n+LL | fn f<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   |                          ^--- help: remove these generics\n+   |                          |\n+   |                          expected 0 generic arguments\n+   |\n+note: associated type defined here, with 0 generic parameters\n+  --> $DIR/invalid_const_in_lifetime_position.rs:2:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "3f8e68dc02002ca2ace7c32f7fba606208fe9bb1", "filename": "tests/rustdoc-ui/invalid_infered_static_and_const.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,2 @@\n+const FOO: dyn Fn() -> _ = \"\"; //~ ERROR E0121\n+static BOO: dyn Fn() -> _ = \"\"; //~ ERROR E0121"}, {"sha": "401020224d6a5f19f58adb3e3345bd4f585ff69b", "filename": "tests/rustdoc-ui/invalid_infered_static_and_const.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid_infered_static_and_const.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,15 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constant items\n+  --> $DIR/invalid_infered_static_and_const.rs:1:24\n+   |\n+LL | const FOO: dyn Fn() -> _ = \"\";\n+   |                        ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n+  --> $DIR/invalid_infered_static_and_const.rs:2:25\n+   |\n+LL | static BOO: dyn Fn() -> _ = \"\";\n+   |                         ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "8f4172c0cbbbf8d30be44eb696917fa67af8df24", "filename": "tests/rustdoc-ui/issue-105742.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-105742.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -1,19 +1,50 @@\n // compile-flags: -Znormalize-docs\n-\n use std::ops::Index;\n \n pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| the trait `SVec` cannot be made into an object\n+    //~| `SVec` cannot be made into an object\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     let _ = s;\n }\n \n pub trait SVec: Index<\n     <Self as SVec>::Item,\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Index<<Self as SVec>::Item,\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Self as SVec>::Item> as SVec>::Item,\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| expected 1 lifetime argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n > {\n     type Item<'a, T>;\n \n     fn len(&self) -> <Self as SVec>::Item;\n-    //~^ ERROR\n-    //~^^ ERROR\n+    //~^ expected 1 lifetime argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item`\n }"}, {"sha": "cd53762ef9b2de78e1c70b9a60683f7c44e45116", "filename": "tests/rustdoc-ui/issue-105742.stderr", "status": "modified", "additions": 325, "deletions": 6, "changes": 331, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-105742.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -1,11 +1,329 @@\n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:16:38\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:4:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<'_> = T, Output = T>) {\n+   |                                            ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:4:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n+   |                                            +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:29:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:43:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0038]: the trait `SVec` cannot be made into an object\n+  --> $DIR/issue-105742.rs:4:31\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SVec` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-105742.rs:14:17\n+   |\n+LL |    pub trait SVec: Index<\n+   |  ____________----__^\n+   | |            |\n+   | |            this trait cannot be made into an object...\n+LL | |      <Self as SVec>::Item,\n+LL | |\n+LL | |\n+...  |\n+LL | |/     Output = <Index<<Self as SVec>::Item,\n+LL | ||\n+LL | ||\n+LL | ||\n+...  ||\n+LL | ||\n+LL | ||     Output = <Self as SVec>::Item> as SVec>::Item,\n+   | ||_________________________________________________^ ...because it uses `Self` as a type parameter\n+...  |\n+LL | |\n+LL | |  > {\n+   | |__^ ...because it uses `Self` as a type parameter\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:45:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:14:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -15,13 +333,13 @@ LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n    |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:16:38\n+  --> $DIR/issue-105742.rs:45:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:14:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -30,6 +348,7 @@ help: add missing generic argument\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n    |                                          +++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 21 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "1c973dab61d89e143e87dbd50399cfd6de465985", "filename": "tests/rustdoc-ui/issue-106226.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-106226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-106226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-106226.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -1,9 +1,9 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-106226.rs:2:14\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for type aliases\n+  --> $DIR/issue-106226.rs:2:11\n    |\n LL | type F = [_; ()];\n-   |              ^^ expected `usize`, found `()`\n+   |           ^ not allowed in type signatures\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "e50f3995b83dda8fbd59cb5443143fd46d98b0d2", "filename": "tests/rustdoc-ui/issue-79465.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-79465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-79465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-79465.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -1,3 +1,2 @@\n pub fn f1<T>(x: T::A) {}\n //~^ ERROR\n-//~^^ ERROR"}, {"sha": "d187a2e664a25fa1baafe0a134af0cf24db0f30d", "filename": "tests/rustdoc-ui/issue-79465.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-79465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-79465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-79465.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -4,12 +4,6 @@ error[E0220]: associated type `A` not found for `T`\n LL | pub fn f1<T>(x: T::A) {}\n    |                    ^ associated type `A` not found\n \n-error[E0220]: associated type `A` not found for `T`\n-  --> $DIR/issue-79465.rs:1:20\n-   |\n-LL | pub fn f1<T>(x: T::A) {}\n-   |                    ^ associated type `A` not found\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0220`."}, {"sha": "08cc7ef4c902ce69450bcb23d574d301c6fe4752", "filename": "tests/rustdoc-ui/issue-96287.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-96287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-96287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-96287.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -6,7 +6,6 @@ pub trait TraitWithAssoc {\n \n pub type Foo<V> = impl Trait<V::Assoc>;\n //~^ ERROR\n-//~^^ ERROR\n \n pub trait Trait<U> {}\n "}, {"sha": "7722eb96028dfedf7756be8b108800a5e4bdb978", "filename": "tests/rustdoc-ui/issue-96287.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-96287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fissue-96287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-96287.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -4,12 +4,6 @@ error[E0220]: associated type `Assoc` not found for `V`\n LL | pub type Foo<V> = impl Trait<V::Assoc>;\n    |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n \n-error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/issue-96287.rs:7:33\n-   |\n-LL | pub type Foo<V> = impl Trait<V::Assoc>;\n-   |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0220`."}, {"sha": "7841442987b727943f88d536ffcb62a83e097f93", "filename": "tests/rustdoc-ui/mismatched_arg_count.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fmismatched_arg_count.rs?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,8 @@\n+trait Trait<'a> {\n+    type Assoc;\n+}\n+\n+type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+\n+fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+//~^ error: type alias takes 1 lifetime argument but 2 lifetime arguments were supplied"}, {"sha": "7e88ce954acae46deaa6e895cf53c41f45bc8b3d", "filename": "tests/rustdoc-ui/mismatched_arg_count.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fmismatched_arg_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/789ee5e4333a132cb58708ac5c341571c57d92ef/tests%2Frustdoc-ui%2Fmismatched_arg_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fmismatched_arg_count.stderr?ref=789ee5e4333a132cb58708ac5c341571c57d92ef", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/mismatched_arg_count.rs:7:29\n+   |\n+LL | fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+   |                             ^^^^^     -- help: remove this lifetime argument\n+   |                             |\n+   |                             expected 1 lifetime argument\n+   |\n+note: type alias defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/mismatched_arg_count.rs:5:6\n+   |\n+LL | type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+   |      ^^^^^ --\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}