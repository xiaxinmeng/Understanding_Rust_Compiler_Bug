{"sha": "893843fd455aa515a5d05cc8e70a970a84dab35d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Mzg0M2ZkNDU1YWE1MTVhNWQwNWNjOGU3MGE5NzBhODRkYWIzNWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-14T14:30:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-03-14T14:30:37Z"}, "message": "when Miri calls a function ptr, make sure it has the right ABI", "tree": {"sha": "8ba30d94dbf528b6f4cce48602bc475cfcc1c331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ba30d94dbf528b6f4cce48602bc475cfcc1c331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893843fd455aa515a5d05cc8e70a970a84dab35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893843fd455aa515a5d05cc8e70a970a84dab35d", "html_url": "https://github.com/rust-lang/rust/commit/893843fd455aa515a5d05cc8e70a970a84dab35d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893843fd455aa515a5d05cc8e70a970a84dab35d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae964207bb17911cf96d9744d9469fa2734093a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae964207bb17911cf96d9744d9469fa2734093a8", "html_url": "https://github.com/rust-lang/rust/commit/ae964207bb17911cf96d9744d9469fa2734093a8"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "bd1aebe00de8f2689a88d7e103e4b12b63ad74f7", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -8,6 +8,7 @@ use log::info;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, layout::LayoutCx, TyCtxt};\n use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n \n@@ -189,6 +190,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // Call start function.\n     ecx.call_function(\n         start_instance,\n+        Abi::Rust,\n         &[main_ptr.into(), argc.into(), argv.into()],\n         Some(&ret_place.into()),\n         StackPopCleanup::None { cleanup: true },"}, {"sha": "1f1c9922754c4b7fd283ecb538d30e2ce91c8f26", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -161,11 +161,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn call_function(\n         &mut self,\n         f: ty::Instance<'tcx>,\n+        caller_abi: Abi,\n         args: &[Immediate<Tag>],\n         dest: Option<&PlaceTy<'tcx, Tag>>,\n         stack_pop: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+        let param_env = ty::ParamEnv::reveal_all(); // in Miri this is always the param_env we use... and this.param_env is private.\n+        let callee_abi = f.ty(*this.tcx, param_env).fn_sig(*this.tcx).abi();\n+        if callee_abi != caller_abi {\n+            throw_ub_format!(\"calling a function with ABI {} using caller ABI {}\", callee_abi.name(), caller_abi.name())\n+        }\n \n         // Push frame.\n         let mir = &*this.load_mir(f.def, None)?;"}, {"sha": "99cb3bf2b29c086fe4681f2ceb3669174ba17122", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -430,6 +430,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         let malloc = ty::Instance::mono(ecx.tcx.tcx, malloc);\n         ecx.call_function(\n             malloc,\n+            Abi::Rust,\n             &[size.into(), align.into()],\n             Some(dest),\n             // Don't do anything when we are done. The `statement()` function will increment"}, {"sha": "2c6d31549c353a923ac6d1343cfff363f832f588", "filename": "src/shims/panic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -15,6 +15,7 @@ use log::trace;\n \n use rustc_middle::{mir, ty};\n use rustc_target::spec::PanicStrategy;\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use helpers::check_arg_count;\n@@ -94,6 +95,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n         this.call_function(\n             f_instance,\n+            Abi::Rust,\n             &[data.into()],\n             Some(&ret_place),\n             // Directly return to caller.\n@@ -145,6 +147,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 f_instance,\n+                Abi::Rust,\n                 &[catch_unwind.data.into(), payload.into()],\n                 Some(&ret_place),\n                 // Directly return to caller of `try`.\n@@ -174,6 +177,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let panic = ty::Instance::mono(this.tcx.tcx, panic);\n         this.call_function(\n             panic,\n+            Abi::Rust,\n             &[msg.to_ref()],\n             None,\n             StackPopCleanup::Goto { ret: None, unwind },\n@@ -202,6 +206,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let panic_bounds_check = ty::Instance::mono(this.tcx.tcx, panic_bounds_check);\n                 this.call_function(\n                     panic_bounds_check,\n+                    Abi::Rust,\n                     &[index.into(), len.into()],\n                     None,\n                     StackPopCleanup::Goto { ret: None, unwind },"}, {"sha": "fb1c018fc34ba525324b355d3f813deac6bf8118", "filename": "src/shims/posix/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fshims%2Fposix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fshims%2Fposix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fthread.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -2,6 +2,7 @@ use std::convert::TryInto;\n \n use crate::*;\n use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::abi::Abi;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -50,6 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.call_function(\n             instance,\n+            Abi::C { unwind: false },\n             &[*func_arg],\n             Some(&ret_place.into()),\n             StackPopCleanup::None { cleanup: true },"}, {"sha": "ef77949efada506ffd5e6356c577c8827605fe7b", "filename": "src/shims/tls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -9,6 +9,7 @@ use log::trace;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty;\n use rustc_target::abi::{Size, HasDataLayout};\n+use rustc_target::spec::abi::Abi;\n \n use crate::*;\n \n@@ -244,6 +245,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n         this.call_function(\n             thread_callback,\n+            Abi::System { unwind: false },\n             &[Scalar::null_ptr(this).into(), reason.into(), Scalar::null_ptr(this).into()],\n             Some(&ret_place),\n             StackPopCleanup::None { cleanup: true },\n@@ -266,6 +268,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 instance,\n+                Abi::C { unwind: false },\n                 &[data.into()],\n                 Some(&ret_place),\n                 StackPopCleanup::None { cleanup: true },\n@@ -306,6 +309,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let ret_place = MPlaceTy::dangling(this.machine.layouts.unit, this).into();\n             this.call_function(\n                 instance,\n+                Abi::C { unwind: false },\n                 &[ptr.into()],\n                 Some(&ret_place),\n                 StackPopCleanup::None { cleanup: true },"}, {"sha": "8f3bb17470b59e9208c13775416c5625057a1b6a", "filename": "tests/compile-fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/893843fd455aa515a5d05cc8e70a970a84dab35d/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893843fd455aa515a5d05cc8e70a970a84dab35d/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=893843fd455aa515a5d05cc8e70a970a84dab35d", "patch": "@@ -1,7 +1,10 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// error-pattern: unwinding past the topmost frame of the stack\n+// error-pattern: calling a function with ABI C-unwind using caller ABI C\n \n //! Unwinding past the top frame of a stack is Undefined Behavior.\n+//! However, it is impossible to do that in pure Rust since one cannot write an unwinding\n+//! function with `C` ABI... so let's instead test that we are indeed correctly checking\n+//! the callee ABI in `pthread_create`.\n \n #![feature(rustc_private, c_unwind)]\n "}]}