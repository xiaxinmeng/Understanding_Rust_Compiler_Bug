{"sha": "27f77060e2452fda5c2896c9b46feaa8399c3eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Zjc3MDYwZTI0NTJmZGE1YzI4OTZjOWI0NmZlYWE4Mzk5YzNlYWU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-09T16:22:57Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-09T16:22:57Z"}, "message": "Add `TestDB::module_at_position`", "tree": {"sha": "e146374a0edc198b5b297bc1f021bee00f990ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e146374a0edc198b5b297bc1f021bee00f990ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27f77060e2452fda5c2896c9b46feaa8399c3eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27f77060e2452fda5c2896c9b46feaa8399c3eae", "html_url": "https://github.com/rust-lang/rust/commit/27f77060e2452fda5c2896c9b46feaa8399c3eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27f77060e2452fda5c2896c9b46feaa8399c3eae/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1956286368809718c70692e422893559ec487c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/1956286368809718c70692e422893559ec487c62", "html_url": "https://github.com/rust-lang/rust/commit/1956286368809718c70692e422893559ec487c62"}], "stats": {"total": 203, "additions": 99, "deletions": 104}, "files": [{"sha": "bb43569d722b6448f8a9eb48d3f570d8e16f6a93", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 4, "deletions": 100, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/27f77060e2452fda5c2896c9b46feaa8399c3eae/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f77060e2452fda5c2896c9b46feaa8399c3eae/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=27f77060e2452fda5c2896c9b46feaa8399c3eae", "patch": "@@ -1,10 +1,10 @@\n mod block;\n \n-use base_db::{fixture::WithFixture, FilePosition, SourceDatabase};\n+use base_db::{fixture::WithFixture, SourceDatabase};\n use expect_test::Expect;\n use test_utils::mark;\n \n-use crate::{test_db::TestDB, BlockId, ModuleDefId};\n+use crate::{test_db::TestDB, ModuleDefId};\n \n use super::*;\n \n@@ -37,104 +37,8 @@ fn check_diagnostics(ra_fixture: &str) {\n fn block_def_map_at(ra_fixture: &str) -> String {\n     let (db, position) = crate::test_db::TestDB::with_position(ra_fixture);\n \n-    let krate = db.crate_graph().iter().next().unwrap();\n-    let def_map = db.crate_def_map(krate);\n-\n-    let mut block =\n-        block_at_pos(&db, &def_map, position).expect(\"couldn't find enclosing function or block\");\n-    loop {\n-        let def_map = db.block_def_map(block).unwrap_or_else(|| def_map.clone());\n-        let new_block = block_at_pos(&db, &def_map, position);\n-        match new_block {\n-            Some(new_block) => {\n-                assert_ne!(block, new_block);\n-                block = new_block;\n-            }\n-            None => {\n-                return def_map.dump(&db);\n-            }\n-        }\n-    }\n-}\n-\n-fn block_at_pos(db: &dyn DefDatabase, def_map: &DefMap, position: FilePosition) -> Option<BlockId> {\n-    // Find the smallest (innermost) function containing the cursor.\n-    let mut size = None;\n-    let mut fn_def = None;\n-    for (_, module) in def_map.modules() {\n-        let file_id = module.definition_source(db).file_id;\n-        if file_id != position.file_id.into() {\n-            continue;\n-        }\n-        let root = db.parse_or_expand(file_id).unwrap();\n-        let ast_map = db.ast_id_map(file_id);\n-        let item_tree = db.item_tree(file_id);\n-        for decl in module.scope.declarations() {\n-            if let ModuleDefId::FunctionId(it) = decl {\n-                let ast = ast_map.get(item_tree[it.lookup(db).id.value].ast_id).to_node(&root);\n-                let range = ast.syntax().text_range();\n-\n-                if !range.contains(position.offset) {\n-                    continue;\n-                }\n-\n-                let new_size = match size {\n-                    None => range.len(),\n-                    Some(size) => {\n-                        if range.len() < size {\n-                            range.len()\n-                        } else {\n-                            size\n-                        }\n-                    }\n-                };\n-                if size != Some(new_size) {\n-                    size = Some(new_size);\n-                    fn_def = Some(it);\n-                }\n-            }\n-        }\n-    }\n-\n-    let (body, source_map) = db.body_with_source_map(fn_def?.into());\n-\n-    // Now find the smallest encompassing block expression in the function body.\n-    let mut size = None;\n-    let mut block_id = None;\n-    for (expr_id, expr) in body.exprs.iter() {\n-        if let Expr::Block { id, .. } = expr {\n-            if let Ok(ast) = source_map.expr_syntax(expr_id) {\n-                if ast.file_id != position.file_id.into() {\n-                    continue;\n-                }\n-\n-                let root = db.parse_or_expand(ast.file_id).unwrap();\n-                let ast = ast.value.to_node(&root);\n-                let range = ast.syntax().text_range();\n-\n-                if !range.contains(position.offset) {\n-                    continue;\n-                }\n-\n-                let new_size = match size {\n-                    None => range.len(),\n-                    Some(size) => {\n-                        if range.len() < size {\n-                            range.len()\n-                        } else {\n-                            size\n-                        }\n-                    }\n-                };\n-                if size != Some(new_size) {\n-                    size = Some(new_size);\n-                    block_id = Some(*id);\n-                }\n-            }\n-        }\n-    }\n-\n-    Some(block_id.expect(\"can't find block containing cursor\"))\n+    let module = db.module_at_position(position);\n+    module.def_map(&db).dump(&db)\n }\n \n fn check_at(ra_fixture: &str, expect: Expect) {"}, {"sha": "eda982c85e18427c8dd142255d4e9f9ec8ea880a", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 95, "deletions": 4, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/27f77060e2452fda5c2896c9b46feaa8399c3eae/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f77060e2452fda5c2896c9b46feaa8399c3eae/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=27f77060e2452fda5c2896c9b46feaa8399c3eae", "patch": "@@ -5,17 +5,17 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n-use base_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, Upcast};\n+use base_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, FilePosition, Upcast};\n use base_db::{AnchoredPath, SourceDatabase};\n-use hir_expand::db::AstDatabase;\n use hir_expand::diagnostics::Diagnostic;\n use hir_expand::diagnostics::DiagnosticSinkBuilder;\n+use hir_expand::{db::AstDatabase, InFile};\n use rustc_hash::FxHashMap;\n use rustc_hash::FxHashSet;\n-use syntax::{TextRange, TextSize};\n+use syntax::{algo, ast, AstNode, TextRange, TextSize};\n use test_utils::extract_annotations;\n \n-use crate::{db::DefDatabase, ModuleDefId, ModuleId};\n+use crate::{db::DefDatabase, nameres::DefMap, Lookup, ModuleDefId, ModuleId};\n \n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,\n@@ -84,6 +84,97 @@ impl TestDB {\n         panic!(\"Can't find module for file\")\n     }\n \n+    pub(crate) fn module_at_position(&self, position: FilePosition) -> ModuleId {\n+        let file_module = self.module_for_file(position.file_id);\n+        let mut def_map = file_module.def_map(self);\n+\n+        def_map = match self.block_at_position(&def_map, position) {\n+            Some(it) => it,\n+            None => return file_module,\n+        };\n+        loop {\n+            let new_map = self.block_at_position(&def_map, position);\n+            match new_map {\n+                Some(new_block) if !Arc::ptr_eq(&new_block, &def_map) => {\n+                    def_map = new_block;\n+                }\n+                _ => {\n+                    // FIXME: handle `mod` inside block expression\n+                    return def_map.module_id(def_map.root());\n+                }\n+            }\n+        }\n+    }\n+\n+    fn block_at_position(&self, def_map: &DefMap, position: FilePosition) -> Option<Arc<DefMap>> {\n+        // Find the smallest (innermost) function in `def_map` containing the cursor.\n+        let mut size = None;\n+        let mut fn_def = None;\n+        for (_, module) in def_map.modules() {\n+            let file_id = module.definition_source(self).file_id;\n+            if file_id != position.file_id.into() {\n+                continue;\n+            }\n+            let root = self.parse_or_expand(file_id).unwrap();\n+            let ast_map = self.ast_id_map(file_id);\n+            let item_tree = self.item_tree(file_id);\n+            for decl in module.scope.declarations() {\n+                if let ModuleDefId::FunctionId(it) = decl {\n+                    let ast =\n+                        ast_map.get(item_tree[it.lookup(self).id.value].ast_id).to_node(&root);\n+                    let range = ast.syntax().text_range();\n+\n+                    if !range.contains(position.offset) {\n+                        continue;\n+                    }\n+\n+                    let new_size = match size {\n+                        None => range.len(),\n+                        Some(size) => {\n+                            if range.len() < size {\n+                                range.len()\n+                            } else {\n+                                size\n+                            }\n+                        }\n+                    };\n+                    if size != Some(new_size) {\n+                        size = Some(new_size);\n+                        fn_def = Some(it);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Find the innermost block expression that has a `DefMap`.\n+        let def_with_body = fn_def?.into();\n+        let (_, source_map) = self.body_with_source_map(def_with_body);\n+        let scopes = self.expr_scopes(def_with_body);\n+        let root = self.parse(position.file_id);\n+\n+        let scope_iter = algo::ancestors_at_offset(&root.syntax_node(), position.offset)\n+            .filter_map(|node| {\n+                let block = ast::BlockExpr::cast(node)?;\n+                let expr = ast::Expr::from(block);\n+                let expr_id = source_map.node_expr(InFile::new(position.file_id.into(), &expr))?;\n+                let scope = scopes.scope_for(expr_id).unwrap();\n+                Some(scope)\n+            });\n+\n+        for scope in scope_iter {\n+            let containing_blocks =\n+                scopes.scope_chain(Some(scope)).filter_map(|scope| scopes.block(scope));\n+\n+            for block in containing_blocks {\n+                if let Some(def_map) = self.block_def_map(block) {\n+                    return Some(def_map);\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+\n     pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n         *self.events.lock().unwrap() = Some(Vec::new());\n         f();"}]}