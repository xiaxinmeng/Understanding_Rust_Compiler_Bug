{"sha": "9c044d77a334609513f3b615e0763a40cc02424d", "node_id": "C_kwDOAAsO6NoAKDljMDQ0ZDc3YTMzNDYwOTUxM2YzYjYxNWUwNzYzYTQwY2MwMjQyNGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-26T15:52:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-26T15:52:33Z"}, "message": "Auto merge of #110822 - scottmcm:lower-offset-to-mir, r=compiler-errors\n\nLower `intrinsics::offset` to `mir::BinOp::Offset`\n\nThey're [semantically the same](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.Rvalue.html#variant.BinaryOp), so this means the backends don't need to handle the intrinsic and means fewer MIR basic blocks in pointer arithmetic code.", "tree": {"sha": "ae444821302a827fe1af2cc2a2da4396e099c6c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae444821302a827fe1af2cc2a2da4396e099c6c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c044d77a334609513f3b615e0763a40cc02424d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c044d77a334609513f3b615e0763a40cc02424d", "html_url": "https://github.com/rust-lang/rust/commit/9c044d77a334609513f3b615e0763a40cc02424d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c044d77a334609513f3b615e0763a40cc02424d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8763965a2c7b68a33af5fc55999f9eff26749fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8763965a2c7b68a33af5fc55999f9eff26749fd6", "html_url": "https://github.com/rust-lang/rust/commit/8763965a2c7b68a33af5fc55999f9eff26749fd6"}, {"sha": "05a665f21a6f9763d136a9d2d7c0255de6d333fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/05a665f21a6f9763d136a9d2d7c0255de6d333fb", "html_url": "https://github.com/rust-lang/rust/commit/05a665f21a6f9763d136a9d2d7c0255de6d333fb"}], "stats": {"total": 86, "additions": 66, "deletions": 20}, "files": [{"sha": "90b36c6111429dad123dc7404e14e9dafa7e6f48", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -534,7 +534,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n         // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n         // doesn't have UB both are codegen'ed the same way\n-        sym::offset | sym::arith_offset => {\n+        sym::arith_offset => {\n             intrinsic_args!(fx, args => (base, offset); intrinsic);\n             let offset = offset.load_scalar(fx);\n "}, {"sha": "1479242f23a6c08ad99b47b4ad5c1a9f2a808fce", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -135,13 +135,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .unwrap();\n                 OperandRef::from_const(bx, value, ret_ty).immediate_or_packed_pair(bx)\n             }\n-            sym::offset => {\n-                let ty = substs.type_at(0);\n-                let layout = bx.layout_of(ty);\n-                let ptr = args[0].immediate();\n-                let offset = args[1].immediate();\n-                bx.inbounds_gep(bx.backend_type(layout), ptr, &[offset])\n-            }\n             sym::arith_offset => {\n                 let ty = substs.type_at(0);\n                 let layout = bx.layout_of(ty);"}, {"sha": "bfca58a15b3ac7ba5d9f2f64a1a6bc9710f33ad5", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -559,11 +559,20 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn binary_ptr_op(\n-        _ecx: &InterpCx<'mir, 'tcx, Self>,\n-        _bin_op: mir::BinOp,\n-        _left: &ImmTy<'tcx>,\n-        _right: &ImmTy<'tcx>,\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        bin_op: mir::BinOp,\n+        left: &ImmTy<'tcx>,\n+        right: &ImmTy<'tcx>,\n     ) -> InterpResult<'tcx, (Scalar, bool, Ty<'tcx>)> {\n+        if bin_op == mir::BinOp::Offset {\n+            let ptr = left.to_scalar().to_pointer(ecx)?;\n+            let offset_count = right.to_scalar().to_target_isize(ecx)?;\n+            let pointee_ty = left.layout.ty.builtin_deref(true).unwrap().ty;\n+\n+            let offset_ptr = ecx.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n+            return Ok((Scalar::from_maybe_pointer(offset_ptr, ecx), false, left.layout.ty));\n+        }\n+\n         throw_unsup_format!(\"pointer arithmetic or comparison is not supported at compile-time\");\n     }\n "}, {"sha": "a77c699c22f7e16ce80f290441dc7b5fa45577d4", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -286,14 +286,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::write_bytes => {\n                 self.write_bytes_intrinsic(&args[0], &args[1], &args[2])?;\n             }\n-            sym::offset => {\n-                let ptr = self.read_pointer(&args[0])?;\n-                let offset_count = self.read_target_isize(&args[1])?;\n-                let pointee_ty = substs.type_at(0);\n-\n-                let offset_ptr = self.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n-                self.write_pointer(offset_ptr, dest)?;\n-            }\n             sym::arith_offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n                 let offset_count = self.read_target_isize(&args[1])?;"}, {"sha": "62b727674c5d1ecbaeaf161adb2b9259cb684b64", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -192,6 +192,23 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    sym::offset => {\n+                        let target = target.unwrap();\n+                        let Ok([ptr, delta]) = <[_; 2]>::try_from(std::mem::take(args)) else {\n+                            span_bug!(\n+                                terminator.source_info.span,\n+                                \"Wrong number of arguments for offset intrinsic\",\n+                            );\n+                        };\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Assign(Box::new((\n+                                *destination,\n+                                Rvalue::BinaryOp(BinOp::Offset, Box::new((ptr, delta))),\n+                            ))),\n+                        });\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n                     sym::option_payload_ptr => {\n                         if let (Some(target), Some(arg)) = (*target, args[0].place()) {\n                             let ty::RawPtr(ty::TypeAndMut { ty: dest_ty, .. }) ="}, {"sha": "f342bf30d02ac04350e53cbcd26ba734d47a558d", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -0,0 +1,30 @@\n+- // MIR for `ptr_offset` before LowerIntrinsics\n++ // MIR for `ptr_offset` after LowerIntrinsics\n+  \n+  fn ptr_offset(_1: *const i32, _2: isize) -> *const i32 {\n+      debug p => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:26: +0:27\n+      debug d => _2;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:41: +0:42\n+      let mut _0: *const i32;              // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:54: +0:64\n+      let mut _3: *const i32;              // in scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n+      let mut _4: isize;                   // in scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n+          _3 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n+          _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n+-         _0 = offset::<i32>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:140:5: 140:29\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<i32>}, val: Value(<ZST>) }\n++         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "ad690f803c4241f74598c753319fb6bf752fa3a8", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c044d77a334609513f3b615e0763a40cc02424d/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c044d77a334609513f3b615e0763a40cc02424d/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=9c044d77a334609513f3b615e0763a40cc02424d", "patch": "@@ -134,3 +134,8 @@ pub fn option_payload(o: &Option<usize>, p: &Option<String>) {\n         let _y = core::intrinsics::option_payload_ptr(p);\n     }\n }\n+\n+// EMIT_MIR lower_intrinsics.ptr_offset.LowerIntrinsics.diff\n+pub unsafe fn ptr_offset(p: *const i32, d: isize) -> *const i32 {\n+    core::intrinsics::offset(p, d)\n+}"}]}