{"sha": "c6645f2eb69db0e2ce5483fc1c60316320f050d9", "node_id": "C_kwDOAAsO6NoAKGM2NjQ1ZjJlYjY5ZGIwZTJjZTU0ODNmYzFjNjAzMTYzMjBmMDUwZDk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-21T17:07:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-21T17:07:47Z"}, "message": "fix: Make code lenses work on attributed items", "tree": {"sha": "e90ffd830c9c16eaa5e72927706595556cbe87a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e90ffd830c9c16eaa5e72927706595556cbe87a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6645f2eb69db0e2ce5483fc1c60316320f050d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6645f2eb69db0e2ce5483fc1c60316320f050d9", "html_url": "https://github.com/rust-lang/rust/commit/c6645f2eb69db0e2ce5483fc1c60316320f050d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6645f2eb69db0e2ce5483fc1c60316320f050d9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d3cd90d0883625e894d7635858fb15c16d826d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d3cd90d0883625e894d7635858fb15c16d826d2", "html_url": "https://github.com/rust-lang/rust/commit/0d3cd90d0883625e894d7635858fb15c16d826d2"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "986db75c610d2c6f19babfa711d3234121e510b6", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c6645f2eb69db0e2ce5483fc1c60316320f050d9/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6645f2eb69db0e2ce5483fc1c60316320f050d9/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=c6645f2eb69db0e2ce5483fc1c60316320f050d9", "patch": "@@ -65,10 +65,10 @@ pub(crate) fn annotations(\n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| {\n         let range = match def {\n             Definition::Const(konst) if config.annotate_references => {\n-                konst.source(db).and_then(|node| name_range(&node, file_id))\n+                konst.source(db).and_then(|node| name_range(db, node, file_id))\n             }\n             Definition::Trait(trait_) if config.annotate_references || config.annotate_impls => {\n-                trait_.source(db).and_then(|node| name_range(&node, file_id))\n+                trait_.source(db).and_then(|node| name_range(db, node, file_id))\n             }\n             Definition::Adt(adt) => match adt {\n                 hir::Adt::Enum(enum_) => {\n@@ -77,7 +77,7 @@ pub(crate) fn annotations(\n                             .variants(db)\n                             .into_iter()\n                             .map(|variant| {\n-                                variant.source(db).and_then(|node| name_range(&node, file_id))\n+                                variant.source(db).and_then(|node| name_range(db, node, file_id))\n                             })\n                             .filter_map(std::convert::identity)\n                             .for_each(|range| {\n@@ -91,14 +91,14 @@ pub(crate) fn annotations(\n                             })\n                     }\n                     if config.annotate_references || config.annotate_impls {\n-                        enum_.source(db).and_then(|node| name_range(&node, file_id))\n+                        enum_.source(db).and_then(|node| name_range(db, node, file_id))\n                     } else {\n                         None\n                     }\n                 }\n                 _ => {\n                     if config.annotate_references || config.annotate_impls {\n-                        adt.source(db).and_then(|node| name_range(&node, file_id))\n+                        adt.source(db).and_then(|node| name_range(db, node, file_id))\n                     } else {\n                         None\n                     }\n@@ -131,13 +131,17 @@ pub(crate) fn annotations(\n             });\n         }\n \n-        fn name_range<T: HasName>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n-            if node.file_id == file_id.into() {\n-                node.value.name().map(|it| it.syntax().text_range())\n-            } else {\n-                // Node is outside the file we are adding annotations to (e.g. macros).\n-                None\n+        fn name_range<T: HasName>(\n+            db: &RootDatabase,\n+            node: InFile<T>,\n+            source_file_id: FileId,\n+        ) -> Option<TextRange> {\n+            if let Some(InFile { file_id, value }) = node.original_ast_node(db) {\n+                if file_id == source_file_id.into() {\n+                    return value.name().map(|it| it.syntax().text_range());\n+                }\n             }\n+            None\n         }\n     });\n "}]}