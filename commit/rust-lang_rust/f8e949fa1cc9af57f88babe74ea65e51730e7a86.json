{"sha": "f8e949fa1cc9af57f88babe74ea65e51730e7a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZTk0OWZhMWNjOWFmNTdmODhiYWJlNzRlYTY1ZTUxNzMwZTdhODY=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-03-03T23:52:53Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-03-03T23:52:53Z"}, "message": "Recommended changes from flip1995", "tree": {"sha": "3fe0fdb6c6203af1caf0441832a636e12cd65077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe0fdb6c6203af1caf0441832a636e12cd65077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e949fa1cc9af57f88babe74ea65e51730e7a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e949fa1cc9af57f88babe74ea65e51730e7a86", "html_url": "https://github.com/rust-lang/rust/commit/f8e949fa1cc9af57f88babe74ea65e51730e7a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e949fa1cc9af57f88babe74ea65e51730e7a86/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d584f3ff760b14c8b23ae52f8ae7631305e43af", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d584f3ff760b14c8b23ae52f8ae7631305e43af", "html_url": "https://github.com/rust-lang/rust/commit/0d584f3ff760b14c8b23ae52f8ae7631305e43af"}], "stats": {"total": 260, "additions": 179, "deletions": 81}, "files": [{"sha": "6a58b27f065130b103d5146284a2cec5248ac720", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 49, "deletions": 64, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/f8e949fa1cc9af57f88babe74ea65e51730e7a86/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e949fa1cc9af57f88babe74ea65e51730e7a86/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=f8e949fa1cc9af57f88babe74ea65e51730e7a86", "patch": "@@ -1,17 +1,17 @@\n use crate::consts::{\n-    constant, Constant,\n+    constant, constant_simple, Constant,\n     Constant::{F32, F64},\n };\n use crate::utils::{higher, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Lit, UnOp};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n-use rustc_ast::ast::{self, FloatTy, LitFloatType, LitKind};\n+use rustc_ast::ast;\n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n use sugg::{format_numeric_literal, Sugg};\n@@ -378,20 +378,21 @@ fn check_mul_add(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n fn is_testing_positive(cx: &LateContext<'_, '_>, expr: &Expr<'_>, test: &Expr<'_>) -> bool {\n     if let ExprKind::Binary(Spanned { node: op, .. }, left, right) = expr.kind {\n         match op {\n-            BinOpKind::Gt | BinOpKind::Ge => is_zero(right) && are_exprs_equal(cx, left, test),\n-            BinOpKind::Lt | BinOpKind::Le => is_zero(left) && are_exprs_equal(cx, right, test),\n+            BinOpKind::Gt | BinOpKind::Ge => is_zero(cx, right) && are_exprs_equal(cx, left, test),\n+            BinOpKind::Lt | BinOpKind::Le => is_zero(cx, left) && are_exprs_equal(cx, right, test),\n             _ => false,\n         }\n     } else {\n         false\n     }\n }\n \n+/// See [`is_testing_positive`]\n fn is_testing_negative(cx: &LateContext<'_, '_>, expr: &Expr<'_>, test: &Expr<'_>) -> bool {\n     if let ExprKind::Binary(Spanned { node: op, .. }, left, right) = expr.kind {\n         match op {\n-            BinOpKind::Gt | BinOpKind::Ge => is_zero(left) && are_exprs_equal(cx, right, test),\n-            BinOpKind::Lt | BinOpKind::Le => is_zero(right) && are_exprs_equal(cx, left, test),\n+            BinOpKind::Gt | BinOpKind::Ge => is_zero(cx, left) && are_exprs_equal(cx, right, test),\n+            BinOpKind::Lt | BinOpKind::Le => is_zero(cx, right) && are_exprs_equal(cx, left, test),\n             _ => false,\n         }\n     } else {\n@@ -404,85 +405,69 @@ fn are_exprs_equal(cx: &LateContext<'_, '_>, expr1: &Expr<'_>, expr2: &Expr<'_>)\n }\n \n /// Returns true iff expr is some zero literal\n-fn is_zero(expr: &Expr<'_>) -> bool {\n-    if let ExprKind::Lit(Lit { node: lit, .. }) = &expr.kind {\n-        match lit {\n-            LitKind::Int(0, _) => true,\n-            LitKind::Float(symb, LitFloatType::Unsuffixed)\n-            | LitKind::Float(symb, LitFloatType::Suffixed(FloatTy::F64)) => {\n-                symb.as_str().parse::<f64>().unwrap() == 0.0\n-            },\n-            LitKind::Float(symb, LitFloatType::Suffixed(FloatTy::F32)) => symb.as_str().parse::<f32>().unwrap() == 0.0,\n-            _ => false,\n-        }\n-    } else {\n-        false\n+fn is_zero(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    match constant_simple(cx, cx.tables, expr) {\n+        Some(Constant::Int(i)) => i == 0,\n+        Some(Constant::F32(f)) => f == 0.0,\n+        Some(Constant::F64(f)) => f == 0.0,\n+        _ => false,\n     }\n }\n \n-/// If the expressions are not opposites, return None\n-/// Otherwise, return true if expr2 = -expr1, false if expr1 = -expr2 and return the positive\n-/// expression\n-fn are_opposites<'a>(\n+/// If the two expressions are negations of each other, then it returns\n+/// a tuple, in which the first element is true iff expr1 is the\n+/// positive expressions, and the second element is the positive\n+/// one of the two expressions\n+/// If the two expressions are not negations of each other, then it\n+/// returns None.\n+fn are_negated<'a>(\n     cx: &LateContext<'_, '_>,\n     expr1: &'a Expr<'a>,\n     expr2: &'a Expr<'a>,\n ) -> Option<(bool, &'a Expr<'a>)> {\n-    if let ExprKind::Block(\n-        Block {\n-            stmts: [],\n-            expr: Some(expr1_inner),\n-            ..\n-        },\n-        _,\n-    ) = &expr1.kind\n-    {\n-        if let ExprKind::Block(\n-            Block {\n-                stmts: [],\n-                expr: Some(expr2_inner),\n-                ..\n-            },\n-            _,\n-        ) = &expr2.kind\n-        {\n-            if let ExprKind::Unary(UnOp::UnNeg, expr1_neg) = &expr1_inner.kind {\n-                if are_exprs_equal(cx, expr1_neg, expr2_inner) {\n-                    return Some((false, expr2_inner));\n-                }\n-            }\n-            if let ExprKind::Unary(UnOp::UnNeg, expr2_neg) = &expr2_inner.kind {\n-                if are_exprs_equal(cx, expr1_inner, expr2_neg) {\n-                    return Some((true, expr1_inner));\n-                }\n-            }\n+    if let ExprKind::Unary(UnOp::UnNeg, expr1_negated) = &expr1.kind {\n+        if are_exprs_equal(cx, expr1_negated, expr2) {\n+            return Some((false, expr2));\n+        }\n+    }\n+    if let ExprKind::Unary(UnOp::UnNeg, expr2_negated) = &expr2.kind {\n+        if are_exprs_equal(cx, expr1, expr2_negated) {\n+            return Some((true, expr1));\n         }\n     }\n     None\n }\n \n fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n-    if let Some((cond, body, Some(else_body))) = higher::if_block(&expr) {\n-        if let Some((expr1_pos, body)) = are_opposites(cx, body, else_body) {\n-            let pos_abs_sugg = (\n-                \"This looks like you've implemented your own absolute value function\",\n+    if_chain! {\n+        if let Some((cond, body, Some(else_body))) = higher::if_block(&expr);\n+        if let ExprKind::Block(block, _) = body.kind;\n+        if block.stmts.is_empty();\n+        if let Some(if_body_expr) = block.expr;\n+        if let ExprKind::Block(else_block, _) = else_body.kind;\n+        if else_block.stmts.is_empty();\n+        if let Some(else_body_expr) = else_block.expr;\n+        if let Some((if_expr_positive, body)) = are_negated(cx, if_body_expr, else_body_expr);\n+        then {\n+            let positive_abs_sugg = (\n+                \"manual implementation of `abs` method\",\n                 format!(\"{}.abs()\", Sugg::hir(cx, body, \"..\")),\n             );\n-            let neg_abs_sugg = (\n-                \"This looks like you've implemented your own negative absolute value function\",\n+            let negative_abs_sugg = (\n+                \"manual implementation of negation of `abs` method\",\n                 format!(\"-{}.abs()\", Sugg::hir(cx, body, \"..\")),\n             );\n             let sugg = if is_testing_positive(cx, cond, body) {\n-                if expr1_pos {\n-                    pos_abs_sugg\n+                if if_expr_positive {\n+                    positive_abs_sugg\n                 } else {\n-                    neg_abs_sugg\n+                    negative_abs_sugg\n                 }\n             } else if is_testing_negative(cx, cond, body) {\n-                if expr1_pos {\n-                    neg_abs_sugg\n+                if if_expr_positive {\n+                    negative_abs_sugg\n                 } else {\n-                    pos_abs_sugg\n+                    positive_abs_sugg\n                 }\n             } else {\n                 return;"}, {"sha": "39cec0727a19cfb3b56c3feec5e86fb4d19506eb", "filename": "tests/ui/floating_point_abs.fixed", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f8e949fa1cc9af57f88babe74ea65e51730e7a86/tests%2Fui%2Ffloating_point_abs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8e949fa1cc9af57f88babe74ea65e51730e7a86/tests%2Fui%2Ffloating_point_abs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.fixed?ref=f8e949fa1cc9af57f88babe74ea65e51730e7a86", "patch": "@@ -0,0 +1,98 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+struct A {\n+    a: f64,\n+    b: f64,\n+}\n+\n+fn fake_abs1(num: f64) -> f64 {\n+    num.abs()\n+}\n+\n+fn fake_abs2(num: f64) -> f64 {\n+    num.abs()\n+}\n+\n+fn fake_abs3(a: A) -> f64 {\n+    a.a.abs()\n+}\n+\n+fn fake_abs4(num: f64) -> f64 {\n+    num.abs()\n+}\n+\n+fn fake_abs5(a: A) -> f64 {\n+    a.a.abs()\n+}\n+\n+fn fake_nabs1(num: f64) -> f64 {\n+    -num.abs()\n+}\n+\n+fn fake_nabs2(num: f64) -> f64 {\n+    -num.abs()\n+}\n+\n+fn fake_nabs3(a: A) -> A {\n+    A {\n+        a: -a.a.abs(),\n+        b: a.b,\n+    }\n+}\n+\n+fn not_fake_abs1(num: f64) -> f64 {\n+    if num > 0.0 {\n+        num\n+    } else {\n+        -num - 1f64\n+    }\n+}\n+\n+fn not_fake_abs2(num: f64) -> f64 {\n+    if num > 0.0 {\n+        num + 1.0\n+    } else {\n+        -(num + 1.0)\n+    }\n+}\n+\n+fn not_fake_abs3(num1: f64, num2: f64) -> f64 {\n+    if num1 > 0.0 {\n+        num2\n+    } else {\n+        -num2\n+    }\n+}\n+\n+fn not_fake_abs4(a: A) -> f64 {\n+    if a.a > 0.0 {\n+        a.b\n+    } else {\n+        -a.b\n+    }\n+}\n+\n+fn not_fake_abs5(a: A) -> f64 {\n+    if a.a > 0.0 {\n+        a.a\n+    } else {\n+        -a.b\n+    }\n+}\n+\n+fn main() {\n+    fake_abs1(5.0);\n+    fake_abs2(5.0);\n+    fake_abs3(A { a: 5.0, b: 5.0 } );\n+    fake_abs4(5.0);\n+    fake_abs5(A { a: 5.0, b: 5.0 } );\n+    fake_nabs1(5.0);\n+    fake_nabs2(5.0);\n+    fake_nabs3(A { a: 5.0, b: 5.0 } );\n+    not_fake_abs1(5.0);\n+    not_fake_abs2(5.0);\n+    not_fake_abs3(5.0, 5.0);\n+    not_fake_abs4(A { a: 5.0, b: 5.0 } );\n+    not_fake_abs5(A { a: 5.0, b: 5.0 } );\n+}"}, {"sha": "780eb3547158ce29feedbaf659cb69e242b902be", "filename": "tests/ui/floating_point_abs.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8e949fa1cc9af57f88babe74ea65e51730e7a86/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e949fa1cc9af57f88babe74ea65e51730e7a86/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=f8e949fa1cc9af57f88babe74ea65e51730e7a86", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::suboptimal_flops)]\n \n struct A {\n@@ -108,4 +109,18 @@ fn not_fake_abs5(a: A) -> f64 {\n     }\n }\n \n-fn main() {}\n+fn main() {\n+    fake_abs1(5.0);\n+    fake_abs2(5.0);\n+    fake_abs3(A { a: 5.0, b: 5.0 } );\n+    fake_abs4(5.0);\n+    fake_abs5(A { a: 5.0, b: 5.0 } );\n+    fake_nabs1(5.0);\n+    fake_nabs2(5.0);\n+    fake_nabs3(A { a: 5.0, b: 5.0 } );\n+    not_fake_abs1(5.0);\n+    not_fake_abs2(5.0);\n+    not_fake_abs3(5.0, 5.0);\n+    not_fake_abs4(A { a: 5.0, b: 5.0 } );\n+    not_fake_abs5(A { a: 5.0, b: 5.0 } );\n+}"}, {"sha": "74a71f2ca7c574f8fc5750115aef190bc373e097", "filename": "tests/ui/floating_point_abs.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8e949fa1cc9af57f88babe74ea65e51730e7a86/tests%2Fui%2Ffloating_point_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e949fa1cc9af57f88babe74ea65e51730e7a86/tests%2Fui%2Ffloating_point_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.stderr?ref=f8e949fa1cc9af57f88babe74ea65e51730e7a86", "patch": "@@ -1,5 +1,5 @@\n-error: This looks like you've implemented your own absolute value function\n-  --> $DIR/floating_point_abs.rs:9:5\n+error: manual implementation of `abs` method\n+  --> $DIR/floating_point_abs.rs:10:5\n    |\n LL | /     if num >= 0.0 {\n LL | |         num\n@@ -10,8 +10,8 @@ LL | |     }\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n-error: This looks like you've implemented your own absolute value function\n-  --> $DIR/floating_point_abs.rs:17:5\n+error: manual implementation of `abs` method\n+  --> $DIR/floating_point_abs.rs:18:5\n    |\n LL | /     if 0.0 < num {\n LL | |         num\n@@ -20,8 +20,8 @@ LL | |         -num\n LL | |     }\n    | |_____^ help: try: `num.abs()`\n \n-error: This looks like you've implemented your own absolute value function\n-  --> $DIR/floating_point_abs.rs:25:5\n+error: manual implementation of `abs` method\n+  --> $DIR/floating_point_abs.rs:26:5\n    |\n LL | /     if a.a > 0.0 {\n LL | |         a.a\n@@ -30,8 +30,8 @@ LL | |         -a.a\n LL | |     }\n    | |_____^ help: try: `a.a.abs()`\n \n-error: This looks like you've implemented your own absolute value function\n-  --> $DIR/floating_point_abs.rs:33:5\n+error: manual implementation of `abs` method\n+  --> $DIR/floating_point_abs.rs:34:5\n    |\n LL | /     if 0.0 >= num {\n LL | |         -num\n@@ -40,8 +40,8 @@ LL | |         num\n LL | |     }\n    | |_____^ help: try: `num.abs()`\n \n-error: This looks like you've implemented your own absolute value function\n-  --> $DIR/floating_point_abs.rs:41:5\n+error: manual implementation of `abs` method\n+  --> $DIR/floating_point_abs.rs:42:5\n    |\n LL | /     if a.a < 0.0 {\n LL | |         -a.a\n@@ -50,8 +50,8 @@ LL | |         a.a\n LL | |     }\n    | |_____^ help: try: `a.a.abs()`\n \n-error: This looks like you've implemented your own negative absolute value function\n-  --> $DIR/floating_point_abs.rs:49:5\n+error: manual implementation of negation of `abs` method\n+  --> $DIR/floating_point_abs.rs:50:5\n    |\n LL | /     if num < 0.0 {\n LL | |         num\n@@ -60,8 +60,8 @@ LL | |         -num\n LL | |     }\n    | |_____^ help: try: `-num.abs()`\n \n-error: This looks like you've implemented your own negative absolute value function\n-  --> $DIR/floating_point_abs.rs:57:5\n+error: manual implementation of negation of `abs` method\n+  --> $DIR/floating_point_abs.rs:58:5\n    |\n LL | /     if 0.0 >= num {\n LL | |         num\n@@ -70,8 +70,8 @@ LL | |         -num\n LL | |     }\n    | |_____^ help: try: `-num.abs()`\n \n-error: This looks like you've implemented your own negative absolute value function\n-  --> $DIR/floating_point_abs.rs:66:12\n+error: manual implementation of negation of `abs` method\n+  --> $DIR/floating_point_abs.rs:67:12\n    |\n LL |         a: if a.a >= 0.0 { -a.a } else { a.a },\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-a.a.abs()`"}]}