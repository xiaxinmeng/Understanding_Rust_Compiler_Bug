{"sha": "d2f56378da7f722145d54f7c9c54deed43e2a12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZjU2Mzc4ZGE3ZjcyMjE0NWQ1NGY3YzljNTRkZWVkNDNlMmExMmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-11T13:40:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-11T13:41:17Z"}, "message": "Feature gate arbitrary tokens in non-macro attributes with a separate gate\n\nFeature gate `rustc_` and `derive_` with their own gates again instead of `custom_attribute`", "tree": {"sha": "07b11cc0c107f7966bf7cfeee366a198c7969e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b11cc0c107f7966bf7cfeee366a198c7969e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f56378da7f722145d54f7c9c54deed43e2a12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f56378da7f722145d54f7c9c54deed43e2a12b", "html_url": "https://github.com/rust-lang/rust/commit/d2f56378da7f722145d54f7c9c54deed43e2a12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f56378da7f722145d54f7c9c54deed43e2a12b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa8d0320266b5579428312095fe49af05ada972", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa8d0320266b5579428312095fe49af05ada972", "html_url": "https://github.com/rust-lang/rust/commit/0aa8d0320266b5579428312095fe49af05ada972"}], "stats": {"total": 213, "additions": 144, "deletions": 69}, "files": [{"sha": "2054b7a351f7d80028c4300240aa620f7fd94075", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -28,6 +28,7 @@ use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{self, feature_err, emit_feature_err, is_builtin_attr_name, GateIssue};\n+use syntax::feature_gate::EXPLAIN_DERIVE_UNDERSCORE;\n use syntax::fold::{self, Folder};\n use syntax::parse::parser::PathStyle;\n use syntax::parse::token::{self, Token};\n@@ -338,19 +339,37 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             match attr_kind {\n                 NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper |\n                 NonMacroAttrKind::Custom if is_attr_invoc => {\n+                    let features = self.session.features_untracked();\n                     if attr_kind == NonMacroAttrKind::Tool &&\n-                       !self.session.features_untracked().tool_attributes {\n+                       !features.tool_attributes {\n                         feature_err(&self.session.parse_sess, \"tool_attributes\",\n                                     invoc.span(), GateIssue::Language,\n                                     \"tool attributes are unstable\").emit();\n                     }\n-                    if attr_kind == NonMacroAttrKind::Custom &&\n-                       !self.session.features_untracked().custom_attribute {\n-                        let msg = format!(\"The attribute `{}` is currently unknown to the compiler \\\n-                                           and may have meaning added to it in the future\", path);\n-                        feature_err(&self.session.parse_sess, \"custom_attribute\", invoc.span(),\n-                                    GateIssue::Language, &msg).emit();\n+                    if attr_kind == NonMacroAttrKind::Custom {\n+                        assert!(path.segments.len() == 1);\n+                        let name = path.segments[0].ident.name.as_str();\n+                        if name.starts_with(\"rustc_\") {\n+                            if !features.rustc_attrs {\n+                                let msg = \"unless otherwise specified, attributes with the prefix \\\n+                                        `rustc_` are reserved for internal compiler diagnostics\";\n+                                feature_err(&self.session.parse_sess, \"rustc_attrs\", invoc.span(),\n+                                            GateIssue::Language, &msg).emit();\n+                            }\n+                        } else if name.starts_with(\"derive_\") {\n+                            if !features.custom_derive {\n+                                feature_err(&self.session.parse_sess, \"custom_derive\", invoc.span(),\n+                                            GateIssue::Language, EXPLAIN_DERIVE_UNDERSCORE).emit();\n+                            }\n+                        } else if !features.custom_attribute {\n+                            let msg = format!(\"The attribute `{}` is currently unknown to the \\\n+                                               compiler and may have meaning added to it in the \\\n+                                               future\", path);\n+                            feature_err(&self.session.parse_sess, \"custom_attribute\", invoc.span(),\n+                                        GateIssue::Language, &msg).emit();\n+                        }\n                     }\n+\n                     return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr {\n                         mark_used: attr_kind == NonMacroAttrKind::Tool,\n                     })));"}, {"sha": "b779b2eb689e8aabbba8d55aea9ddde481115859", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -90,7 +90,7 @@ macro_rules! declare_features {\n                 self.macros_in_extern || self.proc_macro_path_invoc ||\n                 self.proc_macro_mod || self.proc_macro_expr ||\n                 self.proc_macro_non_items || self.proc_macro_gen ||\n-                self.stmt_expr_attributes\n+                self.stmt_expr_attributes || self.unrestricted_attribute_tokens\n             }\n         }\n     };\n@@ -504,6 +504,9 @@ declare_features! (\n     // impl<I:Iterator> Iterator for &mut Iterator\n     // impl Debug for Foo<'_>\n     (active, impl_header_lifetime_elision, \"1.30.0\", Some(15872), Some(Edition::Edition2018)),\n+\n+    // Support for arbitrary delimited token streams in non-macro attributes.\n+    (active, unrestricted_attribute_tokens, \"1.30.0\", Some(44690), None),\n );\n \n declare_features! (\n@@ -721,8 +724,7 @@ pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.path == builtin_name) ||\n-    attr.name().as_str().starts_with(\"rustc_\")\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.path == builtin_name)\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n@@ -1521,25 +1523,27 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n-        let mut allow_attr_literal = false;\n-        if attr.path == \"repr\" {\n-            if let Some(content) = attr.meta_item_list() {\n-                allow_attr_literal = content.iter().any(\n-                    |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n-            }\n-        }\n-\n-        if self.context.features.use_extern_macros() && attr::is_known(attr) {\n-            return\n-        }\n+        match attr.parse_meta(self.context.parse_sess) {\n+            Ok(meta) => {\n+                // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n+                let mut allow_attr_literal = false;\n+                if attr.path == \"repr\" {\n+                    if let Some(content) = meta.meta_item_list() {\n+                        allow_attr_literal = content.iter().any(\n+                            |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n+                    }\n+                }\n \n-        if !allow_attr_literal {\n-            let meta = panictry!(attr.parse_meta(self.context.parse_sess));\n-            if contains_novel_literal(&meta) {\n-                gate_feature_post!(&self, attr_literals, attr.span,\n-                                   \"non-string literals in attributes, or string \\\n-                                   literals in top-level positions, are experimental\");\n+                if !allow_attr_literal && contains_novel_literal(&meta) {\n+                    gate_feature_post!(&self, attr_literals, attr.span,\n+                                    \"non-string literals in attributes, or string \\\n+                                    literals in top-level positions, are experimental\");\n+                }\n+            }\n+            Err(mut err) => {\n+                err.cancel();\n+                gate_feature_post!(&self, unrestricted_attribute_tokens, attr.span,\n+                                    \"arbitrary tokens in non-macro attributes are unstable\");\n             }\n         }\n     }"}, {"sha": "8d36745116b65b3b7e229833e9bd2a8cdcb123d0", "filename": "src/test/compile-fail/gated-attr-literals.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -11,37 +11,33 @@\n // Check that literals in attributes don't parse without the feature gate.\n \n // gate-test-attr_literals\n-// gate-test-custom_attribute\n \n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n+#![feature(custom_attribute)]\n \n-#[fake_attr] //~ ERROR attribute `fake_attr` is currently unknown\n-#[fake_attr(100)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr] // OK\n+#[fake_attr(100)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(1, 2, 3)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(1, 2, 3)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(\"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(\"hello\")]\n     //~^ ERROR string literals in top-level positions, are experimental\n-#[fake_attr(name = \"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n-#[fake_attr(1, \"hi\", key = 12, true, false)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(name = \"hello\")] // OK\n+#[fake_attr(1, \"hi\", key = 12, true, false)]\n     //~^ ERROR non-string literals in attributes, or string literals in top-level positions\n-#[fake_attr(key = \"hello\", val = 10)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(key = \"hello\", val = 10)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(key(\"hello\"), val(10))] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(key(\"hello\"), val(10))]\n     //~^ ERROR non-string literals in attributes, or string literals in top-level positions\n-#[fake_attr(enabled = true, disabled = false)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(enabled = true, disabled = false)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(true)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(true)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(pi = 3.14159)] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(pi = 3.14159)]\n     //~^ ERROR non-string literals in attributes\n-#[fake_attr(b\"hi\")] //~ ERROR attribute `fake_attr` is currently unknown\n+#[fake_attr(b\"hi\")]\n     //~^ ERROR string literals in top-level positions, are experimental\n-#[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n+#[fake_doc(r\"doc\")]\n     //~^ ERROR string literals in top-level positions, are experimental\n struct Q {  }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "a77b172487600fa30accb038d043a483d2b8fe98", "filename": "src/test/compile-fail/macro-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fcompile-fail%2Fmacro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fcompile-fail%2Fmacro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-attribute.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[doc = $not_there] //~ error: unexpected token: `$`\n+#[doc = $not_there] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n fn main() { }"}, {"sha": "41db88121cb5292ef9adc410391404a7d7dfcbbc", "filename": "src/test/parse-fail/attr-bad-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fattr-bad-meta.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // asterisk is bogus\n-#[path*] //~ ERROR expected one of `(` or `=`\n+#[path*] //~ ERROR arbitrary tokens in non-macro attributes are unstable\n mod m {}"}, {"sha": "918d2c17123e88b427106040538b454fd8a6b529", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-b.rs\n // ignore-stage1\n \n-#![feature(proc_macro_path_invoc)]\n+#![feature(proc_macro_path_invoc, unrestricted_attribute_tokens)]\n \n extern crate derive_b;\n "}, {"sha": "7295de80db56dec9a6fa29d19596a87dfd2c2cef", "filename": "src/test/ui/feature-gate-rustc-attrs-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n+\n+#[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n+#[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+\n+fn main() {}"}, {"sha": "54a580ce9f9426b339f6954b9c45412650d1544c", "filename": "src/test/ui/feature-gate-rustc-attrs-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs-1.stderr?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs-1.rs:15:1\n+   |\n+LL | #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs-1.rs:16:1\n+   |\n+LL | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "99bc51b69c6cbebf31df08a19d9e539dbcb50e7d", "filename": "src/test/ui/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -12,8 +12,6 @@\n \n // Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n \n-#[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n-#[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_foo]\n //~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n "}, {"sha": "52a4d3664ce23388b658411fef00c7e4be3460d9", "filename": "src/test/ui/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -1,27 +1,11 @@\n-error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:15:1\n-   |\n-LL | #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n-\n-error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:16:1\n-   |\n-LL | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n-   | ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n-\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:17:1\n+  --> $DIR/feature-gate-rustc-attrs.rs:15:1\n    |\n LL | #[rustc_foo]\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "daebbe658a23bbf2dd5e0ba12da187186edbce3e", "filename": "src/test/ui/feature-gate-unrestricted-attribute-tokens.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.rs?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(custom_attribute)]\n+\n+#[my_attr(a b c d)]\n+//~^ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `b`\n+//~| ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `c`\n+//~| ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `d`\n+fn main() {}"}, {"sha": "cc5694b1598d3b9b2e5aab1d0d2e4b74ee6506aa", "filename": "src/test/ui/feature-gate-unrestricted-attribute-tokens.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f56378da7f722145d54f7c9c54deed43e2a12b/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unrestricted-attribute-tokens.stderr?ref=d2f56378da7f722145d54f7c9c54deed43e2a12b", "patch": "@@ -0,0 +1,20 @@\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `b`\n+  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:13:13\n+   |\n+LL | #[my_attr(a b c d)]\n+   |             ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `c`\n+  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:13:15\n+   |\n+LL | #[my_attr(a b c d)]\n+   |               ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `d`\n+  --> $DIR/feature-gate-unrestricted-attribute-tokens.rs:13:17\n+   |\n+LL | #[my_attr(a b c d)]\n+   |                 ^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: aborting due to 3 previous errors\n+"}]}