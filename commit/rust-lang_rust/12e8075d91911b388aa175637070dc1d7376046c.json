{"sha": "12e8075d91911b388aa175637070dc1d7376046c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTgwNzVkOTE5MTFiMzg4YWExNzU2MzcwNzBkYzFkNzM3NjA0NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-19T09:57:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-19T09:57:35Z"}, "message": "Auto merge of #3989 - flip1995:assert_on_const, r=phansch\n\nDon't trigger assertions_on_constants on debug_assert!(false)\n\nFixes #3948\nFixes #3765\n\nchangelog: Fix `debug_assert!` false positive on `assertions_on_constants` lint", "tree": {"sha": "bce4dbdc21b2381292cc0807f525624d3e94d60b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce4dbdc21b2381292cc0807f525624d3e94d60b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e8075d91911b388aa175637070dc1d7376046c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e8075d91911b388aa175637070dc1d7376046c", "html_url": "https://github.com/rust-lang/rust/commit/12e8075d91911b388aa175637070dc1d7376046c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e8075d91911b388aa175637070dc1d7376046c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9ef393b8c2596aca6a037d3efb513afdf17875", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9ef393b8c2596aca6a037d3efb513afdf17875", "html_url": "https://github.com/rust-lang/rust/commit/0d9ef393b8c2596aca6a037d3efb513afdf17875"}, {"sha": "10cd28900f79e013edbea5b4d9d956249e85439a", "url": "https://api.github.com/repos/rust-lang/rust/commits/10cd28900f79e013edbea5b4d9d956249e85439a", "html_url": "https://github.com/rust-lang/rust/commit/10cd28900f79e013edbea5b4d9d956249e85439a"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "36ed835e2581536f194a3a27ba8a0d99f56f1b9c", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/12e8075d91911b388aa175637070dc1d7376046c/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8075d91911b388aa175637070dc1d7376046c/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=12e8075d91911b388aa175637070dc1d7376046c", "patch": "@@ -2,9 +2,9 @@ use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n+use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n-use crate::syntax::ast::LitKind;\n use crate::utils::{in_macro, is_direct_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n@@ -33,41 +33,40 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        let mut is_debug_assert = false;\n+        let debug_assert_not_in_macro = |span: Span| {\n+            is_debug_assert = true;\n+            // Check that `debug_assert!` itself is not inside a macro\n+            !in_macro(span)\n+        };\n         if_chain! {\n             if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n             if !in_macro(assert_span)\n-                || is_direct_expn_of(assert_span, \"debug_assert\").map_or(false, |span| !in_macro(span));\n+                || is_direct_expn_of(assert_span, \"debug_assert\")\n+                    .map_or(false, debug_assert_not_in_macro);\n             if let ExprKind::Unary(_, ref lit) = e.node;\n+            if let Some(bool_const) = constant(cx, cx.tables, lit);\n             then {\n-                if let ExprKind::Lit(ref inner) = lit.node {\n-                    match inner.node {\n-                        LitKind::Bool(true) => {\n-                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(true) will be optimized out by the compiler\",\n-                                \"remove it\");\n-                        },\n-                        LitKind::Bool(false) => {\n-                            span_help_and_lint(\n-                                cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(false) should probably be replaced\",\n-                                \"use panic!() or unreachable!()\");\n-                        },\n-                        _ => (),\n-                    }\n-                } else if let Some(bool_const) = constant(cx, cx.tables, lit) {\n-                    match bool_const.0 {\n-                        Constant::Bool(true) => {\n-                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(const: true) will be optimized out by the compiler\",\n-                                \"remove it\");\n-                        },\n-                        Constant::Bool(false) => {\n-                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(const: false) should probably be replaced\",\n-                                \"use panic!() or unreachable!()\");\n-                        },\n-                        _ => (),\n-                    }\n+                match bool_const.0 {\n+                    Constant::Bool(true) => {\n+                        span_help_and_lint(\n+                            cx,\n+                            ASSERTIONS_ON_CONSTANTS,\n+                            e.span,\n+                            \"`assert!(true)` will be optimized out by the compiler\",\n+                            \"remove it\"\n+                        );\n+                    },\n+                    Constant::Bool(false) if !is_debug_assert => {\n+                        span_help_and_lint(\n+                            cx,\n+                            ASSERTIONS_ON_CONSTANTS,\n+                            e.span,\n+                            \"`assert!(false)` should probably be replaced\",\n+                            \"use `panic!()` or `unreachable!()`\"\n+                        );\n+                    },\n+                    _ => (),\n                 }\n             }\n         }"}, {"sha": "aee6cc505abdbc6ff927e50350f4b92ea21fb038", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8075d91911b388aa175637070dc1d7376046c/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8075d91911b388aa175637070dc1d7376046c/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=12e8075d91911b388aa175637070dc1d7376046c", "patch": "@@ -18,6 +18,8 @@ fn main() {\n     assert!(C);\n \n     debug_assert!(true);\n+    // Don't lint this, since there is no better way for expressing \"Only panic in debug mode\".\n+    debug_assert!(false); // #3948\n     assert_const!(3);\n     assert_const!(-1);\n }"}, {"sha": "c22da856975ca980a556355c0d0bcc129965ca00", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12e8075d91911b388aa175637070dc1d7376046c/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12e8075d91911b388aa175637070dc1d7376046c/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=12e8075d91911b388aa175637070dc1d7376046c", "patch": "@@ -1,4 +1,4 @@\n-error: assert!(true) will be optimized out by the compiler\n+error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:9:5\n    |\n LL |     assert!(true);\n@@ -7,47 +7,47 @@ LL |     assert!(true);\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n \n-error: assert!(false) should probably be replaced\n+error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:10:5\n    |\n LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = help: use panic!() or unreachable!()\n+   = help: use `panic!()` or `unreachable!()`\n \n-error: assert!(true) will be optimized out by the compiler\n+error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n \n-error: assert!(false) should probably be replaced\n+error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use panic!() or unreachable!()\n+   = help: use `panic!()` or `unreachable!()`\n \n-error: assert!(const: true) will be optimized out by the compiler\n+error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:15:5\n    |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n \n-error: assert!(const: false) should probably be replaced\n+error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:18:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n-   = help: use panic!() or unreachable!()\n+   = help: use `panic!()` or `unreachable!()`\n \n-error: assert!(true) will be optimized out by the compiler\n+error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:20:5\n    |\n LL |     debug_assert!(true);"}]}