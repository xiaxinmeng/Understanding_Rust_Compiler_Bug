{"sha": "df156c1958bd029101136bc69d705af63972a8c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTU2YzE5NThiZDAyOTEwMTEzNmJjNjlkNzA1YWY2Mzk3MmE4YzU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-28T05:12:54Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-28T06:04:34Z"}, "message": "Apply lint restrictions from renamed lints\n\nPreviously, if you denied the old name of a renamed lint, it would warn\nabout using the new name, but otherwise do nothing. Now, it will behave\nthe same as if you'd used the new name.", "tree": {"sha": "d5c9a292994fbd281d6dc25bdf1781fd37a6027c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5c9a292994fbd281d6dc25bdf1781fd37a6027c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df156c1958bd029101136bc69d705af63972a8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df156c1958bd029101136bc69d705af63972a8c5", "html_url": "https://github.com/rust-lang/rust/commit/df156c1958bd029101136bc69d705af63972a8c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df156c1958bd029101136bc69d705af63972a8c5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37", "html_url": "https://github.com/rust-lang/rust/commit/8a9f7862bcfa5870a34bb54f77a03c73d1db5c37"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "dbcab72ddf2eb6c115823be31d98c8f16f47fb54", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/df156c1958bd029101136bc69d705af63972a8c5/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df156c1958bd029101136bc69d705af63972a8c5/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=df156c1958bd029101136bc69d705af63972a8c5", "patch": "@@ -321,17 +321,18 @@ impl<'s> LintLevelsBuilder<'s> {\n                     None\n                 };\n                 let name = meta_item.path.segments.last().expect(\"empty lint name\").ident.name;\n-                match store.check_lint_name(&name.as_str(), tool_name) {\n+                let lint_result = store.check_lint_name(&name.as_str(), tool_name);\n+                match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(name, li.span(), reason);\n-                        for &id in ids {\n+                        for &id in *ids {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n-                        match result {\n+                        match *result {\n                             Ok(ids) => {\n                                 let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n                                 let src = LintLevelSource::Node(\n@@ -343,7 +344,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                             }\n-                            Err((Some(ids), new_lint_name)) => {\n+                            Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n                                 let (lvl, src) =\n                                     self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n@@ -392,21 +393,21 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n-                        let (level, src) =\n+                        let (renamed_lint_level, src) =\n                             self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n                         struct_lint_level(\n                             self.sess,\n                             lint,\n-                            level,\n+                            renamed_lint_level,\n                             src,\n                             Some(li.span().into()),\n                             |lint| {\n                                 let mut err = lint.build(&msg);\n-                                if let Some(new_name) = renamed {\n+                                if let Some(new_name) = &renamed {\n                                     err.span_suggestion(\n                                         li.span(),\n                                         \"use the new name\",\n-                                        new_name,\n+                                        new_name.to_string(),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n@@ -444,6 +445,22 @@ impl<'s> LintLevelsBuilder<'s> {\n                         );\n                     }\n                 }\n+                // If this lint was renamed, apply the new lint instead of ignoring the attribute.\n+                // This happens outside of the match because the new lint should be applied even if\n+                // we don't warn about the name change.\n+                if let CheckLintNameResult::Warning(_, Some(new_name)) = lint_result {\n+                    // Ignore any errors or warnings that happen because the new name is inaccurate\n+                    if let CheckLintNameResult::Ok(ids) =\n+                        store.check_lint_name(&new_name, tool_name)\n+                    {\n+                        let src =\n+                            LintLevelSource::Node(Symbol::intern(&new_name), li.span(), reason);\n+                        for &id in ids {\n+                            self.check_gated_lint(id, attr.span);\n+                            self.insert_spec(&mut specs, id, (level, src));\n+                        }\n+                    }\n+                }\n             }\n         }\n "}, {"sha": "01cd32536728e3b838a5bb0cecbc05c6c5d9583d", "filename": "src/test/ui/lint/renamed-lints-still-apply.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df156c1958bd029101136bc69d705af63972a8c5/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df156c1958bd029101136bc69d705af63972a8c5/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.rs?ref=df156c1958bd029101136bc69d705af63972a8c5", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --crate-type lib\n+#![deny(single_use_lifetime)]\n+//~^ WARNING renamed\n+//~| NOTE `#[warn(renamed_and_removed_lints)]` on by default\n+//~| NOTE defined here\n+fn _foo<'a>(_x: &'a u32) {}\n+//~^ ERROR only used once\n+//~| NOTE this lifetime\n+//~| NOTE is used only here"}, {"sha": "33e5a03266e50ec88526f14960c02dd60fa0ed98", "filename": "src/test/ui/lint/renamed-lints-still-apply.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df156c1958bd029101136bc69d705af63972a8c5/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df156c1958bd029101136bc69d705af63972a8c5/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.stderr?ref=df156c1958bd029101136bc69d705af63972a8c5", "patch": "@@ -0,0 +1,28 @@\n+warning: lint `single_use_lifetime` has been renamed to `single_use_lifetimes`\n+  --> $DIR/renamed-lints-still-apply.rs:2:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `single_use_lifetimes`\n+   |\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n+\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/renamed-lints-still-apply.rs:6:9\n+   |\n+LL | fn _foo<'a>(_x: &'a u32) {}\n+   |         ^^       -- ...is used only here\n+   |         |\n+   |         this lifetime...\n+   |\n+note: the lint level is defined here\n+  --> $DIR/renamed-lints-still-apply.rs:2:9\n+   |\n+LL | #![deny(single_use_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+help: elide the single-use lifetime\n+   |\n+LL | fn _foo(_x: &u32) {}\n+   |       --    --\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}