{"sha": "8f53926232c43aa9d03e88c24460411542a244ed", "node_id": "C_kwDOAAsO6NoAKDhmNTM5MjYyMzJjNDNhYTlkMDNlODhjMjQ0NjA0MTE1NDJhMjQ0ZWQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-25T10:12:35Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-16T15:35:51Z"}, "message": "Alloc `hir::Lit` in an arena to remove the destructor from `Expr`\n\nThis allows allocating `Expr`s into a dropless arena, which is useful\nfor using length prefixed thing slices in HIR, since these can only be\nallocated in the dropless arena and not in a typed arena. This is\nsomething I'm working on.", "tree": {"sha": "81a6e2907a4e8109b2487aa1979b41b4968a8291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a6e2907a4e8109b2487aa1979b41b4968a8291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f53926232c43aa9d03e88c24460411542a244ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f53926232c43aa9d03e88c24460411542a244ed", "html_url": "https://github.com/rust-lang/rust/commit/8f53926232c43aa9d03e88c24460411542a244ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f53926232c43aa9d03e88c24460411542a244ed/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61570ceb6e73b1efa78b5e796cb7cd9c2775c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61570ceb6e73b1efa78b5e796cb7cd9c2775c55", "html_url": "https://github.com/rust-lang/rust/commit/d61570ceb6e73b1efa78b5e796cb7cd9c2775c55"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "8c3ad24eeed4393d245148b9d3d07b66af75aa8c", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=8f53926232c43aa9d03e88c24460411542a244ed", "patch": "@@ -41,7 +41,7 @@ fn extract_bool_lit(e: &Expr<'_>) -> Option<bool> {\n     }) = e.kind\n         && !e.span.from_expansion()\n     {\n-        Some(b)\n+        Some(*b)\n     } else {\n         None\n     }"}, {"sha": "7d28c11162458d13f3f042e5b0e6122f28ac62e8", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=8f53926232c43aa9d03e88c24460411542a244ed", "patch": "@@ -159,7 +159,7 @@ fn eq_pattern_length<'tcx>(cx: &LateContext<'tcx>, pattern: &Expr<'_>, expr: &'t\n         ..\n     }) = expr.kind\n     {\n-        constant_length(cx, pattern).map_or(false, |length| length == n)\n+        constant_length(cx, pattern).map_or(false, |length| length == *n)\n     } else {\n         len_arg(cx, expr).map_or(false, |arg| eq_expr_value(cx, pattern, arg))\n     }"}, {"sha": "33bc20dad6b788b5ab61107336bc358461db125b", "filename": "clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=8f53926232c43aa9d03e88c24460411542a244ed", "patch": "@@ -162,7 +162,7 @@ fn find_bool_lit(ex: &ExprKind<'_>) -> Option<bool> {\n                 node: LitKind::Bool(b), ..\n             }) = exp.kind\n             {\n-                Some(b)\n+                Some(*b)\n             } else {\n                 None\n             }"}, {"sha": "23d23f25f14cf401d900f46e4cafcbd234b1dc1d", "filename": "clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=8f53926232c43aa9d03e88c24460411542a244ed", "patch": "@@ -48,7 +48,7 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                         ..\n                     } = *span\n                     {\n-                        if lit { Argument::True } else { Argument::False }\n+                        if *lit { Argument::True } else { Argument::False }\n                     } else {\n                         // The function is called with a literal which is not a boolean literal.\n                         // This is theoretically possible, but not very likely."}, {"sha": "2dac807c420e321ed7eb9ea2c5436599240a206e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f53926232c43aa9d03e88c24460411542a244ed/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=8f53926232c43aa9d03e88c24460411542a244ed", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"Unary(UnOp::{op:?}, {inner})\");\n                 self.expr(inner);\n             },\n-            ExprKind::Lit(ref lit) => {\n+            ExprKind::Lit(lit) => {\n                 bind!(self, lit);\n                 kind!(\"Lit(ref {lit})\");\n                 self.lit(lit);"}]}