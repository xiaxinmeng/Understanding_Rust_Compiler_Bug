{"sha": "c8db89aa82573b89481fde598da6e54371f266cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZGI4OWFhODI1NzNiODk0ODFmZGU1OThkYTZlNTQzNzFmMjY2Y2I=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-19T14:14:48Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:57Z"}, "message": "Accommodate arith-overflow in `core::num`, `std::num`, `coretest::num`.\n\n * `core::num`: adjust `UnsignedInt::is_power_of_two`,\n   `UnsignedInt::next_power_of_two`, `Int::pow`.\n\n   In particular for `Int::pow`: (1.) do not panic when `base`\n   overflows if `acc` never observes the overflowed `base`, and (2.)\n   if `acc` does observe the overflowed `base`, make sure we only\n   panic if we would have otherwise (e.g. during a computation of\n   `base * base`).\n\n * also in `core::num`: avoid underflow during computation of `uint::MAX`.\n\n * `std::num`: adjust tests `uint::test_uint_from_str_overflow`,\n   `uint::test_uint_to_str_overflow`, `strconv`\n\n * `coretest::num`: adjust `test::test_int_from_str_overflow`.", "tree": {"sha": "bf3fda792aca94eeca3c413b64c0837a896bf448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf3fda792aca94eeca3c413b64c0837a896bf448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8db89aa82573b89481fde598da6e54371f266cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8db89aa82573b89481fde598da6e54371f266cb", "html_url": "https://github.com/rust-lang/rust/commit/c8db89aa82573b89481fde598da6e54371f266cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8db89aa82573b89481fde598da6e54371f266cb/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4394720dae12c119a9b1aed492b1b24ee089d808", "url": "https://api.github.com/repos/rust-lang/rust/commits/4394720dae12c119a9b1aed492b1b24ee089d808", "html_url": "https://github.com/rust-lang/rust/commit/4394720dae12c119a9b1aed492b1b24ee089d808"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "92cdd84160b7ac1672855c2ce8b159c662829610", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c8db89aa82573b89481fde598da6e54371f266cb", "patch": "@@ -15,6 +15,8 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n+use self::wrapping::{OverflowingOps, WrappingOps};\n+\n use char::CharExt;\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord};\n@@ -51,6 +53,8 @@ pub trait Int\n     + BitXor<Output=Self>\n     + Shl<uint, Output=Self>\n     + Shr<uint, Output=Self>\n+    + WrappingOps\n+    + OverflowingOps\n {\n     /// Returns the `0` value of this integer type.\n     // FIXME (#5527): Should be an associated constant\n@@ -379,11 +383,23 @@ pub trait Int\n         let mut base = self;\n         let mut acc: Self = Int::one();\n \n+        let mut prev_base = self;\n+        let mut base_oflo = false;\n         while exp > 0 {\n             if (exp & 1) == 1 {\n-                acc = acc * base;\n+                if base_oflo {\n+                    // ensure overflow occurs in the same manner it\n+                    // would have otherwise (i.e. signal any exception\n+                    // it would have otherwise).\n+                    acc = acc * (prev_base * prev_base);\n+                } else {\n+                    acc = acc * base;\n+                }\n             }\n-            base = base * base;\n+            prev_base = base;\n+            let (new_base, new_base_oflo) = base.overflowing_mul(base);\n+            base = new_base;\n+            base_oflo = new_base_oflo;\n             exp /= 2;\n         }\n         acc\n@@ -694,12 +710,12 @@ signed_int_impl! { int }\n \n /// A built-in unsigned integer.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait UnsignedInt: Int {\n+pub trait UnsignedInt: Int + WrappingOps {\n     /// Returns `true` iff `self == 2^k` for some `k`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     fn is_power_of_two(self) -> bool {\n-        (self - Int::one()) & self == Int::zero() && !(self == Int::zero())\n+        (self.wrapping_sub(Int::one())) & self == Int::zero() && !(self == Int::zero())\n     }\n \n     /// Returns the smallest power of two greater than or equal to `self`.\n@@ -709,7 +725,7 @@ pub trait UnsignedInt: Int {\n     fn next_power_of_two(self) -> Self {\n         let bits = size_of::<Self>() * 8;\n         let one: Self = Int::one();\n-        one << ((bits - (self - one).leading_zeros() as usize) % bits)\n+        one << ((bits - self.wrapping_sub(one).leading_zeros() as usize) % bits)\n     }\n \n     /// Returns the smallest power of two greater than or equal to `n`. If the"}, {"sha": "d0c4885ad00b77ebbfaef418cb230976e6955f21", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=c8db89aa82573b89481fde598da6e54371f266cb", "patch": "@@ -20,6 +20,6 @@ pub const BYTES : u32 = ($bits / 8);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: $T = 0 as $T;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX: $T = 0 as $T - 1 as $T;\n+pub const MAX: $T = !0 as $T;\n \n ) }"}, {"sha": "721354b6a44c24ce8202585b38b7043443f23938", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=c8db89aa82573b89481fde598da6e54371f266cb", "patch": "@@ -92,31 +92,31 @@ mod test {\n         assert_eq!(\"127\".parse::<i8>().ok(), Some(i8_val));\n         assert_eq!(\"128\".parse::<i8>().ok(), None);\n \n-        i8_val += 1 as i8;\n+        i8_val = i8_val.wrapping_add(1);\n         assert_eq!(\"-128\".parse::<i8>().ok(), Some(i8_val));\n         assert_eq!(\"-129\".parse::<i8>().ok(), None);\n \n         let mut i16_val: i16 = 32_767_i16;\n         assert_eq!(\"32767\".parse::<i16>().ok(), Some(i16_val));\n         assert_eq!(\"32768\".parse::<i16>().ok(), None);\n \n-        i16_val += 1 as i16;\n+        i16_val = i16_val.wrapping_add(1);\n         assert_eq!(\"-32768\".parse::<i16>().ok(), Some(i16_val));\n         assert_eq!(\"-32769\".parse::<i16>().ok(), None);\n \n         let mut i32_val: i32 = 2_147_483_647_i32;\n         assert_eq!(\"2147483647\".parse::<i32>().ok(), Some(i32_val));\n         assert_eq!(\"2147483648\".parse::<i32>().ok(), None);\n \n-        i32_val += 1 as i32;\n+        i32_val = i32_val.wrapping_add(1);\n         assert_eq!(\"-2147483648\".parse::<i32>().ok(), Some(i32_val));\n         assert_eq!(\"-2147483649\".parse::<i32>().ok(), None);\n \n         let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n         assert_eq!(\"9223372036854775807\".parse::<i64>().ok(), Some(i64_val));\n         assert_eq!(\"9223372036854775808\".parse::<i64>().ok(), None);\n \n-        i64_val += 1 as i64;\n+        i64_val = i64_val.wrapping_add(1);\n         assert_eq!(\"-9223372036854775808\".parse::<i64>().ok(), Some(i64_val));\n         assert_eq!(\"-9223372036854775809\".parse::<i64>().ok(), None);\n     }"}, {"sha": "0bca60ed1a0ae6c86108b862072b1ec2728a0f17", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=c8db89aa82573b89481fde598da6e54371f266cb", "patch": "@@ -1758,25 +1758,25 @@ mod tests {\n         let mut u8_val: u8 = 255_u8;\n         assert_eq!(u8_val.to_string(), \"255\");\n \n-        u8_val += 1 as u8;\n+        u8_val = u8_val.wrapping_add(1);\n         assert_eq!(u8_val.to_string(), \"0\");\n \n         let mut u16_val: u16 = 65_535_u16;\n         assert_eq!(u16_val.to_string(), \"65535\");\n \n-        u16_val += 1 as u16;\n+        u16_val = u16_val.wrapping_add(1);\n         assert_eq!(u16_val.to_string(), \"0\");\n \n         let mut u32_val: u32 = 4_294_967_295_u32;\n         assert_eq!(u32_val.to_string(), \"4294967295\");\n \n-        u32_val += 1 as u32;\n+        u32_val = u32_val.wrapping_add(1);\n         assert_eq!(u32_val.to_string(), \"0\");\n \n         let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n         assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n \n-        u64_val += 1 as u64;\n+        u64_val = u64_val.wrapping_add(1);\n         assert_eq!(u64_val.to_string(), \"0\");\n     }\n \n@@ -1790,31 +1790,31 @@ mod tests {\n         assert_eq!(from_str::<u8>(\"255\"), Some(u8_val));\n         assert_eq!(from_str::<u8>(\"256\"), None);\n \n-        u8_val += 1 as u8;\n+        u8_val = u8_val.wrapping_add(1);\n         assert_eq!(from_str::<u8>(\"0\"), Some(u8_val));\n         assert_eq!(from_str::<u8>(\"-1\"), None);\n \n         let mut u16_val: u16 = 65_535_u16;\n         assert_eq!(from_str::<u16>(\"65535\"), Some(u16_val));\n         assert_eq!(from_str::<u16>(\"65536\"), None);\n \n-        u16_val += 1 as u16;\n+        u16_val = u16_val.wrapping_add(1);\n         assert_eq!(from_str::<u16>(\"0\"), Some(u16_val));\n         assert_eq!(from_str::<u16>(\"-1\"), None);\n \n         let mut u32_val: u32 = 4_294_967_295_u32;\n         assert_eq!(from_str::<u32>(\"4294967295\"), Some(u32_val));\n         assert_eq!(from_str::<u32>(\"4294967296\"), None);\n \n-        u32_val += 1 as u32;\n+        u32_val = u32_val.wrapping_add(1);\n         assert_eq!(from_str::<u32>(\"0\"), Some(u32_val));\n         assert_eq!(from_str::<u32>(\"-1\"), None);\n \n         let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n         assert_eq!(from_str::<u64>(\"18446744073709551615\"), Some(u64_val));\n         assert_eq!(from_str::<u64>(\"18446744073709551616\"), None);\n \n-        u64_val += 1 as u64;\n+        u64_val = u64_val.wrapping_add(1);\n         assert_eq!(from_str::<u64>(\"0\"), Some(u64_val));\n         assert_eq!(from_str::<u64>(\"-1\"), None);\n     }"}, {"sha": "8ec19c01098edb5cb594e676db04e7e5401383f6", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db89aa82573b89481fde598da6e54371f266cb/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=c8db89aa82573b89481fde598da6e54371f266cb", "patch": "@@ -427,32 +427,33 @@ static DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n \n #[cfg(test)]\n mod tests {\n+    use core::num::wrapping::WrappingOps;\n     use string::ToString;\n \n     #[test]\n     fn test_int_to_str_overflow() {\n         let mut i8_val: i8 = 127_i8;\n         assert_eq!(i8_val.to_string(), \"127\");\n \n-        i8_val += 1 as i8;\n+        i8_val = i8_val.wrapping_add(1);\n         assert_eq!(i8_val.to_string(), \"-128\");\n \n         let mut i16_val: i16 = 32_767_i16;\n         assert_eq!(i16_val.to_string(), \"32767\");\n \n-        i16_val += 1 as i16;\n+        i16_val = i16_val.wrapping_add(1);\n         assert_eq!(i16_val.to_string(), \"-32768\");\n \n         let mut i32_val: i32 = 2_147_483_647_i32;\n         assert_eq!(i32_val.to_string(), \"2147483647\");\n \n-        i32_val += 1 as i32;\n+        i32_val = i32_val.wrapping_add(1);\n         assert_eq!(i32_val.to_string(), \"-2147483648\");\n \n         let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n         assert_eq!(i64_val.to_string(), \"9223372036854775807\");\n \n-        i64_val += 1 as i64;\n+        i64_val = i64_val.wrapping_add(1);\n         assert_eq!(i64_val.to_string(), \"-9223372036854775808\");\n     }\n }"}]}