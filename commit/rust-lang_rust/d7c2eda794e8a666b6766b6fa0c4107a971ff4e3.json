{"sha": "d7c2eda794e8a666b6766b6fa0c4107a971ff4e3", "node_id": "C_kwDOAAsO6NoAKGQ3YzJlZGE3OTRlOGE2NjZiNjc2NmI2ZmEwYzQxMDdhOTcxZmY0ZTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T15:40:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T15:40:45Z"}, "message": "Rollup merge of #91950 - estebank:point-at-type-of-non-allocator, r=matthewjasper\n\nPoint at type when a `static` `#[global_allocator]` doesn't `impl` `GlobalAlloc`", "tree": {"sha": "870483223b6a3ee3e4a4b78260836459a06868e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/870483223b6a3ee3e4a4b78260836459a06868e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAo7+CRBK7hj4Ov3rIwAAkXwIAIGJr9lZdfktyTiG8kjqTgYI\nz8G3+WzBjVtiJuW8woPBQbmpQ5gnTzcqJfw5UPHbLCykDk/9V2o0gAIO5qSWo64l\nzFNbXzRl2kLlOB6Ulf0OsWcS3L+CMzp2+nqdVkNBN9Es5TziauvGCJOSBgHlMYsY\nggseyddJWlcyvrubQx9syFfgZJmPJUWhzm7RkNXlV2sND8VR5rT3sLtm8JZ3nYFQ\nOvtnGdXmFNch6xgTFouJhFdLkpOwr/zG813VJBd7+wTI94Ao64KZwIT+668oBBFI\nL9Lx7YSRyKdsO7bz/HZ7R+vLrXPLWxNvse+f8lOPVJXq4YXLPS4UY53VSmHM0S0=\n=A0iI\n-----END PGP SIGNATURE-----\n", "payload": "tree 870483223b6a3ee3e4a4b78260836459a06868e2\nparent 775e480722c7aba6ff4ff3ccec8c1f4639ae7889\nparent 84408ca9a3e7d1a49e2260902e75568f9e1d5d1a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644334845 +0100\ncommitter GitHub <noreply@github.com> 1644334845 +0100\n\nRollup merge of #91950 - estebank:point-at-type-of-non-allocator, r=matthewjasper\n\nPoint at type when a `static` `#[global_allocator]` doesn't `impl` `GlobalAlloc`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3", "html_url": "https://github.com/rust-lang/rust/commit/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775e480722c7aba6ff4ff3ccec8c1f4639ae7889", "url": "https://api.github.com/repos/rust-lang/rust/commits/775e480722c7aba6ff4ff3ccec8c1f4639ae7889", "html_url": "https://github.com/rust-lang/rust/commit/775e480722c7aba6ff4ff3ccec8c1f4639ae7889"}, {"sha": "84408ca9a3e7d1a49e2260902e75568f9e1d5d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84408ca9a3e7d1a49e2260902e75568f9e1d5d1a", "html_url": "https://github.com/rust-lang/rust/commit/84408ca9a3e7d1a49e2260902e75568f9e1d5d1a"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "36cfbba45daccb2d521a5419b5c370e6e97293aa", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=d7c2eda794e8a666b6766b6fa0c4107a971ff4e3", "patch": "@@ -26,14 +26,14 @@ pub fn expand(\n \n     // Allow using `#[global_allocator]` on an item statement\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n-    let (item, is_stmt) = match &item {\n+    let (item, is_stmt, ty_span) = match &item {\n         Annotatable::Item(item) => match item.kind {\n-            ItemKind::Static(..) => (item, false),\n+            ItemKind::Static(ref ty, ..) => (item, false, ecx.with_def_site_ctxt(ty.span)),\n             _ => return not_static(),\n         },\n         Annotatable::Stmt(stmt) => match &stmt.kind {\n             StmtKind::Item(item_) => match item_.kind {\n-                ItemKind::Static(..) => (item_, true),\n+                ItemKind::Static(ref ty, ..) => (item_, true, ecx.with_def_site_ctxt(ty.span)),\n                 _ => return not_static(),\n             },\n             _ => return not_static(),\n@@ -43,13 +43,14 @@ pub fn expand(\n \n     // Generate a bunch of new items using the AllocFnFactory\n     let span = ecx.with_def_site_ctxt(item.span);\n-    let f = AllocFnFactory { span, kind: AllocatorKind::Global, global: item.ident, cx: ecx };\n+    let f =\n+        AllocFnFactory { span, ty_span, kind: AllocatorKind::Global, global: item.ident, cx: ecx };\n \n     // Generate item statements for the allocator methods.\n     let stmts = ALLOCATOR_METHODS.iter().map(|method| f.allocator_fn(method)).collect();\n \n     // Generate anonymous constant serving as container for the allocator methods.\n-    let const_ty = ecx.ty(span, TyKind::Tup(Vec::new()));\n+    let const_ty = ecx.ty(ty_span, TyKind::Tup(Vec::new()));\n     let const_body = ecx.expr_block(ecx.block(span, stmts));\n     let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n     let const_item = if is_stmt {\n@@ -64,6 +65,7 @@ pub fn expand(\n \n struct AllocFnFactory<'a, 'b> {\n     span: Span,\n+    ty_span: Span,\n     kind: AllocatorKind,\n     global: Ident,\n     cx: &'b ExtCtxt<'a>,\n@@ -97,18 +99,18 @@ impl AllocFnFactory<'_, '_> {\n             self.attrs(),\n             kind,\n         );\n-        self.cx.stmt_item(self.span, item)\n+        self.cx.stmt_item(self.ty_span, item)\n     }\n \n     fn call_allocator(&self, method: Symbol, mut args: Vec<P<Expr>>) -> P<Expr> {\n         let method = self.cx.std_path(&[sym::alloc, sym::GlobalAlloc, method]);\n-        let method = self.cx.expr_path(self.cx.path(self.span, method));\n-        let allocator = self.cx.path_ident(self.span, self.global);\n+        let method = self.cx.expr_path(self.cx.path(self.ty_span, method));\n+        let allocator = self.cx.path_ident(self.ty_span, self.global);\n         let allocator = self.cx.expr_path(allocator);\n-        let allocator = self.cx.expr_addr_of(self.span, allocator);\n+        let allocator = self.cx.expr_addr_of(self.ty_span, allocator);\n         args.insert(0, allocator);\n \n-        self.cx.expr_call(self.span, method, args)\n+        self.cx.expr_call(self.ty_span, method, args)\n     }\n \n     fn attrs(&self) -> Vec<Attribute> {"}, {"sha": "c0f6118a9f1639354c2cd6e70bf951821b0ae8cd", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7c2eda794e8a666b6766b6fa0c4107a971ff4e3/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=d7c2eda794e8a666b6766b6fa0c4107a971ff4e3", "patch": "@@ -1,40 +1,40 @@\n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}