{"sha": "982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmUxMTY2YjIzOGY4Y2Q3YWJlOGE3YWNiOTFkNDJjYzhlOWY1YzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-17T23:16:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-17T23:17:40Z"}, "message": "Issue #2633: remove last_use entries that are subject to a loan", "tree": {"sha": "fa4bf2b235108861a75a8a9ce298165255736100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4bf2b235108861a75a8a9ce298165255736100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "html_url": "https://github.com/rust-lang/rust/commit/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7", "html_url": "https://github.com/rust-lang/rust/commit/3e2006a57088a0b6e1b40fe22df88955d1ef9ec7"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "b5950037a43af3b9d1efcadf771cd296d9c5c5d6", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "patch": "@@ -203,7 +203,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n          bind middle::tstate::ck::check_crate(ty_cx, crate));\n     let (root_map, mutbl_map) = time(\n         time_passes, \"borrow checking\",\n-        bind middle::borrowck::check_crate(ty_cx, method_map, crate));\n+        bind middle::borrowck::check_crate(ty_cx, method_map,\n+                                           last_use_map, crate));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_use_map, crate));\n     time(time_passes, \"lint checking\","}, {"sha": "2208409ab5000211cd3f5c3ad904196a00b9f431", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "patch": "@@ -170,9 +170,11 @@ export check_crate, root_map, mutbl_map;\n \n fn check_crate(tcx: ty::ctxt,\n                method_map: typeck::method_map,\n+               last_use_map: liveness::last_use_map,\n                crate: @ast::crate) -> (root_map, mutbl_map) {\n     let bccx = @{tcx: tcx,\n                  method_map: method_map,\n+                 last_use_map: last_use_map,\n                  root_map: root_map(),\n                  mutbl_map: int_hash()};\n \n@@ -186,6 +188,7 @@ fn check_crate(tcx: ty::ctxt,\n \n type borrowck_ctxt = @{tcx: ty::ctxt,\n                        method_map: typeck::method_map,\n+                       last_use_map: liveness::last_use_map,\n                        root_map: root_map,\n                        mutbl_map: mutbl_map};\n "}, {"sha": "572be4f2ac704af0565627ec7a8773ac06dc0eae", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "patch": "@@ -448,6 +448,23 @@ impl methods for check_loan_ctxt {\n         }\n     }\n \n+    // Very subtle (#2633): liveness can mark options as last_use even\n+    // when there is an outstanding loan.  In that case, it is not\n+    // safe to consider the use a last_use.\n+    fn check_last_use(expr: @ast::expr) {\n+        let cmt = self.bccx.cat_expr(expr);\n+        let lp = alt cmt.lp {\n+          none { ret; }\n+          some(lp) { lp }\n+        };\n+        for self.walk_loans_of(cmt.id, lp) { |_loan|\n+            #debug[\"Removing last use entry %? due to outstanding loan\",\n+                   expr.id];\n+            self.bccx.last_use_map.remove(expr.id);\n+            ret;\n+        }\n+    }\n+\n     fn check_call(expr: @ast::expr,\n                   callee: option<@ast::expr>,\n                   callee_id: ast::node_id,\n@@ -531,6 +548,10 @@ fn check_loans_in_expr(expr: @ast::expr,\n     self.check_for_conflicting_loans(expr.id);\n \n     alt expr.node {\n+      ast::expr_path(*) if self.bccx.last_use_map.contains_key(expr.id) {\n+        self.check_last_use(expr);\n+      }\n+\n       ast::expr_swap(l, r) {\n         self.check_assignment(at_swap, l);\n         self.check_assignment(at_swap, r);"}, {"sha": "51d2285d6fea53a304c75c40da66a406c9fa2300", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "patch": "@@ -63,6 +63,9 @@ export last_use_map;\n // the local/argument/etc that the path refers to.  However, it also\n // possible for the expr to be a closure, in which case the list is a\n // list of closed over variables that can be moved into the closure.\n+//\n+// Very subtle (#2633): borrowck will remove entries from this table\n+// if it detects an outstanding loan (that is, the addr is taken).\n type last_use_map = hashmap<node_id, @dvec<node_id>>;\n \n enum variable = uint;"}, {"sha": "1ff294a2d306e039b5f99554dd371fd46c28eed3", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "patch": "@@ -0,0 +1,8 @@\n+fn a_val(&&x: ~int, +y: ~int) -> int {\n+    *x + *y\n+}\n+\n+fn main() {\n+    let z = ~22;\n+    a_val(z, z);\n+}"}, {"sha": "53d7861be4f89741c950ff1e4869a92cf420b605", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=982e1166b238f8cd7abe8a7acb91d42cc8e9f5c4", "patch": "@@ -1,5 +1,3 @@\n-// Currently segfaults\n-// xfail-test\n class cat {\n     let mut meow: fn@();\n     new() { self.meow = fn@() { #error(\"meow\"); };}\n@@ -15,4 +13,4 @@ fn nyan(kitty: cat, _kitty_info: kitty_info) {\n fn main() {\n     let mut kitty = cat();\n     nyan(kitty, {kitty: kitty});\n-}\n\\ No newline at end of file\n+}"}]}