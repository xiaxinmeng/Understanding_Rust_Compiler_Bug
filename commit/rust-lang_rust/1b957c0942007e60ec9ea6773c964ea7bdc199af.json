{"sha": "1b957c0942007e60ec9ea6773c964ea7bdc199af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOTU3YzA5NDIwMDdlNjBlYzllYTY3NzNjOTY0ZWE3YmRjMTk5YWY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-23T08:45:25Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::str) replace uses of unsafe::slice_bytes; replace find[_from]_bytes with find[_from]", "tree": {"sha": "4fc4660ec4d8e9fd02a61fcae1ab073f60e89772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc4660ec4d8e9fd02a61fcae1ab073f60e89772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b957c0942007e60ec9ea6773c964ea7bdc199af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b957c0942007e60ec9ea6773c964ea7bdc199af", "html_url": "https://github.com/rust-lang/rust/commit/1b957c0942007e60ec9ea6773c964ea7bdc199af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b957c0942007e60ec9ea6773c964ea7bdc199af/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec053487c84e8b5406e24d6f9f72966cdcfd0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec053487c84e8b5406e24d6f9f72966cdcfd0da", "html_url": "https://github.com/rust-lang/rust/commit/cec053487c84e8b5406e24d6f9f72966cdcfd0da"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "572fde7bd3f6fe712cd0191d75ebb885675bf801", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -478,7 +478,7 @@ fn build_link_meta(sess: session, c: ast::crate, output: str,\n }\n \n fn truncated_sha1_result(sha: sha1) -> str unsafe {\n-    ret str::unsafe::slice_bytes(sha.result_str(), 0u, 16u);\n+    ret str::slice(sha.result_str(), 0u, 16u);\n }\n \n \n@@ -567,12 +567,12 @@ fn link_binary(sess: session,\n     // Converts a library file name into a cc -l argument\n     fn unlib(config: @session::config, filename: str) -> str unsafe {\n         let rmlib = fn@(filename: str) -> str {\n-            let found = str::find_bytes(filename, \"lib\");\n+            let found = str::find(filename, \"lib\");\n             if config.os == session::os_macos ||\n                 (config.os == session::os_linux ||\n                  config.os == session::os_freebsd) &&\n                 option::is_some(found) && option::get(found) == 0u {\n-                ret str::unsafe::slice_bytes(filename, 3u,\n+                ret str::slice(filename, 3u,\n                                str::len_bytes(filename));\n             } else { ret filename; }\n         };"}, {"sha": "dff4f26ae99fb62f66ea66d306aedddf6f5ff41c", "filename": "src/comp/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -167,7 +167,7 @@ fn create_compile_unit(cx: crate_ctxt, full_path: str)\n \n     let work_dir = cx.sess.working_dir;\n     let file_path = if str::starts_with(full_path, work_dir) {\n-        str::unsafe::slice_bytes(full_path, str::len_bytes(work_dir),\n+        str::slice(full_path, str::len_bytes(work_dir),\n                    str::len_bytes(full_path))\n     } else {\n         full_path"}, {"sha": "e9b4569df6ca919a0a7c0eed2e39b4faf79d6e5a", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -162,7 +162,7 @@ fn get_line(fm: filemap, line: int) -> str unsafe {\n       some(e) { e }\n       none { str::len_bytes(*fm.src) }\n     };\n-    str::unsafe::slice_bytes(*fm.src, begin, end)\n+    str::slice(*fm.src, begin, end)\n }\n \n fn lookup_byte_offset(cm: codemap::codemap, chpos: uint)"}, {"sha": "0328afc9f20d7cf8644de32f220541a5e3cc05c6", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -24,7 +24,7 @@ impl reader for reader {\n     fn get_str_from(start: uint) -> str unsafe {\n         // I'm pretty skeptical about this subtraction. What if there's a\n         // multi-byte character before the mark?\n-        ret str::unsafe::slice_bytes(*self.src, start - 1u, self.pos - 1u);\n+        ret str::slice(*self.src, start - 1u, self.pos - 1u);\n     }\n     fn next() -> char {\n         if self.pos < self.len {\n@@ -611,7 +611,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: [str],\n     let s1;\n     if all_whitespace(s, 0u, col) {\n         if col < str::len_bytes(s) {\n-            s1 = str::unsafe::slice_bytes(s, col, str::len_bytes(s));\n+            s1 = str::slice(s, col, str::len_bytes(s));\n         } else { s1 = \"\"; }\n     } else { s1 = s; }\n     log(debug, \"pushing line: \" + s1);"}, {"sha": "18bd05f2b8d3c010b54db36b27610694e1bd293b", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -131,7 +131,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n \n fn ty_to_short_str(cx: ctxt, typ: t) -> str unsafe {\n     let s = encoder::encoded_ty(cx, typ);\n-    if str::len_bytes(s) >= 32u { s = str::unsafe::slice_bytes(s, 0u, 32u); }\n+    if str::len_bytes(s) >= 32u { s = str::slice(s, 0u, 32u); }\n     ret s;\n }\n "}, {"sha": "1184fc5f0f25fcb1352aea8a093401b44eae3f92", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -25,7 +25,7 @@ fn load_errors(testfile: str) -> [expected_error] {\n fn parse_expected(line_num: uint, line: str) -> [expected_error] unsafe {\n     let error_tag = \"//!\";\n     let idx;\n-    alt str::find_bytes(line, error_tag) {\n+    alt str::find(line, error_tag) {\n          option::none { ret []; }\n          option::some(nn) { idx = (nn as uint) + str::len_bytes(error_tag); }\n     }\n@@ -43,11 +43,11 @@ fn parse_expected(line_num: uint, line: str) -> [expected_error] unsafe {\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n     let start_kind = idx;\n     while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n-    let kind = str::to_lower(str::unsafe::slice_bytes(line, start_kind, idx));\n+    let kind = str::to_lower(str::slice(line, start_kind, idx));\n \n     // Extract msg:\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n-    let msg = str::unsafe::slice_bytes(line, idx, len);\n+    let msg = str::slice(line, idx, len);\n \n     #debug(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n "}, {"sha": "8071edad2fe7f1a0432835491ab4f4452c458534", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -106,10 +106,10 @@ fn parse_name_directive(line: str, directive: str) -> bool {\n fn parse_name_value_directive(line: str,\n                               directive: str) -> option<str> unsafe {\n     let keycolon = directive + \":\";\n-    alt str::find_bytes(line, keycolon) {\n+    alt str::find(line, keycolon) {\n         option::some(colon) {\n             let value =\n-                str::unsafe::slice_bytes(line,\n+                str::slice(line,\n                                          colon + str::len_bytes(keycolon),\n                                          str::len_bytes(line));\n             #debug(\"%s: %s\", directive,  value);"}, {"sha": "079451498f1b054c0ebe3b8dbd91a97deeec64da", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -93,13 +93,13 @@ mod ct {\n         }\n         let i = 0u;\n         while i < lim {\n-            let curr = str::unsafe::slice_bytes(s, i, i+1u);\n+            let curr = str::slice(s, i, i+1u);\n             if str::eq(curr, \"%\") {\n                 i += 1u;\n                 if i >= lim {\n                     error(\"unterminated conversion at end of string\");\n                 }\n-                let curr2 = str::unsafe::slice_bytes(s, i, i+1u);\n+                let curr2 = str::slice(s, i, i+1u);\n                 if str::eq(curr2, \"%\") {\n                     buf += curr2;\n                     i += 1u;\n@@ -225,7 +225,7 @@ mod ct {\n     fn parse_type(s: str, i: uint, lim: uint, error: error_fn) ->\n        {ty: ty, next: uint} unsafe {\n         if i >= lim { error(\"missing type in conversion\"); }\n-        let tstr = str::unsafe::slice_bytes(s, i, i+1u);\n+        let tstr = str::slice(s, i, i+1u);\n         // TODO: Do we really want two signed types here?\n         // How important is it to be printf compatible?\n         let t =\n@@ -439,7 +439,7 @@ mod rt {\n                 let headstr = str::from_bytes([head]);\n                 // FIXME: not UTF-8 safe\n                 let bytelen = str::len_bytes(s);\n-                let numpart = str::unsafe::slice_bytes(s, 1u, bytelen);\n+                let numpart = str::slice(s, 1u, bytelen);\n                 ret headstr + padstr + numpart;\n             }\n         }"}, {"sha": "fb7ec4eec2e5b7409da34a5312d7b837945a6314", "filename": "src/libcore/str.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -75,9 +75,9 @@ export\n    index_from,\n    rindex,\n    //rindex_chars,\n+   find,\n+   find_from,\n    find_chars,\n-   find_bytes,\n-   find_from_bytes,\n    contains,\n    starts_with,\n    ends_with,\n@@ -385,15 +385,15 @@ fn chars(s: str) -> [char] {\n /*\n Function: substr\n \n-Take a substring of another. Returns a string containing `len` chars\n+Take a substring of another. Returns a string containing `len` bytes\n starting at char offset `begin`.\n \n Failure:\n \n If `begin` + `len` is is greater than the char length of the string\n */\n fn substr(s: str, begin: uint, len: uint) -> str {\n-    ret slice_chars(s, begin, begin + len);\n+    ret slice(s, begin, begin + len);\n }\n \n // Function: slice\n@@ -696,7 +696,7 @@ fn replace(s: str, from: str, to: str) -> str unsafe {\n                                        from, to);\n     } else {\n         let idx;\n-        alt find_bytes(s, from) {\n+        alt find(s, from) {\n             some(x) { idx = x; }\n             none { ret s; }\n         }\n@@ -977,21 +977,21 @@ fn rindex_chars(ss: str, cc: char) -> option<uint> {\n     ret none;\n }\n \n-//Function: find_bytes\n+//Function: find\n //\n // Find the byte position of the first instance of one string\n // within another, or return option::none\n-fn find_bytes(haystack: str, needle: str) -> option<uint> {\n-    find_from_bytes(haystack, needle, 0u, len_bytes(haystack))\n+fn find(haystack: str, needle: str) -> option<uint> {\n+    find_from(haystack, needle, 0u, len_bytes(haystack))\n }\n \n-//Function: find_from_bytes\n+//Function: find_from\n //\n // Find the byte position of the first instance of one string\n // within another, or return option::none\n //\n // FIXME: Boyer-Moore should be significantly faster\n-fn find_from_bytes(haystack: str, needle: str, start: uint, end:uint)\n+fn find_from(haystack: str, needle: str, start: uint, end:uint)\n   -> option<uint> {\n     assert end <= len_bytes(haystack);\n \n@@ -1020,7 +1020,7 @@ fn find_from_bytes(haystack: str, needle: str, start: uint, end:uint)\n // Find the char position of the first instance of one string\n // within another, or return option::none\n fn find_chars(haystack: str, needle: str) -> option<uint> {\n-   alt find_bytes(haystack, needle) {\n+   alt find(haystack, needle) {\n       none { ret none; }\n       some(nn) { ret some(b2c_pos(haystack, nn)); }\n    }\n@@ -1056,7 +1056,7 @@ haystack - The string to look in\n needle - The string to look for\n */\n fn contains(haystack: str, needle: str) -> bool {\n-    option::is_some(find_bytes(haystack, needle))\n+    option::is_some(find(haystack, needle))\n }\n \n /*\n@@ -1479,8 +1479,8 @@ mod unsafe {\n    export\n       from_bytes,\n       from_byte,\n-      slice_bytes,\n-      slice_bytes_safe_range,\n+      slice_bytes,            // FIXME: stop exporting\n+      slice_bytes_safe_range, // FIXME: stop exporting\n       push_byte,\n       push_bytes, // note: wasn't exported\n       pop_byte,\n@@ -1840,45 +1840,45 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_find_bytes() {\n+    fn test_find() {\n         // byte positions\n-        assert (find_bytes(\"banana\", \"apple pie\") == none);\n-        assert (find_bytes(\"\", \"\") == some(0u));\n+        assert (find(\"banana\", \"apple pie\") == none);\n+        assert (find(\"\", \"\") == some(0u));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find_bytes(data, \"\")     == some(0u));\n-        assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some( 0u));\n-        assert (find_bytes(data, \"\u0e30\u0e40\")   == some( 6u));\n-        assert (find_bytes(data, \"\u4e2d\u534e\") == some(27u));\n-        assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == none);\n+        assert (find(data, \"\")     == some(0u));\n+        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") == some( 0u));\n+        assert (find(data, \"\u0e30\u0e40\")   == some( 6u));\n+        assert (find(data, \"\u4e2d\u534e\") == some(27u));\n+        assert (find(data, \"\u0e44\u0e17\u534e\") == none);\n     }\n \n     #[test]\n-    fn test_find_from_bytes() {\n+    fn test_find_from() {\n         // byte positions\n-        assert (find_from_bytes(\"\", \"\", 0u, 0u) == some(0u));\n+        assert (find_from(\"\", \"\", 0u, 0u) == some(0u));\n \n         let data = \"abcabc\";\n-        assert find_from_bytes(data, \"ab\", 0u, 6u) == some(0u);\n-        assert find_from_bytes(data, \"ab\", 2u, 6u) == some(3u);\n-        assert find_from_bytes(data, \"ab\", 2u, 4u) == none;\n+        assert find_from(data, \"ab\", 0u, 6u) == some(0u);\n+        assert find_from(data, \"ab\", 2u, 6u) == some(3u);\n+        assert find_from(data, \"ab\", 2u, 4u) == none;\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         data += data;\n-        assert find_from_bytes(data, \"\", 0u, 43u) == some(0u);\n-        assert find_from_bytes(data, \"\", 6u, 43u) == some(6u);\n+        assert find_from(data, \"\", 0u, 43u) == some(0u);\n+        assert find_from(data, \"\", 6u, 43u) == some(6u);\n \n-        assert find_from_bytes(data, \"\u0e1b\u0e23\u0e30\", 0u, 43u) == some( 0u);\n-        assert find_from_bytes(data, \"\u0e17\u0e28\u0e44\", 0u, 43u) == some(12u);\n-        assert find_from_bytes(data, \"\u0e22\u4e2d\", 0u, 43u) == some(24u);\n-        assert find_from_bytes(data, \"i\u1ec7t\", 0u, 43u) == some(34u);\n-        assert find_from_bytes(data, \"Nam\", 0u, 43u) == some(40u);\n+        assert find_from(data, \"\u0e1b\u0e23\u0e30\", 0u, 43u) == some( 0u);\n+        assert find_from(data, \"\u0e17\u0e28\u0e44\", 0u, 43u) == some(12u);\n+        assert find_from(data, \"\u0e22\u4e2d\", 0u, 43u) == some(24u);\n+        assert find_from(data, \"i\u1ec7t\", 0u, 43u) == some(34u);\n+        assert find_from(data, \"Nam\", 0u, 43u) == some(40u);\n \n-        assert find_from_bytes(data, \"\u0e1b\u0e23\u0e30\", 43u, 86u) == some(43u);\n-        assert find_from_bytes(data, \"\u0e17\u0e28\u0e44\", 43u, 86u) == some(55u);\n-        assert find_from_bytes(data, \"\u0e22\u4e2d\", 43u, 86u) == some(67u);\n-        assert find_from_bytes(data, \"i\u1ec7t\", 43u, 86u) == some(77u);\n-        assert find_from_bytes(data, \"Nam\", 43u, 86u) == some(83u);\n+        assert find_from(data, \"\u0e1b\u0e23\u0e30\", 43u, 86u) == some(43u);\n+        assert find_from(data, \"\u0e17\u0e28\u0e44\", 43u, 86u) == some(55u);\n+        assert find_from(data, \"\u0e22\u4e2d\", 43u, 86u) == some(67u);\n+        assert find_from(data, \"i\u1ec7t\", 43u, 86u) == some(77u);\n+        assert find_from(data, \"Nam\", 43u, 86u) == some(83u);\n     }\n \n     #[test]\n@@ -1912,7 +1912,7 @@ mod tests {\n         t(\"hello\", \"el\", 1);\n \n         assert \"\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\"\n-            == substr(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", 2u, 6u);\n+            == substr(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", 6u, 18u);\n     }\n \n     #[test]"}, {"sha": "25681185f9b5801377cd0bc9c645cb943eef4786", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -229,7 +229,7 @@ fn getopts(args: [str], opts: [opt]) -> result unsafe {\n             let names;\n             let i_arg = option::none::<str>;\n             if cur[1] == '-' as u8 {\n-                let tail = str::unsafe::slice_bytes(cur, 2u, curlen);\n+                let tail = str::slice(cur, 2u, curlen);\n                 let tail_eq = str::splitn_char(tail, '=', 1u);\n                 if vec::len(tail_eq) <= 1u {\n                     names = [long(tail)];"}, {"sha": "4351ceb2d5ab67a915d524b14cbef7c214411ccf", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -1345,7 +1345,7 @@ mod tests {\n             fn aux(str: @mutable str, node: @node::node) unsafe {\n                 alt(*node) {\n                   node::leaf(x) {\n-                    *str += str::unsafe::slice_bytes(\n+                    *str += str::slice(\n                         *x.content, x.byte_offset,\n                         x.byte_offset + x.byte_len);\n                   }"}, {"sha": "1b63f87f7c62ae5d3a63d8c214d2505b9a8e0b56", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -372,7 +372,7 @@ mod tests {\n             let left = len;\n             while left > 0u {\n                 let take = (left + 1u) / 2u;\n-                sh.input_str(str::unsafe::slice_bytes(t.input, len - left,\n+                sh.input_str(str::slice(t.input, len - left,\n                              take + len - left));\n                 left = left - take;\n             }"}, {"sha": "d473f25d090934b1719878285e0aaeba058b5eca", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b957c0942007e60ec9ea6773c964ea7bdc199af/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=1b957c0942007e60ec9ea6773c964ea7bdc199af", "patch": "@@ -56,10 +56,10 @@ fn should_write_modules_last() {\n          fn d() { }\"\n     );\n \n-    let idx_a = option::get(str::find_bytes(markdown, \"# Module `a`\"));\n-    let idx_b = option::get(str::find_bytes(markdown, \"## Function `b`\"));\n-    let idx_c = option::get(str::find_bytes(markdown, \"# Module `c`\"));\n-    let idx_d = option::get(str::find_bytes(markdown, \"## Function `d`\"));\n+    let idx_a = option::get(str::find(markdown, \"# Module `a`\"));\n+    let idx_b = option::get(str::find(markdown, \"## Function `b`\"));\n+    let idx_c = option::get(str::find(markdown, \"# Module `c`\"));\n+    let idx_d = option::get(str::find(markdown, \"## Function `d`\"));\n \n     assert idx_b < idx_d;\n     assert idx_d < idx_a;"}]}