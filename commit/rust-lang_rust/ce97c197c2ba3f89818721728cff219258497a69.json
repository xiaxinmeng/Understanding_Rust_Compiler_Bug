{"sha": "ce97c197c2ba3f89818721728cff219258497a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTdjMTk3YzJiYTNmODk4MTg3MjE3MjhjZmYyMTkyNTg0OTdhNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-08T04:10:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-08T04:10:12Z"}, "message": "Auto merge of #24078 - whipsch:extra-token-msg, r=huonw\n\nAddresses issue #22425.  See `src/test/compile-fail/macro-incomplete-parse.rs` for a relevant test:\r\n\r\n    macro-incomplete-parse.rs:15:9: 15:10 error: macro expansion ignores token `,` and any following\r\n    macro-incomplete-parse.rs:15         , //~ ERROR macro expansion ignores token `,`\r\n                                         ^\r\n    macro-incomplete-parse.rs:27:1: 27:17 note: caused by the macro expansion here; the usage of `ignored_item` is likely invalid in this context\r\n    macro-incomplete-parse.rs:27 ignored_item!();\r\n                                 ^~~~~~~~~~~~~~~~\r\n    macro-incomplete-parse.rs:20:14: 20:15 error: macro expansion ignores token `,` and any following\r\n    macro-incomplete-parse.rs:20     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\r\n                                              ^\r\n    macro-incomplete-parse.rs:30:5: 30:21 note: caused by the macro expansion here; the usage of `ignored_expr` is likely invalid in this context\r\n    macro-incomplete-parse.rs:30     ignored_expr!();\r\n                                     ^~~~~~~~~~~~~~~~\r\n    macro-incomplete-parse.rs:24:14: 24:15 error: macro expansion ignores token `,` and any following\r\n    macro-incomplete-parse.rs:24     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\r\n                                              ^\r\n    macro-incomplete-parse.rs:32:9: 32:23 note: caused by the macro expansion here; the usage of `ignored_pat` is likely invalid in this context\r\n    macro-incomplete-parse.rs:32         ignored_pat!() => (),\r\n                                         ^~~~~~~~~~~~~~\r\n\r\nThis does not address the case of improper expansion inside of an impl { } as seen in issue #21607.\r\n\r\n\r\nI'm not sure if the note text is ideal, but it can be refined if needed.", "tree": {"sha": "4b95ba41d93ab048e60c21e6c2b2f892a8bab06e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b95ba41d93ab048e60c21e6c2b2f892a8bab06e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce97c197c2ba3f89818721728cff219258497a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce97c197c2ba3f89818721728cff219258497a69", "html_url": "https://github.com/rust-lang/rust/commit/ce97c197c2ba3f89818721728cff219258497a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce97c197c2ba3f89818721728cff219258497a69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6c4a8f15bc04dae7720af69d4a534d93c85c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6c4a8f15bc04dae7720af69d4a534d93c85c0a", "html_url": "https://github.com/rust-lang/rust/commit/dd6c4a8f15bc04dae7720af69d4a534d93c85c0a"}, {"sha": "ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "html_url": "https://github.com/rust-lang/rust/commit/ab3215406d0cd76ea71a554e0f4bdd16331cca7f"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "009075540fa1e01cbcf9f312ad009859c86420b7", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce97c197c2ba3f89818721728cff219258497a69/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97c197c2ba3f89818721728cff219258497a69/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=ce97c197c2ba3f89818721728cff219258497a69", "patch": "@@ -29,6 +29,11 @@ use std::rc::Rc;\n \n struct ParserAnyMacro<'a> {\n     parser: RefCell<Parser<'a>>,\n+\n+    /// Span of the expansion site of the macro this parser is for\n+    site_span: Span,\n+    /// The ident of the macro we're parsing\n+    macro_ident: ast::Ident\n }\n \n impl<'a> ParserAnyMacro<'a> {\n@@ -50,6 +55,12 @@ impl<'a> ParserAnyMacro<'a> {\n                               token_str);\n             let span = parser.span;\n             parser.span_err(span, &msg[..]);\n+\n+            let name = token::get_ident(self.macro_ident);\n+            let msg = format!(\"caused by the macro expansion here; the usage \\\n+                               of `{}` is likely invalid in this context\",\n+                               name);\n+            parser.span_note(self.site_span, &msg[..]);\n         }\n     }\n }\n@@ -169,6 +180,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 // Weird, but useful for X-macros.\n                 return box ParserAnyMacro {\n                     parser: RefCell::new(p),\n+\n+                    // Pass along the original expansion site and the name of the macro\n+                    // so we can print a useful error message if the parse of the expanded\n+                    // macro leaves unparsed tokens.\n+                    site_span: sp,\n+                    macro_ident: name\n                 }\n               }\n               Failure(sp, ref msg) => if sp.lo >= best_fail_spot.lo {"}, {"sha": "b3ce84c7e6f1a2dbfcd46c49e2f9e13910146c0c", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce97c197c2ba3f89818721728cff219258497a69/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce97c197c2ba3f89818721728cff219258497a69/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=ce97c197c2ba3f89818721728cff219258497a69", "patch": "@@ -24,12 +24,12 @@ macro_rules! ignored_pat {\n     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n }\n \n-ignored_item!();\n+ignored_item!(); //~ NOTE caused by the macro expansion here\n \n fn main() {\n-    ignored_expr!();\n+    ignored_expr!(); //~ NOTE caused by the macro expansion here\n     match 1 {\n-        ignored_pat!() => (),\n+        ignored_pat!() => (), //~ NOTE caused by the macro expansion here\n         _ => (),\n     }\n }"}]}