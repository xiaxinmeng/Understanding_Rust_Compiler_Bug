{"sha": "65a7611b63ede78537be37e435b6adb43abc0bae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTc2MTFiNjNlZGU3ODUzN2JlMzdlNDM1YjZhZGI0M2FiYzBiYWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-10-06T12:18:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-10-06T12:18:41Z"}, "message": "sort error codes in librustc_passes", "tree": {"sha": "c17c45e0f59fb8aca1fb741c2fb2aadfed3fb329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c17c45e0f59fb8aca1fb741c2fb2aadfed3fb329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a7611b63ede78537be37e435b6adb43abc0bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a7611b63ede78537be37e435b6adb43abc0bae", "html_url": "https://github.com/rust-lang/rust/commit/65a7611b63ede78537be37e435b6adb43abc0bae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a7611b63ede78537be37e435b6adb43abc0bae/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "html_url": "https://github.com/rust-lang/rust/commit/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae"}], "stats": {"total": 323, "additions": 161, "deletions": 162}, "files": [{"sha": "82cbcf458b074347b08370d2e3816e0ada447223", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 161, "deletions": 162, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/65a7611b63ede78537be37e435b6adb43abc0bae/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a7611b63ede78537be37e435b6adb43abc0bae/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=65a7611b63ede78537be37e435b6adb43abc0bae", "patch": "@@ -53,6 +53,67 @@ extern {\n ```\n \"##,\n \n+// This shouldn't really ever trigger since the repeated value error comes first\n+E0136: r##\"\n+A binary can only have one entry point, and by default that entry point is the\n+function `main()`. If there are multiple such functions, please rename one.\n+\"##,\n+\n+E0137: r##\"\n+More than one function was declared with the `#[main]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0137\n+#![feature(main)]\n+\n+#[main]\n+fn foo() {}\n+\n+#[main]\n+fn f() {} // error: multiple functions with a `#[main]` attribute\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[main]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(main)]\n+\n+#[main]\n+fn f() {} // ok!\n+```\n+\"##,\n+\n+E0138: r##\"\n+More than one function was declared with the `#[start]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0138\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+\n+#[start]\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+// error: multiple 'start' functions\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[start]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n+```\n+\"##,\n+\n E0197: r##\"\n Inherent implementations (one that do not implement a trait but provide\n methods associated with a type) are always safe because they are not\n@@ -198,20 +259,30 @@ impl Foo for Bar {\n ```\n \"##,\n \n+E0512: r##\"\n+Transmute with two differently sized types was attempted. Erroneous code\n+example:\n \n-E0590: r##\"\n-`break` or `continue` must include a label when used in the condition of a\n-`while` loop.\n-\n-Example of erroneous code:\n+```compile_fail,E0512\n+fn takes_u8(_: u8) {}\n \n-```compile_fail\n-while break {}\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n+    // error: cannot transmute between types of different sizes,\n+    //        or dependently-sized types\n+}\n ```\n \n-To fix this, add a label specifying which loop is being broken out of:\n+Please use types with same size or use the expected type directly. Example:\n+\n ```\n-'foo: while break 'foo {}\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n+    // or:\n+    unsafe { takes_u8(0u8); } // ok!\n+}\n ```\n \"##,\n \n@@ -249,151 +320,20 @@ let result = loop { // ok!\n ```\n \"##,\n \n-E0642: r##\"\n-Trait methods currently cannot take patterns as arguments.\n-\n-Example of erroneous code:\n-\n-```compile_fail,E0642\n-trait Foo {\n-    fn foo((x, y): (i32, i32)); // error: patterns aren't allowed\n-                                //        in trait methods\n-}\n-```\n-\n-You can instead use a single name for the argument:\n-\n-```\n-trait Foo {\n-    fn foo(x_and_y: (i32, i32)); // ok!\n-}\n-```\n-\"##,\n-\n-E0695: r##\"\n-A `break` statement without a label appeared inside a labeled block.\n-\n-Example of erroneous code:\n-\n-```compile_fail,E0695\n-# #![feature(label_break_value)]\n-loop {\n-    'a: {\n-        break;\n-    }\n-}\n-```\n-\n-Make sure to always label the `break`:\n-\n-```\n-# #![feature(label_break_value)]\n-'l: loop {\n-    'a: {\n-        break 'l;\n-    }\n-}\n-```\n-\n-Or if you want to `break` the labeled block:\n-\n-```\n-# #![feature(label_break_value)]\n-loop {\n-    'a: {\n-        break 'a;\n-    }\n-    break;\n-}\n-```\n-\"##,\n-\n-E0670: r##\"\n-Rust 2015 does not permit the use of `async fn`.\n+E0590: r##\"\n+`break` or `continue` must include a label when used in the condition of a\n+`while` loop.\n \n Example of erroneous code:\n \n-```compile_fail,E0670\n-async fn foo() {}\n-```\n-\n-Switch to the Rust 2018 edition to use `async fn`.\n-\"##,\n-\n-// This shouldn't really ever trigger since the repeated value error comes first\n-E0136: r##\"\n-A binary can only have one entry point, and by default that entry point is the\n-function `main()`. If there are multiple such functions, please rename one.\n-\"##,\n-\n-E0137: r##\"\n-More than one function was declared with the `#[main]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0137\n-#![feature(main)]\n-\n-#[main]\n-fn foo() {}\n-\n-#[main]\n-fn f() {} // error: multiple functions with a `#[main]` attribute\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[main]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(main)]\n-\n-#[main]\n-fn f() {} // ok!\n-```\n-\"##,\n-\n-E0138: r##\"\n-More than one function was declared with the `#[start]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0138\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize {}\n-\n-#[start]\n-fn f(argc: isize, argv: *const *const u8) -> isize {}\n-// error: multiple 'start' functions\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[start]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n+```compile_fail\n+while break {}\n ```\n-\"##,\n-\n-E0601: r##\"\n-No `main` function was found in a binary crate. To fix this error, add a\n-`main` function. For example:\n \n+To fix this, add a label specifying which loop is being broken out of:\n ```\n-fn main() {\n-    // Your program will start here.\n-    println!(\"Hello world!\");\n-}\n+'foo: while break 'foo {}\n ```\n-\n-If you don't know the basics of Rust, you can go look to the Rust Book to get\n-started: https://doc.rust-lang.org/book/\n \"##,\n \n E0591: r##\"\n@@ -474,33 +414,92 @@ makes a difference in practice.)\n [rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n \"##,\n \n-E0512: r##\"\n-Transmute with two differently sized types was attempted. Erroneous code\n-example:\n-\n-```compile_fail,E0512\n-fn takes_u8(_: u8) {}\n+E0601: r##\"\n+No `main` function was found in a binary crate. To fix this error, add a\n+`main` function. For example:\n \n+```\n fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n-    // error: cannot transmute between types of different sizes,\n-    //        or dependently-sized types\n+    // Your program will start here.\n+    println!(\"Hello world!\");\n }\n ```\n \n-Please use types with same size or use the expected type directly. Example:\n+If you don't know the basics of Rust, you can go look to the Rust Book to get\n+started: https://doc.rust-lang.org/book/\n+\"##,\n+\n+E0642: r##\"\n+Trait methods currently cannot take patterns as arguments.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0642\n+trait Foo {\n+    fn foo((x, y): (i32, i32)); // error: patterns aren't allowed\n+                                //        in trait methods\n+}\n+```\n+\n+You can instead use a single name for the argument:\n \n ```\n-fn takes_u8(_: u8) {}\n+trait Foo {\n+    fn foo(x_and_y: (i32, i32)); // ok!\n+}\n+```\n+\"##,\n \n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n-    // or:\n-    unsafe { takes_u8(0u8); } // ok!\n+E0695: r##\"\n+A `break` statement without a label appeared inside a labeled block.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0695\n+# #![feature(label_break_value)]\n+loop {\n+    'a: {\n+        break;\n+    }\n+}\n+```\n+\n+Make sure to always label the `break`:\n+\n+```\n+# #![feature(label_break_value)]\n+'l: loop {\n+    'a: {\n+        break 'l;\n+    }\n+}\n+```\n+\n+Or if you want to `break` the labeled block:\n+\n+```\n+# #![feature(label_break_value)]\n+loop {\n+    'a: {\n+        break 'a;\n+    }\n+    break;\n }\n ```\n \"##,\n \n+E0670: r##\"\n+Rust 2015 does not permit the use of `async fn`.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0670\n+async fn foo() {}\n+```\n+\n+Switch to the Rust 2018 edition to use `async fn`.\n+\"##,\n+\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target"}]}