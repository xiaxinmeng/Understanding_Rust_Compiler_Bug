{"sha": "4a53b115181a16d681dc05b312bbc913b7f836ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNTNiMTE1MTgxYTE2ZDY4MWRjMDViMzEyYmJjOTEzYjdmODM2YWM=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-07-08T20:57:10Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-07-08T20:57:10Z"}, "message": "only check cg defaults wf once instantiated", "tree": {"sha": "af14a7b6c49e4407b1fd19063c3961beafd21a6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af14a7b6c49e4407b1fd19063c3961beafd21a6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a53b115181a16d681dc05b312bbc913b7f836ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a53b115181a16d681dc05b312bbc913b7f836ac", "html_url": "https://github.com/rust-lang/rust/commit/4a53b115181a16d681dc05b312bbc913b7f836ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a53b115181a16d681dc05b312bbc913b7f836ac/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0485c7986e0dac6ffd0207aba56467cb9378d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0485c7986e0dac6ffd0207aba56467cb9378d85", "html_url": "https://github.com/rust-lang/rust/commit/d0485c7986e0dac6ffd0207aba56467cb9378d85"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "4838d70a83186843150cf2d5b7f25a8512163a08", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4a53b115181a16d681dc05b312bbc913b7f836ac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a53b115181a16d681dc05b312bbc913b7f836ac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4a53b115181a16d681dc05b312bbc913b7f836ac", "patch": "@@ -738,15 +738,19 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 }\n             }\n             GenericParamDefKind::Const { .. } => {\n-                // FIXME(const_generics_defaults): Figure out if this\n-                // is the behavior we want, see the comment further below.\n                 if is_our_default(&param) {\n+                    // FIXME(const_generics_defaults): This\n+                    // is incorrect when dealing with unused substs, for example\n+                    // for `struct Foo<const N: usize, const M: usize = { 1 - 2 }>`\n+                    // we should eagerly error.\n                     let default_ct = tcx.const_param_default(param.def_id);\n-                    fcx.register_wf_obligation(\n-                        default_ct.into(),\n-                        tcx.def_span(param.def_id),\n-                        ObligationCauseCode::MiscObligation,\n-                    );\n+                    if !default_ct.needs_subst() {\n+                        fcx.register_wf_obligation(\n+                            default_ct.into(),\n+                            tcx.def_span(param.def_id),\n+                            ObligationCauseCode::MiscObligation,\n+                        );\n+                    }\n                 }\n             }\n             // Doesn't have defaults.\n@@ -783,14 +787,6 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 tcx.mk_param_from_def(param)\n             }\n             GenericParamDefKind::Const { .. } => {\n-                // FIXME(const_generics_defaults): I(@lcnr) feel like always\n-                // using the const parameter is the right choice here, even\n-                // if it needs substs.\n-                //\n-                // Before stabilizing this we probably want to get some tests\n-                // where this makes a difference and figure out what's the exact\n-                // behavior we want here.\n-\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id);"}, {"sha": "583ba9392f062ebe290bc865ffcd5301948327ee", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a53b115181a16d681dc05b312bbc913b7f836ac/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a53b115181a16d681dc05b312bbc913b7f836ac/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4a53b115181a16d681dc05b312bbc913b7f836ac", "patch": "@@ -2308,6 +2308,16 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 ));\n             }\n         }\n+\n+        fn visit_const_param_default(&mut self, _param: HirId, _ct: &'tcx hir::AnonConst) {\n+            // Do not look into const param defaults,\n+            // these get checked when they are actually instantiated.\n+            //\n+            // We do not want the following to error:\n+            //\n+            //     struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+            //     struct Bar<const N: usize>(Foo<N, 3>);\n+        }\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "21f14f58ab5affd950c0a6881de6dd69c7aec74f", "filename": "src/test/ui/const-generics/const_evaluatable_checked/unused-complex-default-expr.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a53b115181a16d681dc05b312bbc913b7f836ac/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Funused-complex-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a53b115181a16d681dc05b312bbc913b7f836ac/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Funused-complex-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Funused-complex-default-expr.rs?ref=4a53b115181a16d681dc05b312bbc913b7f836ac", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+#![feature(const_generics, const_evaluatable_checked, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+struct Bar<const N: usize>(Foo<N, 3>);\n+fn main() {}"}, {"sha": "e0e2b6c69f28062230e181bbfe87ac2ed6fa89cd", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.full.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0485c7986e0dac6ffd0207aba56467cb9378d85/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0485c7986e0dac6ffd0207aba56467cb9378d85/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr?ref=d0485c7986e0dac6ffd0207aba56467cb9378d85", "patch": "@@ -1,18 +0,0 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/complex-generic-default-expr.rs:6:34\n-   |\n-LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n-   |                                  ^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/complex-generic-default-expr.rs:10:21\n-   |\n-LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n-   |                     ^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "44df2ac9f40fadb66034354973eb88cd1935ac74", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a53b115181a16d681dc05b312bbc913b7f836ac/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a53b115181a16d681dc05b312bbc913b7f836ac/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=4a53b115181a16d681dc05b312bbc913b7f836ac", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:6:47\n+  --> $DIR/complex-generic-default-expr.rs:7:47\n    |\n LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`"}, {"sha": "d3558007977e46a9f10df41015548eafe1ebc0e6", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a53b115181a16d681dc05b312bbc913b7f836ac/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a53b115181a16d681dc05b312bbc913b7f836ac/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=4a53b115181a16d681dc05b312bbc913b7f836ac", "patch": "@@ -1,14 +1,13 @@\n // revisions: full min\n+//[full] check-pass\n #![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n-//[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters may not be used in const operations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n-//[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters may not be used in const operations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n fn main() {}"}]}