{"sha": "28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjZlZWRiYTU5ZDNhNWRkNDNmZTZmYmRlM2QxOWQ1NGQwZTJmOWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T17:12:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-02T17:12:38Z"}, "message": "simplify runnables", "tree": {"sha": "55074a42a5b17515fc6e328bf3270838cb70db23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55074a42a5b17515fc6e328bf3270838cb70db23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "html_url": "https://github.com/rust-lang/rust/commit/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef08b6c084fc2676655fe6dfb693ab097d3f9fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef08b6c084fc2676655fe6dfb693ab097d3f9fd9", "html_url": "https://github.com/rust-lang/rust/commit/ef08b6c084fc2676655fe6dfb693ab097d3f9fd9"}], "stats": {"total": 189, "additions": 65, "deletions": 124}, "files": [{"sha": "5f82e92f40f89181adbbe4a1d3f24791d1998913", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -667,6 +667,7 @@ name = \"ra_analysis\"\n version = \"0.1.0\"\n dependencies = [\n  \"fst 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\","}, {"sha": "c0174cdc50fad6952e79eb8c6a23844b62574184", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -5,13 +5,15 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n+itertools = \"0.8.0\"\n log = \"0.4.5\"\n relative-path = \"0.4.0\"\n rayon = \"1.0.2\"\n fst = \"0.3.1\"\n salsa = \"0.9.0\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n+\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "ff13247de31d001d0233f7a3935e93895a953632", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -100,27 +100,6 @@ impl db::RootDatabase {\n }\n \n impl db::RootDatabase {\n-    pub(crate) fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n-        let descr = match source_binder::module_from_position(self, position)? {\n-            None => return Ok(None),\n-            Some(it) => it,\n-        };\n-        let name = match descr.name() {\n-            None => return Ok(None),\n-            Some(it) => it.to_string(),\n-        };\n-\n-        let modules = descr.path_to_root();\n-\n-        let path = modules\n-            .iter()\n-            .filter_map(|s| s.name())\n-            .skip(1) // name is already part of the string.\n-            .fold(name, |path, it| format!(\"{}::{}\", it, path));\n-\n-        Ok(Some(path.to_string()))\n-    }\n-\n     /// This returns `Vec` because a module may be included from several places. We\n     /// don't handle this case yet though, so the Vec has length at most one.\n     pub(crate) fn parent_module("}, {"sha": "a01febf4e0b4d203e2333e80043d4f42e40d67b0", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -382,10 +382,6 @@ impl Analysis {\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n         self.db.parent_module(position)\n     }\n-    /// Returns `::` separated path to the current module from the crate root.\n-    pub fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n-        self.db.module_path(position)\n-    }\n     /// Returns crates this file belongs too.\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n         self.db.crate_for(file_id)\n@@ -396,8 +392,7 @@ impl Analysis {\n     }\n     /// Returns the set of possible targets to run for the current file.\n     pub fn runnables(&self, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n-        let file = self.db.source_file(file_id);\n-        Ok(runnables::runnables(self, &file, file_id))\n+        runnables::runnables(&*self.db, file_id)\n     }\n     /// Computes syntax highlighting for the given file.\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {"}, {"sha": "4742676059c00e3d4df855544ac067aed71e6505", "filename": "crates/ra_analysis/src/runnables.rs", "status": "modified", "additions": 60, "deletions": 46, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Frunnables.rs?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -1,11 +1,11 @@\n+use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner, ModuleItemOwner},\n-    SourceFileNode, TextRange, SyntaxNodeRef,\n-    TextUnit,\n-};\n-use crate::{\n-    Analysis, FileId, FilePosition\n+    TextRange, SyntaxNodeRef,\n };\n+use ra_db::{Cancelable, SyntaxDatabase};\n+\n+use crate::{db::RootDatabase, FileId};\n \n #[derive(Debug)]\n pub struct Runnable {\n@@ -20,53 +20,67 @@ pub enum RunnableKind {\n     Bin,\n }\n \n-pub fn runnables(\n-    analysis: &Analysis,\n-    file_node: &SourceFileNode,\n-    file_id: FileId,\n-) -> Vec<Runnable> {\n-    file_node\n+pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n+    let source_file = db.source_file(file_id);\n+    let res = source_file\n         .syntax()\n         .descendants()\n-        .filter_map(|i| runnable(analysis, i, file_id))\n-        .collect()\n+        .filter_map(|i| runnable(db, file_id, i))\n+        .collect();\n+    Ok(res)\n }\n \n-fn runnable<'a>(analysis: &Analysis, item: SyntaxNodeRef<'a>, file_id: FileId) -> Option<Runnable> {\n-    if let Some(f) = ast::FnDef::cast(item) {\n-        let name = f.name()?.text();\n-        let kind = if name == \"main\" {\n-            RunnableKind::Bin\n-        } else if f.has_atom_attr(\"test\") {\n-            RunnableKind::Test {\n-                name: name.to_string(),\n-            }\n-        } else {\n-            return None;\n-        };\n-        Some(Runnable {\n-            range: f.syntax().range(),\n-            kind,\n-        })\n+fn runnable(db: &RootDatabase, file_id: FileId, item: SyntaxNodeRef) -> Option<Runnable> {\n+    if let Some(fn_def) = ast::FnDef::cast(item) {\n+        runnable_fn(fn_def)\n     } else if let Some(m) = ast::Module::cast(item) {\n-        if m.item_list()?\n-            .items()\n-            .map(ast::ModuleItem::syntax)\n-            .filter_map(ast::FnDef::cast)\n-            .any(|f| f.has_atom_attr(\"test\"))\n-        {\n-            let postition = FilePosition {\n-                file_id,\n-                offset: m.syntax().range().start() + TextUnit::from_usize(1),\n-            };\n-            analysis.module_path(postition).ok()?.map(|path| Runnable {\n-                range: m.syntax().range(),\n-                kind: RunnableKind::TestMod { path },\n-            })\n-        } else {\n-            None\n-        }\n+        runnable_mod(db, file_id, m)\n     } else {\n         None\n     }\n }\n+\n+fn runnable_fn(fn_def: ast::FnDef) -> Option<Runnable> {\n+    let name = fn_def.name()?.text();\n+    let kind = if name == \"main\" {\n+        RunnableKind::Bin\n+    } else if fn_def.has_atom_attr(\"test\") {\n+        RunnableKind::Test {\n+            name: name.to_string(),\n+        }\n+    } else {\n+        return None;\n+    };\n+    Some(Runnable {\n+        range: fn_def.syntax().range(),\n+        kind,\n+    })\n+}\n+\n+fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Option<Runnable> {\n+    let has_test_function = module\n+        .item_list()?\n+        .items()\n+        .filter_map(|it| match it {\n+            ast::ModuleItem::FnDef(it) => Some(it),\n+            _ => None,\n+        })\n+        .any(|f| f.has_atom_attr(\"test\"));\n+    if !has_test_function {\n+        return None;\n+    }\n+    let range = module.syntax().range();\n+    let module =\n+        hir::source_binder::module_from_child_node(db, file_id, module.syntax()).ok()??;\n+    let path = module\n+        .path_to_root()\n+        .into_iter()\n+        .rev()\n+        .into_iter()\n+        .filter_map(|it| it.name().map(Clone::clone))\n+        .join(\"::\");\n+    Some(Runnable {\n+        range,\n+        kind: RunnableKind::TestMod { path },\n+    })\n+}"}, {"sha": "3045c2e781fe657bbd8d26c58cacb607b154035c", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -131,56 +131,6 @@ fn test_resolve_parent_module_for_inline() {\n     );\n }\n \n-#[test]\n-fn test_path_one_layer() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod foo;\n-        //- /foo/mod.rs\n-        mod bla;\n-        //- /foo/bla.rs\n-        <|> //empty\n-    \",\n-    );\n-    let symbols = analysis.module_path(pos).unwrap().unwrap();\n-    assert_eq!(\"foo::bla\", &symbols);\n-}\n-\n-#[test]\n-fn test_path_two_layer() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod foo;\n-        //- /foo/mod.rs\n-        mod bla;\n-        //- /foo/bla/mod.rs\n-        mod more;\n-        //- /foo/bla/more.rs\n-        <|> //empty\n-    \",\n-    );\n-    let symbols = analysis.module_path(pos).unwrap().unwrap();\n-    assert_eq!(\"foo::bla::more\", &symbols);\n-}\n-\n-#[test]\n-fn test_path_in_file_mod() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod foo;\n-        //- /foo.rs\n-        mod bar {\n-            <|> //empty\n-        }\n-    \",\n-    );\n-    let symbols = analysis.module_path(pos).unwrap().unwrap();\n-    assert_eq!(\"foo::bar\", &symbols);\n-}\n-\n #[test]\n fn test_resolve_crate_root() {\n     let mock = MockAnalysis::with_files("}, {"sha": "a53b69d203e353d44fffd7ad4de5f50bc4ac7cc9", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=28f6eedba59d3a5dd43fe6fbde3d19d54d0e2f9d", "patch": "@@ -80,7 +80,7 @@ impl Module {\n         Some(Crate::new(crate_id))\n     }\n \n-    /// Returns the all modulkes on the way to the root.\n+    /// Returns the all modules on the way to the root.\n     pub fn path_to_root(&self) -> Vec<Module> {\n         generate(Some(self.clone()), move |it| it.parent()).collect::<Vec<Module>>()\n     }"}]}