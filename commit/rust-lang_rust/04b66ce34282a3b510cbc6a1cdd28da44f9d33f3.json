{"sha": "04b66ce34282a3b510cbc6a1cdd28da44f9d33f3", "node_id": "C_kwDOAAsO6NoAKDA0YjY2Y2UzNDI4MmEzYjUxMGNiYzZhMWNkZDI4ZGE0NGY5ZDMzZjM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T01:42:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T01:42:50Z"}, "message": "update ui_test readme", "tree": {"sha": "7197654afea64b193c769cf320aa16d70d55d5b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7197654afea64b193c769cf320aa16d70d55d5b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b66ce34282a3b510cbc6a1cdd28da44f9d33f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b66ce34282a3b510cbc6a1cdd28da44f9d33f3", "html_url": "https://github.com/rust-lang/rust/commit/04b66ce34282a3b510cbc6a1cdd28da44f9d33f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b66ce34282a3b510cbc6a1cdd28da44f9d33f3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220df5f3cffed318354880f16183b28f3d9f38c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/220df5f3cffed318354880f16183b28f3d9f38c7", "html_url": "https://github.com/rust-lang/rust/commit/220df5f3cffed318354880f16183b28f3d9f38c7"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "f1b1a5d67e0ae3359fd42d6f3758a46763d09cae", "filename": "ui_test/README.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04b66ce34282a3b510cbc6a1cdd28da44f9d33f3/ui_test%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/04b66ce34282a3b510cbc6a1cdd28da44f9d33f3/ui_test%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FREADME.md?ref=04b66ce34282a3b510cbc6a1cdd28da44f9d33f3", "patch": "@@ -23,12 +23,11 @@ In order to change how a single test is tested, you can add various `//@` commen\n Any other comments will be ignored, and all `//@` comments must be formatted precisely as\n their command specifies, or the test will fail without even being run.\n \n-* `//@ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n-    * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n-    * `XXX` can also be `on-host`, which will only run the test during cross compilation testing.\n-* `//@only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n-    * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n-    * `XXX` can also be `on-host`, which will not run the test during cross compilation testing\n+* `//@ignore-C` avoids running the test when condition `C` is met.\n+    * `C` can be `target-XXX`, which checks whether the target triple contains `XXX`.\n+    * `C` can also be one of `64bit`, `32bit` or `16bit`.\n+    * `C` can also be `on-host`, which will only run the test during cross compilation testing.\n+* `//@only-C` **only** runs the test when condition `C` is met. The conditions are the same as with `ignore`.\n * `//@stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n * `//@error-pattern: XXX` make sure the stderr output contains `XXX`\n * `//@revisions: XXX YYY` runs the test once for each space separated name in the list\n@@ -46,5 +45,5 @@ their command specifies, or the test will fail without even being run.\n \n ## Significant differences to compiletest-rs\n \n-* `ignore-*` and `only-*` opereate solely on the triple, instead of supporting things like `macos`\n+* `ignore-target-*` and `only-target-*` opereate solely on the triple, instead of supporting things like `macos`\n * only `//~` comments can be individualized per revision"}]}