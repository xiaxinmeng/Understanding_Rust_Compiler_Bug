{"sha": "a08c56295ad132c8f2153f19439462b726452e22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOGM1NjI5NWFkMTMyYzhmMjE1M2YxOTQzOTQ2MmI3MjY0NTJlMjI=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-30T23:56:27Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-22T01:23:39Z"}, "message": "Implement `./x.py fmt [--check]`.", "tree": {"sha": "83eb4d02a4c4e820a94c1351ab14594ac94e3859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83eb4d02a4c4e820a94c1351ab14594ac94e3859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08c56295ad132c8f2153f19439462b726452e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08c56295ad132c8f2153f19439462b726452e22", "html_url": "https://github.com/rust-lang/rust/commit/a08c56295ad132c8f2153f19439462b726452e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08c56295ad132c8f2153f19439462b726452e22/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a844dee7a095f34ead247fd38d9eb03686a722", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a844dee7a095f34ead247fd38d9eb03686a722", "html_url": "https://github.com/rust-lang/rust/commit/72a844dee7a095f34ead247fd38d9eb03686a722"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "bd0462fca6dfe51784b3fab95378d9946ead29d4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a08c56295ad132c8f2153f19439462b726452e22", "patch": "@@ -314,6 +314,7 @@ pub enum Kind {\n     Check,\n     Clippy,\n     Fix,\n+    Format,\n     Test,\n     Bench,\n     Dist,\n@@ -353,7 +354,7 @@ impl<'a> Builder<'a> {\n                 tool::Miri,\n                 native::Lld\n             ),\n-            Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n+            Kind::Check | Kind::Clippy | Kind::Fix | Kind::Format => describe!(\n                 check::Std,\n                 check::Rustc,\n                 check::Rustdoc\n@@ -514,7 +515,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n-            Subcommand::Clean { .. } => panic!(),\n+            Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n \n         let builder = Builder {"}, {"sha": "3e67734e690781d586aa543d16d84b01962e752d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a08c56295ad132c8f2153f19439462b726452e22", "patch": "@@ -5,6 +5,7 @@\n \n use std::collections::{HashMap, HashSet};\n use std::env;\n+use std::ffi::OsString;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process;\n@@ -149,6 +150,7 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+    pub initial_rustfmt: Option<PathBuf>,\n     pub out: PathBuf,\n }\n \n@@ -348,12 +350,16 @@ struct TomlTarget {\n impl Config {\n     fn path_from_python(var_key: &str) -> PathBuf {\n         match env::var_os(var_key) {\n-            // Do not trust paths from Python and normalize them slightly (#49785).\n-            Some(var_val) => Path::new(&var_val).components().collect(),\n+            Some(var_val) => Self::normalize_python_path(var_val),\n             _ => panic!(\"expected '{}' to be set\", var_key),\n         }\n     }\n \n+    /// Normalizes paths from Python slightly. We don't trust paths from Python (#49785).\n+    fn normalize_python_path(path: OsString) -> PathBuf {\n+        Path::new(&path).components().collect()\n+    }\n+\n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n@@ -380,6 +386,7 @@ impl Config {\n \n         config.initial_rustc = Config::path_from_python(\"RUSTC\");\n         config.initial_cargo = Config::path_from_python(\"CARGO\");\n+        config.initial_rustfmt = env::var_os(\"RUSTFMT\").map(Config::normalize_python_path);\n \n         config\n     }"}, {"sha": "b98e2c1bf24664f3add859f527018dcd932d417a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=a08c56295ad132c8f2153f19439462b726452e22", "patch": "@@ -53,6 +53,9 @@ pub enum Subcommand {\n     Fix {\n         paths: Vec<PathBuf>,\n     },\n+    Format {\n+        check: bool,\n+    },\n     Doc {\n         paths: Vec<PathBuf>,\n     },\n@@ -102,6 +105,7 @@ Subcommands:\n     check       Compile either the compiler or libraries, using cargo check\n     clippy      Run clippy\n     fix         Run cargo fix\n+    fmt         Run rustfmt\n     test        Build and run some test suites\n     bench       Build and run some benchmarks\n     doc         Build documentation\n@@ -160,6 +164,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n                 || (s == \"check\")\n                 || (s == \"clippy\")\n                 || (s == \"fix\")\n+                || (s == \"fmt\")\n                 || (s == \"test\")\n                 || (s == \"bench\")\n                 || (s == \"doc\")\n@@ -222,6 +227,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n             \"clean\" => {\n                 opts.optflag(\"\", \"all\", \"clean all build artifacts\");\n             }\n+            \"fmt\" => {\n+                opts.optflag(\"\", \"check\", \"check formatting instead of applying.\");\n+            }\n             _ => {}\n         };\n \n@@ -323,6 +331,17 @@ Arguments:\n         ./x.py fix src/libcore src/libproc_macro\",\n                 );\n             }\n+            \"fmt\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand optionally accepts a `--check` flag which succeeds if formatting is correct and\n+    fails if it is not. For example:\n+\n+        ./x.py fmt\n+        ./x.py fmt --check\",\n+                );\n+            }\n             \"test\" => {\n                 subcommand_help.push_str(\n                     \"\\n\n@@ -388,7 +407,7 @@ Arguments:\n \n             let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());\n             extra_help.push_str(maybe_rules_help.unwrap_or_default().as_str());\n-        } else if subcommand.as_str() != \"clean\" {\n+        } else if !(subcommand.as_str() == \"clean\" || subcommand.as_str() == \"fmt\") {\n             extra_help.push_str(\n                 format!(\n                     \"Run `./x.py {} -h -v` to see a list of available paths.\",\n@@ -439,6 +458,11 @@ Arguments:\n                     all: matches.opt_present(\"all\"),\n                 }\n             }\n+            \"fmt\" => {\n+                Subcommand::Format {\n+                    check: matches.opt_present(\"check\"),\n+                }\n+            }\n             \"dist\" => Subcommand::Dist { paths },\n             \"install\" => Subcommand::Install { paths },\n             _ => {"}, {"sha": "0c542594effebd7f71a05d119af9d4370c0aa835", "filename": "src/bootstrap/format.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=a08c56295ad132c8f2153f19439462b726452e22", "patch": "@@ -0,0 +1,28 @@\n+//! Runs rustfmt on the repository.\n+\n+use crate::{util, Build};\n+use std::process::Command;\n+\n+pub fn format(build: &Build, check: bool) {\n+    let target = &build.build;\n+    let rustfmt_path = build.config.initial_rustfmt.as_ref().unwrap_or_else(|| {\n+        eprintln!(\"./x.py fmt is not supported on this channel\");\n+        std::process::exit(1);\n+    }).clone();\n+    let cargo_fmt_path = rustfmt_path.with_file_name(util::exe(\"cargo-fmt\", &target));\n+    assert!(cargo_fmt_path.is_file(), \"{} not a file\", cargo_fmt_path.display());\n+\n+    let mut cmd = Command::new(&cargo_fmt_path);\n+    // cargo-fmt calls rustfmt as a bare command, so we need it to only find the correct one\n+    cmd.env(\"PATH\", cargo_fmt_path.parent().unwrap());\n+    cmd.current_dir(&build.src);\n+    cmd.arg(\"fmt\");\n+\n+    if check {\n+        cmd.arg(\"--\");\n+        cmd.arg(\"--check\");\n+    }\n+\n+    let status = cmd.status().expect(\"executing cargo-fmt\");\n+    assert!(status.success(), \"cargo-fmt errored with status {:?}\", status);\n+}"}, {"sha": "ff9a55afa295750e0bb892b7587cd748b4485904", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c56295ad132c8f2153f19439462b726452e22/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a08c56295ad132c8f2153f19439462b726452e22", "patch": "@@ -147,6 +147,7 @@ mod builder;\n mod cache;\n mod tool;\n mod toolstate;\n+mod format;\n \n #[cfg(windows)]\n mod job;\n@@ -421,6 +422,10 @@ impl Build {\n             job::setup(self);\n         }\n \n+        if let Subcommand::Format { check } = self.config.cmd {\n+            return format::format(self, check);\n+        }\n+\n         if let Subcommand::Clean { all } = self.config.cmd {\n             return clean::clean(self, all);\n         }"}]}