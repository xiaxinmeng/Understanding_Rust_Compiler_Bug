{"sha": "c65894cf1a3bc6b111305071942f77e8654a7a6a", "node_id": "C_kwDOAAsO6NoAKGM2NTg5NGNmMWEzYmM2YjExMTMwNTA3MTk0MmY3N2U4NjU0YTdhNmE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-07T18:00:19Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-07T18:00:19Z"}, "message": "Split out `wild_in_or_pats`", "tree": {"sha": "235a41dc13fd77e140964f9ae6fae5dbade5e40d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/235a41dc13fd77e140964f9ae6fae5dbade5e40d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65894cf1a3bc6b111305071942f77e8654a7a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65894cf1a3bc6b111305071942f77e8654a7a6a", "html_url": "https://github.com/rust-lang/rust/commit/c65894cf1a3bc6b111305071942f77e8654a7a6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65894cf1a3bc6b111305071942f77e8654a7a6a/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3af30dee07a82cd3fcec5732dc575a4571d392", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3af30dee07a82cd3fcec5732dc575a4571d392", "html_url": "https://github.com/rust-lang/rust/commit/aa3af30dee07a82cd3fcec5732dc575a4571d392"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "b5ee4561f06eceeb346ea5f648adf7357ddb9ea6", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c65894cf1a3bc6b111305071942f77e8654a7a6a/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65894cf1a3bc6b111305071942f77e8654a7a6a/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=c65894cf1a3bc6b111305071942f77e8654a7a6a", "patch": "@@ -1,6 +1,5 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{is_wild, meets_msrv, msrvs};\n-use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat, PatKind};\n+use clippy_utils::{meets_msrv, msrvs};\n+use rustc_hir::{Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -18,6 +17,7 @@ mod overlapping_arms;\n mod redundant_pattern_match;\n mod rest_pat_in_fully_bound_struct;\n mod single_match;\n+mod wild_in_or_pats;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -621,7 +621,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             match_wild_err_arm::check(cx, ex, arms);\n             match_wild_enum::check(cx, ex, arms);\n             match_as_ref::check(cx, ex, arms, expr);\n-            check_wild_in_or_pats(cx, arms);\n+            wild_in_or_pats::check(cx, arms);\n \n             if self.infallible_destructuring_match_linted {\n                 self.infallible_destructuring_match_linted = false;\n@@ -644,21 +644,3 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n     extract_msrv_attr!(LateContext);\n }\n-\n-fn check_wild_in_or_pats(cx: &LateContext<'_>, arms: &[Arm<'_>]) {\n-    for arm in arms {\n-        if let PatKind::Or(fields) = arm.pat.kind {\n-            // look for multiple fields in this arm that contains at least one Wild pattern\n-            if fields.len() > 1 && fields.iter().any(is_wild) {\n-                span_lint_and_help(\n-                    cx,\n-                    WILDCARD_IN_OR_PATTERNS,\n-                    arm.pat.span,\n-                    \"wildcard pattern covers any other pattern as it will match anyway\",\n-                    None,\n-                    \"consider handling `_` separately\",\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "459513e65bfad1b1aeb7e503a06e9c6949c6f0c3", "filename": "clippy_lints/src/matches/wild_in_or_pats.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c65894cf1a3bc6b111305071942f77e8654a7a6a/clippy_lints%2Fsrc%2Fmatches%2Fwild_in_or_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65894cf1a3bc6b111305071942f77e8654a7a6a/clippy_lints%2Fsrc%2Fmatches%2Fwild_in_or_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fwild_in_or_pats.rs?ref=c65894cf1a3bc6b111305071942f77e8654a7a6a", "patch": "@@ -0,0 +1,24 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_wild;\n+use rustc_hir::{Arm, PatKind};\n+use rustc_lint::LateContext;\n+\n+use super::WILDCARD_IN_OR_PATTERNS;\n+\n+pub(crate) fn check(cx: &LateContext<'_>, arms: &[Arm<'_>]) {\n+    for arm in arms {\n+        if let PatKind::Or(fields) = arm.pat.kind {\n+            // look for multiple fields in this arm that contains at least one Wild pattern\n+            if fields.len() > 1 && fields.iter().any(is_wild) {\n+                span_lint_and_help(\n+                    cx,\n+                    WILDCARD_IN_OR_PATTERNS,\n+                    arm.pat.span,\n+                    \"wildcard pattern covers any other pattern as it will match anyway\",\n+                    None,\n+                    \"consider handling `_` separately\",\n+                );\n+            }\n+        }\n+    }\n+}"}]}