{"sha": "215cd36e1cff1806429806cb5be81f6d1a5f98b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWNkMzZlMWNmZjE4MDY0Mjk4MDZjYjViZTgxZjZkMWE1Zjk4YjA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-09T09:23:40Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T02:14:32Z"}, "message": "Remove unused code from remaining compiler crates", "tree": {"sha": "9c6b9c881228f080c9f932d2561d98a06c6c394b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6b9c881228f080c9f932d2561d98a06c6c394b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215cd36e1cff1806429806cb5be81f6d1a5f98b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215cd36e1cff1806429806cb5be81f6d1a5f98b0", "html_url": "https://github.com/rust-lang/rust/commit/215cd36e1cff1806429806cb5be81f6d1a5f98b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215cd36e1cff1806429806cb5be81f6d1a5f98b0/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b3923ad377e79a0517ec15a672e3f8f90b10b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/58b3923ad377e79a0517ec15a672e3f8f90b10b4", "html_url": "https://github.com/rust-lang/rust/commit/58b3923ad377e79a0517ec15a672e3f8f90b10b4"}], "stats": {"total": 221, "additions": 0, "deletions": 221}, "files": [{"sha": "cc562bc1e4d914be4eb6a707a6eae9233ea5b4a0", "filename": "compiler/rustc_data_structures/src/work_queue.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_data_structures%2Fsrc%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_data_structures%2Fsrc%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fwork_queue.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -14,12 +14,6 @@ pub struct WorkQueue<T: Idx> {\n }\n \n impl<T: Idx> WorkQueue<T> {\n-    /// Creates a new work queue with all the elements from (0..len).\n-    #[inline]\n-    pub fn with_all(len: usize) -> Self {\n-        WorkQueue { deque: (0..len).map(T::new).collect(), set: BitSet::new_filled(len) }\n-    }\n-\n     /// Creates a new work queue that starts empty, where elements range from (0..len).\n     #[inline]\n     pub fn with_none(len: usize) -> Self {"}, {"sha": "91bfc6296b1c7413c3bad5e98b6b7d4218faec1e", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -121,11 +121,6 @@ impl Diagnostic {\n         self.level == Level::Cancelled\n     }\n \n-    /// Set the sorting span.\n-    pub fn set_sort_span(&mut self, sp: Span) {\n-        self.sort_span = sp;\n-    }\n-\n     /// Adds a span/label to be included in the resulting snippet.\n     ///\n     /// This is pushed onto the [`MultiSpan`] that was created when the diagnostic\n@@ -535,14 +530,6 @@ impl Diagnostic {\n         &self.message\n     }\n \n-    /// Used by a lint. Copies over all details *but* the \"main\n-    /// message\".\n-    pub fn copy_details_not_message(&mut self, from: &Diagnostic) {\n-        self.span = from.span.clone();\n-        self.code = from.code.clone();\n-        self.children.extend(from.children.iter().cloned())\n-    }\n-\n     /// Convenience function for internal use, clients should use one of the\n     /// public methods above.\n     pub fn sub("}, {"sha": "b5155f8e910d7049654d6a2273ffdbca25a8c98f", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -510,8 +510,6 @@ impl Emitter for SilentEmitter {\n     fn emit_diagnostic(&mut self, _: &Diagnostic) {}\n }\n \n-/// Maximum number of lines we will print for each error; arbitrary.\n-pub const MAX_HIGHLIGHT_LINES: usize = 6;\n /// Maximum number of lines we will print for a multiline suggestion; arbitrary.\n ///\n /// This should be replaced with a more involved mechanism to output multiline suggestions that"}, {"sha": "b0e43a260e91de82cd5aaa6cbeb8f8f9f0bef87c", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -148,17 +148,6 @@ impl Annotatable {\n         }\n     }\n \n-    pub fn map_item_or<F, G>(self, mut f: F, mut or: G) -> Annotatable\n-    where\n-        F: FnMut(P<ast::Item>) -> P<ast::Item>,\n-        G: FnMut(Annotatable) -> Annotatable,\n-    {\n-        match self {\n-            Annotatable::Item(i) => Annotatable::Item(f(i)),\n-            _ => or(self),\n-        }\n-    }\n-\n     pub fn expect_trait_item(self) -> P<ast::AssocItem> {\n         match self {\n             Annotatable::TraitItem(i) => i,\n@@ -1052,9 +1041,6 @@ impl<'a> ExtCtxt<'a> {\n             .chain(components.iter().map(|&s| Ident::with_dummy_span(s)))\n             .collect()\n     }\n-    pub fn name_of(&self, st: &str) -> Symbol {\n-        Symbol::intern(st)\n-    }\n \n     pub fn check_unused_macros(&mut self) {\n         self.resolver.check_unused_macros();"}, {"sha": "1c9bfb902d61a95ae7da7e33e3dc123352d9b83a", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -139,24 +139,6 @@ impl<'a> ExtCtxt<'a> {\n         ast::Lifetime { id: ast::DUMMY_NODE_ID, ident: ident.with_span_pos(span) }\n     }\n \n-    pub fn lifetime_def(\n-        &self,\n-        span: Span,\n-        ident: Ident,\n-        attrs: Vec<ast::Attribute>,\n-        bounds: ast::GenericBounds,\n-    ) -> ast::GenericParam {\n-        let lifetime = self.lifetime(span, ident);\n-        ast::GenericParam {\n-            ident: lifetime.ident,\n-            id: lifetime.id,\n-            attrs: attrs.into(),\n-            bounds,\n-            kind: ast::GenericParamKind::Lifetime,\n-            is_placeholder: false,\n-        }\n-    }\n-\n     pub fn stmt_expr(&self, expr: P<ast::Expr>) -> ast::Stmt {\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n@@ -465,24 +447,6 @@ impl<'a> ExtCtxt<'a> {\n         self.pat_tuple_struct(span, path, vec![pat])\n     }\n \n-    pub fn pat_none(&self, span: Span) -> P<ast::Pat> {\n-        let some = self.std_path(&[sym::option, sym::Option, sym::None]);\n-        let path = self.path_global(span, some);\n-        self.pat_path(span, path)\n-    }\n-\n-    pub fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = self.std_path(&[sym::result, sym::Result, sym::Ok]);\n-        let path = self.path_global(span, some);\n-        self.pat_tuple_struct(span, path, vec![pat])\n-    }\n-\n-    pub fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = self.std_path(&[sym::result, sym::Result, sym::Err]);\n-        let path = self.path_global(span, some);\n-        self.pat_tuple_struct(span, path, vec![pat])\n-    }\n-\n     pub fn arm(&self, span: Span, pat: P<ast::Pat>, expr: P<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n             attrs: vec![],\n@@ -514,26 +478,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(span, ast::ExprKind::If(cond, self.block_expr(then), els))\n     }\n \n-    pub fn lambda_fn_decl(\n-        &self,\n-        span: Span,\n-        fn_decl: P<ast::FnDecl>,\n-        body: P<ast::Expr>,\n-        fn_decl_span: Span,\n-    ) -> P<ast::Expr> {\n-        self.expr(\n-            span,\n-            ast::ExprKind::Closure(\n-                ast::CaptureBy::Ref,\n-                ast::Async::No,\n-                ast::Movability::Movable,\n-                fn_decl,\n-                body,\n-                fn_decl_span,\n-            ),\n-        )\n-    }\n-\n     pub fn lambda(&self, span: Span, ids: Vec<Ident>, body: P<ast::Expr>) -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.param(span, *id, self.ty(span, ast::TyKind::Infer))).collect(),\n@@ -610,47 +554,6 @@ impl<'a> ExtCtxt<'a> {\n         })\n     }\n \n-    pub fn variant(&self, span: Span, ident: Ident, tys: Vec<P<ast::Ty>>) -> ast::Variant {\n-        let vis_span = span.shrink_to_lo();\n-        let fields: Vec<_> = tys\n-            .into_iter()\n-            .map(|ty| ast::StructField {\n-                span: ty.span,\n-                ty,\n-                ident: None,\n-                vis: ast::Visibility {\n-                    span: vis_span,\n-                    kind: ast::VisibilityKind::Inherited,\n-                    tokens: None,\n-                },\n-                attrs: Vec::new(),\n-                id: ast::DUMMY_NODE_ID,\n-                is_placeholder: false,\n-            })\n-            .collect();\n-\n-        let vdata = if fields.is_empty() {\n-            ast::VariantData::Unit(ast::DUMMY_NODE_ID)\n-        } else {\n-            ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID)\n-        };\n-\n-        ast::Variant {\n-            attrs: Vec::new(),\n-            data: vdata,\n-            disr_expr: None,\n-            id: ast::DUMMY_NODE_ID,\n-            ident,\n-            vis: ast::Visibility {\n-                span: vis_span,\n-                kind: ast::VisibilityKind::Inherited,\n-                tokens: None,\n-            },\n-            span,\n-            is_placeholder: false,\n-        }\n-    }\n-\n     pub fn item_static(\n         &self,\n         span: Span,"}, {"sha": "7742961e65dbb6198fa9d69a0deed5d8d0e71611", "filename": "compiler/rustc_fs_util/src/lib.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -75,33 +75,6 @@ pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<Li\n     }\n }\n \n-#[derive(Debug)]\n-pub enum RenameOrCopyRemove {\n-    Rename,\n-    CopyRemove,\n-}\n-\n-/// Rename `p` into `q`, preferring to use `rename` if possible.\n-/// If `rename` fails (rename may fail for reasons such as crossing\n-/// filesystem), fallback to copy & remove\n-pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(\n-    p: P,\n-    q: Q,\n-) -> io::Result<RenameOrCopyRemove> {\n-    let p = p.as_ref();\n-    let q = q.as_ref();\n-    match fs::rename(p, q) {\n-        Ok(()) => Ok(RenameOrCopyRemove::Rename),\n-        Err(_) => match fs::copy(p, q) {\n-            Ok(_) => {\n-                fs::remove_file(p)?;\n-                Ok(RenameOrCopyRemove::CopyRemove)\n-            }\n-            Err(e) => Err(e),\n-        },\n-    }\n-}\n-\n #[cfg(unix)]\n pub fn path_to_c_string(p: &Path) -> CString {\n     use std::ffi::OsStr;"}, {"sha": "5a5efce37e560bb45fea29bfadf92ee28c1ef702", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -44,19 +44,13 @@ pub trait PpAnn {\n     fn nested(&self, _state: &mut State<'_>, _nested: Nested) {}\n     fn pre(&self, _state: &mut State<'_>, _node: AnnNode<'_>) {}\n     fn post(&self, _state: &mut State<'_>, _node: AnnNode<'_>) {}\n-    fn try_fetch_item(&self, _: hir::HirId) -> Option<&hir::Item<'_>> {\n-        None\n-    }\n }\n \n pub struct NoAnn;\n impl PpAnn for NoAnn {}\n pub const NO_ANN: &dyn PpAnn = &NoAnn;\n \n impl PpAnn for hir::Crate<'_> {\n-    fn try_fetch_item(&self, item: hir::HirId) -> Option<&hir::Item<'_>> {\n-        Some(self.item(item))\n-    }\n     fn nested(&self, state: &mut State<'_>, nested: Nested) {\n         match nested {\n             Nested::Item(id) => state.print_item(self.item(id.id)),"}, {"sha": "48270eb59a0500a9bd4945795549902cf92fa624", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -711,10 +711,6 @@ impl<'tcx> LateContext<'tcx> {\n         }\n     }\n \n-    pub fn current_lint_root(&self) -> hir::HirId {\n-        self.last_node_with_lint_attrs\n-    }\n-\n     /// Check if a `DefId`'s path matches the given absolute type path usage.\n     ///\n     /// Anonymous scopes such as `extern` imports are matched with `kw::Invalid`;"}, {"sha": "b01a55b48da667a6f4b4e97e772182e2fe251fdb", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -313,27 +313,6 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n         Ok(ty)\n     }\n \n-    fn cached_predicate_for_shorthand<F>(\n-        &mut self,\n-        shorthand: usize,\n-        or_insert_with: F,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error>\n-    where\n-        F: FnOnce(&mut Self) -> Result<ty::Predicate<'tcx>, Self::Error>,\n-    {\n-        let tcx = self.tcx();\n-\n-        let key = ty::CReaderCacheKey { cnum: self.cdata().cnum, pos: shorthand };\n-\n-        if let Some(&pred) = tcx.pred_rcache.borrow().get(&key) {\n-            return Ok(pred);\n-        }\n-\n-        let pred = or_insert_with(self)?;\n-        tcx.pred_rcache.borrow_mut().insert(key, pred);\n-        Ok(pred)\n-    }\n-\n     fn with_position<F, R>(&mut self, pos: usize, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,"}, {"sha": "1b7264f86a2d159348da7d67d0e24c944ef59f56", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -62,15 +62,6 @@ where\n         let blocks = mir::traversal::reachable(body);\n         visit_results(body, blocks.map(|(bb, _)| bb), self, vis)\n     }\n-\n-    pub fn visit_in_rpo_with(\n-        &self,\n-        body: &'mir mir::Body<'tcx>,\n-        vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = A::Domain>,\n-    ) {\n-        let blocks = mir::traversal::reverse_postorder(body);\n-        visit_results(body, blocks.map(|(bb, _)| bb), self, vis)\n-    }\n }\n \n /// A solver for dataflow problems."}, {"sha": "e952d5d7bfc20a36518e2fbedd70ebcb8e0e1017", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -114,16 +114,6 @@ pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path, sp: Option<Spa\n     source_file_to_parser(sess, file_to_source_file(sess, path, sp))\n }\n \n-/// Creates a new parser, returning buffered diagnostics if the file doesn't exist,\n-/// or from lexing the initial token stream.\n-pub fn maybe_new_parser_from_file<'a>(\n-    sess: &'a ParseSess,\n-    path: &Path,\n-) -> Result<Parser<'a>, Vec<Diagnostic>> {\n-    let file = try_file_to_source_file(sess, path, None).map_err(|db| vec![db])?;\n-    maybe_source_file_to_parser(sess, file)\n-}\n-\n /// Given a `source_file` and config, returns a parser.\n fn source_file_to_parser(sess: &ParseSess, source_file: Lrc<SourceFile>) -> Parser<'_> {\n     panictry_buffer!(&sess.span_diagnostic, maybe_source_file_to_parser(sess, source_file))\n@@ -146,12 +136,6 @@ fn maybe_source_file_to_parser(\n     Ok(parser)\n }\n \n-// Must preserve old name for now, because `quote!` from the *existing*\n-// compiler expands into it.\n-pub fn new_parser_from_tts(sess: &ParseSess, tts: Vec<TokenTree>) -> Parser<'_> {\n-    stream_to_parser(sess, tts.into_iter().collect(), crate::MACRO_ARGUMENTS)\n-}\n-\n // Base abstractions\n \n /// Given a session and a path and an optional span (for error reporting),"}, {"sha": "9143d0a0f5b1e0889eae92b45895828870c03372", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -1586,5 +1586,3 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_warn(msg).emit();\n }\n-\n-pub type CompileResult = Result<(), ErrorReported>;"}, {"sha": "0308e9bcdeba3942de61f45a506f15592c9ef99e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215cd36e1cff1806429806cb5be81f6d1a5f98b0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=215cd36e1cff1806429806cb5be81f6d1a5f98b0", "patch": "@@ -290,10 +290,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn closure_typer(&self) -> &'cx InferCtxt<'cx, 'tcx> {\n-        self.infcx\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n     // Selection\n     //"}]}