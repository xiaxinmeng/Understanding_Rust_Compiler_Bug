{"sha": "8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOTZkYjM0MTdmZGFiYjFiYWQ3YTk5MTllYThhZTFkYjI1Mjk2ZjE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-04T16:17:22Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-04T16:17:22Z"}, "message": "Favor types for Record in name resolution", "tree": {"sha": "66e1aa8c88596c9fffb97d6065ba11478248e189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e1aa8c88596c9fffb97d6065ba11478248e189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "html_url": "https://github.com/rust-lang/rust/commit/8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "html_url": "https://github.com/rust-lang/rust/commit/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "49f5420d14d5d075e1dd0e8ac4692c1304dfd0a4", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "patch": "@@ -18,7 +18,7 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    adt::StructKind,\n+    adt::{self, StructKind},\n     body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n@@ -575,9 +575,16 @@ impl ExprCollector<'_> {\n             self.body.item_scope.define_def(def);\n             if let Some(name) = name {\n                 let vis = crate::visibility::Visibility::Public; // FIXME determine correctly\n-                self.body\n-                    .item_scope\n-                    .push_res(name.as_name(), crate::per_ns::PerNs::from_def(def, vis));\n+                let favor_types = match def {\n+                    ModuleDefId::AdtId(AdtId::StructId(s)) => {\n+                        self.db.struct_data(s).variant_data.kind() == adt::StructKind::Record\n+                    }\n+                    _ => false,\n+                };\n+                self.body.item_scope.push_res(\n+                    name.as_name(),\n+                    crate::per_ns::PerNs::from_def(def, vis, favor_types),\n+                );\n             }\n         }\n     }"}, {"sha": "6d8d1f8a3852079bbf07568c2be48fbd96aa066e", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "patch": "@@ -151,13 +151,20 @@ impl ItemScope {\n }\n \n impl PerNs {\n-    pub(crate) fn from_def(def: ModuleDefId, v: Visibility) -> PerNs {\n+    pub(crate) fn from_def(def: ModuleDefId, v: Visibility, favor_types: bool) -> PerNs {\n         match def {\n             ModuleDefId::ModuleId(_) => PerNs::types(def, v),\n             ModuleDefId::FunctionId(_) => PerNs::values(def, v),\n             ModuleDefId::AdtId(adt) => match adt {\n-                AdtId::StructId(_) | AdtId::UnionId(_) => PerNs::both(def, def, v),\n+                AdtId::UnionId(_) => PerNs::both(def, def, v),\n                 AdtId::EnumId(_) => PerNs::types(def, v),\n+                AdtId::StructId(_) => {\n+                    if favor_types {\n+                        PerNs::types(def, v)\n+                    } else {\n+                        PerNs::both(def, def, v)\n+                    }\n+                }\n             },\n             ModuleDefId::EnumVariantId(_) => PerNs::both(def, def, v),\n             ModuleDefId::ConstId(_) | ModuleDefId::StaticId(_) => PerNs::values(def, v),"}, {"sha": "49b33ca94239422bb0b9a1b9d97bc77c15e02d6a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "patch": "@@ -830,7 +830,7 @@ impl ModCollector<'_, '_> {\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n         let def: ModuleDefId = module.into();\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n-        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis);\n+        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis, false))], vis);\n         res\n     }\n \n@@ -844,14 +844,17 @@ impl ModCollector<'_, '_> {\n         let name = def.name.clone();\n         let container = ContainerId::ModuleId(module);\n         let vis = &def.visibility;\n+        let mut favor_types = false;\n+\n         let def: ModuleDefId = match def.kind {\n             raw::DefKind::Function(ast_id) => FunctionLoc {\n                 container: container.into(),\n                 ast_id: AstId::new(self.file_id, ast_id),\n             }\n             .intern(self.def_collector.db)\n             .into(),\n-            raw::DefKind::Struct(ast_id) => {\n+            raw::DefKind::Struct(ast_id, mode) => {\n+                favor_types = mode == raw::StructDefKind::Record;\n                 StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db)\n                     .into()\n@@ -894,7 +897,11 @@ impl ModCollector<'_, '_> {\n             .def_map\n             .resolve_visibility(self.def_collector.db, self.module_id, vis)\n             .unwrap_or(Visibility::Public);\n-        self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis)\n+        self.def_collector.update(\n+            self.module_id,\n+            &[(name, PerNs::from_def(def, vis, favor_types))],\n+            vis,\n+        )\n     }\n \n     fn collect_derives(&mut self, attrs: &Attrs, def: &raw::DefData) {"}, {"sha": "f2716a2950b1fbf2075189fc16134996eac0660f", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d96db3417fdabb1bad7a9919ea8ae1db25296f1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=8d96db3417fdabb1bad7a9919ea8ae1db25296f1", "patch": "@@ -155,10 +155,17 @@ pub(super) struct DefData {\n     pub(super) visibility: RawVisibility,\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub(super) enum StructDefKind {\n+    Record,\n+    Tuple,\n+    Unit,\n+}\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n-    Struct(FileAstId<ast::StructDef>),\n+    Struct(FileAstId<ast::StructDef>, StructDefKind),\n     Union(FileAstId<ast::UnionDef>),\n     Enum(FileAstId<ast::EnumDef>),\n     Const(FileAstId<ast::ConstDef>),\n@@ -171,7 +178,7 @@ impl DefKind {\n     pub fn ast_id(&self) -> FileAstId<ast::ModuleItem> {\n         match self {\n             DefKind::Function(it) => it.upcast(),\n-            DefKind::Struct(it) => it.upcast(),\n+            DefKind::Struct(it, _) => it.upcast(),\n             DefKind::Union(it) => it.upcast(),\n             DefKind::Enum(it) => it.upcast(),\n             DefKind::Const(it) => it.upcast(),\n@@ -236,9 +243,14 @@ impl RawItemsCollector {\n                 return;\n             }\n             ast::ModuleItem::StructDef(it) => {\n+                let kind = match it.kind() {\n+                    ast::StructKind::Record(_) => StructDefKind::Record,\n+                    ast::StructKind::Tuple(_) => StructDefKind::Tuple,\n+                    ast::StructKind::Unit => StructDefKind::Unit,\n+                };\n                 let id = self.source_ast_id_map.ast_id(&it);\n                 let name = it.name();\n-                (DefKind::Struct(id), name)\n+                (DefKind::Struct(id, kind), name)\n             }\n             ast::ModuleItem::UnionDef(it) => {\n                 let id = self.source_ast_id_map.ast_id(&it);"}]}