{"sha": "d2c53caee218296482c11a56354688a9a7e9636f", "node_id": "C_kwDOAAsO6NoAKGQyYzUzY2FlZTIxODI5NjQ4MmMxMWE1NjM1NDY4OGE5YTdlOTYzNmY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-30T00:30:25Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-07T02:41:01Z"}, "message": "Move `Queries::new` out of the macro", "tree": {"sha": "138ee3add6e72f78a98765e868bbd66b3cbc8e79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138ee3add6e72f78a98765e868bbd66b3cbc8e79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c53caee218296482c11a56354688a9a7e9636f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c53caee218296482c11a56354688a9a7e9636f", "html_url": "https://github.com/rust-lang/rust/commit/d2c53caee218296482c11a56354688a9a7e9636f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c53caee218296482c11a56354688a9a7e9636f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699bfa882b34a73b333e684e96984c1c565d2eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/699bfa882b34a73b333e684e96984c1c565d2eff", "html_url": "https://github.com/rust-lang/rust/commit/699bfa882b34a73b333e684e96984c1c565d2eff"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "9c0fb8265cff71da9557cdad785c662156f79fc2", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c53caee218296482c11a56354688a9a7e9636f/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c53caee218296482c11a56354688a9a7e9636f/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=d2c53caee218296482c11a56354688a9a7e9636f", "patch": "@@ -48,7 +48,7 @@ cfg_if! {\n         /// the native atomic types.\n         /// You should use this type through the `AtomicU64`, `AtomicUsize`, etc, type aliases\n         /// as it's not intended to be used separately.\n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct Atomic<T: Copy>(Cell<T>);\n \n         impl<T: Copy> Atomic<T> {"}, {"sha": "f8e165a1fd509c2bf8f2229cad74170317339151", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d2c53caee218296482c11a56354688a9a7e9636f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c53caee218296482c11a56354688a9a7e9636f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=d2c53caee218296482c11a56354688a9a7e9636f", "patch": "@@ -5,7 +5,7 @@\n use crate::keys::Key;\n use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::Lock;\n+use rustc_data_structures::sync::{AtomicU64, Lock};\n use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{\n     self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n@@ -501,9 +501,28 @@ macro_rules! define_queries {\n     }\n }\n \n+use crate::{ExternProviders, OnDiskCache, Providers};\n+\n+impl<'tcx> Queries<'tcx> {\n+    pub fn new(\n+        local_providers: Providers,\n+        extern_providers: ExternProviders,\n+        on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    ) -> Self {\n+        Queries {\n+            local_providers: Box::new(local_providers),\n+            extern_providers: Box::new(extern_providers),\n+            on_disk_cache,\n+            jobs: AtomicU64::new(1),\n+            ..Queries::default()\n+        }\n+    }\n+}\n+\n macro_rules! define_queries_struct {\n     (\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n+        #[derive(Default)]\n         pub struct Queries<'tcx> {\n             local_providers: Box<Providers>,\n             extern_providers: Box<ExternProviders>,\n@@ -516,20 +535,6 @@ macro_rules! define_queries_struct {\n         }\n \n         impl<'tcx> Queries<'tcx> {\n-            pub fn new(\n-                local_providers: Providers,\n-                extern_providers: ExternProviders,\n-                on_disk_cache: Option<OnDiskCache<'tcx>>,\n-            ) -> Self {\n-                Queries {\n-                    local_providers: Box::new(local_providers),\n-                    extern_providers: Box::new(extern_providers),\n-                    on_disk_cache,\n-                    jobs: AtomicU64::new(1),\n-                    $($name: Default::default()),*\n-                }\n-            }\n-\n             pub(crate) fn try_collect_active_jobs(\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,"}]}