{"sha": "e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTFjNWM5NmFkMTA4ODhmOTgxZjUzZTNlODFmZTQ1YTlkMGMyYjk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-17T03:36:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-17T03:36:07Z"}, "message": "Encode both private and public class fields in metadata\n\nThis is necessary to calculate the correct offsets for field references.\n\nSimple cross-crate class tests (still with fields only) now pass.", "tree": {"sha": "f0bd9c6a06752331c0c93db3de48add087335081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0bd9c6a06752331c0c93db3de48add087335081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "html_url": "https://github.com/rust-lang/rust/commit/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16dd6c4756c0bd322e0d5335181e9acb8d8076f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/16dd6c4756c0bd322e0d5335181e9acb8d8076f0", "html_url": "https://github.com/rust-lang/rust/commit/16dd6c4756c0bd322e0d5335181e9acb8d8076f0"}], "stats": {"total": 32, "additions": 8, "deletions": 24}, "files": [{"sha": "1a3f6123d577116757b5a370b6d95647bb1fbe1e", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "patch": "@@ -405,12 +405,8 @@ fn get_iface_methods(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     @result\n }\n \n-/*\n-  FIXME\n-  This is not working. metadata is broken -- fields get encoded correctly,\n-  but not decoded. look at this code, see what it's actually writing out\n-  also see what \"data\" is\n- */\n+/* Take a node ID for a class, return a vector of the class's\n+ member types */\n fn get_class_items(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     -> [@ty::class_item_ty] {\n     let data = cdata.data;"}, {"sha": "4135d738b2f0c1acac651263bfc076cc8cf4f99c", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "patch": "@@ -358,9 +358,9 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n     encode_name(ebml_w, name);\n \n     for ci in items {\n-      alt ci.node.privacy {\n-        pub {\n-            ebml_w.start_tag(tag_items_class_member); // ???\n+            /* We encode both private and public fields -- need to include\n+             private fields to get the offsets right */\n+            ebml_w.start_tag(tag_items_class_member);\n             alt ci.node.decl {\n                instance_var(nm, _, _, id) {\n                    #debug(\"encode_info_for_class: doing %s %d\", nm, id);\n@@ -383,11 +383,6 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                }\n             }\n             ebml_w.end_tag();\n-        }\n-        priv {\n-            /* don't export it, then! */\n-        }\n-      }\n     }\n }\n "}, {"sha": "93c291fa48b10d16e66911b39f404e36847c809d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "patch": "@@ -4128,7 +4128,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         // Register a type for obj\n         smallintmap::insert(*ccx.tcx.node_types,\n                             rslt_loc_.id as uint, rslt_ty);\n-        // Create the decl statement that initializers obj\n+        // Create the decl statement that initializes obj\n         let rslt_loc : @ast::local =\n             @{node: rslt_loc_, span: ctor.node.body.span};\n         let rslt_decl_ : ast::decl_ = ast::decl_local([rslt_loc]);"}, {"sha": "111efbbdae8513c8b4b2e0e4bcaafa3452b4fc97", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "patch": "@@ -2437,11 +2437,7 @@ fn lookup_item_type(cx: ctxt, did: ast::def_id) -> ty_param_bounds_and_ty {\n // Look up the list of item types for a given class\n // Fails if the id is not bound to a class.\n fn lookup_class_item_tys(cx: ctxt, did: ast::def_id) -> [@class_item_ty] {\n-    /*\n-      TODO: Check whether this is a local id or not; use csearch / tcache\n-      if it's external\n-     */\n-    if did.crate == ast::local_crate {\n+  if did.crate == ast::local_crate {\n     alt cx.items.find(did.node) {\n        some(ast_map::node_item(i,_)) {\n          alt i.node {\n@@ -2454,7 +2450,7 @@ fn lookup_class_item_tys(cx: ctxt, did: ast::def_id) -> [@class_item_ty] {\n        _ { cx.sess.bug(\"class ID not bound to an item\"); }\n     }\n         }\n-    else {\n+  else {\n         ret csearch::get_class_items(cx, did);\n     }\n }"}, {"sha": "a6ccdd922058de8e8c3a9cd17a5fbddefe13973a", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n // xfail-fast\n // aux-build:cci_class.rs\n use cci_class;"}, {"sha": "3b4df149fa5839fcb9e4f202e8a1d5bb9ad9eae1", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=e3a1c5c96ad10888f981f53e3e81fe45a9d0c2b9", "patch": "@@ -1,5 +1,3 @@\n-// xfail-test FIXME: Needs metadata encoding\n-\n class cat {\n   priv {\n     let mutable meows : uint;"}]}