{"sha": "56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZjRkMTgzMWE2NWI5NzM5ZDM4YzI3NTRmNjViNjQxYjRlMGQ2Yjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-17T13:03:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-17T13:04:38Z"}, "message": "Link lifetimes in `let` patterns just as we do for `match` patterns", "tree": {"sha": "c6de0d7b6b7b794a96b4e32b68151bdc361b9d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6de0d7b6b7b794a96b4e32b68151bdc361b9d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "html_url": "https://github.com/rust-lang/rust/commit/56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c916c58e8c978554415933773f0a105dee754d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c916c58e8c978554415933773f0a105dee754d3", "html_url": "https://github.com/rust-lang/rust/commit/0c916c58e8c978554415933773f0a105dee754d3"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "9a4869fb6d1d02ce80b957254594e9aed1435d72", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "patch": "@@ -67,6 +67,9 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n \n     fn check(&self, cmt: mc::cmt, discr_scope: Option<ast::NodeId>) -> R {\n         //! Main routine. Walks down `cmt` until we find the \"guarantor\".\n+        debug!(\"guarantee_lifetime.check(cmt={}, loan_region={})\",\n+               cmt.repr(self.bccx.tcx),\n+               self.loan_region.repr(self.bccx.tcx));\n \n         match cmt.cat {\n             mc::cat_rvalue(..) |"}, {"sha": "c6e43bf968e9b764568f54593ab98f11fe30b228", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "patch": "@@ -213,6 +213,7 @@ fn visit_arm(rcx: &mut Rcx, arm: &ast::Arm) {\n fn visit_local(rcx: &mut Rcx, l: &ast::Local) {\n     // see above\n     constrain_bindings_in_pat(l.pat, rcx);\n+    guarantor::for_local(rcx, l);\n     visit::walk_local(rcx, l, ());\n }\n \n@@ -828,6 +829,30 @@ pub mod guarantor {\n         }\n     }\n \n+    pub fn for_local(rcx: &mut Rcx, local: &ast::Local) {\n+        /*!\n+         * Link the lifetimes of any ref bindings in a let\n+         * pattern to the lifetimes in the initializer.\n+         *\n+         * For example, given something like this:\n+         *\n+         *    let &Foo(ref x) = ...;\n+         *\n+         * this would ensure that the lifetime 'a of the\n+         * region pointer being matched must be >= the lifetime\n+         * of the ref binding.\n+         */\n+\n+        debug!(\"regionck::for_match()\");\n+        let init_expr = match local.init {\n+            None => { return; }\n+            Some(e) => e\n+        };\n+        let init_guarantor = guarantor(rcx, init_expr);\n+        debug!(\"init_guarantor={}\", init_guarantor.repr(rcx.tcx()));\n+        link_ref_bindings_in_pat(rcx, local.pat, init_guarantor);\n+    }\n+\n     pub fn for_autoref(rcx: &mut Rcx,\n                        expr: &ast::Expr,\n                        autoderefs: uint,"}, {"sha": "fa84b91e43df10a4cfa3686a2c97a56d25f62951", "filename": "src/test/compile-fail/borrowck-borrow-from-temporary.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs?ref=56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test lifetimes are linked properly when we take reference\n+// to interior.\n+\n+struct Foo(int);\n+\n+fn foo() -> &int {\n+    let &Foo(ref x) = &Foo(3); //~ ERROR borrowed value does not live long enough\n+    x\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "0d415a85172b6613fc161fbe0bfc930a885813d4", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "patch": "@@ -196,13 +196,13 @@ fn main() {\n     let Unit(ii) = Unit(51);\n \n     // univariant enum with ref      binding\n-    let Unit(ref jj) = Unit(52);\n+    let &Unit(ref jj) = &Unit(52);\n \n     // tuple struct\n-    let TupleStruct(kk, ll) = TupleStruct(53.0, 54);\n+    let &TupleStruct(kk, ll) = &TupleStruct(53.0, 54);\n \n     // tuple struct with ref binding\n-    let TupleStruct(mm, ref nn) = TupleStruct(55.0, 56);\n+    let &TupleStruct(mm, ref nn) = &TupleStruct(55.0, 56);\n \n     zzz();\n }"}, {"sha": "e065146c7a398cc5551a7afdf8c720e6bcf5e501", "filename": "src/test/run-pass/regions-dependent-let-ref.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Ftest%2Frun-pass%2Fregions-dependent-let-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56f4d1831a65b9739d38c2754f65b641b4e0d6b8/src%2Ftest%2Frun-pass%2Fregions-dependent-let-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-let-ref.rs?ref=56f4d1831a65b9739d38c2754f65b641b4e0d6b8", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test lifetimes are linked properly when we take reference\n+// to interior.\n+\n+struct Foo(int);\n+pub fn main() {\n+    // Here the lifetime of the `&` should be at least the\n+    // block, since a ref binding is created to the interior.\n+    let &Foo(ref _x) = &Foo(3);\n+}"}]}