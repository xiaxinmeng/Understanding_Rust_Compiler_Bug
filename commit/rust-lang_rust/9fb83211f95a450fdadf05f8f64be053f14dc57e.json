{"sha": "9fb83211f95a450fdadf05f8f64be053f14dc57e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjgzMjExZjk1YTQ1MGZkYWRmMDVmOGY2NGJlMDUzZjE0ZGM1N2U=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-07T22:24:16Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Complete semicolon when needed", "tree": {"sha": "81386f3fe983c19f7e65d79ca3fcb969daa74851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81386f3fe983c19f7e65d79ca3fcb969daa74851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb83211f95a450fdadf05f8f64be053f14dc57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb83211f95a450fdadf05f8f64be053f14dc57e", "html_url": "https://github.com/rust-lang/rust/commit/9fb83211f95a450fdadf05f8f64be053f14dc57e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb83211f95a450fdadf05f8f64be053f14dc57e/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a260f579fec4082aa9e7a30d4b190f06d45877", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a260f579fec4082aa9e7a30d4b190f06d45877", "html_url": "https://github.com/rust-lang/rust/commit/57a260f579fec4082aa9e7a30d4b190f06d45877"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "ef4fb6a9175d0ba063ad8db094b2c93aca6240c8", "filename": "crates/ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=9fb83211f95a450fdadf05f8f64be053f14dc57e", "patch": "@@ -13,7 +13,7 @@ use crate::completion::{\n };\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if ctx.mod_is_prev {\n+    if ctx.mod_under_caret.is_some() {\n         return None;\n     }\n "}, {"sha": "f1795d2f76707ac9de8609ba1ce45f140b83fd24", "filename": "crates/ide/src/completion/complete_mod.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs?ref=9fb83211f95a450fdadf05f8f64be053f14dc57e", "patch": "@@ -5,15 +5,22 @@ use hir::{Module, ModuleSource};\n use ide_db::RootDatabase;\n use rustc_hash::FxHashSet;\n \n-use super::{completion_context::CompletionContext, completion_item::Completions};\n+use crate::{CompletionItem, CompletionItemKind};\n+\n+use super::{\n+    completion_context::CompletionContext, completion_item::CompletionKind,\n+    completion_item::Completions,\n+};\n \n /// Complete mod declaration, i.e. `mod <|> ;`\n pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let _p = profile::span(\"completion::complete_mod\");\n+    let mod_under_caret = match &ctx.mod_under_caret {\n+        Some(mod_under_caret) if mod_under_caret.item_list().is_some() => return None,\n+        Some(mod_under_caret) => mod_under_caret,\n+        None => return None,\n+    };\n \n-    if !ctx.mod_is_prev {\n-        return None;\n-    }\n+    let _p = profile::span(\"completion::complete_mod\");\n \n     let current_module = ctx.scope.module()?;\n \n@@ -36,7 +43,7 @@ pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             module_declaration_source_file.file_id.original_file(ctx.db)\n         });\n \n-    let mod_declaration_candidates = source_root\n+    source_root\n         .iter()\n         .filter(|submodule_candidate_file| submodule_candidate_file != &module_definition_file)\n         .filter(|submodule_candidate_file| {\n@@ -66,10 +73,16 @@ pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             _ => None,\n         })\n         .filter(|name| !existing_mod_declarations.contains(name))\n-        .collect::<Vec<_>>();\n-    dbg!(mod_declaration_candidates);\n-\n-    // TODO kb actually add the results\n+        .for_each(|submodule_name| {\n+            let mut label = submodule_name;\n+            if mod_under_caret.semicolon_token().is_none() {\n+                label.push(';')\n+            }\n+            acc.add(\n+                CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n+                    .kind(CompletionItemKind::Module),\n+            )\n+        });\n \n     Some(())\n }"}, {"sha": "184488a73c8761d68790b035f5e9ed475db68f36", "filename": "crates/ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=9fb83211f95a450fdadf05f8f64be053f14dc57e", "patch": "@@ -13,7 +13,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n \n-    if ctx.attribute_under_caret.is_some() || ctx.mod_is_prev {\n+    if ctx.attribute_under_caret.is_some() || ctx.mod_under_caret.is_some() {\n         return;\n     }\n "}, {"sha": "f2189dfdea41fcdaa6b55e6b4eeefd8e9a5fe4b9", "filename": "crates/ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=9fb83211f95a450fdadf05f8f64be053f14dc57e", "patch": "@@ -13,7 +13,7 @@ pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if ctx.record_lit_syntax.is_some()\n         || ctx.record_pat_syntax.is_some()\n         || ctx.attribute_under_caret.is_some()\n-        || ctx.mod_is_prev\n+        || ctx.mod_under_caret.is_some()\n     {\n         return;\n     }"}, {"sha": "ea48308431fc74a60abaf9aabf16559b60db39e0", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=9fb83211f95a450fdadf05f8f64be053f14dc57e", "patch": "@@ -19,7 +19,7 @@ use crate::{\n             has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n             has_impl_as_prev_sibling, has_impl_parent, has_item_list_or_source_file_parent,\n             has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev,\n-            is_in_loop_body, is_match_arm, mod_is_prev, unsafe_is_prev,\n+            is_in_loop_body, is_match_arm, unsafe_is_prev,\n         },\n         CompletionConfig,\n     },\n@@ -77,7 +77,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n-    pub(super) mod_is_prev: bool,\n+    pub(super) mod_under_caret: Option<ast::Module>,\n     pub(super) unsafe_is_prev: bool,\n     pub(super) if_is_prev: bool,\n     pub(super) block_expr_parent: bool,\n@@ -153,7 +153,7 @@ impl<'a> CompletionContext<'a> {\n             has_type_args: false,\n             dot_receiver_is_ambiguous_float_literal: false,\n             attribute_under_caret: None,\n-            mod_is_prev: false,\n+            mod_under_caret: None,\n             unsafe_is_prev: false,\n             in_loop_body: false,\n             ref_pat_parent: false,\n@@ -241,7 +241,7 @@ impl<'a> CompletionContext<'a> {\n         self.is_match_arm = is_match_arm(syntax_element.clone());\n         self.has_item_list_or_source_file_parent =\n             has_item_list_or_source_file_parent(syntax_element.clone());\n-        self.mod_is_prev = mod_is_prev(syntax_element);\n+        self.mod_under_caret = find_node_at_offset(&file_with_fake_ident, offset);\n     }\n \n     fn fill("}, {"sha": "b17ddf1338a50b0cf89b470b9a01ccf402e98fc6", "filename": "crates/ide/src/completion/patterns.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb83211f95a450fdadf05f8f64be053f14dc57e/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=9fb83211f95a450fdadf05f8f64be053f14dc57e", "patch": "@@ -116,15 +116,6 @@ pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n         .is_some()\n }\n \n-// TODO kb generify?\n-pub(crate) fn mod_is_prev(element: SyntaxElement) -> bool {\n-    element\n-        .into_token()\n-        .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == MOD_KW)\n-        .is_some()\n-}\n-\n #[test]\n fn test_if_is_prev() {\n     check_pattern_is_applicable(r\"if l<|>\", if_is_prev);"}]}