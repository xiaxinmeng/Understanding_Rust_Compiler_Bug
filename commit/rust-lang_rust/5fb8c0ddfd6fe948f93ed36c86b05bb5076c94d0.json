{"sha": "5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYjhjMGRkZmQ2ZmU5NDhmOTNlZDM2Yzg2YjA1YmI1MDc2Yzk0ZDA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-21T16:19:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-21T16:19:18Z"}, "message": "Remove MappedSubtree", "tree": {"sha": "d237bdd29593c9657988ce079e923efb8d6efed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d237bdd29593c9657988ce079e923efb8d6efed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "html_url": "https://github.com/rust-lang/rust/commit/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "177c70128cccdef410a38faf098745e1406ee281", "url": "https://api.github.com/repos/rust-lang/rust/commits/177c70128cccdef410a38faf098745e1406ee281", "html_url": "https://github.com/rust-lang/rust/commit/177c70128cccdef410a38faf098745e1406ee281"}], "stats": {"total": 62, "additions": 21, "deletions": 41}, "files": [{"sha": "163a45ca1425c24604685c50170102936b706997", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -14,7 +14,7 @@ use either::Either;\n use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n-use mbe::{syntax_node_to_token_tree, DelimiterKind, MappedSubTree};\n+use mbe::{syntax_node_to_token_tree, DelimiterKind};\n use smallvec::{smallvec, SmallVec};\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -160,18 +160,18 @@ impl RawAttrs {\n                 }\n \n                 let subtree = match attr.input.as_deref() {\n-                    Some(AttrInput::TokenTree(it)) => it,\n+                    Some(AttrInput::TokenTree(it, _)) => it,\n                     _ => return smallvec![attr.clone()],\n                 };\n \n                 // Input subtree is: `(cfg, $(attr),+)`\n                 // Split it up into a `cfg` subtree and the `attr` subtrees.\n                 // FIXME: There should be a common API for this.\n-                let mut parts = subtree.tree.token_trees.split(\n+                let mut parts = subtree.token_trees.split(\n                     |tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ','),\n                 );\n                 let cfg = parts.next().unwrap();\n-                let cfg = Subtree { delimiter: subtree.tree.delimiter, token_trees: cfg.to_vec() };\n+                let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n                 let cfg = CfgExpr::parse(&cfg);\n                 let index = attr.id;\n                 let attrs = parts.filter(|a| !a.is_empty()).filter_map(|attr| {\n@@ -260,7 +260,7 @@ impl Attrs {\n     pub fn docs(&self) -> Option<Documentation> {\n         let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(s) => Some(s),\n-            AttrInput::TokenTree(_) => None,\n+            AttrInput::TokenTree(..) => None,\n         });\n         let indent = docs\n             .clone()\n@@ -465,7 +465,7 @@ impl AttrsWithOwner {\n         // FIXME: code duplication in `docs` above\n         let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(s) => Some((s, attr.id)),\n-            AttrInput::TokenTree(_) => None,\n+            AttrInput::TokenTree(..) => None,\n         });\n         let indent = docs\n             .clone()\n@@ -654,14 +654,14 @@ pub enum AttrInput {\n     /// `#[attr = \"string\"]`\n     Literal(SmolStr),\n     /// `#[attr(subtree)]`\n-    TokenTree(mbe::MappedSubTree),\n+    TokenTree(tt::Subtree, mbe::TokenMap),\n }\n \n impl fmt::Display for AttrInput {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             AttrInput::Literal(lit) => write!(f, \" = \\\"{}\\\"\", lit.escape_debug()),\n-            AttrInput::TokenTree(subtree) => subtree.tree.fmt(f),\n+            AttrInput::TokenTree(subtree, _) => subtree.fmt(f),\n         }\n     }\n }\n@@ -682,7 +682,7 @@ impl Attr {\n             Some(Interned::new(AttrInput::Literal(value)))\n         } else if let Some(tt) = ast.token_tree() {\n             let (tree, map) = syntax_node_to_token_tree(tt.syntax());\n-            Some(Interned::new(AttrInput::TokenTree(MappedSubTree { tree, map })))\n+            Some(Interned::new(AttrInput::TokenTree(tree, map)))\n         } else {\n             None\n         };\n@@ -712,10 +712,9 @@ impl Attr {\n         }\n \n         match self.input.as_deref() {\n-            Some(AttrInput::TokenTree(args)) => {\n+            Some(AttrInput::TokenTree(args, _)) => {\n                 let mut counter = 0;\n                 let paths = args\n-                    .tree\n                     .token_trees\n                     .iter()\n                     .group_by(move |tt| {\n@@ -760,7 +759,7 @@ pub struct AttrQuery<'a> {\n impl<'a> AttrQuery<'a> {\n     pub fn tt_values(self) -> impl Iterator<Item = &'a Subtree> {\n         self.attrs().filter_map(|attr| match attr.input.as_deref()? {\n-            AttrInput::TokenTree(it) => Some(&it.tree),\n+            AttrInput::TokenTree(it, _) => Some(it),\n             _ => None,\n         })\n     }"}, {"sha": "ea6a2b4a6fa3fb883d72cdc6b4cec39c5cb6df84", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -787,12 +787,12 @@ fn attr_macro_as_call_id(\n     let mut arg = match &macro_attr.input {\n         Some(input) => match &**input {\n             attr::AttrInput::Literal(_) => Default::default(),\n-            attr::AttrInput::TokenTree(tt) => tt.clone(),\n+            attr::AttrInput::TokenTree(tt, map) => (tt.clone(), map.clone()),\n         },\n         None => Default::default(),\n     };\n     // The parentheses are always disposed here.\n-    arg.tree.delimiter = None;\n+    arg.0.delimiter = None;\n \n     let res = def.as_lazy_macro(\n         db.upcast(),"}, {"sha": "352d6fd65429bda4fd28483b6c6a7d4c93873de5", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -289,7 +289,7 @@ impl DefCollector<'_> {\n                     || *attr_name == hir_expand::name![register_tool]\n                 {\n                     match attr.input.as_deref() {\n-                        Some(AttrInput::TokenTree(subtree)) => match &*subtree.tree.token_trees {\n+                        Some(AttrInput::TokenTree(subtree, _)) => match &*subtree.token_trees {\n                             [tt::TokenTree::Leaf(tt::Leaf::Ident(name))] => name.as_name(),\n                             _ => continue,\n                         },"}, {"sha": "0c5457016efdde14e93d95014434aad0c139d333", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -387,7 +387,7 @@ fn expand_proc_macro(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<tt::\n \n     let attr_arg = match &loc.kind {\n         MacroCallKind::Attr { attr_args, .. } => {\n-            let mut attr_args = attr_args.tree.clone();\n+            let mut attr_args = attr_args.0.clone();\n             mbe::Shift::new(&macro_arg.0).shift_all(&mut attr_args);\n             Some(attr_args)\n         }"}, {"sha": "ebf458fe35977b8c6a32b197e878ff2e07971f2f", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -283,7 +283,7 @@ pub enum MacroCallKind {\n     Attr {\n         ast_id: AstId<ast::Item>,\n         attr_name: String,\n-        attr_args: mbe::MappedSubTree,\n+        attr_args: (tt::Subtree, mbe::TokenMap),\n         /// Syntactical index of the invoking `#[attribute]`.\n         ///\n         /// Outer attributes are counted first, then inner attributes. This does not support\n@@ -390,7 +390,7 @@ impl ExpansionInfo {\n                                 token_tree.left_delimiter_token()?.text_range().start();\n                             let range = token.value.text_range().checked_sub(attr_input_start)?;\n                             let token_id =\n-                                self.macro_arg_shift.shift(attr_args.map.token_by_range(range)?);\n+                                self.macro_arg_shift.shift(attr_args.1.token_by_range(range)?);\n                             Some(token_id)\n                         }\n                         _ => None,\n@@ -437,7 +437,7 @@ impl ExpansionInfo {\n             MacroCallKind::Attr { attr_args, .. } => match self.macro_arg_shift.unshift(token_id) {\n                 Some(unshifted) => {\n                     token_id = unshifted;\n-                    (&attr_args.map, self.attr_input_or_mac_def.clone()?.syntax().cloned())\n+                    (&attr_args.1, self.attr_input_or_mac_def.clone()?.syntax().cloned())\n                 }\n                 None => (&self.macro_arg.1, self.arg.clone()),\n             },"}, {"sha": "d2b955c5c8136642e6d4b714e29cb8d42bc41429", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -69,7 +69,7 @@ pub use crate::{\n         parse_exprs_with_sep, parse_to_token_tree, syntax_node_to_token_tree,\n         token_tree_to_syntax_node,\n     },\n-    token_map::{MappedSubTree, TokenMap},\n+    token_map::TokenMap,\n };\n \n /// This struct contains AST for a single `macro_rules` definition. What might"}, {"sha": "ff0c106cf255dd43cf8a57c86765b534d01bae40", "filename": "crates/mbe/src/token_map.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fmbe%2Fsrc%2Ftoken_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0/crates%2Fmbe%2Fsrc%2Ftoken_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftoken_map.rs?ref=5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "patch": "@@ -5,7 +5,7 @@ use std::hash::Hash;\n use parser::{SyntaxKind, T};\n use syntax::{TextRange, TextSize};\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n enum TokenTextRange {\n     Token(TextRange),\n     Delimiter(TextRange),\n@@ -26,27 +26,8 @@ impl TokenTextRange {\n     }\n }\n \n-#[derive(Debug, Clone, Default)]\n-pub struct MappedSubTree {\n-    pub tree: tt::Subtree,\n-    pub map: TokenMap,\n-}\n-\n-impl Eq for MappedSubTree {}\n-impl PartialEq for MappedSubTree {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.tree == other.tree && self.map == other.map\n-    }\n-}\n-\n-impl Hash for MappedSubTree {\n-    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n-        self.tree.hash(state);\n-    }\n-}\n-\n /// Maps `tt::TokenId` to the relative range of the original token.\n-#[derive(Debug, PartialEq, Eq, Clone, Default)]\n+#[derive(Debug, PartialEq, Eq, Clone, Default, Hash)]\n pub struct TokenMap {\n     /// Maps `tt::TokenId` to the *relative* source range.\n     entries: Vec<(tt::TokenId, TokenTextRange)>,"}]}