{"sha": "0e2437bf5d4a1f863888d4b0b5995a695f966e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjQzN2JmNWQ0YTFmODYzODg4ZDRiMGI1OTk1YTY5NWY5NjZlNzM=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2012-10-19T23:28:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-21T00:17:10Z"}, "message": "uv: implement a way to get client's ip/port.", "tree": {"sha": "a9c07251373f138edc32883556e6ea62cd8e5ad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c07251373f138edc32883556e6ea62cd8e5ad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e2437bf5d4a1f863888d4b0b5995a695f966e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2437bf5d4a1f863888d4b0b5995a695f966e73", "html_url": "https://github.com/rust-lang/rust/commit/0e2437bf5d4a1f863888d4b0b5995a695f966e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e2437bf5d4a1f863888d4b0b5995a695f966e73/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15777de957642ebace789bec747b4269ca9883b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/15777de957642ebace789bec747b4269ca9883b7", "html_url": "https://github.com/rust-lang/rust/commit/15777de957642ebace789bec747b4269ca9883b7"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "5d78fb19bab390d11488ca51bc1cf114c02c5d84", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=0e2437bf5d4a1f863888d4b0b5995a695f966e73", "patch": "@@ -10,8 +10,10 @@ use addrinfo = uv::ll::addrinfo;\n use uv_getaddrinfo_t = uv::ll::uv_getaddrinfo_t;\n use uv_ip4_addr = uv::ll::ip4_addr;\n use uv_ip4_name = uv::ll::ip4_name;\n+use uv_ip4_port = uv::ll::ip4_port;\n use uv_ip6_addr = uv::ll::ip6_addr;\n use uv_ip6_name = uv::ll::ip6_name;\n+use uv_ip6_port = uv::ll::ip6_port;\n use uv_getaddrinfo = uv::ll::getaddrinfo;\n use uv_freeaddrinfo = uv::ll::freeaddrinfo;\n use create_uv_getaddrinfo_t = uv::ll::getaddrinfo_t;\n@@ -33,11 +35,11 @@ type ParseAddrErr = {\n };\n \n /**\n- * Convert a `ip_addr` to a str\n+ * Convert a `IpAddr` to a str\n  *\n  * # Arguments\n  *\n- * * ip - a `std::net::ip::ip_addr`\n+ * * ip - a `std::net::ip::IpAddr`\n  */\n pub fn format_addr(ip: &IpAddr) -> ~str {\n     match *ip {\n@@ -58,6 +60,23 @@ pub fn format_addr(ip: &IpAddr) -> ~str {\n     }\n }\n \n+/**\n+ * Get the associated port\n+ *\n+ * # Arguments\n+ * * ip - a `std::net::ip::IpAddr`\n+ */\n+pub fn get_port(ip: &IpAddr) -> uint {\n+    match *ip {\n+        Ipv4(ref addr) => unsafe {\n+            uv_ip4_port(addr)\n+        },\n+        Ipv6(ref addr) => unsafe {\n+            uv_ip6_port(addr)\n+        }\n+    }\n+}\n+\n /// Represents errors returned from `net::ip::get_addr()`\n enum IpGetAddrErr {\n     GetAddrUnknownError"}, {"sha": "94293c3aa41b3432425afa91f261136e1218663e", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=0e2437bf5d4a1f863888d4b0b5995a695f966e73", "patch": "@@ -746,6 +746,22 @@ impl TcpSocket {\n         -> future::Future<result::Result<(), TcpErrData>> {\n         write_future(&self, raw_write_data)\n     }\n+    pub fn getpeername() -> ip::IpAddr {\n+        unsafe {\n+            let addr = uv::ll::ip4_addr(\"\", 0);\n+            uv::ll::tcp_getpeername(self.socket_data.stream_handle_ptr,\n+                                    ptr::addr_of(&addr));\n+            ip::Ipv4(move addr)\n+        }\n+    }\n+    pub fn getpeername6() -> ip::IpAddr {\n+        unsafe {\n+            let addr = uv::ll::ip6_addr(\"\", 0);\n+            uv::ll::tcp_getpeername6(self.socket_data.stream_handle_ptr,\n+                                     ptr::addr_of(&addr));\n+            ip::Ipv6(move addr)\n+        }\n+    }\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`"}, {"sha": "c12682fcc928915d9d2119c785aa87e6ed2e2a7b", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=0e2437bf5d4a1f863888d4b0b5995a695f966e73", "patch": "@@ -590,6 +590,8 @@ extern mod rustrt {\n         -> libc::c_int;\n     fn rust_uv_ip6_name(src: *sockaddr_in6, dst: *u8, size: libc::size_t)\n         -> libc::c_int;\n+    fn rust_uv_ip4_port(src: *sockaddr_in) -> libc::c_uint;\n+    fn rust_uv_ip6_port(src: *sockaddr_in6) -> libc::c_uint;\n     // FIXME ref #2064\n     fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n                            tcp_handle_ptr: *uv_tcp_t,\n@@ -606,6 +608,10 @@ extern mod rustrt {\n     // FIXME ref #2064\n     fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t,\n                         ++addr: *sockaddr_in6) -> libc::c_int;\n+    fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n+                               ++name: *sockaddr_in) -> libc::c_int;\n+    fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n+                                ++name: *sockaddr_in6) ->libc::c_int;\n     fn rust_uv_listen(stream: *libc::c_void, backlog: libc::c_int,\n                       cb: *u8) -> libc::c_int;\n     fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n@@ -736,6 +742,16 @@ pub unsafe fn tcp_bind6(tcp_server_ptr: *uv_tcp_t,\n                                  addr_ptr);\n }\n \n+pub unsafe fn tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n+                              name: *sockaddr_in) -> libc::c_int {\n+    return rustrt::rust_uv_tcp_getpeername(tcp_handle_ptr, name);\n+}\n+\n+pub unsafe fn tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n+                               name: *sockaddr_in6) ->libc::c_int {\n+    return rustrt::rust_uv_tcp_getpeername6(tcp_handle_ptr, name);\n+}\n+\n pub unsafe fn listen<T>(stream: *T, backlog: libc::c_int,\n                  cb: *u8) -> libc::c_int {\n     return rustrt::rust_uv_listen(stream as *libc::c_void, backlog, cb);\n@@ -857,6 +873,12 @@ pub unsafe fn ip6_name(src: &sockaddr_in6) -> ~str {\n         }\n     }\n }\n+pub unsafe fn ip4_port(src: &sockaddr_in) -> uint {\n+    rustrt::rust_uv_ip4_port(to_unsafe_ptr(src)) as uint\n+}\n+pub unsafe fn ip6_port(src: &sockaddr_in6) -> uint {\n+    rustrt::rust_uv_ip6_port(to_unsafe_ptr(src)) as uint\n+}\n \n pub unsafe fn timer_init(loop_ptr: *libc::c_void,\n                      timer_ptr: *uv_timer_t) -> libc::c_int {"}, {"sha": "c34fd166baec71bef8bf6157527bd917ccd04fa9", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0e2437bf5d4a1f863888d4b0b5995a695f966e73/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=0e2437bf5d4a1f863888d4b0b5995a695f966e73", "patch": "@@ -269,6 +269,20 @@ rust_uv_tcp_bind6\n     return uv_tcp_bind6(tcp_server, addr);\n }\n \n+extern \"C\" int\n+rust_uv_tcp_getpeername\n+(uv_tcp_t* handle, sockaddr_in* name) {\n+    int namelen = sizeof(sockaddr_in);\n+    return uv_tcp_getpeername(handle, (sockaddr*)name, &namelen);\n+}\n+\n+extern \"C\" int\n+rust_uv_tcp_getpeername6\n+(uv_tcp_t* handle, sockaddr_in6* name) {\n+    int namelen = sizeof(sockaddr_in6);\n+    return uv_tcp_getpeername(handle, (sockaddr*)name, &namelen);\n+}\n+\n extern \"C\" int\n rust_uv_listen(uv_stream_t* stream, int backlog,\n         uv_connection_cb cb) {\n@@ -480,6 +494,14 @@ rust_uv_ip6_name(struct sockaddr_in6* src, char* dst, size_t size) {\n     int result = uv_ip6_name(src, dst, size);\n     return result;\n }\n+extern \"C\" unsigned int\n+rust_uv_ip4_port(struct sockaddr_in* src) {\n+    return ntohs(src->sin_port);\n+}\n+extern \"C\" unsigned int\n+rust_uv_ip6_port(struct sockaddr_in6* src) {\n+    return ntohs(src->sin6_port);\n+}\n \n extern \"C\" uintptr_t*\n rust_uv_get_kernel_global_chan_ptr() {"}]}