{"sha": "abd3e7eabb8712244ca4dfbed5455df591aed0fc", "node_id": "C_kwDOAAsO6NoAKGFiZDNlN2VhYmI4NzEyMjQ0Y2E0ZGZiZWQ1NDU1ZGY1OTFhZWQwZmM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-09-06T18:23:03Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-09-06T18:23:03Z"}, "message": "Allow lint passes to be bound by `TyCtxt`", "tree": {"sha": "8cd0c3c38d1c7298216130fbc4e15d9371f175da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd0c3c38d1c7298216130fbc4e15d9371f175da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd3e7eabb8712244ca4dfbed5455df591aed0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd3e7eabb8712244ca4dfbed5455df591aed0fc", "html_url": "https://github.com/rust-lang/rust/commit/abd3e7eabb8712244ca4dfbed5455df591aed0fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd3e7eabb8712244ca4dfbed5455df591aed0fc/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce339b219ab9a3731e38f68a66fc39e0898ac7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce339b219ab9a3731e38f68a66fc39e0898ac7af", "html_url": "https://github.com/rust-lang/rust/commit/ce339b219ab9a3731e38f68a66fc39e0898ac7af"}], "stats": {"total": 420, "additions": 211, "deletions": 209}, "files": [{"sha": "331b76484b8a5d5f62992a34d73de6fadbf72c93", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd3e7eabb8712244ca4dfbed5455df591aed0fc/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3e7eabb8712244ca4dfbed5455df591aed0fc/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=abd3e7eabb8712244ca4dfbed5455df591aed0fc", "patch": "@@ -120,15 +120,17 @@ fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n \n     let new_lint = if enable_msrv {\n         format!(\n-            \"store.register_{lint_pass}_pass(move || Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n+            \"store.register_{lint_pass}_pass(move |{ctor_arg}| Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n             lint_pass = lint.pass,\n+            ctor_arg = if lint.pass == \"late\" { \"_\" } else { \"\" },\n             module_name = lint.name,\n             camel_name = to_camel_case(lint.name),\n         )\n     } else {\n         format!(\n-            \"store.register_{lint_pass}_pass(|| Box::new({module_name}::{camel_name}));\\n    \",\n+            \"store.register_{lint_pass}_pass(|{ctor_arg}| Box::new({module_name}::{camel_name}));\\n    \",\n             lint_pass = lint.pass,\n+            ctor_arg = if lint.pass == \"late\" { \"_\" } else { \"\" },\n             module_name = lint.name,\n             camel_name = to_camel_case(lint.name),\n         )"}, {"sha": "c70aa79ac8dcffdcfcece1c391a850f547a3e61b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 207, "deletions": 207, "changes": 414, "blob_url": "https://github.com/rust-lang/rust/blob/abd3e7eabb8712244ca4dfbed5455df591aed0fc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd3e7eabb8712244ca4dfbed5455df591aed0fc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=abd3e7eabb8712244ca4dfbed5455df591aed0fc", "patch": "@@ -523,7 +523,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"internal\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n+            store.register_late_pass(|_| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n             return;\n         }\n     }\n@@ -533,218 +533,218 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     {\n         store.register_early_pass(|| Box::new(utils::internal_lints::ClippyLintsInternal));\n         store.register_early_pass(|| Box::new(utils::internal_lints::ProduceIce));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::CollapsibleCalls));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::IfChainStyle));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::InvalidPaths));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::InterningDefinedSymbol::default()));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::MsrvAttrImpl));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::CollapsibleCalls));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::IfChainStyle));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::InvalidPaths));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::InterningDefinedSymbol::default()));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::OuterExpnDataPass));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::MsrvAttrImpl));\n     }\n \n     let arithmetic_allowed = conf.arithmetic_allowed.clone();\n-    store.register_late_pass(move || Box::new(operators::arithmetic::Arithmetic::new(arithmetic_allowed.clone())));\n-    store.register_late_pass(|| Box::new(utils::dump_hir::DumpHir));\n-    store.register_late_pass(|| Box::new(utils::author::Author));\n+    store.register_late_pass(move |_| Box::new(operators::arithmetic::Arithmetic::new(arithmetic_allowed.clone())));\n+    store.register_late_pass(|_| Box::new(utils::dump_hir::DumpHir));\n+    store.register_late_pass(|_| Box::new(utils::author::Author));\n     let await_holding_invalid_types = conf.await_holding_invalid_types.clone();\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(await_holding_invalid::AwaitHolding::new(\n             await_holding_invalid_types.clone(),\n         ))\n     });\n-    store.register_late_pass(|| Box::new(serde_api::SerdeApi));\n+    store.register_late_pass(|_| Box::new(serde_api::SerdeApi));\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(types::Types::new(\n             vec_box_size_threshold,\n             type_complexity_threshold,\n             avoid_breaking_exported_api,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(booleans::NonminimalBool));\n-    store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n-    store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n-    store.register_late_pass(|| Box::new(ptr::Ptr));\n-    store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n-    store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n-    store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n-    store.register_late_pass(|| Box::new(misc::MiscLints));\n-    store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n-    store.register_late_pass(|| Box::new(mut_mut::MutMut));\n-    store.register_late_pass(|| Box::new(mut_reference::UnnecessaryMutPassed));\n-    store.register_late_pass(|| Box::new(len_zero::LenZero));\n-    store.register_late_pass(|| Box::new(attrs::Attributes));\n-    store.register_late_pass(|| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n-    store.register_late_pass(|| Box::new(unicode::Unicode));\n-    store.register_late_pass(|| Box::new(uninit_vec::UninitVec));\n-    store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n-    store.register_late_pass(|| Box::new(strings::StringAdd));\n-    store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));\n-    store.register_late_pass(|| Box::new(implicit_saturating_sub::ImplicitSaturatingSub));\n-    store.register_late_pass(|| Box::new(default_numeric_fallback::DefaultNumericFallback));\n-    store.register_late_pass(|| Box::new(inconsistent_struct_constructor::InconsistentStructConstructor));\n-    store.register_late_pass(|| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n+    store.register_late_pass(|_| Box::new(booleans::NonminimalBool));\n+    store.register_late_pass(|_| Box::new(enum_clike::UnportableVariant));\n+    store.register_late_pass(|_| Box::new(float_literal::FloatLiteral));\n+    store.register_late_pass(|_| Box::new(ptr::Ptr));\n+    store.register_late_pass(|_| Box::new(needless_bool::NeedlessBool));\n+    store.register_late_pass(|_| Box::new(needless_bool::BoolComparison));\n+    store.register_late_pass(|_| Box::new(needless_for_each::NeedlessForEach));\n+    store.register_late_pass(|_| Box::new(misc::MiscLints));\n+    store.register_late_pass(|_| Box::new(eta_reduction::EtaReduction));\n+    store.register_late_pass(|_| Box::new(mut_mut::MutMut));\n+    store.register_late_pass(|_| Box::new(mut_reference::UnnecessaryMutPassed));\n+    store.register_late_pass(|_| Box::new(len_zero::LenZero));\n+    store.register_late_pass(|_| Box::new(attrs::Attributes));\n+    store.register_late_pass(|_| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n+    store.register_late_pass(|_| Box::new(unicode::Unicode));\n+    store.register_late_pass(|_| Box::new(uninit_vec::UninitVec));\n+    store.register_late_pass(|_| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n+    store.register_late_pass(|_| Box::new(strings::StringAdd));\n+    store.register_late_pass(|_| Box::new(implicit_return::ImplicitReturn));\n+    store.register_late_pass(|_| Box::new(implicit_saturating_sub::ImplicitSaturatingSub));\n+    store.register_late_pass(|_| Box::new(default_numeric_fallback::DefaultNumericFallback));\n+    store.register_late_pass(|_| Box::new(inconsistent_struct_constructor::InconsistentStructConstructor));\n+    store.register_late_pass(|_| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n     store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n     let msrv = read_msrv(conf, sess);\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n-    store.register_late_pass(move || Box::new(approx_const::ApproxConstant::new(msrv)));\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv)));\n+    store.register_late_pass(move |_| {\n         Box::new(methods::Methods::new(\n             avoid_breaking_exported_api,\n             msrv,\n             allow_expect_in_tests,\n             allow_unwrap_in_tests,\n         ))\n     });\n-    store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv)));\n     store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv)));\n-    store.register_late_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n-    store.register_late_pass(move || Box::new(manual_strip::ManualStrip::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv)));\n     store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv)));\n     store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv)));\n-    store.register_late_pass(move || Box::new(checked_conversions::CheckedConversions::new(msrv)));\n-    store.register_late_pass(move || Box::new(mem_replace::MemReplace::new(msrv)));\n-    store.register_late_pass(move || Box::new(ranges::Ranges::new(msrv)));\n-    store.register_late_pass(move || Box::new(from_over_into::FromOverInto::new(msrv)));\n-    store.register_late_pass(move || Box::new(use_self::UseSelf::new(msrv)));\n-    store.register_late_pass(move || Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n-    store.register_late_pass(move || Box::new(needless_question_mark::NeedlessQuestionMark));\n-    store.register_late_pass(move || Box::new(casts::Casts::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(checked_conversions::CheckedConversions::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(mem_replace::MemReplace::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(ranges::Ranges::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(from_over_into::FromOverInto::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(use_self::UseSelf::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(needless_question_mark::NeedlessQuestionMark));\n+    store.register_late_pass(move |_| Box::new(casts::Casts::new(msrv)));\n     store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n-    store.register_late_pass(|| Box::new(size_of_in_element_count::SizeOfInElementCount));\n-    store.register_late_pass(|| Box::new(same_name_method::SameNameMethod));\n+    store.register_late_pass(|_| Box::new(size_of_in_element_count::SizeOfInElementCount));\n+    store.register_late_pass(|_| Box::new(same_name_method::SameNameMethod));\n     let max_suggested_slice_pattern_length = conf.max_suggested_slice_pattern_length;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(index_refutable_slice::IndexRefutableSlice::new(\n             max_suggested_slice_pattern_length,\n             msrv,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(shadow::Shadow::default()));\n-    store.register_late_pass(|| Box::new(unit_types::UnitTypes));\n-    store.register_late_pass(|| Box::new(loops::Loops));\n-    store.register_late_pass(|| Box::new(main_recursion::MainRecursion::default()));\n-    store.register_late_pass(|| Box::new(lifetimes::Lifetimes));\n-    store.register_late_pass(|| Box::new(entry::HashMapPass));\n-    store.register_late_pass(|| Box::new(minmax::MinMaxPass));\n-    store.register_late_pass(|| Box::new(zero_div_zero::ZeroDiv));\n-    store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n-    store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));\n-    store.register_late_pass(|| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n-    store.register_late_pass(|| Box::new(borrow_deref_ref::BorrowDerefRef));\n-    store.register_late_pass(|| Box::new(no_effect::NoEffect));\n-    store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n-    store.register_late_pass(move || Box::new(transmute::Transmute::new(msrv)));\n+    store.register_late_pass(|_| Box::new(shadow::Shadow::default()));\n+    store.register_late_pass(|_| Box::new(unit_types::UnitTypes));\n+    store.register_late_pass(|_| Box::new(loops::Loops));\n+    store.register_late_pass(|_| Box::new(main_recursion::MainRecursion::default()));\n+    store.register_late_pass(|_| Box::new(lifetimes::Lifetimes));\n+    store.register_late_pass(|_| Box::new(entry::HashMapPass));\n+    store.register_late_pass(|_| Box::new(minmax::MinMaxPass));\n+    store.register_late_pass(|_| Box::new(zero_div_zero::ZeroDiv));\n+    store.register_late_pass(|_| Box::new(mutex_atomic::Mutex));\n+    store.register_late_pass(|_| Box::new(needless_update::NeedlessUpdate));\n+    store.register_late_pass(|_| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n+    store.register_late_pass(|_| Box::new(borrow_deref_ref::BorrowDerefRef));\n+    store.register_late_pass(|_| Box::new(no_effect::NoEffect));\n+    store.register_late_pass(|_| Box::new(temporary_assignment::TemporaryAssignment));\n+    store.register_late_pass(move |_| Box::new(transmute::Transmute::new(msrv)));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(cognitive_complexity::CognitiveComplexity::new(\n             cognitive_complexity_threshold,\n         ))\n     });\n     let too_large_for_stack = conf.too_large_for_stack;\n-    store.register_late_pass(move || Box::new(escape::BoxedLocal { too_large_for_stack }));\n-    store.register_late_pass(move || Box::new(vec::UselessVec { too_large_for_stack }));\n-    store.register_late_pass(|| Box::new(panic_unimplemented::PanicUnimplemented));\n-    store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n-    store.register_late_pass(|| Box::new(derive::Derive));\n-    store.register_late_pass(|| Box::new(derivable_impls::DerivableImpls));\n-    store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n-    store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n-    store.register_late_pass(|| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n-    store.register_late_pass(|| Box::new(regex::Regex));\n-    store.register_late_pass(|| Box::new(copies::CopyAndPaste));\n-    store.register_late_pass(|| Box::new(copy_iterator::CopyIterator));\n-    store.register_late_pass(|| Box::new(format::UselessFormat));\n-    store.register_late_pass(|| Box::new(swap::Swap));\n-    store.register_late_pass(|| Box::new(overflow_check_conditional::OverflowCheckConditional));\n-    store.register_late_pass(|| Box::new(new_without_default::NewWithoutDefault::default()));\n+    store.register_late_pass(move |_| Box::new(escape::BoxedLocal { too_large_for_stack }));\n+    store.register_late_pass(move |_| Box::new(vec::UselessVec { too_large_for_stack }));\n+    store.register_late_pass(|_| Box::new(panic_unimplemented::PanicUnimplemented));\n+    store.register_late_pass(|_| Box::new(strings::StringLitAsBytes));\n+    store.register_late_pass(|_| Box::new(derive::Derive));\n+    store.register_late_pass(|_| Box::new(derivable_impls::DerivableImpls));\n+    store.register_late_pass(|_| Box::new(drop_forget_ref::DropForgetRef));\n+    store.register_late_pass(|_| Box::new(empty_enum::EmptyEnum));\n+    store.register_late_pass(|_| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n+    store.register_late_pass(|_| Box::new(regex::Regex));\n+    store.register_late_pass(|_| Box::new(copies::CopyAndPaste));\n+    store.register_late_pass(|_| Box::new(copy_iterator::CopyIterator));\n+    store.register_late_pass(|_| Box::new(format::UselessFormat));\n+    store.register_late_pass(|_| Box::new(swap::Swap));\n+    store.register_late_pass(|_| Box::new(overflow_check_conditional::OverflowCheckConditional));\n+    store.register_late_pass(|_| Box::new(new_without_default::NewWithoutDefault::default()));\n     let disallowed_names = conf.disallowed_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n+    store.register_late_pass(move |_| Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n     let large_error_threshold = conf.large_error_threshold;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(functions::Functions::new(\n             too_many_arguments_threshold,\n             too_many_lines_threshold,\n             large_error_threshold,\n         ))\n     });\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n-    store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n-    store.register_late_pass(|| Box::new(mem_forget::MemForget));\n-    store.register_late_pass(|| Box::new(let_if_seq::LetIfSeq));\n-    store.register_late_pass(|| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n-    store.register_late_pass(|| Box::new(missing_doc::MissingDoc::new()));\n-    store.register_late_pass(|| Box::new(missing_inline::MissingInline));\n-    store.register_late_pass(move || Box::new(exhaustive_items::ExhaustiveItems));\n-    store.register_late_pass(|| Box::new(match_result_ok::MatchResultOk));\n-    store.register_late_pass(|| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n-    store.register_late_pass(|| Box::new(unused_io_amount::UnusedIoAmount));\n+    store.register_late_pass(move |_| Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n+    store.register_late_pass(|_| Box::new(neg_multiply::NegMultiply));\n+    store.register_late_pass(|_| Box::new(mem_forget::MemForget));\n+    store.register_late_pass(|_| Box::new(let_if_seq::LetIfSeq));\n+    store.register_late_pass(|_| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n+    store.register_late_pass(|_| Box::new(missing_doc::MissingDoc::new()));\n+    store.register_late_pass(|_| Box::new(missing_inline::MissingInline));\n+    store.register_late_pass(move |_| Box::new(exhaustive_items::ExhaustiveItems));\n+    store.register_late_pass(|_| Box::new(match_result_ok::MatchResultOk));\n+    store.register_late_pass(|_| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n+    store.register_late_pass(|_| Box::new(unused_io_amount::UnusedIoAmount));\n     let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n-    store.register_late_pass(move || Box::new(large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold)));\n-    store.register_late_pass(|| Box::new(explicit_write::ExplicitWrite));\n-    store.register_late_pass(|| Box::new(needless_pass_by_value::NeedlessPassByValue));\n+    store.register_late_pass(move |_| Box::new(large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold)));\n+    store.register_late_pass(|_| Box::new(explicit_write::ExplicitWrite));\n+    store.register_late_pass(|_| Box::new(needless_pass_by_value::NeedlessPassByValue));\n     let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n         conf.trivial_copy_size_limit,\n         conf.pass_by_value_size_limit,\n         conf.avoid_breaking_exported_api,\n         &sess.target,\n     );\n-    store.register_late_pass(move || Box::new(pass_by_ref_or_value));\n-    store.register_late_pass(|| Box::new(ref_option_ref::RefOptionRef));\n-    store.register_late_pass(|| Box::new(infinite_iter::InfiniteIter));\n-    store.register_late_pass(|| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n-    store.register_late_pass(|| Box::new(useless_conversion::UselessConversion::default()));\n-    store.register_late_pass(|| Box::new(implicit_hasher::ImplicitHasher));\n-    store.register_late_pass(|| Box::new(fallible_impl_from::FallibleImplFrom));\n-    store.register_late_pass(|| Box::new(question_mark::QuestionMark));\n+    store.register_late_pass(move |_| Box::new(pass_by_ref_or_value));\n+    store.register_late_pass(|_| Box::new(ref_option_ref::RefOptionRef));\n+    store.register_late_pass(|_| Box::new(infinite_iter::InfiniteIter));\n+    store.register_late_pass(|_| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n+    store.register_late_pass(|_| Box::new(useless_conversion::UselessConversion::default()));\n+    store.register_late_pass(|_| Box::new(implicit_hasher::ImplicitHasher));\n+    store.register_late_pass(|_| Box::new(fallible_impl_from::FallibleImplFrom));\n+    store.register_late_pass(|_| Box::new(question_mark::QuestionMark));\n     store.register_early_pass(|| Box::new(suspicious_operation_groupings::SuspiciousOperationGroupings));\n-    store.register_late_pass(|| Box::new(suspicious_trait_impl::SuspiciousImpl));\n-    store.register_late_pass(|| Box::new(map_unit_fn::MapUnit));\n-    store.register_late_pass(|| Box::new(inherent_impl::MultipleInherentImpl));\n-    store.register_late_pass(|| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n-    store.register_late_pass(|| Box::new(unwrap::Unwrap));\n-    store.register_late_pass(|| Box::new(indexing_slicing::IndexingSlicing));\n-    store.register_late_pass(|| Box::new(non_copy_const::NonCopyConst));\n-    store.register_late_pass(|| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n-    store.register_late_pass(|| Box::new(redundant_clone::RedundantClone));\n-    store.register_late_pass(|| Box::new(slow_vector_initialization::SlowVectorInit));\n-    store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n-    store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n-    store.register_late_pass(|| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n-    store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n+    store.register_late_pass(|_| Box::new(suspicious_trait_impl::SuspiciousImpl));\n+    store.register_late_pass(|_| Box::new(map_unit_fn::MapUnit));\n+    store.register_late_pass(|_| Box::new(inherent_impl::MultipleInherentImpl));\n+    store.register_late_pass(|_| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n+    store.register_late_pass(|_| Box::new(unwrap::Unwrap));\n+    store.register_late_pass(|_| Box::new(indexing_slicing::IndexingSlicing));\n+    store.register_late_pass(|_| Box::new(non_copy_const::NonCopyConst));\n+    store.register_late_pass(|_| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n+    store.register_late_pass(|_| Box::new(redundant_clone::RedundantClone));\n+    store.register_late_pass(|_| Box::new(slow_vector_initialization::SlowVectorInit));\n+    store.register_late_pass(move |_| Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n+    store.register_late_pass(|_| Box::new(assertions_on_constants::AssertionsOnConstants));\n+    store.register_late_pass(|_| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n+    store.register_late_pass(|_| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n-    store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n-    store.register_late_pass(|| Box::new(comparison_chain::ComparisonChain));\n-    store.register_late_pass(|| Box::new(mut_key::MutableKeyType));\n+    store.register_late_pass(move |_| Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n+    store.register_late_pass(|_| Box::new(comparison_chain::ComparisonChain));\n+    store.register_late_pass(|_| Box::new(mut_key::MutableKeyType));\n     store.register_early_pass(|| Box::new(reference::DerefAddrOf));\n     store.register_early_pass(|| Box::new(double_parens::DoubleParens));\n-    store.register_late_pass(|| Box::new(format_impl::FormatImpl::new()));\n+    store.register_late_pass(|_| Box::new(format_impl::FormatImpl::new()));\n     store.register_early_pass(|| Box::new(unsafe_removed_from_name::UnsafeNameRemoval));\n     store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));\n     store.register_early_pass(|| Box::new(int_plus_one::IntPlusOne));\n     store.register_early_pass(|| Box::new(formatting::Formatting));\n     store.register_early_pass(|| Box::new(misc_early::MiscEarlyLints));\n     store.register_early_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n-    store.register_late_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n+    store.register_late_pass(|_| Box::new(redundant_closure_call::RedundantClosureCall));\n     store.register_early_pass(|| Box::new(unused_unit::UnusedUnit));\n-    store.register_late_pass(|| Box::new(returns::Return));\n+    store.register_late_pass(|_| Box::new(returns::Return));\n     store.register_early_pass(|| Box::new(collapsible_if::CollapsibleIf));\n     store.register_early_pass(|| Box::new(items_after_statements::ItemsAfterStatements));\n     store.register_early_pass(|| Box::new(precedence::Precedence));\n-    store.register_late_pass(|| Box::new(needless_parens_on_range_literals::NeedlessParensOnRangeLiterals));\n+    store.register_late_pass(|_| Box::new(needless_parens_on_range_literals::NeedlessParensOnRangeLiterals));\n     store.register_early_pass(|| Box::new(needless_continue::NeedlessContinue));\n     store.register_early_pass(|| Box::new(redundant_else::RedundantElse));\n-    store.register_late_pass(|| Box::new(create_dir::CreateDir));\n+    store.register_late_pass(|_| Box::new(create_dir::CreateDir));\n     store.register_early_pass(|| Box::new(needless_arbitrary_self_type::NeedlessArbitrarySelfType));\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n     store.register_early_pass(move || {\n@@ -759,31 +759,31 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(enum_variants::EnumVariantNames::new(\n             enum_variant_name_threshold,\n             avoid_breaking_exported_api,\n         ))\n     });\n     store.register_early_pass(|| Box::new(tabs_in_doc_comments::TabsInDocComments));\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(upper_case_acronyms::UpperCaseAcronyms::new(\n             avoid_breaking_exported_api,\n             upper_case_acronyms_aggressive,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(default::Default::default()));\n-    store.register_late_pass(move || Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n-    store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n-    store.register_late_pass(|| Box::new(exit::Exit));\n-    store.register_late_pass(|| Box::new(to_digit_is_some::ToDigitIsSome));\n+    store.register_late_pass(|_| Box::new(default::Default::default()));\n+    store.register_late_pass(move |_| Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n+    store.register_late_pass(|_| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n+    store.register_late_pass(|_| Box::new(exit::Exit));\n+    store.register_late_pass(|_| Box::new(to_digit_is_some::ToDigitIsSome));\n     let array_size_threshold = conf.array_size_threshold;\n-    store.register_late_pass(move || Box::new(large_stack_arrays::LargeStackArrays::new(array_size_threshold)));\n-    store.register_late_pass(move || Box::new(large_const_arrays::LargeConstArrays::new(array_size_threshold)));\n-    store.register_late_pass(|| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n+    store.register_late_pass(move |_| Box::new(large_stack_arrays::LargeStackArrays::new(array_size_threshold)));\n+    store.register_late_pass(move |_| Box::new(large_const_arrays::LargeConstArrays::new(array_size_threshold)));\n+    store.register_late_pass(|_| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n     store.register_early_pass(|| Box::new(as_conversions::AsConversions));\n-    store.register_late_pass(|| Box::new(let_underscore::LetUnderscore));\n+    store.register_late_pass(|_| Box::new(let_underscore::LetUnderscore));\n     store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n@@ -795,17 +795,17 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n-    store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n-    store.register_late_pass(|| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n-    store.register_late_pass(|| Box::new(unnamed_address::UnnamedAddress));\n-    store.register_late_pass(move || Box::new(dereference::Dereferencing::new(msrv)));\n-    store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n-    store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n-    store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n-    store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n-    store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n-    store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n-    store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n+    store.register_late_pass(move |_| Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n+    store.register_late_pass(|_| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n+    store.register_late_pass(|_| Box::new(unnamed_address::UnnamedAddress));\n+    store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv)));\n+    store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n+    store.register_late_pass(|_| Box::new(future_not_send::FutureNotSend));\n+    store.register_late_pass(|_| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|_| Box::new(if_not_else::IfNotElse));\n+    store.register_late_pass(|_| Box::new(equatable_if_let::PatternEquality));\n+    store.register_late_pass(|_| Box::new(manual_async_fn::ManualAsyncFn));\n+    store.register_late_pass(|_| Box::new(panic_in_result_fn::PanicInResultFn));\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || {\n         Box::new(non_expressive_names::NonExpressiveNames {\n@@ -814,92 +814,92 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n-    store.register_late_pass(|| Box::new(macro_use::MacroUseImports::default()));\n-    store.register_late_pass(|| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n-    store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n-    store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n-    store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n+    store.register_late_pass(|_| Box::new(macro_use::MacroUseImports::default()));\n+    store.register_late_pass(|_| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n+    store.register_late_pass(|_| Box::new(unwrap_in_result::UnwrapInResult));\n+    store.register_late_pass(|_| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n+    store.register_late_pass(|_| Box::new(async_yields_async::AsyncYieldsAsync));\n     let disallowed_methods = conf.disallowed_methods.clone();\n-    store.register_late_pass(move || Box::new(disallowed_methods::DisallowedMethods::new(disallowed_methods.clone())));\n+    store.register_late_pass(move |_| Box::new(disallowed_methods::DisallowedMethods::new(disallowed_methods.clone())));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n-    store.register_late_pass(|| Box::new(empty_drop::EmptyDrop));\n-    store.register_late_pass(|| Box::new(strings::StrToString));\n-    store.register_late_pass(|| Box::new(strings::StringToString));\n-    store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n-    store.register_late_pass(|| Box::new(vec_init_then_push::VecInitThenPush::default()));\n-    store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n-    store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n-    store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n-    store.register_late_pass(|| Box::new(bool_assert_comparison::BoolAssertComparison));\n+    store.register_late_pass(|_| Box::new(empty_drop::EmptyDrop));\n+    store.register_late_pass(|_| Box::new(strings::StrToString));\n+    store.register_late_pass(|_| Box::new(strings::StringToString));\n+    store.register_late_pass(|_| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n+    store.register_late_pass(|_| Box::new(vec_init_then_push::VecInitThenPush::default()));\n+    store.register_late_pass(|_| Box::new(redundant_slicing::RedundantSlicing));\n+    store.register_late_pass(|_| Box::new(from_str_radix_10::FromStrRadix10));\n+    store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n+    store.register_late_pass(|_| Box::new(bool_assert_comparison::BoolAssertComparison));\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n-    store.register_late_pass(|| Box::new(unused_async::UnusedAsync));\n+    store.register_late_pass(|_| Box::new(unused_async::UnusedAsync));\n     let disallowed_types = conf.disallowed_types.clone();\n-    store.register_late_pass(move || Box::new(disallowed_types::DisallowedTypes::new(disallowed_types.clone())));\n+    store.register_late_pass(move |_| Box::new(disallowed_types::DisallowedTypes::new(disallowed_types.clone())));\n     let import_renames = conf.enforced_import_renames.clone();\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(missing_enforced_import_rename::ImportRename::new(\n             import_renames.clone(),\n         ))\n     });\n     let scripts = conf.allowed_scripts.clone();\n     store.register_early_pass(move || Box::new(disallowed_script_idents::DisallowedScriptIdents::new(&scripts)));\n-    store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n-    store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n-    store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n-    store.register_late_pass(move || Box::new(manual_assert::ManualAssert));\n+    store.register_late_pass(|_| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n+    store.register_late_pass(move |_| Box::new(self_named_constructors::SelfNamedConstructors));\n+    store.register_late_pass(move |_| Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n+    store.register_late_pass(move |_| Box::new(manual_assert::ManualAssert));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(\n             enable_raw_pointer_heuristic_for_send,\n         ))\n     });\n-    store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move || Box::new(format_args::FormatArgs));\n-    store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n+    store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs));\n+    store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n-    store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n-    store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n-    store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n+    store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));\n+    store.register_late_pass(|_| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n+    store.register_late_pass(|_| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n-    store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n-    store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n+    store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv)));\n+    store.register_late_pass(|_| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));\n-    store.register_late_pass(|| Box::new(only_used_in_recursion::OnlyUsedInRecursion::default()));\n+    store.register_late_pass(|_| Box::new(only_used_in_recursion::OnlyUsedInRecursion::default()));\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n-    store.register_late_pass(move || Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n+    store.register_late_pass(move |_| Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(cargo::Cargo {\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n     store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n     store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n-    store.register_late_pass(|| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n+    store.register_late_pass(|_| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n     store.register_early_pass(|| Box::new(pub_use::PubUse));\n-    store.register_late_pass(|| Box::new(format_push_string::FormatPushString));\n+    store.register_late_pass(|_| Box::new(format_push_string::FormatPushString));\n     let max_include_file_size = conf.max_include_file_size;\n-    store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n-    store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n-    store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n+    store.register_late_pass(move |_| Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n+    store.register_late_pass(|_| Box::new(strings::TrimSplitWhitespace));\n+    store.register_late_pass(|_| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n-    store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n-    store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n-    store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n-    store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n-    store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n-    store.register_late_pass(move || Box::new(manual_retain::ManualRetain::new(msrv)));\n+    store.register_late_pass(|_| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n+    store.register_late_pass(|_| Box::new(mismatching_type_param_order::TypeParamMismatch));\n+    store.register_late_pass(|_| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n+    store.register_late_pass(|_| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n+    store.register_late_pass(move |_| Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv)));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n-    store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n-    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n-    store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n-    store.register_late_pass(|| Box::new(partialeq_to_none::PartialeqToNone));\n-    store.register_late_pass(|| Box::new(manual_string_new::ManualStringNew));\n-    store.register_late_pass(|| Box::new(unused_peekable::UnusedPeekable));\n+    store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n+    store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n+    store.register_late_pass(|_| Box::new(std_instead_of_core::StdReexports::default()));\n+    store.register_late_pass(|_| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n+    store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n+    store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));\n+    store.register_late_pass(|_| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }"}]}