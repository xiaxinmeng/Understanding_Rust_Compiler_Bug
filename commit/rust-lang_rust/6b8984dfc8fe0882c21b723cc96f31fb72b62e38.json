{"sha": "6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiODk4NGRmYzhmZTA4ODJjMjFiNzIzY2M5NmYzMWZiNzJiNjJlMzg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T08:25:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-06T08:25:33Z"}, "message": "Rollup merge of #48590 - tshepang:more-simple, r=frewsxcv\n\ndoc: no need for the reference\n\nAlso, we are well within line length limit", "tree": {"sha": "8babef91f3d52c32d3cfe4161b9a98f927a201d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8babef91f3d52c32d3cfe4161b9a98f927a201d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJanlB9CRBK7hj4Ov3rIwAAdHIIAKo2ZJ0zNqW2j7ujAM/m5VD6\nqLCvEF/PK+YD23QdiZENqBbwD6FGrWj+YAV6xAS9ZTzr6A9tG0YtbY+0vn4V2Q/+\nLMwza9qVEXbR7YKgEpMIqmpgXH0n6qpnK8XBqF/ynuExXGzZJCVozkcUaN/jc1k7\nhv45Km0bY+XpoR1GXb9lhr/aDKRGW3JE3xDn5ebExYT1j9Gb9MDZSvOGurGpL23M\n9eCaNBApLL1IJZHQNlv7FYAOCux5aAhxgQouvfNiha+Y8Y1KJqn9DGxtuitz6g3o\nLe2qJtBC6qgVuzQ7zzrP/iG9Uw9o0foW48//QSksW9r92ymzRLLiktVCx4c/5Ok=\n=f8v3\n-----END PGP SIGNATURE-----\n", "payload": "tree 8babef91f3d52c32d3cfe4161b9a98f927a201d5\nparent fe77f5d7649ed6c6738a91670ac1ff22e7b9a887\nparent df8dd3fd3ef2080c01360db38de610c13db1766e\nauthor kennytm <kennytm@gmail.com> 1520324733 +0800\ncommitter GitHub <noreply@github.com> 1520324733 +0800\n\nRollup merge of #48590 - tshepang:more-simple, r=frewsxcv\n\ndoc: no need for the reference\n\nAlso, we are well within line length limit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "html_url": "https://github.com/rust-lang/rust/commit/6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8984dfc8fe0882c21b723cc96f31fb72b62e38/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe77f5d7649ed6c6738a91670ac1ff22e7b9a887", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe77f5d7649ed6c6738a91670ac1ff22e7b9a887", "html_url": "https://github.com/rust-lang/rust/commit/fe77f5d7649ed6c6738a91670ac1ff22e7b9a887"}, {"sha": "df8dd3fd3ef2080c01360db38de610c13db1766e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8dd3fd3ef2080c01360db38de610c13db1766e", "html_url": "https://github.com/rust-lang/rust/commit/df8dd3fd3ef2080c01360db38de610c13db1766e"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "2cfbc09229342b46c404134db13b77b1ca4e749d", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6b8984dfc8fe0882c21b723cc96f31fb72b62e38/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8984dfc8fe0882c21b723cc96f31fb72b62e38/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=6b8984dfc8fe0882c21b723cc96f31fb72b62e38", "patch": "@@ -1180,26 +1180,27 @@ pub trait Iterator {\n     ///\n     /// // this iterator sequence is complex.\n     /// let sum = a.iter()\n-    ///             .cloned()\n-    ///             .filter(|&x| x % 2 == 0)\n-    ///             .fold(0, |sum, i| sum + i);\n+    ///     .cloned()\n+    ///     .filter(|x| x % 2 == 0)\n+    ///     .fold(0, |sum, i| sum + i);\n     ///\n     /// println!(\"{}\", sum);\n     ///\n     /// // let's add some inspect() calls to investigate what's happening\n     /// let sum = a.iter()\n-    ///             .cloned()\n-    ///             .inspect(|x| println!(\"about to filter: {}\", x))\n-    ///             .filter(|&x| x % 2 == 0)\n-    ///             .inspect(|x| println!(\"made it through filter: {}\", x))\n-    ///             .fold(0, |sum, i| sum + i);\n+    ///     .cloned()\n+    ///     .inspect(|x| println!(\"about to filter: {}\", x))\n+    ///     .filter(|x| x % 2 == 0)\n+    ///     .inspect(|x| println!(\"made it through filter: {}\", x))\n+    ///     .fold(0, |sum, i| sum + i);\n     ///\n     /// println!(\"{}\", sum);\n     /// ```\n     ///\n     /// This will print:\n     ///\n     /// ```text\n+    /// 6\n     /// about to filter: 1\n     /// about to filter: 4\n     /// made it through filter: 4\n@@ -1230,8 +1231,7 @@ pub trait Iterator {\n     ///\n     /// let iter = a.into_iter();\n     ///\n-    /// let sum: i32 = iter.take(5)\n-    ///                    .fold(0, |acc, &i| acc + i );\n+    /// let sum: i32 = iter.take(5).fold(0, |acc, i| acc + i );\n     ///\n     /// assert_eq!(sum, 6);\n     ///\n@@ -1245,9 +1245,7 @@ pub trait Iterator {\n     /// let mut iter = a.into_iter();\n     ///\n     /// // instead, we add in a .by_ref()\n-    /// let sum: i32 = iter.by_ref()\n-    ///                    .take(2)\n-    ///                    .fold(0, |acc, &i| acc + i );\n+    /// let sum: i32 = iter.by_ref().take(2).fold(0, |acc, i| acc + i );\n     ///\n     /// assert_eq!(sum, 3);\n     ///\n@@ -1304,9 +1302,7 @@ pub trait Iterator {\n     ///\n     /// let a = [1, 2, 3];\n     ///\n-    /// let doubled: VecDeque<i32> = a.iter()\n-    ///                               .map(|&x| x * 2)\n-    ///                               .collect();\n+    /// let doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n     ///\n     /// assert_eq!(2, doubled[0]);\n     /// assert_eq!(4, doubled[1]);\n@@ -1318,9 +1314,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let doubled = a.iter()\n-    ///                .map(|&x| x * 2)\n-    ///                .collect::<Vec<i32>>();\n+    /// let doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n     ///\n     /// assert_eq!(vec![2, 4, 6], doubled);\n     /// ```\n@@ -1331,9 +1325,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let doubled = a.iter()\n-    ///                .map(|&x| x * 2)\n-    ///                .collect::<Vec<_>>();\n+    /// let doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n     ///\n     /// assert_eq!(vec![2, 4, 6], doubled);\n     /// ```\n@@ -1344,9 +1336,9 @@ pub trait Iterator {\n     /// let chars = ['g', 'd', 'k', 'k', 'n'];\n     ///\n     /// let hello: String = chars.iter()\n-    ///                          .map(|&x| x as u8)\n-    ///                          .map(|x| (x + 1) as char)\n-    ///                          .collect();\n+    ///     .map(|&x| x as u8)\n+    ///     .map(|x| (x + 1) as char)\n+    ///     .collect();\n     ///\n     /// assert_eq!(\"hello\", hello);\n     /// ```\n@@ -1393,8 +1385,9 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let (even, odd): (Vec<i32>, Vec<i32>) = a.into_iter()\n-    ///                                          .partition(|&n| n % 2 == 0);\n+    /// let (even, odd): (Vec<i32>, Vec<i32>) = a\n+    ///     .into_iter()\n+    ///     .partition(|&n| n % 2 == 0);\n     ///\n     /// assert_eq!(even, vec![2]);\n     /// assert_eq!(odd, vec![1, 3]);\n@@ -1457,8 +1450,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3];\n     ///\n     /// // the checked sum of all of the elements of the array\n-    /// let sum = a.iter()\n-    ///            .try_fold(0i8, |acc, &x| acc.checked_add(x));\n+    /// let sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\n     ///\n     /// assert_eq!(sum, Some(6));\n     /// ```\n@@ -1556,8 +1548,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3];\n     ///\n     /// // the sum of all of the elements of the array\n-    /// let sum = a.iter()\n-    ///            .fold(0, |acc, &x| acc + x);\n+    /// let sum = a.iter().fold(0, |acc, x| acc + x);\n     ///\n     /// assert_eq!(sum, 6);\n     /// ```"}]}