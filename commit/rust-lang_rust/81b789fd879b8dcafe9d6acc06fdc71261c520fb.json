{"sha": "81b789fd879b8dcafe9d6acc06fdc71261c520fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjc4OWZkODc5YjhkY2FmZTlkNmFjYzA2ZmRjNzEyNjFjNTIwZmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T14:02:32Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(19): Already start LLVM while still translating.", "tree": {"sha": "d36ae833491d9852426dd0f5743ab960c5c3dd9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36ae833491d9852426dd0f5743ab960c5c3dd9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b789fd879b8dcafe9d6acc06fdc71261c520fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b789fd879b8dcafe9d6acc06fdc71261c520fb", "html_url": "https://github.com/rust-lang/rust/commit/81b789fd879b8dcafe9d6acc06fdc71261c520fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b789fd879b8dcafe9d6acc06fdc71261c520fb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e09d1e1709d9228cc8e0deba834e6752354f107", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e09d1e1709d9228cc8e0deba834e6752354f107", "html_url": "https://github.com/rust-lang/rust/commit/7e09d1e1709d9228cc8e0deba834e6752354f107"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "6e661a5a8c6a4c278d2e15ffe44dea3bfd4ed757", "filename": "src/librustc_trans/assert_module_sources.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/81b789fd879b8dcafe9d6acc06fdc71261c520fb/src%2Flibrustc_trans%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b789fd879b8dcafe9d6acc06fdc71261c520fb/src%2Flibrustc_trans%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fassert_module_sources.rs?ref=81b789fd879b8dcafe9d6acc06fdc71261c520fb", "patch": "@@ -37,11 +37,22 @@ use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_TRANSLATED};\n const MODULE: &'static str = \"module\";\n const CFG: &'static str = \"cfg\";\n \n-#[derive(Debug, PartialEq)]\n-enum Disposition { Reused, Translated }\n+#[derive(Debug, PartialEq, Clone, Copy)]\n+pub enum Disposition { Reused, Translated }\n+\n+impl ModuleTranslation {\n+    pub fn disposition(&self) -> (String, Disposition) {\n+        let disposition = match self.source {\n+            ModuleSource::Preexisting(_) => Disposition::Reused,\n+            ModuleSource::Translated(_) => Disposition::Translated,\n+        };\n+\n+        (self.name.clone(), disposition)\n+    }\n+}\n \n pub(crate) fn assert_module_sources<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                              modules: &[ModuleTranslation]) {\n+                                              modules: &[(String, Disposition)]) {\n     let _ignore = tcx.dep_graph.in_ignore();\n \n     if tcx.sess.opts.incremental.is_none() {\n@@ -56,7 +67,7 @@ pub(crate) fn assert_module_sources<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n struct AssertModuleSource<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    modules: &'a [ModuleTranslation],\n+    modules: &'a [(String, Disposition)],\n }\n \n impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n@@ -75,15 +86,15 @@ impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n         }\n \n         let mname = self.field(attr, MODULE);\n-        let mtrans = self.modules.iter().find(|mtrans| *mtrans.name == *mname.as_str());\n+        let mtrans = self.modules.iter().find(|&&(ref name, _)| name == mname.as_str());\n         let mtrans = match mtrans {\n             Some(m) => m,\n             None => {\n                 debug!(\"module name `{}` not found amongst:\", mname);\n-                for mtrans in self.modules {\n+                for &(ref name, ref disposition) in self.modules {\n                     debug!(\"module named `{}` with disposition {:?}\",\n-                           mtrans.name,\n-                           self.disposition(mtrans));\n+                           name,\n+                           disposition);\n                 }\n \n                 self.tcx.sess.span_err(\n@@ -93,7 +104,7 @@ impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n             }\n         };\n \n-        let mtrans_disposition = self.disposition(mtrans);\n+        let mtrans_disposition = mtrans.1;\n         if disposition != mtrans_disposition {\n             self.tcx.sess.span_err(\n                 attr.span,\n@@ -104,13 +115,6 @@ impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n         }\n     }\n \n-    fn disposition(&self, mtrans: &ModuleTranslation) -> Disposition {\n-        match mtrans.source {\n-            ModuleSource::Preexisting(_) => Disposition::Reused,\n-            ModuleSource::Translated(_) => Disposition::Translated,\n-        }\n-    }\n-\n     fn field(&self, attr: &ast::Attribute, name: &str) -> ast::Name {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(name) {"}, {"sha": "6c12a4989f5b2b46d3fd7a239e343cd8a416cf98", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81b789fd879b8dcafe9d6acc06fdc71261c520fb/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b789fd879b8dcafe9d6acc06fdc71261c520fb/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=81b789fd879b8dcafe9d6acc06fdc71261c520fb", "patch": "@@ -678,7 +678,6 @@ pub fn run_passes(sess: &Session,\n     };\n \n     // Figure out what we actually need to build.\n-\n     let mut modules_config = ModuleConfig::new(sess, sess.opts.cg.passes.clone());\n     let mut metadata_config = ModuleConfig::new(sess, vec![]);\n     let mut allocator_config = ModuleConfig::new(sess, vec![]);\n@@ -1615,4 +1614,8 @@ impl OngoingCrateTranslation {\n     pub fn signal_translation_done(&self) {\n         drop(self.coordinator_send.send(Message::TranslationDone));\n     }\n+\n+    pub fn check_for_errors(&self, sess: &Session) {\n+        self.shared_emitter_main.check(sess, false);\n+    }\n }"}, {"sha": "0137fa086932c9308ecc4de133a3ceb9264abe0e", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/81b789fd879b8dcafe9d6acc06fdc71261c520fb/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b789fd879b8dcafe9d6acc06fdc71261c520fb/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=81b789fd879b8dcafe9d6acc06fdc71261c520fb", "patch": "@@ -1024,24 +1024,34 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         linker_info,\n         no_integrated_as);\n \n+    ongoing_translation.submit_translated_module_to_llvm(tcx.sess, metadata_module);\n+\n     let translation_items = Arc::new(translation_items);\n \n     let mut all_stats = Stats::default();\n-    let modules: Vec<ModuleTranslation> = codegen_units\n-        .into_iter()\n-        .map(|cgu| {\n-            let dep_node = cgu.work_product_dep_node();\n-            let ((stats, module), _) =\n-                tcx.dep_graph.with_task(dep_node,\n-                                        AssertDepGraphSafe(&shared_ccx),\n-                                        AssertDepGraphSafe((cgu,\n-                                                            translation_items.clone(),\n-                                                            exported_symbols.clone())),\n-                                        module_translation);\n-            all_stats.extend(stats);\n-            module\n-        })\n-        .collect();\n+    let mut module_dispositions = tcx.sess.opts.incremental.as_ref().map(|_| Vec::new());\n+\n+    for cgu in codegen_units.into_iter() {\n+        ongoing_translation.check_for_errors(tcx.sess);\n+        let dep_node = cgu.work_product_dep_node();\n+        let ((stats, module), _) =\n+            tcx.dep_graph.with_task(dep_node,\n+                                    AssertDepGraphSafe(&shared_ccx),\n+                                    AssertDepGraphSafe((cgu,\n+                                                        translation_items.clone(),\n+                                                        exported_symbols.clone())),\n+                                    module_translation);\n+        all_stats.extend(stats);\n+\n+        if let Some(ref mut module_dispositions) = module_dispositions {\n+            module_dispositions.push(module.disposition());\n+        }\n+        ongoing_translation.submit_translated_module_to_llvm(tcx.sess, module);\n+    }\n+\n+    if let Some(module_dispositions) = module_dispositions {\n+        assert_module_sources::assert_module_sources(tcx, &module_dispositions);\n+    }\n \n     fn module_translation<'a, 'tcx>(\n         scx: AssertDepGraphSafe<&SharedCrateContext<'a, 'tcx>>,\n@@ -1175,8 +1185,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         (lcx.into_stats(), module)\n     }\n \n-    assert_module_sources::assert_module_sources(tcx, &modules);\n-\n     symbol_names_test::report_symbol_names(tcx);\n \n     if shared_ccx.sess().trans_stats() {\n@@ -1207,8 +1215,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let sess = shared_ccx.sess();\n-\n     // Translate an allocator shim, if any\n     //\n     // If LTO is enabled and we've got some previous LLVM module we translated\n@@ -1244,23 +1250,17 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         None\n     };\n \n-    assert_and_save_dep_graph(tcx,\n-                              incremental_hashes_map,\n-                              metadata_incr_hashes,\n-                              link_meta);\n-\n-    ongoing_translation.submit_translated_module_to_llvm(sess, metadata_module);\n-\n-    for mtrans in modules {\n-        ongoing_translation.submit_translated_module_to_llvm(sess, mtrans);\n-    }\n-\n     if let Some(allocator_module) = allocator_module {\n-        ongoing_translation.submit_translated_module_to_llvm(sess, allocator_module);\n+        ongoing_translation.submit_translated_module_to_llvm(tcx.sess, allocator_module);\n     }\n \n+    ongoing_translation.check_for_errors(tcx.sess);\n     ongoing_translation.signal_translation_done();\n \n+    assert_and_save_dep_graph(tcx,\n+                              incremental_hashes_map,\n+                              metadata_incr_hashes,\n+                              link_meta);\n     ongoing_translation\n }\n "}]}