{"sha": "27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "node_id": "C_kwDOAAsO6NoAKDI3ZDc2MTViYjRmMjBjZDM1NDZiZjk4ZDdhZDJmODEyZDVkYzRlM2M", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-03T05:58:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-03T05:58:56Z"}, "message": "Rollup merge of #93097 - GuillaumeGomez:settings-js, r=jsha\n\nSwitch settings menu to full js\n\nSince the settings can only be set when the JS is enabled, it's not really a problem. It also fixes a debate we had around the themes not being accessible easily before.\n\n![Screenshot from 2022-01-19 23-06-59](https://user-images.githubusercontent.com/3050060/150221936-fd1a1e76-06b6-4416-a653-dbae111979ed.png)\n\nYou can test it [here](https://rustdoc.crud.net/imperio/settings-js/doc/foo/index.html).\n\nr? ``@jsha``", "tree": {"sha": "fee4c92152fc9539f06c3f5d0a58115f3159e061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee4c92152fc9539f06c3f5d0a58115f3159e061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJicMShCRBK7hj4Ov3rIwAA7tYIABQzu0rqoBPrhgp7E0a9xaJL\n36ogqXHkjQoryMt3t2CeYBEsg8Cmac6sw3gqvHQ27xkQHR9mYhFD41CXK3FLEhl4\nxu9xMNKH0xbl8agehO3bGUlbeVWVhA+OkfBZ9LDYhJgsiA5XjoI/BM4+C1z3ecyi\n7dtSt6PPF7gME26AQIvRGBAGh9SKcVwyOaQJ49HYAv+zJZnQOVAKSh+5WHifSrU3\nty8CEah/LMvZ8MPchRc6DX+UJMjRUciaorTrxHD948qEsryHFJbwISAXpBA5UoHn\nctRpQbu+wpHBJKZcfjKm3XeYYCnemUNwB9JzPCFeHlNubGeBmIGllraWx0RRI+g=\n=PqKw\n-----END PGP SIGNATURE-----\n", "payload": "tree fee4c92152fc9539f06c3f5d0a58115f3159e061\nparent c110cfa161aab391bd37c16a95b8330bfc7e54ce\nparent 73688e40216f72a57577b39acfb9180322a41362\nauthor Yuki Okushi <jtitor@2k36.org> 1651557536 +0900\ncommitter GitHub <noreply@github.com> 1651557536 +0900\n\nRollup merge of #93097 - GuillaumeGomez:settings-js, r=jsha\n\nSwitch settings menu to full js\n\nSince the settings can only be set when the JS is enabled, it's not really a problem. It also fixes a debate we had around the themes not being accessible easily before.\n\n![Screenshot from 2022-01-19 23-06-59](https://user-images.githubusercontent.com/3050060/150221936-fd1a1e76-06b6-4416-a653-dbae111979ed.png)\n\nYou can test it [here](https://rustdoc.crud.net/imperio/settings-js/doc/foo/index.html).\n\nr? ``@jsha``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "html_url": "https://github.com/rust-lang/rust/commit/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c110cfa161aab391bd37c16a95b8330bfc7e54ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c110cfa161aab391bd37c16a95b8330bfc7e54ce", "html_url": "https://github.com/rust-lang/rust/commit/c110cfa161aab391bd37c16a95b8330bfc7e54ce"}, {"sha": "73688e40216f72a57577b39acfb9180322a41362", "url": "https://api.github.com/repos/rust-lang/rust/commits/73688e40216f72a57577b39acfb9180322a41362", "html_url": "https://github.com/rust-lang/rust/commit/73688e40216f72a57577b39acfb9180322a41362"}], "stats": {"total": 645, "additions": 439, "deletions": 206}, "files": [{"sha": "56a085c2982508b3f50c988d5188f787413e0708", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -1440,6 +1440,10 @@ fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     let mut map = FxHashMap::default();\n     // This is the list of IDs used in Javascript.\n     map.insert(\"help\".into(), 1);\n+    map.insert(\"settings\".into(), 1);\n+    map.insert(\"not-displayed\".into(), 1);\n+    map.insert(\"alternative-display\".into(), 1);\n+    map.insert(\"search\".into(), 1);\n     // This is the list of IDs used in HTML generated in Rust (including the ones\n     // used in tera template files).\n     map.insert(\"mainThemeStyle\".into(), 1);\n@@ -1449,7 +1453,6 @@ fn init_id_map() -> FxHashMap<Cow<'static, str>, usize> {\n     map.insert(\"settings-menu\".into(), 1);\n     map.insert(\"help-button\".into(), 1);\n     map.insert(\"main-content\".into(), 1);\n-    map.insert(\"search\".into(), 1);\n     map.insert(\"crate-search\".into(), 1);\n     map.insert(\"render-detail\".into(), 1);\n     map.insert(\"toggle-all-docs\".into(), 1);"}, {"sha": "a30c533aa48c8f04bfd64e9155e6bc368c2dc1e7", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -17,8 +17,8 @@ use super::print_item::{full_path, item_path, print_item};\n use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, scrape_examples_help, settings, AllTypes,\n-    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, scrape_examples_help, AllTypes, LinkFromSrc, NameDoc,\n+    StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -589,21 +589,18 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         page.root_path = \"./\";\n \n         let sidebar = \"<h2 class=\\\"location\\\">Settings</h2><div class=\\\"sidebar-elems\\\"></div>\";\n-        let theme_names: Vec<String> = self\n-            .shared\n-            .style_files\n-            .iter()\n-            .map(StylePath::basename)\n-            .collect::<Result<_, Error>>()?;\n         let v = layout::render(\n             &self.shared.layout,\n             &page,\n             sidebar,\n-            settings(\n-                self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n-                &self.shared.resource_suffix,\n-                theme_names,\n-            )?,\n+            |buf: &mut Buffer| {\n+                write!(\n+                    buf,\n+                    \"<script defer src=\\\"{}settings{}.js\\\"></script>\",\n+                    page.static_root_path.unwrap_or(\"\"),\n+                    page.resource_suffix\n+                )\n+            },\n             &self.shared.style_files,\n         );\n         self.shared.fs.write(settings_file, v)?;"}, {"sha": "fedeb449b2e0e9a39aa96eda57a8efa388e818da", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -334,134 +334,6 @@ impl AllTypes {\n     }\n }\n \n-#[derive(Debug)]\n-enum Setting {\n-    Section {\n-        description: &'static str,\n-        sub_settings: Vec<Setting>,\n-    },\n-    Toggle {\n-        js_data_name: &'static str,\n-        description: &'static str,\n-        default_value: bool,\n-    },\n-    Select {\n-        js_data_name: &'static str,\n-        description: &'static str,\n-        default_value: &'static str,\n-        options: Vec<String>,\n-    },\n-}\n-\n-impl Setting {\n-    fn display(&self, root_path: &str, suffix: &str) -> String {\n-        match *self {\n-            Setting::Section { description, ref sub_settings } => format!(\n-                \"<div class=\\\"setting-line\\\">\\\n-                     <div class=\\\"title\\\">{}</div>\\\n-                     <div class=\\\"sub-settings\\\">{}</div>\n-                 </div>\",\n-                description,\n-                sub_settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>()\n-            ),\n-            Setting::Toggle { js_data_name, description, default_value } => format!(\n-                \"<div class=\\\"setting-line\\\">\\\n-                     <label class=\\\"toggle\\\">\\\n-                     <input type=\\\"checkbox\\\" id=\\\"{}\\\" {}>\\\n-                     <span class=\\\"slider\\\"></span>\\\n-                     </label>\\\n-                     <div>{}</div>\\\n-                 </div>\",\n-                js_data_name,\n-                if default_value { \" checked\" } else { \"\" },\n-                description,\n-            ),\n-            Setting::Select { js_data_name, description, default_value, ref options } => format!(\n-                \"<div class=\\\"setting-line\\\"><div class=\\\"radio-line\\\" id=\\\"{}\\\"><span class=\\\"setting-name\\\">{}</span><div class=\\\"choices\\\">{}</div></div></div>\",\n-                js_data_name,\n-                description,\n-                options\n-                    .iter()\n-                    .map(|opt| format!(\n-                        \"<label for=\\\"{js_data_name}-{name}\\\" class=\\\"choice\\\">\n-                           <input type=\\\"radio\\\" name=\\\"{js_data_name}\\\" id=\\\"{js_data_name}-{name}\\\" value=\\\"{name}\\\" {checked}>\\\n-                           {name}\\\n-                         </label>\",\n-                        js_data_name = js_data_name,\n-                        name = opt,\n-                        checked = if opt == default_value { \"checked\" } else { \"\" },\n-                    ))\n-                    .collect::<String>(),\n-            ),\n-        }\n-    }\n-}\n-\n-impl From<(&'static str, &'static str, bool)> for Setting {\n-    fn from(values: (&'static str, &'static str, bool)) -> Setting {\n-        Setting::Toggle { js_data_name: values.0, description: values.1, default_value: values.2 }\n-    }\n-}\n-\n-impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n-    fn from(values: (&'static str, Vec<T>)) -> Setting {\n-        Setting::Section {\n-            description: values.0,\n-            sub_settings: values.1.into_iter().map(|v| v.into()).collect::<Vec<_>>(),\n-        }\n-    }\n-}\n-\n-fn settings(root_path: &str, suffix: &str, theme_names: Vec<String>) -> Result<String, Error> {\n-    // (id, explanation, default value)\n-    let settings: &[Setting] = &[\n-        Setting::from((\"use-system-theme\", \"Use system theme\", true)),\n-        Setting::Select {\n-            js_data_name: \"theme\",\n-            description: \"Theme\",\n-            default_value: \"light\",\n-            options: theme_names.clone(),\n-        },\n-        Setting::Select {\n-            js_data_name: \"preferred-light-theme\",\n-            description: \"Preferred light theme\",\n-            default_value: \"light\",\n-            options: theme_names.clone(),\n-        },\n-        Setting::Select {\n-            js_data_name: \"preferred-dark-theme\",\n-            description: \"Preferred dark theme\",\n-            default_value: \"dark\",\n-            options: theme_names,\n-        },\n-        (\"auto-hide-large-items\", \"Auto-hide item contents for large items.\", true).into(),\n-        (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n-        (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", false)\n-            .into(),\n-        (\"go-to-only-result\", \"Directly go to item in search if there is only one result\", false)\n-            .into(),\n-        (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n-        (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false).into(),\n-    ];\n-\n-    Ok(format!(\n-        \"<div class=\\\"main-heading\\\">\n-            <h1 class=\\\"fqn\\\">\\\n-                <span class=\\\"in-band\\\">Rustdoc settings</span>\\\n-            </h1>\\\n-            <span class=\\\"out-of-band\\\">\\\n-            <a id=\\\"back\\\" href=\\\"javascript:void(0)\\\">Back</a>\\\n-            </span>\\\n-        </div>\\\n-        <div class=\\\"settings\\\">{}</div>\\\n-        <link rel=\\\"stylesheet\\\" href=\\\"{root_path}settings{suffix}.css\\\">\\\n-        <script src=\\\"{root_path}settings{suffix}.js\\\"></script>\",\n-        settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n-        root_path = root_path,\n-        suffix = suffix\n-    ))\n-}\n-\n fn scrape_examples_help(shared: &SharedContext<'_>) -> String {\n     let mut content = SCRAPE_EXAMPLES_HELP_MD.to_owned();\n     content.push_str(&format!("}, {"sha": "f20061c65dd1b6f94cdfd37d2f371ef819ffaeb9", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 145, "deletions": 34, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -57,11 +57,20 @@ function resourcePath(basename, extension) {\n     return getVar(\"root-path\") + basename + getVar(\"resource-suffix\") + extension;\n }\n \n+function hideMain() {\n+    addClass(document.getElementById(MAIN_ID), \"hidden\");\n+}\n+\n+function showMain() {\n+    removeClass(document.getElementById(MAIN_ID), \"hidden\");\n+}\n+\n (function () {\n     window.rootPath = getVar(\"root-path\");\n     window.currentCrate = getVar(\"current-crate\");\n     window.searchJS =  resourcePath(\"search\", \".js\");\n     window.searchIndexJS = resourcePath(\"search-index\", \".js\");\n+    window.settingsJS = resourcePath(\"settings\", \".js\");\n     const sidebarVars = document.getElementById(\"sidebar-vars\");\n     if (sidebarVars) {\n         window.sidebarCurrent = {\n@@ -104,6 +113,9 @@ function getVirtualKey(ev) {\n const THEME_PICKER_ELEMENT_ID = \"theme-picker\";\n const THEMES_ELEMENT_ID = \"theme-choices\";\n const MAIN_ID = \"main-content\";\n+const SETTINGS_BUTTON_ID = \"settings-menu\";\n+const ALTERNATIVE_DISPLAY_ID = \"alternative-display\";\n+const NOT_DISPLAYED_ID = \"not-displayed\";\n \n function getThemesElement() {\n     return document.getElementById(THEMES_ELEMENT_ID);\n@@ -113,6 +125,10 @@ function getThemePickerElement() {\n     return document.getElementById(THEME_PICKER_ELEMENT_ID);\n }\n \n+function getSettingsButton() {\n+    return document.getElementById(SETTINGS_BUTTON_ID);\n+}\n+\n // Returns the current URL without any query parameter or hash.\n function getNakedUrl() {\n     return window.location.href.split(\"?\")[0].split(\"#\")[0];\n@@ -136,6 +152,10 @@ function hideThemeButtonState() {\n     themePicker.style.borderBottomLeftRadius = \"3px\";\n }\n \n+window.hideSettings = function() {\n+    // Does nothing by default.\n+};\n+\n // Set up the theme picker list.\n (function () {\n     if (!document.location.href.startsWith(\"file:///\")) {\n@@ -182,14 +202,120 @@ function hideThemeButtonState() {\n     });\n }());\n \n+/**\n+ * This function inserts `newNode` after `referenceNode`. It doesn't work if `referenceNode`\n+ * doesn't have a parent node.\n+ *\n+ * @param {HTMLElement} newNode\n+ * @param {HTMLElement} referenceNode\n+ */\n+function insertAfter(newNode, referenceNode) {\n+    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n+}\n+\n+/**\n+ * This function creates a new `<section>` with the given `id` and `classes` if it doesn't already\n+ * exist.\n+ *\n+ * More information about this in `switchDisplayedElement` documentation.\n+ *\n+ * @param {string} id\n+ * @param {string} classes\n+ */\n+function getOrCreateSection(id, classes) {\n+    let el = document.getElementById(id);\n+\n+    if (!el) {\n+        el = document.createElement(\"section\");\n+        el.id = id;\n+        el.className = classes;\n+        insertAfter(el, document.getElementById(MAIN_ID));\n+    }\n+    return el;\n+}\n+\n+/**\n+ * Returns the `<section>` element which contains the displayed element.\n+ *\n+ * @return {HTMLElement}\n+ */\n+function getAlternativeDisplayElem() {\n+    return getOrCreateSection(ALTERNATIVE_DISPLAY_ID, \"content hidden\");\n+}\n+\n+/**\n+ * Returns the `<section>` element which contains the not-displayed elements.\n+ *\n+ * @return {HTMLElement}\n+ */\n+function getNotDisplayedElem() {\n+    return getOrCreateSection(NOT_DISPLAYED_ID, \"hidden\");\n+}\n+\n+/**\n+ * To nicely switch between displayed \"extra\" elements (such as search results or settings menu)\n+ * and to alternate between the displayed and not displayed elements, we hold them in two different\n+ * `<section>` elements. They work in pair: one holds the hidden elements while the other\n+ * contains the displayed element (there can be only one at the same time!). So basically, we switch\n+ * elements between the two `<section>` elements.\n+ *\n+ * @param {HTMLElement} elemToDisplay\n+ */\n+function switchDisplayedElement(elemToDisplay) {\n+    const el = getAlternativeDisplayElem();\n+\n+    if (el.children.length > 0) {\n+        getNotDisplayedElem().appendChild(el.firstElementChild);\n+    }\n+    if (elemToDisplay === null) {\n+        addClass(el, \"hidden\");\n+        showMain();\n+        return;\n+    }\n+    el.appendChild(elemToDisplay);\n+    hideMain();\n+    removeClass(el, \"hidden\");\n+}\n+\n+function browserSupportsHistoryApi() {\n+    return window.history && typeof window.history.pushState === \"function\";\n+}\n+\n+// eslint-disable-next-line no-unused-vars\n+function loadCss(cssFileName) {\n+    const link = document.createElement(\"link\");\n+    link.href = resourcePath(cssFileName, \".css\");\n+    link.type = \"text/css\";\n+    link.rel = \"stylesheet\";\n+    document.getElementsByTagName(\"head\")[0].appendChild(link);\n+}\n+\n (function() {\n     \"use strict\";\n \n+    function loadScript(url) {\n+        const script = document.createElement('script');\n+        script.src = url;\n+        document.head.append(script);\n+    }\n+\n+\n+    getSettingsButton().onclick = function(event) {\n+        event.preventDefault();\n+        loadScript(window.settingsJS);\n+    };\n+\n     window.searchState = {\n         loadingText: \"Loading search results...\",\n         input: document.getElementsByClassName(\"search-input\")[0],\n         outputElement: function() {\n-            return document.getElementById(\"search\");\n+            let el = document.getElementById(\"search\");\n+            if (!el) {\n+                el = document.createElement(\"section\");\n+                el.id = \"search\";\n+                getNotDisplayedElem().appendChild(el);\n+            }\n+            return el;\n         },\n         title: document.title,\n         titleBeforeSearch: document.title,\n@@ -208,6 +334,9 @@ function hideThemeButtonState() {\n                 searchState.timeout = null;\n             }\n         },\n+        isDisplayed: function() {\n+            return searchState.outputElement().parentElement.id === ALTERNATIVE_DISPLAY_ID;\n+        },\n         // Sets the focus on the search bar at the top of the page\n         focus: function() {\n             searchState.input.focus();\n@@ -220,20 +349,15 @@ function hideThemeButtonState() {\n             if (search === null || typeof search === 'undefined') {\n                 search = searchState.outputElement();\n             }\n-            addClass(main, \"hidden\");\n-            removeClass(search, \"hidden\");\n+            switchDisplayedElement(search);\n             searchState.mouseMovedAfterSearch = false;\n             document.title = searchState.title;\n         },\n-        hideResults: function(search) {\n-            if (search === null || typeof search === 'undefined') {\n-                search = searchState.outputElement();\n-            }\n-            addClass(search, \"hidden\");\n-            removeClass(main, \"hidden\");\n+        hideResults: function() {\n+            switchDisplayedElement(null);\n             document.title = searchState.titleBeforeSearch;\n             // We also remove the query parameter from the URL.\n-            if (searchState.browserSupportsHistoryApi()) {\n+            if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, window.currentCrate + \" - Rust\",\n                     getNakedUrl() + window.location.hash);\n             }\n@@ -248,20 +372,11 @@ function hideThemeButtonState() {\n                 });\n             return params;\n         },\n-        browserSupportsHistoryApi: function() {\n-            return window.history && typeof window.history.pushState === \"function\";\n-        },\n         setup: function() {\n             const search_input = searchState.input;\n             if (!searchState.input) {\n                 return;\n             }\n-            function loadScript(url) {\n-                const script = document.createElement('script');\n-                script.src = url;\n-                document.head.append(script);\n-            }\n-\n             let searchLoaded = false;\n             function loadSearch() {\n                 if (!searchLoaded) {\n@@ -303,23 +418,20 @@ function hideThemeButtonState() {\n     }\n \n     const toggleAllDocsId = \"toggle-all-docs\";\n-    const main = document.getElementById(MAIN_ID);\n     let savedHash = \"\";\n \n     function handleHashes(ev) {\n-        let elem;\n-        const search = searchState.outputElement();\n-        if (ev !== null && search && !hasClass(search, \"hidden\") && ev.newURL) {\n+        if (ev !== null && searchState.isDisplayed() && ev.newURL) {\n             // This block occurs when clicking on an element in the navbar while\n             // in a search.\n-            searchState.hideResults(search);\n+            switchDisplayedElement(null);\n             const hash = ev.newURL.slice(ev.newURL.indexOf(\"#\") + 1);\n-            if (searchState.browserSupportsHistoryApi()) {\n+            if (browserSupportsHistoryApi()) {\n                 // `window.location.search`` contains all the query parameters, not just `search`.\n                 history.replaceState(null, \"\",\n                     getNakedUrl() + window.location.search + \"#\" + hash);\n             }\n-            elem = document.getElementById(hash);\n+            const elem = document.getElementById(hash);\n             if (elem) {\n                 elem.scrollIntoView();\n             }\n@@ -389,14 +501,17 @@ function hideThemeButtonState() {\n     }\n \n     function handleEscape(ev) {\n+        searchState.clearInputTimeout();\n         const help = getHelpElement(false);\n-        const search = searchState.outputElement();\n         if (help && !hasClass(help, \"hidden\")) {\n             displayHelp(false, ev, help);\n-        } else if (search && !hasClass(search, \"hidden\")) {\n-            searchState.clearInputTimeout();\n+        } else {\n+            switchDisplayedElement(null);\n+            if (browserSupportsHistoryApi()) {\n+                history.replaceState(null, window.currentCrate + \" - Rust\",\n+                    getNakedUrl() + window.location.hash);\n+            }\n             ev.preventDefault();\n-            searchState.hideResults(search);\n         }\n         searchState.defocus();\n         hideThemeButtonState();\n@@ -733,10 +848,6 @@ function hideThemeButtonState() {\n         innerToggle.children[0].innerText = labelForToggleButton(sectionIsCollapsed);\n     }\n \n-    function insertAfter(newNode, referenceNode) {\n-        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n-    }\n-\n     (function() {\n         const toggles = document.getElementById(toggleAllDocsId);\n         if (toggles) {"}, {"sha": "84600fa3e094f6bfc96fe868e0c8f538033979a8", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -2,7 +2,7 @@\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n /* global addClass, getNakedUrl, getSettingValue, hasOwnPropertyRustdoc, initSearch, onEach */\n-/* global onEachLazy, removeClass, searchState, hasClass */\n+/* global onEachLazy, removeClass, searchState, browserSupportsHistoryApi */\n \n (function() {\n // This mapping table should match the discriminants of\n@@ -1786,8 +1786,9 @@ window.initSearch = function(rawSearchIndex) {\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n-        if (searchState.browserSupportsHistoryApi()) {\n+        if (browserSupportsHistoryApi()) {\n             const newURL = buildUrl(query.original, filterCrates);\n+\n             if (!history.state && !params.search) {\n                 history.pushState(null, \"\", newURL);\n             } else {\n@@ -1965,10 +1966,9 @@ window.initSearch = function(rawSearchIndex) {\n         if (!searchState.input) {\n             return;\n         }\n-        const search = searchState.outputElement();\n-        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n-            searchState.showResults(search);\n-            if (searchState.browserSupportsHistoryApi()) {\n+        if (search_input.value !== \"\" && !searchState.isDisplayed()) {\n+            searchState.showResults();\n+            if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, \"\",\n                     buildUrl(search_input.value, getFilterCrates()));\n             }\n@@ -1980,7 +1980,7 @@ window.initSearch = function(rawSearchIndex) {\n         const searchAfter500ms = function() {\n             searchState.clearInputTimeout();\n             if (searchState.input.value.length === 0) {\n-                if (searchState.browserSupportsHistoryApi()) {\n+                if (browserSupportsHistoryApi()) {\n                     history.replaceState(null, window.currentCrate + \" - Rust\",\n                         getNakedUrl() + window.location.hash);\n                 }\n@@ -2058,7 +2058,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         // Push and pop states are used to add search results to the browser\n         // history.\n-        if (searchState.browserSupportsHistoryApi()) {\n+        if (browserSupportsHistoryApi()) {\n             // Store the previous <title> so we can revert back to it later.\n             const previousTitle = document.title;\n "}, {"sha": "a2f8d56fb320b8b3fa8198eecbea0bd1bca7477e", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 185, "deletions": 10, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -2,10 +2,13 @@\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n // Local js definitions:\n-/* global getSettingValue, getVirtualKey, onEachLazy, updateLocalStorage, updateSystemTheme */\n-/* global addClass, removeClass */\n+/* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme, loadCss */\n+/* global addClass, removeClass, onEach, onEachLazy, NOT_DISPLAYED_ID */\n+/* global MAIN_ID, getVar, getSettingsButton, switchDisplayedElement, getNotDisplayedElem */\n \n (function () {\n+    const isSettingsPage = window.location.pathname.endsWith(\"/settings.html\");\n+\n     function changeSetting(settingName, value) {\n         updateLocalStorage(settingName, value);\n \n@@ -55,9 +58,9 @@\n         }\n     }\n \n-    function setEvents() {\n+    function setEvents(settingsElement) {\n         updateLightAndDark();\n-        onEachLazy(document.getElementsByClassName(\"slider\"), function(elem) {\n+        onEachLazy(settingsElement.getElementsByClassName(\"slider\"), function(elem) {\n             const toggle = elem.previousElementSibling;\n             const settingId = toggle.id;\n             const settingValue = getSettingValue(settingId);\n@@ -70,7 +73,7 @@\n             toggle.onkeyup = handleKey;\n             toggle.onkeyrelease = handleKey;\n         });\n-        onEachLazy(document.getElementsByClassName(\"select-wrapper\"), function(elem) {\n+        onEachLazy(settingsElement.getElementsByClassName(\"select-wrapper\"), function(elem) {\n             const select = elem.getElementsByTagName(\"select\")[0];\n             const settingId = select.id;\n             const settingValue = getSettingValue(settingId);\n@@ -81,7 +84,7 @@\n                 changeSetting(this.id, this.value);\n             };\n         });\n-        onEachLazy(document.querySelectorAll(\"input[type=\\\"radio\\\"]\"), function(elem) {\n+        onEachLazy(settingsElement.querySelectorAll(\"input[type=\\\"radio\\\"]\"), function(elem) {\n             const settingId = elem.name;\n             const settingValue = getSettingValue(settingId);\n             if (settingValue !== null && settingValue !== \"null\") {\n@@ -91,10 +94,182 @@\n                 changeSetting(ev.target.name, ev.target.value);\n             });\n         });\n-        document.getElementById(\"back\").addEventListener(\"click\", function() {\n-            history.back();\n-        });\n     }\n \n-    window.addEventListener(\"DOMContentLoaded\", setEvents);\n+    /**\n+     * This function builds the sections inside the \"settings page\". It takes a `settings` list\n+     * as argument which describes each setting and how to render it. It returns a string\n+     * representing the raw HTML.\n+     *\n+     * @param {Array<Object>} settings\n+     *\n+     * @return {string}\n+     */\n+    function buildSettingsPageSections(settings) {\n+        let output = \"\";\n+\n+        for (const setting of settings) {\n+            output += `<div class=\"setting-line\">`;\n+            const js_data_name = setting[\"js_name\"];\n+            const setting_name = setting[\"name\"];\n+\n+            if (setting[\"options\"] !== undefined) {\n+                // This is a select setting.\n+                output += `<div class=\"radio-line\" id=\"${js_data_name}\">\\\n+                        <span class=\"setting-name\">${setting_name}</span>\\\n+                        <div class=\"choices\">`;\n+                onEach(setting[\"options\"], function(option) {\n+                    const checked = option === setting[\"default\"] ? \" checked\" : \"\";\n+\n+                    output += `<label for=\"${js_data_name}-${option}\" class=\"choice\">\\\n+                           <input type=\"radio\" name=\"${js_data_name}\" \\\n+                                id=\"${js_data_name}-${option}\" value=\"${option}\"${checked}>\\\n+                           ${option}\\\n+                         </label>`;\n+                });\n+                output += \"</div></div>\";\n+            } else {\n+                // This is a toggle.\n+                const checked = setting[\"default\"] === true ? \" checked\" : \"\";\n+                output += `\n+                    <label class=\"toggle\">\n+                        <input type=\"checkbox\" id=\"${js_data_name}\"${checked}>\n+                        <span class=\"slider\"></span>\n+                    </label>\n+                    <div>${setting_name}</div>`;\n+            }\n+            output += \"</div>\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * This function builds the \"settings page\" and returns the generated HTML element.\n+     *\n+     * @return {HTMLElement}\n+     */\n+    function buildSettingsPage() {\n+        const themes = getVar(\"themes\").split(\",\");\n+        const settings = [\n+            {\n+                \"name\": \"Use system theme\",\n+                \"js_name\": \"use-system-theme\",\n+                \"default\": true,\n+            },\n+            {\n+                \"name\": \"Theme\",\n+                \"js_name\": \"theme\",\n+                \"default\": \"light\",\n+                \"options\": themes,\n+            },\n+            {\n+                \"name\": \"Preferred light theme\",\n+                \"js_name\": \"preferred-light-theme\",\n+                \"default\": \"light\",\n+                \"options\": themes,\n+            },\n+            {\n+                \"name\": \"Preferred dark theme\",\n+                \"js_name\": \"preferred-dark-theme\",\n+                \"default\": \"dark\",\n+                \"options\": themes,\n+            },\n+            {\n+                \"name\": \"Auto-hide item contents for large items\",\n+                \"js_name\": \"auto-hide-large-items\",\n+                \"default\": true,\n+            },\n+            {\n+                \"name\": \"Auto-hide item methods' documentation\",\n+                \"js_name\": \"auto-hide-method-docs\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Auto-hide trait implementation documentation\",\n+                \"js_name\": \"auto-hide-trait-implementations\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Directly go to item in search if there is only one result\",\n+                \"js_name\": \"go-to-only-result\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Show line numbers on code examples\",\n+                \"js_name\": \"line-numbers\",\n+                \"default\": false,\n+            },\n+            {\n+                \"name\": \"Disable keyboard shortcuts\",\n+                \"js_name\": \"disable-shortcuts\",\n+                \"default\": false,\n+            },\n+        ];\n+\n+        // First, we add the settings.css file.\n+        loadCss(\"settings\");\n+\n+        // Then we build the DOM.\n+        const el = document.createElement(\"section\");\n+        el.id = \"settings\";\n+        let innerHTML = `\n+            <div class=\"main-heading\">\n+                <h1 class=\"fqn\">\n+                    <span class=\"in-band\">Rustdoc settings</span>\n+                </h1>\n+                <span class=\"out-of-band\">`;\n+\n+        if (isSettingsPage) {\n+            innerHTML +=\n+                `<a id=\"back\" href=\"javascript:void(0)\" onclick=\"history.back();\">Back</a>`;\n+        } else {\n+            innerHTML +=\n+                `<a id=\"back\" href=\"javascript:void(0)\" onclick=\"switchDisplayedElement(null);\">\\\n+                    Back</a>`;\n+        }\n+        innerHTML += `</span>\n+            </div>\n+            <div class=\"settings\">${buildSettingsPageSections(settings)}</div>`;\n+\n+        el.innerHTML = innerHTML;\n+\n+        if (isSettingsPage) {\n+            document.getElementById(MAIN_ID).appendChild(el);\n+        } else {\n+            getNotDisplayedElem().appendChild(el);\n+        }\n+        return el;\n+    }\n+\n+    const settingsMenu = buildSettingsPage();\n+\n+    if (isSettingsPage) {\n+        // We replace the existing \"onclick\" callback to do nothing if clicked.\n+        getSettingsButton().onclick = function(event) {\n+            event.preventDefault();\n+        };\n+    } else {\n+        // We replace the existing \"onclick\" callback.\n+        const settingsButton = getSettingsButton();\n+        settingsButton.onclick = function(event) {\n+            event.preventDefault();\n+            if (settingsMenu.parentElement.id === NOT_DISPLAYED_ID) {\n+                switchDisplayedElement(settingsMenu);\n+            } else {\n+                window.hideSettings();\n+            }\n+        };\n+        window.hideSettings = function() {\n+            switchDisplayedElement(null);\n+        };\n+    }\n+\n+    // We now wait a bit for the web browser to end re-computing the DOM...\n+    setTimeout(function() {\n+        setEvents(settingsMenu);\n+        // The setting menu is already displayed if we're on the settings page.\n+        if (!isSettingsPage) {\n+            switchDisplayedElement(settingsMenu);\n+        }\n+    }, 0);\n })();"}, {"sha": "6aee0da69f8de58898c71f97c40af9b817c8e2c0", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -6,7 +6,7 @@\n /* global search, sourcesIndex */\n \n // Local js definitions:\n-/* global addClass, getCurrentValue, hasClass, onEachLazy, removeClass, searchState */\n+/* global addClass, getCurrentValue, hasClass, onEachLazy, removeClass, browserSupportsHistoryApi */\n /* global updateLocalStorage */\n (function() {\n \n@@ -195,7 +195,7 @@ const handleSourceHighlight = (function() {\n     const set_fragment = function(name) {\n         const x = window.scrollX,\n             y = window.scrollY;\n-        if (searchState.browserSupportsHistoryApi()) {\n+        if (browserSupportsHistoryApi()) {\n             history.replaceState(null, null, \"#\" + name);\n             highlightSourceLines();\n         } else {"}, {"sha": "470cce93a5020fca5d4c8ea410e48b830eaa168f", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -135,7 +135,6 @@ <h2 class=\"location\"></h2>\n                 </nav> {#- -#}\n             </div> {#- -#}\n             <section id=\"main-content\" class=\"content\">{{- content|safe -}}</section> {#- -#}\n-            <section id=\"search\" class=\"content hidden\"></section> {#- -#}\n         </div> {#- -#}\n     </main> {#- -#}\n     {{- layout.external_html.after_content|safe -}}"}, {"sha": "8713bf65c8432a2d5dbaa343a8c2eff1b790df19", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -4,17 +4,20 @@ goto: file://|DOC_PATH|/test_docs/index.html\n // First, we check that the search results are hidden when the Escape key is pressed.\n write: (\".search-input\", \"test\")\n wait-for: \"#search h1\" // The search element is empty before the first search \n-assert-attribute: (\"#search\", {\"class\": \"content\"})\n+// Check that the currently displayed element is search.\n+wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, ENDS_WITH)\n press-key: \"Escape\"\n-assert-attribute: (\"#search\", {\"class\": \"content hidden\"})\n+// Checks that search is no longer in the displayed content.\n+wait-for: \"#not-displayed #search\"\n+assert-false: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content\"})\n assert-document-property: ({\"URL\": \"index.html\"}, [ENDS_WITH])\n \n // Check that focusing the search input brings back the search results\n focus: \".search-input\"\n-assert-attribute: (\"#search\", {\"class\": \"content\"})\n+wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, ENDS_WITH)\n \n@@ -24,8 +27,8 @@ click: \"#help-button\"\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, [ENDS_WITH])\n assert-attribute: (\"#help\", {\"class\": \"\"})\n press-key: \"Escape\"\n+wait-for: \"#alternative-display #search\"\n assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n-assert-attribute: (\"#search\", {\"class\": \"content\"})\n assert-attribute: (\"#main-content\", {\"class\": \"content hidden\"})\n assert-document-property: ({\"URL\": \"index.html?search=test\"}, [ENDS_WITH])\n \n@@ -37,5 +40,6 @@ assert-false: \".search-input:focus\"\n assert: \"#results a:focus\"\n press-key: \"Escape\"\n assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n-assert-attribute: (\"#search\", {\"class\": \"content hidden\"})\n+wait-for: \"#not-displayed #search\"\n+assert-false: \"#alternative-display #search\"\n assert-attribute: (\"#main-content\", {\"class\": \"content\"})"}, {"sha": "6c4611b1cb2a613f01906a3d222a7d10234f7fbe", "filename": "src/test/rustdoc-gui/settings.goml", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -0,0 +1,67 @@\n+// This test ensures that the settings menu display is working as expected.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+// First, we check that the settings page doesn't exist.\n+assert-false: \"#settings\"\n+// We now click on the settings button.\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+assert: \"#main-content.hidden\"\n+assert-css: (\"#settings\", {\"display\": \"block\"})\n+// Let's close it by clicking on the same button.\n+click: \"#settings-menu\"\n+assert-false: \"#alternative-display #settings\"\n+assert: \"#not-displayed #settings\"\n+assert: \"#main-content:not(.hidden)\"\n+\n+// Let's open and then close it again with the \"close settings\" button.\n+click: \"#settings-menu\"\n+wait-for: \"#alternative-display #settings\"\n+assert: \"#main-content.hidden\"\n+click: \"#back\"\n+wait-for: \"#not-displayed #settings\"\n+assert: \"#main-content:not(.hidden)\"\n+\n+// Let's check that pressing \"ESCAPE\" is closing it.\n+click: \"#settings-menu\"\n+wait-for: \"#alternative-display #settings\"\n+press-key: \"Escape\"\n+wait-for: \"#not-displayed #settings\"\n+assert: \"#main-content:not(.hidden)\"\n+\n+// Let's click on it when the search results are displayed.\n+focus: \".search-input\"\n+write: \"test\"\n+wait-for: \"#alternative-display #search\"\n+click: \"#settings-menu\"\n+wait-for: \"#alternative-display #settings\"\n+assert: \"#not-displayed #search\"\n+assert: \"#main-content.hidden\"\n+\n+// Now let's check the content of the settings menu.\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+click: \"#settings-menu\"\n+wait-for: \"#settings\"\n+\n+// We check that the \"Use system theme\" is disabled.\n+assert-property: (\"#use-system-theme\", {\"checked\": \"false\"})\n+assert: \"//*[@class='setting-line']/*[text()='Use system theme']\"\n+// Meaning that only the \"theme\" menu is showing up.\n+assert: \".setting-line:not(.hidden) #theme\"\n+assert: \".setting-line.hidden #preferred-dark-theme\"\n+assert: \".setting-line.hidden #preferred-light-theme\"\n+\n+// We check that the correct theme is selected.\n+assert-property: (\"#theme .choices #theme-dark\", {\"checked\": \"true\"})\n+\n+// We now switch the display.\n+click: \"#use-system-theme\"\n+// Wait for the hidden element to show up.\n+wait-for: \".setting-line:not(.hidden) #preferred-dark-theme\"\n+assert: \".setting-line:not(.hidden) #preferred-light-theme\"\n+// Check that the theme picking is hidden.\n+assert: \".setting-line.hidden #theme\"\n+\n+// We check their text as well.\n+assert-text: (\"#preferred-dark-theme .setting-name\", \"Preferred dark theme\")\n+assert-text: (\"#preferred-light-theme .setting-name\", \"Preferred light theme\")"}, {"sha": "9706511ea19c398fda3051fc9651f0f53a27c1e0", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -9,6 +9,7 @@ click: \"#theme-choices > button:last-child\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n \n goto: file://|DOC_PATH|/settings.html\n+wait-for: \"#settings\"\n click: \"#theme-light\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }"}, {"sha": "f576ced1c62086d85a69c8416902845435fa32a3", "filename": "src/test/rustdoc-gui/theme-in-history.goml", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "raw_url": "https://github.com/rust-lang/rust/raw/27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml?ref=27d7615bb4f20cd3546bf98d7ad2f812d5dc4e3c", "patch": "@@ -1,15 +1,19 @@\n // Ensures that the theme is working when going back in history.\n goto: file://|DOC_PATH|/test_docs/index.html\n // Set the theme to dark.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n // We reload the page so the local storage settings are being used.\n reload:\n assert-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n // Now we go to the settings page.\n-click: \"#settings-menu\"\n-wait-for: \".settings\"\n+goto: file://|DOC_PATH|/settings.html\n+wait-for: \"#settings\"\n // We change the theme to \"light\".\n click: \"#theme-light\"\n wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n@@ -18,7 +22,7 @@ assert-local-storage: { \"rustdoc-theme\": \"light\" }\n // We go back in history.\n history-go-back:\n // Confirm that we're not on the settings page.\n-assert-false: \".settings\"\n+assert-false: \"#settings\"\n // Check that the current theme is still \"light\".\n assert-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }"}]}