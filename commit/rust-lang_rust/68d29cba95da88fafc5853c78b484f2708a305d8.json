{"sha": "68d29cba95da88fafc5853c78b484f2708a305d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDI5Y2JhOTVkYTg4ZmFmYzU4NTNjNzhiNDg0ZjI3MDhhMzA1ZDg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-06T23:23:49Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-06T23:23:49Z"}, "message": "save-analysis: add docs data", "tree": {"sha": "6590fe8d80b0da2777a118bf8996958c6096e7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6590fe8d80b0da2777a118bf8996958c6096e7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d29cba95da88fafc5853c78b484f2708a305d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d29cba95da88fafc5853c78b484f2708a305d8", "html_url": "https://github.com/rust-lang/rust/commit/68d29cba95da88fafc5853c78b484f2708a305d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d29cba95da88fafc5853c78b484f2708a305d8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987b47549eae03e4d9699336f5e30f787161acaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/987b47549eae03e4d9699336f5e30f787161acaa", "html_url": "https://github.com/rust-lang/rust/commit/987b47549eae03e4d9699336f5e30f787161acaa"}], "stats": {"total": 129, "additions": 116, "deletions": 13}, "files": [{"sha": "5f6e65e289fd5d266c92d2df29d23eea0b2e5a87", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=68d29cba95da88fafc5853c78b484f2708a305d8", "patch": "@@ -134,6 +134,7 @@ pub struct EnumData {\n     pub scope: NodeId,\n     pub variants: Vec<NodeId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n /// Data for extern crates.\n@@ -167,6 +168,7 @@ pub struct FunctionData {\n     pub value: String,\n     pub visibility: Visibility,\n     pub parent: Option<NodeId>,\n+    pub docs: String,\n }\n \n /// Data about a function call.\n@@ -213,6 +215,7 @@ pub struct MacroData {\n     pub span: Span,\n     pub name: String,\n     pub qualname: String,\n+    pub docs: String,\n }\n \n /// Data about a macro use.\n@@ -248,6 +251,7 @@ pub struct MethodData {\n     pub value: String,\n     pub decl_id: Option<DefId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n /// Data for modules.\n@@ -261,6 +265,7 @@ pub struct ModData {\n     pub filename: String,\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n /// Data for a reference to a module.\n@@ -283,6 +288,7 @@ pub struct StructData {\n     pub value: String,\n     pub fields: Vec<NodeId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -295,6 +301,7 @@ pub struct StructVariantData {\n     pub value: String,\n     pub scope: NodeId,\n     pub parent: Option<NodeId>,\n+    pub docs: String,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -307,6 +314,7 @@ pub struct TraitData {\n     pub value: String,\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -319,6 +327,7 @@ pub struct TupleVariantData {\n     pub value: String,\n     pub scope: NodeId,\n     pub parent: Option<NodeId>,\n+    pub docs: String,\n }\n \n /// Data for a typedef.\n@@ -331,6 +340,7 @@ pub struct TypeDefData {\n     pub value: String,\n     pub visibility: Visibility,\n     pub parent: Option<NodeId>,\n+    pub docs: String,\n }\n \n /// Data for a reference to a type or trait.\n@@ -374,6 +384,7 @@ pub struct VariableData {\n     pub value: String,\n     pub type_value: String,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n #[derive(Debug, RustcEncodable)]"}, {"sha": "faf9cb2b0e3bd415ad191506b79e603bc3c4b875", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=68d29cba95da88fafc5853c78b484f2708a305d8", "patch": "@@ -36,15 +36,15 @@ use rustc::ty::{self, TyCtxt, ImplOrTraitItem, ImplOrTraitItemContainer};\n use std::collections::HashSet;\n use std::hash::*;\n \n-use syntax::ast::{self, NodeId, PatKind};\n+use syntax::ast::{self, NodeId, PatKind, Attribute};\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string, ty_to_string, bounds_to_string, generics_to_string};\n use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use super::{escape, generated_code, SaveContext, PathCollector};\n+use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs};\n use super::data::*;\n use super::dump::Dump;\n use super::external_data::Lower;\n@@ -368,6 +368,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         scope: 0,\n                         parent: None,\n                         visibility: Visibility::Inherited,\n+                        docs: String::new(),\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -380,6 +381,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                       id: ast::NodeId,\n                       name: ast::Name,\n                       vis: Visibility,\n+                      attrs: &[Attribute],\n                       span: Span) {\n         debug!(\"process_method: {}:{}\", id, name);\n \n@@ -421,6 +423,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     value: sig_str,\n                     decl_id: decl_id,\n                     visibility: vis,\n+                    docs: docs_for_attrs(attrs),\n                 }.lower(self.tcx));\n             }\n \n@@ -491,6 +494,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     value: String::new(),\n                     visibility: Visibility::Inherited,\n                     parent: None,\n+                    docs: String::new(),\n                 }.lower(self.tcx));\n             }\n         }\n@@ -541,7 +545,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                            typ: &ast::Ty,\n                            expr: &ast::Expr,\n                            parent_id: NodeId,\n-                           vis: Visibility) {\n+                           vis: Visibility,\n+                           attrs: &[Attribute]) {\n         let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n \n         let sub_span = self.span.sub_span_after_keyword(span, keywords::Const);\n@@ -558,6 +563,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 scope: self.cur_scope,\n                 parent: Some(parent_id),\n                 visibility: vis,\n+                docs: docs_for_attrs(attrs),\n             }.lower(self.tcx));\n         }\n \n@@ -600,6 +606,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 value: val,\n                 fields: fields,\n                 visibility: From::from(&item.vis),\n+                docs: docs_for_attrs(&item.attrs),\n             }.lower(self.tcx));\n         }\n \n@@ -653,6 +660,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             value: val,\n                             scope: enum_data.scope,\n                             parent: Some(item.id),\n+                            docs: docs_for_attrs(&variant.node.attrs),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -677,6 +685,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             value: val,\n                             scope: enum_data.scope,\n                             parent: Some(item.id),\n+                            docs: docs_for_attrs(&variant.node.attrs),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -759,6 +768,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 value: val,\n                 items: methods.iter().map(|i| i.id).collect(),\n                 visibility: From::from(&item.vis),\n+                docs: docs_for_attrs(&item.attrs),\n             }.lower(self.tcx));\n         }\n \n@@ -1007,6 +1017,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     scope: 0,\n                     parent: None,\n                     visibility: Visibility::Inherited,\n+                    docs: String::new(),\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1036,7 +1047,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 self.dumper.macro_data(MacroData {\n                     span: sub_span,\n                     name: data.name.clone(),\n-                    qualname: qualname.clone()\n+                    qualname: qualname.clone(),\n+                    // FIXME where do macro docs come from?\n+                    docs: String::new(),\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1049,7 +1062,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     qualname: qualname,\n                     scope: data.scope,\n                     callee_span: data.callee_span,\n-                    imported: data.imported\n+                    imported: data.imported,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1065,14 +1078,16 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                                          &ty,\n                                          &expr,\n                                          trait_id,\n-                                         Visibility::Public);\n+                                         Visibility::Public,\n+                                         &trait_item.attrs);\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     body.as_ref().map(|x| &**x),\n                                     trait_item.id,\n                                     trait_item.ident.name,\n                                     Visibility::Public,\n+                                    &trait_item.attrs,\n                                     trait_item.span);\n             }\n             ast::TraitItemKind::Const(_, None) |\n@@ -1091,14 +1106,16 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                                          &ty,\n                                          &expr,\n                                          impl_id,\n-                                         From::from(&impl_item.vis));\n+                                         From::from(&impl_item.vis),\n+                                         &impl_item.attrs);\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     Some(body),\n                                     impl_item.id,\n                                     impl_item.ident.name,\n                                     From::from(&impl_item.vis),\n+                                    &impl_item.attrs,\n                                     impl_item.span);\n             }\n             ast::ImplItemKind::Type(_) |\n@@ -1240,6 +1257,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                         value: value,\n                         visibility: From::from(&item.vis),\n                         parent: None,\n+                        docs: docs_for_attrs(&item.attrs),\n                     }.lower(self.tcx));\n                 }\n \n@@ -1429,6 +1447,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                             scope: 0,\n                             parent: None,\n                             visibility: Visibility::Inherited,\n+                            docs: String::new(),\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "3642346582bb9877e1d8be15d83fa9686ed1046c", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=68d29cba95da88fafc5853c78b484f2708a305d8", "patch": "@@ -93,6 +93,7 @@ pub struct EnumData {\n     pub scope: DefId,\n     pub variants: Vec<DefId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n impl Lower for data::EnumData {\n@@ -108,6 +109,7 @@ impl Lower for data::EnumData {\n             scope: make_def_id(self.scope, &tcx.map),\n             variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n+            docs: self.docs,\n         }\n     }\n }\n@@ -170,6 +172,7 @@ pub struct FunctionData {\n     pub value: String,\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n+    pub docs: String,\n }\n \n impl Lower for data::FunctionData {\n@@ -186,6 +189,7 @@ impl Lower for data::FunctionData {\n             value: self.value,\n             visibility: self.visibility,\n             parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            docs: self.docs,\n         }\n     }\n }\n@@ -257,6 +261,7 @@ pub struct MacroData {\n     pub span: SpanData,\n     pub name: String,\n     pub qualname: String,\n+    pub docs: String,\n }\n \n impl Lower for data::MacroData {\n@@ -267,6 +272,7 @@ impl Lower for data::MacroData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             qualname: self.qualname,\n+            docs: self.docs,\n         }\n     }\n }\n@@ -330,7 +336,8 @@ pub struct MethodData {\n     pub value: String,\n     pub decl_id: Option<DefId>,\n     pub visibility: Visibility,\n-    pub parent: Option<DefId>\n+    pub parent: Option<DefId>,\n+    pub docs: String,\n }\n \n impl Lower for data::MethodData {\n@@ -347,6 +354,7 @@ impl Lower for data::MethodData {\n             decl_id: self.decl_id,\n             visibility: self.visibility,\n             parent: Some(make_def_id(self.scope, &tcx.map)),\n+            docs: self.docs,\n         }\n     }\n }\n@@ -362,6 +370,7 @@ pub struct ModData {\n     pub filename: String,\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n impl Lower for data::ModData {\n@@ -377,6 +386,7 @@ impl Lower for data::ModData {\n             filename: self.filename,\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n+            docs: self.docs,\n         }\n     }\n }\n@@ -414,6 +424,7 @@ pub struct StructData {\n     pub value: String,\n     pub fields: Vec<DefId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n impl Lower for data::StructData {\n@@ -430,6 +441,7 @@ impl Lower for data::StructData {\n             value: self.value,\n             fields: self.fields.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n+            docs: self.docs,\n         }\n     }\n }\n@@ -444,6 +456,7 @@ pub struct StructVariantData {\n     pub value: String,\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n+    pub docs: String,\n }\n \n impl Lower for data::StructVariantData {\n@@ -459,6 +472,7 @@ impl Lower for data::StructVariantData {\n             value: self.value,\n             scope: make_def_id(self.scope, &tcx.map),\n             parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            docs: self.docs,\n         }\n     }\n }\n@@ -473,6 +487,7 @@ pub struct TraitData {\n     pub value: String,\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n impl Lower for data::TraitData {\n@@ -488,6 +503,7 @@ impl Lower for data::TraitData {\n             value: self.value,\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n             visibility: self.visibility,\n+            docs: self.docs,\n         }\n     }\n }\n@@ -502,6 +518,7 @@ pub struct TupleVariantData {\n     pub value: String,\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n+    pub docs: String,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -517,6 +534,7 @@ impl Lower for data::TupleVariantData {\n             value: self.value,\n             scope: make_def_id(self.scope, &tcx.map),\n             parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            docs: self.docs,\n         }\n     }\n }\n@@ -531,6 +549,7 @@ pub struct TypeDefData {\n     pub value: String,\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n+    pub docs: String,\n }\n \n impl Lower for data::TypeDefData {\n@@ -545,6 +564,7 @@ impl Lower for data::TypeDefData {\n             value: self.value,\n             visibility: self.visibility,\n             parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            docs: self.docs,\n         }\n     }\n }\n@@ -632,6 +652,7 @@ pub struct VariableData {\n     pub type_value: String,\n     pub parent: Option<DefId>,\n     pub visibility: Visibility,\n+    pub docs: String,\n }\n \n impl Lower for data::VariableData {\n@@ -649,6 +670,7 @@ impl Lower for data::VariableData {\n             type_value: self.type_value,\n             parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n             visibility: self.visibility,\n+            docs: self.docs,\n         }\n     }\n }"}, {"sha": "751c2d06ee757a4fd793ad2514e19f1d604beb49", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=68d29cba95da88fafc5853c78b484f2708a305d8", "patch": "@@ -168,6 +168,7 @@ struct Def {\n     parent: Option<Id>,\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n+    docs: String,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -209,6 +210,7 @@ impl From<EnumData> for Option<Def> {\n                 parent: None,\n                 children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n                 decl_id: None,\n+                docs: data.docs,\n             }),\n             _ => None,\n         }\n@@ -227,6 +229,7 @@ impl From<TupleVariantData> for Option<Def> {\n             parent: data.parent.map(|id| From::from(id)),\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         })\n     }\n }\n@@ -242,6 +245,7 @@ impl From<StructVariantData> for Option<Def> {\n             parent: data.parent.map(|id| From::from(id)),\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         })\n     }\n }\n@@ -258,6 +262,7 @@ impl From<StructData> for Option<Def> {\n             parent: None,\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n+            docs: data.docs,\n         }),\n             _ => None,\n         }\n@@ -276,6 +281,7 @@ impl From<TraitData> for Option<Def> {\n                 children: data.items.into_iter().map(|id| From::from(id)).collect(),\n                 parent: None,\n                 decl_id: None,\n+                docs: data.docs,\n             }),\n             _ => None,\n         }\n@@ -294,6 +300,7 @@ impl From<FunctionData> for Option<Def> {\n                 children: vec![],\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n+                docs: data.docs,\n             }),\n             _ => None,\n         }\n@@ -312,6 +319,7 @@ impl From<MethodData> for Option<Def> {\n                 children: vec![],\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: data.decl_id.map(|id| From::from(id)),\n+                docs: data.docs,\n             }),\n             _ => None,\n         }\n@@ -329,6 +337,7 @@ impl From<MacroData> for Option<Def> {\n             children: vec![],\n             parent: None,\n             decl_id: None,\n+            docs: data.docs,\n         })\n     }\n }\n@@ -345,6 +354,7 @@ impl From<ModData> for Option<Def> {\n                 children: data.items.into_iter().map(|id| From::from(id)).collect(),\n                 parent: None,\n                 decl_id: None,\n+                docs: data.docs,\n             }),\n             _ => None,\n         }\n@@ -363,6 +373,7 @@ impl From<TypeDefData> for Option<Def> {\n                 children: vec![],\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n+                docs: String::new(),\n             }),\n             _ => None,\n         }\n@@ -386,6 +397,7 @@ impl From<VariableData> for Option<Def> {\n                 children: vec![],\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n+                docs: data.docs,\n             }),\n             _ => None,\n         }"}, {"sha": "3000376e7246038bb3bd740d38833d89fb765bde", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=68d29cba95da88fafc5853c78b484f2708a305d8", "patch": "@@ -183,6 +183,7 @@ struct Def {\n     value: String,\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n+    docs: String,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -223,6 +224,7 @@ impl From<EnumData> for Def {\n             value: data.value,\n             children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -238,6 +240,7 @@ impl From<TupleVariantData> for Def {\n             value: data.value,\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -252,6 +255,7 @@ impl From<StructVariantData> for Def {\n             value: data.value,\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -266,6 +270,7 @@ impl From<StructData> for Def {\n             value: data.value,\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -280,6 +285,7 @@ impl From<TraitData> for Def {\n             value: data.value,\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -294,6 +300,7 @@ impl From<FunctionData> for Def {\n             value: data.value,\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -308,6 +315,7 @@ impl From<MethodData> for Def {\n             value: data.value,\n             children: vec![],\n             decl_id: data.decl_id.map(|id| From::from(id)),\n+            docs: data.docs,\n         }\n     }\n }\n@@ -322,6 +330,7 @@ impl From<MacroData> for Def {\n             value: String::new(),\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -336,6 +345,7 @@ impl From<ModData> for Def {\n             value: data.filename,\n             children: data.items.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }\n@@ -350,6 +360,7 @@ impl From<TypeDefData> for Def {\n             value: data.value,\n             children: vec![],\n             decl_id: None,\n+            docs: String::new(),\n         }\n     }\n }\n@@ -369,6 +380,7 @@ impl From<VariableData> for Def {\n             value: data.value,\n             children: vec![],\n             decl_id: None,\n+            docs: data.docs,\n         }\n     }\n }"}, {"sha": "eeb8d02429c069b7935c1f76cce118918c5dc1e1", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d29cba95da88fafc5853c78b484f2708a305d8/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=68d29cba95da88fafc5853c78b484f2708a305d8", "patch": "@@ -29,6 +29,7 @@\n extern crate serialize as rustc_serialize;\n extern crate syntax_pos;\n \n+\n mod csv_dumper;\n mod json_api_dumper;\n mod json_dumper;\n@@ -50,8 +51,8 @@ use std::env;\n use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n \n-use syntax::ast::{self, NodeId, PatKind};\n-use syntax::parse::token::{self, keywords};\n+use syntax::ast::{self, NodeId, PatKind, Attribute};\n+use syntax::parse::token::{self, keywords, InternedString};\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{ty_to_string, arg_to_string};\n use syntax::codemap::MacroAttribute;\n@@ -142,6 +143,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     value: make_signature(decl, generics),\n                     visibility: From::from(&item.vis),\n                     parent: None,\n+                    docs: docs_for_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -168,6 +170,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     value: value,\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n+                    docs: docs_for_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -185,6 +188,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     value: self.span_utils.snippet(expr.span),\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n+                    docs: docs_for_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -204,6 +208,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     filename: filename,\n                     items: m.items.iter().map(|i| i.id).collect(),\n                     visibility: From::from(&item.vis),\n+                    docs: docs_for_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -225,6 +230,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     scope: self.enclosing_scope(item.id),\n                     variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n                     visibility: From::from(&item.vis),\n+                    docs: docs_for_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Impl(_, _, _, ref trait_ref, ref typ, _) => {\n@@ -291,6 +297,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 value: \"\".to_owned(),\n                 type_value: typ,\n                 visibility: From::from(&field.vis),\n+                docs: docs_for_attrs(&field.attrs),\n             })\n         } else {\n             None\n@@ -303,7 +310,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                            name: ast::Name, span: Span) -> Option<FunctionData> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n-        let (qualname, vis) = match self.tcx.impl_of_method(self.tcx.map.local_def_id(id)) {\n+        let (qualname, vis, docs) = match self.tcx.impl_of_method(self.tcx.map.local_def_id(id)) {\n             Some(impl_id) => match self.tcx.map.get_if_local(impl_id) {\n                 Some(NodeItem(item)) => {\n                     match item.node {\n@@ -316,7 +323,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                 result.push_str(&self.tcx.item_path_str(def_id));\n                             }\n                             result.push_str(\">\");\n-                            (result, From::from(&item.vis))\n+                            (result, From::from(&item.vis), docs_for_attrs(&item.attrs))\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -338,7 +345,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 Some(def_id) => {\n                     match self.tcx.map.get_if_local(def_id) {\n                         Some(NodeItem(item)) => {\n-                            (format!(\"::{}\", self.tcx.item_path_str(def_id)), From::from(&item.vis))\n+                            (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n+                             From::from(&item.vis),\n+                             docs_for_attrs(&item.attrs))\n                         }\n                         r => {\n                             span_bug!(span,\n@@ -382,6 +391,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             value: String::new(),\n             visibility: vis,\n             parent: Some(parent_scope),\n+            docs: docs,\n         })\n     }\n \n@@ -739,6 +749,23 @@ impl Visitor for PathCollector {\n     }\n }\n \n+\n+fn docs_for_attrs(attrs: &[Attribute]) -> String {\n+    let doc = InternedString::new(\"doc\");\n+    let mut result = String::new();\n+\n+    for attr in attrs {\n+        if attr.name() == doc {\n+            if let Some(ref val) = attr.value_str() {\n+                result.push_str(val);\n+                result.push('\\n');\n+            }\n+        }\n+    }\n+\n+    result\n+}\n+\n #[derive(Clone, Copy, Debug)]\n pub enum Format {\n     Csv,"}]}