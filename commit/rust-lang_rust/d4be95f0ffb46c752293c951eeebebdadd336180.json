{"sha": "d4be95f0ffb46c752293c951eeebebdadd336180", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YmU5NWYwZmZiNDZjNzUyMjkzYzk1MWVlZWJlYmRhZGQzMzYxODA=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-23T14:26:33Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-27T09:18:11Z"}, "message": "Improved fully elaborated type generation to replace `'_#2r`-style regions.", "tree": {"sha": "5ee1fb98247a8401d7958ee4bbfe92b58d8d87bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee1fb98247a8401d7958ee4bbfe92b58d8d87bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4be95f0ffb46c752293c951eeebebdadd336180", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlta41MACgkQAXYLT59T\n8VTmqxAAl2jKkcVmkrrCjjXLwWd72gxrCYntkvX7AEITmeaFd0FMCzc3lyHt4xJp\n/hwM2HpB87hihZMol3IIunm3T7EEyX879hnkEq69S5PaI64VnBHiArudaV1zl4pH\noXebFDkVt9AgyWWqJpUvxo6RbQsYJNdEsJhp7QxJ47L/uyLMnvSEkG2okHbbLXqf\nwpmLaAYa92tghyWEZlSuW0Fajleti2AS+9saPeGeoYL6GA13blt6AgJkwRKiLmSm\nL4HVyXOWwTWiVQcx+/yShqhapmO3gCs+S9wZCW5VPG8XZuSxrG+NAd+F1+fB1nNW\n7jrxM8aZQ78imV9mfMANHubWuN0jdeohcJEiZCQDAAtgtS0bmfHaDqv9jeg+PouW\nzkp6lBXr5SaP5biq8rzJuZ14P4RVNNp8m6KX+E9ljvCcbB2Fm8T86b2KUhBlrgwX\nM2t+tk1SxsiRejJ7uLCwAdTxaquZFddrZ4GfgSh9RgLgOcP2C7frfDVWGqYtMLiK\nUo0D2lztCux5HZetw/IzpWrBvakPrgl7547vYVm22bN3RCWk2fXJg6NJ8J104tOU\nhR3nThHdSZrjIwk4TvjHCaTkcujSXfGFxSpbJbos6bma+NnVYSZkPlnXRsRHWIPU\n4r+j5nLm6po+YOcSeaa+W/Ic62nBBAO2N14TA2WFhyF0aghXTo0=\n=jACj\n-----END PGP SIGNATURE-----", "payload": "tree 5ee1fb98247a8401d7958ee4bbfe92b58d8d87bd\nparent 53dda8e915e54bc65b41599738245d62dbe3e6df\nauthor David Wood <david@davidtw.co> 1532355993 +0200\ncommitter David Wood <david@davidtw.co> 1532683091 +0200\n\nImproved fully elaborated type generation to replace `'_#2r`-style regions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4be95f0ffb46c752293c951eeebebdadd336180", "html_url": "https://github.com/rust-lang/rust/commit/d4be95f0ffb46c752293c951eeebebdadd336180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4be95f0ffb46c752293c951eeebebdadd336180/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53dda8e915e54bc65b41599738245d62dbe3e6df", "url": "https://api.github.com/repos/rust-lang/rust/commits/53dda8e915e54bc65b41599738245d62dbe3e6df", "html_url": "https://github.com/rust-lang/rust/commit/53dda8e915e54bc65b41599738245d62dbe3e6df"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "cef6ab311a398e8fc4b789a5943972a2192d60f9", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4be95f0ffb46c752293c951eeebebdadd336180/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4be95f0ffb46c752293c951eeebebdadd336180/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=d4be95f0ffb46c752293c951eeebebdadd336180", "patch": "@@ -321,8 +321,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n                fr_is_local, outlived_fr_is_local, category);\n \n-        match (fr_is_local, outlived_fr_is_local) {\n-            (true, false) =>\n+        match (category, fr_is_local, outlived_fr_is_local) {\n+            (ConstraintCategory::Assignment, true, false) |\n+            (ConstraintCategory::CallArgument, true, false) =>\n                 self.report_escapes_closure_error(mir, infcx, mir_def_id, fr, outlived_fr,\n                                                   category, span, errors_buffer),\n             _ =>"}, {"sha": "6c400278b700d7ee60b896e7b0392254f8e26d1c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d4be95f0ffb46c752293c951eeebebdadd336180/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4be95f0ffb46c752293c951eeebebdadd336180/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=d4be95f0ffb46c752293c951eeebebdadd336180", "patch": "@@ -146,6 +146,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.universal_regions.unnormalized_input_tys[implicit_inputs + argument_index];\n         if let Some(region_name) = self.give_name_if_we_can_match_hir_ty_from_argument(\n             infcx,\n+            mir,\n             mir_def_id,\n             fr,\n             arg_ty,\n@@ -172,6 +173,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_we_can_match_hir_ty_from_argument(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n@@ -188,8 +190,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // must highlight the variable.\n             hir::TyKind::Infer => self.give_name_if_we_cannot_match_hir_ty(\n                 infcx,\n+                mir,\n+                needle_fr,\n                 argument_ty,\n-                argument_hir_ty,\n                 counter,\n                 diag,\n             ),\n@@ -219,24 +222,46 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_we_cannot_match_hir_ty(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n-        argument_hir_ty: &hir::Ty,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n         let mut type_name = infcx.extract_type_name(&argument_ty);\n-\n-        type_name.find(\"&\").map(|index| {\n+        let argument_index = self.get_argument_index_for_region(infcx.tcx, needle_fr)?;\n+        let mut first_region_name = None;\n+\n+        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?}\", type_name);\n+        while let Some(start_index) = type_name.find(\"&'_#\") {\n+            if let Some(end_index) = type_name[start_index..].find(' ') {\n+                // Need to make the `end_index` relative to the full string.\n+                let end_index = start_index + end_index;\n+                // `start_index + 1` skips the `&`.\n+                // `end_index` goes until the space after the region.\n+                type_name.replace_range(start_index + 1..end_index, \"\");\n+            }\n+        }\n+        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?}\", type_name);\n+\n+        let mut index = 0;\n+        while let Some(next_index) = type_name[index..].find(\"&\") {\n+            // At this point, next_index is the index of the `&` character (starting from\n+            // the last `&` character).\n+            debug!(\"give_name_if_we_cannot_match_hir_ty: start-of-loop index={:?} type_name={:?}\",\n+                   index, type_name);\n             let region_name = self.synthesize_region_name(counter).as_str();\n-            type_name.insert_str(index + 1, &format!(\"{} \", region_name));\n+            if first_region_name.is_none() { first_region_name = Some(region_name); }\n+\n+            // Compute the index of the character after `&` in the original string.\n+            index = next_index + index + 1;\n+            type_name.insert_str(index, &format!(\"{}\", region_name));\n+        }\n \n-            diag.span_label(\n-                argument_hir_ty.span,\n-                format!(\"has type `{}`\", type_name),\n-            );\n+        let (_, span) = self.get_argument_name_and_span_for_region(mir, argument_index);\n+        diag.span_label(span, format!(\"has type `{}`\", type_name));\n \n-            region_name.as_interned_str()\n-        })\n+        first_region_name.map(|s| s.as_interned_str())\n     }\n \n     /// Attempts to highlight the specific part of a type annotation"}]}