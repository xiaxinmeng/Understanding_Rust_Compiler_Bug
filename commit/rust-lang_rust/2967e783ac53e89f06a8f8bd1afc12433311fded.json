{"sha": "2967e783ac53e89f06a8f8bd1afc12433311fded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjdlNzgzYWM1M2U4OWYwNmE4ZjhiZDFhZmMxMjQzMzMxMWZkZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-13T15:56:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-13T15:56:17Z"}, "message": "Merge #7659\n\n7659: Improve \"Generate From impl\" r=Veykril a=jDomantas\n\n* Allows any field type. Previously it was restricted to path types, but I don't see why it couldn't apply to all other types too. (the main reason for is PR is that I'm too lazy to write out `From<&'static str>` by hand \ud83d\ude04)\r\n* More correct handling for generic enums - previously it wouldn't emit generic params on the impl.\r\n* Also accepts variants with named field.\r\n\r\nThe impl generation code got mostly copy-pasted from generate_impl assist - please tell if there's an easy way to avoid this duplication.\n\nCo-authored-by: Domantas Jadenkus <djadenkus@gmail.com>", "tree": {"sha": "d46451d2029fe7842a654feec4c1bbf8246d1829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46451d2029fe7842a654feec4c1bbf8246d1829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2967e783ac53e89f06a8f8bd1afc12433311fded", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJ/ahCRBK7hj4Ov3rIwAAdHIIACfPXoveYsorEo26Q59VhAGW\nLwae5Yjl58jCeTTeMezoj1POuyomxFDiY+3Z/oAq3dfaZzw/KMnZtPwEkpzL4mDd\nV1y38cg6vy44SxhtBps5FLKKn5e5QPl0egxVFf+/Kx1JGRKrNeYDr252i8HuVWY1\nqfuBt1pxQ53/OOGq7mhgwkdntkzS/iCh/geCpyPXzgb9e/xzueZocnyBe9M3mQtr\nfig/+O8dAb8V28QOzWtTaTWTScZqHlGvoH9j6FNfgnOzmDvywBs9Sp0E2vmgWtnE\n8+JY3+pj+rwBaxtLAUpzyVetW5SV3j5o3WJs5N+2OTowxspz+vyqIseZazwq5S4=\n=WjIp\n-----END PGP SIGNATURE-----\n", "payload": "tree d46451d2029fe7842a654feec4c1bbf8246d1829\nparent 11ebbac3a4a962701639bb14a4a5a7309399d7e8\nparent b07f530e3ae025c57b2b64e8ebb2852e60bced7b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613231777 +0000\ncommitter GitHub <noreply@github.com> 1613231777 +0000\n\nMerge #7659\n\n7659: Improve \"Generate From impl\" r=Veykril a=jDomantas\n\n* Allows any field type. Previously it was restricted to path types, but I don't see why it couldn't apply to all other types too. (the main reason for is PR is that I'm too lazy to write out `From<&'static str>` by hand \ud83d\ude04)\r\n* More correct handling for generic enums - previously it wouldn't emit generic params on the impl.\r\n* Also accepts variants with named field.\r\n\r\nThe impl generation code got mostly copy-pasted from generate_impl assist - please tell if there's an easy way to avoid this duplication.\n\nCo-authored-by: Domantas Jadenkus <djadenkus@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2967e783ac53e89f06a8f8bd1afc12433311fded", "html_url": "https://github.com/rust-lang/rust/commit/2967e783ac53e89f06a8f8bd1afc12433311fded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2967e783ac53e89f06a8f8bd1afc12433311fded/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ebbac3a4a962701639bb14a4a5a7309399d7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ebbac3a4a962701639bb14a4a5a7309399d7e8", "html_url": "https://github.com/rust-lang/rust/commit/11ebbac3a4a962701639bb14a4a5a7309399d7e8"}, {"sha": "b07f530e3ae025c57b2b64e8ebb2852e60bced7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07f530e3ae025c57b2b64e8ebb2852e60bced7b", "html_url": "https://github.com/rust-lang/rust/commit/b07f530e3ae025c57b2b64e8ebb2852e60bced7b"}], "stats": {"total": 152, "additions": 124, "deletions": 28}, "files": [{"sha": "f6febd3aaaab13c8ee17092025f08c3ad0f72c32", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 123, "deletions": 27, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/2967e783ac53e89f06a8f8bd1afc12433311fded/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e783ac53e89f06a8f8bd1afc12433311fded/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=2967e783ac53e89f06a8f8bd1afc12433311fded", "patch": "@@ -1,6 +1,12 @@\n+use ast::GenericParamsOwner;\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n-use syntax::ast::{self, AstNode, NameOwner};\n+use itertools::Itertools;\n+use stdx::format_to;\n+use syntax::{\n+    ast::{self, AstNode, NameOwner},\n+    SmolStr,\n+};\n use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -18,25 +24,30 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // impl From<u32> for A {\n //     fn from(v: u32) -> Self {\n-//         A::One(v)\n+//         Self::One(v)\n //     }\n // }\n // ```\n pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let enum_name = variant.parent_enum().name()?;\n-    let field_list = match variant.kind() {\n-        ast::StructKind::Tuple(field_list) => field_list,\n-        _ => return None,\n-    };\n-    if field_list.fields().count() != 1 {\n-        return None;\n-    }\n-    let field_type = field_list.fields().next()?.ty()?;\n-    let path = match field_type {\n-        ast::Type::PathType(it) => it,\n-        _ => return None,\n+    let enum_type_params = variant.parent_enum().generic_param_list();\n+    let (field_name, field_type) = match variant.kind() {\n+        ast::StructKind::Tuple(field_list) => {\n+            if field_list.fields().count() != 1 {\n+                return None;\n+            }\n+            (None, field_list.fields().next()?.ty()?)\n+        }\n+        ast::StructKind::Record(field_list) => {\n+            if field_list.fields().count() != 1 {\n+                return None;\n+            }\n+            let field = field_list.fields().next()?;\n+            (Some(field.name()?), field.ty()?)\n+        }\n+        ast::StructKind::Unit => return None,\n     };\n \n     if existing_from_impl(&ctx.sema, &variant).is_some() {\n@@ -51,18 +62,48 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n         target,\n         |edit| {\n             let start_offset = variant.parent_enum().syntax().text_range().end();\n-            let buf = format!(\n-                r#\"\n+            let mut buf = String::from(\"\\n\\nimpl\");\n+            if let Some(type_params) = &enum_type_params {\n+                format_to!(buf, \"{}\", type_params.syntax());\n+            }\n+            format_to!(buf, \" From<{}> for {}\", field_type.syntax(), enum_name);\n+            if let Some(type_params) = enum_type_params {\n+                let lifetime_params = type_params\n+                    .lifetime_params()\n+                    .filter_map(|it| it.lifetime())\n+                    .map(|it| SmolStr::from(it.text()));\n+                let type_params = type_params\n+                    .type_params()\n+                    .filter_map(|it| it.name())\n+                    .map(|it| SmolStr::from(it.text()));\n \n-impl From<{0}> for {1} {{\n-    fn from(v: {0}) -> Self {{\n-        {1}::{2}(v)\n+                let generic_params = lifetime_params.chain(type_params).format(\", \");\n+                format_to!(buf, \"<{}>\", generic_params)\n+            }\n+            if let Some(name) = field_name {\n+                format_to!(\n+                    buf,\n+                    r#\" {{\n+    fn from({0}: {1}) -> Self {{\n+        Self::{2} {{ {0} }}\n+    }}\n+}}\"#,\n+                    name.text(),\n+                    field_type.syntax(),\n+                    variant_name,\n+                );\n+            } else {\n+                format_to!(\n+                    buf,\n+                    r#\" {{\n+    fn from(v: {}) -> Self {{\n+        Self::{}(v)\n     }}\n }}\"#,\n-                path.syntax(),\n-                enum_name,\n-                variant_name\n-            );\n+                    field_type.syntax(),\n+                    variant_name,\n+                );\n+            }\n             edit.insert(start_offset, buf);\n         },\n     )\n@@ -106,7 +147,7 @@ mod tests {\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n-        A::One(v)\n+        Self::One(v)\n     }\n }\"#,\n         );\n@@ -121,7 +162,7 @@ impl From<u32> for A {\n \n impl From<foo::bar::baz::Boo> for A {\n     fn from(v: foo::bar::baz::Boo) -> Self {\n-        A::One(v)\n+        Self::One(v)\n     }\n }\"#,\n         );\n@@ -145,7 +186,17 @@ impl From<foo::bar::baz::Boo> for A {\n \n     #[test]\n     fn test_add_from_impl_struct_variant() {\n-        check_not_applicable(\"enum A { $0One { x: u32 } }\");\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum A { $0One { x: u32 } }\",\n+            r#\"enum A { One { x: u32 } }\n+\n+impl From<u32> for A {\n+    fn from(x: u32) -> Self {\n+        Self::One { x }\n+    }\n+}\"#,\n+        );\n     }\n \n     #[test]\n@@ -157,7 +208,7 @@ enum A { $0One(u32), }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n-        A::One(v)\n+        Self::One(v)\n     }\n }\n \"#,\n@@ -183,7 +234,7 @@ pub trait From<T> {\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n-        A::One(v)\n+        Self::One(v)\n     }\n }\n \n@@ -195,6 +246,51 @@ impl From<String> for A {\n \n pub trait From<T> {\n     fn from(T) -> Self;\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_from_impl_static_str() {\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum A { $0One(&'static str) }\",\n+            r#\"enum A { One(&'static str) }\n+\n+impl From<&'static str> for A {\n+    fn from(v: &'static str) -> Self {\n+        Self::One(v)\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_from_impl_generic_enum() {\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum Generic<T, U: Clone> { $0One(T), Two(U) }\",\n+            r#\"enum Generic<T, U: Clone> { One(T), Two(U) }\n+\n+impl<T, U: Clone> From<T> for Generic<T, U> {\n+    fn from(v: T) -> Self {\n+        Self::One(v)\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_from_impl_with_lifetime() {\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum Generic<'a> { $0One(&'a i32) }\",\n+            r#\"enum Generic<'a> { One(&'a i32) }\n+\n+impl<'a> From<&'a i32> for Generic<'a> {\n+    fn from(v: &'a i32) -> Self {\n+        Self::One(v)\n+    }\n }\"#,\n         );\n     }"}, {"sha": "0516deaffda287e1cdb729e9d0b89fe5f4f23b87", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2967e783ac53e89f06a8f8bd1afc12433311fded/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e783ac53e89f06a8f8bd1afc12433311fded/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=2967e783ac53e89f06a8f8bd1afc12433311fded", "patch": "@@ -499,7 +499,7 @@ enum A { One(u32) }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n-        A::One(v)\n+        Self::One(v)\n     }\n }\n \"#####,"}]}