{"sha": "0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYmM0MjIxZGM4OTdlZTQwNDhlNjZiODdhZGIzMWZiYmQ2ZjYxOWM=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-01-22T10:58:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-22T10:58:13Z"}, "message": "Use std based dedup in projection\n\nUnstable sort was added recently, and the code that is being modified is 3 years old. As quicksort doesn't allocate it will likely perform as well as, or better than linear search.", "tree": {"sha": "201f512e758096bffdc11e0c9231e9551cfc6a33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/201f512e758096bffdc11e0c9231e9551cfc6a33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaZcPFCRBK7hj4Ov3rIwAAdHIIAHoits5CvDPb5qb6yh8XKnnM\nY32xfFaq6PXdPqHhE/QxjYNa0AjVcUPoDVOs5xf6T5L4nWPgu6FEDzawUdqwavHx\nBvo0CG8pKVStChL5+tUl5v0Tp36RxcTMpAoJRD2fh1rtR1gxQwvH6z8RAl+RZU5E\nP1+d9XIS48R8iDnA0ZFdxWoWUijXGijQ4PVw9tC6xaO0+yDeRd2o8+Q/5ikiRvjj\nhMRFYYtqvHR7MxwbY0a5NRXoHEiIZ4fmYGFQvBJLY+n/QcaGzFhY+BhPnUPaFA2O\npupONdxx5mRpcvy2A5afRRSCW+U7exvFoag4Ntp0cy8z0+MY8dH3keqUSww/fqQ=\n=fRyG\n-----END PGP SIGNATURE-----\n", "payload": "tree 201f512e758096bffdc11e0c9231e9551cfc6a33\nparent bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae\nauthor Tatsuyuki Ishi <ishitatsuyuki@gmail.com> 1516618693 +0900\ncommitter GitHub <noreply@github.com> 1516618693 +0900\n\nUse std based dedup in projection\n\nUnstable sort was added recently, and the code that is being modified is 3 years old. As quicksort doesn't allocate it will likely perform as well as, or better than linear search."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "html_url": "https://github.com/rust-lang/rust/commit/0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bbc4221dc897ee4048e66b87adb31fbbd6f619c/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae", "html_url": "https://github.com/rust-lang/rust/commit/bc072ed0ca8e2e9f8c79fb04e85b47b5c0e8d6ae"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "355216f8c1a1830d643d80fe475bfe457c8cb0e8", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0bbc4221dc897ee4048e66b87adb31fbbd6f619c/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbc4221dc897ee4048e66b87adb31fbbd6f619c/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "patch": "@@ -824,21 +824,12 @@ fn project_type<'cx, 'gcx, 'tcx>(\n     // Drop duplicates.\n     //\n     // Note: `candidates.vec` seems to be on the critical path of the\n-    // compiler. Replacing it with an hash set was also tried, which would\n-    // render the following dedup unnecessary. It led to cleaner code but\n-    // prolonged compiling time of `librustc` from 5m30s to 6m in one test, or\n-    // ~9% performance lost.\n-    if candidates.vec.len() > 1 {\n-        let mut i = 0;\n-        while i < candidates.vec.len() {\n-            let has_dup = (0..i).any(|j| candidates.vec[i] == candidates.vec[j]);\n-            if has_dup {\n-                candidates.vec.swap_remove(i);\n-            } else {\n-                i += 1;\n-            }\n-        }\n-    }\n+    // compiler. Replacing it with an HashSet was also tried, which would\n+    // render the following dedup unnecessary. The original comment indicated\n+    // that it was 9% slower, but that data is now obsolete and a new\n+    // benchmark should be performed.\n+    candidates.vec.sort_unstable();\n+    candidates.vec.dedup();\n \n     // Prefer where-clauses. As in select, if there are multiple\n     // candidates, we prefer where-clause candidates over impls.  This"}]}