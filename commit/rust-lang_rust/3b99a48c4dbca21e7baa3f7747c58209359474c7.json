{"sha": "3b99a48c4dbca21e7baa3f7747c58209359474c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOTlhNDhjNGRiY2EyMWU3YmFhM2Y3NzQ3YzU4MjA5MzU5NDc0Yzc=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-04-03T07:07:45Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-14T07:30:02Z"}, "message": "HirIdify hir::Def", "tree": {"sha": "93fd9bd86676517fab2a8f665150c95392babd05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93fd9bd86676517fab2a8f665150c95392babd05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b99a48c4dbca21e7baa3f7747c58209359474c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b99a48c4dbca21e7baa3f7747c58209359474c7", "html_url": "https://github.com/rust-lang/rust/commit/3b99a48c4dbca21e7baa3f7747c58209359474c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b99a48c4dbca21e7baa3f7747c58209359474c7/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee621f42329069c296b4c2066b3743cc4ff0f369", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee621f42329069c296b4c2066b3743cc4ff0f369", "html_url": "https://github.com/rust-lang/rust/commit/ee621f42329069c296b4c2066b3743cc4ff0f369"}], "stats": {"total": 418, "additions": 300, "deletions": 118}, "files": [{"sha": "7d173af311264f5fad68753cb92bda7e307aa037", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -2,10 +2,12 @@ use crate::hir::def_id::DefId;\n use crate::util::nodemap::{NodeMap, DefIdMap};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n+use syntax::ast::NodeId;\n use syntax_pos::Span;\n use rustc_macros::HashStable;\n use crate::hir;\n use crate::ty;\n+use std::fmt::Debug;\n \n use self::Namespace::*;\n \n@@ -43,7 +45,7 @@ pub enum NonMacroAttrKind {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n-pub enum Def {\n+pub enum Def<Id = hir::HirId> {\n     // Type namespace\n     Mod(DefId),\n     /// `DefId` refers to the struct itself, `Def::Ctor` refers to its constructor if it exists.\n@@ -78,8 +80,8 @@ pub enum Def {\n     Method(DefId),\n     AssociatedConst(DefId),\n \n-    Local(ast::NodeId),\n-    Upvar(ast::NodeId,  // `NodeId` of closed over local\n+    Local(Id),\n+    Upvar(Id,           // `HirId` of closed over local\n           usize,        // index in the `freevars` list of the closure\n           ast::NodeId), // expr node that creates the closure\n     Label(ast::NodeId),\n@@ -108,22 +110,22 @@ pub enum Def {\n /// ```\n #[derive(Copy, Clone, Debug)]\n pub struct PathResolution {\n-    base_def: Def,\n+    base_def: Def<NodeId>,\n     unresolved_segments: usize,\n }\n \n impl PathResolution {\n-    pub fn new(def: Def) -> Self {\n+    pub fn new(def: Def<NodeId>) -> Self {\n         PathResolution { base_def: def, unresolved_segments: 0 }\n     }\n \n-    pub fn with_unresolved_segments(def: Def, mut unresolved_segments: usize) -> Self {\n+    pub fn with_unresolved_segments(def: Def<NodeId>, mut unresolved_segments: usize) -> Self {\n         if def == Def::Err { unresolved_segments = 0 }\n         PathResolution { base_def: def, unresolved_segments: unresolved_segments }\n     }\n \n     #[inline]\n-    pub fn base_def(&self) -> Def {\n+    pub fn base_def(&self) -> Def<NodeId> {\n         self.base_def\n     }\n \n@@ -215,25 +217,36 @@ pub type DefMap = NodeMap<PathResolution>;\n \n /// This is the replacement export map. It maps a module to all of the exports\n /// within.\n-pub type ExportMap = DefIdMap<Vec<Export>>;\n+pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n \n /// Map used to track the `use` statements within a scope, matching it with all the items in every\n /// namespace.\n pub type ImportMap = NodeMap<PerNS<Option<PathResolution>>>;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct Export {\n+pub struct Export<Id> {\n     /// The name of the target.\n     pub ident: ast::Ident,\n     /// The definition of the target.\n-    pub def: Def,\n+    pub def: Def<Id>,\n     /// The span of the target definition.\n     pub span: Span,\n     /// The visibility of the export.\n     /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n     pub vis: ty::Visibility,\n }\n \n+impl<Id> Export<Id> {\n+    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Export<R> {\n+        Export {\n+            ident: self.ident,\n+            def: self.def.map_id(map),\n+            span: self.span,\n+            vis: self.vis,\n+        }\n+    }\n+}\n+\n impl CtorKind {\n     pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {\n         match *vdata {\n@@ -264,9 +277,12 @@ impl NonMacroAttrKind {\n     }\n }\n \n-impl Def {\n+impl<Id> Def<Id> {\n     /// Return the `DefId` of this `Def` if it has an id, else panic.\n-    pub fn def_id(&self) -> DefId {\n+    pub fn def_id(&self) -> DefId\n+    where\n+        Id: Debug,\n+    {\n         self.opt_def_id().unwrap_or_else(|| {\n             bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n         })\n@@ -358,4 +374,43 @@ impl Def {\n             _ => \"a\",\n         }\n     }\n+\n+    pub fn map_id<R>(self, mut map: impl FnMut(Id) -> R) -> Def<R> {\n+        match self {\n+            Def::Fn(id) => Def::Fn(id),\n+            Def::Mod(id) => Def::Mod(id),\n+            Def::Static(id, is_mutbl) => Def::Static(id, is_mutbl),\n+            Def::Enum(id) => Def::Enum(id),\n+            Def::Variant(id) => Def::Variant(id),\n+            Def::Ctor(a, b, c) => Def::Ctor(a, b, c),\n+            Def::Struct(id) => Def::Struct(id),\n+            Def::Existential(id) => Def::Existential(id),\n+            Def::TyAlias(id) => Def::TyAlias(id),\n+            Def::TraitAlias(id) => Def::TraitAlias(id),\n+            Def::AssociatedTy(id) => Def::AssociatedTy(id),\n+            Def::AssociatedExistential(id) => Def::AssociatedExistential(id),\n+            Def::SelfCtor(id) => Def::SelfCtor(id),\n+            Def::Union(id) => Def::Union(id),\n+            Def::Trait(id) => Def::Trait(id),\n+            Def::ForeignTy(id) => Def::ForeignTy(id),\n+            Def::Method(id) => Def::Method(id),\n+            Def::Const(id) => Def::Const(id),\n+            Def::AssociatedConst(id) => Def::AssociatedConst(id),\n+            Def::TyParam(id) => Def::TyParam(id),\n+            Def::ConstParam(id) => Def::ConstParam(id),\n+            Def::PrimTy(id) => Def::PrimTy(id),\n+            Def::Local(id) => Def::Local(map(id)),\n+            Def::Upvar(id, index, closure) => Def::Upvar(\n+                map(id),\n+                index,\n+                closure\n+            ),\n+            Def::Label(id) => Def::Label(id),\n+            Def::SelfTy(a, b) => Def::SelfTy(a, b),\n+            Def::Macro(id, macro_kind) => Def::Macro(id, macro_kind),\n+            Def::ToolMod => Def::ToolMod,\n+            Def::NonMacroAttr(attr_kind) => Def::NonMacroAttr(attr_kind),\n+            Def::Err => Def::Err,\n+        }\n+    }\n }"}, {"sha": "a8269bb13957030d5f79a0b471c5c8afb1f5ed5a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 122, "deletions": 32, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -401,6 +401,7 @@ impl<'a> LoweringContext<'a> {\n         /// declared for every type and trait definition.\n         struct MiscCollector<'lcx, 'interner: 'lcx> {\n             lctx: &'lcx mut LoweringContext<'interner>,\n+            hir_id_owner: Option<NodeId>,\n         }\n \n         impl MiscCollector<'_, '_> {\n@@ -432,9 +433,34 @@ impl<'a> LoweringContext<'a> {\n                     }\n                 }\n             }\n+\n+            fn with_hir_id_owner<F, T>(&mut self, owner: Option<NodeId>, f: F) -> T\n+            where\n+                F: FnOnce(&mut Self) -> T,\n+            {\n+                let old = mem::replace(&mut self.hir_id_owner, owner);\n+                let r = f(self);\n+                self.hir_id_owner = old;\n+                r\n+            }\n         }\n \n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n+            fn visit_pat(&mut self, p: &'lcx Pat) {\n+                match p.node {\n+                    // Doesn't generate a Hir node\n+                    PatKind::Paren(..) => {},\n+                    _ => {\n+\n+                        if let Some(owner) = self.hir_id_owner {\n+                            self.lctx.lower_node_id_with_owner(p.id, owner);\n+                        }\n+                    }\n+                };\n+\n+                visit::walk_pat(self, p)\n+            }\n+\n             fn visit_item(&mut self, item: &'lcx Item) {\n                 let hir_id = self.lctx.allocate_hir_id_counter(item.id).hir_id;\n \n@@ -461,17 +487,63 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     _ => {}\n                 }\n-                visit::walk_item(self, item);\n+\n+                self.with_hir_id_owner(Some(item.id), |this| {\n+                    visit::walk_item(this, item);\n+                });\n             }\n \n             fn visit_trait_item(&mut self, item: &'lcx TraitItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n-                visit::walk_trait_item(self, item);\n+\n+                match item.node {\n+                    TraitItemKind::Method(_, None) => {\n+                        // Ignore patterns in trait methods without bodies\n+                        self.with_hir_id_owner(None, |this| {\n+                            visit::walk_trait_item(this, item)\n+                        });\n+                    }\n+                    _ => self.with_hir_id_owner(Some(item.id), |this| {\n+                        visit::walk_trait_item(this, item);\n+                    })\n+                }\n             }\n \n             fn visit_impl_item(&mut self, item: &'lcx ImplItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n-                visit::walk_impl_item(self, item);\n+                self.with_hir_id_owner(Some(item.id), |this| {\n+                    visit::walk_impl_item(this, item);\n+                });\n+            }\n+\n+            fn visit_foreign_item(&mut self, i: &'lcx ForeignItem) {\n+                // Ignore patterns in foreign items\n+                self.with_hir_id_owner(None, |this| {\n+                    visit::walk_foreign_item(this, i)\n+                });\n+            }\n+\n+            fn visit_ty(&mut self, t: &'lcx Ty) {\n+                match t.node {\n+                    // Mirrors the case in visit::walk_ty\n+                    TyKind::BareFn(ref f) => {\n+                        walk_list!(\n+                            self,\n+                            visit_generic_param,\n+                            &f.generic_params\n+                        );\n+                        // Mirrors visit::walk_fn_decl\n+                        for argument in &f.decl.inputs {\n+                            // We don't lower the ids of argument patterns\n+                            self.with_hir_id_owner(None, |this| {\n+                                this.visit_pat(&argument.pat);\n+                            });\n+                            self.visit_ty(&argument.ty)\n+                        }\n+                        self.visit_fn_ret_ty(&f.decl.output)\n+                    }\n+                    _ => visit::walk_ty(self, t),\n+                }\n             }\n         }\n \n@@ -565,7 +637,7 @@ impl<'a> LoweringContext<'a> {\n         self.lower_node_id(CRATE_NODE_ID);\n         debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == hir::CRATE_HIR_ID);\n \n-        visit::walk_crate(&mut MiscCollector { lctx: &mut self }, c);\n+        visit::walk_crate(&mut MiscCollector { lctx: &mut self, hir_id_owner: None }, c);\n         visit::walk_crate(&mut ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);\n@@ -729,7 +801,15 @@ impl<'a> LoweringContext<'a> {\n         self.lower_node_id(self.sess.next_node_id())\n     }\n \n-    fn expect_full_def(&mut self, id: NodeId) -> Def {\n+    fn lower_def(&mut self, def: Def<NodeId>) -> Def {\n+        def.map_id(|id| {\n+            self.lower_node_id_generic(id, |_| {\n+                panic!(\"expected node_id to be lowered already for def {:#?}\", def)\n+            }).hir_id\n+        })\n+    }\n+\n+    fn expect_full_def(&mut self, id: NodeId) -> Def<NodeId> {\n         self.resolver.get_resolution(id).map_or(Def::Err, |pr| {\n             if pr.unresolved_segments() != 0 {\n                 bug!(\"path not fully resolved: {:?}\", pr);\n@@ -738,7 +818,7 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn expect_full_def_from_use(&mut self, id: NodeId) -> impl Iterator<Item = Def> {\n+    fn expect_full_def_from_use(&mut self, id: NodeId) -> impl Iterator<Item = Def<NodeId>> {\n         self.resolver.get_import(id).present_items().map(|pr| {\n             if pr.unresolved_segments() != 0 {\n                 bug!(\"path not fully resolved: {:?}\", pr);\n@@ -1324,14 +1404,20 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 return ty;\n             }\n-            TyKind::ImplicitSelf => hir::TyKind::Path(hir::QPath::Resolved(\n-                None,\n-                P(hir::Path {\n-                    def: self.expect_full_def(t.id),\n-                    segments: hir_vec![hir::PathSegment::from_ident(keywords::SelfUpper.ident())],\n-                    span: t.span,\n-                }),\n-            )),\n+            TyKind::ImplicitSelf => {\n+                let def = self.expect_full_def(t.id);\n+                let def = self.lower_def(def);\n+                hir::TyKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    P(hir::Path {\n+                        def,\n+                        segments: hir_vec![hir::PathSegment::from_ident(\n+                            keywords::SelfUpper.ident()\n+                        )],\n+                        span: t.span,\n+                    }),\n+                ))\n+            },\n             TyKind::Array(ref ty, ref length) => {\n                 hir::TyKind::Array(self.lower_ty(ty, itctx), self.lower_anon_const(length))\n             }\n@@ -1755,7 +1841,7 @@ impl<'a> LoweringContext<'a> {\n \n         let proj_start = p.segments.len() - resolution.unresolved_segments();\n         let path = P(hir::Path {\n-            def: resolution.base_def(),\n+            def: self.lower_def(resolution.base_def()),\n             segments: p.segments[..proj_start]\n                 .iter()\n                 .enumerate()\n@@ -1931,6 +2017,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_path(&mut self, id: NodeId, p: &Path, param_mode: ParamMode) -> hir::Path {\n         let def = self.expect_full_def(id);\n+        let def = self.lower_def(def);\n         self.lower_path_extra(def, p, param_mode, None)\n     }\n \n@@ -2042,7 +2129,7 @@ impl<'a> LoweringContext<'a> {\n         hir::PathSegment::new(\n             segment.ident,\n             Some(id.hir_id),\n-            Some(def),\n+            Some(self.lower_def(def)),\n             generic_args,\n             infer_types,\n         )\n@@ -3174,7 +3261,7 @@ impl<'a> LoweringContext<'a> {\n                 let mut defs = self.expect_full_def_from_use(id);\n                 // We want to return *something* from this function, so hold onto the first item\n                 // for later.\n-                let ret_def = defs.next().unwrap_or(Def::Err);\n+                let ret_def = self.lower_def(defs.next().unwrap_or(Def::Err));\n \n                 // Here, we are looping over namespaces, if they exist for the definition\n                 // being imported. We only handle type and value namespaces because we\n@@ -3192,6 +3279,7 @@ impl<'a> LoweringContext<'a> {\n \n                     self.with_hir_id_owner(new_node_id, |this| {\n                         let new_id = this.lower_node_id(new_node_id);\n+                        let def = this.lower_def(def);\n                         let path =\n                             this.lower_path_extra(def, &path, ParamMode::Explicit, None);\n                         let item = hir::ItemKind::Use(P(path), hir::UseKind::Single);\n@@ -3347,6 +3435,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n \n                 let def = self.expect_full_def_from_use(id).next().unwrap_or(Def::Err);\n+                let def = self.lower_def(def);\n                 let path = P(self.lower_path_extra(def, &prefix, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n@@ -3780,7 +3869,7 @@ impl<'a> LoweringContext<'a> {\n                         None,\n                         P(hir::Path {\n                             span: ident.span,\n-                            def,\n+                            def: self.lower_def(def),\n                             segments: hir_vec![hir::PathSegment::from_ident(ident)],\n                         }),\n                     )),\n@@ -4435,7 +4524,7 @@ impl<'a> LoweringContext<'a> {\n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n-                let (next_pat, next_pat_nid) = self.pat_ident_binding_mode(\n+                let (next_pat, next_pat_hid) = self.pat_ident_binding_mode(\n                     desugared_span,\n                     next_ident,\n                     hir::BindingAnnotation::Mutable,\n@@ -4444,9 +4533,9 @@ impl<'a> LoweringContext<'a> {\n                 // `::std::option::Option::Some(val) => next = val`\n                 let pat_arm = {\n                     let val_ident = self.str_to_ident(\"val\");\n-                    let (val_pat, val_pat_nid) = self.pat_ident(pat.span, val_ident);\n-                    let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat_nid));\n-                    let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat_nid));\n+                    let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n+                    let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat_hid));\n+                    let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat_hid));\n                     let assign = P(self.expr(\n                         pat.span,\n                         hir::ExprKind::Assign(next_expr, val_expr),\n@@ -4497,7 +4586,7 @@ impl<'a> LoweringContext<'a> {\n                     span: head_sp,\n                 };\n \n-                let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat_nid));\n+                let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat_hid));\n \n                 // `let mut __next`\n                 let next_let = self.stmt_let_pat(\n@@ -4790,6 +4879,7 @@ impl<'a> LoweringContext<'a> {\n                     self.lower_node_id(id)\n                 };\n                 let def = self.expect_full_def(id);\n+                let def = self.lower_def(def);\n                 hir::VisibilityKind::Restricted {\n                     path: P(self.lower_path_extra(\n                         def,\n@@ -4891,15 +4981,15 @@ impl<'a> LoweringContext<'a> {\n         self.expr(span, hir::ExprKind::Call(e, args), ThinVec::new())\n     }\n \n-    fn expr_ident(&mut self, span: Span, ident: Ident, binding: NodeId) -> hir::Expr {\n+    fn expr_ident(&mut self, span: Span, ident: Ident, binding: hir::HirId) -> hir::Expr {\n         self.expr_ident_with_attrs(span, ident, binding, ThinVec::new())\n     }\n \n     fn expr_ident_with_attrs(\n         &mut self,\n         span: Span,\n         ident: Ident,\n-        binding: NodeId,\n+        binding: hir::HirId,\n         attrs: ThinVec<Attribute>,\n     ) -> hir::Expr {\n         let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n@@ -4994,16 +5084,16 @@ impl<'a> LoweringContext<'a> {\n         mutbl: bool,\n         ident: Ident,\n         ex: P<hir::Expr>,\n-    ) -> (hir::Stmt, NodeId) {\n-        let (pat, pat_nid) = if mutbl {\n+    ) -> (hir::Stmt, hir::HirId) {\n+        let (pat, pat_hid) = if mutbl {\n             self.pat_ident_binding_mode(sp, ident, hir::BindingAnnotation::Mutable)\n         } else {\n             self.pat_ident(sp, ident)\n         };\n \n         (\n             self.stmt_let_pat(sp, Some(ex), pat, hir::LocalSource::Normal),\n-            pat_nid,\n+            pat_hid,\n         )\n     }\n \n@@ -5061,7 +5151,7 @@ impl<'a> LoweringContext<'a> {\n         self.pat(span, pt)\n     }\n \n-    fn pat_ident(&mut self, span: Span, ident: Ident) -> (P<hir::Pat>, NodeId) {\n+    fn pat_ident(&mut self, span: Span, ident: Ident) -> (P<hir::Pat>, hir::HirId) {\n         self.pat_ident_binding_mode(span, ident, hir::BindingAnnotation::Unannotated)\n     }\n \n@@ -5070,16 +5160,16 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         ident: Ident,\n         bm: hir::BindingAnnotation,\n-    ) -> (P<hir::Pat>, NodeId) {\n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+    ) -> (P<hir::Pat>, hir::HirId) {\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n \n         (\n             P(hir::Pat {\n                 hir_id,\n                 node: hir::PatKind::Binding(bm, hir_id, ident.with_span_pos(span), None),\n                 span,\n             }),\n-            node_id\n+            hir_id\n         )\n     }\n "}, {"sha": "4eef2019e26fb2a31058b43c676eb496712d8762", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -393,7 +393,7 @@ impl<'hir> Map<'hir> {\n             Node::Block(_) |\n             Node::Crate => None,\n             Node::Local(local) => {\n-                Some(Def::Local(self.hir_to_node_id(local.hir_id)))\n+                Some(Def::Local(local.hir_id))\n             }\n             Node::MacroDef(macro_def) => {\n                 Some(Def::Macro(self.local_def_id_from_hir_id(macro_def.hir_id),\n@@ -402,8 +402,7 @@ impl<'hir> Map<'hir> {\n             Node::GenericParam(param) => {\n                 Some(match param.kind {\n                     GenericParamKind::Lifetime { .. } => {\n-                        let node_id = self.hir_to_node_id(param.hir_id);\n-                        Def::Local(node_id)\n+                        Def::Local(param.hir_id)\n                     },\n                     GenericParamKind::Type { .. } => Def::TyParam(\n                         self.local_def_id_from_hir_id(param.hir_id)),"}, {"sha": "7ed8c08c92337b2d6130bde436b9c2b6f9aabac5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -2424,24 +2424,31 @@ impl ForeignItemKind {\n \n /// A free variable referred to in a function.\n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct Freevar {\n+pub struct Freevar<Id = HirId> {\n     /// The variable being accessed free.\n-    pub def: Def,\n+    pub def: def::Def<Id>,\n \n     // First span where it is accessed (there can be multiple).\n     pub span: Span\n }\n \n-impl Freevar {\n-    pub fn var_id(&self) -> NodeId {\n+impl<Id: fmt::Debug + Copy> Freevar<Id> {\n+    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Freevar<R> {\n+        Freevar {\n+            def: self.def.map_id(map),\n+            span: self.span,\n+        }\n+    }\n+\n+    pub fn var_id(&self) -> Id {\n         match self.def {\n             Def::Local(id) | Def::Upvar(id, ..) => id,\n             _ => bug!(\"Freevar::var_id: bad def ({:?})\", self.def)\n         }\n     }\n }\n \n-pub type FreevarMap = NodeMap<Vec<Freevar>>;\n+pub type FreevarMap = NodeMap<Vec<Freevar<ast::NodeId>>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;\n "}, {"sha": "41ff9406d9df2d3a57b4bdac8627d16572061805", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -863,7 +863,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n                     // Each match binding is effectively an assignment to the\n                     // binding being produced.\n-                    let def = Def::Local(mc.tcx.hir().hir_to_node_id(canonical_id));\n+                    let def = Def::Local(canonical_id);\n                     if let Ok(ref binding_cmt) = mc.cat_def(pat.hir_id, pat.span, pat_ty, def) {\n                         delegate.mutate(pat.hir_id, pat.span, binding_cmt, MutateMode::Init);\n                     }\n@@ -930,7 +930,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_expr.hir_id);\n         self.tcx().with_freevars(closure_expr.hir_id, |freevars| {\n             for freevar in freevars {\n-                let var_hir_id = self.tcx().hir().node_to_hir_id(freevar.var_id());\n+                let var_hir_id = freevar.var_id();\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_hir_id },\n                     closure_expr_id: closure_def_id.to_local(),\n@@ -967,7 +967,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                         -> mc::McResult<mc::cmt_<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        let var_hir_id = self.tcx().hir().node_to_hir_id(upvar.var_id());\n+        let var_hir_id = upvar.var_id();\n         let var_ty = self.mc.node_ty(var_hir_id)?;\n         self.mc.cat_def(closure_hir_id, closure_span, var_ty, upvar.def)\n     }"}, {"sha": "d167b44d42f89f4e2613a3698f6178ef4be6e849", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -487,8 +487,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n             call_caps.extend(freevars.iter().filter_map(|fv| {\n                 if let Def::Local(rv) = fv.def {\n                     let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n-                    let var_hid = ir.tcx.hir().node_to_hir_id(rv);\n-                    Some(CaptureInfo { ln: fv_ln, var_hid })\n+                    Some(CaptureInfo { ln: fv_ln, var_hid: rv })\n                 } else {\n                     None\n                 }\n@@ -1347,7 +1346,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn access_path(&mut self, hir_id: HirId, path: &hir::Path, succ: LiveNode, acc: u32)\n                    -> LiveNode {\n         match path.def {\n-            Def::Local(nid) => {\n+            Def::Local(hid) => {\n+              let nid = self.ir.tcx.hir().hir_to_node_id(hid);\n               self.access_var(hir_id, nid, succ, acc, path.span)\n             }\n             _ => succ\n@@ -1539,13 +1539,12 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_place(&mut self, expr: &'tcx Expr) {\n         match expr.node {\n             hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n-                if let Def::Local(nid) = path.def {\n+                if let Def::Local(var_hid) = path.def {\n                     // Assignment to an immutable variable or argument: only legal\n                     // if there is no later assignment. If this local is actually\n                     // mutable, then check for a reassignment to flag the mutability\n                     // as being used.\n                     let ln = self.live_node(expr.hir_id, expr.span);\n-                    let var_hid = self.ir.tcx.hir().node_to_hir_id(nid);\n                     let var = self.variable(var_hid, expr.span);\n                     self.warn_about_dead_assign(expr.span, expr.hir_id, ln, var);\n                 }"}, {"sha": "a031037b7a07073ea3dc4cb6e5da89836e098448", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -734,15 +734,17 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n \n             Def::Upvar(var_id, _, fn_node_id) => {\n-                self.cat_upvar(hir_id, span, var_id, fn_node_id)\n+                let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n+                self.cat_upvar(hir_id, span, var_nid, fn_node_id)\n             }\n \n             Def::Local(vid) => {\n+                let vnid = self.tcx.hir().hir_to_node_id(vid);\n                 Ok(cmt_ {\n                     hir_id,\n                     span,\n-                    cat: Categorization::Local(self.tcx.hir().node_to_hir_id(vid)),\n-                    mutbl: MutabilityCategory::from_local(self.tcx, self.tables, vid),\n+                    cat: Categorization::Local(vid),\n+                    mutbl: MutabilityCategory::from_local(self.tcx, self.tables, vnid),\n                     ty: expr_ty,\n                     note: NoteNone\n                 })"}, {"sha": "92266838dd820b0f5a0b7d29ab15a39a3d83ec10", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -103,8 +103,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n         };\n \n         match def {\n-            Some(Def::Local(node_id)) | Some(Def::Upvar(node_id, ..)) => {\n-                let hir_id = self.tcx.hir().node_to_hir_id(node_id);\n+            Some(Def::Local(hir_id)) | Some(Def::Upvar(hir_id, ..)) => {\n                 self.reachable_symbols.insert(hir_id);\n             }\n             Some(def) => {"}, {"sha": "65501e316efc4633ceaa48e10a33265cb39aa598", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -2455,7 +2455,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             tcx.with_freevars(hir_id, |freevars| {\n                                 for (freevar, place) in freevars.iter().zip(places) {\n-                                    let var_name = tcx.hir().name(freevar.var_id());\n+                                    let var_name = tcx.hir().name_by_hir_id(freevar.var_id());\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             });\n@@ -2474,7 +2474,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             tcx.with_freevars(hir_id, |freevars| {\n                                 for (freevar, place) in freevars.iter().zip(places) {\n-                                    let var_name = tcx.hir().name(freevar.var_id());\n+                                    let var_name = tcx.hir().name_by_hir_id(freevar.var_id());\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                                 struct_fmt.field(\"$state\", &places[freevars.len()]);"}, {"sha": "bc9aaf870ceed2b576f7b196b96c6aadc874d190", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -641,7 +641,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query module_exports(_: DefId) -> Option<Lrc<Vec<Export>>> {\n+        query module_exports(_: DefId) -> Option<Lrc<Vec<Export<hir::HirId>>>> {\n             eval_always\n         }\n     }\n@@ -781,7 +781,7 @@ rustc_queries! {\n             eval_always\n             desc { \"fetching what a crate is named\" }\n         }\n-        query item_children(_: DefId) -> Lrc<Vec<Export>> {}\n+        query item_children(_: DefId) -> Lrc<Vec<Export<hir::HirId>>> {}\n         query extern_mod_stmt_cnum(_: DefId) -> Option<CrateNum> {}\n \n         query get_lib_features(_: CrateNum) -> Lrc<LibFeatures> {"}, {"sha": "9bd5b2fdb96197b960cab569e578e569cbb6773a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -1024,7 +1024,7 @@ pub struct GlobalCtxt<'tcx> {\n                                        Lrc<StableVec<TraitCandidate>>>>>,\n \n     /// Export map produced by name resolution.\n-    export_map: FxHashMap<DefId, Lrc<Vec<Export>>>,\n+    export_map: FxHashMap<DefId, Lrc<Vec<Export<hir::HirId>>>>,\n \n     hir_map: hir_map::Map<'tcx>,\n \n@@ -1271,10 +1271,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             types: common_types,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n-                (k, Lrc::new(v))\n+                let exports: Vec<_> = v.into_iter().map(|e| {\n+                    e.map_id(|id| hir.node_to_hir_id(id))\n+                }).collect();\n+                (k, Lrc::new(exports))\n             }).collect(),\n             freevars: resolutions.freevars.into_iter().map(|(k, v)| {\n-                (hir.local_def_id(k), Lrc::new(v))\n+                let vars: Vec<_> = v.into_iter().map(|e| {\n+                    e.map_id(|id| hir.node_to_hir_id(id))\n+                }).collect();\n+                (hir.local_def_id(k), Lrc::new(vars))\n             }).collect(),\n             maybe_unused_trait_imports:\n                 resolutions.maybe_unused_trait_imports"}, {"sha": "d24395ac9c18285573ec0e49d0272de46886990b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -123,7 +123,7 @@ pub struct Resolutions {\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n-    pub export_map: ExportMap,\n+    pub export_map: ExportMap<NodeId>,\n     pub glob_map: GlobMap,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "b31ba10d523a548a588e461924755afb0e5679c2", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -592,7 +592,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name(freevar.var_id())),\n+                                    self.tcx().hir().name_by_hir_id(freevar.var_id())),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }\n@@ -635,7 +635,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name(freevar.var_id())),\n+                                    self.tcx().hir().name_by_hir_id(freevar.var_id())),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }"}, {"sha": "e3bf09299ef0004001690fb97413dbb201db7c25", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -11,6 +11,7 @@ use rustc::middle::cstore::{CrateStore, DepKind,\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n use rustc::hir::def;\n+use rustc::hir;\n use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::query::Providers;\n@@ -347,7 +348,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n             {\n                 let visible_parent_map = &mut visible_parent_map;\n                 let mut add_child = |bfs_queue: &mut VecDeque<_>,\n-                                     child: &def::Export,\n+                                     child: &def::Export<hir::HirId>,\n                                      parent: DefId| {\n                     if child.vis != ty::Visibility::Public {\n                         return;\n@@ -415,7 +416,11 @@ impl cstore::CStore {\n         self.get_crate_data(def.krate).get_item_attrs(def.index, sess)\n     }\n \n-    pub fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<def::Export> {\n+    pub fn item_children_untracked(\n+        &self,\n+        def_id: DefId,\n+        sess: &Session\n+    ) -> Vec<def::Export<hir::HirId>> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate)\n             .each_child_of_item(def_id.index, |child| result.push(child), sess);"}, {"sha": "f7ea67ef34948f74a5ce1ea68d1ddc0f4571b329", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     /// Iterates over each child of the given item.\n     pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n-        where F: FnMut(def::Export)\n+        where F: FnMut(def::Export<hir::HirId>)\n     {\n         if let Some(ref proc_macros) = self.proc_macros {\n             /* If we are loading as a proc macro, we want to return the view of this crate"}, {"sha": "504c7da7d6b9e0fc25f5060c35fc45f9d31ac3c5", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -423,7 +423,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for RenderedConst {\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ModData {\n-    pub reexports: LazySeq<def::Export>,\n+    pub reexports: LazySeq<def::Export<hir::HirId>>,\n }\n \n impl_stable_hash_for!(struct ModData { reexports });"}, {"sha": "3ab0996d3a17f835d7d49f007f2bdcf82e1b5562", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -1824,7 +1824,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         .tcx\n                         .with_freevars(hir_id, |fv| fv[field.index()]);\n \n-                    self.infcx.tcx.hir().name(freevar.var_id()).to_string()\n+                    self.infcx.tcx.hir().name_by_hir_id(freevar.var_id()).to_string()\n                 }\n                 _ => {\n                     // Might need a revision when the fields in trait RFC is implemented"}, {"sha": "2c22c5e64c4f0ed3d9cf956e4c7ff7e29294ec7d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -986,14 +986,13 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n     match def {\n-        Def::Local(id) => ExprKind::VarRef { id: cx.tcx.hir().node_to_hir_id(id) },\n+        Def::Local(id) => ExprKind::VarRef { id },\n \n-        Def::Upvar(var_id, index, closure_expr_id) => {\n+        Def::Upvar(var_hir_id, index, closure_expr_id) => {\n             debug!(\"convert_var(upvar({:?}, {:?}, {:?}))\",\n-                   var_id,\n+                   var_hir_id,\n                    index,\n                    closure_expr_id);\n-            let var_hir_id = cx.tcx.hir().node_to_hir_id(var_id);\n             let var_ty = cx.tables().node_type(var_hir_id);\n \n             // FIXME free regions in closures are not right\n@@ -1195,7 +1194,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    freevar: &hir::Freevar,\n                                    freevar_ty: Ty<'tcx>)\n                                    -> ExprRef<'tcx> {\n-    let var_hir_id = cx.tcx.hir().node_to_hir_id(freevar.var_id());\n+    let var_hir_id = freevar.var_id();\n     let upvar_id = ty::UpvarId {\n         var_path: ty::UpvarPath { hir_id: var_hir_id },\n         closure_expr_id: cx.tcx.hir().local_def_id_from_hir_id(closure_expr.hir_id).to_local(),"}, {"sha": "72dd043f214352d094ac7dfa10631796883f76b7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -12,7 +12,7 @@ use crate::Namespace::{self, TypeNS, ValueNS, MacroNS};\n use crate::{resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::bug;\n-use rustc::hir::def::*;\n+use rustc::hir::def::{self, *};\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::middle::cstore::CrateStore;\n@@ -44,6 +44,8 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use log::debug;\n \n+type Def = def::Def<NodeId>;\n+\n impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n@@ -641,7 +643,11 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'a>, child: Export) {\n+    fn build_reduced_graph_for_external_crate_def(\n+        &mut self,\n+        parent: Module<'a>,\n+        child: Export<ast::NodeId>,\n+    ) {\n         let Export { ident, def, vis, span } = child;\n         // FIXME: We shouldn't create the gensym here, it should come from metadata,\n         // but metadata cannot encode gensyms currently, so we create it here.\n@@ -684,13 +690,14 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n \n                 for child in self.cstore.item_children_untracked(def_id, self.session) {\n-                    let ns = if let Def::AssociatedTy(..) = child.def { TypeNS } else { ValueNS };\n+                    let def = child.def.map_id(|_| panic!(\"unexpected id\"));\n+                    let ns = if let Def::AssociatedTy(..) = def { TypeNS } else { ValueNS };\n                     self.define(module, child.ident, ns,\n-                                (child.def, ty::Visibility::Public, DUMMY_SP, expansion));\n+                                (def, ty::Visibility::Public, DUMMY_SP, expansion));\n \n                     if self.cstore.associated_item_cloned_untracked(child.def.def_id())\n                            .method_has_self_argument {\n-                        self.has_self.insert(child.def.def_id());\n+                        self.has_self.insert(def.def_id());\n                     }\n                 }\n                 module.populated.set(true);\n@@ -777,6 +784,7 @@ impl<'a> Resolver<'a> {\n         if module.populated.get() { return }\n         let def_id = module.def_id().unwrap();\n         for child in self.cstore.item_children_untracked(def_id, self.session) {\n+            let child = child.map_id(|_| panic!(\"unexpected id\"));\n             self.build_reduced_graph_for_external_crate_def(module, child);\n         }\n         module.populated.set(true)"}, {"sha": "9e3894dab0da0b40f1bc418edc006725a9385cd0", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -2,14 +2,16 @@ use std::cmp::Reverse;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n-use rustc::hir::def::{Def, CtorKind, Namespace::*};\n+use rustc::hir::def::{self, CtorKind, Namespace::*};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::session::{Session, config::nightly_options};\n-use syntax::ast::{Expr, ExprKind, Ident};\n+use syntax::ast::{self, Expr, ExprKind, Ident};\n use syntax::ext::base::MacroKind;\n use syntax::symbol::{Symbol, keywords};\n use syntax_pos::{BytePos, Span};\n \n+type Def = def::Def<ast::NodeId>;\n+\n use crate::macros::ParentScope;\n use crate::resolve_imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n use crate::{import_candidate_to_enum_paths, is_self_type, is_self_value, path_names_to_string};"}, {"sha": "96aac977297979cbe8d14af8f0300dd9e94f6ddb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -4,6 +4,7 @@\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(type_alias_enum_variants)]\n \n #![recursion_limit=\"256\"]\n \n@@ -20,7 +21,9 @@ use rustc::hir::{self, PrimTy, Bool, Char, Float, Int, Uint, Str};\n use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::lint;\n-use rustc::hir::def::*;\n+use rustc::hir::def::{\n+    self, PathResolution, CtorKind, CtorOf, NonMacroAttrKind, DefMap, ImportMap, ExportMap\n+};\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n@@ -66,6 +69,8 @@ use error_reporting::{find_span_of_binding_until_next_binding, extend_span_to_pr\n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n use macros::{InvocationData, LegacyBinding, ParentScope};\n \n+type Def = def::Def<NodeId>;\n+\n // N.B., this module needs to be declared first so diagnostics are\n // registered before they are used.\n mod diagnostics;\n@@ -1563,7 +1568,7 @@ pub struct Resolver<'a> {\n     import_map: ImportMap,\n     pub freevars: FreevarMap,\n     freevars_seen: NodeMap<NodeMap<usize>>,\n-    pub export_map: ExportMap,\n+    pub export_map: ExportMap<NodeId>,\n     pub trait_map: TraitMap,\n \n     /// A map from nodes to anonymous modules.\n@@ -1773,7 +1778,7 @@ impl<'a> Resolver<'a> {\n             }\n         };\n         let path = self.resolve_hir_path_cb(&path, is_value, |_, _, _| errored = true);\n-        if errored || path.def == Def::Err {\n+        if errored || path.def == def::Def::Err {\n             Err(())\n         } else {\n             Ok(path)\n@@ -1819,12 +1824,14 @@ impl<'a> Resolver<'a> {\n \n         let segments: Vec<_> = segments.iter().map(|seg| {\n             let mut hir_seg = hir::PathSegment::from_ident(seg.ident);\n-            hir_seg.def = Some(self.def_map.get(&seg.id).map_or(Def::Err, |p| p.base_def()));\n+            hir_seg.def = Some(self.def_map.get(&seg.id).map_or(def::Def::Err, |p| {\n+                p.base_def().map_id(|_| panic!(\"unexpected node_id\"))\n+            }));\n             hir_seg\n         }).collect();\n         hir::Path {\n             span,\n-            def,\n+            def: def.map_id(|_| panic!(\"unexpected node_id\")),\n             segments: segments.into(),\n         }\n     }"}, {"sha": "64f652d6eebaadd657bd07f9fe97145c4e82ab98", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -8,7 +8,7 @@ use crate::build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use crate::resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n                          CrateNum, DefIndexAddressSpace};\n-use rustc::hir::def::{Def, NonMacroAttrKind};\n+use rustc::hir::def::{self, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n use rustc::{bug, span_bug};\n@@ -33,6 +33,8 @@ use std::cell::Cell;\n use std::{mem, ptr};\n use rustc_data_structures::sync::Lrc;\n \n+type Def = def::Def<ast::NodeId>;\n+\n #[derive(Clone, Debug)]\n pub struct InvocationData<'a> {\n     def_index: DefIndex,"}, {"sha": "9f6395fa9071ad8ea588feae5ac0de630be2c52e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -21,7 +21,7 @@ use rustc::lint::builtin::{\n     UNUSED_IMPORTS,\n };\n use rustc::hir::def_id::{CrateNum, DefId};\n-use rustc::hir::def::*;\n+use rustc::hir::def::{self, PathResolution, Export};\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n@@ -39,6 +39,8 @@ use log::*;\n use std::cell::{Cell, RefCell};\n use std::{mem, ptr};\n \n+type Def = def::Def<NodeId>;\n+\n /// Contains data for specific types of import directives.\n #[derive(Clone, Debug)]\n pub enum ImportDirectiveSubclass<'a> {"}, {"sha": "a5ddf89d3d439429a8effd4775fd1034d80a8002", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -915,13 +915,13 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // process collected paths\n         for (id, ident, immut) in collector.collected_idents {\n             match self.save_ctxt.get_path_def(id) {\n-                HirDef::Local(id) => {\n+                HirDef::Local(hir_id) => {\n                     let mut value = if immut == ast::Mutability::Immutable {\n                         self.span.snippet(ident.span)\n                     } else {\n                         \"<mutable>\".to_owned()\n                     };\n-                    let hir_id = self.tcx.hir().node_to_hir_id(id);\n+                    let id = self.tcx.hir().hir_to_node_id(hir_id);\n                     let typ = self.save_ctxt\n                         .tables\n                         .node_type_opt(hir_id)"}, {"sha": "ce0decaee496fb67cbf1e99b72741e72175dd70c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -659,7 +659,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Node::Binding(&hir::Pat {\n                 node: hir::PatKind::Binding(_, canonical_id, ..),\n                 ..\n-            }) => HirDef::Local(self.tcx.hir().hir_to_node_id(canonical_id)),\n+            }) => HirDef::Local(canonical_id),\n \n             _ => HirDef::Err,\n         }\n@@ -707,7 +707,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 Some(Ref {\n                     kind: RefKind::Variable,\n                     span,\n-                    ref_id: id_from_node_id(id, self),\n+                    ref_id: id_from_node_id(self.tcx.hir().hir_to_node_id(id), self),\n                 })\n             }\n             HirDef::Trait(def_id) if fn_type(path_seg) => {"}, {"sha": "b8c0baff69b28f781a3f297482a6022d254e9c75", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -350,7 +350,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                     let def_span = match def {\n                         Def::Err => None,\n-                        Def::Local(id) | Def::Upvar(id, ..) => Some(self.tcx.hir().span(id)),\n+                        Def::Local(id) | Def::Upvar(id, ..) => {\n+                            Some(self.tcx.hir().span_by_hir_id(id))\n+                        },\n                         _ => def\n                             .opt_def_id()\n                             .and_then(|did| self.tcx.hir().span_if_local(did)),"}, {"sha": "8c1f4aabb1b2ba67638746d8a3c73d5d62e5bbbf", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -236,12 +236,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     ) -> Option<(Span, &'static str, String)> {\n         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.node {\n             if let hir::def::Def::Local(id) = path.def {\n-                let parent = self.tcx.hir().get_parent_node(id);\n+                let parent = self.tcx.hir().get_parent_node_by_hir_id(id);\n                 if let Some(Node::Expr(hir::Expr {\n                     hir_id,\n                     node: hir::ExprKind::Closure(_, decl, ..),\n                     ..\n-                })) = self.tcx.hir().find(parent) {\n+                })) = self.tcx.hir().find_by_hir_id(parent) {\n                     let parent = self.tcx.hir().get_parent_node_by_hir_id(*hir_id);\n                     if let (Some(Node::Expr(hir::Expr {\n                         node: hir::ExprKind::MethodCall(path, span, expr),"}, {"sha": "ff889c89770afb60b20783f74aeff59bb937535f", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -249,14 +249,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             ExprKind::Path(ref qpath) => {\n                                 // local binding\n                                 if let &QPath::Resolved(_, ref path) = &qpath {\n-                                    if let hir::def::Def::Local(node_id) = path.def {\n-                                        let span = tcx.hir().span(node_id);\n+                                    if let hir::def::Def::Local(hir_id) = path.def {\n+                                        let span = tcx.hir().span_by_hir_id(hir_id);\n                                         let snippet = tcx.sess.source_map().span_to_snippet(span)\n                                             .unwrap();\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n-                                        let parent_node = self.tcx.hir().get(\n-                                            self.tcx.hir().get_parent_node(node_id),\n+                                        let parent_node = self.tcx.hir().get_by_hir_id(\n+                                            self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n                                         );\n                                         let msg = format!(\n                                             \"you must specify a type for this binding, like `{}`\","}, {"sha": "0f076aaa2050966a27561faeacb3026fb78998f8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -5397,8 +5397,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let tcx = self.tcx;\n \n         match def {\n-            Def::Local(nid) | Def::Upvar(nid, ..) => {\n-                let hid = self.tcx.hir().node_to_hir_id(nid);\n+            Def::Local(hid) | Def::Upvar(hid, ..) => {\n                 let ty = self.local_ty(span, hid).decl_ty;\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(hir_id, ty);"}, {"sha": "dc66c6c93d0e0c0481c86ff106cc46c5d607f541", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for freevar in freevars {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath {\n-                        hir_id: self.tcx.hir().node_to_hir_id(freevar.var_id()),\n+                        hir_id: freevar.var_id(),\n                     },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n@@ -250,8 +250,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             freevars\n                 .iter()\n                 .map(|freevar| {\n-                    let var_node_id = freevar.var_id();\n-                    let var_hir_id = tcx.hir().node_to_hir_id(var_node_id);\n+                    let var_hir_id = freevar.var_id();\n                     let freevar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n                         var_path: ty::UpvarPath { hir_id: var_hir_id },\n@@ -261,7 +260,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                     debug!(\n                         \"var_id={:?} freevar_ty={:?} capture={:?}\",\n-                        var_node_id, freevar_ty, capture\n+                        var_hir_id, freevar_ty, capture\n                     );\n \n                     match capture {"}, {"sha": "a62b33686485f2d15b33d28edf23bcef5fe790c0", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b99a48c4dbca21e7baa3f7747c58209359474c7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=3b99a48c4dbca21e7baa3f7747c58209359474c7", "patch": "@@ -429,12 +429,12 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Def> {\n                 // skip proc-macro stubs, they'll cause `get_macro` to crash\n             } else {\n                 if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n-                    return Some(def);\n+                    return Some(def.map_id(|_| panic!(\"unexpected id\")));\n                 }\n             }\n         }\n         if let Some(def) = resolver.all_macros.get(&Symbol::intern(path_str)) {\n-            return Some(*def);\n+            return Some(def.map_id(|_| panic!(\"unexpected id\")));\n         }\n         None\n     })"}]}