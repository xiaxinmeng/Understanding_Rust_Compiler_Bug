{"sha": "9fd546bec23ac817a45da28889e76118969db91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZDU0NmJlYzIzYWM4MTdhNDVkYTI4ODg5ZTc2MTE4OTY5ZGI5MWU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-03T05:19:50Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:38:20Z"}, "message": "Add map_id to TokenId", "tree": {"sha": "d00a96f165b9d986fb7ebb37c8ec5733082fcb47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00a96f165b9d986fb7ebb37c8ec5733082fcb47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd546bec23ac817a45da28889e76118969db91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd546bec23ac817a45da28889e76118969db91e", "html_url": "https://github.com/rust-lang/rust/commit/9fd546bec23ac817a45da28889e76118969db91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd546bec23ac817a45da28889e76118969db91e/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9fb01f803671bfb6fca6b873bd140d8177ecb1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9fb01f803671bfb6fca6b873bd140d8177ecb1c", "html_url": "https://github.com/rust-lang/rust/commit/d9fb01f803671bfb6fca6b873bd140d8177ecb1c"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "8d9217518ede4066e75e78e881e8d671af7218ba", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fd546bec23ac817a45da28889e76118969db91e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd546bec23ac817a45da28889e76118969db91e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=9fd546bec23ac817a45da28889e76118969db91e", "patch": "@@ -12,12 +12,26 @@ use tt::buffer::{Cursor, TokenBuffer};\n \n use crate::subtree_source::SubtreeTokenSource;\n use crate::ExpandError;\n+use std::sync::atomic::{AtomicU32, Ordering};\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n-#[derive(Default)]\n pub struct TokenMap {\n     /// Maps `tt::TokenId` to the *relative* source range.\n     tokens: Vec<TextRange>,\n+    map_id: u32,\n+}\n+\n+static TOKEN_MAP_COUNTER: AtomicU32 = AtomicU32::new(0);\n+\n+/// Generate an unique token map id for each instance\n+fn make_uniq_token_map_id() -> u32 {\n+    TOKEN_MAP_COUNTER.fetch_add(1, Ordering::SeqCst)\n+}\n+\n+impl std::default::Default for TokenMap {\n+    fn default() -> TokenMap {\n+        TokenMap { tokens: Default::default(), map_id: make_uniq_token_map_id() }\n+    }\n }\n \n /// Convert the syntax tree (what user has written) to a `TokenTree` (what macro\n@@ -105,14 +119,17 @@ pub fn token_tree_to_items(tt: &tt::Subtree) -> Result<Parse<ast::MacroItems>, E\n \n impl TokenMap {\n     pub fn relative_range_of(&self, tt: tt::TokenId) -> Option<TextRange> {\n-        let idx = tt.0 as usize;\n+        if self.map_id != tt.map_id() {\n+            return None;\n+        }\n+        let idx = tt.token_id() as usize;\n         self.tokens.get(idx).copied()\n     }\n \n     fn alloc(&mut self, relative_range: TextRange) -> tt::TokenId {\n         let id = self.tokens.len();\n         self.tokens.push(relative_range);\n-        tt::TokenId(id as u32)\n+        tt::TokenId::new(id as u32, self.map_id)\n     }\n }\n "}, {"sha": "96410ff222a14159513d71443b971104a4507a7a", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fd546bec23ac817a45da28889e76118969db91e/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd546bec23ac817a45da28889e76118969db91e/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=9fd546bec23ac817a45da28889e76118969db91e", "patch": "@@ -25,11 +25,23 @@ use smol_str::SmolStr;\n /// source token and making sure that identities are preserved during macro\n /// expansion.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TokenId(pub u32);\n+pub struct TokenId(u32, u32);\n \n impl TokenId {\n+    pub fn new(token_id: u32, map_id: u32) -> TokenId {\n+        TokenId(token_id, map_id)\n+    }\n+\n     pub const fn unspecified() -> TokenId {\n-        TokenId(!0)\n+        TokenId(!0, !0)\n+    }\n+\n+    pub fn token_id(&self) -> u32 {\n+        self.0\n+    }\n+\n+    pub fn map_id(&self) -> u32 {\n+        self.1\n     }\n }\n "}]}