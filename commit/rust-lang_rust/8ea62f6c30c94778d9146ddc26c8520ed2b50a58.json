{"sha": "8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "node_id": "C_kwDOAAsO6NoAKDhlYTYyZjZjMzBjOTQ3NzhkOTE0NmRkYzI2Yzg1MjBlZDJiNTBhNTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T09:00:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T09:00:31Z"}, "message": "Auto merge of #106588 - JohnTitor:rollup-4z80tjx, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #103104 (Stabilize `main_separator_str`)\n - #106410 (Suggest `mut self: &mut Self` for `?Sized` impls)\n - #106457 (Adjust comments about pre-push.sh hook)\n - #106546 (jsondoclint: Check local items in `paths` are also in `index`.)\n - #106557 (Add some UI tests and reword error-code docs)\n - #106562 (Clarify examples for `VecDeque::get/get_mut`)\n - #106580 (remove unreachable error code `E0313`)\n - #106581 (Do not emit wrong E0308 suggestion for closure mismatch)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3d04b0d8d3e598939b6858ab2e51d06724875278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d04b0d8d3e598939b6858ab2e51d06724875278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "html_url": "https://github.com/rust-lang/rust/commit/8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afe58571e53d48a1fc2354271abe5aff60c5c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afe58571e53d48a1fc2354271abe5aff60c5c44", "html_url": "https://github.com/rust-lang/rust/commit/2afe58571e53d48a1fc2354271abe5aff60c5c44"}, {"sha": "789ebdca4797247351ec8770d26f8e23214f1f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/789ebdca4797247351ec8770d26f8e23214f1f25", "html_url": "https://github.com/rust-lang/rust/commit/789ebdca4797247351ec8770d26f8e23214f1f25"}], "stats": {"total": 362, "additions": 268, "deletions": 94}, "files": [{"sha": "09ef84f7cbb84f8d1534d66e7249704d8425b0b3", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -344,20 +344,25 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     } else {\n                         err.span_help(source_info.span, \"try removing `&mut` here\");\n                     }\n-                } else if decl.mutability == Mutability::Not\n-                    && !matches!(\n+                } else if decl.mutability == Mutability::Not {\n+                    if matches!(\n                         decl.local_info,\n                         Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n                             hir::ImplicitSelfKind::MutRef\n-                        ))))\n-                    )\n-                {\n-                    err.span_suggestion_verbose(\n-                        decl.source_info.span.shrink_to_lo(),\n-                        \"consider making the binding mutable\",\n-                        \"mut \",\n-                        Applicability::MachineApplicable,\n-                    );\n+                        ),)))\n+                    ) {\n+                        err.note(\n+                            \"as `Self` may be unsized, this call attempts to take `&mut &mut self`\",\n+                        );\n+                        err.note(\"however, `&mut self` expands to `self: &mut Self`, therefore `self` cannot be borrowed mutably\");\n+                    } else {\n+                        err.span_suggestion_verbose(\n+                            decl.source_info.span.shrink_to_lo(),\n+                            \"consider making the binding mutable\",\n+                            \"mut \",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    };\n                 }\n             }\n "}, {"sha": "76d5da19399ed9bb58776ed01b066ad90e3496d2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -579,8 +579,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0300, // unexpanded macro\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n-    E0313, // lifetime of borrowed pointer outlives lifetime of captured\n-           // variable\n+//  E0313, // removed: found unreachable\n //  E0314, // closure outlives stack frame\n //  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums"}, {"sha": "ac78f66adada052ae5b3487fa532bb4b8f65874a", "filename": "compiler/rustc_error_codes/src/error_codes/E0015.md", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0015.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0015.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0015.md?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -1,5 +1,4 @@\n-A constant item was initialized with something that is not a constant\n-expression.\n+A non-`const` function was called in a `const` context.\n \n Erroneous code example:\n \n@@ -8,26 +7,20 @@ fn create_some() -> Option<u8> {\n     Some(1)\n }\n \n-const FOO: Option<u8> = create_some(); // error!\n+// error: cannot call non-const fn `create_some` in constants\n+const FOO: Option<u8> = create_some();\n ```\n \n-The only functions that can be called in static or constant expressions are\n-`const` functions, and struct/enum constructors.\n+All functions used in a `const` context (constant or static expression) must\n+be marked `const`.\n \n To fix this error, you can declare `create_some` as a constant function:\n \n ```\n-const fn create_some() -> Option<u8> { // declared as a const function\n+// declared as a `const` function:\n+const fn create_some() -> Option<u8> {\n     Some(1)\n }\n \n-const FOO: Option<u8> = create_some(); // ok!\n-\n-// These are also working:\n-struct Bar {\n-    x: u8,\n-}\n-\n-const OTHER_FOO: Option<u8> = Some(1);\n-const BAR: Bar = Bar {x: 1};\n+const FOO: Option<u8> = create_some(); // no error!\n ```"}, {"sha": "f15cf5e3ef94817938698d13293bb383dbba2914", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -1379,7 +1379,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     // If we've reached our target type with just removing `&`, then just print now.\n-                    if steps == 0 {\n+                    if steps == 0 && !remove.trim().is_empty() {\n                         return Some((\n                             prefix_span,\n                             format!(\"consider removing the `{}`\", remove.trim()),\n@@ -1438,6 +1438,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             (prefix_span, format!(\"{}{}\", prefix, \"*\".repeat(steps)))\n                         };\n+                        if suggestion.trim().is_empty() {\n+                            return None;\n+                        }\n \n                         return Some((\n                             span,"}, {"sha": "b02e7d73c51f863e33390d59ef320b1f24e07302", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-filelength\n //! Error Reporting Code for the inference engine\n //!\n //! Because of the way inference, and in particular region inference,"}, {"sha": "7bb79d7bda8ddf5e2954803da34046a212a45a91", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -25,16 +25,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             infer::Reborrow(span) => {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_reborrow }.add_to_diagnostic(err)\n             }\n-            infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                RegionOriginNote::WithName {\n-                    span,\n-                    msg: fluent::infer_reborrow,\n-                    name: &var_name.to_string(),\n-                    continues: false,\n-                }\n-                .add_to_diagnostic(err);\n-            }\n             infer::RelateObjectBound(span) => {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_relate_object_bound }\n                     .add_to_diagnostic(err);\n@@ -162,33 +152,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0313,\n-                    \"lifetime of borrowed pointer outlives lifetime of captured variable `{}`...\",\n-                    var_name\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"...the borrowed pointer is valid for \",\n-                    sub,\n-                    \"...\",\n-                    None,\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    &format!(\"...but `{}` is only valid for \", var_name),\n-                    sup,\n-                    \"\",\n-                    None,\n-                );\n-                err\n-            }\n             infer::RelateObjectBound(span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "bc8bbd4be6ae19105f2bf84d2e5defd17d0c96ef", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -409,9 +409,6 @@ pub enum SubregionOrigin<'tcx> {\n     /// Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n-    /// Creating a pointer `b` to contents of an upvar\n-    ReborrowUpvar(Span, ty::UpvarId),\n-\n     /// Data with type `Ty<'tcx>` was borrowed\n     DataBorrowed(Ty<'tcx>, Span),\n \n@@ -1954,7 +1951,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             RelateParamBound(a, ..) => a,\n             RelateRegionParamBound(a) => a,\n             Reborrow(a) => a,\n-            ReborrowUpvar(a, _) => a,\n             DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplItemObligation { span, .. } => span,"}, {"sha": "451e4936bc50eb8c29b6580ea37e8bc641f25acd", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -636,6 +636,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// buf.push_back(5);\n+    /// buf.push_back(6);\n     /// assert_eq!(buf.get(1), Some(&4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -661,10 +662,11 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// buf.push_back(5);\n+    /// buf.push_back(6);\n+    /// assert_eq!(buf[1], 4);\n     /// if let Some(elem) = buf.get_mut(1) {\n     ///     *elem = 7;\n     /// }\n-    ///\n     /// assert_eq!(buf[1], 7);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "82d68369312f9d09d6fd867c4c422c720246d076", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -271,7 +271,7 @@ pub const MAIN_SEPARATOR: char = crate::sys::path::MAIN_SEP;\n /// The primary separator of path components for the current platform.\n ///\n /// For example, `/` on Unix and `\\` on Windows.\n-#[unstable(feature = \"main_separator_str\", issue = \"94071\")]\n+#[stable(feature = \"main_separator_str\", since = \"CURRENT_RUSTC_VERSION\")]\n pub const MAIN_SEPARATOR_STR: &str = crate::sys::path::MAIN_SEP_STR;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "ca4feac6fac70f21e9bbc0accdcc4aee9e910074", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -351,7 +351,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n     Ok(template)\n }\n \n-// install a git hook to automatically run tidy --bless, if they want\n+// install a git hook to automatically run tidy, if they want\n fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n     let git = t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n         assert!(output.status.success(), \"failed to run `git`\");\n@@ -367,7 +367,7 @@ fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n     println!();\n     println!(\n         \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n-If you'd like, x.py can install a git hook for you that will automatically run `tidy --bless` before\n+If you'd like, x.py can install a git hook for you that will automatically run `test tidy` before\n pushing your code to ensure your code is up to par. If you decide later that this behavior is\n undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     );"}, {"sha": "7a846d44ad6a8e9484b51aaf41705683feef5742", "filename": "src/etc/pre-push.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Fetc%2Fpre-push.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Fetc%2Fpre-push.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpre-push.sh?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Call `tidy --bless` before git push\n+# Call `tidy` before git push\n # Copy this script to .git/hooks to activate,\n # and remove it from .git/hooks to deactivate.\n #"}, {"sha": "2e608c5db3e1d160c6548ce81bad3c92a1a91494", "filename": "src/test/ui/borrowck/issue-93078.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,15 @@\n+trait Modify {\n+    fn modify(&mut self) ;\n+}\n+\n+impl<T> Modify for T  {\n+    fn modify(&mut self)  {}\n+}\n+\n+trait Foo {\n+    fn mute(&mut self) {\n+        self.modify(); //~ ERROR cannot borrow `self` as mutable\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "771a652a1739cfb1c2f461d9da0afb7d656b07f8", "filename": "src/test/ui/borrowck/issue-93078.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.stderr?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-93078.rs:11:9\n+   |\n+LL |         self.modify();\n+   |         ^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: as `Self` may be unsized, this call attempts to take `&mut &mut self`\n+   = note: however, `&mut self` expands to `self: &mut Self`, therefore `self` cannot be borrowed mutably\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "9b3982a785b7fa845ae277cea8029adbfb44f5f0", "filename": "src/test/ui/error-codes/E0013.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0013.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,4 @@\n+static X: i32 = 42;\n+const Y: i32 = X; //~ ERROR constants cannot refer to statics [E0013]\n+\n+fn main() {}"}, {"sha": "dc22053a63895e14ba2625b66c1584f5ed765ea9", "filename": "src/test/ui/error-codes/E0013.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0013.stderr?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,11 @@\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/E0013.rs:2:16\n+   |\n+LL | const Y: i32 = X;\n+   |                ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "b0211358d81668cdec050a14ba826125e037fc43", "filename": "src/test/ui/error-codes/E0015.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0015.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,8 @@\n+fn create_some() -> Option<u8> {\n+    Some(1)\n+}\n+\n+const FOO: Option<u8> = create_some();\n+//~^ ERROR cannot call non-const fn `create_some` in constants [E0015]\n+\n+fn main() {}"}, {"sha": "ec1ce47b2ce78c122e38133871526572ae10f0c4", "filename": "src/test/ui/error-codes/E0015.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ferror-codes%2FE0015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0015.stderr?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,11 @@\n+error[E0015]: cannot call non-const fn `create_some` in constants\n+  --> $DIR/E0015.rs:5:25\n+   |\n+LL | const FOO: Option<u8> = create_some();\n+   |                         ^^^^^^^^^^^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "5f6a78351a2477fc75d5022fc0364b61e46d6ce2", "filename": "src/test/ui/type/closure-with-wrong-borrows.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ftype%2Fclosure-with-wrong-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ftype%2Fclosure-with-wrong-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fclosure-with-wrong-borrows.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,10 @@\n+struct S<'a>(&'a str);\n+\n+fn f(inner: fn(&str, &S)) {\n+}\n+\n+#[allow(unreachable_code)]\n+fn main() {\n+    let inner: fn(_, _) = unimplemented!();\n+    f(inner); //~ ERROR mismatched types\n+}"}, {"sha": "7370bc76467656bcdd0d70ed44c1ce967d04c837", "filename": "src/test/ui/type/closure-with-wrong-borrows.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ftype%2Fclosure-with-wrong-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftest%2Fui%2Ftype%2Fclosure-with-wrong-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fclosure-with-wrong-borrows.stderr?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/closure-with-wrong-borrows.rs:9:7\n+   |\n+LL |     f(inner);\n+   |     - ^^^^^ one type is more general than the other\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected fn pointer `for<'a, 'b, 'c> fn(&'a str, &'b S<'c>)`\n+              found fn pointer `fn(_, _)`\n+note: function defined here\n+  --> $DIR/closure-with-wrong-borrows.rs:3:4\n+   |\n+LL | fn f(inner: fn(&str, &S)) {\n+   |    ^ -------------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c6f55410e44377fb846adc3479fafbc4c4cff61e", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -3,14 +3,17 @@ use std::hash::Hash;\n \n use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n-    GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Module, OpaqueTy, Path,\n-    Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n-    TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n+    GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, ItemSummary, Module,\n+    OpaqueTy, Path, Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias,\n+    Type, TypeBinding, TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n };\n use serde_json::Value;\n \n use crate::{item_kind::Kind, json_find, Error, ErrorKind};\n \n+// This is a rustc implementation detail that we rely on here\n+const LOCAL_CRATE_ID: u32 = 0;\n+\n /// The Validator walks over the JSON tree, and ensures it is well formed.\n /// It is made of several parts.\n ///\n@@ -53,12 +56,19 @@ impl<'a> Validator<'a> {\n     }\n \n     pub fn check_crate(&mut self) {\n+        // Graph traverse the index\n         let root = &self.krate.root;\n         self.add_mod_id(root);\n         while let Some(id) = set_remove(&mut self.todo) {\n             self.seen_ids.insert(id);\n             self.check_item(id);\n         }\n+\n+        let root_crate_id = self.krate.index[root].crate_id;\n+        assert_eq!(root_crate_id, LOCAL_CRATE_ID, \"LOCAL_CRATE_ID is wrong\");\n+        for (id, item_info) in &self.krate.paths {\n+            self.check_item_info(id, item_info);\n+        }\n     }\n \n     fn check_item(&mut self, id: &'a Id) {\n@@ -364,6 +374,19 @@ impl<'a> Validator<'a> {\n         fp.generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n     }\n \n+    fn check_item_info(&mut self, id: &Id, item_info: &ItemSummary) {\n+        // FIXME: Their should be a better way to determine if an item is local, rather than relying on `LOCAL_CRATE_ID`,\n+        // which encodes rustc implementation details.\n+        if item_info.crate_id == LOCAL_CRATE_ID && !self.krate.index.contains_key(id) {\n+            self.errs.push(Error {\n+                id: id.clone(),\n+                kind: ErrorKind::Custom(\n+                    \"Id for local item in `paths` but not in `index`\".to_owned(),\n+                ),\n+            })\n+        }\n+    }\n+\n     fn add_id_checked(&mut self, id: &'a Id, valid: fn(Kind) -> bool, expected: &str) {\n         if let Some(kind) = self.kind_of(id) {\n             if valid(kind) {"}, {"sha": "1ef41ff123abf68eaad360096c10f2d69f13a4b4", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n \n-use rustdoc_json_types::{Crate, Item, Visibility};\n+use rustdoc_json_types::{Crate, Item, ItemKind, ItemSummary, Visibility, FORMAT_VERSION};\n \n use crate::json_find::SelectorPart;\n \n@@ -64,3 +64,101 @@ fn errors_on_missing_links() {\n         }],\n     );\n }\n+\n+// Test we would catch\n+// https://github.com/rust-lang/rust/issues/104064#issuecomment-1368589718\n+#[test]\n+fn errors_on_local_in_paths_and_not_index() {\n+    let krate = Crate {\n+        root: id(\"0:0:1572\"),\n+        crate_version: None,\n+        includes_private: false,\n+        index: HashMap::from_iter([\n+            (\n+                id(\"0:0:1572\"),\n+                Item {\n+                    id: id(\"0:0:1572\"),\n+                    crate_id: 0,\n+                    name: Some(\"microcore\".to_owned()),\n+                    span: None,\n+                    visibility: Visibility::Public,\n+                    docs: None,\n+                    links: HashMap::from_iter([((\"prim@i32\".to_owned(), id(\"0:1:1571\")))]),\n+                    attrs: Vec::new(),\n+                    deprecation: None,\n+                    inner: ItemEnum::Module(Module {\n+                        is_crate: true,\n+                        items: vec![id(\"0:1:717\")],\n+                        is_stripped: false,\n+                    }),\n+                },\n+            ),\n+            (\n+                id(\"0:1:717\"),\n+                Item {\n+                    id: id(\"0:1:717\"),\n+                    crate_id: 0,\n+                    name: Some(\"i32\".to_owned()),\n+                    span: None,\n+                    visibility: Visibility::Public,\n+                    docs: None,\n+                    links: HashMap::default(),\n+                    attrs: Vec::new(),\n+                    deprecation: None,\n+                    inner: ItemEnum::Primitive(Primitive { name: \"i32\".to_owned(), impls: vec![] }),\n+                },\n+            ),\n+        ]),\n+        paths: HashMap::from_iter([(\n+            id(\"0:1:1571\"),\n+            ItemSummary {\n+                crate_id: 0,\n+                path: vec![\"microcore\".to_owned(), \"i32\".to_owned()],\n+                kind: ItemKind::Primitive,\n+            },\n+        )]),\n+        external_crates: HashMap::default(),\n+        format_version: rustdoc_json_types::FORMAT_VERSION,\n+    };\n+\n+    check(\n+        &krate,\n+        &[Error {\n+            id: id(\"0:1:1571\"),\n+            kind: ErrorKind::Custom(\"Id for local item in `paths` but not in `index`\".to_owned()),\n+        }],\n+    );\n+}\n+\n+#[test]\n+#[should_panic = \"LOCAL_CRATE_ID is wrong\"]\n+fn checks_local_crate_id_is_correct() {\n+    let krate = Crate {\n+        root: id(\"root\"),\n+        crate_version: None,\n+        includes_private: false,\n+        index: HashMap::from_iter([(\n+            id(\"root\"),\n+            Item {\n+                id: id(\"root\"),\n+                crate_id: LOCAL_CRATE_ID.wrapping_add(1),\n+                name: Some(\"irrelavent\".to_owned()),\n+                span: None,\n+                visibility: Visibility::Public,\n+                docs: None,\n+                links: HashMap::default(),\n+                attrs: Vec::new(),\n+                deprecation: None,\n+                inner: ItemEnum::Module(Module {\n+                    is_crate: true,\n+                    items: vec![],\n+                    is_stripped: false,\n+                }),\n+            },\n+        )]),\n+        paths: HashMap::default(),\n+        external_crates: HashMap::default(),\n+        format_version: FORMAT_VERSION,\n+    };\n+    check(&krate, &[]);\n+}"}, {"sha": "8d70335a9e7b9ef0a2709cb8465c9065e9617a50", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea62f6c30c94778d9146ddc26c8520ed2b50a58/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=8ea62f6c30c94778d9146ddc26c8520ed2b50a58", "patch": "@@ -15,8 +15,6 @@\n //!\n //! 4. We check that the error code is actually emitted by the compiler.\n //!   - This is done by searching `compiler/` with a regex.\n-//!\n-//! This tidy check was merged and refactored from two others. See #PR_NUM for information about linting changes that occurred during this refactor.\n \n use std::{ffi::OsStr, fs, path::Path};\n \n@@ -33,8 +31,8 @@ const IGNORE_DOCTEST_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\"];\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n const IGNORE_UI_TEST_CHECK: &[&str] = &[\n-    \"E0313\", \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\",\n-    \"E0729\", \"E0789\",\n+    \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0789\",\n ];\n \n macro_rules! verbose_print {\n@@ -57,7 +55,7 @@ pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut\n     let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors, verbose);\n \n     // Stage 3: check list has UI tests\n-    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose);\n+    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose, &no_longer_emitted);\n \n     // Stage 4: check list is emitted by compiler\n     check_error_codes_used(search_paths, &error_codes, &mut errors, &no_longer_emitted, verbose);\n@@ -174,22 +172,21 @@ fn check_error_codes_docs(\n             return;\n         }\n \n-        let (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning) =\n+        let (found_code_example, found_proper_doctest, emit_ignore_warning, no_longer_emitted) =\n             check_explanation_has_doctest(&contents, &err_code);\n+\n         if emit_ignore_warning {\n             verbose_print!(\n                 verbose,\n                 \"warning: Error code `{err_code}` uses the ignore header. This should not be used, add the error code to the \\\n                 `IGNORE_DOCTEST_CHECK` constant instead.\"\n             );\n         }\n-        if emit_no_longer_warning {\n+\n+        if no_longer_emitted {\n             no_longer_emitted_codes.push(err_code.to_owned());\n-            verbose_print!(\n-                verbose,\n-                \"warning: Error code `{err_code}` is no longer emitted and should be removed entirely.\"\n-            );\n         }\n+\n         if !found_code_example {\n             verbose_print!(\n                 verbose,\n@@ -226,7 +223,7 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n     let mut found_proper_doctest = false;\n \n     let mut emit_ignore_warning = false;\n-    let mut emit_no_longer_warning = false;\n+    let mut no_longer_emitted = false;\n \n     for line in explanation.lines() {\n         let line = line.trim();\n@@ -246,13 +243,13 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n         } else if line\n             .starts_with(\"#### Note: this error code is no longer emitted by the compiler\")\n         {\n-            emit_no_longer_warning = true;\n+            no_longer_emitted = true;\n             found_code_example = true;\n             found_proper_doctest = true;\n         }\n     }\n \n-    (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning)\n+    (found_code_example, found_proper_doctest, emit_ignore_warning, no_longer_emitted)\n }\n \n // Stage 3: Checks that each error code has a UI test in the correct directory\n@@ -261,6 +258,7 @@ fn check_error_codes_tests(\n     error_codes: &[String],\n     errors: &mut Vec<String>,\n     verbose: bool,\n+    no_longer_emitted: &[String],\n ) {\n     let tests_path = root_path.join(Path::new(ERROR_TESTS_PATH));\n \n@@ -295,6 +293,11 @@ fn check_error_codes_tests(\n             }\n         };\n \n+        if no_longer_emitted.contains(code) {\n+            // UI tests *can't* contain error codes that are no longer emitted.\n+            continue;\n+        }\n+\n         let mut found_code = false;\n \n         for line in file.lines() {"}]}