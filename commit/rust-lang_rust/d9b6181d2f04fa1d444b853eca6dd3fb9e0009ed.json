{"sha": "d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed", "node_id": "C_kwDOAAsO6NoAKGQ5YjYxODFkMmYwNGZhMWQ0NDRiODUzZWNhNmRkM2ZiOWUwMDA5ZWQ", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2023-06-11T20:42:50Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2023-06-11T20:42:50Z"}, "message": "Remove explicit lifetimes", "tree": {"sha": "de59a3f2dc44f0ff164b9f139d998de55f453787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de59a3f2dc44f0ff164b9f139d998de55f453787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed", "html_url": "https://github.com/rust-lang/rust/commit/d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4df4c0d00be1e35fe2e47bbec277504bcdb4c381", "url": "https://api.github.com/repos/rust-lang/rust/commits/4df4c0d00be1e35fe2e47bbec277504bcdb4c381", "html_url": "https://github.com/rust-lang/rust/commit/4df4c0d00be1e35fe2e47bbec277504bcdb4c381"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "93e799410d3844bf5cfdfaf1a914841d35b81b8f", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=d9b6181d2f04fa1d444b853eca6dd3fb9e0009ed", "patch": "@@ -300,14 +300,14 @@ pub struct PeekMut<\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: Ord + fmt::Debug, A: Allocator + 'a> fmt::Debug for PeekMut<'a, T, A> {\n+impl<T: Ord + fmt::Debug, A: Allocator> fmt::Debug for PeekMut<'_, T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\").field(&self.heap.data[0]).finish()\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<'a, T: Ord, A: Allocator + 'a> Drop for PeekMut<'a, T, A> {\n+impl<T: Ord, A: Allocator> Drop for PeekMut<'_, T, A> {\n     fn drop(&mut self) {\n         if let Some(original_len) = self.original_len {\n             // SAFETY: That's how many elements were in the Vec at the time of\n@@ -324,7 +324,7 @@ impl<'a, T: Ord, A: Allocator + 'a> Drop for PeekMut<'a, T, A> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<'a, T: Ord, A: Allocator + 'a> Deref for PeekMut<'a, T, A> {\n+impl<T: Ord, A: Allocator> Deref for PeekMut<'_, T, A> {\n     type Target = T;\n     fn deref(&self) -> &T {\n         debug_assert!(!self.heap.is_empty());\n@@ -334,7 +334,7 @@ impl<'a, T: Ord, A: Allocator + 'a> Deref for PeekMut<'a, T, A> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<'a, T: Ord, A: Allocator + 'a> DerefMut for PeekMut<'a, T, A> {\n+impl<T: Ord, A: Allocator> DerefMut for PeekMut<'_, T, A> {\n     fn deref_mut(&mut self) -> &mut T {\n         debug_assert!(!self.heap.is_empty());\n \n@@ -362,7 +362,7 @@ impl<'a, T: Ord, A: Allocator + 'a> DerefMut for PeekMut<'a, T, A> {\n     }\n }\n \n-impl<'a, T: Ord, A: Allocator + 'a> PeekMut<'a, T, A> {\n+impl<'a, T: Ord, A: Allocator> PeekMut<'a, T, A> {\n     /// Removes the peeked value from the heap and returns it.\n     #[stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")]\n     pub fn pop(mut this: PeekMut<'a, T, A>) -> T {\n@@ -415,7 +415,7 @@ struct RebuildOnDrop<\n     rebuild_from: usize,\n }\n \n-impl<'a, T: Ord, A: Allocator> Drop for RebuildOnDrop<'a, T, A> {\n+impl<T: Ord, A: Allocator> Drop for RebuildOnDrop<'_, T, A> {\n     fn drop(&mut self) {\n         self.heap.rebuild_tail(self.rebuild_from);\n     }\n@@ -1617,13 +1617,13 @@ unsafe impl<T: Ord, A: Allocator> TrustedLen for IntoIterSorted<T, A> {}\n pub struct Drain<\n     'a,\n     T: 'a,\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + 'a = Global,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n > {\n     iter: vec::Drain<'a, T, A>,\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T, A: Allocator + 'a> Iterator for Drain<'a, T, A> {\n+impl<T, A: Allocator> Iterator for Drain<'_, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1638,22 +1638,22 @@ impl<'a, T, A: Allocator + 'a> Iterator for Drain<'a, T, A> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T, A: Allocator + 'a> DoubleEndedIterator for Drain<'a, T, A> {\n+impl<T, A: Allocator> DoubleEndedIterator for Drain<'_, T, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, T, A: Allocator + 'a> ExactSizeIterator for Drain<'a, T, A> {\n+impl<T, A: Allocator> ExactSizeIterator for Drain<'_, T, A> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, A: Allocator + 'a> FusedIterator for Drain<'a, T, A> {}\n+impl<T, A: Allocator> FusedIterator for Drain<'_, T, A> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n@@ -1666,18 +1666,18 @@ impl<'a, T, A: Allocator + 'a> FusedIterator for Drain<'a, T, A> {}\n pub struct DrainSorted<\n     'a,\n     T: Ord,\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + 'a = Global,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n > {\n     inner: &'a mut BinaryHeap<T, A>,\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T: Ord, A: Allocator + 'a> Drop for DrainSorted<'a, T, A> {\n+impl<'a, T: Ord, A: Allocator> Drop for DrainSorted<'a, T, A> {\n     /// Removes heap elements in heap order.\n     fn drop(&mut self) {\n-        struct DropGuard<'r, 'a, T: Ord, A: Allocator + 'a>(&'r mut DrainSorted<'a, T, A>);\n+        struct DropGuard<'r, 'a, T: Ord, A: Allocator>(&'r mut DrainSorted<'a, T, A>);\n \n-        impl<'r, 'a, T: Ord, A: Allocator + 'a> Drop for DropGuard<'r, 'a, T, A> {\n+        impl<'r, 'a, T: Ord, A: Allocator> Drop for DropGuard<'r, 'a, T, A> {\n             fn drop(&mut self) {\n                 while self.0.inner.pop().is_some() {}\n             }\n@@ -1692,7 +1692,7 @@ impl<'a, T: Ord, A: Allocator + 'a> Drop for DrainSorted<'a, T, A> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T: Ord, A: Allocator + 'a> Iterator for DrainSorted<'a, T, A> {\n+impl<T: Ord, A: Allocator> Iterator for DrainSorted<'_, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1708,13 +1708,13 @@ impl<'a, T: Ord, A: Allocator + 'a> Iterator for DrainSorted<'a, T, A> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T: Ord, A: Allocator + 'a> ExactSizeIterator for DrainSorted<'a, T, A> {}\n+impl<T: Ord, A: Allocator> ExactSizeIterator for DrainSorted<'_, T, A> {}\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T: Ord, A: Allocator + 'a> FusedIterator for DrainSorted<'a, T, A> {}\n+impl<T: Ord, A: Allocator> FusedIterator for DrainSorted<'_, T, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T: Ord, A: Allocator + 'a> TrustedLen for DrainSorted<'a, T, A> {}\n+unsafe impl<T: Ord, A: Allocator> TrustedLen for DrainSorted<'_, T, A> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n impl<T: Ord, A: Allocator> From<Vec<T, A>> for BinaryHeap<T, A> {\n@@ -1791,7 +1791,7 @@ impl<T, A: Allocator> IntoIterator for BinaryHeap<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, A: Allocator + 'a> IntoIterator for &'a BinaryHeap<T, A> {\n+impl<'a, T, A: Allocator> IntoIterator for &'a BinaryHeap<T, A> {\n     type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n "}]}