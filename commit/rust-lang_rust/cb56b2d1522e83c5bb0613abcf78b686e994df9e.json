{"sha": "cb56b2d1522e83c5bb0613abcf78b686e994df9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTZiMmQxNTIyZTgzYzViYjA2MTNhYmNmNzhiNjg2ZTk5NGRmOWU=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-02-28T23:07:27Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-02-28T23:07:27Z"}, "message": "Fix a bug introduced in previous commit", "tree": {"sha": "d7ff08c46d6b2f34897cadf194fc51baf55c9e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ff08c46d6b2f34897cadf194fc51baf55c9e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb56b2d1522e83c5bb0613abcf78b686e994df9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb56b2d1522e83c5bb0613abcf78b686e994df9e", "html_url": "https://github.com/rust-lang/rust/commit/cb56b2d1522e83c5bb0613abcf78b686e994df9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb56b2d1522e83c5bb0613abcf78b686e994df9e/comments", "author": null, "committer": null, "parents": [{"sha": "082dd6d7af37ac76d99147ae7242080d4f5c74aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/082dd6d7af37ac76d99147ae7242080d4f5c74aa", "html_url": "https://github.com/rust-lang/rust/commit/082dd6d7af37ac76d99147ae7242080d4f5c74aa"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "1f73054e3beed01f7e93b253a442992b57b66407", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb56b2d1522e83c5bb0613abcf78b686e994df9e/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb56b2d1522e83c5bb0613abcf78b686e994df9e/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=cb56b2d1522e83c5bb0613abcf78b686e994df9e", "patch": "@@ -663,8 +663,8 @@ pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n ///\n /// This function is used to print error messages, so it takes extra\n /// care to avoid causing a panic when `local_stream` is unusable.\n-/// For instance, if the TLS key for the local stream is uninitialized\n-/// or already destroyed, or if the local stream is locked by another\n+/// For instance, if the TLS key for the local stream is\n+/// already destroyed, or if the local stream is locked by another\n /// thread, it will just fall back to the global stream.\n ///\n /// However, if the actual I/O causes an error, this function does panic."}, {"sha": "99479bc56eff30ed9388c04d14168ed90174f331", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb56b2d1522e83c5bb0613abcf78b686e994df9e/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb56b2d1522e83c5bb0613abcf78b686e994df9e/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=cb56b2d1522e83c5bb0613abcf78b686e994df9e", "patch": "@@ -272,7 +272,7 @@ impl<T: 'static> LocalKey<T> {\n     ///\n     /// This will lazily initialize the value if this thread has not referenced\n     /// this key yet. If the key has been destroyed (which may happen if this is called\n-    /// in a destructor), this function will return a ThreadLocalError.\n+    /// in a destructor), this function will return a `ThreadLocalError`.\n     ///\n     /// # Panics\n     ///\n@@ -484,11 +484,7 @@ mod tests {\n                 assert!(FOO.try_with(|_| ()).is_err());\n             }\n         }\n-        fn foo() -> Foo {\n-            assert!(FOO.try_with(|_| ()).is_err());\n-            Foo\n-        }\n-        thread_local!(static FOO: Foo = foo());\n+        thread_local!(static FOO: Foo = Foo);\n \n         thread::spawn(|| {\n             assert!(FOO.try_with(|_| ()).is_ok());\n@@ -520,6 +516,7 @@ mod tests {\n         impl Drop for S1 {\n             fn drop(&mut self) {\n                 unsafe {\n+                    HITS += 1;\n                     if K2.try_with(|_| ()).is_err() {\n                         assert_eq!(HITS, 3);\n                     } else {"}]}