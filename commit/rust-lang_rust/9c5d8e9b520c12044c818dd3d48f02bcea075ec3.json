{"sha": "9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNWQ4ZTliNTIwYzEyMDQ0YzgxOGRkM2Q0OGYwMmJjZWEwNzVlYzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:23:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:24:11Z"}, "message": "adjust Miri interaction with panic runtime", "tree": {"sha": "784caf6fbc79840b3c726f0fe3d82bdd913ce445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/784caf6fbc79840b3c726f0fe3d82bdd913ce445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "html_url": "https://github.com/rust-lang/rust/commit/9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62087439a46f09b6a6716fc25b4a032f3d76eb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/62087439a46f09b6a6716fc25b4a032f3d76eb71", "html_url": "https://github.com/rust-lang/rust/commit/62087439a46f09b6a6716fc25b4a032f3d76eb71"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "d722406b82b4ad3f839a8b26a819e5e9f3f2ae9a", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "patch": "@@ -1892,10 +1892,12 @@ extern \"rust-intrinsic\" {\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// Internal hook used by Miri to implement unwinding.\n-    /// Compiles to a NOP during non-Miri codegen.\n+    /// ICEs when encountered during non-Miri codegen.\n     ///\n-    /// Perma-unstable: do not use\n-    pub fn miri_start_panic(data: *mut (dyn crate::any::Any + crate::marker::Send)) -> ();\n+    /// The `payload` ptr here will be exactly the one `do_catch` gets passed by `try`.\n+    ///\n+    /// Perma-unstable: do not use.\n+    pub fn miri_start_panic(payload: *mut u8) -> !;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "c213b19d062089d42bf2c827e81bff9f0ce426d8", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "patch": "@@ -31,32 +31,48 @@\n #![panic_runtime]\n #![feature(panic_runtime)]\n \n+// `real_imp` is unused with Miri, so silence warnings.\n+#![cfg_attr(miri, allow(dead_code))]\n+\n use alloc::boxed::Box;\n use core::any::Any;\n use core::panic::BoxMeUp;\n \n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n-        mod imp;\n+        mod real_imp;\n     } else if #[cfg(target_arch = \"wasm32\")] {\n         #[path = \"dummy.rs\"]\n-        mod imp;\n+        mod real_imp;\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n-        mod imp;\n+        mod real_imp;\n     } else if #[cfg(all(target_env = \"msvc\", target_arch = \"aarch64\"))] {\n         #[path = \"dummy.rs\"]\n-        mod imp;\n+        mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n-        mod imp;\n+        mod real_imp;\n     } else {\n         // Rust runtime's startup objects depend on these symbols, so make them public.\n         #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n-        pub use imp::eh_frame_registry::*;\n+        pub use real_imp::eh_frame_registry::*;\n         #[path = \"gcc.rs\"]\n+        mod real_imp;\n+    }\n+}\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(miri)] {\n+        // Use the Miri runtime.\n+        // We still need to also load the normal runtime above, as rustc expects certain lang\n+        // items from there to be defined.\n+        #[path = \"miri.rs\"]\n         mod imp;\n+    } else {\n+        // Use the real runtime.\n+        use real_imp as imp;\n     }\n }\n \n@@ -81,12 +97,5 @@ pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n     let payload = payload as *mut &mut dyn BoxMeUp;\n     let payload = (*payload).take_box();\n \n-    // Miri panic support: cfg'd out of normal builds just to be sure.\n-    // When going through normal codegen, `miri_start_panic` is a NOP, so the\n-    // Miri-enabled sysroot still supports normal unwinding. But when executed in\n-    // Miri, this line initiates unwinding.\n-    #[cfg(miri)]\n-    core::intrinsics::miri_start_panic(payload);\n-\n     imp::panic(Box::from_raw(payload))\n }"}, {"sha": "5f44b98566f4e49c794341d50b7c385a651ba2b8", "filename": "src/libpanic_unwind/miri.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5d8e9b520c12044c818dd3d48f02bcea075ec3/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "patch": "@@ -0,0 +1,20 @@\n+//! Unwinding panics for Miri.\n+use core::any::Any;\n+use alloc::boxed::Box;\n+\n+// The type of the payload that the Miri engine propagates through unwinding for us.\n+// Must be pointer-sized.\n+type Payload = Box<Box<dyn Any + Send>>;\n+\n+pub unsafe fn panic(payload: Box<dyn Any + Send>) -> u32 {\n+    // The payload we pass to `miri_start_panic` will be exactly the argument we get\n+    // in `cleanup` below. So we just box it up once, to get something pointer-sized.\n+    let payload_box: Payload = Box::new(payload);\n+    core::intrinsics::miri_start_panic(Box::into_raw(payload_box) as *mut u8)\n+}\n+\n+pub unsafe fn cleanup(payload_box: *mut u8) -> Box<dyn Any + Send> {\n+    // Recover the underlying `Box`.\n+    let payload_box: Payload = Box::from_raw(payload_box as *mut _);\n+    *payload_box\n+}"}]}