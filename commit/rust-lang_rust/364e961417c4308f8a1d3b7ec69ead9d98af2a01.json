{"sha": "364e961417c4308f8a1d3b7ec69ead9d98af2a01", "node_id": "C_kwDOAAsO6NoAKDM2NGU5NjE0MTdjNDMwOGY4YTFkM2I3ZWM2OWVhZDlkOThhZjJhMDE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-21T15:52:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-30T20:56:52Z"}, "message": "Replace doc(primitive) with rustc_doc_primitive", "tree": {"sha": "a20760a3016ff50addb3baeb9301eacaca9d2636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20760a3016ff50addb3baeb9301eacaca9d2636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/364e961417c4308f8a1d3b7ec69ead9d98af2a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/364e961417c4308f8a1d3b7ec69ead9d98af2a01", "html_url": "https://github.com/rust-lang/rust/commit/364e961417c4308f8a1d3b7ec69ead9d98af2a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/364e961417c4308f8a1d3b7ec69ead9d98af2a01/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef8d2d6075bcac4975b271684ebc6e67c20c83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef8d2d6075bcac4975b271684ebc6e67c20c83e", "html_url": "https://github.com/rust-lang/rust/commit/3ef8d2d6075bcac4975b271684ebc6e67c20c83e"}], "stats": {"total": 199, "additions": 123, "deletions": 76}, "files": [{"sha": "bf8339335dd7cdf8d9bcb90d3cffca2ec782f981", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/364e961417c4308f8a1d3b7ec69ead9d98af2a01/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364e961417c4308f8a1d3b7ec69ead9d98af2a01/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=364e961417c4308f8a1d3b7ec69ead9d98af2a01", "patch": "@@ -1,7 +1,8 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[doc(primitive = \"bool\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -63,7 +64,8 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[doc(primitive = \"never\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -274,7 +276,8 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[doc(primitive = \"char\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -398,7 +401,8 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[doc(primitive = \"unit\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -460,7 +464,8 @@ impl Copy for () {\n     // empty\n }\n \n-#[doc(primitive = \"pointer\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -577,7 +582,8 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[doc(primitive = \"array\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -778,7 +784,8 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[doc(primitive = \"slice\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -870,7 +877,8 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[doc(primitive = \"str\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -937,7 +945,8 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[doc(primitive = \"tuple\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1081,7 +1090,8 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[doc(primitive = \"f32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1147,7 +1157,8 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[doc(primitive = \"f64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1162,67 +1173,78 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[doc(primitive = \"i8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[doc(primitive = \"i16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[doc(primitive = \"i32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[doc(primitive = \"i64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[doc(primitive = \"i128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[doc(primitive = \"u8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[doc(primitive = \"u16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[doc(primitive = \"u32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[doc(primitive = \"u64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[doc(primitive = \"u128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[doc(primitive = \"isize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1232,7 +1254,8 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[doc(primitive = \"usize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1242,7 +1265,8 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[doc(primitive = \"reference\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1373,7 +1397,8 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[doc(primitive = \"fn\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "bf8339335dd7cdf8d9bcb90d3cffca2ec782f981", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/364e961417c4308f8a1d3b7ec69ead9d98af2a01/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364e961417c4308f8a1d3b7ec69ead9d98af2a01/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=364e961417c4308f8a1d3b7ec69ead9d98af2a01", "patch": "@@ -1,7 +1,8 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[doc(primitive = \"bool\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -63,7 +64,8 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[doc(primitive = \"never\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -274,7 +276,8 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[doc(primitive = \"char\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -398,7 +401,8 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[doc(primitive = \"unit\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -460,7 +464,8 @@ impl Copy for () {\n     // empty\n }\n \n-#[doc(primitive = \"pointer\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -577,7 +582,8 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[doc(primitive = \"array\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -778,7 +784,8 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[doc(primitive = \"slice\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -870,7 +877,8 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[doc(primitive = \"str\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -937,7 +945,8 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[doc(primitive = \"tuple\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1081,7 +1090,8 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[doc(primitive = \"f32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1147,7 +1157,8 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[doc(primitive = \"f64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1162,67 +1173,78 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[doc(primitive = \"i8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[doc(primitive = \"i16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[doc(primitive = \"i32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[doc(primitive = \"i64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[doc(primitive = \"i128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[doc(primitive = \"u8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[doc(primitive = \"u16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[doc(primitive = \"u32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[doc(primitive = \"u64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[doc(primitive = \"u128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[doc(primitive = \"isize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1232,7 +1254,8 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[doc(primitive = \"usize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1242,7 +1265,8 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[doc(primitive = \"reference\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1373,7 +1397,8 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[doc(primitive = \"fn\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "fe4186babfda37fc5702af1176dd13a02393e2d5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=364e961417c4308f8a1d3b7ec69ead9d98af2a01", "patch": "@@ -249,13 +249,13 @@ impl ExternalCrate {\n         //\n         // Note that this loop only searches the top-level items of the crate,\n         // and this is intentional. If we were to search the entire crate for an\n-        // item tagged with `#[doc(primitive)]` then we would also have to\n+        // item tagged with `#[rustc_doc_primitive]` then we would also have to\n         // search the entirety of external modules for items tagged\n-        // `#[doc(primitive)]`, which is a pretty inefficient process (decoding\n+        // `#[rustc_doc_primitive]`, which is a pretty inefficient process (decoding\n         // all that metadata unconditionally).\n         //\n         // In order to keep the metadata load under control, the\n-        // `#[doc(primitive)]` feature is explicitly designed to only allow the\n+        // `#[rustc_doc_primitive]` feature is explicitly designed to only allow the\n         // primitive tags to show up as the top level items in a crate.\n         //\n         // Also note that this does not attempt to deal with modules tagged\n@@ -264,18 +264,13 @@ impl ExternalCrate {\n         let as_primitive = |res: Res<!>| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n                 let mut prim = None;\n-                let meta_items = tcx\n-                    .get_attrs(def_id, sym::doc)\n-                    .flat_map(|attr| attr.meta_item_list().unwrap_or_default());\n-                for meta in meta_items {\n-                    if let Some(v) = meta.value_str() {\n-                        if meta.has_name(sym::primitive) {\n-                            prim = PrimitiveType::from_symbol(v);\n-                            if prim.is_some() {\n-                                break;\n-                            }\n-                            // FIXME: should warn on unknown primitives?\n+                for attr in tcx.get_attrs(def_id, sym::rustc_doc_primitive) {\n+                    if let Some(v) = attr.value_str() {\n+                        prim = PrimitiveType::from_symbol(v);\n+                        if prim.is_some() {\n+                            break;\n                         }\n+                        // FIXME: should warn on unknown primitives?\n                     }\n                 }\n                 return prim.map(|p| (def_id, p));\n@@ -1829,13 +1824,17 @@ impl PrimitiveType {\n         }\n     }\n \n-    /// Returns the DefId of the module with `doc(primitive)` for this primitive type.\n+    /// Returns the DefId of the module with `rustc_doc_primitive` for this primitive type.\n     /// Panics if there is no such module.\n     ///\n-    /// This gives precedence to primitives defined in the current crate, and deprioritizes primitives defined in `core`,\n-    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which will be picked.\n-    /// In particular, if a crate depends on both `std` and another crate that also defines `doc(primitive)`, then\n-    /// it's entirely random whether `std` or the other crate is picked. (no_std crates are usually fine unless multiple dependencies define a primitive.)\n+    /// This gives precedence to primitives defined in the current crate, and deprioritizes\n+    /// primitives defined in `core`,\n+    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which\n+    /// will be picked.\n+    ///\n+    /// In particular, if a crate depends on both `std` and another crate that also defines\n+    /// `rustc_doc_primitive`, then it's entirely random whether `std` or the other crate is picked.\n+    /// (no_std crates are usually fine unless multiple dependencies define a primitive.)\n     pub(crate) fn primitive_locations(tcx: TyCtxt<'_>) -> &FxHashMap<PrimitiveType, DefId> {\n         static PRIMITIVE_LOCATIONS: OnceCell<FxHashMap<PrimitiveType, DefId>> = OnceCell::new();\n         PRIMITIVE_LOCATIONS.get_or_init(|| {"}, {"sha": "c39caf73a93671a79e8835096dd2835223eaec3b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=364e961417c4308f8a1d3b7ec69ead9d98af2a01", "patch": "@@ -249,9 +249,7 @@ pub(crate) fn id_from_item_inner(\n                     // instead, we directly get the primitive symbol and convert it to u32 to\n                     // generate the ID.\n                     if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n-                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n-                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n-                            .filter(|attr| attr.has_name(sym::primitive))\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::rustc_doc_primitive)\n                             .find_map(|attr| attr.value_str()) {\n                         format!(\":{}\", prim.as_u32())\n                     } else {"}, {"sha": "d6da6e0993894099830dbbbf20a79be9b8abebe8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=364e961417c4308f8a1d3b7ec69ead9d98af2a01", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                         // HACK(hkmatsumoto): For impls of primitive types, we index them\n                         // regardless of whether they're local. This is because users can\n                         // document primitive items in an arbitrary crate by using\n-                        // `doc(primitive)`.\n+                        // `rustc_doc_primitive`.\n                         let mut is_primitive_impl = false;\n                         if let clean::types::ItemKind::ImplItem(ref impl_) = *item.kind &&\n                             impl_.trait_.is_none() &&"}, {"sha": "48f69029dbbfe8193b3bd33f2d99cd0fd4bc582d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364e961417c4308f8a1d3b7ec69ead9d98af2a01/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=364e961417c4308f8a1d3b7ec69ead9d98af2a01", "patch": "@@ -433,8 +433,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })?;\n \n         // FIXME(#83862): this arbitrarily gives precedence to primitives over modules to support\n-        // links to primitives when `#[doc(primitive)]` is present. It should give an ambiguity\n-        // error instead and special case *only* modules with `#[doc(primitive)]`, not all\n+        // links to primitives when `#[rustc_doc_primitive]` is present. It should give an ambiguity\n+        // error instead and special case *only* modules with `#[rustc_doc_primitive]`, not all\n         // primitives.\n         resolve_primitive(&path_root, TypeNS)\n             .or_else(|| self.resolve_path(&path_root, TypeNS, item_id, module_id))\n@@ -1102,7 +1102,7 @@ impl LinkCollector<'_, '_> {\n                 }\n             }\n \n-        // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+        // item can be non-local e.g. when using `#[rustc_doc_primitive = \"pointer\"]`\n         if let Some((src_id, dst_id)) = id.as_local().and_then(|dst_id| {\n             item.item_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n         }) {"}]}