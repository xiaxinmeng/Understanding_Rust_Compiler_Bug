{"sha": "13ff307f07327843348c0fb7476c4de77f95f89f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZmYzMDdmMDczMjc4NDMzNDhjMGZiNzQ3NmM0ZGU3N2Y5NWY4OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-14T22:27:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-14T22:27:15Z"}, "message": "Auto merge of #35666 - eddyb:rollup, r=eddyb\n\nRollup of 30 pull requests\n\n- Successful merges: #34941, #35392, #35444, #35447, #35491, #35533, #35539, #35558, #35573, #35574, #35577, #35586, #35588, #35594, #35596, #35597, #35598, #35606, #35611, #35615, #35616, #35620, #35622, #35640, #35643, #35644, #35646, #35647, #35648, #35661\n- Failed merges: #35395, #35415", "tree": {"sha": "714f14faa5bb09f1e0c072e1cbfa15740ee7cbf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/714f14faa5bb09f1e0c072e1cbfa15740ee7cbf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ff307f07327843348c0fb7476c4de77f95f89f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ff307f07327843348c0fb7476c4de77f95f89f", "html_url": "https://github.com/rust-lang/rust/commit/13ff307f07327843348c0fb7476c4de77f95f89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ff307f07327843348c0fb7476c4de77f95f89f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5b758bab979b1db723bcc97ecd8398127bd8bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5b758bab979b1db723bcc97ecd8398127bd8bc", "html_url": "https://github.com/rust-lang/rust/commit/1d5b758bab979b1db723bcc97ecd8398127bd8bc"}, {"sha": "bcee2edc54d04a2fcf5ba9e4a4a095bcf9be2bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcee2edc54d04a2fcf5ba9e4a4a095bcf9be2bfc", "html_url": "https://github.com/rust-lang/rust/commit/bcee2edc54d04a2fcf5ba9e4a4a095bcf9be2bfc"}], "stats": {"total": 749, "additions": 532, "deletions": 217}, "files": [{"sha": "18dc99dd6c34c0a46106f403596b34084e8843b7", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/configure", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -1013,7 +1013,7 @@ then\n     LLVM_VERSION=$($LLVM_CONFIG --version)\n \n     case $LLVM_VERSION in\n-        (3.[7-8]*)\n+        (3.[7-9]*)\n             msg \"found ok version of LLVM: $LLVM_VERSION\"\n             ;;\n         (*)"}, {"sha": "fa2909196dcf184e5761ffb4e83dbb435c30c56e", "filename": "mk/cfg/i586-unknown-linux-gnu.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -7,8 +7,8 @@ CFG_LIB_NAME_i586-unknown-linux-gnu=lib$(1).so\n CFG_STATIC_LIB_NAME_i586-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_i586-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i586-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS) -march=pentium\n-CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=pentium\n+CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS) -march=pentium -Wa,-mrelax-relocations=no\n+CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=pentium -Wa,-mrelax-relocations=no\n CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS) -march=pentium\n CFG_GCCISH_LINK_FLAGS_i586-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_i586-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "d6c1ce8967a20f66fc5823346ee7d64a116dc5d3", "filename": "mk/cfg/i686-unknown-linux-musl.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-musl.mk?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -7,8 +7,8 @@ CFG_INSTALL_ONLY_RLIB_i686-unknown-linux-musl = 1\n CFG_LIB_NAME_i686-unknown-linux-musl=lib$(1).so\n CFG_STATIC_LIB_NAME_i686-unknown-linux-musl=lib$(1).a\n CFG_LIB_GLOB_i686-unknown-linux-musl=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_i686-unknown-linux-musl := -m32 -Wl,-melf_i386\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-musl :=  -g -fPIC -m32 -Wl,-melf_i386\n+CFG_JEMALLOC_CFLAGS_i686-unknown-linux-musl := -m32 -Wl,-melf_i386 -Wa,-mrelax-relocations=no\n+CFG_GCCISH_CFLAGS_i686-unknown-linux-musl :=  -g -fPIC -m32 -Wl,-melf_i386 -Wa,-mrelax-relocations=no\n CFG_GCCISH_CXXFLAGS_i686-unknown-linux-musl :=\n CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-musl :=\n CFG_GCCISH_DEF_FLAG_i686-unknown-linux-musl :="}, {"sha": "0af6082aee4f7f16962ee360f8ddc387e82d36b0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -870,8 +870,13 @@ impl Build {\n         // This is a hack, because newer binutils broke things on some vms/distros\n         // (i.e., linking against unknown relocs disabled by the following flag)\n         // See: https://github.com/rust-lang/rust/issues/34978\n-        if target == \"x86_64-unknown-linux-musl\" {\n-            base.push(\"-Wa,-mrelax-relocations=no\".into());\n+        match target {\n+            \"i586-unknown-linux-gnu\" |\n+            \"i686-unknown-linux-musl\" |\n+            \"x86_64-unknown-linux-musl\" => {\n+                base.push(\"-Wa,-mrelax-relocations=no\".into());\n+            },\n+            _ => {},\n         }\n         return base\n     }"}, {"sha": "d6ac3ef6c9c5024d8c1be674518fa221bfdf41bc", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -98,7 +98,8 @@ pub fn check(build: &mut Build) {\n         if target.contains(\"rumprun\") ||\n            target.contains(\"bitrig\") ||\n            target.contains(\"openbsd\") ||\n-           target.contains(\"msvc\") {\n+           target.contains(\"msvc\") ||\n+           target.contains(\"emscripten\") {\n             build.config.use_jemalloc = false;\n         }\n "}, {"sha": "6e13b464e4c25767643c637dc406be387671c8ff", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -166,7 +166,7 @@ story. The other half is *using* the `find` function we've written. Let's try\n to use it to find the extension in a file name.\n \n ```rust\n-# fn find(_: &str, _: char) -> Option<usize> { None }\n+# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n fn main() {\n     let file_name = \"foobar.rs\";\n     match find(file_name, '.') {\n@@ -223,7 +223,7 @@ Getting the extension of a file name is a pretty common operation, so it makes\n sense to put it into a function:\n \n ```rust\n-# fn find(_: &str, _: char) -> Option<usize> { None }\n+# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n // Returns the extension of the given file name, where the extension is defined\n // as all characters following the first `.`.\n // If `file_name` has no `.`, then `None` is returned.\n@@ -272,7 +272,7 @@ Armed with our new combinator, we can rewrite our `extension_explicit` method\n to get rid of the case analysis:\n \n ```rust\n-# fn find(_: &str, _: char) -> Option<usize> { None }\n+# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n // Returns the extension of the given file name, where the extension is defined\n // as all characters following the first `.`.\n // If `file_name` has no `.`, then `None` is returned."}, {"sha": "30e922d7f4dc0714f8ddd12eeabcdb2c2bbaf438", "filename": "src/doc/book/variable-bindings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fdoc%2Fbook%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fdoc%2Fbook%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvariable-bindings.md?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -125,7 +125,7 @@ warning, but it will still print \"Hello, world!\":\n \n ```text\n    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n-src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)]\n+src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variables)]\n    on by default\n src/main.rs:2     let x: i32;\n                       ^"}, {"sha": "cdb70ce57708ad705595a84ebe65f32289471de5", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -17,7 +17,7 @@ use super::boxed::Box;\n use core::ops::Drop;\n use core::cmp;\n \n-/// A low-level utility for more ergonomically allocating, reallocating, and deallocating a\n+/// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n /// a buffer of memory on the heap without having to worry about all the corner cases\n /// involved. This type is excellent for building your own data structures like Vec and VecDeque.\n /// In particular:\n@@ -534,8 +534,8 @@ impl<T> RawVec<T> {\n     /// Converts the entire buffer into `Box<[T]>`.\n     ///\n     /// While it is not *strictly* Undefined Behavior to call\n-    /// this procedure while some of the RawVec is unintialized,\n-    /// it cetainly makes it trivial to trigger it.\n+    /// this procedure while some of the RawVec is uninitialized,\n+    /// it certainly makes it trivial to trigger it.\n     ///\n     /// Note that this will correctly reconstitute any `cap` changes\n     /// that may have been performed. (see description of type for details)"}, {"sha": "788c838cd3fc8ddaf70ec34a6d862bdac2d2a591", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -1152,7 +1152,7 @@ impl String {\n         self.vec.set_len(len + amt);\n     }\n \n-    /// Inserts a string into this `String` at a byte position.\n+    /// Inserts a string slice into this `String` at a byte position.\n     ///\n     /// This is an `O(n)` operation as it requires copying every element in the\n     /// buffer.\n@@ -1182,8 +1182,7 @@ impl String {\n                reason = \"recent addition\",\n                issue = \"35553\")]\n     pub fn insert_str(&mut self, idx: usize, string: &str) {\n-        let len = self.len();\n-        assert!(idx <= len);\n+        assert!(idx <= self.len());\n         assert!(self.is_char_boundary(idx));\n \n         unsafe {"}, {"sha": "a6f817a89624cfeb0c9e9cff55b3ed3c0f9227c9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 51, "deletions": 12, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -1446,13 +1446,12 @@ impl<T> IntoIterator for Vec<T> {\n     #[inline]\n     fn into_iter(mut self) -> IntoIter<T> {\n         unsafe {\n-            let ptr = self.as_mut_ptr();\n-            assume(!ptr.is_null());\n-            let begin = ptr as *const T;\n+            let begin = self.as_mut_ptr();\n+            assume(!begin.is_null());\n             let end = if mem::size_of::<T>() == 0 {\n-                arith_offset(ptr as *const i8, self.len() as isize) as *const T\n+                arith_offset(begin as *const i8, self.len() as isize) as *const T\n             } else {\n-                ptr.offset(self.len() as isize) as *const T\n+                begin.offset(self.len() as isize) as *const T\n             };\n             let buf = ptr::read(&self.buf);\n             mem::forget(self);\n@@ -1710,10 +1709,52 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     _buf: RawVec<T>,\n-    ptr: *const T,\n+    ptr: *mut T,\n     end: *const T,\n }\n \n+impl<T> IntoIter<T> {\n+    /// Returns the remaining items of this iterator as a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(vec_into_iter_as_slice)]\n+    /// let vec = vec!['a', 'b', 'c'];\n+    /// let mut into_iter = vec.into_iter();\n+    /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    /// let _ = into_iter.next().unwrap();\n+    /// assert_eq!(into_iter.as_slice(), &['b', 'c']);\n+    /// ```\n+    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        unsafe {\n+            slice::from_raw_parts(self.ptr, self.len())\n+        }\n+    }\n+\n+    /// Returns the remaining items of this iterator as a mutable slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(vec_into_iter_as_slice)]\n+    /// let vec = vec!['a', 'b', 'c'];\n+    /// let mut into_iter = vec.into_iter();\n+    /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    /// into_iter.as_mut_slice()[2] = 'z';\n+    /// assert_eq!(into_iter.next().unwrap(), 'a');\n+    /// assert_eq!(into_iter.next().unwrap(), 'b');\n+    /// assert_eq!(into_iter.next().unwrap(), 'z');\n+    /// ```\n+    #[unstable(feature = \"vec_into_iter_as_slice\", issue = \"35601\")]\n+    pub fn as_mut_slice(&self) -> &mut [T] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self.ptr, self.len())\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for IntoIter<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1726,14 +1767,14 @@ impl<T> Iterator for IntoIter<T> {\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n         unsafe {\n-            if self.ptr == self.end {\n+            if self.ptr as *const _ == self.end {\n                 None\n             } else {\n                 if mem::size_of::<T>() == 0 {\n                     // purposefully don't use 'ptr.offset' because for\n                     // vectors with 0-size elements this would return the\n                     // same pointer.\n-                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *const T;\n+                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n \n                     // Use a non-null pointer value\n                     Some(ptr::read(EMPTY as *mut T))\n@@ -1776,7 +1817,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n             } else {\n                 if mem::size_of::<T>() == 0 {\n                     // See above for why 'ptr.offset' isn't used\n-                    self.end = arith_offset(self.end as *const i8, -1) as *const T;\n+                    self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n \n                     // Use a non-null pointer value\n                     Some(ptr::read(EMPTY as *mut T))\n@@ -1796,9 +1837,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]\n impl<T: Clone> Clone for IntoIter<T> {\n     fn clone(&self) -> IntoIter<T> {\n-        unsafe {\n-            slice::from_raw_parts(self.ptr, self.len()).to_owned().into_iter()\n-        }\n+        self.as_slice().to_owned().into_iter()\n     }\n }\n "}, {"sha": "ab3231b2b9955e693540cd5f111a5961b934c632", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -28,6 +28,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(vec_deque_contains)]\n+#![feature(vec_into_iter_as_slice)]\n \n extern crate collections;\n extern crate test;"}, {"sha": "9556174bd2294dadef86b45edaa6d220d87f2be9", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -478,6 +478,29 @@ fn test_split_off() {\n     assert_eq!(vec2, [5, 6]);\n }\n \n+#[test]\n+fn test_into_iter_as_slice() {\n+    let vec = vec!['a', 'b', 'c'];\n+    let mut into_iter = vec.into_iter();\n+    assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    let _ = into_iter.next().unwrap();\n+    assert_eq!(into_iter.as_slice(), &['b', 'c']);\n+    let _ = into_iter.next().unwrap();\n+    let _ = into_iter.next().unwrap();\n+    assert_eq!(into_iter.as_slice(), &[]);\n+}\n+\n+#[test]\n+fn test_into_iter_as_mut_slice() {\n+    let vec = vec!['a', 'b', 'c'];\n+    let mut into_iter = vec.into_iter();\n+    assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\n+    into_iter.as_mut_slice()[0] = 'x';\n+    into_iter.as_mut_slice()[1] = 'y';\n+    assert_eq!(into_iter.next().unwrap(), 'x');\n+    assert_eq!(into_iter.as_slice(), &['y', 'c']);\n+}\n+\n #[test]\n fn test_into_iter_count() {\n     assert_eq!(vec![1, 2, 3].into_iter().count(), 3);"}, {"sha": "17ec325e257b028f43ca709041f1769829309500", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -146,6 +146,7 @@\n \n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n+use convert::From;\n use default::Default;\n use fmt::{self, Debug, Display};\n use marker::{Copy, PhantomData, Send, Sync, Sized, Unsize};\n@@ -329,6 +330,13 @@ impl<T:Ord + Copy> Ord for Cell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_from\", since = \"1.12.0\")]\n+impl<T: Copy> From<T> for Cell<T> {\n+    fn from(t: T) -> Cell<T> {\n+        Cell::new(t)\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more.\n@@ -742,6 +750,13 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_from\", since = \"1.12.0\")]\n+impl<T> From<T> for RefCell<T> {\n+    fn from(t: T) -> RefCell<T> {\n+        RefCell::new(t)\n+    }\n+}\n+\n struct BorrowRef<'b> {\n     borrow: &'b Cell<BorrowFlag>,\n }\n@@ -1064,3 +1079,10 @@ impl<T: Default> Default for UnsafeCell<T> {\n         UnsafeCell::new(Default::default())\n     }\n }\n+\n+#[stable(feature = \"cell_from\", since = \"1.12.0\")]\n+impl<T> From<T> for UnsafeCell<T> {\n+    fn from(t: T) -> UnsafeCell<T> {\n+        UnsafeCell::new(t)\n+    }\n+}"}, {"sha": "e68f973d8d940e44460f2b4404c25be57e561ac6", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -71,8 +71,8 @@ use result::Result;\n ///\n /// # Generic Impls\n ///\n-/// - `AsRef` auto-dereference if the inner type is a reference or a mutable\n-/// reference (eg: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n+/// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n+/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n@@ -88,8 +88,8 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// # Generic Impls\n ///\n-/// - `AsMut` auto-dereference if the inner type is a reference or a mutable\n-/// reference (eg: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n+/// - `AsMut` auto-dereferences if the inner type is a reference or a mutable\n+/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {"}, {"sha": "5701a89d8bc42aa0484e37c8f5d4e3597b09a039", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -32,7 +32,7 @@\n //! atomically-reference-counted shared pointer).\n //!\n //! Most atomic types may be stored in static variables, initialized using\n-//! the provided static initializers like `INIT_ATOMIC_BOOL`. Atomic statics\n+//! the provided static initializers like `ATOMIC_BOOL_INIT`. Atomic statics\n //! are often used for lazy global initialization.\n //!\n //!"}, {"sha": "11bde922f47f2815047425593dc93e0caf220b41", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -132,8 +132,13 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((item.id, item.span));\n             } else {\n-                span_err!(ctxt.session, item.span, E0138,\n-                          \"multiple 'start' functions\");\n+                struct_span_err!(\n+                    ctxt.session, item.span, E0138,\n+                    \"multiple 'start' functions\")\n+                    .span_label(ctxt.start_fn.unwrap().1,\n+                                &format!(\"previous `start` function here\"))\n+                    .span_label(item.span, &format!(\"multiple `start` functions\"))\n+                    .emit();\n             }\n         },\n         EntryPointType::None => ()"}, {"sha": "6b34c0a21988dd81ecf6246b1aeee854cab71888", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -222,7 +222,24 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyArray(_, n) => format!(\"array of {} elements\", n),\n             ty::TySlice(_) => \"slice\".to_string(),\n             ty::TyRawPtr(_) => \"*-ptr\".to_string(),\n-            ty::TyRef(_, _) => \"&-ptr\".to_string(),\n+            ty::TyRef(region, tymut) => {\n+                let tymut_string = tymut.to_string();\n+                if tymut_string == \"_\" ||         //unknown type name,\n+                   tymut_string.len() > 10 ||     //name longer than saying \"reference\",\n+                   region.to_string() != \"\"       //... or a complex type\n+                {\n+                    match tymut {\n+                        ty::TypeAndMut{mutbl, ..} => {\n+                            format!(\"{}reference\", match mutbl {\n+                                hir::Mutability::MutMutable => \"mutable \",\n+                                _ => \"\"\n+                            })\n+                        }\n+                    }\n+                } else {\n+                    format!(\"&{}\", tymut_string)\n+                }\n+            }\n             ty::TyFnDef(..) => format!(\"fn item\"),\n             ty::TyFnPtr(_) => \"fn pointer\".to_string(),\n             ty::TyTrait(ref inner) => {"}, {"sha": "20673dc1e181addb0148222acba2c7c3edec2d24", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -1175,8 +1175,10 @@ impl<'a, 'gcx, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'gcx> {\n               _: LoanCause) {\n         match kind {\n             MutBorrow => {\n-                span_err!(self.cx.tcx.sess, span, E0301,\n+                struct_span_err!(self.cx.tcx.sess, span, E0301,\n                           \"cannot mutably borrow in a pattern guard\")\n+                    .span_label(span, &format!(\"borrowed mutably in pattern guard\"))\n+                    .emit();\n             }\n             ImmBorrow | UniqueImmBorrow => {}\n         }\n@@ -1185,7 +1187,9 @@ impl<'a, 'gcx, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'gcx> {\n     fn mutate(&mut self, _: NodeId, span: Span, _: cmt, mode: MutateMode) {\n         match mode {\n             MutateMode::JustWrite | MutateMode::WriteAndRead => {\n-                span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n+                struct_span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n+                    .span_label(span, &format!(\"assignment in pattern guard\"))\n+                    .emit();\n             }\n             MutateMode::Init => {}\n         }"}, {"sha": "eab16bd5bd1b5b2dda58b05943bf960e9242de6e", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -77,10 +77,14 @@ impl<'a> CheckLoopVisitor<'a> {\n         match self.cx {\n             Loop => {}\n             Closure => {\n-                span_err!(self.sess, span, E0267, \"`{}` inside of a closure\", name);\n+                struct_span_err!(self.sess, span, E0267, \"`{}` inside of a closure\", name)\n+                .span_label(span, &format!(\"cannot break inside of a closure\"))\n+                .emit();\n             }\n             Normal => {\n-                span_err!(self.sess, span, E0268, \"`{}` outside of loop\", name);\n+                struct_span_err!(self.sess, span, E0268, \"`{}` outside of loop\", name)\n+                .span_label(span, &format!(\"cannot break outside of a loop\"))\n+                .emit();\n             }\n         }\n     }"}, {"sha": "962509be324de363aa44c8e3bce6f87c3033b804", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -3374,8 +3374,11 @@ impl<'a> Resolver<'a> {\n \n         let mut err = match (old_binding.is_extern_crate(), binding.is_extern_crate()) {\n             (true, true) => struct_span_err!(self.session, span, E0259, \"{}\", msg),\n-            (true, _) | (_, true) if binding.is_import() || old_binding.is_import() =>\n-                struct_span_err!(self.session, span, E0254, \"{}\", msg),\n+            (true, _) | (_, true) if binding.is_import() || old_binding.is_import() => {\n+                let mut e = struct_span_err!(self.session, span, E0254, \"{}\", msg);\n+                e.span_label(span, &\"already imported\");\n+                e\n+            },\n             (true, _) | (_, true) => struct_span_err!(self.session, span, E0260, \"{}\", msg),\n             _ => match (old_binding.is_import(), binding.is_import()) {\n                 (false, false) => struct_span_err!(self.session, span, E0428, \"{}\", msg),"}, {"sha": "1e40aa7d1876620d276d7eb1bc9f99ea63cabc49", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -505,7 +505,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 }\n                 Success(binding) if !binding.is_importable() => {\n                     let msg = format!(\"`{}` is not directly importable\", target);\n-                    span_err!(self.session, directive.span, E0253, \"{}\", &msg);\n+                    struct_span_err!(self.session, directive.span, E0253, \"{}\", &msg)\n+                        .span_label(directive.span, &format!(\"cannot be imported directly\"))\n+                        .emit();\n                     // Do not import this illegal binding. Import a dummy binding and pretend\n                     // everything is fine\n                     self.import_dummy_binding(module, directive);"}, {"sha": "084bbff338346e72440513840f729ebbcae09f81", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -51,10 +51,12 @@ fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }));\n     let i_n_tps = i_ty.generics.types.len(subst::FnSpace);\n     if i_n_tps != n_tps {\n-        span_err!(tcx.sess, it.span, E0094,\n+        struct_span_err!(tcx.sess, it.span, E0094,\n             \"intrinsic has wrong number of type \\\n              parameters: found {}, expected {}\",\n-             i_n_tps, n_tps);\n+             i_n_tps, n_tps)\n+             .span_label(it.span, &format!(\"expected {} type parameter\", n_tps))\n+             .emit();\n     } else {\n         require_same_types(ccx,\n                            TypeOrigin::IntrinsicType(it.span),"}, {"sha": "e99a95e4135196402f67893163a191e7d8ca79db", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -3520,8 +3520,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let tcx = self.tcx;\n             if !tcx.expr_is_lval(&lhs) {\n-                span_err!(tcx.sess, expr.span, E0070,\n-                    \"invalid left-hand side expression\");\n+                struct_span_err!(\n+                    tcx.sess, expr.span, E0070,\n+                    \"invalid left-hand side expression\")\n+                .span_label(\n+                    expr.span,\n+                    &format!(\"left-hand of expression not valid\"))\n+                .emit();\n             }\n \n             let lhs_ty = self.expr_ty(&lhs);"}, {"sha": "cdca988084cceb201332bcdae430a1da96850a7c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -41,7 +41,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let tcx = self.tcx;\n         if !tcx.expr_is_lval(lhs_expr) {\n-            span_err!(tcx.sess, lhs_expr.span, E0067, \"invalid left-hand side expression\");\n+            struct_span_err!(\n+                tcx.sess, lhs_expr.span,\n+                E0067, \"invalid left-hand side expression\")\n+            .span_label(\n+                lhs_expr.span,\n+                &format!(\"invalid expression for left-hand side\"))\n+            .emit();\n         }\n     }\n "}, {"sha": "753411991abeadab7cb77c8265c857a44e0891fd", "filename": "src/libstd/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -526,10 +526,10 @@ pub fn temp_dir() -> PathBuf {\n /// Ok(\"/home/alex/bar\")\n /// ```\n ///\n-/// This sort of behavior has been known to [lead to privledge escalation] when\n+/// This sort of behavior has been known to [lead to privilege escalation] when\n /// used incorrectly, for example.\n ///\n-/// [lead to privledge escalation]: http://securityvulns.com/Wdocument183.html\n+/// [lead to privilege escalation]: http://securityvulns.com/Wdocument183.html\n ///\n /// # Examples\n ///"}, {"sha": "5961fd59699c1b8d0a92341e6c78f69729f0b648", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -25,9 +25,10 @@ use cell::RefCell;\n use fmt;\n use intrinsics;\n use mem;\n+use ptr;\n use raw;\n-use sys_common::rwlock::RWLock;\n use sys::stdio::Stderr;\n+use sys_common::rwlock::RWLock;\n use sys_common::thread_info;\n use sys_common::util;\n use thread;\n@@ -255,45 +256,76 @@ pub use realstd::rt::update_panic_count;\n \n /// Invoke a closure, capturing the cause of an unwinding panic if one occurs.\n pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n-    let mut slot = None;\n-    let mut f = Some(f);\n-    let ret;\n-\n-    {\n-        let mut to_run = || {\n-            slot = Some(f.take().unwrap()());\n-        };\n-        let fnptr = get_call(&mut to_run);\n-        let dataptr = &mut to_run as *mut _ as *mut u8;\n-        let mut any_data = 0;\n-        let mut any_vtable = 0;\n-        let fnptr = mem::transmute::<fn(&mut _), fn(*mut u8)>(fnptr);\n-        let r = __rust_maybe_catch_panic(fnptr,\n-                                         dataptr,\n-                                         &mut any_data,\n-                                         &mut any_vtable);\n-        if r == 0 {\n-            ret = Ok(());\n-        } else {\n-            update_panic_count(-1);\n-            ret = Err(mem::transmute(raw::TraitObject {\n-                data: any_data as *mut _,\n-                vtable: any_vtable as *mut _,\n-            }));\n-        }\n+    struct Data<F, R> {\n+        f: F,\n+        r: R,\n     }\n \n-    debug_assert!(update_panic_count(0) == 0);\n-    return ret.map(|()| {\n-        slot.take().unwrap()\n-    });\n+    // We do some sketchy operations with ownership here for the sake of\n+    // performance. The `Data` structure is never actually fully valid, but\n+    // instead it always contains at least one uninitialized field. We can only\n+    // pass pointers down to `__rust_maybe_catch_panic` (can't pass objects by\n+    // value), so we do all the ownership tracking here manully.\n+    //\n+    // Note that this is all invalid if any of these functions unwind, but the\n+    // whole point of this function is to prevent that! As a result we go\n+    // through a transition where:\n+    //\n+    // * First, only the closure we're going to call is initialized. The return\n+    //   value is uninitialized.\n+    // * When we make the function call, the `do_call` function below, we take\n+    //   ownership of the function pointer, replacing it with uninitialized\n+    //   data. At this point the `Data` structure is entirely uninitialized, but\n+    //   it won't drop due to an unwind because it's owned on the other side of\n+    //   the catch panic.\n+    // * If the closure successfully returns, we write the return value into the\n+    //   data's return slot. Note that `ptr::write` is used as it's overwriting\n+    //   uninitialized data.\n+    // * Finally, when we come back out of the `__rust_maybe_catch_panic` we're\n+    //   in one of two states:\n+    //\n+    //      1. The closure didn't panic, in which case the return value was\n+    //         filled in. We have to be careful to `forget` the closure,\n+    //         however, as ownership was passed to the `do_call` function.\n+    //      2. The closure panicked, in which case the return value wasn't\n+    //         filled in. In this case the entire `data` structure is invalid,\n+    //         so we forget the entire thing.\n+    //\n+    // Once we stack all that together we should have the \"most efficient'\n+    // method of calling a catch panic whilst juggling ownership.\n+    let mut any_data = 0;\n+    let mut any_vtable = 0;\n+    let mut data = Data {\n+        f: f,\n+        r: mem::uninitialized(),\n+    };\n \n-    fn get_call<F: FnMut()>(_: &mut F) -> fn(&mut F) {\n-        call\n-    }\n+    let r = __rust_maybe_catch_panic(do_call::<F, R>,\n+                                     &mut data as *mut _ as *mut u8,\n+                                     &mut any_data,\n+                                     &mut any_vtable);\n+\n+    return if r == 0 {\n+        let Data { f, r } = data;\n+        mem::forget(f);\n+        debug_assert!(update_panic_count(0) == 0);\n+        Ok(r)\n+    } else {\n+        mem::forget(data);\n+        update_panic_count(-1);\n+        debug_assert!(update_panic_count(0) == 0);\n+        Err(mem::transmute(raw::TraitObject {\n+            data: any_data as *mut _,\n+            vtable: any_vtable as *mut _,\n+        }))\n+    };\n \n-    fn call<F: FnMut()>(f: &mut F) {\n-        f()\n+    fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n+        unsafe {\n+            let data = data as *mut Data<F, R>;\n+            let f = ptr::read(&mut (*data).f);\n+            ptr::write(&mut (*data).r, f());\n+        }\n     }\n }\n "}, {"sha": "23687e10e476d40de9750064d09ded52a0624369", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -83,11 +83,11 @@ pub fn init() {\n         }\n     }\n \n-    #[cfg(not(target_os = \"nacl\"))]\n+    #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\")))]\n     unsafe fn reset_sigpipe() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n     }\n-    #[cfg(target_os = \"nacl\")]\n+    #[cfg(any(target_os = \"nacl\", target_os = \"emscripten\"))]\n     unsafe fn reset_sigpipe() {}\n }\n "}, {"sha": "c29e87f91c9a7e247471f2c4749e3264e663d572", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -551,11 +551,13 @@ pub fn home_dir() -> Option<PathBuf> {\n \n     #[cfg(any(target_os = \"android\",\n               target_os = \"ios\",\n-              target_os = \"nacl\"))]\n+              target_os = \"nacl\",\n+              target_os = \"emscripten\"))]\n     unsafe fn fallback() -> Option<OsString> { None }\n     #[cfg(not(any(target_os = \"android\",\n                   target_os = \"ios\",\n-                  target_os = \"nacl\")))]\n+                  target_os = \"nacl\",\n+                  target_os = \"emscripten\")))]\n     unsafe fn fallback() -> Option<OsString> {\n         #[cfg(not(target_os = \"solaris\"))]\n         unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,"}, {"sha": "75e10d2585308cecb85d17e374fff32c0842509f", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -81,8 +81,7 @@ impl Thread {\n     }\n \n     #[cfg(any(target_os = \"linux\",\n-              target_os = \"android\",\n-              target_os = \"emscripten\"))]\n+              target_os = \"android\"))]\n     pub fn set_name(name: &CStr) {\n         const PR_SET_NAME: libc::c_int = 15;\n         // pthread wrapper only appeared in glibc 2.12, so we use syscall\n@@ -118,9 +117,9 @@ impl Thread {\n                                      name.as_ptr() as *mut libc::c_void);\n         }\n     }\n-    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n+    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\", target_os = \"emscripten\"))]\n     pub fn set_name(_name: &CStr) {\n-        // Newlib and Illumos has no way to set a thread name.\n+        // Newlib, Illumos and Emscripten have no way to set a thread name.\n     }\n \n     pub fn sleep(dur: Duration) {"}, {"sha": "afda59c61ff76246b99a2bdc2458d07761d2ebfb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -314,7 +314,7 @@ declare_features! (\n     (accepted, issue_5723_bootstrap, \"1.0.0\", None),\n     (accepted, macro_rules, \"1.0.0\", None),\n     // Allows using #![no_std]\n-    (accepted, no_std, \"1.0.0\", None),\n+    (accepted, no_std, \"1.6.0\", None),\n     (accepted, slicing_syntax, \"1.0.0\", None),\n     (accepted, struct_variant, \"1.0.0\", None),\n     // These are used to test this portion of the compiler, they don't actually"}, {"sha": "e174f3ad08d6adb4ef916d5a9f85bdb1ac65a27b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -3788,19 +3788,18 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a structure field\n-    fn parse_name_and_ty(&mut self, pr: Visibility,\n-                         attrs: Vec<Attribute> ) -> PResult<'a, StructField> {\n-        let lo = match pr {\n-            Visibility::Inherited => self.span.lo,\n-            _ => self.last_span.lo,\n-        };\n+    fn parse_name_and_ty(&mut self,\n+                         lo: BytePos,\n+                         vis: Visibility,\n+                         attrs: Vec<Attribute>)\n+                         -> PResult<'a, StructField> {\n         let name = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty_sum()?;\n         Ok(StructField {\n             span: mk_sp(lo, self.last_span.hi),\n             ident: Some(name),\n-            vis: pr,\n+            vis: vis,\n             id: ast::DUMMY_NODE_ID,\n             ty: ty,\n             attrs: attrs,\n@@ -5120,10 +5119,11 @@ impl<'a> Parser<'a> {\n \n     /// Parse a structure field declaration\n     pub fn parse_single_struct_field(&mut self,\n+                                     lo: BytePos,\n                                      vis: Visibility,\n                                      attrs: Vec<Attribute> )\n                                      -> PResult<'a, StructField> {\n-        let a_var = self.parse_name_and_ty(vis, attrs)?;\n+        let a_var = self.parse_name_and_ty(lo, vis, attrs)?;\n         match self.token {\n             token::Comma => {\n                 self.bump();\n@@ -5144,8 +5144,9 @@ impl<'a> Parser<'a> {\n     /// Parse an element of a struct definition\n     fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n         let attrs = self.parse_outer_attributes()?;\n+        let lo = self.span.lo;\n         let vis = self.parse_visibility(true)?;\n-        self.parse_single_struct_field(vis, attrs)\n+        self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n     // If `allow_path` is false, just parse the `pub` in `pub(path)` (but still parse `pub(crate)`)"}, {"sha": "0171f24101aecd6565fa29655481cf5f928a63bd", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 92, "deletions": 20, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -340,6 +340,11 @@ pub struct TokenStream {\n     ts: InternalTS,\n }\n \n+// This indicates the maximum size for a leaf in the concatenation algorithm.\n+// If two leafs will be collectively smaller than this, they will be merged.\n+// If a leaf is larger than this, it will be concatenated at the top.\n+const LEAF_SIZE : usize = 32;\n+\n // NB If Leaf access proves to be slow, inroducing a secondary Leaf without the bounds\n // for unsliced Leafs may lead to some performance improvemenet.\n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -483,6 +488,37 @@ impl InternalTS {\n             }\n         }\n     }\n+\n+    fn to_vec(&self) -> Vec<&TokenTree> {\n+        let mut res = Vec::with_capacity(self.len());\n+        fn traverse_and_append<'a>(res: &mut Vec<&'a TokenTree>, ts: &'a InternalTS) {\n+            match *ts {\n+                InternalTS::Empty(..) => {},\n+                InternalTS::Leaf { ref tts, offset, len, .. } => {\n+                    let mut to_app = tts[offset..offset + len].iter().collect();\n+                    res.append(&mut to_app);\n+                }\n+                InternalTS::Node { ref left, ref right, .. } => {\n+                    traverse_and_append(res, left);\n+                    traverse_and_append(res, right);\n+                }\n+            }\n+        }\n+        traverse_and_append(&mut res, self);\n+        res\n+    }\n+\n+    fn to_tts(&self) -> Vec<TokenTree> {\n+        self.to_vec().into_iter().cloned().collect::<Vec<TokenTree>>()\n+    }\n+\n+    // Returns an internal node's children.\n+    fn children(&self) -> Option<(Rc<InternalTS>, Rc<InternalTS>)> {\n+        match *self {\n+            InternalTS::Node { ref left, ref right, .. } => Some((left.clone(), right.clone())),\n+            _ => None,\n+        }\n+    }\n }\n \n /// TokenStream operators include basic destructuring, boolean operations, `maybe_...`\n@@ -496,14 +532,17 @@ impl InternalTS {\n ///\n ///    `maybe_path_prefix(\"a::b::c(a,b,c).foo()\") -> (a::b::c, \"(a,b,c).foo()\")`\n impl TokenStream {\n+    // Construct an empty node with a dummy span.\n     pub fn mk_empty() -> TokenStream {\n         TokenStream { ts: InternalTS::Empty(DUMMY_SP) }\n     }\n \n+    // Construct an empty node with the provided span.\n     fn mk_spanned_empty(sp: Span) -> TokenStream {\n         TokenStream { ts: InternalTS::Empty(sp) }\n     }\n \n+    // Construct a leaf node with a 0 offset and length equivalent to the input.\n     fn mk_leaf(tts: Rc<Vec<TokenTree>>, sp: Span) -> TokenStream {\n         let len = tts.len();\n         TokenStream {\n@@ -516,6 +555,7 @@ impl TokenStream {\n         }\n     }\n \n+    // Construct a leaf node with the provided values.\n     fn mk_sub_leaf(tts: Rc<Vec<TokenTree>>, offset: usize, len: usize, sp: Span) -> TokenStream {\n         TokenStream {\n             ts: InternalTS::Leaf {\n@@ -527,6 +567,7 @@ impl TokenStream {\n         }\n     }\n \n+    // Construct an internal node with the provided values.\n     fn mk_int_node(left: Rc<InternalTS>,\n                    right: Rc<InternalTS>,\n                    len: usize,\n@@ -561,11 +602,56 @@ impl TokenStream {\n         }\n     }\n \n-    /// Concatenates two TokenStreams into a new TokenStream\n+    /// Concatenates two TokenStreams into a new TokenStream.\n     pub fn concat(left: TokenStream, right: TokenStream) -> TokenStream {\n-        let new_len = left.len() + right.len();\n-        let new_span = combine_spans(left.span(), right.span());\n-        TokenStream::mk_int_node(Rc::new(left.ts), Rc::new(right.ts), new_len, new_span)\n+        // This internal procedure performs 'aggressive compacting' during concatenation as\n+        // follows:\n+        // - If the nodes' combined total total length is less than 32, we copy both of\n+        //   them into a new vector and build a new leaf node.\n+        // - If one node is an internal node and the other is a 'small' leaf (length<32),\n+        //   we recur down the internal node on the appropriate side.\n+        // - Otherwise, we construct a new internal node that points to them as left and\n+        // right.\n+        fn concat_internal(left: Rc<InternalTS>, right: Rc<InternalTS>) -> TokenStream {\n+            let llen = left.len();\n+            let rlen = right.len();\n+            let len = llen + rlen;\n+            let span = combine_spans(left.span(), right.span());\n+            if len <= LEAF_SIZE {\n+                let mut new_vec = left.to_tts();\n+                let mut rvec = right.to_tts();\n+                new_vec.append(&mut rvec);\n+                return TokenStream::mk_leaf(Rc::new(new_vec), span);\n+            }\n+\n+            match (left.children(), right.children()) {\n+                (Some((lleft, lright)), None) => {\n+                    if rlen <= LEAF_SIZE  {\n+                        let new_right = concat_internal(lright, right);\n+                        TokenStream::mk_int_node(lleft, Rc::new(new_right.ts), len, span)\n+                    } else {\n+                       TokenStream::mk_int_node(left, right, len, span)\n+                    }\n+                }\n+                (None, Some((rleft, rright))) => {\n+                    if rlen <= LEAF_SIZE  {\n+                        let new_left = concat_internal(left, rleft);\n+                        TokenStream::mk_int_node(Rc::new(new_left.ts), rright, len, span)\n+                    } else {\n+                       TokenStream::mk_int_node(left, right, len, span)\n+                    }\n+                }\n+                (_, _) => TokenStream::mk_int_node(left, right, len, span),\n+            }\n+        }\n+\n+        if left.is_empty() {\n+            right\n+        } else if right.is_empty() {\n+            left\n+        } else {\n+            concat_internal(Rc::new(left.ts), Rc::new(right.ts))\n+        }\n     }\n \n     /// Indicate if the TokenStream is empty.\n@@ -580,27 +666,13 @@ impl TokenStream {\n \n     /// Convert a TokenStream into a vector of borrowed TokenTrees.\n     pub fn to_vec(&self) -> Vec<&TokenTree> {\n-        fn internal_to_vec(ts: &InternalTS) -> Vec<&TokenTree> {\n-            match *ts {\n-                InternalTS::Empty(..) => Vec::new(),\n-                InternalTS::Leaf { ref tts, offset, len, .. } => {\n-                    tts[offset..offset + len].iter().collect()\n-                }\n-                InternalTS::Node { ref left, ref right, .. } => {\n-                    let mut v1 = internal_to_vec(left);\n-                    let mut v2 = internal_to_vec(right);\n-                    v1.append(&mut v2);\n-                    v1\n-                }\n-            }\n-        }\n-        internal_to_vec(&self.ts)\n+        self.ts.to_vec()\n     }\n \n     /// Convert a TokenStream into a vector of TokenTrees (by cloning the TokenTrees).\n     /// (This operation is an O(n) deep copy of the underlying structure.)\n     pub fn to_tts(&self) -> Vec<TokenTree> {\n-        self.to_vec().into_iter().cloned().collect::<Vec<TokenTree>>()\n+        self.ts.to_tts()\n     }\n \n     /// Return the TokenStream's span."}, {"sha": "680ad3ecd64a6c156cb65fce6d67a90e08be4d8e", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -60,7 +60,6 @@ pub const unwinder_private_data_size: usize = 2;\n pub const unwinder_private_data_size: usize = 2;\n \n #[cfg(target_arch = \"asmjs\")]\n-// FIXME: Copied from arm. Need to confirm.\n pub const unwinder_private_data_size: usize = 20;\n \n #[repr(C)]"}, {"sha": "56d2e82806230230ae1fb6f693ed7da03f731108", "filename": "src/test/compile-fail/E0067.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0067.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -13,4 +13,6 @@ use std::collections::LinkedList;\n fn main() {\n     LinkedList::new() += 1; //~ ERROR E0368\n                             //~^ ERROR E0067\n+                            //~^^ NOTE invalid expression for left-hand side\n+                            //~| NOTE cannot use `+=` on type `std::collections::LinkedList<_>`\n }"}, {"sha": "d09353a2038004db9a803d5c691b4849d580d22d", "filename": "src/test/compile-fail/E0094.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0094.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,6 +11,7 @@\n #![feature(intrinsics)]\n extern \"rust-intrinsic\" {\n     fn size_of<T, U>() -> usize; //~ ERROR E0094\n+                                 //~| NOTE expected 1 type parameter\n }\n \n fn main() {"}, {"sha": "d4630d7c2effbe7bd7ee96ce6f1ca538656f03c0", "filename": "src/test/compile-fail/E0138.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0138.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,9 @@\n \n #[start]\n fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+//~^ NOTE previous `start` function here\n \n #[start]\n-fn f(argc: isize, argv: *const *const u8) -> isize {} //~ ERROR E0138\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+//~^ ERROR E0138\n+//~| NOTE multiple `start` functions"}, {"sha": "5a06c01241b4bf7477b5738a59c41ae14c692091", "filename": "src/test/compile-fail/E0253.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0253.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -14,6 +14,8 @@ mod foo {\n     }\n }\n \n-use foo::MyTrait::do_something; //~ ERROR E0253\n+use foo::MyTrait::do_something;\n+    //~^ ERROR E0253\n+    //~|NOTE cannot be imported directly\n \n fn main() {}"}, {"sha": "3e4b7b9cad2d4d171e2b76fad6ea41bc6a5347ed", "filename": "src/test/compile-fail/E0254.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0254.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,13 +9,16 @@\n // except according to those terms.\n \n extern crate collections;\n+//~^ NOTE previous import of `collections` here\n \n mod foo {\n     pub trait collections {\n         fn do_something();\n     }\n }\n \n-use foo::collections; //~ ERROR E0254\n+use foo::collections;\n+//~^ ERROR E0254\n+//~| NOTE already imported\n \n fn main() {}"}, {"sha": "b58fbce8bc648c2a92b4c2705b18605a34a153de", "filename": "src/test/compile-fail/E0267.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0267.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     let w = || { break; }; //~ ERROR E0267\n+            //~| NOTE cannot break inside of a closure\n }"}, {"sha": "3313e07667a1ca2d6f0a93cce945fa4a13c584f2", "filename": "src/test/compile-fail/E0268.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0268.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     break; //~ ERROR E0268\n+    //~| NOTE cannot break outside of a loop\n }"}, {"sha": "b7872509f5408cdf929df0fa61d3532e211405dd", "filename": "src/test/compile-fail/E0301.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0301.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     match Some(()) {\n         None => { },\n         option if option.take().is_none() => {}, //~ ERROR E0301\n+        //~| NOTE borrowed mutably in pattern guard\n         Some(_) => { }\n     }\n }"}, {"sha": "5ad74fd6cab053ca42520907ea8e3759640e425c", "filename": "src/test/compile-fail/E0302.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0302.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     match Some(()) {\n         None => { },\n         option if { option = None; false } => { }, //~ ERROR E0302\n+        //~| NOTE assignment in pattern guard\n         Some(_) => { }\n     }\n }"}, {"sha": "6b468ff96620d25bf0b667d9823d4ba70b5dc964", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -15,5 +15,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `&[i32]`\n     //~| found type `[{integer}; 1]`\n-    //~| expected &-ptr, found array of 1 elements\n+    //~| expected &[i32], found array of 1 elements\n }"}, {"sha": "672ff464718f8b2a499f8bf8b8b433e92151ff66", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let _y: &Trait = x; //~  ERROR mismatched types\n                         //~| expected type `&Trait`\n                         //~| found type `Box<Trait>`\n-                        //~| expected &-ptr, found box\n+                        //~| expected &Trait, found box\n }"}, {"sha": "89fb1e105900d7deac59d2a03ff33f263b31f8ab", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -42,12 +42,12 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `T`\n     //~| found type `&_`\n-    //~| expected trait T, found &-ptr\n+    //~| expected trait T, found reference\n     let &&&x = &(&1isize as &T);\n     //~^ ERROR mismatched types\n     //~| expected type `T`\n     //~| found type `&_`\n-    //~| expected trait T, found &-ptr\n+    //~| expected trait T, found reference\n     let box box x = box 1isize as Box<T>;\n     //~^ ERROR mismatched types\n     //~| expected type `T`"}, {"sha": "883c16b0895816076c8326de14e232ea9154ca74", "filename": "src/test/compile-fail/dst-bad-coercions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -19,12 +19,12 @@ struct Foo<T: ?Sized> {\n }\n \n pub fn main() {\n-    // Test that we cannot convert from *-ptr to &-ptr\n+    // Test that we cannot convert from *-ptr to &S and &T\n     let x: *const S = &S;\n     let y: &S = x; //~ ERROR mismatched types\n     let y: &T = x; //~ ERROR mismatched types\n \n-    // Test that we cannot convert from *-ptr to &-ptr (mut version)\n+    // Test that we cannot convert from *-ptr to &S and &T (mut version)\n     let x: *mut S = &mut S;\n     let y: &S = x; //~ ERROR mismatched types\n     let y: &T = x; //~ ERROR mismatched types"}, {"sha": "276d7f7c9ed339c7646ecf2d1c8e17db16e74b3b", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -17,4 +17,4 @@ fn bar(x: isize) { }\n //~^ ERROR mismatched types\n //~| expected type `fn(&mut __test::test::Bencher)`\n //~| found type `fn(isize) {bar}`\n-//~| expected &-ptr, found isize\n+//~| expected mutable reference, found isize"}, {"sha": "a4517e60d66e195bb61dd57492d5437da9b32227", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `&str`\n     //~| found type `Slice<_>`\n-    //~| expected &-ptr, found struct `Slice`\n+    //~| expected &str, found struct `Slice`\n }"}, {"sha": "1cd43cbb0f8571b250c25c31e6c7b2d0a9a75730", "filename": "src/test/compile-fail/issue-17033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,7 +12,7 @@ fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n              //~| expected type `&mut ()`\n              //~| found type `()`\n-             //~| expected &-ptr, found ()\n+             //~| expected &mut (), found ()\n }\n \n fn main() {}"}, {"sha": "f38961c427ae9c686cb0678722bb177b157f212d", "filename": "src/test/compile-fail/issue-20225.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20225.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -15,21 +15,21 @@ struct Foo;\n impl<'a, T> Fn<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected &-ptr\n+  //~| expected reference\n }\n \n impl<'a, T> FnMut<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected &-ptr\n+  //~| expected reference\n }\n \n impl<'a, T> FnOnce<(&'a T,)> for Foo {\n   type Output = ();\n \n   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected &-ptr\n+  //~| expected reference\n }\n \n fn main() {}"}, {"sha": "39a53648ccf8a126ee6200b3f89fe2ab1fb06dae", "filename": "src/test/compile-fail/issue-26093.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-26093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-26093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26093.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,7 @@ macro_rules! not_an_lvalue {\n     ($thing:expr) => {\n         $thing = 42;\n         //~^ ERROR invalid left-hand side expression\n+        //~^^ NOTE left-hand of expression not valid\n     }\n }\n "}, {"sha": "6cb6bbf1893fc15b8638c09ab3c6f56011c3d22a", "filename": "src/test/compile-fail/issue-29084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -13,7 +13,7 @@ macro_rules! foo {\n         fn bar(d: u8) { }\n         bar(&mut $d);\n         //~^ ERROR mismatched types\n-        //~| expected u8, found &-ptr\n+        //~| expected u8, found &mut u8\n         //~| expected type `u8`\n         //~| found type `&mut u8`\n     }}"}, {"sha": "a1f5d74b30e3677608892c4d9457555aec1a3bbd", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -52,7 +52,7 @@ fn main() {\n //~^ ERROR mismatched types\n //~| expected type `(bool, bool)`\n //~| found type `&_`\n-//~| expected tuple, found &-ptr\n+//~| expected tuple, found reference\n     }\n \n "}, {"sha": "1cbb7588e17df5e5fdddb3d8f0ff54f5e2608bbf", "filename": "src/test/compile-fail/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n     //~| found type `&_`\n-    //~| expected (), found &-ptr\n+    //~| expected (), found reference\n }"}, {"sha": "da6f49f3efe911b73895512be3ec9f69cf2ae590", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -15,7 +15,7 @@ impl<'a> BarStruct {\n     //~^ ERROR mismatched types\n     //~| expected type `Box<BarStruct>`\n     //~| found type `&'a mut BarStruct`\n-    //~| expected box, found &-ptr\n+    //~| expected box, found mutable reference\n }\n \n fn main() {}"}, {"sha": "7d9f8e90585219d750a0f18dc68a9af06b84750a", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -27,11 +27,11 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| expected type `&std::option::Option<{integer}>`\n         //~| found type `std::option::Option<_>`\n-        //~| expected &-ptr, found enum `std::option::Option`\n+        //~| expected reference, found enum `std::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n         //~| expected type `&std::option::Option<{integer}>`\n         //~| found type `std::option::Option<_>`\n-        //~| expected &-ptr, found enum `std::option::Option`\n+        //~| expected reference, found enum `std::option::Option`\n     }\n }"}, {"sha": "4c8800878f07df4787096e35d8d1d1429614bc9e", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     Foo::bar(x); //~  ERROR mismatched types\n                  //~| expected type `&Foo`\n                  //~| found type `Foo`\n-                 //~| expected &-ptr, found struct `Foo`\n+                 //~| expected &Foo, found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected type `&Foo`\n                       //~| found type `&{integer}`"}, {"sha": "1825ec61f1ed7d84a1edf0dfdbd065416fbcdf14", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -36,7 +36,7 @@ fn main() {\n         y: 3,\n     };\n     let ans = s(\"what\");    //~ ERROR mismatched types\n-    //~^ NOTE expected isize, found &-ptr\n+    //~^ NOTE expected isize, found reference\n     //~| NOTE expected type\n     //~| NOTE found type\n     let ans = s();"}, {"sha": "0dc7e09f0e4db417d212626bf955c0b41b409c9e", "filename": "src/test/compile-fail/pub-struct-field-span-26083.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d5b758bab979b1db723bcc97ecd8398127bd8bc/src%2Ftest%2Fcompile-fail%2Fpub-struct-field-span-26083.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5b758bab979b1db723bcc97ecd8398127bd8bc/src%2Ftest%2Fcompile-fail%2Fpub-struct-field-span-26083.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-struct-field-span-26083.rs?ref=1d5b758bab979b1db723bcc97ecd8398127bd8bc", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Regression test for issue #26083\n-// Test that span for public struct fields start at `pub` instead of the identifier\n-\n-struct Foo {\n-    pub bar: u8,\n-\n-    pub\n-    //~^ error: field `bar` is already declared [E0124]\n-    bar: u8,\n-\n-    pub bar:\n-    //~^ error: field `bar` is already declared [E0124]\n-    u8,\n-\n-    bar:\n-    //~^ error: field `bar` is already declared [E0124]\n-    u8,\n-}\n-\n-fn main() { }"}, {"sha": "5d5113ce07c719f66c2cf622d259cb7498f3e845", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n     //~| found type `&'static str`\n-    //~| expected usize, found &-ptr\n+    //~| expected usize, found reference\n     //~| ERROR expected `usize` for repeat count, found string literal [E0306]\n     //~| expected `usize`\n     let f = [0; -4_isize];"}, {"sha": "f884bb2098eb192d560334cfafd13605ae51b665", "filename": "src/test/run-pass-fulldeps/linkage-visibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flinkage-visibility.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,7 @@\n // ignore-android: FIXME(#10356)\n // ignore-windows: std::dynamic_lib does not work on Windows well\n // ignore-musl\n+// ignore-emscripten no dynamic linking\n \n extern crate linkage_visibility as foo;\n "}, {"sha": "26261348020f894dd832840396cd0348952255a5", "filename": "src/test/run-pass-fulldeps/logging-enabled.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flogging-enabled.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // exec-env:RUST_LOG=logging_enabled=info\n+// ignore-emscripten: FIXME(#31622)\n \n \n #![feature(rustc_private)]"}, {"sha": "183a522bba749290fc1cae429d3ebef7fe6c4f4e", "filename": "src/test/run-pass-fulldeps/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flogging-separate-lines.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,6 +11,7 @@\n // ignore-windows\n // exec-env:RUST_LOG=debug\n // compile-flags:-C debug-assertions=y\n+// ignore-emscripten: FIXME(#31622)\n \n #![feature(rustc_private)]\n "}, {"sha": "460eab998c6fb473e5515ec4a444a31be66cd3e1", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,7 +12,7 @@\n // ignore-pretty: does not work well with `--test`\n \n #![feature(quote, rustc_private)]\n-#![deny(unused_variable)]\n+#![deny(unused_variables)]\n \n extern crate syntax;\n "}, {"sha": "838005cbc91194ad8c05eea3ec3f2d1320ef390e", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -17,6 +17,7 @@\n \n // compile-flags:-g -Cllvm-args=-enable-tail-merge=0\n // ignore-pretty as this critically relies on line numbers\n+// ignore-emscripten spawning processes is not supported\n \n use std::io;\n use std::io::prelude::*;"}, {"sha": "f26706d1754e018715d6af38de71dd730460367e", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,6 +10,7 @@\n \n // no-pretty-expanded FIXME #15189\n // ignore-android FIXME #17520\n+// ignore-emscripten spawning processes is not supported\n // compile-flags:-g\n \n use std::env;"}, {"sha": "5b83ce48e5daddd793c9a948de233e06b20bc70e", "filename": "src/test/run-pass/command-before-exec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-windows - this is a unix-specific test\n+// ignore-emscripten\n \n #![feature(process_exec, libc)]\n "}, {"sha": "130526e72b19cadf6623bbd7859085256df9c83b", "filename": "src/test/run-pass/command-exec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fcommand-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fcommand-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-exec.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-windows - this is a unix-specific test\n+// ignore-emscripten\n // ignore-pretty\n \n #![feature(process_exec)]"}, {"sha": "a8014768d78470c14b7196c26d3410a031ba66a1", "filename": "src/test/run-pass/drop-flag-sanity-check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -Z force-dropflag-checks=on\n+// ignore-emscripten\n \n // Quick-and-dirty test to ensure -Z force-dropflag-checks=on works as\n // expected. Note that the inlined drop-flag is slated for removal"}, {"sha": "912cb4c5e877500055966d9e39931e9ed4b0fa8a", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten no threads support\n+\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "5eb7a243acf0c242e7e43b91495eb3fe64a80f1a", "filename": "src/test/run-pass/enum-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variants.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n enum Animal {\n     Dog (String, f64),"}, {"sha": "89af1db7c78f1f85d273958c416c9546d0ac76ea", "filename": "src/test/run-pass/env-args-reverse-iterator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n use std::env::args;\n use std::process::Command;\n "}, {"sha": "bcb0c62d9fef4cc968976f9b2d8b24a02755a961", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n \n #![feature(path)]\n "}, {"sha": "a96d189afaa8698d80d8ee5d81292ea9646f0f4a", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // exec-env:TEST_EXEC_ENV=22\n-\n+// ignore-emscripten FIXME: issue #31622\n \n use std::env;\n "}, {"sha": "ad6c10611aaa053df61538e5f9e12a7e35f14415", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n pub fn main() {\n     // We should be able to type infer inside of ||s."}, {"sha": "75fd9fcb7b6d835e369504deecdc55a28e8afde0", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "8efc4cb1b17257debcd8204525c4905614560cab", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten No support for threads\n+\n #![allow(unknown_features)]\n #![feature(std_misc)]\n "}, {"sha": "cfae9903a95e5ecd5204d7254228ee7f245319a7", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -24,7 +24,8 @@ mod rusti {\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "b350bd1a4ccbf84526ab3be5e21bd42204b83c9d", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n \n // Make sure that if a process doesn't have its stdio/stderr descriptors set up\n // that we don't die in a large ball of fire"}, {"sha": "8f455c2fe4e1e73cac07ffc38e92cc6cd30ccf49", "filename": "src/test/run-pass/issue-12133-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,7 @@\n // aux-build:issue-12133-dylib.rs\n // aux-build:issue-12133-dylib2.rs\n // ignore-musl\n+// ignore-emscripten no dylib support\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "ebf390cfe4fc32c530fdae15419a04e834696f28", "filename": "src/test/run-pass/issue-12660.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-12660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-12660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12660.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -16,7 +16,7 @@ extern crate issue12660aux;\n \n use issue12660aux::{my_fn, MyStruct};\n \n-#[allow(path_statement)]\n+#[allow(path_statements)]\n fn main() {\n     my_fn(MyStruct);\n     MyStruct;"}, {"sha": "e1c2c5684fb5f18f34abf436c5de8245f2668f38", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-aarch64\n+// ignore-emscripten\n #![feature(io, process_capture)]\n \n use std::env;"}, {"sha": "513ab91489c8d98ea96e970c8f29a4a1341ddea0", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n \n #![feature(io, process_capture)]\n "}, {"sha": "b65a3a9ab70841b05991fd5503c2e213fd6c247d", "filename": "src/test/run-pass/issue-1451.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1451.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n struct T { f: extern \"Rust\" fn() }\n struct S { f: extern \"Rust\" fn() }"}, {"sha": "ffe6b646794e14da62dfa83ec2afdf0385b3276d", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n \n use std::env;\n use std::process::Command;"}, {"sha": "d4f3d15b320d7987a3fa2172137372f406006fc6", "filename": "src/test/run-pass/issue-16272.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16272.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-aarch64\n+// ignore-emscripten\n \n use std::process::Command;\n use std::env;"}, {"sha": "52c7911075ae9d3d51542e043286dea6c3328d72", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-aarch64\n+// ignore-emscripten\n #![feature(std_misc, os)]\n \n #[cfg(unix)]"}, {"sha": "393757035141d6e4137ff3c27ece14d55b4467e6", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // pretty-expanded FIXME #23616\n+// ignore-emscripten\n \n use std::thread::Builder;\n "}, {"sha": "8acd88deef2d025aed07ef237e34a9f97dda363f", "filename": "src/test/run-pass/issue-22894.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-22894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-22894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22894.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(dead_code)]\n+static X: &'static str = &*\"\";\n+fn main() {}"}, {"sha": "9b2b474351df6f4ec14da92d4445c28d570d4ad5", "filename": "src/test/run-pass/issue-24313.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24313.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n use std::thread;\n use std::env;\n use std::process::Command;"}, {"sha": "a905727afff4fcfd22d6ae1afd75b6880a45bceb", "filename": "src/test/run-pass/issue-28950.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-28950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-28950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28950.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n // compile-flags: -Z orbit=off\n // (blows the stack with MIR trans and no optimizations)\n "}, {"sha": "9252762d1bdad191614920e1a1961858dd1b8d7a", "filename": "src/test/run-pass/issue-29485.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-29485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-29485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29485.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:issue-29485.rs\n+// ignore-emscripten\n \n #[feature(recover)]\n "}, {"sha": "035911302cf2499e1fe9d4985c55093734b2ba85", "filename": "src/test/run-pass/issue-30490.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30490.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n // Previously libstd would set stdio descriptors of a child process\n // by `dup`ing the requested descriptors to inherit directly into the\n // stdio descriptors. This, however, would incorrectly handle cases"}, {"sha": "76728a0d354b2c9267acccbf74561eab781d6ebf", "filename": "src/test/run-pass/issue-33770.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-33770.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-33770.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33770.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n use std::process::{Command, Stdio};\n use std::env;\n use std::sync::{Mutex, RwLock};"}, {"sha": "5d094af2149e13082526f363ba750a60589bfc92", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(path_statement)]\n+#![allow(path_statements)]\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "9fb826712adc0363a780980728e283067b60e35b", "filename": "src/test/run-pass/issue-4734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-4734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-4734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4734.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,7 +12,7 @@\n // `e` is a type which requires a destructor.\n \n \n-#![allow(path_statement)]\n+#![allow(path_statements)]\n \n struct A { n: isize }\n struct B;"}, {"sha": "5324ddb49e79f7e2f9c0983b48b16116da527fae", "filename": "src/test/run-pass/issue-7911.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7911.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -13,7 +13,7 @@\n // (Closes #7911) Test that we can use the same self expression\n // with different mutability in macro in two methods\n \n-#![allow(unused_variable)] // unused foobar_immut + foobar_mut\n+#![allow(unused_variables)] // unused foobar_immut + foobar_mut\n trait FooBar {\n     fn dummy(&self) { }\n }"}, {"sha": "17abf9cb1f251322b11b799fd5c449c02d2c32a8", "filename": "src/test/run-pass/linkage1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage1.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-windows\n // ignore-macos\n+// ignore-emscripten\n // aux-build:linkage1.rs\n \n #![feature(linkage)]"}, {"sha": "dfa080550469abde09071ab991ffd5a075f5d82c", "filename": "src/test/run-pass/liveness-assign-imm-local-after-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-loop.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(dead_assignment)]\n #![allow(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn test(_cond: bool) {\n     let v: isize;"}, {"sha": "ce55c76120235fc8e61fb5612b204ca8d33a7ccf", "filename": "src/test/run-pass/long-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Flong-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Flong-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flong-while.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n pub fn main() {\n     let mut i: isize = 0;"}, {"sha": "24185ffa4128fe457bf0fd71c63a1e33ca45bd6f", "filename": "src/test/run-pass/match-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-phi.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n enum thing { a, b, c, }\n "}, {"sha": "86fe06b176532faf6f5f90922fa581a5eac05311", "filename": "src/test/run-pass/multi-panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-panic.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n fn check_for_no_backtrace(test: std::process::Output) {\n     assert!(!test.status.success());\n     let err = String::from_utf8_lossy(&test.stderr);"}, {"sha": "ad4d56ec50ac069f2973ce35953d7c35e7de7cdc", "filename": "src/test/run-pass/no-stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-stdio.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n #![feature(libc)]\n \n extern crate libc;"}, {"sha": "4c3017c066e81b313521fc8da64cba10c9461be1", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "1ad43f5f17fb9b483fa35750524535b78a38f518", "filename": "src/test/run-pass/panic-handler-chain.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// ignore-emscripten no threads support\n+\n #![feature(panic_handler, const_fn, std_panic)]\n \n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "a5d408448a033388d4da4f69a564ba474d28beaa", "filename": "src/test/run-pass/process-exit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fprocess-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fprocess-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-exit.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n use std::env;\n use std::process::{self, Command, Stdio};\n "}, {"sha": "cce5ef4fe17c37dd26a1628535c2f0a12e02b577", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n \n use std::process::Command;\n use std::env;"}, {"sha": "d3d847127ee954430d82ee0366dd08114344ba45", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -17,6 +17,7 @@\n // intact.\n \n // ignore-aarch64\n+// ignore-emscripten\n \n use std::io::prelude::*;\n use std::io;"}, {"sha": "4863979b3f6c2bdd0731cc40add9a6cdd0f416d5", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -42,7 +42,8 @@ struct Outer {\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "fc42fbc714c099cfbb5d27e1e1aeac7b5042b07a", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -13,7 +13,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(unknown_features)]\n \n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible."}, {"sha": "f81c3f2e99d3672ac8176fb41b45b83b094e807e", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n #![feature(start)]\n \n use std::ffi::CStr;"}, {"sha": "df64d7140b4b5a2c6b628c249410900cc9b132b4", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten can't run commands\n+\n #![feature(libc)]\n \n extern crate libc;"}, {"sha": "c7759ca743bbb6e3669233f0fc75705b4af85624", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-windows\n+// ignore-emscripten\n \n use std::env;\n use std::process::Command;"}, {"sha": "4eb4720e8d7be43f611dc444057d38b780d74a48", "filename": "src/test/run-pass/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -12,6 +12,7 @@\n // doesn't die in a ball of fire, but rather it's gracefully handled.\n \n // ignore-aarch64\n+// ignore-emscripten\n \n use std::env;\n use std::io::prelude::*;"}, {"sha": "9acc6ff8cf08474f2ec151ba9b2b8161d499c9f6", "filename": "src/test/run-pass/sleep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsleep.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten no threads support\n+\n use std::thread::{self, sleep};\n use std::time::Duration;\n use std::sync::{Arc, Mutex};"}, {"sha": "bcdadb1d90d385eb4c3e0a1dc158d7e113d0f28f", "filename": "src/test/run-pass/traits-default-method-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n trait Foo {\n     fn foo(&self, mut v: isize) { v = 1; }"}, {"sha": "2acaff262690bb1771a3086114a39aa54944b640", "filename": "src/test/run-pass/typestate-cfg-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Ftypestate-cfg-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Ftypestate-cfg-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypestate-cfg-nesting.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn f() {\n     let x = 10; let mut y = 11;"}, {"sha": "c2813771b7c34499cfb15d82461d5d6e7c6bb8b0", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "67eceba020c803a03a98bf297e04c3e3fff3c78a", "filename": "src/test/run-pass/unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n #![allow(dead_assignment)]\n \n fn f(u: ()) { return u; }"}, {"sha": "189c5cdb9b747f7aaf7c64c28f72a176455efd69", "filename": "src/test/run-pass/unreachable-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -10,7 +10,7 @@\n \n \n #![allow(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn id(x: bool) -> bool { x }\n "}, {"sha": "5cb5e8c4f99cd9271053911f1750dec46f28e016", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n \n-#![allow(path_statement)]\n+#![allow(path_statements)]\n #![allow(unreachable_code)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n fn id(x: bool) -> bool { x }\n "}, {"sha": "e4b9d14fb4b30aab6d2b5c45e85f0e2204dc5257", "filename": "src/test/run-pass/unused-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funused-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Funused-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -14,7 +14,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(path_statement)]\n+#![allow(path_statements)]\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "1d1c83cf12a15bb2eba21f7cba09a4f19ec62322", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n \n #![feature(libc)]\n "}, {"sha": "6e9e7bc24d6a028031f5f266ce4847f08cb44398", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_assignment)]\n-#![allow(unused_variable)]\n+#![allow(unused_variables)]\n \n pub fn main() {\n     let mut y: isize = 42;"}, {"sha": "9f8f871200ca5543a0d1e33a319fb180d3479463", "filename": "src/test/ui/span/pub-struct-field.rs", "status": "renamed", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// this checks that a pred with a non-bool return\n-// type is rejected, even if the pred is never used\n+// Regression test for issue #26083 and #35435\n+// Test that span for public struct fields start at `pub`\n \n-// pretty-expanded FIXME #23616\n+#![feature(pub_restricted)]\n \n-fn bad(_a: isize) -> isize { return 37; } //~ ERROR Non-boolean return type\n+struct Foo {\n+    bar: u8,\n+    pub bar: u8,\n+    pub(crate) bar: u8,\n+}\n \n-pub fn main() { }\n+fn main() {}", "previous_filename": "src/test/run-pass/pred-not-bool.rs"}, {"sha": "2c002c34736c54bca4bbd25d93f37c5a6e8cb192", "filename": "src/test/ui/span/pub-struct-field.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -0,0 +1,19 @@\n+error[E0124]: field `bar` is already declared\n+  --> $DIR/pub-struct-field.rs:18:5\n+   |\n+17 |     bar: u8,\n+   |     ------- `bar` first declared here\n+18 |     pub bar: u8,\n+   |     ^^^^^^^^^^^ field already declared\n+\n+error[E0124]: field `bar` is already declared\n+  --> $DIR/pub-struct-field.rs:19:5\n+   |\n+17 |     bar: u8,\n+   |     ------- `bar` first declared here\n+18 |     pub bar: u8,\n+19 |     pub(crate) bar: u8,\n+   |     ^^^^^^^^^^^^^^^^^^ field already declared\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e9ccc029bc3cf4ee0efcfbef5d64ab94882edc54", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ff307f07327843348c0fb7476c4de77f95f89f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=13ff307f07327843348c0fb7476c4de77f95f89f", "patch": "@@ -137,10 +137,6 @@ impl<'test> TestCx<'test> {\n \n         self.check_correct_failure_status(&proc_res);\n \n-        if proc_res.status.success() {\n-            self.fatal(\"process did not return an error status\");\n-        }\n-\n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n         if !expected_errors.is_empty() {"}]}