{"sha": "f304874c8c12de6120663ffff7f1bfdc69f19496", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDQ4NzRjOGMxMmRlNjEyMDY2M2ZmZmY3ZjFiZmRjNjlmMTk0OTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T15:59:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:37:26Z"}, "message": "Move fixtures to a separate file", "tree": {"sha": "215ef99f853e3f9fd4da30c36d78806e8a00d5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215ef99f853e3f9fd4da30c36d78806e8a00d5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f304874c8c12de6120663ffff7f1bfdc69f19496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f304874c8c12de6120663ffff7f1bfdc69f19496", "html_url": "https://github.com/rust-lang/rust/commit/f304874c8c12de6120663ffff7f1bfdc69f19496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f304874c8c12de6120663ffff7f1bfdc69f19496/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c12c4f9609ee72487af9b55a558b01af73ffe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c12c4f9609ee72487af9b55a558b01af73ffe3e", "html_url": "https://github.com/rust-lang/rust/commit/0c12c4f9609ee72487af9b55a558b01af73ffe3e"}], "stats": {"total": 580, "additions": 292, "deletions": 288}, "files": [{"sha": "d0a73203107379375bb7574d98654770b40d9b0e", "filename": "crates/test_utils/src/fixture.rs", "status": "added", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/f304874c8c12de6120663ffff7f1bfdc69f19496/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f304874c8c12de6120663ffff7f1bfdc69f19496/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=f304874c8c12de6120663ffff7f1bfdc69f19496", "patch": "@@ -0,0 +1,288 @@\n+use ra_cfg::CfgOptions;\n+use rustc_hash::FxHashMap;\n+use stdx::split1;\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub struct FixtureEntry {\n+    pub meta: FixtureMeta,\n+    pub text: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub enum FixtureMeta {\n+    Root { path: String },\n+    File(FileMeta),\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub struct FileMeta {\n+    pub path: String,\n+    pub crate_name: Option<String>,\n+    pub deps: Vec<String>,\n+    pub cfg: CfgOptions,\n+    pub edition: Option<String>,\n+    pub env: FxHashMap<String, String>,\n+}\n+\n+impl FixtureMeta {\n+    pub fn path(&self) -> &str {\n+        match self {\n+            FixtureMeta::Root { path } => &path,\n+            FixtureMeta::File(f) => &f.path,\n+        }\n+    }\n+\n+    pub fn crate_name(&self) -> Option<&String> {\n+        match self {\n+            FixtureMeta::File(f) => f.crate_name.as_ref(),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn cfg_options(&self) -> Option<&CfgOptions> {\n+        match self {\n+            FixtureMeta::File(f) => Some(&f.cfg),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn edition(&self) -> Option<&String> {\n+        match self {\n+            FixtureMeta::File(f) => f.edition.as_ref(),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn env(&self) -> impl Iterator<Item = (&String, &String)> {\n+        struct EnvIter<'a> {\n+            iter: Option<std::collections::hash_map::Iter<'a, String, String>>,\n+        }\n+\n+        impl<'a> EnvIter<'a> {\n+            fn new(meta: &'a FixtureMeta) -> Self {\n+                Self {\n+                    iter: match meta {\n+                        FixtureMeta::File(f) => Some(f.env.iter()),\n+                        _ => None,\n+                    },\n+                }\n+            }\n+        }\n+\n+        impl<'a> Iterator for EnvIter<'a> {\n+            type Item = (&'a String, &'a String);\n+            fn next(&mut self) -> Option<Self::Item> {\n+                self.iter.as_mut().and_then(|i| i.next())\n+            }\n+        }\n+\n+        EnvIter::new(self)\n+    }\n+}\n+\n+/// Same as `parse_fixture`, except it allow empty fixture\n+pub fn parse_single_fixture(ra_fixture: &str) -> Option<FixtureEntry> {\n+    if !ra_fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n+        return None;\n+    }\n+\n+    let fixtures = parse_fixture(ra_fixture);\n+    if fixtures.len() > 1 {\n+        panic!(\"too many fixtures\");\n+    }\n+    fixtures.into_iter().nth(0)\n+}\n+\n+/// Parses text which looks like this:\n+///\n+///  ```not_rust\n+///  //- some meta\n+///  line 1\n+///  line 2\n+///  // - other meta\n+///  ```\n+pub fn parse_fixture(ra_fixture: &str) -> Vec<FixtureEntry> {\n+    let fixture = indent_first_line(ra_fixture);\n+    let margin = fixture_margin(&fixture);\n+\n+    let mut lines = fixture\n+        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n+        .enumerate()\n+        .filter_map(|(ix, line)| {\n+            if line.len() >= margin {\n+                assert!(line[..margin].trim().is_empty());\n+                let line_content = &line[margin..];\n+                if !line_content.starts_with(\"//-\") {\n+                    assert!(\n+                        !line_content.contains(\"//-\"),\n+                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n+The offending line: {:?}\"#,\n+                        ix,\n+                        line\n+                    );\n+                }\n+                Some(line_content)\n+            } else {\n+                assert!(line.trim().is_empty());\n+                None\n+            }\n+        });\n+\n+    let mut res: Vec<FixtureEntry> = Vec::new();\n+    for line in lines.by_ref() {\n+        if line.starts_with(\"//-\") {\n+            let meta = line[\"//-\".len()..].trim().to_string();\n+            let meta = parse_meta(&meta);\n+            res.push(FixtureEntry { meta, text: String::new() })\n+        } else if let Some(entry) = res.last_mut() {\n+            entry.text.push_str(line);\n+            entry.text.push('\\n');\n+        }\n+    }\n+    res\n+}\n+\n+//- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n+fn parse_meta(meta: &str) -> FixtureMeta {\n+    let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n+\n+    if components[0] == \"root\" {\n+        let path = components[1].to_string();\n+        assert!(path.starts_with(\"/\") && path.ends_with(\"/\"));\n+        return FixtureMeta::Root { path };\n+    }\n+\n+    let path = components[0].to_string();\n+    assert!(path.starts_with(\"/\"));\n+\n+    let mut krate = None;\n+    let mut deps = Vec::new();\n+    let mut edition = None;\n+    let mut cfg = CfgOptions::default();\n+    let mut env = FxHashMap::default();\n+    for component in components[1..].iter() {\n+        let (key, value) = split1(component, ':').unwrap();\n+        match key {\n+            \"crate\" => krate = Some(value.to_string()),\n+            \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n+            \"edition\" => edition = Some(value.to_string()),\n+            \"cfg\" => {\n+                for key in value.split(',') {\n+                    match split1(key, '=') {\n+                        None => cfg.insert_atom(key.into()),\n+                        Some((k, v)) => cfg.insert_key_value(k.into(), v.into()),\n+                    }\n+                }\n+            }\n+            \"env\" => {\n+                for key in value.split(',') {\n+                    if let Some((k, v)) = split1(key, '=') {\n+                        env.insert(k.into(), v.into());\n+                    }\n+                }\n+            }\n+            _ => panic!(\"bad component: {:?}\", component),\n+        }\n+    }\n+\n+    FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n+}\n+\n+/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n+/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n+/// the other lines visually:\n+/// ```\n+/// let fixture = \"//- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \";\n+/// assert_eq!(fixture_margin(fixture),\n+/// \"               //- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \")\n+/// ```\n+fn indent_first_line(fixture: &str) -> String {\n+    if fixture.is_empty() {\n+        return String::new();\n+    }\n+    let mut lines = fixture.lines();\n+    let first_line = lines.next().unwrap();\n+    if first_line.contains(\"//-\") {\n+        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n+        let fixed_margin = fixture_margin(&rest);\n+        let fixed_indent = fixed_margin - indent_len(first_line);\n+        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n+    } else {\n+        fixture.to_owned()\n+    }\n+}\n+\n+fn fixture_margin(fixture: &str) -> usize {\n+    fixture\n+        .lines()\n+        .filter(|it| it.trim_start().starts_with(\"//-\"))\n+        .map(indent_len)\n+        .next()\n+        .expect(\"empty fixture\")\n+}\n+\n+fn indent_len(s: &str) -> usize {\n+    s.len() - s.trim_start().len()\n+}\n+\n+#[test]\n+#[should_panic]\n+fn parse_fixture_checks_further_indented_metadata() {\n+    parse_fixture(\n+        r\"\n+        //- /lib.rs\n+          mod bar;\n+\n+          fn foo() {}\n+          //- /bar.rs\n+          pub fn baz() {}\n+          \",\n+    );\n+}\n+\n+#[test]\n+fn parse_fixture_can_handle_dedented_first_line() {\n+    let fixture = \"//- /lib.rs\n+                   mod foo;\n+                   //- /foo.rs\n+                   struct Bar;\n+\";\n+    assert_eq!(\n+        parse_fixture(fixture),\n+        parse_fixture(\n+            \"//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+struct Bar;\n+\"\n+        )\n+    )\n+}\n+\n+#[test]\n+fn parse_fixture_gets_full_meta() {\n+    let parsed = parse_fixture(\n+        r\"\n+    //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n+    mod m;\n+    \",\n+    );\n+    assert_eq!(1, parsed.len());\n+\n+    let parsed = &parsed[0];\n+    assert_eq!(\"mod m;\\n\\n\", parsed.text);\n+\n+    let meta = &parsed.meta;\n+    assert_eq!(\"foo\", meta.crate_name().unwrap());\n+    assert_eq!(\"/lib.rs\", meta.path());\n+    assert!(meta.cfg_options().is_some());\n+    assert_eq!(2, meta.env().count());\n+}"}, {"sha": "f22fcc8b291f48c8e329695cdd967f39234880ef", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 288, "changes": 292, "blob_url": "https://github.com/rust-lang/rust/blob/f304874c8c12de6120663ffff7f1bfdc69f19496/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f304874c8c12de6120663ffff7f1bfdc69f19496/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=f304874c8c12de6120663ffff7f1bfdc69f19496", "patch": "@@ -8,20 +8,21 @@\n \n #[macro_use]\n pub mod mark;\n+mod fixture;\n \n use std::{\n     env, fs,\n     path::{Path, PathBuf},\n };\n \n use serde_json::Value;\n-use stdx::split1;\n use text_size::{TextRange, TextSize};\n \n+pub use difference::Changeset as __Changeset;\n pub use ra_cfg::CfgOptions;\n pub use rustc_hash::FxHashMap;\n \n-pub use difference::Changeset as __Changeset;\n+pub use crate::fixture::{parse_fixture, parse_single_fixture, FixtureEntry, FixtureMeta};\n \n pub const CURSOR_MARKER: &str = \"<|>\";\n \n@@ -97,7 +98,7 @@ impl From<RangeOrOffset> for TextRange {\n     fn from(selection: RangeOrOffset) -> Self {\n         match selection {\n             RangeOrOffset::Range(it) => it,\n-            RangeOrOffset::Offset(it) => TextRange::new(it, it),\n+            RangeOrOffset::Offset(it) => TextRange::empty(it),\n         }\n     }\n }\n@@ -159,291 +160,6 @@ pub fn add_cursor(text: &str, offset: TextSize) -> String {\n     res\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n-pub struct FixtureEntry {\n-    pub meta: FixtureMeta,\n-    pub text: String,\n-}\n-\n-#[derive(Debug, Eq, PartialEq)]\n-pub enum FixtureMeta {\n-    Root { path: String },\n-    File(FileMeta),\n-}\n-\n-#[derive(Debug, Eq, PartialEq)]\n-pub struct FileMeta {\n-    pub path: String,\n-    pub crate_name: Option<String>,\n-    pub deps: Vec<String>,\n-    pub cfg: CfgOptions,\n-    pub edition: Option<String>,\n-    pub env: FxHashMap<String, String>,\n-}\n-\n-impl FixtureMeta {\n-    pub fn path(&self) -> &str {\n-        match self {\n-            FixtureMeta::Root { path } => &path,\n-            FixtureMeta::File(f) => &f.path,\n-        }\n-    }\n-\n-    pub fn crate_name(&self) -> Option<&String> {\n-        match self {\n-            FixtureMeta::File(f) => f.crate_name.as_ref(),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn cfg_options(&self) -> Option<&CfgOptions> {\n-        match self {\n-            FixtureMeta::File(f) => Some(&f.cfg),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn edition(&self) -> Option<&String> {\n-        match self {\n-            FixtureMeta::File(f) => f.edition.as_ref(),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn env(&self) -> impl Iterator<Item = (&String, &String)> {\n-        struct EnvIter<'a> {\n-            iter: Option<std::collections::hash_map::Iter<'a, String, String>>,\n-        }\n-\n-        impl<'a> EnvIter<'a> {\n-            fn new(meta: &'a FixtureMeta) -> Self {\n-                Self {\n-                    iter: match meta {\n-                        FixtureMeta::File(f) => Some(f.env.iter()),\n-                        _ => None,\n-                    },\n-                }\n-            }\n-        }\n-\n-        impl<'a> Iterator for EnvIter<'a> {\n-            type Item = (&'a String, &'a String);\n-            fn next(&mut self) -> Option<Self::Item> {\n-                self.iter.as_mut().and_then(|i| i.next())\n-            }\n-        }\n-\n-        EnvIter::new(self)\n-    }\n-}\n-\n-/// Parses text which looks like this:\n-///\n-///  ```not_rust\n-///  //- some meta\n-///  line 1\n-///  line 2\n-///  // - other meta\n-///  ```\n-pub fn parse_fixture(ra_fixture: &str) -> Vec<FixtureEntry> {\n-    let fixture = indent_first_line(ra_fixture);\n-    let margin = fixture_margin(&fixture);\n-\n-    let mut lines = fixture\n-        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n-        .enumerate()\n-        .filter_map(|(ix, line)| {\n-            if line.len() >= margin {\n-                assert!(line[..margin].trim().is_empty());\n-                let line_content = &line[margin..];\n-                if !line_content.starts_with(\"//-\") {\n-                    assert!(\n-                        !line_content.contains(\"//-\"),\n-                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n-The offending line: {:?}\"#,\n-                        ix,\n-                        line\n-                    );\n-                }\n-                Some(line_content)\n-            } else {\n-                assert!(line.trim().is_empty());\n-                None\n-            }\n-        });\n-\n-    let mut res: Vec<FixtureEntry> = Vec::new();\n-    for line in lines.by_ref() {\n-        if line.starts_with(\"//-\") {\n-            let meta = line[\"//-\".len()..].trim().to_string();\n-            let meta = parse_meta(&meta);\n-            res.push(FixtureEntry { meta, text: String::new() })\n-        } else if let Some(entry) = res.last_mut() {\n-            entry.text.push_str(line);\n-            entry.text.push('\\n');\n-        }\n-    }\n-    res\n-}\n-\n-//- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-fn parse_meta(meta: &str) -> FixtureMeta {\n-    let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n-\n-    if components[0] == \"root\" {\n-        let path = components[1].to_string();\n-        assert!(path.starts_with(\"/\") && path.ends_with(\"/\"));\n-        return FixtureMeta::Root { path };\n-    }\n-\n-    let path = components[0].to_string();\n-    assert!(path.starts_with(\"/\"));\n-\n-    let mut krate = None;\n-    let mut deps = Vec::new();\n-    let mut edition = None;\n-    let mut cfg = CfgOptions::default();\n-    let mut env = FxHashMap::default();\n-    for component in components[1..].iter() {\n-        let (key, value) = split1(component, ':').unwrap();\n-        match key {\n-            \"crate\" => krate = Some(value.to_string()),\n-            \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n-            \"edition\" => edition = Some(value.to_string()),\n-            \"cfg\" => {\n-                for key in value.split(',') {\n-                    match split1(key, '=') {\n-                        None => cfg.insert_atom(key.into()),\n-                        Some((k, v)) => cfg.insert_key_value(k.into(), v.into()),\n-                    }\n-                }\n-            }\n-            \"env\" => {\n-                for key in value.split(',') {\n-                    if let Some((k, v)) = split1(key, '=') {\n-                        env.insert(k.into(), v.into());\n-                    }\n-                }\n-            }\n-            _ => panic!(\"bad component: {:?}\", component),\n-        }\n-    }\n-\n-    FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n-}\n-\n-/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n-/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n-/// the other lines visually:\n-/// ```\n-/// let fixture = \"//- /lib.rs\n-///                mod foo;\n-///                //- /foo.rs\n-///                fn bar() {}\n-/// \";\n-/// assert_eq!(fixture_margin(fixture),\n-/// \"               //- /lib.rs\n-///                mod foo;\n-///                //- /foo.rs\n-///                fn bar() {}\n-/// \")\n-/// ```\n-fn indent_first_line(fixture: &str) -> String {\n-    if fixture.is_empty() {\n-        return String::new();\n-    }\n-    let mut lines = fixture.lines();\n-    let first_line = lines.next().unwrap();\n-    if first_line.contains(\"//-\") {\n-        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n-        let fixed_margin = fixture_margin(&rest);\n-        let fixed_indent = fixed_margin - indent_len(first_line);\n-        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n-    } else {\n-        fixture.to_owned()\n-    }\n-}\n-\n-fn fixture_margin(fixture: &str) -> usize {\n-    fixture\n-        .lines()\n-        .filter(|it| it.trim_start().starts_with(\"//-\"))\n-        .map(indent_len)\n-        .next()\n-        .expect(\"empty fixture\")\n-}\n-\n-fn indent_len(s: &str) -> usize {\n-    s.len() - s.trim_start().len()\n-}\n-\n-#[test]\n-#[should_panic]\n-fn parse_fixture_checks_further_indented_metadata() {\n-    parse_fixture(\n-        r\"\n-        //- /lib.rs\n-          mod bar;\n-\n-          fn foo() {}\n-          //- /bar.rs\n-          pub fn baz() {}\n-          \",\n-    );\n-}\n-\n-#[test]\n-fn parse_fixture_can_handle_dedented_first_line() {\n-    let fixture = \"//- /lib.rs\n-                   mod foo;\n-                   //- /foo.rs\n-                   struct Bar;\n-\";\n-    assert_eq!(\n-        parse_fixture(fixture),\n-        parse_fixture(\n-            \"//- /lib.rs\n-mod foo;\n-//- /foo.rs\n-struct Bar;\n-\"\n-        )\n-    )\n-}\n-\n-#[test]\n-fn parse_fixture_gets_full_meta() {\n-    let parsed = parse_fixture(\n-        r\"\n-    //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n-    mod m;\n-    \",\n-    );\n-    assert_eq!(1, parsed.len());\n-\n-    let parsed = &parsed[0];\n-    assert_eq!(\"mod m;\\n\\n\", parsed.text);\n-\n-    let meta = &parsed.meta;\n-    assert_eq!(\"foo\", meta.crate_name().unwrap());\n-    assert_eq!(\"/lib.rs\", meta.path());\n-    assert!(meta.cfg_options().is_some());\n-    assert_eq!(2, meta.env().count());\n-}\n-\n-/// Same as `parse_fixture`, except it allow empty fixture\n-pub fn parse_single_fixture(ra_fixture: &str) -> Option<FixtureEntry> {\n-    if !ra_fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n-        return None;\n-    }\n-\n-    let fixtures = parse_fixture(ra_fixture);\n-    if fixtures.len() > 1 {\n-        panic!(\"too many fixtures\");\n-    }\n-    fixtures.into_iter().nth(0)\n-}\n-\n // Comparison functionality borrowed from cargo:\n \n /// Compare a line with an expected pattern."}]}