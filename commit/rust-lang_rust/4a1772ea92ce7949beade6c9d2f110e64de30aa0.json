{"sha": "4a1772ea92ce7949beade6c9d2f110e64de30aa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMTc3MmVhOTJjZTc5NDliZWFkZTZjOWQyZjExMGU2NGRlMzBhYTA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-04-13T14:16:43Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-17T16:38:19Z"}, "message": "Factor the code that generates TyErrs", "tree": {"sha": "6500b577c1cfb15594bb6ffc71bd61a96915f6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6500b577c1cfb15594bb6ffc71bd61a96915f6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1772ea92ce7949beade6c9d2f110e64de30aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1772ea92ce7949beade6c9d2f110e64de30aa0", "html_url": "https://github.com/rust-lang/rust/commit/4a1772ea92ce7949beade6c9d2f110e64de30aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1772ea92ce7949beade6c9d2f110e64de30aa0/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65d49d33860befebb3c5b2a13907983d57929a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65d49d33860befebb3c5b2a13907983d57929a3", "html_url": "https://github.com/rust-lang/rust/commit/e65d49d33860befebb3c5b2a13907983d57929a3"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "4bc6166041e83577c0072ac58860ea345f9bef7f", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a1772ea92ce7949beade6c9d2f110e64de30aa0/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1772ea92ce7949beade6c9d2f110e64de30aa0/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=4a1772ea92ce7949beade6c9d2f110e64de30aa0", "patch": "@@ -877,36 +877,37 @@ impl<'tcx> Constructor<'tcx> {\n                             .fields\n                             .iter()\n                             .map(|field| {\n+                                let ty = field.ty(cx.tcx, substs);\n                                 let is_visible = adt.is_enum()\n                                     || field.vis.is_accessible_from(cx.module, cx.tcx);\n-                                let is_uninhabited = cx.is_uninhabited(field.ty(cx.tcx, substs));\n-                                match (is_visible, is_non_exhaustive, is_uninhabited) {\n-                                    // Treat all uninhabited types in non-exhaustive variants as\n-                                    // `TyErr`.\n-                                    (_, true, true) => cx.tcx.types.err,\n-                                    // Treat all non-visible fields as `TyErr`. They can't appear\n-                                    // in any other pattern from this match (because they are\n-                                    // private), so their type does not matter - but we don't want\n-                                    // to know they are uninhabited.\n-                                    (false, ..) => cx.tcx.types.err,\n-                                    (true, ..) => {\n-                                        let ty = field.ty(cx.tcx, substs);\n-                                        match ty.kind {\n-                                            // If the field type returned is an array of an unknown\n-                                            // size return an TyErr.\n-                                            ty::Array(_, len)\n-                                                if len\n+                                let is_uninhabited = cx.is_uninhabited(ty);\n+                                // Treat all non-visible fields as `TyErr`. They can't appear\n+                                // in any other pattern from this match (because they are\n+                                // private), so their type does not matter - but we don't want\n+                                // to know they are uninhabited.\n+                                let allowed_to_inspect = is_visible\n+                                    && match (is_non_exhaustive, is_uninhabited) {\n+                                        // Treat all uninhabited types in non-exhaustive variants as\n+                                        // `TyErr`.\n+                                        (true, true) => false,\n+                                        (_, _) => {\n+                                            match ty.kind {\n+                                                // If the field type returned is an array of an unknown\n+                                                // size return an TyErr.\n+                                                ty::Array(_, len) => len\n                                                     .try_eval_usize(cx.tcx, cx.param_env)\n-                                                    .is_none() =>\n-                                            {\n-                                                cx.tcx.types.err\n+                                                    .is_some(),\n+                                                _ => true,\n                                             }\n-                                            _ => ty,\n                                         }\n-                                    }\n+                                    };\n+\n+                                if allowed_to_inspect {\n+                                    Pat::wildcard_from_ty(ty)\n+                                } else {\n+                                    Pat::wildcard_from_ty(cx.tcx.types.err)\n                                 }\n                             })\n-                            .map(Pat::wildcard_from_ty)\n                             .collect()\n                     }\n                 }"}]}