{"sha": "a0f45f4456de5e9811d80b20df243d7078c45918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjQ1ZjQ0NTZkZTVlOTgxMWQ4MGIyMGRmMjQzZDcwNzhjNDU5MTg=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-06T19:48:43Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T01:22:27Z"}, "message": "Removing most of the locks in rust_upcall.cpp and elsewhere.", "tree": {"sha": "a19f9015bec2914413a3fe98bbdcaea0511ded28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19f9015bec2914413a3fe98bbdcaea0511ded28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f45f4456de5e9811d80b20df243d7078c45918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f45f4456de5e9811d80b20df243d7078c45918", "html_url": "https://github.com/rust-lang/rust/commit/a0f45f4456de5e9811d80b20df243d7078c45918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f45f4456de5e9811d80b20df243d7078c45918/comments", "author": null, "committer": null, "parents": [{"sha": "e7111fe1473733e78775e280c0e597a2897d4411", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7111fe1473733e78775e280c0e597a2897d4411", "html_url": "https://github.com/rust-lang/rust/commit/e7111fe1473733e78775e280c0e597a2897d4411"}], "stats": {"total": 121, "additions": 46, "deletions": 75}, "files": [{"sha": "32e12e7105825bdeb9785b1acf043dd0d405dc2f", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a0f45f4456de5e9811d80b20df243d7078c45918", "patch": "@@ -392,17 +392,12 @@ task_yield(rust_task *task) {\n \n extern \"C\" CDECL void\n task_join(rust_task *task, rust_task *join_task) {\n-    task->kernel->scheduler_lock.lock();\n     // If the other task is already dying, we don't have to wait for it.\n     if (join_task->dead() == false) {\n         join_task->tasks_waiting_to_join.push(task);\n         task->block(join_task, \"joining local task\");\n-        task->kernel->scheduler_lock.unlock();\n         task->yield(2);\n     }\n-    else {\n-        task->kernel->scheduler_lock.unlock();\n-    }\n }\n \n /* Debug builtins for std.dbg. */"}, {"sha": "8bdfcd7a06470c7079fac8433f1770cd55d79cc1", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=a0f45f4456de5e9811d80b20df243d7078c45918", "patch": "@@ -54,7 +54,7 @@ rust_srv::fatal(const char *expression,\n              \"fatal, '%s' failed, %s:%d %s\",\n              expression, file, (int)line, buf);\n     log(msg);\n-    exit(1);\n+    abort();\n }\n \n void"}, {"sha": "0ca34e0985dbbf60bfb161199d030ce6fd9adfea", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=a0f45f4456de5e9811d80b20df243d7078c45918", "patch": "@@ -120,21 +120,12 @@ void task_start_wrapper(spawn_args *a)\n \n     LOG(task, task, \"task exited with value %d\", rval);\n \n-    {\n-        scoped_lock with(task->kernel->scheduler_lock);\n+    LOG(task, task, \"task ref_count: %d\", task->ref_count);\n+    A(task->sched, task->ref_count >= 0,\n+      \"Task ref_count should not be negative on exit!\");\n+    task->die();\n+    task->notify_tasks_waiting_to_join();\n \n-        // FIXME: the old exit glue does some magical argument copying\n-        // stuff. This is probably still needed.\n-\n-        // This is duplicated from upcall_exit, which is probably dead code by\n-        // now.\n-        LOG(task, task, \"task ref_count: %d\", task->ref_count);\n-        A(task->sched, task->ref_count >= 0,\n-          \"Task ref_count should not be negative on exit!\");\n-        task->die();\n-        task->notify_tasks_waiting_to_join();\n-\n-    }\n     task->yield(1);\n }\n \n@@ -145,10 +136,7 @@ rust_task::start(uintptr_t spawnee_fn,\n     LOGPTR(sched, \"from spawnee\", spawnee_fn);\n \n     I(sched, stk->data != NULL);\n-    I(sched, !kernel->scheduler_lock.lock_held_by_current_thread());\n     \n-    scoped_lock with(kernel->scheduler_lock);\n-\n     char *sp = (char *)rust_sp;\n \n     sp -= sizeof(spawn_args);\n@@ -399,7 +387,8 @@ rust_task::free(void *p, bool is_gc)\n \n void\n rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n-    I(sched, kernel->scheduler_lock.lock_held_by_current_thread());\n+    I(sched, !kernel->scheduler_lock.lock_held_by_current_thread());\n+    scoped_lock with(kernel->scheduler_lock);\n     DLOG(sched, task,\n          \"task %s \" PTR \" state change '%s' -> '%s' while in '%s'\",\n          name, (uintptr_t)this, src->name, dst->name, state->name);"}, {"sha": "d89b278790b8e090b4dd43ec4af81d44954ea6af", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 38, "deletions": 51, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a0f45f4456de5e9811d80b20df243d7078c45918/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a0f45f4456de5e9811d80b20df243d7078c45918", "patch": "@@ -90,7 +90,6 @@ upcall_trace_str(rust_task *task, char const *c) {\n extern \"C\" CDECL rust_port*\n upcall_new_port(rust_task *task, size_t unit_sz) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n     LOG(task, comm, \"upcall_new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n     return new (task) rust_port(task, unit_sz);\n@@ -99,7 +98,6 @@ upcall_new_port(rust_task *task, size_t unit_sz) {\n extern \"C\" CDECL void\n upcall_del_port(rust_task *task, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n     LOG(task, comm, \"upcall del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n     I(task->sched, !port->ref_count);\n     delete port;\n@@ -139,7 +137,6 @@ upcall_flush_chan(rust_task *task, rust_chan *chan) {\n extern \"C\" CDECL\n void upcall_del_chan(rust_task *task, rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n \n     LOG(task, comm, \"upcall del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n     chan->destroy();\n@@ -153,7 +150,6 @@ extern \"C\" CDECL rust_chan *\n upcall_clone_chan(rust_task *task, maybe_proxy<rust_task> *target,\n                   rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n     return chan->clone(target);\n }\n \n@@ -181,34 +177,31 @@ upcall_sleep(rust_task *task, size_t time_in_us) {\n extern \"C\" CDECL void\n upcall_send(rust_task *task, rust_chan *chan, void *sptr) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n     chan->send(sptr);\n     LOG(task, comm, \"=== sent data ===>\");\n }\n \n extern \"C\" CDECL void\n upcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n-    {\n-        LOG_UPCALL_ENTRY(task);\n-        scoped_lock with(task->kernel->scheduler_lock);\n-\n-        LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n-            \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n-            (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n-            port->chans.length());\n-\n-        if (port->receive(dptr)) {\n-            return;\n-        }\n-\n-        // No data was buffered on any incoming channel, so block this task\n-        // on the port. Remember the rendezvous location so that any sender\n-        // task can write to it before waking up this task.\n-\n-        LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n-        task->rendezvous_ptr = dptr;\n-        task->block(port, \"waiting for rendezvous data\");\n+    LOG_UPCALL_ENTRY(task);\n+    \n+    LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n+        \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n+        (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n+        port->chans.length());\n+    \n+    if (port->receive(dptr)) {\n+        return;\n     }\n+    \n+    // No data was buffered on any incoming channel, so block this task on the\n+    // port. Remember the rendezvous location so that any sender task can\n+    // write to it before waking up this task.\n+    \n+    LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n+    task->rendezvous_ptr = dptr;\n+    task->block(port, \"waiting for rendezvous data\");\n+\n     task->yield(3);\n }\n \n@@ -228,7 +221,7 @@ upcall_fail(rust_task *task,\n extern \"C\" CDECL void\n upcall_kill(rust_task *task, maybe_proxy<rust_task> *target) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+\n     if (target->is_proxy()) {\n         notify_message::\n         send(notify_message::KILL, \"kill\", task->get_handle(),\n@@ -245,33 +238,31 @@ upcall_kill(rust_task *task, maybe_proxy<rust_task> *target) {\n  */\n extern \"C\" CDECL void\n upcall_exit(rust_task *task) {\n-    {\n-        LOG_UPCALL_ENTRY(task);\n-        scoped_lock with(task->kernel->scheduler_lock);\n-        LOG(task, task, \"task ref_count: %d\", task->ref_count);\n-        A(task->sched, task->ref_count >= 0,\n-          \"Task ref_count should not be negative on exit!\");\n-        task->die();\n-        task->notify_tasks_waiting_to_join();\n-    }\n+    LOG_UPCALL_ENTRY(task);\n+    LOG(task, task, \"task ref_count: %d\", task->ref_count);\n+    A(task->sched, task->ref_count >= 0,\n+      \"Task ref_count should not be negative on exit!\");\n+    task->die();\n+    task->notify_tasks_waiting_to_join();\n     task->yield(1);\n }\n \n extern \"C\" CDECL uintptr_t\n upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n \n     LOG(task, mem,\n-                   \"upcall malloc(%\" PRIdPTR \", 0x%\" PRIxPTR \")\"\n-                   \" with gc-chain head = 0x%\" PRIxPTR,\n-                   nbytes, td, task->gc_alloc_chain);\n+        \"upcall malloc(%\" PRIdPTR \", 0x%\" PRIxPTR \")\"\n+        \" with gc-chain head = 0x%\" PRIxPTR,\n+        nbytes, td, task->gc_alloc_chain);\n+\n     void *p = task->malloc(nbytes, td);\n+\n     LOG(task, mem,\n-                   \"upcall malloc(%\" PRIdPTR \", 0x%\" PRIxPTR\n-                   \") = 0x%\" PRIxPTR\n-                   \" with gc-chain head = 0x%\" PRIxPTR,\n-                   nbytes, td, (uintptr_t)p, task->gc_alloc_chain);\n+        \"upcall malloc(%\" PRIdPTR \", 0x%\" PRIxPTR\n+        \") = 0x%\" PRIxPTR\n+        \" with gc-chain head = 0x%\" PRIxPTR,\n+        nbytes, td, (uintptr_t)p, task->gc_alloc_chain);\n     return (uintptr_t) p;\n }\n \n@@ -281,7 +272,7 @@ upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n extern \"C\" CDECL void\n upcall_free(rust_task *task, void* ptr, uintptr_t is_gc) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+\n     rust_scheduler *sched = task->sched;\n     DLOG(sched, mem,\n              \"upcall free(0x%\" PRIxPTR \", is_gc=%\" PRIdPTR \")\",\n@@ -322,7 +313,6 @@ upcall_shared_free(rust_task *task, void* ptr) {\n extern \"C\" CDECL uintptr_t\n upcall_mark(rust_task *task, void* ptr) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n \n     rust_scheduler *sched = task->sched;\n     if (ptr) {\n@@ -354,23 +344,21 @@ rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n extern \"C\" CDECL rust_str *\n upcall_new_str(rust_task *task, char const *s, size_t fill) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n     \n     return make_str(task, s, fill);\n }\n \n extern \"C\" CDECL rust_str *\n upcall_dup_str(rust_task *task, rust_task *target, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n \n     return make_str(target, (char const *)str->data, str->fill);\n }\n \n extern \"C\" CDECL rust_vec *\n upcall_new_vec(rust_task *task, size_t fill, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+\n     rust_scheduler *sched = task->sched;\n     DLOG(sched, mem, \"upcall new_vec(%\" PRIdPTR \")\", fill);\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + fill);\n@@ -511,7 +499,7 @@ upcall_get_type_desc(rust_task *task,\n                      type_desc const **descs) {\n     check_stack(task);\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+\n     LOG(task, cache, \"upcall get_type_desc with size=%\" PRIdPTR\n         \", align=%\" PRIdPTR \", %\" PRIdPTR \" descs\", size, align,\n         n_descs);\n@@ -568,7 +556,7 @@ upcall_ivec_resize(rust_task *task,\n                    rust_ivec *v,\n                    size_t newsz) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n+\n     I(task->sched, !v->fill);\n \n     size_t new_alloc = next_power_of_two(newsz);\n@@ -588,7 +576,6 @@ upcall_ivec_spill(rust_task *task,\n                   rust_ivec *v,\n                   size_t newsz) {\n     LOG_UPCALL_ENTRY(task);\n-    scoped_lock with(task->kernel->scheduler_lock);\n     size_t new_alloc = next_power_of_two(newsz);\n \n     rust_ivec_heap *heap_part = (rust_ivec_heap *)"}]}