{"sha": "ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDdiZDhhMGY2ZjUyODRhOGY5MzdmNWNkOGEwYTdlM2RmOTY5OTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T14:37:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:57:57Z"}, "message": "Extend ParameterEnvironment to remember the free_id, and to be usable\non more kind of items", "tree": {"sha": "08fe52bdcdee4946cff232ae64c5751d1f8fc337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08fe52bdcdee4946cff232ae64c5751d1f8fc337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991", "html_url": "https://github.com/rust-lang/rust/commit/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1963154a10fd22d16a5eddd751046cc897e909c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1963154a10fd22d16a5eddd751046cc897e909c", "html_url": "https://github.com/rust-lang/rust/commit/b1963154a10fd22d16a5eddd751046cc897e909c"}], "stats": {"total": 104, "additions": 67, "deletions": 37}, "files": [{"sha": "9ccfce8d3049f4ceb49269409501fac395c0cd62", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 66, "deletions": 37, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991", "patch": "@@ -2833,6 +2833,15 @@ pub struct ParameterEnvironment<'a, 'tcx:'a> {\n     /// Caches the results of trait selection. This cache is used\n     /// for things that have to do with the parameters in scope.\n     pub selection_cache: traits::SelectionCache<'tcx>,\n+\n+    /// Scope that is attached to free regions for this scope. This\n+    /// is usually the id of the fn body, but for more abstract scopes\n+    /// like structs we often use the node-id of the struct.\n+    ///\n+    /// FIXME(#3696). It would be nice to refactor so that free\n+    /// regions don't have this implicit scope and instead introduce\n+    /// relationships in the environment.\n+    pub free_id: ast::NodeId,\n }\n \n impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n@@ -2846,13 +2855,26 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n             implicit_region_bound: self.implicit_region_bound,\n             caller_bounds: caller_bounds,\n             selection_cache: traits::SelectionCache::new(),\n+            free_id: self.free_id,\n         }\n     }\n \n     pub fn for_item(cx: &'a ctxt<'tcx>, id: NodeId) -> ParameterEnvironment<'a, 'tcx> {\n         match cx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n+                    ast::TypeImplItem(_) => {\n+                        // associated types don't have their own entry (for some reason),\n+                        // so for now just grab environment for the impl\n+                        let impl_id = cx.map.get_parent(id);\n+                        let impl_def_id = ast_util::local_def(impl_id);\n+                        let scheme = cx.lookup_item_type(impl_def_id);\n+                        let predicates = cx.lookup_predicates(impl_def_id);\n+                        cx.construct_parameter_environment(impl_item.span,\n+                                                           &scheme.generics,\n+                                                           &predicates,\n+                                                           id)\n+                    }\n                     ast::ConstImplItem(_, _) => {\n                         let def_id = ast_util::local_def(id);\n                         let scheme = cx.lookup_item_type(def_id);\n@@ -2881,42 +2903,37 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    ast::TypeImplItem(_) => {\n-                        cx.sess.bug(\"ParameterEnvironment::for_item(): \\\n-                                     can't create a parameter environment \\\n-                                     for type impl items\")\n-                    }\n                     ast::MacImplItem(_) => cx.sess.bug(\"unexpanded macro\")\n                 }\n             }\n             Some(ast_map::NodeTraitItem(trait_item)) => {\n                 match trait_item.node {\n-                    ast::ConstTraitItem(_, ref default) => {\n-                        match *default {\n-                            Some(_) => {\n-                                let def_id = ast_util::local_def(id);\n-                                let scheme = cx.lookup_item_type(def_id);\n-                                let predicates = cx.lookup_predicates(def_id);\n-                                cx.construct_parameter_environment(trait_item.span,\n-                                                                   &scheme.generics,\n-                                                                   &predicates,\n-                                                                   id)\n-                            }\n-                            None => {\n-                                cx.sess.bug(\"ParameterEnvironment::from_item(): \\\n-                                             can't create a parameter environment \\\n-                                             for const trait items without defaults\")\n-                            }\n-                        }\n+                    ast::TypeTraitItem(..) => {\n+                        // associated types don't have their own entry (for some reason),\n+                        // so for now just grab environment for the trait\n+                        let trait_id = cx.map.get_parent(id);\n+                        let trait_def_id = ast_util::local_def(trait_id);\n+                        let trait_def = cx.lookup_trait_def(trait_def_id);\n+                        let predicates = cx.lookup_predicates(trait_def_id);\n+                        cx.construct_parameter_environment(trait_item.span,\n+                                                           &trait_def.generics,\n+                                                           &predicates,\n+                                                           id)\n                     }\n-                    ast::MethodTraitItem(_, None) => {\n-                        cx.sess.span_bug(trait_item.span,\n-                                         \"ParameterEnvironment::for_item():\n-                                          can't create a parameter \\\n-                                          environment for required trait \\\n-                                          methods\")\n+                    ast::ConstTraitItem(..) => {\n+                        let def_id = ast_util::local_def(id);\n+                        let scheme = cx.lookup_item_type(def_id);\n+                        let predicates = cx.lookup_predicates(def_id);\n+                        cx.construct_parameter_environment(trait_item.span,\n+                                                           &scheme.generics,\n+                                                           &predicates,\n+                                                           id)\n                     }\n-                    ast::MethodTraitItem(_, Some(ref body)) => {\n+                    ast::MethodTraitItem(_, ref body) => {\n+                        // for the body-id, use the id of the body\n+                        // block, unless this is a trait method with\n+                        // no default, then fallback to the method id.\n+                        let body_id = body.as_ref().map(|b| b.id).unwrap_or(id);\n                         let method_def_id = ast_util::local_def(id);\n                         match cx.impl_or_trait_item(method_def_id) {\n                             MethodTraitItem(ref method_ty) => {\n@@ -2926,7 +2943,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                     trait_item.span,\n                                     method_generics,\n                                     method_bounds,\n-                                    body.id)\n+                                    body_id)\n                             }\n                             _ => {\n                                 cx.sess\n@@ -2936,11 +2953,6 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    ast::TypeTraitItem(..) => {\n-                        cx.sess.bug(\"ParameterEnvironment::from_item(): \\\n-                                     can't create a parameter environment \\\n-                                     for type trait items\")\n-                    }\n                 }\n             }\n             Some(ast_map::NodeItem(item)) => {\n@@ -2969,6 +2981,15 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                                            &predicates,\n                                                            id)\n                     }\n+                    ast::ItemTrait(..) => {\n+                        let def_id = ast_util::local_def(id);\n+                        let trait_def = cx.lookup_trait_def(def_id);\n+                        let predicates = cx.lookup_predicates(def_id);\n+                        cx.construct_parameter_environment(item.span,\n+                                                           &trait_def.generics,\n+                                                           &predicates,\n+                                                           id)\n+                    }\n                     _ => {\n                         cx.sess.span_bug(item.span,\n                                          \"ParameterEnvironment::from_item():\n@@ -6587,12 +6608,19 @@ impl<'tcx> ctxt<'tcx> {\n \n     /// Construct a parameter environment suitable for static contexts or other contexts where there\n     /// are no free type/lifetime parameters in scope.\n-    pub fn empty_parameter_environment<'a>(&'a self) -> ParameterEnvironment<'a,'tcx> {\n+    pub fn empty_parameter_environment<'a>(&'a self)\n+                                           -> ParameterEnvironment<'a,'tcx> {\n         ty::ParameterEnvironment { tcx: self,\n                                    free_substs: Substs::empty(),\n                                    caller_bounds: Vec::new(),\n                                    implicit_region_bound: ty::ReEmpty,\n-                                   selection_cache: traits::SelectionCache::new(), }\n+                                   selection_cache: traits::SelectionCache::new(),\n+\n+                                   // for an empty parameter\n+                                   // environment, there ARE no free\n+                                   // regions, so it shouldn't matter\n+                                   // what we use for the free id\n+                                   free_id: ast::DUMMY_NODE_ID }\n     }\n \n     /// Constructs and returns a substitution that can be applied to move from\n@@ -6676,6 +6704,7 @@ impl<'tcx> ctxt<'tcx> {\n             implicit_region_bound: ty::ReScope(free_id_outlive.to_code_extent()),\n             caller_bounds: predicates,\n             selection_cache: traits::SelectionCache::new(),\n+            free_id: free_id,\n         };\n \n         let cause = traits::ObligationCause::misc(span, free_id);"}, {"sha": "09c50804e836bc6f92734c8e21ee8a4a3392c572", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=ad47bd8a0f6f5284a8f937f5cd8a0a7e3df96991", "patch": "@@ -547,6 +547,7 @@ impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where '\n             implicit_region_bound: self.implicit_region_bound.fold_with(folder),\n             caller_bounds: self.caller_bounds.fold_with(folder),\n             selection_cache: traits::SelectionCache::new(),\n+            free_id: self.free_id,\n         }\n     }\n }"}]}