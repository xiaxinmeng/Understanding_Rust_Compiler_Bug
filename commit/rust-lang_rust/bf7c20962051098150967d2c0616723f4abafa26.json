{"sha": "bf7c20962051098150967d2c0616723f4abafa26", "node_id": "C_kwDOAAsO6NoAKGJmN2MyMDk2MjA1MTA5ODE1MDk2N2QyYzA2MTY3MjNmNGFiYWZhMjY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-21T16:01:00Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-22T03:05:38Z"}, "message": "Update readme description of `restriction` lints to dissuade casual use.", "tree": {"sha": "52ee6c0b575a2fb5d5f9e8e5bcb5a500e1721a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ee6c0b575a2fb5d5f9e8e5bcb5a500e1721a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7c20962051098150967d2c0616723f4abafa26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7c20962051098150967d2c0616723f4abafa26", "html_url": "https://github.com/rust-lang/rust/commit/bf7c20962051098150967d2c0616723f4abafa26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7c20962051098150967d2c0616723f4abafa26/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef3cc8ca1af8df6421adf2e600b774c8e055589", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef3cc8ca1af8df6421adf2e600b774c8e055589", "html_url": "https://github.com/rust-lang/rust/commit/5ef3cc8ca1af8df6421adf2e600b774c8e055589"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "3e7379ace7ea5726d02b5b2f4d692359a9659e8b", "filename": "README.md", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bf7c20962051098150967d2c0616723f4abafa26/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf7c20962051098150967d2c0616723f4abafa26/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bf7c20962051098150967d2c0616723f4abafa26", "patch": "@@ -19,21 +19,35 @@ You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the\n | `clippy::complexity`  | code that does something simple but in a complex way                                | **warn**      |\n | `clippy::perf`        | code that can be written to run faster                                              | **warn**      |\n | `clippy::pedantic`    | lints which are rather strict or have occasional false positives                    | allow         |\n+| `clippy::restriction` | lints which prevent the use of language and library features[^restrict]             | allow         |\n | `clippy::nursery`     | new lints that are still under development                                          | allow         |\n | `clippy::cargo`       | lints for the cargo manifest                                                        | allow         |\n \n More to come, please [file an issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n \n-The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also contains \"restriction lints\", which are\n-for things which are usually not considered \"bad\", but may be useful to turn on in specific cases. These should be used\n-very selectively, if at all.\n+The `restriction` category should, *emphatically*, not be enabled as a whole. The contained\n+lints may lint against perfectly reasonable code, may not have an alternative suggestion,\n+and may contradict any other lints (including other categories). Lints should be considered\n+on a case-by-case basis before enabling.\n+\n+[^restrict]: Some use cases for `restriction` lints include:\n+    - Strict coding styles (e.g. [`clippy::else_if_without_else`]).\n+    - Additional restrictions on CI (e.g. [`clippy::todo`]).\n+    - Preventing panicking in certain functions (e.g. [`clippy::unwrap_used`]).\n+    - Running a lint only on a subset of code (e.g. `#[forbid(clippy::float_arithmetic)]` on a module).\n+\n+[`clippy::else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n+[`clippy::todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n+[`clippy::unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n+\n+---\n \n Table of contents:\n \n-*   [Usage instructions](#usage)\n-*   [Configuration](#configuration)\n-*   [Contributing](#contributing)\n-*   [License](#license)\n+* [Usage instructions](#usage)\n+* [Configuration](#configuration)\n+* [Contributing](#contributing)\n+* [License](#license)\n \n ## Usage\n \n@@ -64,6 +78,7 @@ Once you have rustup and the latest stable release (at least Rust 1.29) installe\n ```terminal\n rustup component add clippy\n ```\n+\n If it says that it can't find the `clippy` component, please run `rustup self update`.\n \n #### Step 3: Run Clippy\n@@ -143,16 +158,16 @@ line. (You can swap `clippy::all` with the specific lint category you are target\n \n You can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n \n-*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`).\n+* the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`).\n     Note that `rustc` has additional [lint groups](https://doc.rust-lang.org/rustc/lints/groups.html).\n \n-*   all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n+* all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n     `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive\n     lints prone to false positives.\n \n-*   only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n+* only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n \n-*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n+* `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n \n Note: `allow` means to suppress the lint for your code. With `warn` the lint\n will only emit a warning, while with `deny` the lint will emit an error, when\n@@ -176,12 +191,14 @@ cargo clippy -- -W clippy::lint_name\n \n This also works with lint groups. For example, you\n can run Clippy with warnings for all lints enabled:\n+\n ```terminal\n cargo clippy -- -W clippy::pedantic\n ```\n \n If you care only about a single lint, you can allow all others and then explicitly warn on\n the lint(s) you are interested in:\n+\n ```terminal\n cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```"}]}