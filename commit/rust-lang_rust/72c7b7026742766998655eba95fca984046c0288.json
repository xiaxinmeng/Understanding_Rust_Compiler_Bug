{"sha": "72c7b7026742766998655eba95fca984046c0288", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYzdiNzAyNjc0Mjc2Njk5ODY1NWViYTk1ZmNhOTg0MDQ2YzAyODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-24T09:44:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-24T09:44:42Z"}, "message": "Auto merge of #80838 - nagisa:nagisa/stack-probe-type, r=cuviper\n\nTarget stack-probe support configurable finely\n\nThis adds capability to configure the target's stack probe support in a\nmore precise manner than just on/off. In particular now we allow\nchoosing between always inline-asm, always call or either one of those\ndepending on the LLVM version.\n\nNote that this removes the ability to turn off the generation of the\nstack-probe attribute. This is valid to replace it with inline-asm for all targets because\n`probe-stack=\"inline-asm\"` will not generate any machine code on targets\nthat do not currently support stack probes. This makes support for stack\nprobes on targets that don't have any right now automatic with LLVM\nupgrades in the future.\n\n(This is valid to do based on the fact that clang unconditionally sets\nthis attribute when `-fstack-clash-protection` is used, AFAICT)\n\ncc #77885\nr? `@cuviper`", "tree": {"sha": "b4db5647443415c6ac6793234aaf00df5b26df17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4db5647443415c6ac6793234aaf00df5b26df17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72c7b7026742766998655eba95fca984046c0288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72c7b7026742766998655eba95fca984046c0288", "html_url": "https://github.com/rust-lang/rust/commit/72c7b7026742766998655eba95fca984046c0288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72c7b7026742766998655eba95fca984046c0288/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e355ea9bd86ac6580a5d422a65dbf689845808", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e355ea9bd86ac6580a5d422a65dbf689845808", "html_url": "https://github.com/rust-lang/rust/commit/85e355ea9bd86ac6580a5d422a65dbf689845808"}, {"sha": "1b15ec656b992fd991abad35b14c9e8ecb089132", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b15ec656b992fd991abad35b14c9e8ecb089132", "html_url": "https://github.com/rust-lang/rust/commit/1b15ec656b992fd991abad35b14c9e8ecb089132"}], "stats": {"total": 292, "additions": 205, "deletions": 87}, "files": [{"sha": "a78d692aaa7fb52bcb2456578ab93274d8e84747", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, SanitizerSet};\n use rustc_session::Session;\n+use rustc_target::spec::StackProbeType;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n@@ -98,12 +99,6 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n }\n \n fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n-    // Only use stack probes if the target specification indicates that we\n-    // should be using stack probes\n-    if !cx.sess().target.stack_probes {\n-        return;\n-    }\n-\n     // Currently stack probes seem somewhat incompatible with the address\n     // sanitizer and thread sanitizer. With asan we're already protected from\n     // stack overflow anyway so we don't really need stack probes regardless.\n@@ -127,19 +122,31 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         return;\n     }\n \n-    llvm::AddFunctionAttrStringValue(\n-        llfn,\n-        llvm::AttributePlace::Function,\n-        const_cstr!(\"probe-stack\"),\n-        if llvm_util::get_version() < (11, 0, 1) {\n-            // Flag our internal `__rust_probestack` function as the stack probe symbol.\n-            // This is defined in the `compiler-builtins` crate for each architecture.\n-            const_cstr!(\"__rust_probestack\")\n-        } else {\n-            // On LLVM 11+, emit inline asm for stack probes instead of a function call.\n-            const_cstr!(\"inline-asm\")\n-        },\n-    );\n+    let attr_value = match cx.sess().target.stack_probes {\n+        StackProbeType::None => None,\n+        // Request LLVM to generate the probes inline. If the given LLVM version does not support\n+        // this, no probe is generated at all (even if the attribute is specified).\n+        StackProbeType::Inline => Some(const_cstr!(\"inline-asm\")),\n+        // Flag our internal `__rust_probestack` function as the stack probe symbol.\n+        // This is defined in the `compiler-builtins` crate for each architecture.\n+        StackProbeType::Call => Some(const_cstr!(\"__rust_probestack\")),\n+        // Pick from the two above based on the LLVM version.\n+        StackProbeType::InlineOrCall { min_llvm_version_for_inline } => {\n+            if llvm_util::get_version() < min_llvm_version_for_inline {\n+                Some(const_cstr!(\"__rust_probestack\"))\n+            } else {\n+                Some(const_cstr!(\"inline-asm\"))\n+            }\n+        }\n+    };\n+    if let Some(attr_value) = attr_value {\n+        llvm::AddFunctionAttrStringValue(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            const_cstr!(\"probe-stack\"),\n+            attr_value,\n+        );\n+    }\n }\n \n pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {"}, {"sha": "cfaf020175b7f4e12bc479bfd6b36843bfedd028", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::I386);\n@@ -10,6 +10,10 @@ pub fn target() -> Target {\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            ..base\n+        },\n     }\n }"}, {"sha": "2d3310c7582eff4dd1fdde208474cecfe6618555", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.eliminate_frame_pointer = false;\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "18cd8847abd390e5650304561720f8f5207fe940", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n // See https://developer.android.com/ndk/guides/abis.html#x86\n // for target ABI requirements.\n@@ -11,7 +11,7 @@ pub fn target() -> Target {\n     // http://developer.android.com/ndk/guides/abis.html#x86\n     base.cpu = \"pentiumpro\".to_string();\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-linux-android\".to_string(),"}, {"sha": "fc425babb69484e1fb80238aa83fb1ec618a3861", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n@@ -7,7 +7,7 @@ pub fn target() -> Target {\n     let pre_link_args = base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n     pre_link_args.push(\"-m32\".to_string());\n     pre_link_args.push(\"-Wl,-znotext\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),"}, {"sha": "5fba4e3f14a253c6100664c94debd98cc87d992f", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-unknown-haiku\".to_string(),"}, {"sha": "fe1e6a4299daba3290d9d7835e89ebb091908114", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),"}, {"sha": "623fd1b9ae801d098b40d8b8d6287b5e08df39ac", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-melf_i386\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind\n     // implementation, apparently relies on frame pointers existing... somehow."}, {"sha": "c4d11bfb13ece496999e9151256ef35f61a127d9", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-unknown-netbsdelf\".to_string(),"}, {"sha": "fdaaf6c741e897944167a9279278960a07b314b1", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,12 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-fuse-ld=lld\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-unknown-openbsd\".to_string(),"}, {"sha": "ec8a2493b4e42434a6e4ff64e53553772bb919e3", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),"}, {"sha": "522015689536715b922fd310aafadae958f497e9", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,6 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, RelroLevel, TargetOptions};\n+use crate::spec::{\n+    LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, RelroLevel, StackProbeType, TargetOptions,\n+};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -11,7 +13,7 @@ pub fn opts() -> TargetOptions {\n         env: \"gnu\".to_string(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n-        stack_probes: true,\n+        stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n         eliminate_frame_pointer: false,\n         linker_is_gnu: true,\n         position_independent_executables: true,"}, {"sha": "90d35efaa25bd36af5f642a9a2cdb125b0a3eab6", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 94, "deletions": 4, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -40,6 +40,7 @@ use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeMap;\n+use std::convert::TryFrom;\n use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n@@ -479,6 +480,83 @@ macro_rules! supported_targets {\n     };\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum StackProbeType {\n+    /// Don't emit any stack probes.\n+    None,\n+    /// It is harmless to use this option even on targets that do not have backend support for\n+    /// stack probes as the failure mode is the same as if no stack-probe option was specified in\n+    /// the first place.\n+    Inline,\n+    /// Call `__rust_probestack` whenever stack needs to be probed.\n+    Call,\n+    /// Use inline option for LLVM versions later than specified in `min_llvm_version_for_inline`\n+    /// and call `__rust_probestack` otherwise.\n+    InlineOrCall { min_llvm_version_for_inline: (u32, u32, u32) },\n+}\n+\n+impl StackProbeType {\n+    fn from_json(json: &Json) -> Result<Self, String> {\n+        let object = json.as_object().ok_or_else(|| \"expected a JSON object\")?;\n+        let kind = object\n+            .get(\"kind\")\n+            .and_then(|o| o.as_string())\n+            .ok_or_else(|| \"expected `kind` to be a string\")?;\n+        match kind {\n+            \"none\" => Ok(StackProbeType::None),\n+            \"inline\" => Ok(StackProbeType::Inline),\n+            \"call\" => Ok(StackProbeType::Call),\n+            \"inline-or-call\" => {\n+                let min_version = object\n+                    .get(\"min-llvm-version-for-inline\")\n+                    .and_then(|o| o.as_array())\n+                    .ok_or_else(|| \"expected `min-llvm-version-for-inline` to be an array\")?;\n+                let mut iter = min_version.into_iter().map(|v| {\n+                    let int = v.as_u64().ok_or_else(\n+                        || \"expected `min-llvm-version-for-inline` values to be integers\",\n+                    )?;\n+                    u32::try_from(int)\n+                        .map_err(|_| \"`min-llvm-version-for-inline` values don't convert to u32\")\n+                });\n+                let min_llvm_version_for_inline = (\n+                    iter.next().unwrap_or(Ok(11))?,\n+                    iter.next().unwrap_or(Ok(0))?,\n+                    iter.next().unwrap_or(Ok(0))?,\n+                );\n+                Ok(StackProbeType::InlineOrCall { min_llvm_version_for_inline })\n+            }\n+            _ => Err(String::from(\n+                \"`kind` expected to be one of `inline-or-none`, `call` or `inline-or-call`\",\n+            )),\n+        }\n+    }\n+}\n+\n+impl ToJson for StackProbeType {\n+    fn to_json(&self) -> Json {\n+        Json::Object(match self {\n+            StackProbeType::None => {\n+                vec![(String::from(\"kind\"), \"none\".to_json())].into_iter().collect()\n+            }\n+            StackProbeType::Inline => {\n+                vec![(String::from(\"kind\"), \"inline\".to_json())].into_iter().collect()\n+            }\n+            StackProbeType::Call => {\n+                vec![(String::from(\"kind\"), \"call\".to_json())].into_iter().collect()\n+            }\n+            StackProbeType::InlineOrCall { min_llvm_version_for_inline } => vec![\n+                (String::from(\"kind\"), \"inline-or-call\".to_json()),\n+                (\n+                    String::from(\"min-llvm-version-for-inline\"),\n+                    min_llvm_version_for_inline.to_json(),\n+                ),\n+            ]\n+            .into_iter()\n+            .collect(),\n+        })\n+    }\n+}\n+\n supported_targets! {\n     (\"x86_64-unknown-linux-gnu\", x86_64_unknown_linux_gnu),\n     (\"x86_64-unknown-linux-gnux32\", x86_64_unknown_linux_gnux32),\n@@ -926,8 +1004,8 @@ pub struct TargetOptions {\n     /// Whether or not crt-static is respected by the compiler (or is a no-op).\n     pub crt_static_respected: bool,\n \n-    /// Whether or not stack probes (__rust_probestack) are enabled\n-    pub stack_probes: bool,\n+    /// The implementation of stack probes to use.\n+    pub stack_probes: StackProbeType,\n \n     /// The minimum alignment for global symbols.\n     pub min_global_align: Option<u64>,\n@@ -1085,7 +1163,7 @@ impl Default for TargetOptions {\n             crt_static_allows_dylibs: false,\n             crt_static_default: false,\n             crt_static_respected: false,\n-            stack_probes: false,\n+            stack_probes: StackProbeType::None,\n             min_global_align: None,\n             default_codegen_units: None,\n             trap_unreachable: true,\n@@ -1361,6 +1439,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, StackProbeType) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| match StackProbeType::from_json(o) {\n+                    Ok(v) => {\n+                        base.$key_name = v;\n+                        Some(Ok(()))\n+                    },\n+                    Err(s) => Some(Err(\n+                        format!(\"`{:?}` is not a valid value for `{}`: {}\", o, name, s)\n+                    )),\n+                }).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, crt_objects_fallback) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1516,7 +1606,7 @@ impl Target {\n         key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n         key!(crt_static_respected, bool);\n-        key!(stack_probes, bool);\n+        key!(stack_probes, StackProbeType)?;\n         key!(min_global_align, Option<u64>);\n         key!(default_codegen_units, Option<u64>);\n         key!(trap_unreachable, bool);"}, {"sha": "b9ff16bd19ff49bd0b5c9b37da11e5ba6ea1e9cd", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -9,7 +9,7 @@\n // the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n // code runs in the same environment, no process separation is supported.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, StackProbeType, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::msvc_base::opts();\n@@ -43,7 +43,9 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".efi\".to_string(),\n         allows_weak_linkage: false,\n         panic_strategy: PanicStrategy::Abort,\n-        stack_probes: true,\n+        // LLVM does not emit inline assembly because the LLVM target does not get considered as\u2026\n+        // \"Windows\".\n+        stack_probes: StackProbeType::Call,\n         singlethread: true,\n         linker: Some(\"rust-lld\".to_string()),\n         ..base"}, {"sha": "8c40baccda84a1cac436cd49969882493ead44fa", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n@@ -10,7 +10,7 @@ pub fn target() -> Target {\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n     );\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "6feeeac451b2760c8bd45713fbbe457c72ea970c", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::X86_64);\n@@ -9,6 +9,10 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            ..base\n+        },\n     }\n }"}, {"sha": "a6e066213e7f97ea4b707cb4f5327ccbff1f87d7", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"ios\", Arch::X86_64_macabi);\n@@ -9,6 +9,10 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            ..base\n+        },\n     }\n }"}, {"sha": "f8c47168da87f189e6414b302d388c6d31c9d41e", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,5 +1,5 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{Target, TargetOptions};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = opts(\"tvos\", Arch::X86_64);\n@@ -8,6 +8,10 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n+        options: TargetOptions {\n+            max_atomic_width: Some(64),\n+            stack_probes: StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) },\n+            ..base\n+        },\n     }\n }"}, {"sha": "a39e7f8c341058d0125d093b961b652c539668df", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,10 +1,10 @@\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-fuchsia\".to_string(),"}, {"sha": "d436242e62b30bcd737b37ca367c79eb976b9dea", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n@@ -7,7 +7,7 @@ pub fn target() -> Target {\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-linux-android\".to_string(),"}, {"sha": "d84a63562c70ae2b01e91d3b48dd2e12c99b5195", "filename": "compiler/rustc_target/src/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n@@ -12,7 +12,7 @@ pub fn target() -> Target {\n     base.has_rpath = false;\n     base.position_independent_executables = false;\n     base.disable_redzone = true;\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-rumprun-netbsd\".to_string(),"}, {"sha": "0fe462ec83cbcb2f4a1050ad6755fe252d40b1c8", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),"}, {"sha": "d86b0d67acd15374e465f39e242925edf8b460c6", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),"}, {"sha": "c7d3b3feed50e79a2f6ff1d69beefaa540b7e16e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),"}, {"sha": "963d4fdb12f2dcfb76231bc50531cfd4a23450bb", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     // This option is required to build executables on Haiku x86_64\n     base.position_independent_executables = true;\n "}, {"sha": "31164f8408dcb34f254b9d7b80c3bc55f99dda80", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.features = \"+rdrnd,+rdseed\".to_string();\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),"}, {"sha": "9fcfe4e6c14bf8e9402f0a17d03663ee96d7c353", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit_kernel.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::Target;\n+use crate::spec::{StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::hermit_kernel_base::opts();\n@@ -7,7 +7,7 @@ pub fn target() -> Target {\n     base.features =\n         \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n             .to_string();\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),"}, {"sha": "99906764dfc6e86b730ab0f9aa47c8a55bf9c917", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),"}, {"sha": "4b2bce37470cca9869b0feb78fedcbe7e6cf19c7", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mx32\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.has_elf_tls = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743"}, {"sha": "fa9fdf5aa09928192cc5967f1d29686711f73bcf", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.static_position_independent_executables = true;\n \n     Target {"}, {"sha": "6d19dec00b411aea1db0d91da8a4d5337ae6ae4c", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),"}, {"sha": "ac5939bcb3c4326d057db817d94f454f436883b2", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),"}, {"sha": "ddabe95ab83945c6464dc30b614b903ec7928452", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {\n         llvm_target: \"x86_64-unknown-redox\".to_string(),"}, {"sha": "1b35e813fcd8f1406033dfb4fcab3543800c81ab", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,11 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.disable_redzone = true;\n \n     Target {"}, {"sha": "42693d3a061c8d654ebd9808755a0bff13323c4b", "filename": "src/test/ui/extern/extern-compare-with-return-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72c7b7026742766998655eba95fca984046c0288/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c7b7026742766998655eba95fca984046c0288/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs?ref=72c7b7026742766998655eba95fca984046c0288", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+\n // Tests that we can compare various kinds of extern fn signatures.\n #![allow(non_camel_case_types)]\n "}]}