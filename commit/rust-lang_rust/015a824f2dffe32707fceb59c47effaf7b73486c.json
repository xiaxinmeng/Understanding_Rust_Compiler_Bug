{"sha": "015a824f2dffe32707fceb59c47effaf7b73486c", "node_id": "C_kwDOAAsO6NoAKDAxNWE4MjRmMmRmZmUzMjcwN2ZjZWI1OWM0N2VmZmFmN2I3MzQ4NmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T20:28:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T20:28:16Z"}, "message": "Auto merge of #99762 - Nilstrieb:unreachable-prop, r=oli-obk\n\nUnreachableProp: Preserve unreachable branches for multiple targets\n\nBefore, UnreachablePropagation removed all unreachable branches. This was a pessimization, as it removed information about reachability that was used later in the optimization pipeline.\n\nFor example, this code\n```rust\npub enum Two { A, B }\npub fn identity(x: Two) -> Two {\n    match x {\n        Two::A => Two::A,\n        Two::B => Two::B,\n    }\n}\n```\n\nbasically has `switchInt() -> [0: 0, 1: 1, otherwise: unreachable]` for the match. This allows it to be transformed into a simple `x`. If we remove the unreachable branch, the transformation becomes illegal.\n\nThis was the problem keeping `UnreachablePropagation` from being enabled, so we can enable it now.\n\nSomething similar already happened in #77800, but it did not show a perf improvement there. Let's try it again anyways!\n\nFixes #68105, although that issue has been fixed for a long time (see #77680).", "tree": {"sha": "bca90cb84654faf55a53a08b4b139cd9e12b0342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca90cb84654faf55a53a08b4b139cd9e12b0342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015a824f2dffe32707fceb59c47effaf7b73486c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015a824f2dffe32707fceb59c47effaf7b73486c", "html_url": "https://github.com/rust-lang/rust/commit/015a824f2dffe32707fceb59c47effaf7b73486c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015a824f2dffe32707fceb59c47effaf7b73486c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7851767419e56280110fe2859bbc15d5cbdd468", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7851767419e56280110fe2859bbc15d5cbdd468", "html_url": "https://github.com/rust-lang/rust/commit/a7851767419e56280110fe2859bbc15d5cbdd468"}, {"sha": "18bfcd374fac5e65a9559771cbbb800d53b8549d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bfcd374fac5e65a9559771cbbb800d53b8549d", "html_url": "https://github.com/rust-lang/rust/commit/18bfcd374fac5e65a9559771cbbb800d53b8549d"}], "stats": {"total": 496, "additions": 315, "deletions": 181}, "files": [{"sha": "56d7799a125b03edc03b15287eaaa93430b3df52", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -12,9 +12,8 @@ pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        // Enable only under -Zmir-opt-level=4 as in some cases (check the deeply-nested-opt\n-        // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n-        sess.mir_opt_level() >= 4\n+        // Enable only under -Zmir-opt-level=2 as this can make programs less debuggable.\n+        sess.mir_opt_level() >= 2\n     }\n \n     fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -38,7 +37,19 @@ impl MirPass<'_> for UnreachablePropagation {\n             }\n         }\n \n+        // We do want do keep some unreachable blocks, but make them empty.\n+        for bb in unreachable_blocks {\n+            if !tcx.consider_optimizing(|| {\n+                format!(\"UnreachablePropagation {:?} \", body.source.def_id())\n+            }) {\n+                break;\n+            }\n+\n+            body.basic_blocks_mut()[bb].statements.clear();\n+        }\n+\n         let replaced = !replacements.is_empty();\n+\n         for (bb, terminator_kind) in replacements {\n             if !tcx.consider_optimizing(|| {\n                 format!(\"UnreachablePropagation {:?} \", body.source.def_id())\n@@ -57,42 +68,55 @@ impl MirPass<'_> for UnreachablePropagation {\n \n fn remove_successors<'tcx, F>(\n     terminator_kind: &TerminatorKind<'tcx>,\n-    predicate: F,\n+    is_unreachable: F,\n ) -> Option<TerminatorKind<'tcx>>\n where\n     F: Fn(BasicBlock) -> bool,\n {\n-    let terminator = match *terminator_kind {\n-        TerminatorKind::Goto { target } if predicate(target) => TerminatorKind::Unreachable,\n-        TerminatorKind::SwitchInt { ref discr, switch_ty, ref targets } => {\n+    let terminator = match terminator_kind {\n+        // This will unconditionally run into an unreachable and is therefore unreachable as well.\n+        TerminatorKind::Goto { target } if is_unreachable(*target) => TerminatorKind::Unreachable,\n+        TerminatorKind::SwitchInt { targets, discr, switch_ty } => {\n             let otherwise = targets.otherwise();\n \n-            let original_targets_len = targets.iter().len() + 1;\n-            let (mut values, mut targets): (Vec<_>, Vec<_>) =\n-                targets.iter().filter(|(_, bb)| !predicate(*bb)).unzip();\n+            // If all targets are unreachable, we can be unreachable as well.\n+            if targets.all_targets().iter().all(|bb| is_unreachable(*bb)) {\n+                TerminatorKind::Unreachable\n+            } else if is_unreachable(otherwise) {\n+                // If there are multiple targets, don't delete unreachable branches (like an unreachable otherwise)\n+                // unless otherwise is unrachable, in which case deleting a normal branch causes it to be merged with\n+                // the otherwise, keeping its unreachable.\n+                // This looses information about reachability causing worse codegen.\n+                // For example (see src/test/codegen/match-optimizes-away.rs)\n+                //\n+                // pub enum Two { A, B }\n+                // pub fn identity(x: Two) -> Two {\n+                //     match x {\n+                //         Two::A => Two::A,\n+                //         Two::B => Two::B,\n+                //     }\n+                // }\n+                //\n+                // This generates a `switchInt() -> [0: 0, 1: 1, otherwise: unreachable]`, which allows us or LLVM to\n+                // turn it into just `x` later. Without the unreachable, such a transformation would be illegal.\n+                // If the otherwise branch is unreachable, we can delete all other unreacahble targets, as they will\n+                // still point to the unreachable and therefore not lose reachability information.\n+                let reachable_iter = targets.iter().filter(|(_, bb)| !is_unreachable(*bb));\n \n-            if !predicate(otherwise) {\n-                targets.push(otherwise);\n-            } else {\n-                values.pop();\n-            }\n+                let new_targets = SwitchTargets::new(reachable_iter, otherwise);\n \n-            let retained_targets_len = targets.len();\n+                // No unreachable branches were removed.\n+                if new_targets.all_targets().len() == targets.all_targets().len() {\n+                    return None;\n+                }\n \n-            if targets.is_empty() {\n-                TerminatorKind::Unreachable\n-            } else if targets.len() == 1 {\n-                TerminatorKind::Goto { target: targets[0] }\n-            } else if original_targets_len != retained_targets_len {\n                 TerminatorKind::SwitchInt {\n                     discr: discr.clone(),\n-                    switch_ty,\n-                    targets: SwitchTargets::new(\n-                        values.iter().copied().zip(targets.iter().copied()),\n-                        *targets.last().unwrap(),\n-                    ),\n+                    switch_ty: *switch_ty,\n+                    targets: new_targets,\n                 }\n             } else {\n+                // If the otherwise branch is reachable, we don't want to delete any unreachable branches.\n                 return None;\n             }\n         }"}, {"sha": "ac7fe31f3b39ce5282b1d97f9b6d72f52708012b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -55,7 +55,7 @@\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n       }\n   \n       bb1: {\n@@ -66,6 +66,10 @@\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+      }\n+  \n+      bb3: {\n           StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n           _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n           _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n@@ -108,10 +112,10 @@\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [false: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n-      bb3: {\n+      bb4: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -141,7 +145,7 @@\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n-      bb4: {\n+      bb5: {\n           nop;                             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "ac7fe31f3b39ce5282b1d97f9b6d72f52708012b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -55,7 +55,7 @@\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n           _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n       }\n   \n       bb1: {\n@@ -66,6 +66,10 @@\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+      }\n+  \n+      bb3: {\n           StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n           _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n           _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n@@ -108,10 +112,10 @@\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [false: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n-      bb3: {\n+      bb4: {\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -141,7 +145,7 @@\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n       }\n   \n-      bb4: {\n+      bb5: {\n           nop;                             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "1b4dddc1d43a030a725a4793feb833d5ae40cad4", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -8,20 +8,24 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n           _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n       }\n   \n       bb2: {\n-          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n       }\n   \n       bb3: {\n+          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "1b4dddc1d43a030a725a4793feb833d5ae40cad4", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -8,20 +8,24 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n           _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n       }\n   \n       bb2: {\n-          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n       }\n   \n       bb3: {\n+          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "6e734852e1af490fec52362d823beb6ab07e7b2d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -8,20 +8,24 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n           _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n       }\n   \n       bb2: {\n-          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n       }\n   \n       bb3: {\n+          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "6e734852e1af490fec52362d823beb6ab07e7b2d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -8,20 +8,24 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n           _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+3:17: +3:18\n       }\n   \n       bb2: {\n-          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          unreachable;                     // scope 0 at $DIR/matches_u8.rs:+1:11: +1:12\n       }\n   \n       bb3: {\n+          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:+2:17: +2:18\n+      }\n+  \n+      bb4: {\n           return;                          // scope 0 at $DIR/matches_u8.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "ca90489f8aebcac319cd62175eaac54b533c139f", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -57,7 +57,7 @@\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -74,6 +74,10 @@\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+      }\n+  \n+      bb3: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -97,7 +101,7 @@\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n-      bb3: {\n+      bb4: {\n           StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -115,16 +119,16 @@\n           StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+-         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(const 1_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n++         switchInt(const 1_isize) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n-      bb4: {\n+      bb5: {\n           unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n-      bb5: {\n+      bb6: {\n           StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -137,9 +141,9 @@\n           StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+-         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(const 0_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n++         switchInt(const 0_isize) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   }\n   "}, {"sha": "6816f8f9c1e1be6b5d7ad99277f0ac8658273728", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -57,15 +57,15 @@\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n--         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n -         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+-         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n -     }\n - \n -     bb2: {\n@@ -83,6 +83,11 @@\n   \n -     bb3: {\n +     bb2: {\n+          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+      }\n+  \n+-     bb4: {\n++     bb3: {\n           StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n@@ -106,8 +111,8 @@\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n--     bb4: {\n-+     bb3: {\n+-     bb5: {\n++     bb4: {\n           StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -126,16 +131,16 @@\n +         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n++         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   \n--     bb5: {\n-+     bb4: {\n+-     bb6: {\n++     bb5: {\n           unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n--     bb6: {\n-+     bb5: {\n+-     bb7: {\n++     bb6: {\n           StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -149,7 +154,7 @@\n +         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n++         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n   }\n   "}, {"sha": "28269165e1c27a672f7a863d855940195ee24102", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -30,7 +30,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n           _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-          switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n+          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n       }\n   \n       bb1: {\n@@ -44,12 +44,16 @@\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n -         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+-         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n +         _8 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(const 1_isize) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n++         switchInt(const 1_isize) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n+      }\n+  \n+      bb3: {\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n@@ -60,21 +64,25 @@\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n -         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+-         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n +         _8 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(const 0_isize) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n++         switchInt(const 0_isize) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n-      bb3: {\n+      bb4: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-          goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n       }\n   \n-      bb4: {\n+      bb5: {\n+          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n+      }\n+  \n+      bb6: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n@@ -84,10 +92,10 @@\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   \n-      bb5: {\n+      bb7: {\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n       }"}, {"sha": "0ee070619e79d4315022f132eddb88af3894e8a1", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -27,7 +27,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n         _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-        switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n+        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n     }\n \n     bb1: {\n@@ -37,10 +37,14 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n         discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n         StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-        goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+        goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n     }\n \n     bb2: {\n+        unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n+    }\n+\n+    bb3: {\n         StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n         _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n         StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n@@ -59,10 +63,10 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n         StorageDead(_8);                 // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n         StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-        goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+        goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n         return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n     }"}, {"sha": "437979081367a1bc26cc9fa565bac77fcf25104b", "filename": "src/test/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -30,7 +30,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n           _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-          switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n+          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n       }\n   \n       bb1: {\n@@ -43,12 +43,16 @@\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n--         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n+-         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n +         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n++         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n+      }\n+  \n+      bb3: {\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n           StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n@@ -58,28 +62,33 @@\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n+-         goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n -     }\n - \n--     bb3: {\n+-     bb4: {\n           _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+-         switchInt(move _8) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n++         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n--     bb4: {\n-+     bb3: {\n+-     bb5: {\n++     bb4: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n--         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-+         goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+-         goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n++         goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n       }\n   \n--     bb5: {\n-+     bb4: {\n+-     bb6: {\n++     bb5: {\n+          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n+      }\n+  \n+-     bb7: {\n++     bb6: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n@@ -89,12 +98,12 @@\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n--         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-+         goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+-         goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n++         goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   \n--     bb6: {\n-+     bb5: {\n+-     bb8: {\n++     bb7: {\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n       }"}, {"sha": "d8e0657c6ebc66908583970518b57cdbb9328851", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -16,23 +16,27 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n           ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n           Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n           discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n+      }\n+  \n+      bb3: {\n           Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n           discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n       }\n   \n-      bb3: {\n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "d8e0657c6ebc66908583970518b57cdbb9328851", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -16,23 +16,27 @@\n   \n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n           ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n           Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n           discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n+      }\n+  \n+      bb3: {\n           Deinit(_0);                      // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n           discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n-          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:17: +2:21\n       }\n   \n-      bb3: {\n+      bb4: {\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "83b91309be308f006ca20b652329d53c99b792b4", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -50,7 +50,7 @@\n +         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n       }\n   \n       bb1: {\n@@ -80,6 +80,10 @@\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n+      }\n+  \n+      bb3: {\n           StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n           nop;                             // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n           StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50"}, {"sha": "e025ae7c55111e4b3b7a841a1e277ed502b4b7c4", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -41,7 +41,7 @@\n           _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n       }\n   \n       bb1: {\n@@ -61,6 +61,10 @@\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n+      }\n+  \n+      bb3: {\n           StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n           _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n           StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50"}, {"sha": "eb5af2227ec9be4f801e3d3ea609191fd53830a0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -40,7 +40,7 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n+        switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n     }\n \n     bb1: {\n@@ -60,6 +60,10 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     }\n \n     bb2: {\n+        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n+    }\n+\n+    bb3: {\n         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50"}, {"sha": "1efa8a67e5cd1a080a23910182410d1dff937480", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -30,7 +30,7 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     bb0: {\n         _2 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n         _3 = discriminant(_2);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        switchInt(move _3) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n     }\n \n     bb1: {\n@@ -41,6 +41,10 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     }\n \n     bb2: {\n+        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n+    }\n+\n+    bb3: {\n         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n         StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n         StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49"}, {"sha": "6ed53643f4bf02acf1be6aaf7492ced964690132", "filename": "src/test/mir-opt/uninhabited_enum.process_never.SimplifyLocals.after.mir", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -11,8 +11,6 @@ fn process_never(_1: *const !) -> () {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:+1:8: +1:14\n-        StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:+2:1: +2:2\n         unreachable;                     // scope 0 at $DIR/uninhabited-enum.rs:+0:39: +2:2\n     }\n }"}, {"sha": "4aa5ba007f11937b6fbfb2fb9fc6b9a9e03fd255", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -18,6 +18,10 @@ fn main() -> () {\n         Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+        switchInt(move _3) -> [2_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n+    }\n+\n+    bb1: {\n         StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+4:21: +4:24\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+4:21: +4:24\n                                          // mir::Constant\n@@ -32,29 +36,37 @@ fn main() -> () {\n         Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+        switchInt(move _8) -> [4_isize: bb5, 5_isize: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n     }\n \n-    bb1: {\n+    bb2: {\n+        unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+    }\n+\n+    bb3: {\n         StorageLive(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n         _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n-        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n+        goto -> bb6;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n     }\n \n-    bb2: {\n+    bb4: {\n+        unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n+    }\n+\n+    bb5: {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n+        goto -> bb6;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n     }\n \n-    bb3: {\n+    bb6: {\n         StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n         StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+0:11: +11:2"}, {"sha": "c3d356aedb28176cdf145143d968b26da0ac166b", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -19,8 +19,8 @@\n           Deinit(_2);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n--         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n-+         switchInt(move _3) -> bb1;       // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n+-         switchInt(move _3) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n++         switchInt(move _3) -> [2_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:5: +1:19\n       }\n   \n       bb1: {\n@@ -31,59 +31,67 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+4:21: +4:24\n           StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+4:23: +4:24\n-          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+4:23: +4:24\n+          goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+4:23: +4:24\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+1:11: +1:19\n+      }\n+  \n+      bb3: {\n           _1 = const \"A(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:+2:24: +2:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+2:24: +2:34\n+          goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+2:24: +2:34\n       }\n   \n-      bb3: {\n+      bb4: {\n           StorageLive(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+3:24: +3:34\n           _4 = const \"B(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:+3:24: +3:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _1 = &(*_4);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+3:24: +3:34\n           StorageDead(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+3:33: +3:34\n-          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+3:33: +3:34\n+          goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+3:33: +3:34\n       }\n   \n-      bb4: {\n+      bb5: {\n           StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+5:6: +5:7\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+5:6: +5:7\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +10:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           Deinit(_7);                      // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+          switchInt(move _8) -> [4_isize: bb8, 5_isize: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n       }\n   \n-      bb5: {\n+      bb6: {\n           StorageLive(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n           _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n-          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n+          goto -> bb9;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n       }\n   \n-      bb6: {\n+      bb7: {\n+          unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n+      }\n+  \n+      bb8: {\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n+          goto -> bb9;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n       }\n   \n-      bb7: {\n+      bb9: {\n           StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n           StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+0:11: +11:2"}, {"sha": "ec5612ad76790d5619dcba69a2b3d0797f7b108f", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -32,7 +32,7 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n         _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n         _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n-        switchInt(move _5) -> [2_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n+        switchInt(move _5) -> [2_isize: bb3, 3_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n     }\n \n     bb1: {\n@@ -43,51 +43,59 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:21: +7:24\n         StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:23: +7:24\n-        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:23: +7:24\n+        goto -> bb4;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:23: +7:24\n     }\n \n     bb2: {\n+        unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n+    }\n+\n+    bb3: {\n         StorageLive(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:21: +6:24\n         _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:21: +6:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:21: +6:24\n         StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:23: +6:24\n-        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:23: +6:24\n+        goto -> bb4;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:23: +6:24\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageDead(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n         StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n         StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n         _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-        switchInt(move _10) -> [2_isize: bb5, otherwise: bb4]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+        switchInt(move _10) -> [2_isize: bb7, 3_isize: bb5, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n     }\n \n-    bb4: {\n+    bb5: {\n         StorageLive(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n         _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n-        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n+        goto -> bb8;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n     }\n \n-    bb5: {\n+    bb6: {\n+        unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n+    }\n+\n+    bb7: {\n         StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n-        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n+        goto -> bb8;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n     }\n \n-    bb6: {\n+    bb8: {\n         StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+15:6: +15:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+0:11: +16:2\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+16:1: +16:2"}, {"sha": "77b358a4801e5b7870c8f3424f87270325d03bee", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -33,8 +33,8 @@\n           StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n           _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n           _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n--         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n-+         switchInt(move _5) -> [2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n+-         switchInt(move _5) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n++         switchInt(move _5) -> [2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:5: +3:22\n       }\n   \n       bb1: {\n@@ -45,90 +45,98 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:21: +7:24\n           StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:23: +7:24\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:23: +7:24\n+          goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+7:23: +7:24\n       }\n   \n       bb2: {\n+          unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+3:11: +3:22\n+      }\n+  \n+      bb3: {\n           _3 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:+4:24: +4:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+4:24: +4:34\n+          goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+4:24: +4:34\n       }\n   \n-      bb3: {\n+      bb4: {\n           StorageLive(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+5:24: +5:34\n           _6 = const \"B(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:+5:24: +5:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_6);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+5:24: +5:34\n           StorageDead(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+5:33: +5:34\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+5:33: +5:34\n+          goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+5:33: +5:34\n       }\n   \n-      bb4: {\n+      bb5: {\n           StorageLive(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:21: +6:24\n           _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:21: +6:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:21: +6:24\n           StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:23: +6:24\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:23: +6:24\n+          goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+6:23: +6:24\n       }\n   \n-      bb5: {\n+      bb6: {\n           StorageDead(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n           StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n           StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n           _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n--         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb8, 2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n-+         switchInt(move _10) -> [2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+-         switchInt(move _10) -> [0_isize: bb9, 1_isize: bb10, 2_isize: bb11, 3_isize: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n++         switchInt(move _10) -> [2_isize: bb11, 3_isize: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n       }\n   \n-      bb6: {\n+      bb7: {\n           StorageLive(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n           _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n           StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n+          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n       }\n   \n-      bb7: {\n+      bb8: {\n+          unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n+      }\n+  \n+      bb9: {\n           _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n+          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n       }\n   \n-      bb8: {\n+      bb10: {\n           StorageLive(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n           _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n           StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n+          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n       }\n   \n-      bb9: {\n+      bb11: {\n           StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n           _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n           StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n+          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n       }\n   \n-      bb10: {\n+      bb12: {\n           StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+15:6: +15:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+0:11: +16:2\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+16:1: +16:2"}, {"sha": "9cd4b8ccf331abe00c198e09b85b3feae81d2aa5", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -28,7 +28,7 @@\n       bb1: {\n           _2 = discriminant(_1);           // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n -         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n-+         goto -> bb2;                     // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n++         switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/unreachable.rs:+1:12: +1:20\n       }\n   \n       bb2: {\n@@ -39,9 +39,10 @@\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n -         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n -         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n--     }\n-- \n--     bb3: {\n++         unreachable;                     // scope 2 at $DIR/unreachable.rs:+4:12: +4:16\n+      }\n+  \n+      bb3: {\n -         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:+5:13: +5:20\n -         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:+4:17: +6:10\n -         goto -> bb5;                     // scope 2 at $DIR/unreachable.rs:+4:9: +8:10"}, {"sha": "afd6b00aac3ea92ac3091c48a1168a46d031a151", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/015a824f2dffe32707fceb59c47effaf7b73486c/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=015a824f2dffe32707fceb59c47effaf7b73486c", "patch": "@@ -29,8 +29,7 @@\n   \n       bb1: {\n           _3 = discriminant(_2);           // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n--         switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n-+         switchInt(move _3) -> [1_isize: bb2, otherwise: bb5]; // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n+          switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 2 at $DIR/unreachable_diverging.rs:+2:12: +2:22\n       }\n   \n       bb2: {\n@@ -39,13 +38,11 @@\n           StorageLive(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:+3:9: +5:10\n           StorageLive(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n           _6 = _1;                         // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n--         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n-+         goto -> bb3;                     // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n+          switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_diverging.rs:+3:12: +3:13\n       }\n   \n       bb3: {\n--         _5 = loop_forever() -> bb5;      // scope 2 at $DIR/unreachable_diverging.rs:+4:13: +4:27\n-+         _5 = loop_forever() -> bb4;      // scope 2 at $DIR/unreachable_diverging.rs:+4:13: +4:27\n+          _5 = loop_forever() -> bb5;      // scope 2 at $DIR/unreachable_diverging.rs:+4:13: +4:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(<ZST>) }\n@@ -54,17 +51,17 @@\n       bb4: {\n -         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:+5:10: +5:10\n -         goto -> bb5;                     // scope 2 at $DIR/unreachable_diverging.rs:+3:9: +5:10\n--     }\n-- \n--     bb5: {\n-          StorageDead(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:+5:9: +5:10\n-          StorageDead(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:+5:9: +5:10\n-          StorageLive(_7);                 // scope 2 at $DIR/unreachable_diverging.rs:+6:9: +6:22\n++         unreachable;                     // scope 2 at $DIR/unreachable_diverging.rs:+3:9: +5:10\n+      }\n+  \n+      bb5: {\n+-         StorageDead(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:+5:9: +5:10\n+-         StorageDead(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:+5:9: +5:10\n+-         StorageLive(_7);                 // scope 2 at $DIR/unreachable_diverging.rs:+6:9: +6:22\n           unreachable;                     // scope 2 at $DIR/unreachable_diverging.rs:+6:15: +6:19\n       }\n   \n--     bb6: {\n-+     bb5: {\n+      bb6: {\n           _0 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:+7:6: +7:6\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:+8:1: +8:2\n           StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:+8:1: +8:2"}]}