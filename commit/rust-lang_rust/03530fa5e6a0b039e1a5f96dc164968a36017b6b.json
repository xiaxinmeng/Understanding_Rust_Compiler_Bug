{"sha": "03530fa5e6a0b039e1a5f96dc164968a36017b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTMwZmE1ZTZhMGIwMzllMWE1Zjk2ZGMxNjQ5NjhhMzYwMTdiNmI=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-16T10:56:08Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-16T10:56:08Z"}, "message": "add example for moving out of pointer", "tree": {"sha": "eebe675ff1688442d7872fc63531686902e6e006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebe675ff1688442d7872fc63531686902e6e006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03530fa5e6a0b039e1a5f96dc164968a36017b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03530fa5e6a0b039e1a5f96dc164968a36017b6b", "html_url": "https://github.com/rust-lang/rust/commit/03530fa5e6a0b039e1a5f96dc164968a36017b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03530fa5e6a0b039e1a5f96dc164968a36017b6b/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e766afab32a45e55728e11c17b996848a7dd49", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e766afab32a45e55728e11c17b996848a7dd49", "html_url": "https://github.com/rust-lang/rust/commit/68e766afab32a45e55728e11c17b996848a7dd49"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "a8e5b1e7584d7792796aae206c14f44ccb5a5054", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/03530fa5e6a0b039e1a5f96dc164968a36017b6b/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03530fa5e6a0b039e1a5f96dc164968a36017b6b/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=03530fa5e6a0b039e1a5f96dc164968a36017b6b", "patch": "@@ -609,16 +609,27 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// this trait cannot prevent types from moving by itself.\n ///\n /// Instead it can be used to prevent moves through the type system,\n-/// by controlling the behavior of special pointers types like [`PinMut`],\n-/// which \"pin\" the type in place by wrapping it in a type which can only be dereferenced immutably.\n+/// by controlling the behavior of special pointer types like [`PinMut`],\n+/// which \"pin\" the type in place by not allowing it to be moved out via mutable references.\n ///\n /// Implementing this trait lifts the restrictions of pinning off a type,\n-/// which then allows it to move out of said pointers with functions such as [`swap`].\n+/// which then allows it to move out of said pointers, with functions such as [`replace`].\n+///\n+/// So this, for example, can only be done on types implementing `Unpin`:\n+///\n+/// ```rust\n+/// #![feature(pin)]\n+/// use std::mem::{PinMut, replace};\n+///\n+/// let mut string = \"this\".to_string();\n+/// let mut pinned_string = PinMut::new(&mut string);\n+/// replace(&mut *pinned_string, \"other\".to_string());\n+/// ```\n ///\n /// This trait is automatically implemented for almost every type.\n ///\n /// [`PinMut`]: ../mem/struct.PinMut.html\n-/// [`swap`]: ../mem/fn.swap.html\n+/// [`replace`]: ../mem/fn.replace.html\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub auto trait Unpin {}\n "}]}