{"sha": "19208367d4c56e2245e80b2a4aeafa03a150d4b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MjA4MzY3ZDRjNTZlMjI0NWU4MGIyYTRhZWFmYTAzYTE1MGQ0Yjc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-04T10:24:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-11T14:08:17Z"}, "message": "Use a more fitting name for a respanning function", "tree": {"sha": "e7136e1a35d9eb486baa598393053964e4428fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7136e1a35d9eb486baa598393053964e4428fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19208367d4c56e2245e80b2a4aeafa03a150d4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19208367d4c56e2245e80b2a4aeafa03a150d4b7", "html_url": "https://github.com/rust-lang/rust/commit/19208367d4c56e2245e80b2a4aeafa03a150d4b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19208367d4c56e2245e80b2a4aeafa03a150d4b7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b3d8de2a08a066fc853d5afb0f9b89905609f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3d8de2a08a066fc853d5afb0f9b89905609f98", "html_url": "https://github.com/rust-lang/rust/commit/0b3d8de2a08a066fc853d5afb0f9b89905609f98"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "a77c1268d2221d815d0b20bb49a31398f24a59fa", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19208367d4c56e2245e80b2a4aeafa03a150d4b7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19208367d4c56e2245e80b2a4aeafa03a150d4b7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=19208367d4c56e2245e80b2a4aeafa03a150d4b7", "patch": "@@ -681,7 +681,9 @@ impl<'a> LoweringContext<'a> {\n         Ident::with_empty_ctxt(Symbol::gensym(s))\n     }\n \n-    fn allow_internal_unstable(\n+    /// Reuses the span but adds information like the kind of the desugaring and features that are\n+    /// allowed inside this span.\n+    fn mark_span_with_reason(\n         &self,\n         reason: CompilerDesugaringKind,\n         span: Span,\n@@ -969,7 +971,7 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n         };\n \n-        let unstable_span = self.allow_internal_unstable(\n+        let unstable_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             vec![\n@@ -1371,7 +1373,7 @@ impl<'a> LoweringContext<'a> {\n         // desugaring that explicitly states that we don't want to track that.\n         // Not tracking it makes lints in rustc and clippy very fragile as\n         // frequently opened issues show.\n-        let exist_ty_span = self.allow_internal_unstable(\n+        let exist_ty_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::ExistentialReturnType,\n             span,\n             Vec::new(), // doesn'c actually allow anything unstable\n@@ -3939,7 +3941,7 @@ impl<'a> LoweringContext<'a> {\n             }),\n             ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n-                    let unstable_span = this.allow_internal_unstable(\n+                    let unstable_span = this.mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n                         vec![\n@@ -4377,7 +4379,7 @@ impl<'a> LoweringContext<'a> {\n                 // expand <head>\n                 let head = self.lower_expr(head);\n                 let head_sp = head.span;\n-                let desugared_span = self.allow_internal_unstable(\n+                let desugared_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::ForLoop,\n                     head_sp,\n                     Vec::new(),\n@@ -4543,7 +4545,7 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span = self.allow_internal_unstable(\n+                let unstable_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n                     vec!["}]}