{"sha": "7cab196e7cccb68454e0ee5e667628387ad06463", "node_id": "C_kwDOAAsO6NoAKDdjYWIxOTZlN2NjY2I2ODQ1NGUwZWU1ZTY2NzYyODM4N2FkMDY0NjM", "commit": {"author": {"name": "Zalathar", "email": "Zalathar@users.noreply.github.com", "date": "2023-05-08T03:57:20Z"}, "committer": {"name": "Zalathar", "email": "Zalathar@users.noreply.github.com", "date": "2023-05-09T08:08:32Z"}, "message": "Isolate coverage FFI type layouts from their underlying LLVM C++ types", "tree": {"sha": "7b0bc611438a4d344c9ba44548cb60ad96d5eaa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b0bc611438a4d344c9ba44548cb60ad96d5eaa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cab196e7cccb68454e0ee5e667628387ad06463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cab196e7cccb68454e0ee5e667628387ad06463", "html_url": "https://github.com/rust-lang/rust/commit/7cab196e7cccb68454e0ee5e667628387ad06463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cab196e7cccb68454e0ee5e667628387ad06463/comments", "author": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a01e2e93bfdd0c37649c6f82172644b8315b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a01e2e93bfdd0c37649c6f82172644b8315b55", "html_url": "https://github.com/rust-lang/rust/commit/33a01e2e93bfdd0c37649c6f82172644b8315b55"}], "stats": {"total": 133, "additions": 117, "deletions": 16}, "files": [{"sha": "aefd5b2a13c92ad1cfe5034d1c7b7e6ff2d10ada", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cab196e7cccb68454e0ee5e667628387ad06463/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cab196e7cccb68454e0ee5e667628387ad06463/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=7cab196e7cccb68454e0ee5e667628387ad06463", "patch": "@@ -680,7 +680,9 @@ pub type InlineAsmDiagHandlerTy = unsafe extern \"C\" fn(&SMDiagnostic, *const c_v\n pub mod coverageinfo {\n     use super::coverage_map;\n \n-    /// Aligns with [llvm::coverage::CounterMappingRegion::RegionKind](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L209-L230)\n+    /// Corresponds to enum `llvm::coverage::CounterMappingRegion::RegionKind`.\n+    ///\n+    /// Must match the layout of `LLVMRustCounterMappingRegionKind`.\n     #[derive(Copy, Clone, Debug)]\n     #[repr(C)]\n     pub enum RegionKind {\n@@ -714,7 +716,9 @@ pub mod coverageinfo {\n     /// array\", encoded separately), and source location (start and end positions of the represented\n     /// code region).\n     ///\n-    /// Matches LLVMRustCounterMappingRegion.\n+    /// Corresponds to struct `llvm::coverage::CounterMappingRegion`.\n+    ///\n+    /// Must match the layout of `LLVMRustCounterMappingRegion`.\n     #[derive(Copy, Clone, Debug)]\n     #[repr(C)]\n     pub struct CounterMappingRegion {"}, {"sha": "1791ce4b31559bcba88bba2c4cae5fa8c3f290f1", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/ffi.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7cab196e7cccb68454e0ee5e667628387ad06463/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cab196e7cccb68454e0ee5e667628387ad06463/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs?ref=7cab196e7cccb68454e0ee5e667628387ad06463", "patch": "@@ -1,6 +1,6 @@\n use rustc_middle::mir::coverage::{CounterValueReference, MappedExpressionIndex};\n \n-/// Aligns with [llvm::coverage::Counter::CounterKind](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L95)\n+/// Must match the layout of `LLVMRustCounterKind`.\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub enum CounterKind {\n@@ -17,8 +17,10 @@ pub enum CounterKind {\n ///     `instrprof.increment()`)\n ///   * For `CounterKind::Expression`, `id` is the index into the coverage map's array of\n ///     counter expressions.\n-/// Aligns with [llvm::coverage::Counter](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L102-L103)\n-/// Important: The Rust struct layout (order and types of fields) must match its C++ counterpart.\n+///\n+/// Corresponds to struct `llvm::coverage::Counter`.\n+///\n+/// Must match the layout of `LLVMRustCounter`.\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct Counter {\n@@ -59,17 +61,19 @@ impl Counter {\n     }\n }\n \n-/// Aligns with [llvm::coverage::CounterExpression::ExprKind](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L150)\n+/// Corresponds to enum `llvm::coverage::CounterExpression::ExprKind`.\n+///\n+/// Must match the layout of `LLVMRustCounterExprKind`.\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub enum ExprKind {\n     Subtract = 0,\n     Add = 1,\n }\n \n-/// Aligns with [llvm::coverage::CounterExpression](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L151-L152)\n-/// Important: The Rust struct layout (order and types of fields) must match its C++\n-/// counterpart.\n+/// Corresponds to struct `llvm::coverage::CounterExpression`.\n+///\n+/// Must match the layout of `LLVMRustCounterExpression`.\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct CounterExpression {"}, {"sha": "38fcd0527da914829f73550f38e05266d1b9ec3c", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 100, "deletions": 7, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7cab196e7cccb68454e0ee5e667628387ad06463/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7cab196e7cccb68454e0ee5e667628387ad06463/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=7cab196e7cccb68454e0ee5e667628387ad06463", "patch": "@@ -8,18 +8,100 @@\n \n using namespace llvm;\n \n+// FFI equivalent of enum `llvm::coverage::Counter::CounterKind`\n+// https://github.com/rust-lang/llvm-project/blob/ea6fa9c2/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L97-L99\n+enum class LLVMRustCounterKind {\n+  Zero = 0,\n+  CounterValueReference = 1,\n+  Expression = 2,\n+};\n+\n+// FFI equivalent of struct `llvm::coverage::Counter`\n+// https://github.com/rust-lang/llvm-project/blob/ea6fa9c2/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L94-L149\n+struct LLVMRustCounter {\n+  LLVMRustCounterKind CounterKind;\n+  uint32_t ID;\n+};\n+\n+static coverage::Counter fromRust(LLVMRustCounter Counter) {\n+  switch (Counter.CounterKind) {\n+  case LLVMRustCounterKind::Zero:\n+    return coverage::Counter::getZero();\n+  case LLVMRustCounterKind::CounterValueReference:\n+    return coverage::Counter::getCounter(Counter.ID);\n+  case LLVMRustCounterKind::Expression:\n+    return coverage::Counter::getExpression(Counter.ID);\n+  }\n+  report_fatal_error(\"Bad LLVMRustCounterKind!\");\n+}\n+\n+// FFI equivalent of enum `llvm::coverage::CounterMappingRegion::RegionKind`\n+// https://github.com/rust-lang/llvm-project/blob/ea6fa9c2/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L213-L234\n+enum class LLVMRustCounterMappingRegionKind {\n+  CodeRegion = 0,\n+  ExpansionRegion = 1,\n+  SkippedRegion = 2,\n+  GapRegion = 3,\n+  BranchRegion = 4,\n+};\n+\n+static coverage::CounterMappingRegion::RegionKind\n+fromRust(LLVMRustCounterMappingRegionKind Kind) {\n+  switch (Kind) {\n+  case LLVMRustCounterMappingRegionKind::CodeRegion:\n+    return coverage::CounterMappingRegion::CodeRegion;\n+  case LLVMRustCounterMappingRegionKind::ExpansionRegion:\n+    return coverage::CounterMappingRegion::ExpansionRegion;\n+  case LLVMRustCounterMappingRegionKind::SkippedRegion:\n+    return coverage::CounterMappingRegion::SkippedRegion;\n+  case LLVMRustCounterMappingRegionKind::GapRegion:\n+    return coverage::CounterMappingRegion::GapRegion;\n+  case LLVMRustCounterMappingRegionKind::BranchRegion:\n+    return coverage::CounterMappingRegion::BranchRegion;\n+  }\n+  report_fatal_error(\"Bad LLVMRustCounterMappingRegionKind!\");\n+}\n+\n+// FFI equivalent of struct `llvm::coverage::CounterMappingRegion`\n+// https://github.com/rust-lang/llvm-project/blob/ea6fa9c2/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L211-L304\n struct LLVMRustCounterMappingRegion {\n-  coverage::Counter Count;\n-  coverage::Counter FalseCount;\n+  LLVMRustCounter Count;\n+  LLVMRustCounter FalseCount;\n   uint32_t FileID;\n   uint32_t ExpandedFileID;\n   uint32_t LineStart;\n   uint32_t ColumnStart;\n   uint32_t LineEnd;\n   uint32_t ColumnEnd;\n-  coverage::CounterMappingRegion::RegionKind Kind;\n+  LLVMRustCounterMappingRegionKind Kind;\n+};\n+\n+// FFI equivalent of enum `llvm::coverage::CounterExpression::ExprKind`\n+// https://github.com/rust-lang/llvm-project/blob/ea6fa9c2/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L154\n+enum class LLVMRustCounterExprKind {\n+  Subtract = 0,\n+  Add = 1,\n };\n \n+// FFI equivalent of struct `llvm::coverage::CounterExpression`\n+// https://github.com/rust-lang/llvm-project/blob/ea6fa9c2/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L151-L160\n+struct LLVMRustCounterExpression {\n+  LLVMRustCounterExprKind Kind;\n+  LLVMRustCounter LHS;\n+  LLVMRustCounter RHS;\n+};\n+\n+static coverage::CounterExpression::ExprKind\n+fromRust(LLVMRustCounterExprKind Kind) {\n+  switch (Kind) {\n+  case LLVMRustCounterExprKind::Subtract:\n+    return coverage::CounterExpression::Subtract;\n+  case LLVMRustCounterExprKind::Add:\n+    return coverage::CounterExpression::Add;\n+  }\n+  report_fatal_error(\"Bad LLVMRustCounterExprKind!\");\n+}\n+\n extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n     const char* const Filenames[],\n     size_t FilenamesLen,\n@@ -37,7 +119,7 @@ extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n     const unsigned *VirtualFileMappingIDs,\n     unsigned NumVirtualFileMappingIDs,\n-    const coverage::CounterExpression *Expressions,\n+    const LLVMRustCounterExpression *RustExpressions,\n     unsigned NumExpressions,\n     LLVMRustCounterMappingRegion *RustMappingRegions,\n     unsigned NumMappingRegions,\n@@ -48,13 +130,24 @@ extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n   for (const auto &Region : ArrayRef<LLVMRustCounterMappingRegion>(\n            RustMappingRegions, NumMappingRegions)) {\n     MappingRegions.emplace_back(\n-        Region.Count, Region.FalseCount, Region.FileID, Region.ExpandedFileID,\n+        fromRust(Region.Count), fromRust(Region.FalseCount),\n+        Region.FileID, Region.ExpandedFileID,\n         Region.LineStart, Region.ColumnStart, Region.LineEnd, Region.ColumnEnd,\n-        Region.Kind);\n+        fromRust(Region.Kind));\n   }\n+\n+  std::vector<coverage::CounterExpression> Expressions;\n+  Expressions.reserve(NumExpressions);\n+  for (const auto &Expression :\n+       ArrayRef<LLVMRustCounterExpression>(RustExpressions, NumExpressions)) {\n+    Expressions.emplace_back(fromRust(Expression.Kind),\n+                             fromRust(Expression.LHS),\n+                             fromRust(Expression.RHS));\n+  }\n+\n   auto CoverageMappingWriter = coverage::CoverageMappingWriter(\n       ArrayRef<unsigned>(VirtualFileMappingIDs, NumVirtualFileMappingIDs),\n-      ArrayRef<coverage::CounterExpression>(Expressions, NumExpressions),\n+      Expressions,\n       MappingRegions);\n   RawRustStringOstream OS(BufferOut);\n   CoverageMappingWriter.write(OS);"}]}