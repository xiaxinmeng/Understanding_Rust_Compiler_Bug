{"sha": "2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhM2FiZTJjZTNlYmFhMDQxMTAxMmNjMWJlNjgyOWM5Y2I2ZWExNmY=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-23T09:02:42Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-23T09:02:42Z"}, "message": "Fix goto def not working when cursor was over the name of a def\n\nWe now allow goto_definition to return the named NavigationTarget if the cursor\nis on the name of a definition.", "tree": {"sha": "147fd0f4b97f8f560b061d0b1ba691e7233ecf5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147fd0f4b97f8f560b061d0b1ba691e7233ecf5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f", "html_url": "https://github.com/rust-lang/rust/commit/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8a0982a12f3aa4b8c193a841f864b15c3cb66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8a0982a12f3aa4b8c193a841f864b15c3cb66e", "html_url": "https://github.com/rust-lang/rust/commit/3d8a0982a12f3aa4b8c193a841f864b15c3cb66e"}], "stats": {"total": 130, "additions": 126, "deletions": 4}, "files": [{"sha": "a4ee77d94789efc5378cf4b93b0e8043fd8d742e", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 124, "deletions": 3, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f", "patch": "@@ -1,7 +1,8 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    AstNode, ast,\n-    algo::find_node_at_offset,\n+    AstNode, ast::{self, NameOwner},\n+    algo::{find_node_at_offset, visit::{visitor, Visitor}},\n+    SyntaxNode,\n };\n use test_utils::tested_by;\n use hir::Resolution;\n@@ -114,7 +115,9 @@ fn name_definition(\n     file_id: FileId,\n     name: &ast::Name,\n ) -> Option<Vec<NavigationTarget>> {\n-    if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n+    let parent = name.syntax().parent()?;\n+\n+    if let Some(module) = ast::Module::cast(&parent) {\n         if module.has_semi() {\n             if let Some(child_module) =\n                 hir::source_binder::module_from_declaration(db, file_id, module)\n@@ -124,9 +127,33 @@ fn name_definition(\n             }\n         }\n     }\n+\n+    if let Some(nav) = named_target(file_id, &parent) {\n+        return Some(vec![nav]);\n+    }\n+\n     None\n }\n \n+fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n+    fn to_nav_target<N: NameOwner>(node: &N, file_id: FileId) -> Option<NavigationTarget> {\n+        Some(NavigationTarget::from_named(file_id, node))\n+    }\n+\n+    visitor()\n+        .visit(|n: &ast::StructDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::EnumDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::EnumVariant| to_nav_target(n, file_id))\n+        .visit(|n: &ast::FnDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::TypeDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::ConstDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::StaticDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::TraitDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::NamedFieldDef| to_nav_target(n, file_id))\n+        .visit(|n: &ast::Module| to_nav_target(n, file_id))\n+        .accept(node)?\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test_utils::covers;\n@@ -231,4 +258,98 @@ mod tests {\n             \"spam NAMED_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_definition_works_when_used_on_definition_name_itself() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo<|> { value: u32 }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 25) [7; 10)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            struct Foo {\n+                field<|>: string,\n+            }\n+            \"#,\n+            \"field NAMED_FIELD_DEF FileId(1) [17; 30) [17; 22)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            fn foo_test<|>() {\n+            }\n+            \",\n+            \"foo_test FN_DEF FileId(1) [0; 17) [3; 11)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo<|> {\n+                Variant,\n+            }\n+            \",\n+            \"Foo ENUM_DEF FileId(1) [0; 25) [5; 8)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo {\n+                Variant1,\n+                Variant2<|>,\n+                Variant3,\n+            }\n+            \",\n+            \"Variant2 ENUM_VARIANT FileId(1) [29; 37) [29; 37)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            static inner<|>: &str = \"\";\n+            \"#,\n+            \"inner STATIC_DEF FileId(1) [0; 24) [7; 12)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            const inner<|>: &str = \"\";\n+            \"#,\n+            \"inner CONST_DEF FileId(1) [0; 23) [6; 11)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            type Thing<|> = Option<()>;\n+            \"#,\n+            \"Thing TYPE_DEF FileId(1) [0; 24) [5; 10)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            trait Foo<|> {\n+            }\n+            \"#,\n+            \"Foo TRAIT_DEF FileId(1) [0; 13) [6; 9)\",\n+        );\n+\n+        check_goto(\n+            r#\"\n+            //- /lib.rs\n+            mod bar<|> {\n+            }\n+            \"#,\n+            \"bar MODULE FileId(1) [0; 11) [4; 7)\",\n+        );\n+    }\n }"}, {"sha": "e9240283ee23d3824a0557c8e8d729f9b1d5eb04", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=2a3abe2ce3ebaa0411012cc1be6829c9cb6ea16f", "patch": "@@ -198,7 +198,8 @@ impl NavigationTarget {\n         buf\n     }\n \n-    fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n+    /// Allows `NavigationTarget` to be created from a `NameOwner`\n+    pub(crate) fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range = node.name().map(|it| it.syntax().range());\n         NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax())"}]}