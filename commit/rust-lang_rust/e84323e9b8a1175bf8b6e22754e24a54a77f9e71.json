{"sha": "e84323e9b8a1175bf8b6e22754e24a54a77f9e71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDMyM2U5YjhhMTE3NWJmOGI2ZTIyNzU0ZTI0YTU0YTc3ZjllNzE=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-21T07:26:38Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-21T07:26:38Z"}, "message": "Switch Module.children from oldmap", "tree": {"sha": "78bd08a034d9c8fb6cc8794dd87efd5eb5c0063d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78bd08a034d9c8fb6cc8794dd87efd5eb5c0063d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e84323e9b8a1175bf8b6e22754e24a54a77f9e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e84323e9b8a1175bf8b6e22754e24a54a77f9e71", "html_url": "https://github.com/rust-lang/rust/commit/e84323e9b8a1175bf8b6e22754e24a54a77f9e71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e84323e9b8a1175bf8b6e22754e24a54a77f9e71/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14ec73cd2d15a2454113011835557ccf447f14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14ec73cd2d15a2454113011835557ccf447f14d", "html_url": "https://github.com/rust-lang/rust/commit/a14ec73cd2d15a2454113011835557ccf447f14d"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "6df86d21cb7c476d5f1fc6ba38a19f004ee609a2", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e84323e9b8a1175bf8b6e22754e24a54a77f9e71/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84323e9b8a1175bf8b6e22754e24a54a77f9e71/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=e84323e9b8a1175bf8b6e22754e24a54a77f9e71", "patch": "@@ -77,6 +77,7 @@ use syntax::opt_vec::OptVec;\n \n use core::option::{Some, get, is_some, is_none};\n use core::str::{connect, split_str};\n+use core::hashmap::linear::LinearMap;\n use std::oldmap::HashMap;\n \n // Definition mapping\n@@ -456,7 +457,7 @@ pub struct Module {\n     def_id: Option<def_id>,\n     kind: ModuleKind,\n \n-    children: @HashMap<ident,@mut NameBindings>,\n+    children: @mut LinearMap<ident, @mut NameBindings>,\n     imports: @mut ~[@ImportDirective],\n \n     // The anonymous children of this node. Anonymous children are pseudo-\n@@ -494,7 +495,7 @@ pub fn Module(parent_link: ParentLink,\n         parent_link: parent_link,\n         def_id: def_id,\n         kind: kind,\n-        children: @HashMap(),\n+        children: @mut LinearMap::new(),\n         imports: @mut ~[],\n         anonymous_children: @HashMap(),\n         import_resolutions: @HashMap(),\n@@ -1024,7 +1025,7 @@ pub impl Resolver {\n                                   *self.session.str_of(name)));\n                     }\n                 }\n-                return (child, new_parent);\n+                return (*child, new_parent);\n             }\n         }\n     }\n@@ -1614,7 +1615,7 @@ pub impl Resolver {\n                         let name_bindings = parent_module.children.get(\n                             &ident);\n                         resolution.type_target =\n-                            Some(Target(parent_module, name_bindings));\n+                            Some(Target(parent_module, *name_bindings));\n                       }\n                     }\n \n@@ -2165,13 +2166,13 @@ pub impl Resolver {\n                 // Continue.\n             }\n             Some(child_name_bindings) => {\n-                if (*child_name_bindings).defined_in_namespace(ValueNS) {\n+                if child_name_bindings.defined_in_namespace(ValueNS) {\n                     value_result = BoundResult(containing_module,\n-                                               child_name_bindings);\n+                                               *child_name_bindings);\n                 }\n-                if (*child_name_bindings).defined_in_namespace(TypeNS) {\n+                if child_name_bindings.defined_in_namespace(TypeNS) {\n                     type_result = BoundResult(containing_module,\n-                                              child_name_bindings);\n+                                              *child_name_bindings);\n                 }\n             }\n         }\n@@ -2352,9 +2353,9 @@ pub impl Resolver {\n                 // Continue.\n             }\n             Some(child_name_bindings) => {\n-                if (*child_name_bindings).defined_in_namespace(TypeNS) {\n+                if child_name_bindings.defined_in_namespace(TypeNS) {\n                     module_result = BoundResult(containing_module,\n-                                                child_name_bindings);\n+                                                *child_name_bindings);\n                 }\n             }\n         }\n@@ -2534,16 +2535,16 @@ pub impl Resolver {\n         }\n \n         // Add all children from the containing module.\n-        for containing_module.children.each |&ident, &name_bindings| {\n+        for containing_module.children.each |&(ident, name_bindings)| {\n             let mut dest_import_resolution;\n-            match module_.import_resolutions.find(&ident) {\n+            match module_.import_resolutions.find(ident) {\n                 None => {\n                     // Create a new import resolution from this child.\n                     dest_import_resolution = @mut ImportResolution(privacy,\n                                                                    span,\n                                                                    state);\n                     module_.import_resolutions.insert\n-                        (ident, dest_import_resolution);\n+                        (*ident, dest_import_resolution);\n                 }\n                 Some(existing_import_resolution) => {\n                     dest_import_resolution = existing_import_resolution;\n@@ -2552,21 +2553,21 @@ pub impl Resolver {\n \n             debug!(\"(resolving glob import) writing resolution `%s` in `%s` \\\n                     to `%s`, privacy=%?\",\n-                   *self.session.str_of(ident),\n+                   *self.session.str_of(*ident),\n                    self.module_to_str(containing_module),\n                    self.module_to_str(module_),\n                    copy dest_import_resolution.privacy);\n \n             // Merge the child item into the import resolution.\n-            if (*name_bindings).defined_in_public_namespace(ValueNS) {\n+            if name_bindings.defined_in_public_namespace(ValueNS) {\n                 debug!(\"(resolving glob import) ... for value target\");\n                 dest_import_resolution.value_target =\n-                    Some(Target(containing_module, name_bindings));\n+                    Some(Target(containing_module, *name_bindings));\n             }\n-            if (*name_bindings).defined_in_public_namespace(TypeNS) {\n+            if name_bindings.defined_in_public_namespace(TypeNS) {\n                 debug!(\"(resolving glob import) ... for type target\");\n                 dest_import_resolution.type_target =\n-                    Some(Target(containing_module, name_bindings));\n+                    Some(Target(containing_module, *name_bindings));\n             }\n         }\n \n@@ -2760,8 +2761,8 @@ pub impl Resolver {\n \n         match module_.children.find(&name) {\n             Some(name_bindings)\n-                    if (*name_bindings).defined_in_namespace(namespace) => {\n-                return Success(Target(module_, name_bindings));\n+                    if name_bindings.defined_in_namespace(namespace) => {\n+                return Success(Target(module_, *name_bindings));\n             }\n             Some(_) | None => { /* Not found; continue. */ }\n         }\n@@ -3005,10 +3006,9 @@ pub impl Resolver {\n         // First, check the direct children of the module.\n         match module_.children.find(&name) {\n             Some(name_bindings)\n-                    if (*name_bindings).defined_in_namespace(namespace) => {\n-\n+                    if name_bindings.defined_in_namespace(namespace) => {\n                 debug!(\"(resolving name in module) found node as child\");\n-                return Success(Target(module_, name_bindings));\n+                return Success(Target(module_, *name_bindings));\n             }\n             Some(_) | None => {\n                 // Continue.\n@@ -3190,7 +3190,7 @@ pub impl Resolver {\n     fn add_exports_for_module(@mut self,\n                               exports2: &mut ~[Export2],\n                               module_: @mut Module) {\n-        for module_.children.each |ident, namebindings| {\n+        for module_.children.each |&(ident, namebindings)| {\n             debug!(\"(computing exports) maybe export '%s'\",\n                    *self.session.str_of(*ident));\n             self.add_exports_of_namebindings(&mut *exports2,"}]}