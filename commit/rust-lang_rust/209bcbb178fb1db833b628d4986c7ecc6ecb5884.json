{"sha": "209bcbb178fb1db833b628d4986c7ecc6ecb5884", "node_id": "C_kwDOAAsO6NoAKDIwOWJjYmIxNzhmYjFkYjgzM2I2MjhkNDk4NmM3ZWNjNmVjYjU4ODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T18:28:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T18:28:02Z"}, "message": "Auto merge of #2667 - RalfJung:josh, r=RalfJung\n\nadjust josh pushing, remove './miri toolchain HEAD/commit'\n\nLooks like pushing works much better if we use as base commit the last commit we pulled from rustc and merged into Miri. Which I guess is fair. Conveniently, the `rust-version` file should usually be pretty much exactly that commit. Also adjust `rustc-pull` to update that file.\n\nPulling is now the way to update to a newer rustc, so I also removed `./miri toolchain HEAD`.", "tree": {"sha": "d2d951c9ea7f678de4769c30b28832ed7a1778ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d951c9ea7f678de4769c30b28832ed7a1778ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209bcbb178fb1db833b628d4986c7ecc6ecb5884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209bcbb178fb1db833b628d4986c7ecc6ecb5884", "html_url": "https://github.com/rust-lang/rust/commit/209bcbb178fb1db833b628d4986c7ecc6ecb5884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209bcbb178fb1db833b628d4986c7ecc6ecb5884/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a046f62bb4230549dd5085e836705d6fe3ca86b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a046f62bb4230549dd5085e836705d6fe3ca86b3", "html_url": "https://github.com/rust-lang/rust/commit/a046f62bb4230549dd5085e836705d6fe3ca86b3"}, {"sha": "a47e4313901ac10071c8d41c43d9a3943b95e0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47e4313901ac10071c8d41c43d9a3943b95e0ea", "html_url": "https://github.com/rust-lang/rust/commit/a47e4313901ac10071c8d41c43d9a3943b95e0ea"}], "stats": {"total": 91, "additions": 39, "deletions": 52}, "files": [{"sha": "138a69974e14472d36c499d5e0a5883597876d26", "filename": "src/tools/miri/.github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209bcbb178fb1db833b628d4986c7ecc6ecb5884/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/209bcbb178fb1db833b628d4986c7ecc6ecb5884/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml?ref=209bcbb178fb1db833b628d4986c7ecc6ecb5884", "patch": "@@ -67,10 +67,10 @@ jobs:\n         shell: bash\n         run: |\n           if [[ ${{ github.event_name }} == 'schedule' ]]; then\n-            ./miri toolchain HEAD --host ${{ matrix.host_target }}\n-          else\n-            ./miri toolchain \"\" --host ${{ matrix.host_target }}\n+            echo \"Building against latest rustc git version\"\n+            git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1 > rust-version\n           fi\n+          ./miri toolchain --host ${{ matrix.host_target }}\n \n       - name: Show Rust version\n         run: |"}, {"sha": "5f46e2af0f9c3d37836b89d39b513de6ae7c1c20", "filename": "src/tools/miri/CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/209bcbb178fb1db833b628d4986c7ecc6ecb5884/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/209bcbb178fb1db833b628d4986c7ecc6ecb5884/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCONTRIBUTING.md?ref=209bcbb178fb1db833b628d4986c7ecc6ecb5884", "patch": "@@ -209,23 +209,6 @@ We described above the simplest way to get a working build environment for Miri,\n which is to use the version of rustc indicated by `rustc-version`. But\n sometimes, that is not enough.\n \n-### Updating `rustc-version`\n-\n-The `rustc-version` file is regularly updated to keep Miri close to the latest\n-version of rustc. Usually, new contributors do not have to worry about this. But\n-sometimes a newer rustc is needed for a patch, and sometimes Miri needs fixing\n-for changes in rustc. In both cases, `rustc-version` needs updating.\n-\n-To update the `rustc-version` file and install the latest rustc, you can run:\n-```\n-./miri toolchain HEAD\n-```\n-\n-Now edit Miri until `./miri test` passes, and submit a PR. Generally, it is\n-preferred to separate updating `rustc-version` and doing what it takes to get\n-Miri working again, from implementing new features that rely on the updated\n-rustc. This avoids blocking all Miri development on landing a big PR.\n-\n ### Building Miri with a locally built rustc\n \n [building Miri with a locally built rustc]: #building-miri-with-a-locally-built-rustc\n@@ -299,9 +282,10 @@ We assume we start on an up-to-date master branch in the Miri repo.\n \n ```sh\n # Fetch and merge rustc side of the history. Takes ca 5 min the first time.\n+# This will also update the 'rustc-version' file.\n ./miri rustc-pull\n-# Update toolchain reference and apply formatting.\n-./miri toolchain HEAD && ./miri fmt\n+# Update local toolchain and apply formatting.\n+./miri toolchain && ./miri fmt\n git commit -am \"rustup\"\n ```\n "}, {"sha": "b09897c294cd17f3bf539b6a74420510f44e3d18", "filename": "src/tools/miri/miri", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/209bcbb178fb1db833b628d4986c7ecc6ecb5884/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/209bcbb178fb1db833b628d4986c7ecc6ecb5884/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=209bcbb178fb1db833b628d4986c7ecc6ecb5884", "patch": "@@ -42,21 +42,21 @@ many different seeds.\n Runs the benchmarks from bench-cargo-miri in hyperfine. hyperfine needs to be installed.\n <benches> can explicitly list the benchmarks to run; by default, all of them are run.\n \n+./miri toolchain <flags>:\n+Update and activate the rustup toolchain 'miri' to the commit given in the\n+`rust-version` file.\n+`rustup-toolchain-install-master` must be installed for this to work. Any extra\n+flags are passed to `rustup-toolchain-install-master`.\n+\n ./miri rustc-pull:\n-Pull and merge Miri changes from the rustc repo.\n+Pull and merge Miri changes from the rustc repo. The fetched commit is stored in\n+the `rust-version` file, so the next `./miri toolchain` will install the rustc\n+we just pulled.\n \n ./miri rustc-push <github user> <branch>:\n-Push Miri changes back to the rustc repo. This will update the 'master' branch\n-in the Rust fork of the given user to upstream. It will also pull a copy of the\n-rustc history into the Miri repo, unless you set the RUSTC_GIT env var to an\n-existing clone of the rustc repo.\n-\n-./miri toolchain <commit> <flags>:\n-Update and activate the rustup toolchain 'miri'. If no commit is given, updates\n-to the commit given in the `rust-version` file. If the commit is `HEAD`, updates\n-to the latest upstream rustc commit.\n-`rustup-toolchain-install-master` must be installed for this to work. Any extra\n-flags are passed to `rustup-toolchain-install-master`.\n+Push Miri changes back to the rustc repo. This will pull a copy of the rustc\n+history into the Miri repo, unless you set the RUSTC_GIT env var to an existing\n+clone of the rustc repo.\n \n   ENVIRONMENT VARIABLES\n \n@@ -86,21 +86,12 @@ TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' '\n case \"$COMMAND\" in\n toolchain)\n     cd \"$MIRIDIR\"\n+    NEW_COMMIT=$(cat rust-version)\n     # Make sure rustup-toolchain-install-master is installed.\n     if ! which rustup-toolchain-install-master >/dev/null; then\n         echo \"Please install rustup-toolchain-install-master by running 'cargo install rustup-toolchain-install-master'\"\n         exit 1\n     fi\n-    # Determine new commit.\n-    if [[ \"$1\" == \"\" ]]; then\n-        NEW_COMMIT=$(cat rust-version)\n-    elif [[ \"$1\" == \"HEAD\" ]]; then\n-        NEW_COMMIT=$(git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1)\n-    else\n-        NEW_COMMIT=\"$1\"\n-    fi\n-    echo \"$NEW_COMMIT\" > rust-version\n-    shift || true # don't fail if shifting fails because no commit was given\n     # Check if we already are at that commit.\n     CUR_COMMIT=$(rustc +miri --version -v 2>/dev/null | grep \"^commit-hash: \" | cut -d \" \" -f 2)\n     if [[ \"$CUR_COMMIT\" == \"$NEW_COMMIT\" ]]; then\n@@ -122,8 +113,18 @@ toolchain)\n     ;;\n rustc-pull)\n     cd \"$MIRIDIR\"\n+    FETCH_COMMIT=$(git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1)\n+    # We can't pull from a commit with josh\n+    # (https://github.com/josh-project/josh/issues/1034), so we just hope that\n+    # nothing gets merged into rustc *during* this pull.\n     git fetch http://localhost:8000/rust-lang/rust.git$JOSH_FILTER.git master\n+    # Just verify that `master` didn't move.\n+    if [[ $FETCH_COMMIT != $(git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1) ]]; then\n+        echo \"Looks like something got merged into Rust *while we were pulling*. Aborting. Please try again.\"\n+    fi\n+    echo \"$FETCH_COMMIT\" > rust-version # do this *before* merging as merging will fail in case of conflicts\n     git merge FETCH_HEAD --no-ff -m \"Merge from rustc\"\n+    git commit rust-version --amend -m \"Merge from rustc\"\n     exit 0\n     ;;\n rustc-push)\n@@ -145,19 +146,21 @@ rustc-push)\n         fi\n         cd \"$MIRIDIR\"\n     fi\n-    # Prepare the branches. For reliable pushing we need to push to a non-existent branch\n-    # and set `-o base` to a branch that holds current rustc master.\n-    echo \"Preparing $USER/rust...\"\n-    if git fetch https://github.com/$USER/rust $BRANCH &>/dev/null; then\n-        echo \"The branch '$BRANCH' seems to already exist in $USER/rust. Please delete it and try again.\"\n+    # Prepare the branch. Pushing works much better if we use as base exactly\n+    # the commit that we pulled from last time, so we use the `rust-version`\n+    # file as a good approximation of that.\n+    BASE=$(cat \"$MIRIDIR/rust-version\")\n+    echo \"Preparing $USER/rust (base: $BASE)...\"\n+    if git fetch \"https://github.com/$USER/rust\" \"$BRANCH\" &>/dev/null; then\n+        echo \"The branch '$BRANCH' seems to already exist in 'https://github.com/$USER/rust'. Please delete it and try again.\"\n         exit 1\n     fi\n-    git fetch https://github.com/rust-lang/rust master\n-    git push https://github.com/$USER/rust FETCH_HEAD:master\n+    git fetch https://github.com/rust-lang/rust $BASE\n+    git push https://github.com/$USER/rust $BASE:refs/heads/$BRANCH -f\n     # Do the actual push.\n     cd \"$MIRIDIR\"\n     echo \"Pushing Miri changes...\"\n-    git push http://localhost:8000/$USER/rust.git$JOSH_FILTER.git HEAD:$BRANCH -o base=master\n+    git push http://localhost:8000/$USER/rust.git$JOSH_FILTER.git HEAD:$BRANCH\n     exit 0\n     ;;\n many-seeds)"}]}