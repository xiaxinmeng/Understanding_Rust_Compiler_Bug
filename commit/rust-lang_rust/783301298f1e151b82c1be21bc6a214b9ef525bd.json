{"sha": "783301298f1e151b82c1be21bc6a214b9ef525bd", "node_id": "C_kwDOAAsO6NoAKDc4MzMwMTI5OGYxZTE1MWI4MmMxYmUyMWJjNmEyMTRiOWVmNTI1YmQ", "commit": {"author": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-10-20T10:28:31Z"}, "committer": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-10-20T10:47:17Z"}, "message": "Don't use usub.with.overflow intrinsic\n\nThe canonical form of a usub.with.overflow check in LLVM are\nseparate sub + icmp instructions, rather than a usub.with.overflow\nintrinsic. Using usub.with.overflow will generally result in worse\noptimization potential.\n\nThe backend will attempt to form usub.with.overflow when it comes\nto actual instruction selection. This is not fully reliable, but\nI believe this is a better tradeoff than using the intrinsic in\nIR.\n\nFixes #103285.", "tree": {"sha": "8735a552bd8376607e0d763d1d78b36ba77a8908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8735a552bd8376607e0d763d1d78b36ba77a8908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783301298f1e151b82c1be21bc6a214b9ef525bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783301298f1e151b82c1be21bc6a214b9ef525bd", "html_url": "https://github.com/rust-lang/rust/commit/783301298f1e151b82c1be21bc6a214b9ef525bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783301298f1e151b82c1be21bc6a214b9ef525bd/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b3b731b55a588dd34a75bbb87fdaaec2e3f5707", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3b731b55a588dd34a75bbb87fdaaec2e3f5707", "html_url": "https://github.com/rust-lang/rust/commit/4b3b731b55a588dd34a75bbb87fdaaec2e3f5707"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "9cb36ce7f1890b967d8ca7f4b948b98c0b4f53bd", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/783301298f1e151b82c1be21bc6a214b9ef525bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783301298f1e151b82c1be21bc6a214b9ef525bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=783301298f1e151b82c1be21bc6a214b9ef525bd", "patch": "@@ -365,11 +365,14 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 Int(I64) => \"llvm.ssub.with.overflow.i64\",\n                 Int(I128) => \"llvm.ssub.with.overflow.i128\",\n \n-                Uint(U8) => \"llvm.usub.with.overflow.i8\",\n-                Uint(U16) => \"llvm.usub.with.overflow.i16\",\n-                Uint(U32) => \"llvm.usub.with.overflow.i32\",\n-                Uint(U64) => \"llvm.usub.with.overflow.i64\",\n-                Uint(U128) => \"llvm.usub.with.overflow.i128\",\n+                Uint(_) => {\n+                    // Emit sub and icmp instead of llvm.usub.with.overflow. LLVM considers these\n+                    // to be the canonical form. It will attempt to reform llvm.usub.with.overflow\n+                    // in the backend if profitable.\n+                    let sub = self.sub(lhs, rhs);\n+                    let cmp = self.icmp(IntPredicate::IntULT, lhs, rhs);\n+                    return (sub, cmp);\n+                }\n \n                 _ => unreachable!(),\n             },"}, {"sha": "a3499babea21b07d40c2b232d14ca2b986b1ce95", "filename": "src/test/codegen/issue-103285-ptr-addr-overflow-check.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/783301298f1e151b82c1be21bc6a214b9ef525bd/src%2Ftest%2Fcodegen%2Fissue-103285-ptr-addr-overflow-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783301298f1e151b82c1be21bc6a214b9ef525bd/src%2Ftest%2Fcodegen%2Fissue-103285-ptr-addr-overflow-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-103285-ptr-addr-overflow-check.rs?ref=783301298f1e151b82c1be21bc6a214b9ef525bd", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -O -C debug-assertions=yes\n+\n+#![crate_type = \"lib\"]\n+#![feature(strict_provenance)]\n+\n+#[no_mangle]\n+pub fn test(src: *const u8, dst: *const u8) -> usize {\n+    // CHECK-LABEL: @test(\n+    // CHECK-NOT: panic\n+    let src_usize = src.addr();\n+    let dst_usize = dst.addr();\n+    if src_usize > dst_usize {\n+        return src_usize - dst_usize;\n+    }\n+    return 0;\n+}"}]}