{"sha": "d39d60971bafe34f626585e4887e7eec726fe972", "node_id": "C_kwDOAAsO6NoAKGQzOWQ2MDk3MWJhZmUzNGY2MjY1ODVlNDg4N2U3ZWVjNzI2ZmU5NzI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-06T13:18:28Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-07T18:59:10Z"}, "message": "Handle `#[expect(unfulfilled_lint_expectations)]` with a lint message", "tree": {"sha": "fba3ce60fa91a7c38264eb4f42ad55beda12277c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba3ce60fa91a7c38264eb4f42ad55beda12277c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39d60971bafe34f626585e4887e7eec726fe972", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmImVf4ACgkQ/Ny/Ka9k\n1gFWDg//chwxaUyddaQtJ5QPreqVues0Y1MbBPlSr1yln1be0CpG++D6T3VC0+w6\nTDIsIA+sJEog7tqLqNlXwkHj7A53dXhmXk7oZ8pkTc4ioHnCglPP6bwPkqpBnMkB\nOsNV+Zzcf0jZ4Tb6nKomOrjyMgZ5PGoV95FaACfszVqMU8efQjq/qBUeC0oey84p\nlFb2u+rK36fGJT/E6SCaLSj3jzqQKKU2RQnsdwY4vQhndn7sLMk/9Ou5EfT3Ttht\nq2Tw+DaZbSHS9noEuBBUdY4s396SC8eb92YrbzNq4iPK11wyAc9tm80UWCfblErE\n3vAmuqUD6wLLG2ifC/pmv7trB3NjFQxNIeaeFgWTHlArk46VC+UZhFEYSj4H+ciF\ntq8dMYrY5dx58Ps7j86y/J2UFC9dnU8mYrNqNqQ7xllXND7SaxiuKP6izT71Jxc4\nNTcT0grxiAtMxx7MG3MZsA+t2pPvmcc7uESThe7/mm8GAld4IpI4856Wvl8OxFWV\nkWllORGtsIQb8f1j5jq1aU6pVM4LFc9Yxg4sA5HmIK8j5FoLYER1ZvnPmidyQ+UW\nX6P693HkCI8j1Ji5nSUIKsmVQ6YqHGAkQwiX6AabAIMGgzk6TnjlFHSXsUm+83e2\nOfnRugatMeZVYBshC3OdBtWBlLEULtXbO1+ETZ83qp3WhT+lqZg=\n=6wKW\n-----END PGP SIGNATURE-----", "payload": "tree fba3ce60fa91a7c38264eb4f42ad55beda12277c\nparent 165b5583e56ad6d54922a7b5117a37c2ca2c89a1\nauthor xFrednet <xFrednet@gmail.com> 1646572708 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646679550 +0100\n\nHandle `#[expect(unfulfilled_lint_expectations)]` with a lint message\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39d60971bafe34f626585e4887e7eec726fe972", "html_url": "https://github.com/rust-lang/rust/commit/d39d60971bafe34f626585e4887e7eec726fe972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39d60971bafe34f626585e4887e7eec726fe972/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165b5583e56ad6d54922a7b5117a37c2ca2c89a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/165b5583e56ad6d54922a7b5117a37c2ca2c89a1", "html_url": "https://github.com/rust-lang/rust/commit/165b5583e56ad6d54922a7b5117a37c2ca2c89a1"}], "stats": {"total": 133, "additions": 119, "deletions": 14}, "files": [{"sha": "5ba1fe9b4786f0f990d5820c597c7f1857c6692b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d39d60971bafe34f626585e4887e7eec726fe972", "patch": "@@ -970,6 +970,7 @@ impl Handler {\n \n     /// This methods steals all [`LintExpectationId`]s that are stored inside\n     /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n+    #[must_use]\n     pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n         assert!(\n             self.inner.borrow().unstable_expect_diagnostics.is_empty(),"}, {"sha": "74fef0be9e98c4fe4e178ef8d2146ca9bbb2499a", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=d39d60971bafe34f626585e4887e7eec726fe972", "patch": "@@ -30,10 +30,6 @@ fn emit_unfulfilled_expectation_lint(\n     hir_id: HirId,\n     expectation: &LintExpectation,\n ) {\n-    // FIXME: The current implementation doesn't cover cases where the\n-    // `unfulfilled_lint_expectations` is actually expected by another lint\n-    // expectation. This can be added here by checking the lint level and\n-    // retrieving the `LintExpectationId` if it was expected.\n     tcx.struct_span_lint_hir(\n         builtin::UNFULFILLED_LINT_EXPECTATIONS,\n         hir_id,\n@@ -43,6 +39,11 @@ fn emit_unfulfilled_expectation_lint(\n             if let Some(rationale) = expectation.reason {\n                 diag.note(&rationale.as_str());\n             }\n+\n+            if expectation.is_unfulfilled_lint_expectations {\n+                diag.note(\"the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\");\n+            }\n+\n             diag.emit();\n         },\n     );"}, {"sha": "468aacc9bcaaa0336444a597ebfe75cf197ffbaa", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=d39d60971bafe34f626585e4887e7eec726fe972", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::lint::{\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n-    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    builtin::{self, FORBIDDEN_LINT_GROUPS, UNFULFILLED_LINT_EXPECTATIONS},\n     Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::parse::feature_err;\n@@ -212,6 +212,14 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n         }\n+\n+        // The lint `unfulfilled_lint_expectations` can't be expected, as it would suppress itself.\n+        // Handling expectations of this lint would add additional complexity with little to no\n+        // benefit. The expect level for this lint will therefore be ignored.\n+        if let Level::Expect(_) = level && id == LintId::of(UNFULFILLED_LINT_EXPECTATIONS) {\n+            return;\n+        }\n+\n         if let Level::ForceWarn = old_level {\n             specs.insert(id, (old_level, old_src));\n         } else {\n@@ -344,6 +352,20 @@ impl<'s> LintLevelsBuilder<'s> {\n                     self.store.check_lint_name(&name, tool_name, self.registered_tools);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n+                        // This checks for instances where the user writes `#[expect(unfulfilled_lint_expectations)]`\n+                        // in that case we want to avoid overriding the lint level but instead add an expectation that\n+                        // can't be fulfilled. The lint message will include an explanation, that the\n+                        // `unfulfilled_lint_expectations` lint can't be expected.\n+                        if let Level::Expect(expect_id) = level {\n+                            let is_unfulfilled_lint_expectations = match ids {\n+                                [lint] => *lint == LintId::of(UNFULFILLED_LINT_EXPECTATIONS),\n+                                _ => false,\n+                            };\n+                            self.lint_expectations.push((\n+                                expect_id,\n+                                LintExpectation::new(reason, sp, is_unfulfilled_lint_expectations),\n+                            ));\n+                        }\n                         let src = LintLevelSource::Node(\n                             meta_item.path.segments.last().expect(\"empty lint name\").ident.name,\n                             sp,\n@@ -353,10 +375,6 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n-                        if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp)));\n-                        }\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n@@ -374,7 +392,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n                                 }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n@@ -414,7 +432,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n                                 }\n                             }\n                             Err((None, _)) => {\n@@ -511,7 +529,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp)));\n+                                .push((expect_id, LintExpectation::new(reason, sp, false)));\n                         }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);"}, {"sha": "1b301629b9c73ac37fb15fd7fe2c66cd003a45e4", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d60971bafe34f626585e4887e7eec726fe972/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d39d60971bafe34f626585e4887e7eec726fe972", "patch": "@@ -204,11 +204,19 @@ pub struct LintExpectation {\n     pub reason: Option<Symbol>,\n     /// The [`Span`] of the attribute that this expectation originated from.\n     pub emission_span: Span,\n+    /// Lint messages for the `unfulfilled_lint_expectations` lint will be\n+    /// adjusted to include an additional note. Therefore, we have to track if\n+    /// the expectation is for the lint.\n+    pub is_unfulfilled_lint_expectations: bool,\n }\n \n impl LintExpectation {\n-    pub fn new(reason: Option<Symbol>, attr_span: Span) -> Self {\n-        Self { reason, emission_span: attr_span }\n+    pub fn new(\n+        reason: Option<Symbol>,\n+        emission_span: Span,\n+        is_unfulfilled_lint_expectations: bool,\n+    ) -> Self {\n+        Self { reason, emission_span, is_unfulfilled_lint_expectations }\n     }\n }\n "}, {"sha": "d38e65533869af5341da39fd369277e2cbd74453", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d39d60971bafe34f626585e4887e7eec726fe972/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d60971bafe34f626585e4887e7eec726fe972/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs?ref=d39d60971bafe34f626585e4887e7eec726fe972", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// ignore-tidy-linelength\n+\n+#![feature(lint_reasons)]\n+#![warn(unused_mut)]\n+\n+#![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n+//~^ WARNING this lint expectation is unfulfilled\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+//~| NOTE idk why you would expect this\n+//~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+#[expect(unfulfilled_lint_expectations, reason = \"a local: idk why you would expect this\")]\n+//~^ WARNING this lint expectation is unfulfilled\n+//~| NOTE a local: idk why you would expect this\n+//~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+pub fn normal_test_fn() {\n+    #[expect(unused_mut, reason = \"this expectation will create a diagnostic with the default lint level\")]\n+    //~^ WARNING this lint expectation is unfulfilled\n+    //~| NOTE this expectation will create a diagnostic with the default lint level\n+    let mut v = vec![1, 1, 2, 3, 5];\n+    v.sort();\n+\n+    // Check that lint lists including `unfulfilled_lint_expectations` are also handled correctly\n+    #[expect(unused, unfulfilled_lint_expectations, reason = \"the expectation for `unused` should be fulfilled\")]\n+    //~^ WARNING this lint expectation is unfulfilled\n+    //~| NOTE the expectation for `unused` should be fulfilled\n+    //~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+    let value = \"I'm unused\";\n+}\n+\n+#[expect(warnings, reason = \"this suppresses all warnings and also suppresses itself. No warning will be issued\")]\n+pub fn expect_warnings() {\n+    // This lint trigger will be suppressed\n+    #[warn(unused_mut)]\n+    let mut v = vec![1, 1, 2, 3, 5];\n+}\n+\n+fn main() {}"}, {"sha": "9bfee79b03d7088cd0abe5a47df3dc63d433a197", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d39d60971bafe34f626585e4887e7eec726fe972/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d39d60971bafe34f626585e4887e7eec726fe972/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr?ref=d39d60971bafe34f626585e4887e7eec726fe972", "patch": "@@ -0,0 +1,38 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:7:11\n+   |\n+LL | #![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+   = note: idk why you would expect this\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:13:10\n+   |\n+LL | #[expect(unfulfilled_lint_expectations, reason = \"a local: idk why you would expect this\")]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: a local: idk why you would expect this\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:18:14\n+   |\n+LL |     #[expect(unused_mut, reason = \"this expectation will create a diagnostic with the default lint level\")]\n+   |              ^^^^^^^^^^\n+   |\n+   = note: this expectation will create a diagnostic with the default lint level\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:25:22\n+   |\n+LL |     #[expect(unused, unfulfilled_lint_expectations, reason = \"the expectation for `unused` should be fulfilled\")]\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the expectation for `unused` should be fulfilled\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: 4 warnings emitted\n+"}]}