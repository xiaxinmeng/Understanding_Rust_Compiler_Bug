{"sha": "8827e96303a15f9accc7c02ae2a2bd42573b2739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjdlOTYzMDNhMTVmOWFjY2M3YzAyYWUyYTJiZDQyNTczYjI3Mzk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-17T16:19:33Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-06-29T13:14:21Z"}, "message": "Make ItemKind check dry", "tree": {"sha": "c18407c963bf968ef51c6a823be8de45f43c43d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18407c963bf968ef51c6a823be8de45f43c43d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8827e96303a15f9accc7c02ae2a2bd42573b2739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8827e96303a15f9accc7c02ae2a2bd42573b2739", "html_url": "https://github.com/rust-lang/rust/commit/8827e96303a15f9accc7c02ae2a2bd42573b2739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8827e96303a15f9accc7c02ae2a2bd42573b2739/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e405c68b3c1265daa9a091ed9b4b5c5a38c0c0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e405c68b3c1265daa9a091ed9b4b5c5a38c0c0ba", "html_url": "https://github.com/rust-lang/rust/commit/e405c68b3c1265daa9a091ed9b4b5c5a38c0c0ba"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "9cac3b20ac51971b7506a8792e1ad44d67dcbf1b", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8827e96303a15f9accc7c02ae2a2bd42573b2739/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8827e96303a15f9accc7c02ae2a2bd42573b2739/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=8827e96303a15f9accc7c02ae2a2bd42573b2739", "patch": "@@ -87,59 +87,42 @@ const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if !is_item_interesting(item) {\n+            // This does two things:\n+            //  1) Reduce needless churn on `self.stack`\n+            //  2) Don't push `StackItem::NoCheck` when entering `ItemKind::OpaqueTy`,\n+            //     in order to lint `foo() -> impl <..>`\n+            return;\n+        }\n         // We push the self types of `impl`s on a stack here. Only the top type on the stack is\n         // relevant for linting, since this is the self type of the `impl` we're currently in. To\n         // avoid linting on nested items, we push `StackItem::NoCheck` on the stack to signal, that\n         // we're in an `impl` or nested item, that we don't want to lint\n-        //\n-        // NB: If you push something on the stack in this method, remember to also pop it in the\n-        // `check_item_post` method.\n-        match &item.kind {\n-            ItemKind::Impl(Impl {\n-                self_ty: hir_self_ty,\n-                of_trait,\n-                ..\n-            }) => {\n-                let should_check = if let TyKind::Path(QPath::Resolved(_, item_path)) = hir_self_ty.kind {\n-                    let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n-                    parameters.as_ref().map_or(true, |params| {\n-                        !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n-                    })\n-                } else {\n-                    false\n-                };\n+        let stack_item = if_chain! {\n+            if let ItemKind::Impl(Impl { self_ty, ref of_trait, .. }) = item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n+            let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n+            if parameters.as_ref().map_or(true, |params| {\n+                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+            });\n+            then {\n                 let impl_trait_ref_def_id = of_trait.as_ref().map(|_| cx.tcx.hir().local_def_id(item.hir_id()));\n-                if should_check {\n-                    self.stack.push(StackItem::Check {\n-                        hir_id: hir_self_ty.hir_id,\n-                        impl_trait_ref_def_id,\n-                        types_to_lint: Vec::new(),\n-                        types_to_skip: Vec::new(),\n-                    });\n-                } else {\n-                    self.stack.push(StackItem::NoCheck);\n+                StackItem::Check {\n+                    hir_id: self_ty.hir_id,\n+                    impl_trait_ref_def_id,\n+                    types_to_lint: Vec::new(),\n+                    types_to_skip: Vec::new(),\n                 }\n-            },\n-            ItemKind::Static(..)\n-            | ItemKind::Const(..)\n-            | ItemKind::Fn(..)\n-            | ItemKind::Enum(..)\n-            | ItemKind::Struct(..)\n-            | ItemKind::Union(..)\n-            | ItemKind::Trait(..) => {\n-                self.stack.push(StackItem::NoCheck);\n-            },\n-            _ => (),\n-        }\n+            } else {\n+                StackItem::NoCheck\n+            }\n+        };\n+        self.stack.push(stack_item);\n     }\n \n     fn check_item_post(&mut self, _: &LateContext<'_>, item: &Item<'_>) {\n-        use ItemKind::{Const, Enum, Fn, Impl, Static, Struct, Trait, Union};\n-        match item.kind {\n-            Impl { .. } | Static(..) | Const(..) | Fn(..) | Enum(..) | Struct(..) | Union(..) | Trait(..) => {\n-                self.stack.pop();\n-            },\n-            _ => (),\n+        if is_item_interesting(item) {\n+            self.stack.pop();\n         }\n     }\n \n@@ -359,6 +342,14 @@ fn lint_path_to_variant(cx: &LateContext<'_>, path: &Path<'_>) {\n     }\n }\n \n+fn is_item_interesting(item: &Item<'_>) -> bool {\n+    use rustc_hir::ItemKind::{Const, Enum, Fn, Impl, Static, Struct, Trait, Union};\n+    matches!(\n+        item.kind,\n+        Impl { .. } | Static(..) | Const(..) | Fn(..) | Enum(..) | Struct(..) | Union(..) | Trait(..)\n+    )\n+}\n+\n fn ty_from_hir_id<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Ty<'tcx> {\n     if let Some(Node::Ty(hir_ty)) = cx.tcx.hir().find(hir_id) {\n         hir_ty_to_ty(cx.tcx, hir_ty)"}]}