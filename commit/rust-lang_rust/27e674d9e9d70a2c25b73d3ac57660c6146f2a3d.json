{"sha": "27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "node_id": "C_kwDOAAsO6NoAKDI3ZTY3NGQ5ZTlkNzBhMmMyNWI3M2QzYWM1NzY2MGM2MTQ2ZjJhM2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T08:35:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-12T08:35:44Z"}, "message": "Rollup merge of #94150 - Enselic:synthetic-generic-parameters-in-json, r=CraftSpider\n\nrustdoc-json: Include GenericParamDefKind::Type::synthetic in JSON\n\nThe rustdoc JSON for\n\n```\npub fn f(_: impl Clone) {}\n```\n\nwill effectively be\n\n```\npub fn f<impl Clone: Clone>(_: impl Clone) {}\n```\n\nwhere a synthetic generic parameter called `impl Clone` with generic trait bound\n`Clone` is added to the function declaration.\n\nThe generated HTML filters out these generic parameters by doing\n`self.params.iter().filter(|p| !p.is_synthetic_type_param())`, because the\nsynthetic generic paramter is not of interest to regular users.\n\nFor the same reason, we should expose whether or not a generic parameter is\nsynthetic or not also in the rustdoc JSON, so that rustdoc JSON clients can also\nhave the option to hide syntehtic generic parameters.\n\n`@rustbot` modify labels: +A-rustdoc-json", "tree": {"sha": "225a28aa77bf8e73203e45b64efa0bb18c16e816", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225a28aa77bf8e73203e45b64efa0bb18c16e816"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLFtgCRBK7hj4Ov3rIwAAWYgIABAL6g/TRfRfpQuJK/OcGDO0\nVh5UiuPqO/xDGf8gsxeKWcQ9wOWhNYmo6nRXfoKvcPQ3X35U8mk2WXxGSrH7IDqX\nEGwN/WbJXrTnvmz1s4pkyJmtBiAuuZH5ofZfAw2hbbIdBAvfxJzSueHwYye8ZMUF\npYIs+w+yzEIokb0quNly6cF2KoAsdvWliIZfuDHb5J2toE8txCIF82tG9KvXgMaa\nXBXWJDhEf5m9bsbzydDrO8ah9FfCroYQhiuEomBM4TdB6EfiEWyLWtyPupveOlB4\ny1r9u74lpT1b4qq3Pc2ZdyPgp2FqcuQe7Jkp8aFF7RY41TBHPjL9YR13gUBRIk4=\n=GL/b\n-----END PGP SIGNATURE-----\n", "payload": "tree 225a28aa77bf8e73203e45b64efa0bb18c16e816\nparent 2c6a29af35a81e20f8af4c32bf1b55c59b89eccd\nparent a424f42e97f2d1696f51a4bb71f4d305dedeb847\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647074144 +0100\ncommitter GitHub <noreply@github.com> 1647074144 +0100\n\nRollup merge of #94150 - Enselic:synthetic-generic-parameters-in-json, r=CraftSpider\n\nrustdoc-json: Include GenericParamDefKind::Type::synthetic in JSON\n\nThe rustdoc JSON for\n\n```\npub fn f(_: impl Clone) {}\n```\n\nwill effectively be\n\n```\npub fn f<impl Clone: Clone>(_: impl Clone) {}\n```\n\nwhere a synthetic generic parameter called `impl Clone` with generic trait bound\n`Clone` is added to the function declaration.\n\nThe generated HTML filters out these generic parameters by doing\n`self.params.iter().filter(|p| !p.is_synthetic_type_param())`, because the\nsynthetic generic paramter is not of interest to regular users.\n\nFor the same reason, we should expose whether or not a generic parameter is\nsynthetic or not also in the rustdoc JSON, so that rustdoc JSON clients can also\nhave the option to hide syntehtic generic parameters.\n\n`@rustbot` modify labels: +A-rustdoc-json\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "html_url": "https://github.com/rust-lang/rust/commit/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c6a29af35a81e20f8af4c32bf1b55c59b89eccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6a29af35a81e20f8af4c32bf1b55c59b89eccd", "html_url": "https://github.com/rust-lang/rust/commit/2c6a29af35a81e20f8af4c32bf1b55c59b89eccd"}, {"sha": "a424f42e97f2d1696f51a4bb71f4d305dedeb847", "url": "https://api.github.com/repos/rust-lang/rust/commits/a424f42e97f2d1696f51a4bb71f4d305dedeb847", "html_url": "https://github.com/rust-lang/rust/commit/a424f42e97f2d1696f51a4bb71f4d305dedeb847"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "7ffcfada5c07987b620ee32c27cbf4a3dc7db255", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "patch": "@@ -340,9 +340,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n             Lifetime { outlives } => GenericParamDefKind::Lifetime {\n                 outlives: outlives.into_iter().map(|lt| lt.0.to_string()).collect(),\n             },\n-            Type { did: _, bounds, default, synthetic: _ } => GenericParamDefKind::Type {\n+            Type { did: _, bounds, default, synthetic } => GenericParamDefKind::Type {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n+                synthetic,\n             },\n             Const { did: _, ty, default } => {\n                 GenericParamDefKind::Const { ty: (*ty).into_tcx(tcx), default: default.map(|x| *x) }"}, {"sha": "7df880a4ed80731e3e0c2d7b671a6d4a7abc7b13", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 12;\n+pub const FORMAT_VERSION: u32 = 13;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -346,9 +346,41 @@ pub struct GenericParamDef {\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericParamDefKind {\n-    Lifetime { outlives: Vec<String> },\n-    Type { bounds: Vec<GenericBound>, default: Option<Type> },\n-    Const { ty: Type, default: Option<String> },\n+    Lifetime {\n+        outlives: Vec<String>,\n+    },\n+    Type {\n+        bounds: Vec<GenericBound>,\n+        default: Option<Type>,\n+        /// This is normally `false`, which means that this generic parameter is\n+        /// declared in the Rust source text.\n+        ///\n+        /// If it is `true`, this generic parameter has been introduced by the\n+        /// compiler behind the scenes.\n+        ///\n+        /// # Example\n+        ///\n+        /// Consider\n+        ///\n+        /// ```ignore (pseudo-rust)\n+        /// pub fn f(_: impl Trait) {}\n+        /// ```\n+        ///\n+        /// The compiler will transform this behind the scenes to\n+        ///\n+        /// ```ignore (pseudo-rust)\n+        /// pub fn f<impl Trait: Trait>(_: impl Trait) {}\n+        /// ```\n+        ///\n+        /// In this example, the generic parameter named `impl Trait` (and which\n+        /// is bound by `Trait`) is synthetic, because it was not originally in\n+        /// the Rust source text.\n+        synthetic: bool,\n+    },\n+    Const {\n+        ty: Type,\n+        default: Option<String>,\n+    },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "e777fabaa52a7f22e47fe57e3e948224d9092562", "filename": "src/test/rustdoc-json/fns/generics.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e674d9e9d70a2c25b73d3ac57660c6146f2a3d/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=27e674d9e9d70a2c25b73d3ac57660c6146f2a3d", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @set wham_id = generics.json \"$.index[*][?(@.name=='Wham')].id\"\n+pub trait Wham {}\n+\n+// @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.where_predicates\" []\n+// @count - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n+// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n+// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $wham_id\n+// @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n+pub fn one_generic_param_fn<T: Wham>(w: T) {}\n+\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n+// @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n+// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n+// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $wham_id\n+// @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $wham_id\n+pub fn one_synthetic_generic_param_fn(w: impl Wham) {}"}]}