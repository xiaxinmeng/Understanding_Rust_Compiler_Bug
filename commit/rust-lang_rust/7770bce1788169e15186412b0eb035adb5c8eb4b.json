{"sha": "7770bce1788169e15186412b0eb035adb5c8eb4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzBiY2UxNzg4MTY5ZTE1MTg2NDEyYjBlYjAzNWFkYjVjOGViNGI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T17:07:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T16:44:53Z"}, "message": "Make rustc::traits::object_safety::{astconv_object_safety_violations,is_vtable_safe_method,object_safety_violations} free functions.", "tree": {"sha": "45c2b3c5cdcd35075a4e24715359e425af30bfac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c2b3c5cdcd35075a4e24715359e425af30bfac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7770bce1788169e15186412b0eb035adb5c8eb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7770bce1788169e15186412b0eb035adb5c8eb4b", "html_url": "https://github.com/rust-lang/rust/commit/7770bce1788169e15186412b0eb035adb5c8eb4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7770bce1788169e15186412b0eb035adb5c8eb4b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1521e6d3ed756f3b2024291edbe0c9e74cb08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1521e6d3ed756f3b2024291edbe0c9e74cb08c", "html_url": "https://github.com/rust-lang/rust/commit/0b1521e6d3ed756f3b2024291edbe0c9e74cb08c"}], "stats": {"total": 103, "additions": 54, "deletions": 49}, "files": [{"sha": "f262672fdc875b92c2be93b3601febc7e009a100", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7770bce1788169e15186412b0eb035adb5c8eb4b", "patch": "@@ -54,6 +54,7 @@ use crate::infer::opaque_types;\n use crate::infer::{self, SuppressRegionErrors};\n use crate::middle::region;\n use crate::traits::error_reporting::report_object_safety_error;\n+use crate::traits::object_safety_violations;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n };\n@@ -1487,7 +1488,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0038(did) => {\n-                let violations = self.tcx.object_safety_violations(did);\n+                let violations = object_safety_violations(self.tcx, did);\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n             FailureCode::Error0317(failure_str) => {"}, {"sha": "172330dbc7ee5e35ee5b7e1cdcd88ac4cefa86e5", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7770bce1788169e15186412b0eb035adb5c8eb4b", "patch": "@@ -11,6 +11,7 @@ use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt};\n use crate::mir::interpret::ErrorHandled;\n use crate::session::DiagnosticMessageId;\n+use crate::traits::object_safety_violations;\n use crate::ty::error::ExpectedFound;\n use crate::ty::fast_reject;\n use crate::ty::fold::TypeFolder;\n@@ -915,7 +916,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n \n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n-                        let violations = self.tcx.object_safety_violations(trait_def_id);\n+                        let violations = object_safety_violations(self.tcx, trait_def_id);\n                         report_object_safety_error(self.tcx, span, trait_def_id, violations)\n                     }\n \n@@ -1079,7 +1080,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             TraitNotObjectSafe(did) => {\n-                let violations = self.tcx.object_safety_violations(did);\n+                let violations = object_safety_violations(self.tcx, did);\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n "}, {"sha": "0c315b3d6efc8780b2b539389cebe20c9714652a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7770bce1788169e15186412b0eb035adb5c8eb4b", "patch": "@@ -47,6 +47,9 @@ pub use self::coherence::{add_placeholder_note, orphan_check, overlapping_impls}\n pub use self::coherence::{OrphanCheckErr, OverlapResult};\n pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::fulfill::{FulfillmentContext, PendingPredicateObligation};\n+pub use self::object_safety::astconv_object_safety_violations;\n+pub use self::object_safety::is_vtable_safe_method;\n+pub use self::object_safety::object_safety_violations;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n@@ -1062,7 +1065,7 @@ fn vtable_methods<'tcx>(\n             let def_id = trait_method.def_id;\n \n             // Some methods cannot be called on an object; skip those.\n-            if !tcx.is_vtable_safe_method(trait_ref.def_id(), &trait_method) {\n+            if !is_vtable_safe_method(tcx, trait_ref.def_id(), &trait_method) {\n                 debug!(\"vtable_methods: not vtable safe\");\n                 return None;\n             }"}, {"sha": "bfbcb042e7a7371230b48600c710c4b6b02d5ab0", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=7770bce1788169e15186412b0eb035adb5c8eb4b", "patch": "@@ -108,54 +108,52 @@ pub enum MethodViolationCode {\n     UndispatchableReceiver,\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// Returns the object safety violations that affect\n-    /// astconv -- currently, `Self` in supertraits. This is needed\n-    /// because `object_safety_violations` can't be used during\n-    /// type collection.\n-    pub fn astconv_object_safety_violations(\n-        self,\n-        trait_def_id: DefId,\n-    ) -> Vec<ObjectSafetyViolation> {\n-        debug_assert!(self.generics_of(trait_def_id).has_self);\n-        let violations = traits::supertrait_def_ids(self, trait_def_id)\n-            .filter(|&def_id| predicates_reference_self(self, def_id, true))\n-            .map(|_| ObjectSafetyViolation::SupertraitSelf)\n-            .collect();\n+/// Returns the object safety violations that affect\n+/// astconv -- currently, `Self` in supertraits. This is needed\n+/// because `object_safety_violations` can't be used during\n+/// type collection.\n+pub fn astconv_object_safety_violations(\n+    tcx: TyCtxt<'_>,\n+    trait_def_id: DefId,\n+) -> Vec<ObjectSafetyViolation> {\n+    debug_assert!(tcx.generics_of(trait_def_id).has_self);\n+    let violations = traits::supertrait_def_ids(tcx, trait_def_id)\n+        .filter(|&def_id| predicates_reference_self(tcx, def_id, true))\n+        .map(|_| ObjectSafetyViolation::SupertraitSelf)\n+        .collect();\n \n-        debug!(\n-            \"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\",\n-            trait_def_id, violations\n-        );\n+    debug!(\"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\", trait_def_id, violations);\n \n-        violations\n-    }\n+    violations\n+}\n+\n+pub fn object_safety_violations(\n+    tcx: TyCtxt<'_>,\n+    trait_def_id: DefId,\n+) -> Vec<ObjectSafetyViolation> {\n+    debug_assert!(tcx.generics_of(trait_def_id).has_self);\n+    debug!(\"object_safety_violations: {:?}\", trait_def_id);\n \n-    pub fn object_safety_violations(self, trait_def_id: DefId) -> Vec<ObjectSafetyViolation> {\n-        debug_assert!(self.generics_of(trait_def_id).has_self);\n-        debug!(\"object_safety_violations: {:?}\", trait_def_id);\n+    traits::supertrait_def_ids(tcx, trait_def_id)\n+        .flat_map(|def_id| object_safety_violations_for_trait(tcx, def_id))\n+        .collect()\n+}\n \n-        traits::supertrait_def_ids(self, trait_def_id)\n-            .flat_map(|def_id| object_safety_violations_for_trait(self, def_id))\n-            .collect()\n+/// We say a method is *vtable safe* if it can be invoked on a trait\n+/// object. Note that object-safe traits can have some\n+/// non-vtable-safe methods, so long as they require `Self: Sized` or\n+/// otherwise ensure that they cannot be used when `Self = Trait`.\n+pub fn is_vtable_safe_method(tcx: TyCtxt<'_>, trait_def_id: DefId, method: &ty::AssocItem) -> bool {\n+    debug_assert!(tcx.generics_of(trait_def_id).has_self);\n+    debug!(\"is_vtable_safe_method({:?}, {:?})\", trait_def_id, method);\n+    // Any method that has a `Self: Sized` bound cannot be called.\n+    if generics_require_sized_self(tcx, method.def_id) {\n+        return false;\n     }\n \n-    /// We say a method is *vtable safe* if it can be invoked on a trait\n-    /// object. Note that object-safe traits can have some\n-    /// non-vtable-safe methods, so long as they require `Self: Sized` or\n-    /// otherwise ensure that they cannot be used when `Self = Trait`.\n-    pub fn is_vtable_safe_method(self, trait_def_id: DefId, method: &ty::AssocItem) -> bool {\n-        debug_assert!(self.generics_of(trait_def_id).has_self);\n-        debug!(\"is_vtable_safe_method({:?}, {:?})\", trait_def_id, method);\n-        // Any method that has a `Self: Sized` bound cannot be called.\n-        if generics_require_sized_self(self, method.def_id) {\n-            return false;\n-        }\n-\n-        match virtual_call_violation_for_method(self, trait_def_id, method) {\n-            None | Some(MethodViolationCode::WhereClauseReferencesSelf) => true,\n-            Some(_) => false,\n-        }\n+    match virtual_call_violation_for_method(tcx, trait_def_id, method) {\n+        None | Some(MethodViolationCode::WhereClauseReferencesSelf) => true,\n+        Some(_) => false,\n     }\n }\n \n@@ -724,5 +722,5 @@ fn contains_illegal_self_type_reference<'tcx>(\n }\n \n pub(super) fn is_object_safe_provider(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n-    tcx.object_safety_violations(trait_def_id).is_empty()\n+    object_safety_violations(tcx, trait_def_id).is_empty()\n }"}, {"sha": "82c97af1be4ed4e5872ab5b8a862195e4f96283c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7770bce1788169e15186412b0eb035adb5c8eb4b", "patch": "@@ -13,6 +13,7 @@ use errors::{Applicability, DiagnosticId};\n use rustc::hir::intravisit::Visitor;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n+use rustc::traits::astconv_object_safety_violations;\n use rustc::traits::error_reporting::report_object_safety_error;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n@@ -1453,7 +1454,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // to avoid ICEs.\n         for item in &regular_traits {\n             let object_safety_violations =\n-                tcx.astconv_object_safety_violations(item.trait_ref().def_id());\n+                astconv_object_safety_violations(tcx, item.trait_ref().def_id());\n             if !object_safety_violations.is_empty() {\n                 report_object_safety_error(\n                     tcx,"}, {"sha": "0be21ad58be4b2898ad700e1acb36426bb7c0190", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7770bce1788169e15186412b0eb035adb5c8eb4b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=7770bce1788169e15186412b0eb035adb5c8eb4b", "patch": "@@ -38,6 +38,7 @@ use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::traits;\n use rustc::traits::error_reporting::report_object_safety_error;\n+use rustc::traits::object_safety_violations;\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n@@ -519,7 +520,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn report_object_unsafe_cast(&self, fcx: &FnCtxt<'a, 'tcx>, did: DefId) {\n-        let violations = fcx.tcx.object_safety_violations(did);\n+        let violations = object_safety_violations(fcx.tcx, did);\n         let mut err = report_object_safety_error(fcx.tcx, self.cast_span, did, violations);\n         err.note(&format!(\"required by cast to type '{}'\", fcx.ty_to_string(self.cast_ty)));\n         err.emit();"}]}