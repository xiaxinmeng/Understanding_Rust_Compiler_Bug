{"sha": "53f1bed83ab3124ddc26c8e1e28666ae8a0f1842", "node_id": "C_kwDOAAsO6NoAKDUzZjFiZWQ4M2FiMzEyNGRkYzI2YzhlMWUyODY2NmFlOGEwZjE4NDI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-10T20:18:26Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-14T20:05:35Z"}, "message": "Use UrlPartsBuilder and remove `join_with_slash`", "tree": {"sha": "da8c85cee098349aa687a0b2a852096c40a7e012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8c85cee098349aa687a0b2a852096c40a7e012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842", "html_url": "https://github.com/rust-lang/rust/commit/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b19cf9f7438c1ef715e5fb9a4dff508f8e74dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b19cf9f7438c1ef715e5fb9a4dff508f8e74dae", "html_url": "https://github.com/rust-lang/rust/commit/6b19cf9f7438c1ef715e5fb9a4dff508f8e74dae"}], "stats": {"total": 52, "additions": 16, "deletions": 36}, "files": [{"sha": "342c15855d2144e2deb8edb3558af10bdf45583e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=53f1bed83ab3124ddc26c8e1e28666ae8a0f1842", "patch": "@@ -503,28 +503,6 @@ crate enum HrefError {\n     NotInExternalCache,\n }\n \n-// This mostly works with sequences of symbols, but sometimes the first item\n-// comes from a string, and in that case we want to trim any trailing `/`.\n-// `syms` can be empty.\n-crate fn join_with_slash(first: Option<&str>, syms: &[Symbol]) -> String {\n-    // 64 bytes covers 99.9%+ of cases.\n-    let mut s = String::with_capacity(64);\n-    if let Some(first) = first {\n-        s.push_str(first.trim_end_matches('/'));\n-        if !syms.is_empty() {\n-            s.push('/');\n-        }\n-    }\n-    if !syms.is_empty() {\n-        s.push_str(&syms[0].as_str());\n-        for sym in &syms[1..] {\n-            s.push('/');\n-            s.push_str(&sym.as_str());\n-        }\n-    }\n-    s\n-}\n-\n // Panics if `syms` is empty.\n crate fn join_with_double_colon(syms: &[Symbol]) -> String {\n     // 64 bytes covers 99.9%+ of cases."}, {"sha": "eda637acfc5b9e74bcd7037a1f44127ebb9f21f7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1bed83ab3124ddc26c8e1e28666ae8a0f1842/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=53f1bed83ab3124ddc26c8e1e28666ae8a0f1842", "patch": "@@ -26,12 +26,13 @@ use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n-    join_with_double_colon, join_with_slash, print_abi_with_space, print_constness_with_space,\n-    print_where_clause, Buffer, PrintWithSpace,\n+    join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n+    Buffer, PrintWithSpace,\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n+use crate::html::url_parts_builder::UrlPartsBuilder;\n \n use askama::Template;\n \n@@ -854,20 +855,21 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         }\n     }\n \n+    let mut js_src_path: UrlPartsBuilder = std::iter::repeat(\"..\")\n+        .take(cx.current.len())\n+        .chain(std::iter::once(\"implementors\"))\n+        .collect();\n+    if it.def_id.is_local() {\n+        js_src_path.extend(cx.current.iter().copied());\n+    } else {\n+        let (ref path, _) = cache.external_paths[&it.def_id.expect_def_id()];\n+        js_src_path.extend(path[..path.len() - 1].iter().copied());\n+    }\n+    js_src_path.push_fmt(format_args!(\"{}.{}.js\", it.type_(), it.name.unwrap()));\n     write!(\n         w,\n-        \"<script type=\\\"text/javascript\\\" \\\n-                 src=\\\"{root_path}/implementors/{path}/{ty}.{name}.js\\\" async>\\\n-         </script>\",\n-        root_path = vec![\"..\"; cx.current.len()].join(\"/\"),\n-        path = if it.def_id.is_local() {\n-            join_with_slash(None, &cx.current)\n-        } else {\n-            let (ref path, _) = cache.external_paths[&it.def_id.expect_def_id()];\n-            join_with_slash(None, &path[..path.len() - 1])\n-        },\n-        ty = it.type_(),\n-        name = it.name.unwrap()\n+        \"<script type=\\\"text/javascript\\\" src=\\\"{src}\\\" async></script>\",\n+        src = js_src_path.finish(),\n     );\n }\n "}]}