{"sha": "01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmRiOGUzOGE1YmE4YzBkYjhjY2FhZWFiNjZiMWVkZDMxNWFlY2E=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-05-26T04:53:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:27:24Z"}, "message": "Disable `future_prelude_collision` for 2021 edition", "tree": {"sha": "0a6bcbeb5b2ea210a193bff938a4ab7098c8a7af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6bcbeb5b2ea210a193bff938a4ab7098c8a7af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca", "html_url": "https://github.com/rust-lang/rust/commit/01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79388aa067e27824973f8f25fd6c4775d35388fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/79388aa067e27824973f8f25fd6c4775d35388fd", "html_url": "https://github.com/rust-lang/rust/commit/79388aa067e27824973f8f25fd6c4775d35388fd"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "ba4635cc1bf4fa0fa70625df7a7d4529a84259bc", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 46, "deletions": 42, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=01bdb8e38a5ba8c0db8ccaaeab66b1edd315aeca", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_session::lint::builtin::FUTURE_PRELUDE_COLLISION;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -199,48 +200,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let pick =\n             self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n-        if let sym::try_from | sym::try_into = segment.ident.name {\n-            if let probe::PickKind::TraitPick = pick.kind {\n-                if !matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n-                    self.tcx.struct_span_lint_hir(\n-                        FUTURE_PRELUDE_COLLISION,\n-                        call_expr.hir_id,\n-                        call_expr.span,\n-                        |lint| {\n-                            let sp = call_expr.span;\n-                            let trait_name =\n-                                self.tcx.def_path_str(pick.item.container.assert_trait());\n-\n-                            let mut lint = lint.build(&format!(\n-                                \"trait method `{}` will become ambiguous in Rust 2021\",\n-                                segment.ident.name\n-                            ));\n-\n-                            if let Ok(self_expr) =\n-                                self.sess().source_map().span_to_snippet(self_expr.span)\n-                            {\n-                                lint.span_suggestion(\n-                                    sp,\n-                                    \"disambiguate the associated function\",\n-                                    format!(\n-                                        \"{}::{}({})\",\n-                                        trait_name, segment.ident.name, self_expr,\n-                                    ),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            } else {\n-                                lint.span_help(\n-                                    sp,\n-                                    &format!(\n-                                        \"disambiguate the associated function with `{}::{}(...)`\",\n-                                        trait_name, segment.ident,\n-                                    ),\n-                                );\n-                            }\n-\n-                            lint.emit();\n-                        },\n-                    );\n+        if span.edition() < Edition::Edition2021 {\n+            if let sym::try_from | sym::try_into = segment.ident.name {\n+                if let probe::PickKind::TraitPick = pick.kind {\n+                    if !matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core)\n+                    {\n+                        self.tcx.struct_span_lint_hir(\n+                            FUTURE_PRELUDE_COLLISION,\n+                            call_expr.hir_id,\n+                            call_expr.span,\n+                            |lint| {\n+                                let sp = call_expr.span;\n+                                let trait_name =\n+                                    self.tcx.def_path_str(pick.item.container.assert_trait());\n+\n+                                let mut lint = lint.build(&format!(\n+                                    \"trait method `{}` will become ambiguous in Rust 2021\",\n+                                    segment.ident.name\n+                                ));\n+\n+                                if let Ok(self_expr) =\n+                                    self.sess().source_map().span_to_snippet(self_expr.span)\n+                                {\n+                                    lint.span_suggestion(\n+                                        sp,\n+                                        \"disambiguate the associated function\",\n+                                        format!(\n+                                            \"{}::{}({})\",\n+                                            trait_name, segment.ident.name, self_expr,\n+                                        ),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                } else {\n+                                    lint.span_help(\n+                                        sp,\n+                                        &format!(\n+                                            \"disambiguate the associated function with `{}::{}(...)`\",\n+                                            trait_name, segment.ident,\n+                                        ),\n+                                    );\n+                                }\n+\n+                                lint.emit();\n+                            },\n+                        );\n+                    }\n                 }\n             }\n         }"}]}