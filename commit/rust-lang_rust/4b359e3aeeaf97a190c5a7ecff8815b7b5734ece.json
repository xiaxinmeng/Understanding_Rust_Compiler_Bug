{"sha": "4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzU5ZTNhZWVhZjk3YTE5MGM1YTdlY2ZmODgxNWI3YjU3MzRlY2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T03:13:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T06:58:37Z"}, "message": "More test fixes!", "tree": {"sha": "0502e3fcb9ceaa41d36c707e95baf0d7740fc3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0502e3fcb9ceaa41d36c707e95baf0d7740fc3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "html_url": "https://github.com/rust-lang/rust/commit/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee9921aaedb26de3cac4c1c174888528f68bbd3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9921aaedb26de3cac4c1c174888528f68bbd3f", "html_url": "https://github.com/rust-lang/rust/commit/ee9921aaedb26de3cac4c1c174888528f68bbd3f"}], "stats": {"total": 378, "additions": 50, "deletions": 328}, "files": [{"sha": "5e08f90ce1c536368aef61df7e5577e675932a1e", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -1066,6 +1066,7 @@ mod tests {\n     }\n \n     #[allow(deprecated)]\n+    #[test]\n     fn test_append() {\n         {\n             let mut m = DList::new();"}, {"sha": "e5753f6cc2e7857e6e76c3a7cc3d4eaa5e151b89", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -1171,134 +1171,6 @@ impl_multiplicative! { uint, 1 }\n impl_multiplicative! { f32,  1.0 }\n impl_multiplicative! { f64,  1.0 }\n \n-<<<<<<< HEAD\n-=======\n-/// A trait for iterators over elements which can be compared to one another.\n-#[unstable = \"recently renamed for new extension trait conventions\"]\n-pub trait IteratorOrdExt<A> {\n-    /// Consumes the entire iterator to return the maximum element.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// let a = [1i, 2, 3, 4, 5];\n-    /// assert!(a.iter().max().unwrap() == &5);\n-    /// ```\n-    fn max(self) -> Option<A>;\n-\n-    /// Consumes the entire iterator to return the minimum element.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// let a = [1i, 2, 3, 4, 5];\n-    /// assert!(a.iter().min().unwrap() == &1);\n-    /// ```\n-    fn min(self) -> Option<A>;\n-\n-    /// `min_max` finds the minimum and maximum elements in the iterator.\n-    ///\n-    /// The return type `MinMaxResult` is an enum of three variants:\n-    ///\n-    /// - `NoElements` if the iterator is empty.\n-    /// - `OneElement(x)` if the iterator has exactly one element.\n-    /// - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two\n-    ///    values are equal if and only if there is more than one\n-    ///    element in the iterator and all elements are equal.\n-    ///\n-    /// On an iterator of length `n`, `min_max` does `1.5 * n` comparisons,\n-    /// and so is faster than calling `min` and `max` separately which does `2 * n` comparisons.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n-    ///\n-    /// let v: [int; 0] = [];\n-    /// assert_eq!(v.iter().min_max(), NoElements);\n-    ///\n-    /// let v = [1i];\n-    /// assert!(v.iter().min_max() == OneElement(&1));\n-    ///\n-    /// let v = [1i, 2, 3, 4, 5];\n-    /// assert!(v.iter().min_max() == MinMax(&1, &5));\n-    ///\n-    /// let v = [1i, 2, 3, 4, 5, 6];\n-    /// assert!(v.iter().min_max() == MinMax(&1, &6));\n-    ///\n-    /// let v = [1i, 1, 1, 1];\n-    /// assert!(v.iter().min_max() == MinMax(&1, &1));\n-    /// ```\n-    fn min_max(self) -> MinMaxResult<A>;\n-}\n-\n-#[unstable = \"trait is unstable\"]\n-impl<T, I> IteratorOrdExt<T> for I where I: Iterator<Item=T>, T: Ord {\n-    #[inline]\n-    fn max(self) -> Option<T> {\n-        self.fold(None, |max, x| {\n-            match max {\n-                None    => Some(x),\n-                Some(y) => Some(cmp::max(x, y))\n-            }\n-        })\n-    }\n-\n-    #[inline]\n-    fn min(self) -> Option<T> {\n-        self.fold(None, |min, x| {\n-            match min {\n-                None    => Some(x),\n-                Some(y) => Some(cmp::min(x, y))\n-            }\n-        })\n-    }\n-\n-    fn min_max(mut self) -> MinMaxResult<T> {\n-        let (mut min, mut max) = match self.next() {\n-            None => return NoElements,\n-            Some(x) => {\n-                match self.next() {\n-                    None => return OneElement(x),\n-                    Some(y) => if x < y {(x, y)} else {(y,x)}\n-                }\n-            }\n-        };\n-\n-        loop {\n-            // `first` and `second` are the two next elements we want to look at.\n-            // We first compare `first` and `second` (#1). The smaller one is then compared to\n-            // current minimum (#2). The larger one is compared to current maximum (#3). This\n-            // way we do 3 comparisons for 2 elements.\n-            let first = match self.next() {\n-                None => break,\n-                Some(x) => x\n-            };\n-            let second = match self.next() {\n-                None => {\n-                    if first < min {\n-                        min = first;\n-                    } else if first > max {\n-                        max = first;\n-                    }\n-                    break;\n-                }\n-                Some(x) => x\n-            };\n-            if first < second {\n-                if first < min {min = first;}\n-                if max < second {max = second;}\n-            } else {\n-                if second < min {min = second;}\n-                if max < first {max = first;}\n-            }\n-        }\n-\n-        MinMax(min, max)\n-    }\n-}\n-\n->>>>>>> parent of f031671... Remove i suffix in docs\n /// `MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail.\n #[derive(Clone, PartialEq, Show)]\n #[unstable = \"unclear whether such a fine-grained result is widely useful\"]\n@@ -1386,35 +1258,6 @@ impl<T, D, I> ExactSizeIterator for Cloned<I> where\n     I: ExactSizeIterator + Iterator<Item=D>,\n {}\n \n-<<<<<<< HEAD\n-=======\n-#[unstable = \"recently renamed for extension trait conventions\"]\n-/// An extension trait for cloneable iterators.\n-pub trait CloneIteratorExt {\n-    /// Repeats an iterator endlessly\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// use std::iter::{CloneIteratorExt, count};\n-    ///\n-    /// let a = count(1i,1i).take(1);\n-    /// let mut cy = a.cycle();\n-    /// assert_eq!(cy.next(), Some(1));\n-    /// assert_eq!(cy.next(), Some(1));\n-    /// ```\n-    #[stable]\n-    fn cycle(self) -> Cycle<Self>;\n-}\n-\n-impl<I> CloneIteratorExt for I where I: Iterator + Clone {\n-    #[inline]\n-    fn cycle(self) -> Cycle<I> {\n-        Cycle{orig: self.clone(), iter: self}\n-    }\n-}\n-\n->>>>>>> parent of f031671... Remove i suffix in docs\n /// An iterator that repeats endlessly\n #[derive(Clone, Copy)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"}, {"sha": "73db72d0313e6af1d527305e5061b3d145d226e8", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -769,7 +769,7 @@ fn test_range_step_inclusive() {\n #[test]\n fn test_reverse() {\n     let mut ys = [1i, 2, 3, 4, 5];\n-    ys.iter_mut().reverse_();\n+    ys.iter_mut().reverse_in_place();\n     assert!(ys == [5, 4, 3, 2, 1]);\n }\n "}, {"sha": "64cc490f4b163e7d7c1d841b3f85a69087c0f8f4", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -587,7 +587,7 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n mod tests {\n     use self::NodeLabels::*;\n     use super::{Id, Labeller, Nodes, Edges, GraphWalk, render};\n-    use super::LabelText::{mod, LabelStr, EscStr};\n+    use super::LabelText::{self, LabelStr, EscStr};\n     use std::io::IoResult;\n     use std::borrow::IntoCow;\n     use std::iter::repeat;"}, {"sha": "815fc0e7ec7ad399b078a165f09b0b37ae3237a4", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -27,7 +27,7 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n ///\n /// [1]: D. J. Bernstein, [*ChaCha, a variant of\n /// Salsa20*](http://cr.yp.to/chacha.html)\n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n pub struct ChaChaRng {\n     buffer:  [u32; STATE_WORDS], // Internal buffer of output\n     state:   [u32; STATE_WORDS], // Initial state\n@@ -284,7 +284,7 @@ mod test {\n \n     #[test]\n     fn test_rng_clone() {\n-        let seed : &[_] = &[0u32, ..8];\n+        let seed : &[_] = &[0u32; 8];\n         let mut rng: ChaChaRng = SeedableRng::from_seed(seed);\n         let mut clone = rng.clone();\n         for _ in range(0u, 16) {"}, {"sha": "c4dd08f9917e2dcbc95349b9449406adf91d3934", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -403,7 +403,7 @@ pub trait SeedableRng<Seed>: Rng {\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n #[allow(missing_copy_implementations)]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct XorShiftRng {\n     x: u32,\n     y: u32,"}, {"sha": "d30a6ff1cd9d5f1e5b5f1e97c711fa405674ce06", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -22,7 +22,7 @@ use super::cres;\n use super::{RegionVariableOrigin, SubregionOrigin, TypeTrace, MiscVariable};\n \n use middle::region;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};\n use middle::ty::{ReEmpty, ReStatic, ReInfer, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n@@ -69,7 +69,7 @@ pub enum Verify<'tcx> {\n     VerifyGenericBound(GenericKind<'tcx>, SubregionOrigin<'tcx>, Region, Vec<Region>),\n }\n \n-#[deriving(Clone, Show, PartialEq, Eq)]\n+#[derive(Clone, Show, PartialEq, Eq)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),"}, {"sha": "98e2b4b9dddb575bbba99fe53160840f43c7d138", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -22,7 +22,7 @@ use syntax::codemap;\n use syntax::diagnostic;\n use syntax::diagnostic::{Emitter, Handler, Level, mk_handler};\n \n-use std::ffi::{mod, CString};\n+use std::ffi::{self, CString};\n use std::io::Command;\n use std::io::fs;\n use std::iter::Unfold;\n@@ -32,7 +32,7 @@ use std::mem;\n use std::sync::{Arc, Mutex};\n use std::sync::mpsc::channel;\n use std::thread;\n-use libc::{mod, c_uint, c_int, c_void};\n+use libc::{self, c_uint, c_int, c_void};\n \n #[derive(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {"}, {"sha": "edcfaae0f802d32482aab9ca1f785b2d142d7999", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -88,7 +88,7 @@ use util::nodemap::NodeMap;\n \n use arena::TypedArena;\n use libc::{c_uint, uint64_t};\n-use std::ffi::{mod, CString};\n+use std::ffi::{self, CString};\n use std::cell::{Cell, RefCell};\n use std::collections::HashSet;\n use std::mem;"}, {"sha": "80e7e7060595675b2e09485b529fb4dcb0981f4d", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -195,10 +195,10 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         ast::PatRegion(ref inner, mutbl) => {\n             let inner_ty = fcx.infcx().next_ty_var();\n \n-            // SNAP c894171 remove this `if`-`else` entirely after next snapshot\n+            // SNAP b2085d9 remove this `if`-`else` entirely after next snapshot\n             let mutbl = if mutbl == ast::MutImmutable {\n                 ty::deref(fcx.infcx().shallow_resolve(expected), true)\n-                   .map(|mt| mt.mutbl).unwrap_or(ast::MutImmutable);\n+                   .map(|mt| mt.mutbl).unwrap_or(ast::MutImmutable)\n             } else {\n                 mutbl\n             };"}, {"sha": "c7df5ed8453fd3a990658694248c632f5f65dfef", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -92,7 +92,7 @@ use middle::region::CodeExtent;\n use middle::traits;\n use middle::ty::{ReScope};\n use middle::ty::{self, Ty, MethodCall};\n-use middle::infer::{mod, GenericKind};\n+use middle::infer::{self, GenericKind};\n use middle::pat_util;\n use util::ppaux::{ty_to_string, Repr};\n "}, {"sha": "a157d9172749855309f8ab4143cd96957d1dfab8", "filename": "src/libserialize/json_stage0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibserialize%2Fjson_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibserialize%2Fjson_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson_stage0.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -2298,7 +2298,7 @@ impl ::Decoder<DecoderError> for Decoder {\n }\n \n /// A trait for converting values to JSON\n-pub trait ToJson for Sized? {\n+pub trait ToJson {\n     /// Converts the value of `self` to an instance of JSON\n     fn to_json(&self) -> Json;\n }"}, {"sha": "fd37bb63230af40d1bc0332328d6f03cc2912845", "filename": "src/libserialize/serialize_stage0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibserialize%2Fserialize_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibserialize%2Fserialize_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize_stage0.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -172,7 +172,7 @@ pub trait Decoder<E> {\n     fn error(&mut self, err: &str) -> E;\n }\n \n-pub trait Encodable<S:Encoder<E>, E> for Sized? {\n+pub trait Encodable<S:Encoder<E>, E> {\n     fn encode(&self, s: &mut S) -> Result<(), E>;\n }\n "}, {"sha": "2d013a8a5b830325c083a49e35c3ccfa0d1fd342", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -128,8 +128,8 @@ impl DynamicLibrary {\n         // This function should have a lifetime constraint of 'a on\n         // T but that feature is still unimplemented\n \n+        let raw_string = CString::from_slice(symbol.as_bytes());\n         let maybe_symbol_value = dl::check_for_errors_in(|| {\n-            let raw_string = CString::from_slice(symbol.as_bytes());\n             dl::symbol(self.handle, raw_string.as_ptr())\n         });\n "}, {"sha": "b9f226c5aca73e83a227f4fc81b1116bc4cf5a0d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -253,8 +253,6 @@ pub mod num;\n \n /* Runtime and platform support */\n \n-pub mod thread_local; // first for macros\n-\n #[cfg_attr(stage0, macro_escape)]\n #[cfg_attr(not(stage0), macro_use)]\n pub mod thread_local;"}, {"sha": "8855a7e5293ac18a04566cfc05cfccef1c6761f9", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -245,7 +245,7 @@ pub mod reader;\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n pub struct StdRng {\n     rng: IsaacWordRng,\n }\n@@ -322,7 +322,7 @@ static THREAD_RNG_RESEED_THRESHOLD: uint = 32_768;\n type ThreadRngInner = reseeding::ReseedingRng<StdRng, ThreadRngReseeder>;\n \n /// The thread-local RNG.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ThreadRng {\n     rng: Rc<RefCell<ThreadRngInner>>,\n }"}, {"sha": "7b667416b171418f0dedaaedaf6694a8de70da59", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -466,19 +466,17 @@ fn free_handle(handle: *mut ()) {\n \n #[cfg(test)]\n mod tests {\n-    use c_str::ToCStr;\n+    use prelude::v1::*;\n+    use str;\n+    use ffi::CString;\n+    use super::make_command_line;\n \n     #[test]\n     fn test_make_command_line() {\n-        use prelude::v1::*;\n-        use str;\n-        use c_str::CString;\n-        use super::make_command_line;\n-\n         fn test_wrapper(prog: &str, args: &[&str]) -> String {\n-            make_command_line(&prog.to_c_str(),\n+            make_command_line(&CString::from_slice(prog.as_bytes()),\n                               args.iter()\n-                                  .map(|a| a.to_c_str())\n+                                  .map(|a| CString::from_slice(a.as_bytes()))\n                                   .collect::<Vec<CString>>()\n                                   .as_slice())\n         }"}, {"sha": "0810d4ee93ac700cf5c650d7cc6fa983524b5935", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemImpl(_, polarity, _, _, _, ref items) => {\n+            ast::ItemImpl(_, polarity, _, _, _, _) => {\n                 match polarity {\n                     ast::ImplPolarity::Negative => {\n                         self.gate_feature(\"optin_builtin_traits\",\n@@ -294,18 +294,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         i.span,\n                         \"the new orphan check rules will eventually be strictly enforced\");\n                 }\n-\n-                for item in items.iter() {\n-                    match *item {\n-                        ast::MethodImplItem(_) => {}\n-                        ast::TypeImplItem(ref typedef) => {\n-                            self.gate_feature(\"associated_types\",\n-                                              typedef.span,\n-                                              \"associated types are \\\n-                                               experimental\")\n-                        }\n-                    }\n-                }\n             }\n \n             _ => {}"}, {"sha": "32f8f5ee3d63b97c35aa94e14070129269204dac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -1244,7 +1244,7 @@ impl<'a> Parser<'a> {\n \n         let _ = self.parse_ret_ty();\n \n-        self.obsolete(ty_closure_span, ObsoleteClosureType);\n+        self.obsolete(ty_closure_span, ObsoleteSyntax::ClosureType);\n \n         TyInfer\n     }\n@@ -3897,16 +3897,10 @@ impl<'a> Parser<'a> {\n                                 _ => {\n                                     let e = self.mk_mac_expr(span.lo,\n                                                              span.hi,\n-<<<<<<< HEAD\n-                                                             macro.and_then(|m| m.node));\n+                                                             mac.and_then(|m| m.node));\n                                     let e = self.parse_dot_or_call_expr_with(e);\n                                     let e = self.parse_more_binops(e, 0);\n                                     let e = self.parse_assign_expr_with(e);\n-=======\n-                                                             mac.and_then(|m| m.node));\n-                                    let e =\n-                                        self.parse_dot_or_call_expr_with(e);\n->>>>>>> kmc/macro-reform\n                                     self.handle_expression_like_statement(\n                                         e,\n                                         ast::DUMMY_NODE_ID,\n@@ -5082,7 +5076,7 @@ impl<'a> Parser<'a> {\n             }\n             let _tref = Parser::trait_ref_from_ident(ident, span);\n \n-            self.obsolete(span, ObsoleteForSized);\n+            self.obsolete(span, ObsoleteSyntax::ForSized);\n \n             None\n         } else {"}, {"sha": "57520257fe1b3f9e54fe61f4e7ac363e8b082f1e", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -65,8 +65,8 @@ impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n         visit::walk_ty(self, t);\n     }\n \n-    fn visit_mac(&mut self, macro: &ast::Mac) {\n-        visit::walk_mac(self, macro);\n+    fn visit_mac(&mut self, mac: &ast::Mac) {\n+        visit::walk_mac(self, mac);\n     }\n }\n "}, {"sha": "33824af6187a2ff6757d379737ff7c13600cfc4f", "filename": "src/test/auxiliary/traitimpl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -10,7 +10,7 @@\n \n // Test inherant trait impls work cross-crait.\n \n-pub trait Bar<'a> for ?Sized : 'a {}\n+pub trait Bar<'a> : 'a {}\n \n impl<'a> Bar<'a> {\n     pub fn bar(&self) {}"}, {"sha": "060960f0dbc88cd40b16ede1144175c463a0bfdb", "filename": "src/test/auxiliary/two_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fauxiliary%2Ftwo_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fauxiliary%2Ftwo_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftwo_macros.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// force-host\n-\n #[macro_export]\n macro_rules! macro_one { () => (\"one\") }\n "}, {"sha": "c55e24e81adc220c9759e9aef7e8feb0888a4940", "filename": "src/test/compile-fail/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints in a where clause where the type being\n // equated appears in a supertrait.\n \n-#![feature(associated_types)]\n-\n pub trait Vehicle {\n     type Color;\n "}, {"sha": "abaf79fb4cb1bc6cfc440466379b0765cc144540", "filename": "src/test/compile-fail/associated-type-projection-from-supertrait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-supertrait.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints in a where clause where the type being\n // equated appears in a supertrait.\n \n-#![feature(associated_types)]\n-\n pub trait Vehicle {\n     type Color;\n "}, {"sha": "b1194154911c98c2773891636d681d402509f102", "filename": "src/test/compile-fail/associated-types-binding-to-type-defined-in-supertrait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-binding-to-type-defined-in-supertrait.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints in a where clause where the type being\n // equated appears in a supertrait.\n \n-#![feature(associated_types)]\n-\n pub trait Vehicle {\n     type Color;\n "}, {"sha": "d95b94f0067605d87e9f1a828d77ab70f12b292d", "filename": "src/test/compile-fail/associated-types-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fassociated-types-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fassociated-types-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-feature-gate.rs?ref=ee9921aaedb26de3cac4c1c174888528f68bbd3f", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Get {\n-    type Value; //~ ERROR associated types are experimental\n-    fn get(&self) -> Get::Value;\n-}\n-\n-struct Struct {\n-    x: int,\n-}\n-\n-impl Get for Struct {\n-    type Value = int;   //~ ERROR associated types are experimental\n-    fn get(&self) -> int {\n-        self.x\n-    }\n-}\n-\n-fn main() {\n-    let s = Struct {\n-        x: 100,\n-    };\n-    assert_eq!(s.get(), 100);\n-}\n-"}, {"sha": "b04b83e575bf445dd526a5494e34a4ca24e7e1e6", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -11,8 +11,6 @@\n // Test that we report an error if the trait ref in an qualified type\n // uses invalid type arguments.\n \n-#![feature(associated_types)]\n-\n trait Foo<T> {\n     type Bar;\n     fn get_bar(&self) -> Self::Bar;"}, {"sha": "6c79105abee8fa13be6aa24d5b24182950a96b15", "filename": "src/test/compile-fail/associated-types-issue-17359.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -11,8 +11,6 @@\n // Test that we do not ICE when an impl is missing an associated type (and that we report\n // a useful error, of course).\n \n-#![feature(associated_types)]\n-\n trait Trait {\n     type Type;\n }"}, {"sha": "4c8b5de4c864bb2f3064a86df30fc2ffcbb964bd", "filename": "src/test/compile-fail/gated-default-type-param-usage.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs?ref=ee9921aaedb26de3cac4c1c174888528f68bbd3f", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:default_type_params_xc.rs\n-\n-#![deny(default_type_param_usage)]\n-\n-extern crate default_type_params_xc;\n-\n-pub struct FooAlloc;\n-\n-pub type VecFoo<T> = default_type_params_xc::FakeVec<T, FooAlloc>;\n-//~^ ERROR: default type parameters are experimental\n-\n-fn main() {}"}, {"sha": "65575d4fa85074b03bc0700e94d78fad293fcf95", "filename": "src/test/compile-fail/gated-default-type-params.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fgated-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fgated-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-default-type-params.rs?ref=ee9921aaedb26de3cac4c1c174888528f68bbd3f", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Heap;\n-\n-struct Vec<T, A = Heap>; //~ ERROR: default type parameters are experimental\n-\n-fn main() {}"}, {"sha": "cc7ba785e7e6589ffeee8e272df9e1864f4584d1", "filename": "src/test/compile-fail/gated-glob-imports.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9921aaedb26de3cac4c1c174888528f68bbd3f/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs?ref=ee9921aaedb26de3cac4c1c174888528f68bbd3f", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::*;\n-//~^ ERROR: glob import statements are experimental\n-\n-fn main() {}"}, {"sha": "0e85551e2161caee9f4882ef0731057bcb95fc67", "filename": "src/test/compile-fail/macros-no-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fmacros-no-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fmacros-no-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-no-semicolon.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     assert!(1 == 2)\n-    assert!(3 == 4) //~ ERROR expected one of `.`, `;`, or `}`, found `assert`\n+    assert!(3 == 4) //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `assert`\n     println!(\"hello\");\n }\n "}, {"sha": "81985a3d6aa5b19f3da644850142c768db6288c2", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -13,8 +13,8 @@ fn main() {\n \n     // (separate lines to ensure the spans are accurate)\n \n-    // SNAP c894171 uncomment this after the next snapshot\n-    // NOTE(stage0) just in case tidy doesn't check SNAP's in tests\n+    // SNAP b2085d9 uncomment this after the next snapshot\n+    // NOTE(stage0) just in case tidy doesn't check snap's in tests\n     // let &_ // ~ ERROR expected `&mut int`, found `&_`\n     //    = foo;\n     let &mut _ = foo;"}, {"sha": "816314529b5e8763206e68a8357454fd329c8c50", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait X {}\n \n trait Iter {"}, {"sha": "9b7d10b0d0f761a3c4f6edf45bb8c0361aa4b06b", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -20,7 +20,7 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for {}\n+trait T {}\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented"}, {"sha": "e846501be6ee5fc64854843b5ad73a0b929e3fe2", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -18,8 +18,6 @@ pub fn main() {\n     unsafe {\n         let foo = &A as *const u8;\n         assert_eq!(str::from_utf8_unchecked(&A), \"hi\");\n-        assert_eq!(String::from_raw_buf_len(foo, A.len()), \"hi\".to_string());\n-        assert_eq!(String::from_raw_buf_len(C, B.len()), \"hi\".to_string());\n         assert!(*C == A[0]);\n         assert!(*(&B[0] as *const u8) == A[0]);\n     }"}, {"sha": "e81244d4beabc20c1b9a1269db02b6c97b367180", "filename": "src/test/run-pass/method-recursive-blanket-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -16,7 +16,7 @@\n use std::kinds::Sized;\n \n // Note: this must be generic for the problem to show up\n-trait Foo<A> for ?Sized {\n+trait Foo<A> {\n     fn foo(&self);\n }\n "}, {"sha": "2bdc883b9ce59482f0c6ddf7037a7921662994c6", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -27,7 +27,7 @@ struct Foo<'a,'tcx:'a> {\n \n impl<'a,'tcx> Foo<'a,'tcx> {\n     fn bother(&mut self) -> int {\n-        self.elaborate_bounds(|this| {\n+        self.elaborate_bounds(box |this| {\n             // (*) Here: type of `this` is `&'f0 Foo<&'f1, '_2>`,\n             // where `'f0` and `'f1` are fresh, free regions that\n             // result from the bound regions on the closure, and `'2`\n@@ -50,7 +50,7 @@ impl<'a,'tcx> Foo<'a,'tcx> {\n \n     fn elaborate_bounds(\n         &mut self,\n-        mk_cand: for<'b>|this: &mut Foo<'b, 'tcx>| -> int)\n+        mut mk_cand: Box<for<'b> FnMut(&mut Foo<'b, 'tcx>) -> int>)\n         -> int\n     {\n         mk_cand(self)"}, {"sha": "6f807fc34995eaae94270d5318b3abe647788454", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ffi;\n use std::io::process::{Command, ProcessOutput};\n use std::os;\n use std::rt::unwind::try;\n@@ -34,7 +35,8 @@ fn start(argc: int, argv: *const *const u8) -> int {\n \n     let args = unsafe {\n         range(0, argc as uint).map(|i| {\n-            String::from_raw_buf(*argv.offset(i as int)).into_bytes()\n+            let ptr = *argv.offset(i as int) as *const _;\n+            ffi::c_str_to_bytes(&ptr).to_vec()\n         }).collect::<Vec<_>>()\n     };\n     let me = args[0].as_slice();"}, {"sha": "e6dd8d46952eb4b1627ceef0ac3d70bde9fd5d39", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -12,9 +12,9 @@\n \n // Test syntax checks for `?Sized` syntax.\n \n-trait T1 for ?Sized {}\n-pub trait T2 for ?Sized {}\n-trait T3<X: T1> for ?Sized: T2 {}\n+trait T1 {}\n+pub trait T2 {}\n+trait T3<X: T1> : T2 {}\n trait T4<X: ?Sized> {}\n trait T5<X: ?Sized, Y> {}\n trait T6<Y, X: ?Sized> {}"}, {"sha": "c7e8b2a05ec5b697bf68ebcbd92b6b29c060763f", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -22,7 +22,7 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for ?Sized {}\n+trait T {}\n fn f3<X: T+?Sized>(x: &X) {\n     f3::<X>(x);\n }\n@@ -32,7 +32,7 @@ fn f4<X: T>(x: &X) {\n }\n \n // Self type.\n-trait T2 for ?Sized {\n+trait T2 {\n     fn f() -> Box<Self>;\n }\n struct S;\n@@ -48,7 +48,7 @@ fn f6<X: T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n \n-trait T3 for ?Sized {\n+trait T3 {\n     fn f() -> Box<Self>;\n }\n impl T3 for S {"}, {"sha": "7b2c35aa08d300c2ae4137ad44c1e127eb2c74cb", "filename": "src/test/run-pass/vec-macro-no-std.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b359e3aeeaf97a190c5a7ecff8815b7b5734ece/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs?ref=4b359e3aeeaf97a190c5a7ecff8815b7b5734ece", "patch": "@@ -11,6 +11,8 @@\n #![feature(lang_items)]\n #![no_std]\n \n+extern crate \"std\" as other;\n+\n #[macro_use]\n extern crate core;\n extern crate libc;\n@@ -22,10 +24,6 @@ use core::option::Option::Some;\n use core::slice::SliceExt;\n use collections::vec::Vec;\n \n-#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n-\n // Issue #16806\n \n #[start]"}]}