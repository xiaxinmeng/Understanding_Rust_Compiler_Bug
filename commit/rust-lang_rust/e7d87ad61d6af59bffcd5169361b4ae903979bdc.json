{"sha": "e7d87ad61d6af59bffcd5169361b4ae903979bdc", "node_id": "C_kwDOAAsO6NoAKGU3ZDg3YWQ2MWQ2YWY1OWJmZmNkNTE2OTM2MWI0YWU5MDM5NzliZGM", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2023-01-24T03:19:31Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2023-01-24T03:19:31Z"}, "message": "Merge remote-tracking branch 'upstream/master' into subtree-sync-2023-01-24", "tree": {"sha": "75bc6581c24c7e077769c98f6c0d5f882516147b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75bc6581c24c7e077769c98f6c0d5f882516147b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d87ad61d6af59bffcd5169361b4ae903979bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d87ad61d6af59bffcd5169361b4ae903979bdc", "html_url": "https://github.com/rust-lang/rust/commit/e7d87ad61d6af59bffcd5169361b4ae903979bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d87ad61d6af59bffcd5169361b4ae903979bdc/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c2286d5c0fe45765cb6bd182b32722173b0942", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c2286d5c0fe45765cb6bd182b32722173b0942", "html_url": "https://github.com/rust-lang/rust/commit/19c2286d5c0fe45765cb6bd182b32722173b0942"}, {"sha": "aae222c974a982e878f279b95bd1a9d0166ff229", "url": "https://api.github.com/repos/rust-lang/rust/commits/aae222c974a982e878f279b95bd1a9d0166ff229", "html_url": "https://github.com/rust-lang/rust/commit/aae222c974a982e878f279b95bd1a9d0166ff229"}], "stats": {"total": 2746, "additions": 2561, "deletions": 185}, "files": [{"sha": "8bfb5834519cd67f17890fc80280093970c20f5e", "filename": ".github/workflows/check_diff.yml", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/.github%2Fworkflows%2Fcheck_diff.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/.github%2Fworkflows%2Fcheck_diff.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fcheck_diff.yml?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,33 @@\n+name: Diff Check\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      clone_url:\n+        description: 'Git url of a rustfmt fork to compare against the latest master rustfmt'\n+        required: true\n+      branch_name:\n+        description: 'Name of the feature branch on the forked repo'\n+        required: true\n+      commit_hash:\n+        description: 'Optional commit hash from the feature branch'\n+        required: false\n+      rustfmt_configs:\n+        description: 'Optional comma separated list of rustfmt config options to pass when running the feature branch'\n+        required: false\n+\n+jobs:\n+  diff_check:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - name: checkout\n+      uses: actions/checkout@v3\n+\n+    - name: install rustup\n+      run: |\n+        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\n+        sh rustup-init.sh -y --default-toolchain none\n+        rustup target add x86_64-unknown-linux-gnu\n+\n+    - name: check diff\n+      run: bash ${GITHUB_WORKSPACE}/ci/check_diff.sh ${{ github.event.inputs.clone_url }} ${{ github.event.inputs.branch_name }} ${{ github.event.inputs.commit_hash }} ${{ github.event.inputs.rustfmt_configs }}"}, {"sha": "314ce0e84c61b666ef16536e44fb681030034a18", "filename": ".github/workflows/integration.yml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/.github%2Fworkflows%2Fintegration.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/.github%2Fworkflows%2Fintegration.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fintegration.yml?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -27,7 +27,6 @@ jobs:\n           tempdir,\n           futures-rs,\n           rust-clippy,\n-          failure,\n         ]\n         include:\n           # Allowed Failures\n@@ -63,9 +62,6 @@ jobs:\n           # Original comment was: temporal build failure due to breaking changes in the nightly compiler\n           - integration: rust-semverver\n             allow-failure: true\n-          # Can be moved back to include section after https://github.com/rust-lang-nursery/failure/pull/298 is merged\n-          - integration: failure\n-            allow-failure: true\n \n     steps:\n     - name: checkout"}, {"sha": "e9ce930dabc680f9874bcf11f2784b42f64f55d3", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -840,7 +840,7 @@ from formatting an attribute #3665\n - Fix formatting of raw string literals #2983\n - Handle chain with try operators with spaces #2986\n - Use correct shape in Visual tuple rewriting #2987\n-- Impove formatting of arguments with `visual_style = \"Visual\"` option #2988\n+- Improve formatting of arguments with `visual_style = \"Visual\"` option #2988\n - Change `print_diff` to output the correct line number 992b179\n - Propagate errors about failing to rewrite a macro 6f318e3\n - Handle formatting of long function signature #3010"}, {"sha": "e51755289706c14f33e77ca25570b31ac20d3b48", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -476,7 +476,7 @@ checksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \n [[package]]\n name = \"rustfmt-config_proc_macro\"\n-version = \"0.2.0\"\n+version = \"0.3.0\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "7438335eaa78faf606cbf9ca1298414f3120161a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -57,7 +57,7 @@ unicode-segmentation = \"1.9\"\n unicode-width = \"0.1\"\n unicode_categories = \"0.1\"\n \n-rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n+rustfmt-config_proc_macro = { version = \"0.3\", path = \"config_proc_macro\" }\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "49e7e4e64892af081de2587366ba322c9f15a662", "filename": "Configurations.md", "status": "modified", "additions": 179, "deletions": 6, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,6 +1,6 @@\n # Configuring Rustfmt\n \n-Rustfmt is designed to be very configurable. You can create a TOML file called `rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent directory and it will apply the options in that file. If none of these directories contain such a file, both your home directory and a directory called `rustfmt` in your [global config directory](https://docs.rs/dirs/1.0.4/dirs/fn.config_dir.html) (e.g. `.config/rustfmt/`) are checked as well.\n+Rustfmt is designed to be very configurable. You can create a TOML file called `rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent directory and it will apply the options in that file. If none of these directories contain such a file, both your home directory and a directory called `rustfmt` in your [global config directory](https://docs.rs/dirs/4.0.0/dirs/fn.config_dir.html) (e.g. `.config/rustfmt/`) are checked as well.\n \n A possible content of `rustfmt.toml` or `.rustfmt.toml` might look like this:\n \n@@ -425,7 +425,7 @@ fn example() {\n \n ## `comment_width`\n \n-Maximum length of comments. No effect unless`wrap_comments = true`.\n+Maximum length of comments. No effect unless `wrap_comments = true`.\n \n - **Default value**: `80`\n - **Possible values**: any positive integer\n@@ -589,7 +589,7 @@ doesn't get ignored when aligning.\n #### `0` (default):\n \n ```rust\n-enum Bar {\n+enum Foo {\n     A = 0,\n     Bb = 1,\n     RandomLongVariantGoesHere = 10,\n@@ -645,7 +645,8 @@ trailing whitespaces.\n \n ## `fn_args_layout`\n \n-Control the layout of arguments in a function\n+This option is deprecated and has been renamed to `fn_params_layout` to better communicate that\n+it affects the layout of parameters in function signatures.\n \n - **Default value**: `\"Tall\"`\n - **Possible values**: `\"Compressed\"`, `\"Tall\"`, `\"Vertical\"`\n@@ -753,6 +754,8 @@ trait Lorem {\n }\n ```\n \n+See also [`fn_params_layout`](#fn_params_layout)\n+\n ## `fn_call_width`\n \n Maximum width of the args of a function call before falling back to vertical formatting.\n@@ -765,6 +768,117 @@ By default this option is set as a percentage of [`max_width`](#max_width) provi\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n+## `fn_params_layout`\n+\n+Control the layout of parameters in function signatures.\n+\n+- **Default value**: `\"Tall\"`\n+- **Possible values**: `\"Compressed\"`, `\"Tall\"`, `\"Vertical\"`\n+- **Stable**: Yes\n+\n+#### `\"Tall\"` (default):\n+\n+```rust\n+trait Lorem {\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n+        // body\n+    }\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"Compressed\"`:\n+\n+```rust\n+trait Lorem {\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);\n+\n+    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {\n+        // body\n+    }\n+\n+    fn lorem(\n+        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n+        adipiscing: Adipiscing, elit: Elit,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,\n+        adipiscing: Adipiscing, elit: Elit,\n+    ) {\n+        // body\n+    }\n+}\n+```\n+\n+#### `\"Vertical\"`:\n+\n+```rust\n+trait Lorem {\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+    ) {\n+        // body\n+    }\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    );\n+\n+    fn lorem(\n+        ipsum: Ipsum,\n+        dolor: Dolor,\n+        sit: Sit,\n+        amet: Amet,\n+        consectetur: Consectetur,\n+        adipiscing: Adipiscing,\n+        elit: Elit,\n+    ) {\n+        // body\n+    }\n+}\n+```\n+\n+\n ## `fn_single_line`\n \n Put single-expression functions on a single line\n@@ -1014,6 +1128,62 @@ macro_rules! foo {\n \n See also [`format_macro_matchers`](#format_macro_matchers).\n \n+## `skip_macro_invocations`\n+\n+Skip formatting the bodies of macro invocations with the following names.\n+\n+rustfmt will not format any macro invocation for macros with names set in this list.\n+Including the special value \"*\" will prevent any macro invocations from being formatted.\n+\n+Note: This option does not have any impact on how rustfmt formats macro definitions.\n+\n+- **Default value**: `[]`\n+- **Possible values**: a list of macro name idents, `[\"name_0\", \"name_1\", ..., \"*\"]`\n+- **Stable**: No (tracking issue: [#5346](https://github.com/rust-lang/rustfmt/issues/5346))\n+\n+#### `[]` (default):\n+\n+rustfmt will follow its standard approach to formatting macro invocations.\n+\n+No macro invocations will be skipped based on their name. More information about rustfmt's standard macro invocation formatting behavior can be found in [#5437](https://github.com/rust-lang/rustfmt/discussions/5437).\n+\n+```rust\n+lorem!(\n+    const _: u8 = 0;\n+);\n+\n+ipsum!(\n+    const _: u8 = 0;\n+);\n+```\n+\n+#### `[\"lorem\"]`:\n+\n+The named macro invocations will be skipped.\n+\n+```rust\n+lorem!(\n+        const _: u8 = 0;\n+);\n+\n+ipsum!(\n+    const _: u8 = 0;\n+);\n+```\n+\n+#### `[\"*\"]`:\n+\n+The special selector `*` will skip all macro invocations.\n+\n+```rust\n+lorem!(\n+        const _: u8 = 0;\n+);\n+\n+ipsum!(\n+        const _: u8 = 0;\n+);\n+```\n \n ## `format_strings`\n \n@@ -1687,13 +1857,16 @@ pub enum Foo {}\n \n ## `imports_granularity`\n \n-How imports should be grouped into `use` statements. Imports will be merged or split to the configured level of granularity.\n+Controls how imports are structured in `use` statements. Imports will be merged or split to the configured level of granularity.\n+\n+Similar to other `import` related configuration options, this option operates within the bounds of user-defined groups of imports. See [`group_imports`](#group_imports) for more information on import groups.\n+\n+Note that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.\n \n - **Default value**: `Preserve`\n - **Possible values**: `Preserve`, `Crate`, `Module`, `Item`, `One`\n - **Stable**: No (tracking issue: [#4991](https://github.com/rust-lang/rustfmt/issues/4991))\n \n-Note that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.\n \n #### `Preserve` (default):\n "}, {"sha": "61abc87eec9ffffbb40b92d471ba65c24dad0412", "filename": "Processes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Processes.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/Processes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Processes.md?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -2,7 +2,7 @@ This document outlines processes regarding management of rustfmt.\n \n # Stabilising an Option\n \n-In this Section, we describe how to stabilise an option of the rustfmt's configration.\n+In this Section, we describe how to stabilise an option of the rustfmt's configuration.\n \n ## Conditions\n "}, {"sha": "69dae1fff7b4d8f373e342fc10ee2584ec1f1809", "filename": "ci/build_and_test.bat", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fbuild_and_test.bat", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fbuild_and_test.bat", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbuild_and_test.bat?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,5 @@\n set \"RUSTFLAGS=-D warnings\"\n+set \"RUSTFMT_CI=1\"\n \n :: Print version information\n rustc -Vv || exit /b 1"}, {"sha": "94991853263ce4bbb7c47815234d785763db660d", "filename": "ci/build_and_test.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fbuild_and_test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fbuild_and_test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbuild_and_test.sh?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -3,6 +3,7 @@\n set -euo pipefail\n \n export RUSTFLAGS=\"-D warnings\"\n+export RUSTFMT_CI=1\n \n # Print version information\n rustc -Vv"}, {"sha": "062c2dd8673abcfb3a9f37721ae56fbfb617f482", "filename": "ci/check_diff.sh", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fcheck_diff.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fcheck_diff.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fcheck_diff.sh?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,199 @@\n+#!/bin/bash\n+\n+function print_usage() {\n+    echo \"usage check_diff REMOTE_REPO FEATURE_BRANCH [COMMIT_HASH] [OPTIONAL_RUSTFMT_CONFIGS]\"\n+}\n+\n+if [ $# -le 1 ]; then\n+    print_usage\n+    exit 1\n+fi\n+\n+REMOTE_REPO=$1\n+FEATURE_BRANCH=$2\n+OPTIONAL_COMMIT_HASH=$3\n+OPTIONAL_RUSTFMT_CONFIGS=$4\n+\n+# OUTPUT array used to collect all the status of running diffs on various repos\n+STATUSES=()\n+\n+# Clone a git repository and cd into it.\n+#\n+# Parameters:\n+# $1: git clone url\n+# $2: directory where the repo should be cloned\n+function clone_repo() {\n+    GIT_TERMINAL_PROMPT=0 git clone --quiet $1 --depth 1 $2 && cd $2\n+}\n+\n+# Initialize Git submoduels for the repo.\n+#\n+# Parameters\n+# $1: list of directories to initialize\n+function init_submodules() {\n+    git submodule update --init $1\n+}\n+\n+# Run rusfmt with the --check flag to see if a diff is produced.\n+#\n+# Parameters:\n+# $1: Path to a rustfmt binary\n+# $2: Output file path for the diff\n+# $3: Any additional configuration options to pass to rustfmt\n+#\n+# Globlas:\n+# $OPTIONAL_RUSTFMT_CONFIGS: Optional configs passed to the script from $4\n+function create_diff() {\n+    local config;\n+    if [ -z \"$3\" ]; then\n+        config=\"--config=error_on_line_overflow=false,error_on_unformatted=false\"\n+    else\n+        config=\"--config=error_on_line_overflow=false,error_on_unformatted=false,$OPTIONAL_RUSTFMT_CONFIGS\"\n+    fi\n+\n+    for i in `find . | grep \"\\.rs$\"`\n+    do\n+        $1 --unstable-features --skip-children --check --color=always $config $i >> $2 2>/dev/null\n+    done\n+}\n+\n+# Run the master rustfmt binary and the feature branch binary in the current directory and compare the diffs\n+#\n+# Parameters\n+# $1: Name of the repository (used for logging)\n+#\n+# Globlas:\n+# $RUSFMT_BIN: Path to the rustfmt master binary. Created when running `compile_rustfmt`\n+# $FEATURE_BIN: Path to the rustfmt feature binary. Created when running `compile_rustfmt`\n+# $OPTIONAL_RUSTFMT_CONFIGS: Optional configs passed to the script from $4\n+function check_diff() {\n+    echo \"running rustfmt (master) on $1\"\n+    create_diff $RUSFMT_BIN rustfmt_diff.txt\n+\n+    echo \"running rustfmt (feature) on $1\"\n+    create_diff $FEATURE_BIN feature_diff.txt $OPTIONAL_RUSTFMT_CONFIGS\n+\n+    echo \"checking diff\"\n+    local diff;\n+    # we don't add color to the diff since we added color when running rustfmt --check.\n+    # tail -n + 6 removes the git diff header info\n+    # cut -c 2- removes the leading diff characters(\"+\",\"-\",\" \") from running git diff.\n+    # Again, the diff output we care about was already added when we ran rustfmt --check\n+    diff=$(\n+        git --no-pager diff --color=never \\\n+        --unified=0 --no-index rustfmt_diff.txt feature_diff.txt 2>&1 | tail -n +6 | cut -c 2-\n+    )\n+\n+    if [ -z \"$diff\" ]; then\n+        echo \"no diff detected between rustfmt and the feture branch\"\n+        return 0\n+    else\n+        echo \"$diff\"\n+        return 1\n+    fi\n+}\n+\n+# Compiles and produces two rustfmt binaries.\n+# One for the current master, and another for the feature branch\n+#\n+# Parameters:\n+# $1: Directory where rustfmt will be cloned\n+#\n+# Globlas:\n+# $REMOTE_REPO: Clone URL to the rustfmt fork that we want to test\n+# $FEATURE_BRANCH: Name of the feature branch\n+# $OPTIONAL_COMMIT_HASH: Optional commit hash that will be checked out if provided\n+function compile_rustfmt() {\n+    RUSTFMT_REPO=\"https://github.com/rust-lang/rustfmt.git\"\n+    clone_repo $RUSTFMT_REPO $1\n+    git remote add feature $REMOTE_REPO\n+    git fetch feature $FEATURE_BRANCH\n+\n+    cargo build --release --bin rustfmt && cp target/release/rustfmt $1/rustfmt\n+    if [ -z \"$OPTIONAL_COMMIT_HASH\" ]; then\n+        git switch $FEATURE_BRANCH\n+    else\n+        git switch $OPTIONAL_COMMIT_HASH --detach\n+    fi\n+    cargo build --release --bin rustfmt && cp target/release/rustfmt $1/feature_rustfmt\n+    RUSFMT_BIN=$1/rustfmt\n+    FEATURE_BIN=$1/feature_rustfmt\n+}\n+\n+# Check the diff for running rustfmt and the feature branch on all the .rs files in the repo.\n+#\n+# Parameters\n+# $1: Clone URL for the repo\n+# $2: Name of the repo (mostly used for logging)\n+# $3: Path to any submodules that should be initialized\n+function check_repo() {\n+    WORKDIR=$(pwd)\n+    REPO_URL=$1\n+    REPO_NAME=$2\n+    SUBMODULES=$3\n+\n+    local tmp_dir;\n+    tmp_dir=$(mktemp -d -t $REPO_NAME-XXXXXXXX)\n+    clone_repo $REPO_URL $tmp_dir\n+\n+    if [ ! -z \"$SUBMODULES\" ]; then\n+        init_submodules $SUBMODULES\n+    fi\n+\n+    check_diff $REPO_NAME\n+    # append the status of running `check_diff` to the STATUSES array\n+    STATUSES+=($?)\n+\n+    echo \"removing tmp_dir $tmp_dir\"\n+    rm -rf $tmp_dir\n+    cd $WORKDIR\n+}\n+\n+function main() {\n+    tmp_dir=$(mktemp -d -t rustfmt-XXXXXXXX)\n+    echo Created tmp_dir $tmp_dir\n+\n+    compile_rustfmt $tmp_dir\n+\n+    # run checks\n+    check_repo \"https://github.com/rust-lang/rust.git\" rust-lang-rust\n+    check_repo \"https://github.com/rust-lang/cargo.git\" cargo\n+    check_repo \"https://github.com/rust-lang/miri.git\" miri\n+    check_repo \"https://github.com/rust-lang/rust-analyzer.git\" rust-analyzer\n+    check_repo \"https://github.com/bitflags/bitflags.git\" bitflags\n+    check_repo \"https://github.com/rust-lang/log.git\" log\n+    check_repo \"https://github.com/rust-lang/mdBook.git\" mdBook\n+    check_repo \"https://github.com/rust-lang/packed_simd.git\" packed_simd\n+    check_repo \"https://github.com/rust-lang/rust-semverver.git\" check_repo\n+    check_repo \"https://github.com/Stebalien/tempfile.git\" tempfile\n+    check_repo \"https://github.com/rust-lang/futures-rs.git\" futures-rs\n+    check_repo \"https://github.com/dtolnay/anyhow.git\" anyhow\n+    check_repo \"https://github.com/dtolnay/thiserror.git\" thiserror\n+    check_repo \"https://github.com/dtolnay/syn.git\" syn\n+    check_repo \"https://github.com/serde-rs/serde.git\" serde\n+    check_repo \"https://github.com/rust-lang/rustlings.git\" rustlings\n+    check_repo \"https://github.com/rust-lang/rustup.git\" rustup\n+    check_repo \"https://github.com/SergioBenitez/Rocket.git\" Rocket\n+    check_repo \"https://github.com/rustls/rustls.git\" rustls\n+    check_repo \"https://github.com/rust-lang/rust-bindgen.git\" rust-bindgen\n+    check_repo \"https://github.com/hyperium/hyper.git\" hyper\n+    check_repo \"https://github.com/actix/actix.git\" actix\n+    check_repo \"https://github.com/denoland/deno.git\" denoland_deno\n+\n+    # cleanup temp dir\n+    echo removing tmp_dir $tmp_dir\n+    rm -rf $tmp_dir\n+\n+    # figure out the exit code\n+    for status in ${STATUSES[@]}\n+    do\n+        if [ $status -eq 1 ]; then\n+            echo \"formatting diff found \ud83d\udc94\"\n+            return 1\n+        fi\n+    done\n+\n+    echo \"no diff found \ud83d\ude0a\"\n+}\n+\n+main"}, {"sha": "19d502bc5c7bdd854f6c187b71ce2f0213f631de", "filename": "ci/integration.sh", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fintegration.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/ci%2Fintegration.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration.sh?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -91,14 +91,28 @@ case ${INTEGRATION} in\n         cd -\n         ;;\n     crater)\n-        git clone --depth=1 https://github.com/rust-lang-nursery/${INTEGRATION}.git\n+        git clone --depth=1 https://github.com/rust-lang/${INTEGRATION}.git\n         cd ${INTEGRATION}\n         show_head\n         check_fmt_with_lib_tests\n         cd -\n         ;;\n+    bitflags)\n+        git clone --depth=1 https://github.com/bitflags/${INTEGRATION}.git\n+        cd ${INTEGRATION}\n+        show_head\n+        check_fmt_with_all_tests\n+        cd -\n+        ;;\n+    error-chain | tempdir)\n+        git clone --depth=1 https://github.com/rust-lang-deprecated/${INTEGRATION}.git\n+        cd ${INTEGRATION}\n+        show_head\n+        check_fmt_with_all_tests\n+        cd -\n+        ;;\n     *)\n-        git clone --depth=1 https://github.com/rust-lang-nursery/${INTEGRATION}.git\n+        git clone --depth=1 https://github.com/rust-lang/${INTEGRATION}.git\n         cd ${INTEGRATION}\n         show_head\n         check_fmt_with_all_tests"}, {"sha": "49f2f72a8d2196323aeefce78a22fdd8b0afd80d", "filename": "config_proc_macro/Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2FCargo.lock?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -22,7 +22,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-config_proc_macro\"\n-version = \"0.2.0\"\n+version = \"0.3.0\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "d10d0469cc401ffe3564c93f7eb1b2033cf31bb9", "filename": "config_proc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2FCargo.toml?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"rustfmt-config_proc_macro\"\n-version = \"0.2.0\"\n+version = \"0.3.0\"\n edition = \"2018\"\n description = \"A collection of procedural macros for rustfmt\"\n license = \"Apache-2.0/MIT\""}, {"sha": "dd18ff572cb1cd28daee3d0925f459557ae202fd", "filename": "config_proc_macro/src/attrs.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fattrs.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,8 +1,10 @@\n //! This module provides utilities for handling attributes on variants\n-//! of `config_type` enum. Currently there are two types of attributes\n-//! that could appear on the variants of `config_type` enum: `doc_hint`\n-//! and `value`. Both comes in the form of name-value pair whose value\n-//! is string literal.\n+//! of `config_type` enum. Currently there are the following attributes\n+//! that could appear on the variants of `config_type` enum:\n+//!\n+//! - `doc_hint`: name-value pair whose value is string literal\n+//! - `value`: name-value pair whose value is string literal\n+//! - `unstable_variant`: name only\n \n /// Returns the value of the first `doc_hint` attribute in the given slice or\n /// `None` if `doc_hint` attribute is not available.\n@@ -27,6 +29,11 @@ pub fn find_config_value(attrs: &[syn::Attribute]) -> Option<String> {\n     attrs.iter().filter_map(config_value).next()\n }\n \n+/// Returns `true` if the there is at least one `unstable` attribute in the given slice.\n+pub fn any_unstable_variant(attrs: &[syn::Attribute]) -> bool {\n+    attrs.iter().any(is_unstable_variant)\n+}\n+\n /// Returns a string literal value if the given attribute is `value`\n /// attribute or `None` otherwise.\n pub fn config_value(attr: &syn::Attribute) -> Option<String> {\n@@ -38,13 +45,25 @@ pub fn is_config_value(attr: &syn::Attribute) -> bool {\n     is_attr_name_value(attr, \"value\")\n }\n \n+/// Returns `true` if the given attribute is an `unstable` attribute.\n+pub fn is_unstable_variant(attr: &syn::Attribute) -> bool {\n+    is_attr_path(attr, \"unstable_variant\")\n+}\n+\n fn is_attr_name_value(attr: &syn::Attribute, name: &str) -> bool {\n     attr.parse_meta().ok().map_or(false, |meta| match meta {\n         syn::Meta::NameValue(syn::MetaNameValue { ref path, .. }) if path.is_ident(name) => true,\n         _ => false,\n     })\n }\n \n+fn is_attr_path(attr: &syn::Attribute, name: &str) -> bool {\n+    attr.parse_meta().ok().map_or(false, |meta| match meta {\n+        syn::Meta::Path(path) if path.is_ident(name) => true,\n+        _ => false,\n+    })\n+}\n+\n fn get_name_value_str_lit(attr: &syn::Attribute, name: &str) -> Option<String> {\n     attr.parse_meta().ok().and_then(|meta| match meta {\n         syn::Meta::NameValue(syn::MetaNameValue {"}, {"sha": "731a7ea06077bf5dc7d677b3295310b2bbd7b942", "filename": "config_proc_macro/src/item_enum.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Fsrc%2Fitem_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Fsrc%2Fitem_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fitem_enum.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,5 +1,6 @@\n use proc_macro2::TokenStream;\n-use quote::quote;\n+use quote::{quote, quote_spanned};\n+use syn::spanned::Spanned;\n \n use crate::attrs::*;\n use crate::utils::*;\n@@ -47,25 +48,50 @@ fn process_variant(variant: &syn::Variant) -> TokenStream {\n     let metas = variant\n         .attrs\n         .iter()\n-        .filter(|attr| !is_doc_hint(attr) && !is_config_value(attr));\n+        .filter(|attr| !is_doc_hint(attr) && !is_config_value(attr) && !is_unstable_variant(attr));\n     let attrs = fold_quote(metas, |meta| quote!(#meta));\n     let syn::Variant { ident, fields, .. } = variant;\n     quote!(#attrs #ident #fields)\n }\n \n+/// Return the correct syntax to pattern match on the enum variant, discarding all\n+/// internal field data.\n+fn fields_in_variant(variant: &syn::Variant) -> TokenStream {\n+    // With thanks to https://stackoverflow.com/a/65182902\n+    match &variant.fields {\n+        syn::Fields::Unnamed(_) => quote_spanned! { variant.span() => (..) },\n+        syn::Fields::Unit => quote_spanned! { variant.span() => },\n+        syn::Fields::Named(_) => quote_spanned! { variant.span() => {..} },\n+    }\n+}\n+\n fn impl_doc_hint(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n     let doc_hint = variants\n         .iter()\n         .map(doc_hint_of_variant)\n         .collect::<Vec<_>>()\n         .join(\"|\");\n     let doc_hint = format!(\"[{}]\", doc_hint);\n+\n+    let variant_stables = variants\n+        .iter()\n+        .map(|v| (&v.ident, fields_in_variant(&v), !unstable_of_variant(v)));\n+    let match_patterns = fold_quote(variant_stables, |(v, fields, stable)| {\n+        quote! {\n+            #ident::#v #fields => #stable,\n+        }\n+    });\n     quote! {\n         use crate::config::ConfigType;\n         impl ConfigType for #ident {\n             fn doc_hint() -> String {\n                 #doc_hint.to_owned()\n             }\n+            fn stable_variant(&self) -> bool {\n+                match self {\n+                    #match_patterns\n+                }\n+            }\n         }\n     }\n }\n@@ -123,13 +149,21 @@ fn impl_from_str(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n }\n \n fn doc_hint_of_variant(variant: &syn::Variant) -> String {\n-    find_doc_hint(&variant.attrs).unwrap_or(variant.ident.to_string())\n+    let mut text = find_doc_hint(&variant.attrs).unwrap_or(variant.ident.to_string());\n+    if unstable_of_variant(&variant) {\n+        text.push_str(\" (unstable)\")\n+    };\n+    text\n }\n \n fn config_value_of_variant(variant: &syn::Variant) -> String {\n     find_config_value(&variant.attrs).unwrap_or(variant.ident.to_string())\n }\n \n+fn unstable_of_variant(variant: &syn::Variant) -> bool {\n+    any_unstable_variant(&variant.attrs)\n+}\n+\n fn impl_serde(ident: &syn::Ident, variants: &Variants) -> TokenStream {\n     let arms = fold_quote(variants.iter(), |v| {\n         let v_ident = &v.ident;"}, {"sha": "0c54c132c97d8f3abb79a0126bfdd5d80af8c35d", "filename": "config_proc_macro/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Flib.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -69,3 +69,16 @@ pub fn stable_only_test(_args: TokenStream, input: TokenStream) -> TokenStream {\n         TokenStream::from_str(\"\").unwrap()\n     }\n }\n+\n+/// Used to conditionally output the TokenStream for tests that should be run as part of rustfmts\n+/// test suite, but should be ignored when running in the rust-lang/rust test suite.\n+#[proc_macro_attribute]\n+pub fn rustfmt_only_ci_test(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    if option_env!(\"RUSTFMT_CI\").is_some() {\n+        input\n+    } else {\n+        let mut token_stream = TokenStream::from_str(\"#[ignore]\").unwrap();\n+        token_stream.extend(input);\n+        token_stream\n+    }\n+}"}, {"sha": "c8a83e39c9efc656d1d411de343a8fdb0aa23cbb", "filename": "config_proc_macro/tests/smoke.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Ftests%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/config_proc_macro%2Ftests%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Ftests%2Fsmoke.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,6 +1,7 @@\n pub mod config {\n     pub trait ConfigType: Sized {\n         fn doc_hint() -> String;\n+        fn stable_variant(&self) -> bool;\n     }\n }\n "}, {"sha": "f8ed76d2e6f9edac645141113e7e50d135282b9b", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-21\"\n+channel = \"nightly-2022-08-06\"\n components = [\"rustc-dev\"]"}, {"sha": "5648e1254ed7cd14d947a117d071bb7572fbdd61", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -336,7 +336,7 @@ impl Rewrite for ast::Attribute {\n         } else {\n             let should_skip = self\n                 .ident()\n-                .map(|s| context.skip_context.skip_attribute(s.name.as_str()))\n+                .map(|s| context.skip_context.attributes.skip(s.name.as_str()))\n                 .unwrap_or(false);\n             let prefix = attr_prefix(self);\n \n@@ -390,7 +390,7 @@ impl Rewrite for [ast::Attribute] {\n \n         // Determine if the source text is annotated with `#[rustfmt::skip::attributes(derive)]`\n         // or `#![rustfmt::skip::attributes(derive)]`\n-        let skip_derives = context.skip_context.skip_attribute(\"derive\");\n+        let skip_derives = context.skip_context.attributes.skip(\"derive\");\n \n         // This is not just a simple map because we need to handle doc comments\n         // (where we take as many doc comment attributes as possible) and possibly"}, {"sha": "be64559e8774593abd5ab9c93a6b8f5c68a39f13", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -136,7 +136,7 @@ fn make_opts() -> Options {\n         \"l\",\n         \"files-with-diff\",\n         \"Prints the names of mismatched files that were formatted. Prints the names of \\\n-         files that would be formated when used with `--check` mode. \",\n+         files that would be formatted when used with `--check` mode. \",\n     );\n     opts.optmulti(\n         \"\","}, {"sha": "2b714b68df00e39f97a4324b1f0764e57449face", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -198,12 +198,10 @@ fn convert_message_format_to_rustfmt_args(\n             Ok(())\n         }\n         \"human\" => Ok(()),\n-        _ => {\n-            return Err(format!(\n-                \"invalid --message-format value: {}. Allowed values are: short|json|human\",\n-                message_format\n-            ));\n-        }\n+        _ => Err(format!(\n+            \"invalid --message-format value: {}. Allowed values are: short|json|human\",\n+            message_format\n+        )),\n     }\n }\n \n@@ -215,7 +213,7 @@ fn print_usage_to_stderr(reason: &str) {\n         .expect(\"failed to write to stderr\");\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum Verbosity {\n     Verbose,\n     Normal,"}, {"sha": "696326e4f94061acf918fabcc62d355851e03cc3", "filename": "src/cargo-fmt/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fcargo-fmt%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fcargo-fmt%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Ftest%2Fmod.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -70,9 +70,9 @@ fn mandatory_separator() {\n             .is_err()\n     );\n     assert!(\n-        !Opts::command()\n+        Opts::command()\n             .try_get_matches_from(&[\"test\", \"--\", \"--emit\"])\n-            .is_err()\n+            .is_ok()\n     );\n }\n "}, {"sha": "39b8d6878097d369df7f8ab52f3be00d77a2312d", "filename": "src/chains.rs", "status": "modified", "additions": 87, "deletions": 33, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -70,10 +70,64 @@ use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::Shape;\n use crate::source_map::SpanUtils;\n use crate::utils::{\n-    self, first_line_width, last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n-    trimmed_last_line_width, wrap_str,\n+    self, filtered_str_fits, first_line_width, last_line_extendable, last_line_width, mk_sp,\n+    rewrite_ident, trimmed_last_line_width, wrap_str,\n };\n \n+/// Provides the original input contents from the span\n+/// of a chain element with trailing spaces trimmed.\n+fn format_overflow_style(span: Span, context: &RewriteContext<'_>) -> Option<String> {\n+    context.snippet_provider.span_to_snippet(span).map(|s| {\n+        s.lines()\n+            .map(|l| l.trim_end())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\")\n+    })\n+}\n+\n+fn format_chain_item(\n+    item: &ChainItem,\n+    context: &RewriteContext<'_>,\n+    rewrite_shape: Shape,\n+    allow_overflow: bool,\n+) -> Option<String> {\n+    if allow_overflow {\n+        item.rewrite(context, rewrite_shape)\n+            .or_else(|| format_overflow_style(item.span, context))\n+    } else {\n+        item.rewrite(context, rewrite_shape)\n+    }\n+}\n+\n+fn get_block_child_shape(\n+    prev_ends_with_block: bool,\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+) -> Shape {\n+    if prev_ends_with_block {\n+        shape.block_indent(0)\n+    } else {\n+        shape.block_indent(context.config.tab_spaces())\n+    }\n+    .with_max_width(context.config)\n+}\n+\n+fn get_visual_style_child_shape(\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    offset: usize,\n+    parent_overflowing: bool,\n+) -> Option<Shape> {\n+    if !parent_overflowing {\n+        shape\n+            .with_max_width(context.config)\n+            .offset_left(offset)\n+            .map(|s| s.visual_indent(0))\n+    } else {\n+        Some(shape.visual_indent(offset))\n+    }\n+}\n+\n pub(crate) fn rewrite_chain(\n     expr: &ast::Expr,\n     context: &RewriteContext<'_>,\n@@ -496,6 +550,8 @@ struct ChainFormatterShared<'a> {\n     // The number of children in the chain. This is not equal to `self.children.len()`\n     // because `self.children` will change size as we process the chain.\n     child_count: usize,\n+    // Whether elements are allowed to overflow past the max_width limit\n+    allow_overflow: bool,\n }\n \n impl<'a> ChainFormatterShared<'a> {\n@@ -505,6 +561,8 @@ impl<'a> ChainFormatterShared<'a> {\n             rewrites: Vec::with_capacity(chain.children.len() + 1),\n             fits_single_line: false,\n             child_count: chain.children.len(),\n+            // TODO(calebcartwright)\n+            allow_overflow: false,\n         }\n     }\n \n@@ -517,6 +575,14 @@ impl<'a> ChainFormatterShared<'a> {\n         }\n     }\n \n+    fn format_children(&mut self, context: &RewriteContext<'_>, child_shape: Shape) -> Option<()> {\n+        for item in &self.children[..self.children.len() - 1] {\n+            let rewrite = format_chain_item(item, context, child_shape, self.allow_overflow)?;\n+            self.rewrites.push(rewrite);\n+        }\n+        Some(())\n+    }\n+\n     // Rewrite the last child. The last child of a chain requires special treatment. We need to\n     // know whether 'overflowing' the last child make a better formatting:\n     //\n@@ -729,22 +795,12 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     }\n \n     fn child_shape(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<Shape> {\n-        Some(\n-            if self.root_ends_with_block {\n-                shape.block_indent(0)\n-            } else {\n-                shape.block_indent(context.config.tab_spaces())\n-            }\n-            .with_max_width(context.config),\n-        )\n+        let block_end = self.root_ends_with_block;\n+        Some(get_block_child_shape(block_end, context, shape))\n     }\n \n     fn format_children(&mut self, context: &RewriteContext<'_>, child_shape: Shape) -> Option<()> {\n-        for item in &self.shared.children[..self.shared.children.len() - 1] {\n-            let rewrite = item.rewrite(context, child_shape)?;\n-            self.shared.rewrites.push(rewrite);\n-        }\n-        Some(())\n+        self.shared.format_children(context, child_shape)\n     }\n \n     fn format_last_child(\n@@ -808,15 +864,14 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n                 .visual_indent(self.offset)\n                 .sub_width(self.offset)?;\n             let rewrite = item.rewrite(context, child_shape)?;\n-            match wrap_str(rewrite, context.config.max_width(), shape) {\n-                Some(rewrite) => root_rewrite.push_str(&rewrite),\n-                None => {\n-                    // We couldn't fit in at the visual indent, try the last\n-                    // indent.\n-                    let rewrite = item.rewrite(context, parent_shape)?;\n-                    root_rewrite.push_str(&rewrite);\n-                    self.offset = 0;\n-                }\n+            if filtered_str_fits(&rewrite, context.config.max_width(), shape) {\n+                root_rewrite.push_str(&rewrite);\n+            } else {\n+                // We couldn't fit in at the visual indent, try the last\n+                // indent.\n+                let rewrite = item.rewrite(context, parent_shape)?;\n+                root_rewrite.push_str(&rewrite);\n+                self.offset = 0;\n             }\n \n             self.shared.children = &self.shared.children[1..];\n@@ -827,18 +882,17 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n \n     fn child_shape(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<Shape> {\n-        shape\n-            .with_max_width(context.config)\n-            .offset_left(self.offset)\n-            .map(|s| s.visual_indent(0))\n+        get_visual_style_child_shape(\n+            context,\n+            shape,\n+            self.offset,\n+            // TODO(calebcartwright): self.shared.permissibly_overflowing_parent,\n+            false,\n+        )\n     }\n \n     fn format_children(&mut self, context: &RewriteContext<'_>, child_shape: Shape) -> Option<()> {\n-        for item in &self.shared.children[..self.shared.children.len() - 1] {\n-            let rewrite = item.rewrite(context, child_shape)?;\n-            self.shared.rewrites.push(rewrite);\n-        }\n-        Some(())\n+        self.shared.format_children(context, child_shape)\n     }\n \n     fn format_last_child("}, {"sha": "54ca7676dfc8bd9c7f1a01ef7c4a94d8c6f1bc4b", "filename": "src/config/config_type.rs", "status": "modified", "additions": 104, "deletions": 18, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,11 +1,20 @@\n use crate::config::file_lines::FileLines;\n+use crate::config::macro_names::MacroSelectors;\n use crate::config::options::{IgnoreList, WidthHeuristics};\n \n /// Trait for types that can be used in `Config`.\n pub(crate) trait ConfigType: Sized {\n     /// Returns hint text for use in `Config::print_docs()`. For enum types, this is a\n     /// pipe-separated list of variants; for other types it returns `<type>`.\n     fn doc_hint() -> String;\n+\n+    /// Return `true` if the variant (i.e. value of this type) is stable.\n+    ///\n+    /// By default, return true for all values. Enums annotated with `#[config_type]`\n+    /// are automatically implemented, based on the `#[unstable_variant]` annotation.\n+    fn stable_variant(&self) -> bool {\n+        true\n+    }\n }\n \n impl ConfigType for bool {\n@@ -38,6 +47,12 @@ impl ConfigType for FileLines {\n     }\n }\n \n+impl ConfigType for MacroSelectors {\n+    fn doc_hint() -> String {\n+        String::from(\"[<string>, ...]\")\n+    }\n+}\n+\n impl ConfigType for WidthHeuristics {\n     fn doc_hint() -> String {\n         String::new()\n@@ -51,6 +66,13 @@ impl ConfigType for IgnoreList {\n }\n \n macro_rules! create_config {\n+    // Options passed in to the macro.\n+    //\n+    // - $i: the ident name of the option\n+    // - $ty: the type of the option value\n+    // - $def: the default value of the option\n+    // - $stb: true if the option is stable\n+    // - $dstring: description of the option\n     ($($i:ident: $ty:ty, $def:expr, $stb:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n         #[cfg(test)]\n         use std::collections::HashSet;\n@@ -61,9 +83,12 @@ macro_rules! create_config {\n         #[derive(Clone)]\n         #[allow(unreachable_pub)]\n         pub struct Config {\n-            // For each config item, we store a bool indicating whether it has\n-            // been accessed and the value, and a bool whether the option was\n-            // manually initialised, or taken from the default,\n+            // For each config item, we store:\n+            //\n+            // - 0: true if the value has been access\n+            // - 1: true if the option was manually initialized\n+            // - 2: the option value\n+            // - 3: true if the option is unstable\n             $($i: (Cell<bool>, bool, $ty, bool)),+\n         }\n \n@@ -102,6 +127,7 @@ macro_rules! create_config {\n                     | \"array_width\"\n                     | \"chain_width\" => self.0.set_heuristics(),\n                     \"merge_imports\" => self.0.set_merge_imports(),\n+                    \"fn_args_layout\" => self.0.set_fn_args_layout(),\n                     &_ => (),\n                 }\n             }\n@@ -143,24 +169,20 @@ macro_rules! create_config {\n \n             fn fill_from_parsed_config(mut self, parsed: PartialConfig, dir: &Path) -> Config {\n             $(\n-                if let Some(val) = parsed.$i {\n-                    if self.$i.3 {\n+                if let Some(option_value) = parsed.$i {\n+                    let option_stable = self.$i.3;\n+                    if $crate::config::config_type::is_stable_option_and_value(\n+                        stringify!($i), option_stable, &option_value\n+                    ) {\n                         self.$i.1 = true;\n-                        self.$i.2 = val;\n-                    } else {\n-                        if crate::is_nightly_channel!() {\n-                            self.$i.1 = true;\n-                            self.$i.2 = val;\n-                        } else {\n-                            eprintln!(\"Warning: can't set `{} = {:?}`, unstable features are only \\\n-                                       available in nightly channel.\", stringify!($i), val);\n-                        }\n+                        self.$i.2 = option_value;\n                     }\n                 }\n             )+\n                 self.set_heuristics();\n                 self.set_ignore(dir);\n                 self.set_merge_imports();\n+                self.set_fn_args_layout();\n                 self\n             }\n \n@@ -221,12 +243,22 @@ macro_rules! create_config {\n                 match key {\n                     $(\n                         stringify!($i) => {\n-                            self.$i.1 = true;\n-                            self.$i.2 = val.parse::<$ty>()\n+                            let option_value = val.parse::<$ty>()\n                                 .expect(&format!(\"Failed to parse override for {} (\\\"{}\\\") as a {}\",\n                                                  stringify!($i),\n                                                  val,\n                                                  stringify!($ty)));\n+\n+                            // Users are currently allowed to set unstable\n+                            // options/variants via the `--config` options override.\n+                            //\n+                            // There is ongoing discussion about how to move forward here:\n+                            // https://github.com/rust-lang/rustfmt/pull/5379\n+                            //\n+                            // For now, do not validate whether the option or value is stable,\n+                            // just always set it.\n+                            self.$i.1 = true;\n+                            self.$i.2 = option_value;\n                         }\n                     )+\n                     _ => panic!(\"Unknown config key in override: {}\", key)\n@@ -243,14 +275,21 @@ macro_rules! create_config {\n                     | \"array_width\"\n                     | \"chain_width\" => self.set_heuristics(),\n                     \"merge_imports\" => self.set_merge_imports(),\n+                    \"fn_args_layout\" => self.set_fn_args_layout(),\n                     &_ => (),\n                 }\n             }\n \n             #[allow(unreachable_pub)]\n             pub fn is_hidden_option(name: &str) -> bool {\n-                const HIDE_OPTIONS: [&str; 5] =\n-                    [\"verbose\", \"verbose_diff\", \"file_lines\", \"width_heuristics\", \"merge_imports\"];\n+                const HIDE_OPTIONS: [&str; 6] = [\n+                    \"verbose\",\n+                    \"verbose_diff\",\n+                    \"file_lines\",\n+                    \"width_heuristics\",\n+                    \"merge_imports\",\n+                    \"fn_args_layout\"\n+                ];\n                 HIDE_OPTIONS.contains(&name)\n             }\n \n@@ -400,6 +439,18 @@ macro_rules! create_config {\n                 }\n             }\n \n+            fn set_fn_args_layout(&mut self) {\n+                if self.was_set().fn_args_layout() {\n+                    eprintln!(\n+                        \"Warning: the `fn_args_layout` option is deprecated. \\\n+                        Use `fn_params_layout`. instead\"\n+                    );\n+                    if !self.was_set().fn_params_layout() {\n+                        self.fn_params_layout.2 = self.fn_args_layout();\n+                    }\n+                }\n+            }\n+\n             #[allow(unreachable_pub)]\n             /// Returns `true` if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {\n@@ -424,3 +475,38 @@ macro_rules! create_config {\n         }\n     )\n }\n+\n+pub(crate) fn is_stable_option_and_value<T>(\n+    option_name: &str,\n+    option_stable: bool,\n+    option_value: &T,\n+) -> bool\n+where\n+    T: PartialEq + std::fmt::Debug + ConfigType,\n+{\n+    let nightly = crate::is_nightly_channel!();\n+    let variant_stable = option_value.stable_variant();\n+    match (nightly, option_stable, variant_stable) {\n+        // Stable with an unstable option\n+        (false, false, _) => {\n+            eprintln!(\n+                \"Warning: can't set `{} = {:?}`, unstable features are only \\\n+                       available in nightly channel.\",\n+                option_name, option_value\n+            );\n+            false\n+        }\n+        // Stable with a stable option, but an unstable variant\n+        (false, true, false) => {\n+            eprintln!(\n+                \"Warning: can't set `{} = {:?}`, unstable variants are only \\\n+                       available in nightly channel.\",\n+                option_name, option_value\n+            );\n+            false\n+        }\n+        // Nightly: everything allowed\n+        // Stable with stable option and variant: allowed\n+        (true, _, _) | (false, true, true) => true,\n+    }\n+}"}, {"sha": "26ad78d6dcae855e4560e63549db3c1b728327bf", "filename": "src/config/macro_names.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fconfig%2Fmacro_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fconfig%2Fmacro_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmacro_names.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,118 @@\n+//! This module contains types and functions to support formatting specific macros.\n+\n+use itertools::Itertools;\n+use std::{fmt, str};\n+\n+use serde::{Deserialize, Serialize};\n+use serde_json as json;\n+use thiserror::Error;\n+\n+/// Defines the name of a macro.\n+#[derive(Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd, Deserialize, Serialize)]\n+pub struct MacroName(String);\n+\n+impl MacroName {\n+    pub fn new(other: String) -> Self {\n+        Self(other)\n+    }\n+}\n+\n+impl fmt::Display for MacroName {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+impl From<MacroName> for String {\n+    fn from(other: MacroName) -> Self {\n+        other.0\n+    }\n+}\n+\n+/// Defines a selector to match against a macro.\n+#[derive(Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd, Deserialize, Serialize)]\n+pub enum MacroSelector {\n+    Name(MacroName),\n+    All,\n+}\n+\n+impl fmt::Display for MacroSelector {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::Name(name) => name.fmt(f),\n+            Self::All => write!(f, \"*\"),\n+        }\n+    }\n+}\n+\n+impl str::FromStr for MacroSelector {\n+    type Err = std::convert::Infallible;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        Ok(match s {\n+            \"*\" => MacroSelector::All,\n+            name => MacroSelector::Name(MacroName(name.to_owned())),\n+        })\n+    }\n+}\n+\n+/// A set of macro selectors.\n+#[derive(Clone, Debug, Default, PartialEq, Deserialize, Serialize)]\n+pub struct MacroSelectors(pub Vec<MacroSelector>);\n+\n+impl fmt::Display for MacroSelectors {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.0.iter().format(\", \"))\n+    }\n+}\n+\n+#[derive(Error, Debug)]\n+pub enum MacroSelectorsError {\n+    #[error(\"{0}\")]\n+    Json(json::Error),\n+}\n+\n+// This impl is needed for `Config::override_value` to work for use in tests.\n+impl str::FromStr for MacroSelectors {\n+    type Err = MacroSelectorsError;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        let raw: Vec<&str> = json::from_str(s).map_err(MacroSelectorsError::Json)?;\n+        Ok(Self(\n+            raw.into_iter()\n+                .map(|raw| {\n+                    MacroSelector::from_str(raw).expect(\"MacroSelector from_str is infallible\")\n+                })\n+                .collect(),\n+        ))\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use std::str::FromStr;\n+\n+    #[test]\n+    fn macro_names_from_str() {\n+        let macro_names = MacroSelectors::from_str(r#\"[\"foo\", \"*\", \"bar\"]\"#).unwrap();\n+        assert_eq!(\n+            macro_names,\n+            MacroSelectors(\n+                [\n+                    MacroSelector::Name(MacroName(\"foo\".to_owned())),\n+                    MacroSelector::All,\n+                    MacroSelector::Name(MacroName(\"bar\".to_owned()))\n+                ]\n+                .into_iter()\n+                .collect()\n+            )\n+        );\n+    }\n+\n+    #[test]\n+    fn macro_names_display() {\n+        let macro_names = MacroSelectors::from_str(r#\"[\"foo\", \"*\", \"bar\"]\"#).unwrap();\n+        assert_eq!(format!(\"{}\", macro_names), \"foo, *, bar\");\n+    }\n+}"}, {"sha": "14f27f3f8b692ba14c47c5be138880a625ae5009", "filename": "src/config/mod.rs", "status": "modified", "additions": 139, "deletions": 10, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -13,15 +13,20 @@ pub use crate::config::file_lines::{FileLines, FileName, Range};\n #[allow(unreachable_pub)]\n pub use crate::config::lists::*;\n #[allow(unreachable_pub)]\n+pub use crate::config::macro_names::{MacroSelector, MacroSelectors};\n+#[allow(unreachable_pub)]\n pub use crate::config::options::*;\n \n #[macro_use]\n pub(crate) mod config_type;\n #[macro_use]\n+#[allow(unreachable_pub)]\n pub(crate) mod options;\n \n pub(crate) mod file_lines;\n+#[allow(unreachable_pub)]\n pub(crate) mod lists;\n+pub(crate) mod macro_names;\n \n // This macro defines configuration options used in rustfmt. Each option\n // is defined as follows:\n@@ -67,6 +72,8 @@ create_config! {\n     format_macro_matchers: bool, false, false,\n         \"Format the metavariable matching patterns in macros\";\n     format_macro_bodies: bool, true, false, \"Format the bodies of macros\";\n+    skip_macro_invocations: MacroSelectors, MacroSelectors::default(), false,\n+        \"Skip formatting the bodies of macros invoked with the following names.\";\n     hex_literal_case: HexLiteralCase, HexLiteralCase::Preserve, false,\n         \"Format hexadecimal integer literals\";\n \n@@ -119,7 +126,9 @@ create_config! {\n     force_multiline_blocks: bool, false, false,\n         \"Force multiline closure bodies and match arms to be wrapped in a block\";\n     fn_args_layout: Density, Density::Tall, true,\n-        \"Control the layout of arguments in a function\";\n+        \"(deprecated: use fn_params_layout instead)\";\n+    fn_params_layout: Density, Density::Tall, true,\n+        \"Control the layout of parameters in function signatures.\";\n     brace_style: BraceStyle, BraceStyle::SameLineWhere, false, \"Brace style for items\";\n     control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine, false,\n         \"Brace style for control flow constructs\";\n@@ -175,7 +184,7 @@ create_config! {\n     make_backup: bool, false, false, \"Backup changed files\";\n     print_misformatted_file_names: bool, false, true,\n         \"Prints the names of mismatched files that were formatted. Prints the names of \\\n-         files that would be formated when used with `--check` mode. \";\n+         files that would be formatted when used with `--check` mode. \";\n }\n \n #[derive(Error, Debug)]\n@@ -191,6 +200,7 @@ impl PartialConfig {\n         cloned.width_heuristics = None;\n         cloned.print_misformatted_file_names = None;\n         cloned.merge_imports = None;\n+        cloned.fn_args_layout = None;\n \n         ::toml::to_string(&cloned).map_err(ToTomlError)\n     }\n@@ -403,11 +413,21 @@ mod test {\n     use super::*;\n     use std::str;\n \n+    use crate::config::macro_names::MacroName;\n     use rustfmt_config_proc_macro::{nightly_only_test, stable_only_test};\n \n     #[allow(dead_code)]\n     mod mock {\n         use super::super::*;\n+        use rustfmt_config_proc_macro::config_type;\n+\n+        #[config_type]\n+        pub(crate) enum PartiallyUnstableOption {\n+            V1,\n+            V2,\n+            #[unstable_variant]\n+            V3,\n+        }\n \n         create_config! {\n             // Options that are used by the generated functions\n@@ -427,6 +447,12 @@ mod test {\n                 \"Merge imports\";\n             merge_imports: bool, false, false, \"(deprecated: use imports_granularity instead)\";\n \n+            // fn_args_layout renamed to fn_params_layout\n+            fn_args_layout: Density, Density::Tall, true,\n+                \"(deprecated: use fn_params_layout instead)\";\n+            fn_params_layout: Density, Density::Tall, true,\n+                \"Control the layout of parameters in a function signatures.\";\n+\n             // Width Heuristics\n             use_small_heuristics: Heuristics, Heuristics::Default, true,\n                 \"Whether to use different formatting for items and \\\n@@ -451,6 +477,63 @@ mod test {\n             // Options that are used by the tests\n             stable_option: bool, false, true, \"A stable option\";\n             unstable_option: bool, false, false, \"An unstable option\";\n+            partially_unstable_option: PartiallyUnstableOption, PartiallyUnstableOption::V1, true,\n+                \"A partially unstable option\";\n+        }\n+\n+        #[cfg(test)]\n+        mod partially_unstable_option {\n+            use super::{Config, PartialConfig, PartiallyUnstableOption};\n+            use rustfmt_config_proc_macro::{nightly_only_test, stable_only_test};\n+            use std::path::Path;\n+\n+            /// From the config file, we can fill with a stable variant\n+            #[test]\n+            fn test_from_toml_stable_value() {\n+                let toml = r#\"\n+                    partially_unstable_option = \"V2\"\n+                \"#;\n+                let partial_config: PartialConfig = toml::from_str(toml).unwrap();\n+                let config = Config::default();\n+                let config = config.fill_from_parsed_config(partial_config, Path::new(\"\"));\n+                assert_eq!(\n+                    config.partially_unstable_option(),\n+                    PartiallyUnstableOption::V2\n+                );\n+            }\n+\n+            /// From the config file, we cannot fill with an unstable variant (stable only)\n+            #[stable_only_test]\n+            #[test]\n+            fn test_from_toml_unstable_value_on_stable() {\n+                let toml = r#\"\n+                    partially_unstable_option = \"V3\"\n+                \"#;\n+                let partial_config: PartialConfig = toml::from_str(toml).unwrap();\n+                let config = Config::default();\n+                let config = config.fill_from_parsed_config(partial_config, Path::new(\"\"));\n+                assert_eq!(\n+                    config.partially_unstable_option(),\n+                    // default value from config, i.e. fill failed\n+                    PartiallyUnstableOption::V1\n+                );\n+            }\n+\n+            /// From the config file, we can fill with an unstable variant (nightly only)\n+            #[nightly_only_test]\n+            #[test]\n+            fn test_from_toml_unstable_value_on_nightly() {\n+                let toml = r#\"\n+                    partially_unstable_option = \"V3\"\n+                \"#;\n+                let partial_config: PartialConfig = toml::from_str(toml).unwrap();\n+                let config = Config::default();\n+                let config = config.fill_from_parsed_config(partial_config, Path::new(\"\"));\n+                assert_eq!(\n+                    config.partially_unstable_option(),\n+                    PartiallyUnstableOption::V3\n+                );\n+            }\n         }\n     }\n \n@@ -489,6 +572,11 @@ mod test {\n         assert_eq!(config.was_set().verbose(), false);\n     }\n \n+    const PRINT_DOCS_STABLE_OPTION: &str = \"stable_option <boolean> Default: false\";\n+    const PRINT_DOCS_UNSTABLE_OPTION: &str = \"unstable_option <boolean> Default: false (unstable)\";\n+    const PRINT_DOCS_PARTIALLY_UNSTABLE_OPTION: &str =\n+        \"partially_unstable_option [V1|V2|V3 (unstable)] Default: V1\";\n+\n     #[test]\n     fn test_print_docs_exclude_unstable() {\n         use self::mock::Config;\n@@ -497,10 +585,9 @@ mod test {\n         Config::print_docs(&mut output, false);\n \n         let s = str::from_utf8(&output).unwrap();\n-\n-        assert_eq!(s.contains(\"stable_option\"), true);\n-        assert_eq!(s.contains(\"unstable_option\"), false);\n-        assert_eq!(s.contains(\"(unstable)\"), false);\n+        assert_eq!(s.contains(PRINT_DOCS_STABLE_OPTION), true);\n+        assert_eq!(s.contains(PRINT_DOCS_UNSTABLE_OPTION), false);\n+        assert_eq!(s.contains(PRINT_DOCS_PARTIALLY_UNSTABLE_OPTION), true);\n     }\n \n     #[test]\n@@ -511,9 +598,9 @@ mod test {\n         Config::print_docs(&mut output, true);\n \n         let s = str::from_utf8(&output).unwrap();\n-        assert_eq!(s.contains(\"stable_option\"), true);\n-        assert_eq!(s.contains(\"unstable_option\"), true);\n-        assert_eq!(s.contains(\"(unstable)\"), true);\n+        assert_eq!(s.contains(PRINT_DOCS_STABLE_OPTION), true);\n+        assert_eq!(s.contains(PRINT_DOCS_UNSTABLE_OPTION), true);\n+        assert_eq!(s.contains(PRINT_DOCS_PARTIALLY_UNSTABLE_OPTION), true);\n     }\n \n     #[test]\n@@ -541,6 +628,7 @@ normalize_doc_attributes = false\n format_strings = false\n format_macro_matchers = false\n format_macro_bodies = true\n+skip_macro_invocations = []\n hex_literal_case = \"Preserve\"\n empty_item_single_line = true\n struct_lit_single_line = true\n@@ -567,7 +655,7 @@ enum_discrim_align_threshold = 0\n match_arm_blocks = true\n match_arm_leading_pipes = \"Never\"\n force_multiline_blocks = false\n-fn_args_layout = \"Tall\"\n+fn_params_layout = \"Tall\"\n brace_style = \"SameLineWhere\"\n control_brace_style = \"AlwaysSameLine\"\n trailing_semicolon = true\n@@ -921,4 +1009,45 @@ make_backup = false\n             assert_eq!(config.single_line_if_else_max_width(), 100);\n         }\n     }\n+\n+    #[cfg(test)]\n+    mod partially_unstable_option {\n+        use super::mock::{Config, PartiallyUnstableOption};\n+        use super::*;\n+\n+        /// From the command line, we can override with a stable variant.\n+        #[test]\n+        fn test_override_stable_value() {\n+            let mut config = Config::default();\n+            config.override_value(\"partially_unstable_option\", \"V2\");\n+            assert_eq!(\n+                config.partially_unstable_option(),\n+                PartiallyUnstableOption::V2\n+            );\n+        }\n+\n+        /// From the command line, we can override with an unstable variant.\n+        #[test]\n+        fn test_override_unstable_value() {\n+            let mut config = Config::default();\n+            config.override_value(\"partially_unstable_option\", \"V3\");\n+            assert_eq!(\n+                config.partially_unstable_option(),\n+                PartiallyUnstableOption::V3\n+            );\n+        }\n+    }\n+\n+    #[test]\n+    fn test_override_skip_macro_invocations() {\n+        let mut config = Config::default();\n+        config.override_value(\"skip_macro_invocations\", r#\"[\"*\", \"println\"]\"#);\n+        assert_eq!(\n+            config.skip_macro_invocations(),\n+            MacroSelectors(vec![\n+                MacroSelector::All,\n+                MacroSelector::Name(MacroName::new(\"println\".to_owned()))\n+            ])\n+        );\n+    }\n }"}, {"sha": "0be4c3cf168cc19c833a29cc3b6e9129509d5e69", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -29,9 +29,9 @@ use crate::spanned::Spanned;\n use crate::string::{rewrite_string, StringFormat};\n use crate::types::{rewrite_path, PathContext};\n use crate::utils::{\n-    colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n-    last_line_extendable, last_line_width, mk_sp, outer_attributes, semicolon_for_expr,\n-    unicode_str_width, wrap_str,\n+    colon_spaces, contains_skip, count_newlines, filtered_str_fits, first_line_ends_with,\n+    inner_attributes, last_line_extendable, last_line_width, mk_sp, outer_attributes,\n+    semicolon_for_expr, unicode_str_width, wrap_str,\n };\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -2050,8 +2050,7 @@ fn choose_rhs<R: Rewrite>(\n \n             match (orig_rhs, new_rhs) {\n                 (Some(ref orig_rhs), Some(ref new_rhs))\n-                    if wrap_str(new_rhs.clone(), context.config.max_width(), new_shape)\n-                        .is_none() =>\n+                    if !filtered_str_fits(&new_rhs, context.config.max_width(), new_shape) =>\n                 {\n                     Some(format!(\"{}{}\", before_space_str, orig_rhs))\n                 }"}, {"sha": "339e5cef5af911675d0346344f662862c45c642a", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -251,8 +251,8 @@ fn flatten_use_trees(\n     use_trees: Vec<UseTree>,\n     import_granularity: ImportGranularity,\n ) -> Vec<UseTree> {\n-    // Return non-sorted single occurance of the use-trees text string;\n-    // order is by first occurance of the use-tree.\n+    // Return non-sorted single occurrence of the use-trees text string;\n+    // order is by first occurrence of the use-tree.\n     use_trees\n         .into_iter()\n         .flat_map(|tree| tree.flatten(import_granularity))"}, {"sha": "25e8a024857ce9a5c541018aacb519c32ca13f0a", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1084,7 +1084,11 @@ pub(crate) fn format_trait(\n             let item_snippet = context.snippet(item.span);\n             if let Some(lo) = item_snippet.find('/') {\n                 // 1 = `{`\n-                let comment_hi = body_lo - BytePos(1);\n+                let comment_hi = if generics.params.len() > 0 {\n+                    generics.span.lo() - BytePos(1)\n+                } else {\n+                    body_lo - BytePos(1)\n+                };\n                 let comment_lo = item.span.lo() + BytePos(lo as u32);\n                 if comment_lo < comment_hi {\n                     match recover_missing_comment_in_span(\n@@ -1241,7 +1245,7 @@ fn format_unit_struct(\n ) -> Option<String> {\n     let header_str = format_header(context, p.prefix, p.ident, p.vis, offset);\n     let generics_str = if let Some(generics) = p.generics {\n-        let hi = context.snippet_provider.span_before(p.span, \";\");\n+        let hi = context.snippet_provider.span_before_last(p.span, \";\");\n         format_generics(\n             context,\n             generics,\n@@ -2602,7 +2606,7 @@ fn rewrite_params(\n         &param_items,\n         context\n             .config\n-            .fn_args_layout()\n+            .fn_params_layout()\n             .to_list_tactic(param_items.len()),\n         Separator::Comma,\n         one_line_budget,"}, {"sha": "487fcc3a0df1a416acc07440f653285d746a1cbd", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -3,7 +3,6 @@\n #![warn(unreachable_pub)]\n #![recursion_limit = \"256\"]\n #![allow(clippy::match_like_matches_macro)]\n-#![allow(unreachable_pub)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "a878e6cf9b2fc0efe824d9e98baeda3b918c7586", "filename": "src/lists.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -297,9 +297,9 @@ where\n         } else {\n             inner_item.as_ref()\n         };\n-        let mut item_last_line_width = item_last_line.len() + item_sep_len;\n+        let mut item_last_line_width = unicode_str_width(item_last_line) + item_sep_len;\n         if item_last_line.starts_with(&**indent_str) {\n-            item_last_line_width -= indent_str.len();\n+            item_last_line_width -= unicode_str_width(indent_str);\n         }\n \n         if !item.is_substantial() {\n@@ -449,7 +449,7 @@ where\n                 } else if starts_with_newline(comment) {\n                     false\n                 } else {\n-                    comment.trim().contains('\\n') || comment.trim().len() > width\n+                    comment.trim().contains('\\n') || unicode_str_width(comment.trim()) > width\n                 };\n \n                 rewrite_comment(\n@@ -465,7 +465,7 @@ where\n             if !starts_with_newline(comment) {\n                 if formatting.align_comments {\n                     let mut comment_alignment =\n-                        post_comment_alignment(item_max_width, inner_item.len());\n+                        post_comment_alignment(item_max_width, unicode_str_width(inner_item));\n                     if first_line_width(&formatted_comment)\n                         + last_line_width(&result)\n                         + comment_alignment\n@@ -475,7 +475,7 @@ where\n                         item_max_width = None;\n                         formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n                         comment_alignment =\n-                            post_comment_alignment(item_max_width, inner_item.len());\n+                            post_comment_alignment(item_max_width, unicode_str_width(inner_item));\n                     }\n                     for _ in 0..=comment_alignment {\n                         result.push(' ');\n@@ -533,7 +533,7 @@ where\n     let mut first = true;\n     for item in items.clone().into_iter().skip(i) {\n         let item = item.as_ref();\n-        let inner_item_width = item.inner_as_ref().len();\n+        let inner_item_width = unicode_str_width(item.inner_as_ref());\n         if !first\n             && (item.is_different_group()\n                 || item.post_comment.is_none()\n@@ -552,8 +552,8 @@ where\n     max_width\n }\n \n-fn post_comment_alignment(item_max_width: Option<usize>, inner_item_len: usize) -> usize {\n-    item_max_width.unwrap_or(0).saturating_sub(inner_item_len)\n+fn post_comment_alignment(item_max_width: Option<usize>, inner_item_width: usize) -> usize {\n+    item_max_width.unwrap_or(0).saturating_sub(inner_item_width)\n }\n \n pub(crate) struct ListItems<'a, I, F1, F2, F3>"}, {"sha": "d58f7547fefb3364f9cae0c308c6bff8d2ca94cf", "filename": "src/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -35,8 +35,8 @@ use crate::shape::{Indent, Shape};\n use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n use crate::utils::{\n-    format_visibility, indent_next_line, is_empty_line, mk_sp, remove_trailing_white_spaces,\n-    rewrite_ident, trim_left_preserve_layout, wrap_str, NodeIdExt,\n+    filtered_str_fits, format_visibility, indent_next_line, is_empty_line, mk_sp,\n+    remove_trailing_white_spaces, rewrite_ident, trim_left_preserve_layout, NodeIdExt,\n };\n use crate::visitor::FmtVisitor;\n \n@@ -157,7 +157,8 @@ pub(crate) fn rewrite_macro(\n ) -> Option<String> {\n     let should_skip = context\n         .skip_context\n-        .skip_macro(context.snippet(mac.path.span));\n+        .macros\n+        .skip(context.snippet(mac.path.span));\n     if should_skip {\n         None\n     } else {\n@@ -1265,15 +1266,14 @@ impl MacroBranch {\n                 }\n             }\n         };\n-        let new_body = wrap_str(\n-            new_body_snippet.snippet.to_string(),\n-            config.max_width(),\n-            shape,\n-        )?;\n+\n+        if !filtered_str_fits(&new_body_snippet.snippet, config.max_width(), shape) {\n+            return None;\n+        }\n \n         // Indent the body since it is in a block.\n         let indent_str = body_indent.to_string(&config);\n-        let mut new_body = LineClasses::new(new_body.trim_end())\n+        let mut new_body = LineClasses::new(new_body_snippet.snippet.trim_end())\n             .enumerate()\n             .fold(\n                 (String::new(), true),"}, {"sha": "68f85b2ade48a6191bd1110aa6dce2964ed39b41", "filename": "src/skip.rs", "status": "modified", "additions": 65, "deletions": 14, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -2,33 +2,84 @@\n \n use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n+use std::collections::HashSet;\n \n-/// Take care of skip name stack. You can update it by attributes slice or\n-/// by other context. Query this context to know if you need skip a block.\n+/// Track which blocks of code are to be skipped when formatting.\n+///\n+/// You can update it by:\n+///\n+/// - attributes slice\n+/// - manually feeding values into the underlying contexts\n+///\n+/// Query this context to know if you need to skip a block.\n #[derive(Default, Clone)]\n pub(crate) struct SkipContext {\n-    macros: Vec<String>,\n-    attributes: Vec<String>,\n+    pub(crate) macros: SkipNameContext,\n+    pub(crate) attributes: SkipNameContext,\n }\n \n impl SkipContext {\n     pub(crate) fn update_with_attrs(&mut self, attrs: &[ast::Attribute]) {\n-        self.macros.append(&mut get_skip_names(\"macros\", attrs));\n-        self.attributes\n-            .append(&mut get_skip_names(\"attributes\", attrs));\n+        self.macros.extend(get_skip_names(\"macros\", attrs));\n+        self.attributes.extend(get_skip_names(\"attributes\", attrs));\n     }\n \n-    pub(crate) fn update(&mut self, mut other: SkipContext) {\n-        self.macros.append(&mut other.macros);\n-        self.attributes.append(&mut other.attributes);\n+    pub(crate) fn update(&mut self, other: SkipContext) {\n+        let SkipContext { macros, attributes } = other;\n+        self.macros.update(macros);\n+        self.attributes.update(attributes);\n+    }\n+}\n+\n+/// Track which names to skip.\n+///\n+/// Query this context with a string to know whether to skip it.\n+#[derive(Clone)]\n+pub(crate) enum SkipNameContext {\n+    All,\n+    Values(HashSet<String>),\n+}\n+\n+impl Default for SkipNameContext {\n+    fn default() -> Self {\n+        Self::Values(Default::default())\n+    }\n+}\n+\n+impl Extend<String> for SkipNameContext {\n+    fn extend<T: IntoIterator<Item = String>>(&mut self, iter: T) {\n+        match self {\n+            Self::All => {}\n+            Self::Values(values) => values.extend(iter),\n+        }\n+    }\n+}\n+\n+impl SkipNameContext {\n+    pub(crate) fn update(&mut self, other: Self) {\n+        match (self, other) {\n+            // If we're already skipping everything, nothing more can be added\n+            (Self::All, _) => {}\n+            // If we want to skip all, set it\n+            (this, Self::All) => {\n+                *this = Self::All;\n+            }\n+            // If we have some new values to skip, add them\n+            (Self::Values(existing_values), Self::Values(new_values)) => {\n+                existing_values.extend(new_values)\n+            }\n+        }\n     }\n \n-    pub(crate) fn skip_macro(&self, name: &str) -> bool {\n-        self.macros.iter().any(|n| n == name)\n+    pub(crate) fn skip(&self, name: &str) -> bool {\n+        match self {\n+            Self::All => true,\n+            Self::Values(values) => values.contains(name),\n+        }\n     }\n \n-    pub(crate) fn skip_attribute(&self, name: &str) -> bool {\n-        self.attributes.iter().any(|n| n == name)\n+    pub(crate) fn skip_all(&mut self) {\n+        *self = Self::All;\n     }\n }\n "}, {"sha": "c70b3c5facd50e68635d682c16471acd50900c3a", "filename": "src/test/configuration_snippet.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Ftest%2Fconfiguration_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Ftest%2Fconfiguration_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fconfiguration_snippet.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -27,8 +27,13 @@ impl ConfigurationSection {\n         lazy_static! {\n             static ref CONFIG_NAME_REGEX: regex::Regex =\n                 regex::Regex::new(r\"^## `([^`]+)`\").expect(\"failed creating configuration pattern\");\n+            // Configuration values, which will be passed to `from_str`:\n+            //\n+            // - must be prefixed with `####`\n+            // - must be wrapped in backticks\n+            // - may by wrapped in double quotes (which will be stripped)\n             static ref CONFIG_VALUE_REGEX: regex::Regex =\n-                regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n+                regex::Regex::new(r#\"^#### `\"?([^`]+?)\"?`\"#)\n                     .expect(\"failed creating configuration value pattern\");\n         }\n "}, {"sha": "cfad4a8ed0e3eeaff398bced4928fc170ca1744e", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -982,11 +982,7 @@ fn rustfmt() -> PathBuf {\n     assert!(\n         me.is_file() || me.with_extension(\"exe\").is_file(),\n         \"{}\",\n-        if cfg!(release) {\n-            \"no rustfmt bin, try running `cargo build --release` before testing\"\n-        } else {\n-            \"no rustfmt bin, try running `cargo build` before testing\"\n-        }\n+        \"no rustfmt bin, try running `cargo build` or `cargo build --release` before testing\"\n     );\n     me\n }"}, {"sha": "2cae5498107512d99a7909f8f6622be3fb49c34f", "filename": "src/types.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -941,6 +941,28 @@ fn join_bounds_inner(\n         ast::GenericBound::Trait(..) => last_line_extendable(s),\n     };\n \n+    // Whether a GenericBound item is a PathSegment segment that includes internal array\n+    // that contains more than one item\n+    let is_item_with_multi_items_array = |item: &ast::GenericBound| match item {\n+        ast::GenericBound::Trait(ref poly_trait_ref, ..) => {\n+            let segments = &poly_trait_ref.trait_ref.path.segments;\n+            if segments.len() > 1 {\n+                true\n+            } else {\n+                if let Some(args_in) = &segments[0].args {\n+                    matches!(\n+                        args_in.deref(),\n+                        ast::GenericArgs::AngleBracketed(bracket_args)\n+                            if bracket_args.args.len() > 1\n+                    )\n+                } else {\n+                    false\n+                }\n+            }\n+        }\n+        _ => false,\n+    };\n+\n     let result = items.iter().enumerate().try_fold(\n         (String::new(), None, false),\n         |(strs, prev_trailing_span, prev_extendable), (i, item)| {\n@@ -1035,10 +1057,23 @@ fn join_bounds_inner(\n         },\n     )?;\n \n-    if !force_newline\n-        && items.len() > 1\n-        && (result.0.contains('\\n') || result.0.len() > shape.width)\n-    {\n+    // Whether retry the function with forced newline is needed:\n+    //   Only if result is not already multiline and did not exceed line width,\n+    //   and either there is more than one item;\n+    //       or the single item is of type `Trait`,\n+    //          and any of the internal arrays contains more than one item;\n+    let retry_with_force_newline =\n+        if force_newline || (!result.0.contains('\\n') && result.0.len() <= shape.width) {\n+            false\n+        } else {\n+            if items.len() > 1 {\n+                true\n+            } else {\n+                is_item_with_multi_items_array(&items[0])\n+            }\n+        };\n+\n+    if retry_with_force_newline {\n         join_bounds_inner(context, shape, items, need_indent, true)\n     } else {\n         Some(result.0)"}, {"sha": "f681f55b37b9d80587610573d13ec2153060dd48", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -384,14 +384,15 @@ macro_rules! skip_out_of_file_lines_range_visitor {\n // Wraps String in an Option. Returns Some when the string adheres to the\n // Rewrite constraints defined for the Rewrite trait and None otherwise.\n pub(crate) fn wrap_str(s: String, max_width: usize, shape: Shape) -> Option<String> {\n-    if is_valid_str(&filter_normal_code(&s), max_width, shape) {\n+    if filtered_str_fits(&s, max_width, shape) {\n         Some(s)\n     } else {\n         None\n     }\n }\n \n-fn is_valid_str(snippet: &str, max_width: usize, shape: Shape) -> bool {\n+pub(crate) fn filtered_str_fits(snippet: &str, max_width: usize, shape: Shape) -> bool {\n+    let snippet = &filter_normal_code(snippet);\n     if !snippet.is_empty() {\n         // First line must fits with `shape.width`.\n         if first_line_width(snippet) > shape.width {"}, {"sha": "f4d84d1381fc0c3745ec463ae839204a3bf8f644", "filename": "src/visitor.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -8,7 +8,7 @@ use rustc_span::{symbol, BytePos, Pos, Span};\n use crate::attr::*;\n use crate::comment::{contains_comment, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::Version;\n-use crate::config::{BraceStyle, Config};\n+use crate::config::{BraceStyle, Config, MacroSelector};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item, rewrite_extern_crate,\n@@ -770,6 +770,15 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         snippet_provider: &'a SnippetProvider,\n         report: FormatReport,\n     ) -> FmtVisitor<'a> {\n+        let mut skip_context = SkipContext::default();\n+        let mut macro_names = Vec::new();\n+        for macro_selector in config.skip_macro_invocations().0 {\n+            match macro_selector {\n+                MacroSelector::Name(name) => macro_names.push(name.to_string()),\n+                MacroSelector::All => skip_context.macros.skip_all(),\n+            }\n+        }\n+        skip_context.macros.extend(macro_names);\n         FmtVisitor {\n             parent_context: None,\n             parse_sess: parse_session,\n@@ -784,7 +793,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             is_macro_def: false,\n             macro_rewrite_failure: false,\n             report,\n-            skip_context: Default::default(),\n+            skip_context,\n         }\n     }\n "}, {"sha": "701c36fadeafa835f8e5c4372e65c34c01512bba", "filename": "tests/cargo-fmt/main.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fmain.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -4,6 +4,8 @@ use std::env;\n use std::path::Path;\n use std::process::Command;\n \n+use rustfmt_config_proc_macro::rustfmt_only_ci_test;\n+\n /// Run the cargo-fmt executable and return its output.\n fn cargo_fmt(args: &[&str]) -> (String, String) {\n     let mut bin_dir = env::current_exe().unwrap();\n@@ -47,7 +49,7 @@ macro_rules! assert_that {\n     };\n }\n \n-#[ignore]\n+#[rustfmt_only_ci_test]\n #[test]\n fn version() {\n     assert_that!(&[\"--version\"], starts_with(\"rustfmt \"));\n@@ -56,7 +58,7 @@ fn version() {\n     assert_that!(&[\"--\", \"--version\"], starts_with(\"rustfmt \"));\n }\n \n-#[ignore]\n+#[rustfmt_only_ci_test]\n #[test]\n fn print_config() {\n     assert_that!(\n@@ -65,15 +67,15 @@ fn print_config() {\n     );\n }\n \n-#[ignore]\n+#[rustfmt_only_ci_test]\n #[test]\n fn rustfmt_help() {\n     assert_that!(&[\"--\", \"--help\"], contains(\"Format Rust code\"));\n     assert_that!(&[\"--\", \"-h\"], contains(\"Format Rust code\"));\n     assert_that!(&[\"--\", \"--help=config\"], contains(\"Configuration Options:\"));\n }\n \n-#[ignore]\n+#[rustfmt_only_ci_test]\n #[test]\n fn cargo_fmt_out_of_line_test_modules() {\n     // See also https://github.com/rust-lang/rustfmt/issues/5119\n@@ -96,3 +98,22 @@ fn cargo_fmt_out_of_line_test_modules() {\n         assert!(stdout.contains(&format!(\"Diff in {}\", path.display())))\n     }\n }\n+\n+#[rustfmt_only_ci_test]\n+#[test]\n+fn cargo_fmt_emits_error_on_line_overflow_true() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/3164\n+    let args = [\n+        \"--check\",\n+        \"--manifest-path\",\n+        \"tests/cargo-fmt/source/issue_3164/Cargo.toml\",\n+        \"--\",\n+        \"--config\",\n+        \"error_on_line_overflow=true\",\n+    ];\n+\n+    let (_stdout, stderr) = cargo_fmt(&args);\n+    assert!(stderr.contains(\n+        \"line formatted, but exceeded maximum width (maximum: 100 (see `max_width` option)\"\n+    ))\n+}"}, {"sha": "580ef7e6e24fe1405c83964ae8ca734f46cdd67d", "filename": "tests/cargo-fmt/source/issue_3164/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fcargo-fmt%2Fsource%2Fissue_3164%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fcargo-fmt%2Fsource%2Fissue_3164%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fissue_3164%2FCargo.toml?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"issue_3164\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "9330107ac8dc77571b5abe2a11c7d59f796f89d5", "filename": "tests/cargo-fmt/source/issue_3164/src/main.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fcargo-fmt%2Fsource%2Fissue_3164%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fcargo-fmt%2Fsource%2Fissue_3164%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fissue_3164%2Fsrc%2Fmain.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,13 @@\n+#[allow(unused_macros)]\n+macro_rules! foo {\n+    ($id:ident) => {\n+        macro_rules! bar {\n+            ($id2:tt) => {\n+                #[cfg(any(target_feature = $id2, target_feature = $id2, target_feature = $id2, target_feature = $id2, target_feature = $id2))]\n+                fn $id() {}\n+            };\n+        }\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "4c37100894f832b92553e00a21286511ba0c9135", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -3,7 +3,7 @@ comment_width = 80\n tab_spaces = 2\n newline_style = \"Unix\"\n brace_style = \"SameLineWhere\"\n-fn_args_layout = \"Tall\"\n+fn_params_layout = \"Tall\"\n trailing_comma = \"Vertical\"\n indent_style = \"Block\"\n reorder_imports = false"}, {"sha": "254102ebabdc25cdceca176107ed3cbc2ae1b4bb", "filename": "tests/mod-resolver/issue-5198/lib/c/d/explanation.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fexplanation.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fexplanation.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-5198%2Flib%2Fc%2Fd%2Fexplanation.txt?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -9,7 +9,7 @@ The directory name './lib/c/d/' conflicts with the './lib/c/d.rs' file name.\n     * mod g;\n \n Module resolution will fail if we look for './lib/c/d/e.rs' or './lib/c/d/e/mod.rs',\n-so we should fall back to looking for './lib/c/e.rs', which correctly finds the modlue, that\n+so we should fall back to looking for './lib/c/e.rs', which correctly finds the module, that\n rustfmt should format.\n \n './lib/c/d/f.rs' and './lib/c/d/g/mod.rs' exist at the default submodule paths so we should be able"}, {"sha": "90464def8ebcc29a5a4be21bc44f4bc3e43245b8", "filename": "tests/mod-resolver/issue-5198/lib/explanation.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fmod-resolver%2Fissue-5198%2Flib%2Fexplanation.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fmod-resolver%2Fissue-5198%2Flib%2Fexplanation.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-5198%2Flib%2Fexplanation.txt?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -9,7 +9,7 @@ The directory name './lib' conflicts with the './lib.rs' file name.\n     * mod c;\n \n Module resolution will fail if we look for './lib/a.rs' or './lib/a/mod.rs',\n-so we should fall back to looking for './a.rs', which correctly finds the modlue that\n+so we should fall back to looking for './a.rs', which correctly finds the module that\n rustfmt should format.\n \n './lib/b.rs' and './lib/c/mod.rs' exist at the default submodule paths so we should be able"}, {"sha": "7ff301e80195aa0efdebdaf740e98697a8eaafb8", "filename": "tests/rustfmt/main.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Frustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Frustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustfmt%2Fmain.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -5,6 +5,8 @@ use std::fs::remove_file;\n use std::path::Path;\n use std::process::Command;\n \n+use rustfmt_config_proc_macro::rustfmt_only_ci_test;\n+\n /// Run the rustfmt executable and return its output.\n fn rustfmt(args: &[&str]) -> (String, String) {\n     let mut bin_dir = env::current_exe().unwrap();\n@@ -47,7 +49,7 @@ macro_rules! assert_that {\n     };\n }\n \n-#[ignore]\n+#[rustfmt_only_ci_test]\n #[test]\n fn print_config() {\n     assert_that!(\n@@ -76,7 +78,7 @@ fn print_config() {\n     remove_file(\"minimal-config\").unwrap();\n }\n \n-#[ignore]\n+#[rustfmt_only_ci_test]\n #[test]\n fn inline_config() {\n     // single invocation\n@@ -157,3 +159,18 @@ fn mod_resolution_error_path_attribute_does_not_exist() {\n     // The path attribute points to a file that does not exist\n     assert!(stderr.contains(\"does_not_exist.rs does not exist\"));\n }\n+\n+#[test]\n+fn rustfmt_emits_error_on_line_overflow_true() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/3164\n+    let args = [\n+        \"--config\",\n+        \"error_on_line_overflow=true\",\n+        \"tests/cargo-fmt/source/issue_3164/src/main.rs\",\n+    ];\n+\n+    let (_stdout, stderr) = rustfmt(&args);\n+    assert!(stderr.contains(\n+        \"line formatted, but exceeded maximum width (maximum: 100 (see `max_width` option)\"\n+    ))\n+}"}, {"sha": "131cbb855f163115b08a73dacb41fb7a05f2675c", "filename": "tests/source/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -329,7 +329,7 @@ pub enum Feature {\n     tbm,\n     /// POPCNT (Population Count)\n     popcnt,\n-    /// FXSR (Floating-point context fast save and restor)\n+    /// FXSR (Floating-point context fast save and restore)\n     fxsr,\n     /// XSAVE (Save Processor Extended States)\n     xsave,"}, {"sha": "e65a245ba9343990fa2cc5dd009e6cdead950833", "filename": "tests/source/comments_unicode.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fcomments_unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fcomments_unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomments_unicode.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,140 @@\n+impl Default for WhitespaceCharacters {\n+    fn default() -> Self {\n+        Self {\n+            space: '\u00b7',    // U+00B7\n+            nbsp: '\u237d',    // U+237D\n+            tab: '\u2192',     // U+2192\n+            newline: '\u23ce', // U+23CE\n+        }\n+    }\n+}\n+\n+const RAINBOWS: &[&str] = &[\n+    \"r\u0430in\u042c\u03bf\u0461\",    // hue: 0\n+    \"ra\u0456n\u042c\u03bfw\",     // hue: 2\n+    \"r\u0430\u0456\u0274\u042cow\",    // hue: 2\n+    \"ra\u0456\u0274\u042co\u0461\",    // hue: 8\n+    \"\u0280ain\u042cow\",      // hue: 8\n+    \"\u0280a\u0456\u0274bo\u0461\",    // hue: 8\n+    \"\u0280\u0430\u0456nb\u03bfw\",    // hue: 11\n+    \"rain\u042co\u0461\",      // hue: 14\n+    \"ra\u0456\u0274bow\",      // hue: 14\n+    \"r\u0430i\u0274\u042cow\",     // hue: 20\n+    \"ra\u0456n\u042cow\",      // hue: 26\n+    \"\u0280ai\u0274b\u03bfw\",     // hue: 32\n+    \"ra\u0456\u0274bo\u0461\",     // hue: 35\n+    \"r\u0430i\u0274bow\",      // hue: 35\n+    \"r\u0430\u0456nb\u03bfw\",     // hue: 38\n+    \"r\u0430in\u042cow\",      // hue: 47\n+    \"\u0280a\u0456nbo\u0461\",     // hue: 47\n+    \"\u0280a\u0456n\u042co\u0461\",    // hue: 47\n+    \"\u0280\u0430\u0456\u0274b\u03bfw\",   // hue: 53\n+    \"\u0280a\u0456n\u042c\u03bf\u0461\",   // hue: 57\n+    \"rai\u0274\u042co\u0461\",     // hue: 68\n+    \"\u0280ainb\u03bf\u0461\",     // hue: 68\n+    \"\u0280\u0430inbo\u0461\",     // hue: 68\n+    \"\u0280\u0430i\u0274b\u03bfw\",    // hue: 68\n+    \"\u0280\u0430\u0456nbow\",     // hue: 68\n+    \"r\u0430\u0456n\u042c\u03bf\u0461\",   // hue: 69\n+    \"\u0280ain\u042c\u03bfw\",     // hue: 71\n+    \"rai\u0274bow\",       // hue: 73\n+    \"ra\u0456n\u042co\u0461\",     // hue: 74\n+    \"r\u0430\u0456\u0274b\u03bfw\",    // hue: 77\n+    \"ra\u0456n\u042c\u03bf\u0461\",    // hue: 81\n+    \"rai\u0274\u042cow\",      // hue: 83\n+    \"\u0280ainb\u03bfw\",      // hue: 83\n+    \"\u0280\u0430inbow\",      // hue: 83\n+    \"\u0280\u0430i\u0274b\u03bf\u0461\",   // hue: 83\n+    \"\u0280\u0430\u0456nbo\u0461\",    // hue: 83\n+    \"\u0280\u0430\u0456\u0274\u042c\u03bf\u0461\", // hue: 84\n+    \"rain\u042cow\",       // hue: 85\n+    \"\u0280\u0430i\u0274\u042c\u03bfw\",   // hue: 86\n+    \"\u0280\u0430\u0456nb\u03bf\u0461\",   // hue: 89\n+    \"\u0280\u0430\u0456n\u042c\u03bfw\",   // hue: 92\n+    \"r\u0430i\u0274b\u03bfw\",     // hue: 95\n+    \"\u0280\u0430\u0456\u0274b\u03bf\u0461\",  // hue: 98\n+    \"\u0280\u0430i\u0274\u042c\u03bf\u0461\",  // hue: 99\n+    \"ra\u0456nb\u03bfw\",      // hue: 101\n+    \"\u0280\u0430\u0456\u0274\u042c\u03bfw\",  // hue: 101\n+    \"\u0280ai\u0274bo\u0461\",     // hue: 104\n+    \"\u0280\u0430inb\u03bf\u0461\",    // hue: 104\n+    \"r\u0430i\u0274b\u03bf\u0461\",    // hue: 107\n+    \"\u0280\u0430in\u042c\u03bfw\",    // hue: 107\n+    \"r\u0430i\u0274\u042c\u03bfw\",    // hue: 110\n+    \"r\u0430\u0456nbo\u0461\",     // hue: 110\n+    \"r\u0430\u0456nb\u03bf\u0461\",    // hue: 113\n+    \"\u0280ain\u042c\u03bf\u0461\",    // hue: 114\n+    \"r\u0430\u0456n\u042c\u03bfw\",    // hue: 116\n+    \"\u0280a\u0456\u0274\u042cow\",    // hue: 116\n+    \"r\u0430inb\u03bfw\",      // hue: 122\n+    \"\u0280\u0430\u0456\u0274bo\u0461\",   // hue: 125\n+    \"r\u0430inb\u03bf\u0461\",     // hue: 131\n+    \"rainbow\",        // hue: 134\n+    \"r\u0430in\u042c\u03bfw\",     // hue: 134\n+    \"\u0280\u0430i\u0274bo\u0461\",    // hue: 140\n+    \"rain\u042c\u03bf\u0461\",     // hue: 141\n+    \"ra\u0456\u0274\u042cow\",     // hue: 143\n+    \"\u0280ain\u042co\u0461\",     // hue: 143\n+    \"\u0280a\u0456\u0274bow\",     // hue: 143\n+    \"\u0280ainbow\",       // hue: 148\n+    \"r\u0430\u0456\u0274bo\u0461\",    // hue: 149\n+    \"\u0280ainbo\u0461\",      // hue: 155\n+    \"\u0280a\u0456nbow\",      // hue: 155\n+    \"\u0280a\u0456n\u042cow\",     // hue: 155\n+    \"rai\u0274b\u03bfw\",      // hue: 158\n+    \"\u0280\u0430i\u0274\u042co\u0461\",   // hue: 158\n+    \"rainb\u03bfw\",       // hue: 160\n+    \"r\u0430inbow\",       // hue: 160\n+    \"\u0280a\u0456\u0274b\u03bf\u0461\",   // hue: 164\n+    \"\u0280\u0430i\u0274bow\",     // hue: 164\n+    \"\u0280\u0430\u0456n\u042co\u0461\",   // hue: 164\n+    \"\u0280ai\u0274\u042c\u03bf\u0461\",   // hue: 165\n+    \"r\u0430i\u0274bo\u0461\",     // hue: 167\n+    \"\u0280a\u0456\u0274\u042c\u03bfw\",   // hue: 167\n+    \"\u0280a\u0456\u0274\u042c\u03bf\u0461\",  // hue: 171\n+    \"ra\u0456nbo\u0461\",      // hue: 173\n+    \"\u0280\u0430\u0456\u0274\u042co\u0461\",  // hue: 173\n+    \"r\u0430\u0456\u0274b\u03bf\u0461\",   // hue: 176\n+    \"\u0280\u0430in\u042cow\",     // hue: 176\n+    \"r\u0430i\u0274\u042c\u03bf\u0461\",   // hue: 177\n+    \"r\u0430\u0456\u0274\u042c\u03bfw\",   // hue: 179\n+    \"\u0280\u0430in\u042co\u0461\",    // hue: 179\n+    \"\u0280\u0430\u0456\u0274bow\",    // hue: 179\n+    \"r\u0430i\u0274\u042co\u0461\",    // hue: 182\n+    \"ra\u0456\u0274b\u03bf\u0461\",    // hue: 188\n+    \"r\u0430\u0456n\u042co\u0461\",    // hue: 188\n+    \"rai\u0274\u042c\u03bf\u0461\",    // hue: 189\n+    \"ra\u0456\u0274\u042c\u03bfw\",    // hue: 191\n+    \"\u0280a\u0456\u0274b\u03bfw\",    // hue: 191\n+    \"\u0280\u0430\u0456n\u042cow\",    // hue: 191\n+    \"rainb\u03bf\u0461\",      // hue: 194\n+    \"r\u0430inbo\u0461\",      // hue: 194\n+    \"r\u0430\u0456nbow\",      // hue: 194\n+    \"rain\u042c\u03bfw\",      // hue: 197\n+    \"r\u0430in\u042co\u0461\",     // hue: 206\n+    \"r\u0430\u0456\u0274bow\",     // hue: 206\n+    \"r\u0430\u0456\u0274\u042c\u03bf\u0461\",  // hue: 210\n+    \"\u0280ai\u0274\u042cow\",     // hue: 212\n+    \"ra\u0456\u0274b\u03bfw\",     // hue: 218\n+    \"r\u0430\u0456n\u042cow\",     // hue: 218\n+    \"\u0280ai\u0274b\u03bf\u0461\",    // hue: 221\n+    \"\u0280ai\u0274\u042c\u03bfw\",    // hue: 224\n+    \"\u0280a\u0456nb\u03bf\u0461\",    // hue: 227\n+    \"rai\u0274bo\u0461\",      // hue: 230\n+    \"\u0280a\u0456nb\u03bfw\",     // hue: 230\n+    \"\u0280a\u0456n\u042c\u03bfw\",    // hue: 230\n+    \"\u0280\u0430in\u042c\u03bf\u0461\",   // hue: 231\n+    \"rainbo\u0461\",       // hue: 232\n+    \"ra\u0456nbow\",       // hue: 232\n+    \"\u0280\u0430\u0456\u0274\u042cow\",   // hue: 233\n+    \"\u0280a\u0456\u0274\u042co\u0461\",   // hue: 239\n+    \"\u0280\u0430\u0456n\u042c\u03bf\u0461\",  // hue: 246\n+    \"rai\u0274b\u03bf\u0461\",     // hue: 248\n+    \"\u0280\u0430i\u0274\u042cow\",    // hue: 248\n+    \"ra\u0456\u0274\u042c\u03bf\u0461\",   // hue: 249\n+    \"rai\u0274\u042c\u03bfw\",     // hue: 251\n+    \"r\u0430\u0456\u0274\u042co\u0461\",   // hue: 251\n+    \"\u0280ai\u0274bow\",      // hue: 251\n+    \"\u0280\u0430inb\u03bfw\",     // hue: 251\n+    \"ra\u0456nb\u03bf\u0461\",     // hue: 254\n+];"}, {"sha": "eb573d3121f5721c8d2d5006cd28b5d0a57925b4", "filename": "tests/source/configs/fn_params_layout/compressed.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Fcompressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Fcompressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Fcompressed.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Compressed\n+// rustfmt-fn_params_layout: Compressed\n // Function arguments density\n \n trait Lorem {", "previous_filename": "tests/source/configs/fn_args_layout/compressed.rs"}, {"sha": "4be34f0fe4ac1a689dade9eb90d9e6451c86a1a9", "filename": "tests/source/configs/fn_params_layout/tall.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Ftall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Ftall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Ftall.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Tall\n+// rustfmt-fn_params_layout: Tall\n // Function arguments density\n \n trait Lorem {", "previous_filename": "tests/source/configs/fn_args_layout/tall.rs"}, {"sha": "674968023f99762dacf3cf4e4b55fec7823804d5", "filename": "tests/source/configs/fn_params_layout/vertical.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Ffn_params_layout%2Fvertical.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Vertical\n+// rustfmt-fn_params_layout: Vertical\n // Function arguments density\n \n trait Lorem {", "previous_filename": "tests/source/configs/fn_args_layout/vertical.rs"}, {"sha": "a7b9616929cb00137c0ae462ef9cc26916aa1d55", "filename": "tests/source/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -36,7 +36,7 @@ enum StructLikeVariants {\n     Normal(u32, String, ),\n     StructLike { x: i32, // Test comment\n         // Pre-comment\n-        #[Attr50] y: SomeType, // Aanother Comment\n+        #[Attr50] y: SomeType, // Another Comment\n     }, SL { a: A }\n }\n "}, {"sha": "3ecd8701727ad0a3ae46954b83bd5b7e4901fd7e", "filename": "tests/source/fn-custom-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-7.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-normalize_comments: true\n-// rustfmt-fn_args_layout: Vertical\n+// rustfmt-fn_params_layout: Vertical\n // rustfmt-brace_style: AlwaysNextLine\n \n // Case with only one variable."}, {"sha": "64ef0ecfaae49f4d1219d98856d9df5d7d3147d7", "filename": "tests/source/fn-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Compressed\n+// rustfmt-fn_params_layout: Compressed\n // Test some of the ways function signatures can be customised.\n \n // Test compressed layout of args."}, {"sha": "fd6e3f0442ec14fc3ae2f65080cbd28476c194b9", "filename": "tests/source/fn_args_layout-vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ffn_args_layout-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ffn_args_layout-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_args_layout-vertical.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Vertical\n+// rustfmt-fn_params_layout: Vertical\n \n // Empty list should stay on one line.\n fn do_bar("}, {"sha": "9af114fbe574d827daf6f89e0d67979e59f903ca", "filename": "tests/source/issue-3987/format_macro_bodies_true.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-3987%2Fformat_macro_bodies_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-3987%2Fformat_macro_bodies_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3987%2Fformat_macro_bodies_true.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,26 @@\n+// rustfmt-format_macro_bodies: true\n+\n+// with comments\n+macro_rules! macros {\n+    () => {{\n+        Struct {\n+            field: (\n+                42 + //comment 1\n+                42\n+                //comment 2\n+            ),\n+        };\n+    }};\n+}\n+\n+// without comments\n+macro_rules! macros {\n+    () => {{\n+        Struct {\n+            field: (\n+                42 +\n+                42\n+            ),\n+        };\n+    }};\n+}"}, {"sha": "382072d9004bfcd785836b24a6a080204edd054f", "filename": "tests/source/issue-4643.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-4643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-4643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4643.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,23 @@\n+// output doesn't get corrupted when using comments within generic type parameters of a trait\n+\n+pub trait Something<\n+    A,\n+    // some comment\n+    B,\n+    C\n+> {\n+    fn a(&self, x: A) -> i32;\n+    fn b(&self, x: B) -> i32;\n+    fn c(&self, x: C) -> i32;\n+}\n+\n+pub trait SomethingElse<\n+    A,\n+    /* some comment */\n+    B,\n+    C\n+> {\n+    fn a(&self, x: A) -> i32;\n+    fn b(&self, x: B) -> i32;\n+    fn c(&self, x: C) -> i32;\n+}"}, {"sha": "d048eb10fb15cb72c52147fb70330a3081151360", "filename": "tests/source/issue-4689/one.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-4689%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-4689%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4689%2Fone.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,149 @@\n+// rustfmt-version: One\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write1 + fmt::Write2\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer1<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + Printer2<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+>,\n+> {\n+}\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+> + fmt::Write1\n++ fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+)\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+) + fmt::Write\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+mut entries: entryyyyyyyy,\n+) -> (\n+impl Fn(\n+AlphabeticalTraversal,\n+Seconddddddddddddddddddddddddddddddddddd\n+) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n++ Sendddddddddddddddddddddddddddddddddddddddddddd\n+) {\n+}\n+    \n+pub trait SomeTrait:\n+Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+for<'b> &'b Self: Send\n++ Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "ea7feda825d461361638d2fda677977b733abfd8", "filename": "tests/source/issue-4689/two.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-4689%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue-4689%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4689%2Ftwo.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,149 @@\n+// rustfmt-version: Two\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write1 + fmt::Write2\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer1<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + Printer2<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+>,\n+> {\n+}\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+> + fmt::Write1\n++ fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+)\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+) + fmt::Write\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+mut entries: entryyyyyyyy,\n+) -> (\n+impl Fn(\n+AlphabeticalTraversal,\n+Seconddddddddddddddddddddddddddddddddddd\n+) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n++ Sendddddddddddddddddddddddddddddddddddddddddddd\n+) {\n+}\n+    \n+pub trait SomeTrait:\n+Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+for<'b> &'b Self: Send\n++ Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "03b78e34108cce3592f3406e0c0a0609d8765dba", "filename": "tests/source/issue_1306.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue_1306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue_1306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_1306.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-max_width: 160\n+// rustfmt-fn_call_width: 96\n+// rustfmt-fn_args_layout: Compressed\n+// rustfmt-trailing_comma: Always\n+// rustfmt-wrap_comments: true\n+\n+fn foo() {\n+    for elem in try!(gen_epub_book::ops::parse_descriptor_file(&mut try!(File::open(&opts.source_file.1).map_err(|_| {\n+        gen_epub_book::Error::Io {\n+            desc: \"input file\",\n+            op: \"open\",\n+            more: None,\n+        }\n+    })),\n+                                                               \"input file\")) {\n+        println!(\"{}\", elem);\n+    }\n+}\n+\n+fn write_content() {\n+    io::copy(try!(File::open(in_f).map_err(|_| {\n+        Error::Io {\n+            desc: \"Content\",\n+            op: \"open\",\n+            more: None,\n+        }\n+    })),\n+             w);\n+}"}, {"sha": "0279246ed6ac45c22fad9eb2ac7410dfb28748f4", "filename": "tests/source/issue_3245.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue_3245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue_3245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_3245.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = 1;\n+    ;let y = 3;\n+}"}, {"sha": "8f6cd8f9fbce586283dd0c5b90ab648c67e0ea77", "filename": "tests/source/issue_3561.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue_3561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fissue_3561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_3561.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+fn main() {;7\n+}\n+\n+fn main() {\n+    ;7\n+}"}, {"sha": "d0437ee10fd151337043c0c065759105394152c6", "filename": "tests/source/skip_macro_invocations/all.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fall.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "1f6722344fe3b99d5747dc711a249ad9eb51427f", "filename": "tests/source/skip_macro_invocations/all_and_name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fall_and_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fall_and_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fall_and_name.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\",\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should also skip this invocation, as the wildcard covers it\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "f3dd89dc4db3383d772274e58936f01131e966f7", "filename": "tests/source/skip_macro_invocations/empty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fempty.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: []\n+\n+// Should not skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "7fa5d3a6f715af040a8015d7e516cc4c5d373067", "filename": "tests/source/skip_macro_invocations/name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fname.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "d56695325240d54936b12420c4064c7be47f099e", "filename": "tests/source/skip_macro_invocations/name_unknown.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fname_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fname_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fname_unknown.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"unknown\"]\n+\n+// Should not skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "a920381a4552c0adb24a0b6de06f97946da908d3", "filename": "tests/source/skip_macro_invocations/names.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fnames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fnames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fnames.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-skip_macro_invocations: [\"foo\",\"bar\"]\n+\n+// Should skip this invocation\n+foo!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+bar!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+baz!(\n+        const _: u8 = 0;\n+);"}, {"sha": "61296869a50656c90dff19decd06ed16185295b2", "filename": "tests/source/skip_macro_invocations/path_qualified_invocation_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should not skip this invocation\n+self::items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "9398918a9e11e23e1f6736ca2e1d1e5285d3c157", "filename": "tests/source/skip_macro_invocations/path_qualified_match.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_match.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should skip this invocation\n+self::items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "4e3eb542dbea425182140b1239bcfcb913bf9582", "filename": "tests/source/skip_macro_invocations/path_qualified_name_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should not skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "43cb8015de58a04a0a45dbe825b52d394d928256", "filename": "tests/source/skip_macro_invocations/use_alias_examples.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fuse_alias_examples.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,32 @@\n+// rustfmt-skip_macro_invocations: [\"aaa\",\"ccc\"]\n+\n+// These tests demonstrate a realistic use case with use aliases.\n+// The use statements should not impact functionality in any way.\n+\n+use crate::{aaa, bbb, ddd};\n+\n+// No use alias, invocation in list\n+// Should skip this invocation\n+aaa!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation in list\n+// Should skip this invocation\n+use crate::bbb as ccc;\n+ccc!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation not in list\n+// Should not skip this invocation\n+use crate::ddd as eee;\n+eee!(\n+        const _: u8 = 0;\n+);\n+\n+// No use alias, invocation not in list\n+// Should not skip this invocation\n+fff!(\n+        const _: u8 = 0;\n+);"}, {"sha": "5189a7454f3a7dfb383ba143412a2669207c7835", "filename": "tests/source/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftuple.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// Test tuple litterals\n+// Test tuple literals\n \n fn foo() {\n     let a = (a, a, a, a, a);"}, {"sha": "56064e4a4cccf9bbe97dbc55054f50fdb5c6e807", "filename": "tests/source/wrap_comments_should_not_imply_format_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Fsource%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fwrap_comments_should_not_imply_format_doc_comments.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -11,6 +11,6 @@\n ///\n fn foo() {}\n \n-/// A long commment for wrapping\n+/// A long comment for wrapping\n /// This is a long long long long long long long long long long long long long long long long long long long long sentence.\n fn bar() {}"}, {"sha": "47210cae2aaa0bace3d8e1bd3c31149d148708ad", "filename": "tests/target/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -314,7 +314,7 @@ pub enum Feature {\n     tbm,\n     /// POPCNT (Population Count)\n     popcnt,\n-    /// FXSR (Floating-point context fast save and restor)\n+    /// FXSR (Floating-point context fast save and restore)\n     fxsr,\n     /// XSAVE (Save Processor Extended States)\n     xsave,"}, {"sha": "3e1b6b0a28fe4c9f44726ca8ae8961f576eca70c", "filename": "tests/target/comments_unicode.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fcomments_unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fcomments_unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments_unicode.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,140 @@\n+impl Default for WhitespaceCharacters {\n+    fn default() -> Self {\n+        Self {\n+            space: '\u00b7',   // U+00B7\n+            nbsp: '\u237d',    // U+237D\n+            tab: '\u2192',     // U+2192\n+            newline: '\u23ce', // U+23CE\n+        }\n+    }\n+}\n+\n+const RAINBOWS: &[&str] = &[\n+    \"r\u0430in\u042c\u03bf\u0461\", // hue: 0\n+    \"ra\u0456n\u042c\u03bfw\", // hue: 2\n+    \"r\u0430\u0456\u0274\u042cow\", // hue: 2\n+    \"ra\u0456\u0274\u042co\u0461\", // hue: 8\n+    \"\u0280ain\u042cow\", // hue: 8\n+    \"\u0280a\u0456\u0274bo\u0461\", // hue: 8\n+    \"\u0280\u0430\u0456nb\u03bfw\", // hue: 11\n+    \"rain\u042co\u0461\", // hue: 14\n+    \"ra\u0456\u0274bow\", // hue: 14\n+    \"r\u0430i\u0274\u042cow\", // hue: 20\n+    \"ra\u0456n\u042cow\", // hue: 26\n+    \"\u0280ai\u0274b\u03bfw\", // hue: 32\n+    \"ra\u0456\u0274bo\u0461\", // hue: 35\n+    \"r\u0430i\u0274bow\", // hue: 35\n+    \"r\u0430\u0456nb\u03bfw\", // hue: 38\n+    \"r\u0430in\u042cow\", // hue: 47\n+    \"\u0280a\u0456nbo\u0461\", // hue: 47\n+    \"\u0280a\u0456n\u042co\u0461\", // hue: 47\n+    \"\u0280\u0430\u0456\u0274b\u03bfw\", // hue: 53\n+    \"\u0280a\u0456n\u042c\u03bf\u0461\", // hue: 57\n+    \"rai\u0274\u042co\u0461\", // hue: 68\n+    \"\u0280ainb\u03bf\u0461\", // hue: 68\n+    \"\u0280\u0430inbo\u0461\", // hue: 68\n+    \"\u0280\u0430i\u0274b\u03bfw\", // hue: 68\n+    \"\u0280\u0430\u0456nbow\", // hue: 68\n+    \"r\u0430\u0456n\u042c\u03bf\u0461\", // hue: 69\n+    \"\u0280ain\u042c\u03bfw\", // hue: 71\n+    \"rai\u0274bow\", // hue: 73\n+    \"ra\u0456n\u042co\u0461\", // hue: 74\n+    \"r\u0430\u0456\u0274b\u03bfw\", // hue: 77\n+    \"ra\u0456n\u042c\u03bf\u0461\", // hue: 81\n+    \"rai\u0274\u042cow\", // hue: 83\n+    \"\u0280ainb\u03bfw\", // hue: 83\n+    \"\u0280\u0430inbow\", // hue: 83\n+    \"\u0280\u0430i\u0274b\u03bf\u0461\", // hue: 83\n+    \"\u0280\u0430\u0456nbo\u0461\", // hue: 83\n+    \"\u0280\u0430\u0456\u0274\u042c\u03bf\u0461\", // hue: 84\n+    \"rain\u042cow\", // hue: 85\n+    \"\u0280\u0430i\u0274\u042c\u03bfw\", // hue: 86\n+    \"\u0280\u0430\u0456nb\u03bf\u0461\", // hue: 89\n+    \"\u0280\u0430\u0456n\u042c\u03bfw\", // hue: 92\n+    \"r\u0430i\u0274b\u03bfw\", // hue: 95\n+    \"\u0280\u0430\u0456\u0274b\u03bf\u0461\", // hue: 98\n+    \"\u0280\u0430i\u0274\u042c\u03bf\u0461\", // hue: 99\n+    \"ra\u0456nb\u03bfw\", // hue: 101\n+    \"\u0280\u0430\u0456\u0274\u042c\u03bfw\", // hue: 101\n+    \"\u0280ai\u0274bo\u0461\", // hue: 104\n+    \"\u0280\u0430inb\u03bf\u0461\", // hue: 104\n+    \"r\u0430i\u0274b\u03bf\u0461\", // hue: 107\n+    \"\u0280\u0430in\u042c\u03bfw\", // hue: 107\n+    \"r\u0430i\u0274\u042c\u03bfw\", // hue: 110\n+    \"r\u0430\u0456nbo\u0461\", // hue: 110\n+    \"r\u0430\u0456nb\u03bf\u0461\", // hue: 113\n+    \"\u0280ain\u042c\u03bf\u0461\", // hue: 114\n+    \"r\u0430\u0456n\u042c\u03bfw\", // hue: 116\n+    \"\u0280a\u0456\u0274\u042cow\", // hue: 116\n+    \"r\u0430inb\u03bfw\", // hue: 122\n+    \"\u0280\u0430\u0456\u0274bo\u0461\", // hue: 125\n+    \"r\u0430inb\u03bf\u0461\", // hue: 131\n+    \"rainbow\", // hue: 134\n+    \"r\u0430in\u042c\u03bfw\", // hue: 134\n+    \"\u0280\u0430i\u0274bo\u0461\", // hue: 140\n+    \"rain\u042c\u03bf\u0461\", // hue: 141\n+    \"ra\u0456\u0274\u042cow\", // hue: 143\n+    \"\u0280ain\u042co\u0461\", // hue: 143\n+    \"\u0280a\u0456\u0274bow\", // hue: 143\n+    \"\u0280ainbow\", // hue: 148\n+    \"r\u0430\u0456\u0274bo\u0461\", // hue: 149\n+    \"\u0280ainbo\u0461\", // hue: 155\n+    \"\u0280a\u0456nbow\", // hue: 155\n+    \"\u0280a\u0456n\u042cow\", // hue: 155\n+    \"rai\u0274b\u03bfw\", // hue: 158\n+    \"\u0280\u0430i\u0274\u042co\u0461\", // hue: 158\n+    \"rainb\u03bfw\", // hue: 160\n+    \"r\u0430inbow\", // hue: 160\n+    \"\u0280a\u0456\u0274b\u03bf\u0461\", // hue: 164\n+    \"\u0280\u0430i\u0274bow\", // hue: 164\n+    \"\u0280\u0430\u0456n\u042co\u0461\", // hue: 164\n+    \"\u0280ai\u0274\u042c\u03bf\u0461\", // hue: 165\n+    \"r\u0430i\u0274bo\u0461\", // hue: 167\n+    \"\u0280a\u0456\u0274\u042c\u03bfw\", // hue: 167\n+    \"\u0280a\u0456\u0274\u042c\u03bf\u0461\", // hue: 171\n+    \"ra\u0456nbo\u0461\", // hue: 173\n+    \"\u0280\u0430\u0456\u0274\u042co\u0461\", // hue: 173\n+    \"r\u0430\u0456\u0274b\u03bf\u0461\", // hue: 176\n+    \"\u0280\u0430in\u042cow\", // hue: 176\n+    \"r\u0430i\u0274\u042c\u03bf\u0461\", // hue: 177\n+    \"r\u0430\u0456\u0274\u042c\u03bfw\", // hue: 179\n+    \"\u0280\u0430in\u042co\u0461\", // hue: 179\n+    \"\u0280\u0430\u0456\u0274bow\", // hue: 179\n+    \"r\u0430i\u0274\u042co\u0461\", // hue: 182\n+    \"ra\u0456\u0274b\u03bf\u0461\", // hue: 188\n+    \"r\u0430\u0456n\u042co\u0461\", // hue: 188\n+    \"rai\u0274\u042c\u03bf\u0461\", // hue: 189\n+    \"ra\u0456\u0274\u042c\u03bfw\", // hue: 191\n+    \"\u0280a\u0456\u0274b\u03bfw\", // hue: 191\n+    \"\u0280\u0430\u0456n\u042cow\", // hue: 191\n+    \"rainb\u03bf\u0461\", // hue: 194\n+    \"r\u0430inbo\u0461\", // hue: 194\n+    \"r\u0430\u0456nbow\", // hue: 194\n+    \"rain\u042c\u03bfw\", // hue: 197\n+    \"r\u0430in\u042co\u0461\", // hue: 206\n+    \"r\u0430\u0456\u0274bow\", // hue: 206\n+    \"r\u0430\u0456\u0274\u042c\u03bf\u0461\", // hue: 210\n+    \"\u0280ai\u0274\u042cow\", // hue: 212\n+    \"ra\u0456\u0274b\u03bfw\", // hue: 218\n+    \"r\u0430\u0456n\u042cow\", // hue: 218\n+    \"\u0280ai\u0274b\u03bf\u0461\", // hue: 221\n+    \"\u0280ai\u0274\u042c\u03bfw\", // hue: 224\n+    \"\u0280a\u0456nb\u03bf\u0461\", // hue: 227\n+    \"rai\u0274bo\u0461\", // hue: 230\n+    \"\u0280a\u0456nb\u03bfw\", // hue: 230\n+    \"\u0280a\u0456n\u042c\u03bfw\", // hue: 230\n+    \"\u0280\u0430in\u042c\u03bf\u0461\", // hue: 231\n+    \"rainbo\u0461\", // hue: 232\n+    \"ra\u0456nbow\", // hue: 232\n+    \"\u0280\u0430\u0456\u0274\u042cow\", // hue: 233\n+    \"\u0280a\u0456\u0274\u042co\u0461\", // hue: 239\n+    \"\u0280\u0430\u0456n\u042c\u03bf\u0461\", // hue: 246\n+    \"rai\u0274b\u03bf\u0461\", // hue: 248\n+    \"\u0280\u0430i\u0274\u042cow\", // hue: 248\n+    \"ra\u0456\u0274\u042c\u03bf\u0461\", // hue: 249\n+    \"rai\u0274\u042c\u03bfw\", // hue: 251\n+    \"r\u0430\u0456\u0274\u042co\u0461\", // hue: 251\n+    \"\u0280ai\u0274bow\", // hue: 251\n+    \"\u0280\u0430inb\u03bfw\", // hue: 251\n+    \"ra\u0456nb\u03bf\u0461\", // hue: 254\n+];"}, {"sha": "ff32f0f1d5868a3d2ef2bc6e9cbefeae0620cbe1", "filename": "tests/target/configs/fn_params_layout/compressed.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Fcompressed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Fcompressed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Fcompressed.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Compressed\n+// rustfmt-fn_params_layout: Compressed\n // Function arguments density\n \n trait Lorem {", "previous_filename": "tests/target/configs/fn_args_layout/compressed.rs"}, {"sha": "25a86799af0d8dd84e779c987965dae42e2fe4cc", "filename": "tests/target/configs/fn_params_layout/tall.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Ftall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Ftall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Ftall.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Tall\n+// rustfmt-fn_params_layout: Tall\n // Function arguments density\n \n trait Lorem {", "previous_filename": "tests/target/configs/fn_args_layout/tall.rs"}, {"sha": "7a0e42415f3b99e3ce58ddbdf952579a6a798a27", "filename": "tests/target/configs/fn_params_layout/vertical.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Ffn_params_layout%2Fvertical.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Vertical\n+// rustfmt-fn_params_layout: Vertical\n // Function arguments density\n \n trait Lorem {", "previous_filename": "tests/target/configs/fn_args_layout/vertical.rs"}, {"sha": "70fc8ab376ccd9dcdd01d2de55fbd0a7c146bd7a", "filename": "tests/target/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -43,7 +43,7 @@ enum StructLikeVariants {\n         x: i32, // Test comment\n         // Pre-comment\n         #[Attr50]\n-        y: SomeType, // Aanother Comment\n+        y: SomeType, // Another Comment\n     },\n     SL {\n         a: A,"}, {"sha": "f6a1a90c3fc68034d0260cebdd776df1e9b5e1fb", "filename": "tests/target/fn-custom-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-7.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-normalize_comments: true\n-// rustfmt-fn_args_layout: Vertical\n+// rustfmt-fn_params_layout: Vertical\n // rustfmt-brace_style: AlwaysNextLine\n \n // Case with only one variable."}, {"sha": "506d9de34370b0dfaf9415e41cd4647ae4bfe3c2", "filename": "tests/target/fn-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Compressed\n+// rustfmt-fn_params_layout: Compressed\n // Test some of the ways function signatures can be customised.\n \n // Test compressed layout of args."}, {"sha": "bfeca15c967ed0f5c7ee270f674bfc268df1ef40", "filename": "tests/target/fn_args_layout-vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ffn_args_layout-vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ffn_args_layout-vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-vertical.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-fn_args_layout: Vertical\n+// rustfmt-fn_params_layout: Vertical\n \n // Empty list should stay on one line.\n fn do_bar() -> u8 {"}, {"sha": "2038ed7f1d014d1a95754441c451b664abb41230", "filename": "tests/target/issue-2534/format_macro_matchers_false.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-2534%2Fformat_macro_matchers_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-2534%2Fformat_macro_matchers_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2534%2Fformat_macro_matchers_false.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-format_macro_matchers: false\n+\n+macro_rules! foo {\n+    ($a:ident : $b:ty) => {};\n+    ($a:ident $b:ident $c:ident) => {};\n+}"}, {"sha": "01d939add4dc2c85f44044a4e9e2544cd02806b0", "filename": "tests/target/issue-2534/format_macro_matchers_true.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-2534%2Fformat_macro_matchers_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-2534%2Fformat_macro_matchers_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2534%2Fformat_macro_matchers_true.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-format_macro_matchers: true\n+\n+macro_rules! foo {\n+    ($a:ident : $b:ty) => {};\n+    ($a:ident $b:ident $c:ident) => {};\n+}"}, {"sha": "1352b762e4509c8ab206f8dc0d96f29b8dd95d79", "filename": "tests/target/issue-3987/format_macro_bodies_false.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-3987%2Fformat_macro_bodies_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-3987%2Fformat_macro_bodies_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3987%2Fformat_macro_bodies_false.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,26 @@\n+// rustfmt-format_macro_bodies: false\n+\n+// with comments\n+macro_rules! macros {\n+    () => {{\n+        Struct {\n+            field: (\n+                42 + //comment 1\n+                42\n+                //comment 2\n+            ),\n+        };\n+    }};\n+}\n+\n+// without comments\n+macro_rules! macros {\n+    () => {{\n+        Struct {\n+            field: (\n+                42 +\n+                42\n+            ),\n+        };\n+    }};\n+}"}, {"sha": "88d57159c859fe11d37584c4c6bbb5a81130c7f6", "filename": "tests/target/issue-3987/format_macro_bodies_true.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-3987%2Fformat_macro_bodies_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-3987%2Fformat_macro_bodies_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3987%2Fformat_macro_bodies_true.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-format_macro_bodies: true\n+\n+// with comments\n+macro_rules! macros {\n+    () => {{\n+        Struct {\n+            field: (\n+                42 + //comment 1\n+                42\n+                //comment 2\n+            ),\n+        };\n+    }};\n+}\n+\n+// without comments\n+macro_rules! macros {\n+    () => {{\n+        Struct { field: (42 + 42) };\n+    }};\n+}"}, {"sha": "ef99e4db382cb158ddde4ecdfa5b8c50e589280d", "filename": "tests/target/issue-4643.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4643.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,19 @@\n+// output doesn't get corrupted when using comments within generic type parameters of a trait\n+\n+pub trait Something<\n+    A,\n+    // some comment\n+    B,\n+    C,\n+>\n+{\n+    fn a(&self, x: A) -> i32;\n+    fn b(&self, x: B) -> i32;\n+    fn c(&self, x: C) -> i32;\n+}\n+\n+pub trait SomethingElse<A, /* some comment */ B, C> {\n+    fn a(&self, x: A) -> i32;\n+    fn b(&self, x: B) -> i32;\n+    fn c(&self, x: C) -> i32;\n+}"}, {"sha": "df1a507bc1da9c597a6c2782cc3e8e1149bcf96d", "filename": "tests/target/issue-4689/one.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4689%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4689%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4689%2Fone.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,150 @@\n+// rustfmt-version: One\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write1\n+    + fmt::Write2\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer1<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + Printer2<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+        WithType = LongItemName,\n+        Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+    >,\n+> {\n+}\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+            WithType = LongItemName,\n+            Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+        > + fmt::Write1\n+        + fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+        // this comment is deleted\n+    ),\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+            // this comment is deleted\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+        &mut ProbeContext,\n+        ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+        tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+    ),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+            &mut ProbeContext,\n+            ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+            tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: entryyyyyyyy,\n+) -> (impl Fn(\n+    AlphabeticalTraversal,\n+    Seconddddddddddddddddddddddddddddddddddd,\n+) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n+        + Sendddddddddddddddddddddddddddddddddddddddddddd) {\n+}\n+\n+pub trait SomeTrait:\n+    Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+    + Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+    for<'b> &'b Self: Send\n+        + Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+        + Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "e3b5cd22810ba37c15d3e1165b74e8188efc5d80", "filename": "tests/target/issue-4689/two.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4689%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4689%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4689%2Ftwo.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,152 @@\n+// rustfmt-version: Two\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write1\n+    + fmt::Write2\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer1<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + Printer2<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+        WithType = LongItemName,\n+        Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+    >,\n+> {\n+}\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+            WithType = LongItemName,\n+            Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+        > + fmt::Write1\n+        + fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+        // this comment is deleted\n+    ),\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+            // this comment is deleted\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+        &mut ProbeContext,\n+        ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+        tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+    ),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+            &mut ProbeContext,\n+            ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+            tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: entryyyyyyyy,\n+) -> (\n+    impl Fn(\n+        AlphabeticalTraversal,\n+        Seconddddddddddddddddddddddddddddddddddd,\n+    ) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n+    + Sendddddddddddddddddddddddddddddddddddddddddddd\n+) {\n+}\n+\n+pub trait SomeTrait:\n+    Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+    + Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+    for<'b> &'b Self: Send\n+        + Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+        + Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "29f6bda90631b84efebcea32909a6864305fb1fb", "filename": "tests/target/issue-4791/issue_4928.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4791%2Fissue_4928.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-4791%2Fissue_4928.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4791%2Fissue_4928.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,7 +1,7 @@\n // rustfmt-brace_style: SameLineWhere\n // rustfmt-comment_width: 100\n // rustfmt-edition: 2018\n-// rustfmt-fn_args_layout: Compressed\n+// rustfmt-fn_params_layout: Compressed\n // rustfmt-hard_tabs: false\n // rustfmt-match_block_trailing_comma: true\n // rustfmt-max_width: 100"}, {"sha": "d4bf4909ad76f2fc4f9165d0dfc68bd5b4b1eefa", "filename": "tests/target/issue-5358.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-5358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue-5358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5358.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,4 @@\n+// Test /* comment */ inside trait generics does not get duplicated.\n+trait Test</* comment */ T> {}\n+\n+trait TestTwo</* comment */ T, /* comment */ V> {}"}, {"sha": "6bb514cdfe550e384fa47a7fb23d096b1b748f87", "filename": "tests/target/issue_1306.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_1306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_1306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_1306.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,33 @@\n+// rustfmt-max_width: 160\n+// rustfmt-fn_call_width: 96\n+// rustfmt-fn_args_layout: Compressed\n+// rustfmt-trailing_comma: Always\n+// rustfmt-wrap_comments: true\n+\n+fn foo() {\n+    for elem in try!(gen_epub_book::ops::parse_descriptor_file(\n+        &mut try!(File::open(&opts.source_file.1).map_err(|_| {\n+            gen_epub_book::Error::Io {\n+                desc: \"input file\",\n+                op: \"open\",\n+                more: None,\n+            }\n+        })),\n+        \"input file\"\n+    )) {\n+        println!(\"{}\", elem);\n+    }\n+}\n+\n+fn write_content() {\n+    io::copy(\n+        try!(File::open(in_f).map_err(|_| {\n+            Error::Io {\n+                desc: \"Content\",\n+                op: \"open\",\n+                more: None,\n+            }\n+        })),\n+        w,\n+    );\n+}"}, {"sha": "e12249a6da6f3aac4a0de8f7a2dc3721d61452a8", "filename": "tests/target/issue_3033.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_3033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_3033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_3033.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,2 @@\n+use dom::bindings::codegen::Bindings::BluetoothRemoteGATTServerBinding::BluetoothRemoteGATTServerBinding::\n+    BluetoothRemoteGATTServerMethods;"}, {"sha": "8f442f1181a595568535f3df9e082cd9b87ba351", "filename": "tests/target/issue_3245.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_3245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_3245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_3245.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = 1;\n+    let y = 3;\n+}"}, {"sha": "846a14d86a5fff6587e1498c5a5a7f256077776e", "filename": "tests/target/issue_3561.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_3561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_3561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_3561.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    7\n+}\n+\n+fn main() {\n+    7\n+}"}, {"sha": "a94c5c32188d2498afaaf9b20137bb62bb998527", "filename": "tests/target/issue_4350.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_4350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_4350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4350.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,13 @@\n+//rustfmt-format_macro_bodies: true\n+\n+macro_rules! mto_text_left {\n+    ($buf:ident, $n:ident, $pos:ident, $state:ident) => {{\n+        let cursor = loop {\n+            state = match iter.next() {\n+                None if $pos == DP::Start => break last_char_idx($buf),\n+                None /*some comment */ => break 0,\n+            };\n+        };\n+        Ok(saturate_cursor($buf, cursor))\n+    }};\n+}"}, {"sha": "bbd9a530b81c0d149dbc21d0e2fda009ad1f49cc", "filename": "tests/target/issue_5668.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_5668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fissue_5668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_5668.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,8 @@\n+type Foo = impl Send;\n+struct Struct<\n+    const C: usize = {\n+        let _: Foo = ();\n+        //~^ ERROR: mismatched types\n+        0\n+    },\n+>;"}, {"sha": "d0437ee10fd151337043c0c065759105394152c6", "filename": "tests/target/skip_macro_invocations/all.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fall.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "1f6722344fe3b99d5747dc711a249ad9eb51427f", "filename": "tests/target/skip_macro_invocations/all_and_name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fall_and_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fall_and_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fall_and_name.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\",\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should also skip this invocation, as the wildcard covers it\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "4a398cc59c6ee4df4d871e40de9cb20816df2036", "filename": "tests/target/skip_macro_invocations/empty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fempty.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: []\n+\n+// Should not skip this invocation\n+items!(\n+    const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "c4d577269c6f0a2e82195806779bc1424cc4cf3b", "filename": "tests/target/skip_macro_invocations/name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fname.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "7ab1440395c32b074a97a99d0b08001dbd6ef814", "filename": "tests/target/skip_macro_invocations/name_unknown.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fname_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fname_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fname_unknown.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"unknown\"]\n+\n+// Should not skip this invocation\n+items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "c6b41ff93d79dea68e22697b779bb92f2e1a57b9", "filename": "tests/target/skip_macro_invocations/names.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fnames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fnames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fnames.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-skip_macro_invocations: [\"foo\",\"bar\"]\n+\n+// Should skip this invocation\n+foo!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+bar!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+baz!(\n+    const _: u8 = 0;\n+);"}, {"sha": "6e372c726952ad614c6e7740a0fbfdba1aa8a0b6", "filename": "tests/target/skip_macro_invocations/path_qualified_invocation_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should not skip this invocation\n+self::items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "9398918a9e11e23e1f6736ca2e1d1e5285d3c157", "filename": "tests/target/skip_macro_invocations/path_qualified_match.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_match.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should skip this invocation\n+self::items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "aa57a2a655c4a722a1dda946a9b8755806739dfe", "filename": "tests/target/skip_macro_invocations/path_qualified_name_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should not skip this invocation\n+items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "799dd8c08af150ca99b49acc0f7ecf68eafdb0a0", "filename": "tests/target/skip_macro_invocations/use_alias_examples.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fuse_alias_examples.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -0,0 +1,32 @@\n+// rustfmt-skip_macro_invocations: [\"aaa\",\"ccc\"]\n+\n+// These tests demonstrate a realistic use case with use aliases.\n+// The use statements should not impact functionality in any way.\n+\n+use crate::{aaa, bbb, ddd};\n+\n+// No use alias, invocation in list\n+// Should skip this invocation\n+aaa!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation in list\n+// Should skip this invocation\n+use crate::bbb as ccc;\n+ccc!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation not in list\n+// Should not skip this invocation\n+use crate::ddd as eee;\n+eee!(\n+    const _: u8 = 0;\n+);\n+\n+// No use alias, invocation not in list\n+// Should not skip this invocation\n+fff!(\n+    const _: u8 = 0;\n+);"}, {"sha": "24fcf8cfd7cf358d25480d6d4d5367816cde9d75", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -1,4 +1,4 @@\n-// Test tuple litterals\n+// Test tuple literals\n \n fn foo() {\n     let a = (a, a, a, a, a);"}, {"sha": "6ccecc7e0bbe660a5bb34f527c5a15c4bed86410", "filename": "tests/target/wrap_comments_should_not_imply_format_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d87ad61d6af59bffcd5169361b4ae903979bdc/tests%2Ftarget%2Fwrap_comments_should_not_imply_format_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fwrap_comments_should_not_imply_format_doc_comments.rs?ref=e7d87ad61d6af59bffcd5169361b4ae903979bdc", "patch": "@@ -10,7 +10,7 @@\n /// ```\n fn foo() {}\n \n-/// A long commment for wrapping\n+/// A long comment for wrapping\n /// This is a long long long long long long long long long long long long long\n /// long long long long long long long sentence.\n fn bar() {}"}]}