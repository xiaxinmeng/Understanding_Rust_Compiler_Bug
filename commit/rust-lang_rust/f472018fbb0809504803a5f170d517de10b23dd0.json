{"sha": "f472018fbb0809504803a5f170d517de10b23dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NzIwMThmYmIwODA5NTA0ODAzYTVmMTcwZDUxN2RlMTBiMjNkZDA=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-06T23:29:56Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-06T23:29:56Z"}, "message": "Partially implement reallocation (e.g. for growing Vecs).", "tree": {"sha": "2271b9f541c42a09ec285013dd35480ef75272bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2271b9f541c42a09ec285013dd35480ef75272bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f472018fbb0809504803a5f170d517de10b23dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f472018fbb0809504803a5f170d517de10b23dd0", "html_url": "https://github.com/rust-lang/rust/commit/f472018fbb0809504803a5f170d517de10b23dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f472018fbb0809504803a5f170d517de10b23dd0/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d3d8af67acf1828b7f2d248793424310462729a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3d8af67acf1828b7f2d248793424310462729a", "html_url": "https://github.com/rust-lang/rust/commit/8d3d8af67acf1828b7f2d248793424310462729a"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "58a27a46f879a11c3e93720dab36e91e4af71b97", "filename": "src/interpreter.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f472018fbb0809504803a5f170d517de10b23dd0/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f472018fbb0809504803a5f170d517de10b23dd0/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=f472018fbb0809504803a5f170d517de10b23dd0", "patch": "@@ -530,6 +530,17 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 try!(self.memory.write_ptr(dest, ptr));\n             }\n \n+            \"__rust_reallocate\" => {\n+                let ptr_arg = try!(self.eval_operand(&args[0]));\n+                let _old_size_arg = try!(self.eval_operand(&args[1]));\n+                let size_arg = try!(self.eval_operand(&args[2]));\n+                let _align_arg = try!(self.eval_operand(&args[3]));\n+                let ptr = try!(self.memory.read_ptr(ptr_arg));\n+                let size = try!(self.memory.read_usize(size_arg));\n+                try!(self.memory.reallocate(ptr, size as usize));\n+                try!(self.memory.write_ptr(dest, ptr));\n+            }\n+\n             _ => panic!(\"can't call C ABI function: {}\", link_name),\n         }\n "}, {"sha": "c4f12804c8346cae70a00b782a07c4bf479688a4", "filename": "src/memory.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f472018fbb0809504803a5f170d517de10b23dd0/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f472018fbb0809504803a5f170d517de10b23dd0/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=f472018fbb0809504803a5f170d517de10b23dd0", "patch": "@@ -63,7 +63,7 @@ pub struct AllocId(u64);\n \n #[derive(Debug)]\n pub struct Allocation {\n-    pub bytes: Box<[u8]>,\n+    pub bytes: Vec<u8>,\n     pub relocations: BTreeMap<usize, AllocId>,\n     pub undef_mask: UndefMask,\n }\n@@ -104,7 +104,7 @@ impl Memory {\n     pub fn allocate(&mut self, size: usize) -> Pointer {\n         let id = AllocId(self.next_id);\n         let alloc = Allocation {\n-            bytes: vec![0; size].into_boxed_slice(),\n+            bytes: vec![0; size],\n             relocations: BTreeMap::new(),\n             undef_mask: UndefMask::new(size),\n         };\n@@ -116,6 +116,30 @@ impl Memory {\n         }\n     }\n \n+    // TODO(tsion): Track which allocations were returned from __rust_allocate and report an error\n+    // when reallocating/deallocating any others.\n+    pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<()> {\n+        if ptr.offset != 0 {\n+            // TODO(tsion): Report error about non-__rust_allocate'd pointer.\n+            panic!()\n+        }\n+\n+        let alloc = try!(self.get_mut(ptr.alloc_id));\n+        let size = alloc.bytes.len();\n+        if new_size > size {\n+            let amount = new_size - size;\n+            alloc.bytes.extend(iter::repeat(0).take(amount));\n+            alloc.undef_mask.grow(amount, false);\n+        } else if size > new_size {\n+            unimplemented!()\n+            // alloc.bytes.truncate(new_size);\n+            // alloc.undef_mask.len = new_size;\n+            // TODO: potentially remove relocations\n+        }\n+\n+        Ok(())\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////////////\n     // Allocation accessors\n     ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "063d7116744d0f4c58b42fb864e961597d26ff95", "filename": "test/vecs.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f472018fbb0809504803a5f170d517de10b23dd0/test%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f472018fbb0809504803a5f170d517de10b23dd0/test%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fvecs.rs?ref=f472018fbb0809504803a5f170d517de10b23dd0", "patch": "@@ -2,15 +2,15 @@\n #![allow(dead_code, unused_attributes)]\n \n #[miri_run]\n-fn make_vec() -> Vec<i32> {\n+fn make_vec() -> Vec<u8> {\n     let mut v = Vec::with_capacity(4);\n     v.push(1);\n     v.push(2);\n     v\n }\n \n #[miri_run]\n-fn make_vec_macro() -> Vec<i32> {\n+fn make_vec_macro() -> Vec<u8> {\n     vec![1, 2]\n }\n \n@@ -23,3 +23,12 @@ fn make_vec_macro_repeat() -> Vec<u8> {\n fn vec_into_iter() -> i32 {\n     vec![1, 2, 3, 4].into_iter().fold(0, |x, y| x + y)\n }\n+\n+#[miri_run]\n+fn vec_reallocate() -> Vec<u8> {\n+    let mut v = vec![1, 2];\n+    v.push(3);\n+    v.push(4);\n+    v.push(5);\n+    v\n+}"}]}