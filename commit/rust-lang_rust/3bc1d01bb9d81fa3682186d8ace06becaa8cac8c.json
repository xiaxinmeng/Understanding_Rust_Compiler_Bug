{"sha": "3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzFkMDFiYjlkODFmYTM2ODIxODZkOGFjZTA2YmVjYWE4Y2FjOGM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-26T08:34:54Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-26T08:34:54Z"}, "message": "Clear up `get_size_and_align`", "tree": {"sha": "f651baf3d2c168e46a2c286a40189a09576ac1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f651baf3d2c168e46a2c286a40189a09576ac1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "html_url": "https://github.com/rust-lang/rust/commit/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e7a3cc4dcb7ddd404b9566047a78d1e234f137", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e7a3cc4dcb7ddd404b9566047a78d1e234f137", "html_url": "https://github.com/rust-lang/rust/commit/34e7a3cc4dcb7ddd404b9566047a78d1e234f137"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "9140c90bed376c7a1a25211eded7b4679129aec3", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "patch": "@@ -535,41 +535,44 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n-        let alloc_or_size_align = self.alloc_map.get_or(id, || {\n-            // Can't do this in the match argument, we may get cycle errors since the lock would\n-            // be held throughout the match.\n-            let alloc = self.tcx.alloc_map.lock().get(id);\n-            Err(match alloc {\n-                Some(GlobalAlloc::Static(did)) => {\n-                    // Use size and align of the type\n-                    let ty = self.tcx.type_of(did);\n-                    let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                    Ok((layout.size, layout.align.abi))\n-                },\n-                Some(GlobalAlloc::Memory(alloc)) =>\n-                    // this duplicates the logic on the `match alloc_or_size_align`, but due to the\n-                    // API of `get_or` there's no way around that.\n-                    Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-                Some(GlobalAlloc::Function(_)) => if let AllocCheck::Dereferencable = liveness {\n-                    // The caller requested no function pointers.\n-                    err!(DerefFunctionPointer)\n-                } else {\n-                    Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n-                },\n-                // The rest must be dead.\n-                None => if let AllocCheck::MaybeDead = liveness {\n-                    // Deallocated pointers are allowed, we should be able to find\n-                    // them in the map.\n-                    Ok(*self.dead_alloc_map.get(&id)\n-                        .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n-                } else {\n-                    err!(DanglingPointerDeref)\n-                },\n-            })\n-        });\n-        match alloc_or_size_align {\n+        // Don't use `self.get` here as that will\n+        // a) cause cycles in case `id` refers to a static\n+        // b) duplicate a static's allocation in miri\n+        match self.alloc_map.get_or(id, || Err(())) {\n             Ok((_, alloc)) => Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-            Err(done) => done,\n+            Err(()) => {\n+                // Can't do this in the match argument, we may get cycle errors since the lock would\n+                // be held throughout the match.\n+                let alloc = self.tcx.alloc_map.lock().get(id);\n+                match alloc {\n+                    Some(GlobalAlloc::Static(did)) => {\n+                        // Use size and align of the type\n+                        let ty = self.tcx.type_of(did);\n+                        let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                        return Ok((layout.size, layout.align.abi));\n+                    },\n+                    Some(GlobalAlloc::Memory(alloc)) =>\n+                        // Need to duplicate the logic here, because the global allocations have\n+                        // different associated types than the interpreter-local ones\n+                        Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+                    Some(GlobalAlloc::Function(_)) => if let AllocCheck::Dereferencable = liveness {\n+                        // The caller requested no function pointers.\n+                        return err!(DerefFunctionPointer);\n+                    } else {\n+                        return Ok((Size::ZERO, Align::from_bytes(1).unwrap()));\n+                    },\n+                    // The rest must be dead.\n+                    None => return if let AllocCheck::MaybeDead = liveness {\n+                        // Deallocated pointers are allowed, we should be able to find\n+                        // them in the map.\n+                        Ok(*self.dead_alloc_map.get(&id)\n+                            .expect(\"deallocated pointers should all be recorded in \\\n+                                    `dead_alloc_map`\"))\n+                    } else {\n+                        err!(DanglingPointerDeref)\n+                    },\n+                }\n+            }\n         }\n     }\n "}]}