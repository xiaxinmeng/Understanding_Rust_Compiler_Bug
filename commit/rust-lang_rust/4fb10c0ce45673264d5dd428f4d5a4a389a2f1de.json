{"sha": "4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "node_id": "C_kwDOAAsO6NoAKDRmYjEwYzBjZTQ1NjczMjY0ZDVkZDQyOGY0ZDVhNGEzODlhMmYxZGU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-20T16:15:55Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-12T02:28:37Z"}, "message": "parse const closures", "tree": {"sha": "dc9a50af8976cda0bb65f9473c03bc3e1b32ee6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9a50af8976cda0bb65f9473c03bc3e1b32ee6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "html_url": "https://github.com/rust-lang/rust/commit/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "html_url": "https://github.com/rust-lang/rust/commit/56ee65aeb6d1fad67d903d5ee1359abcf7b94231"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "7de594719ddc44568872ea3ee2516da728a96ada", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -1307,6 +1307,7 @@ impl Expr {\n pub struct Closure {\n     pub binder: ClosureBinder,\n     pub capture_clause: CaptureBy,\n+    pub constness: Const,\n     pub asyncness: Async,\n     pub movability: Movability,\n     pub fn_decl: P<FnDecl>,"}, {"sha": "77f342d1eb322efe2a35deb211006e6408a243b5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -1362,6 +1362,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         ExprKind::Closure(box Closure {\n             binder,\n             capture_clause: _,\n+            constness,\n             asyncness,\n             movability: _,\n             fn_decl,\n@@ -1370,6 +1371,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             fn_arg_span: _,\n         }) => {\n             vis.visit_closure_binder(binder);\n+            visit_constness(constness, vis);\n             vis.visit_asyncness(asyncness);\n             vis.visit_fn_decl(fn_decl);\n             vis.visit_expr(body);"}, {"sha": "e8823eff83afe1bab63061dd862a7ed40af53575", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -836,6 +836,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             binder,\n             capture_clause: _,\n             asyncness: _,\n+            constness: _,\n             movability: _,\n             fn_decl,\n             body,"}, {"sha": "c3611b2f522babd789e589285b1e6359e1f11b18", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -209,6 +209,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Closure(box Closure {\n                     binder,\n                     capture_clause,\n+                    constness,\n                     asyncness,\n                     movability,\n                     fn_decl,\n@@ -233,6 +234,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             binder,\n                             *capture_clause,\n                             e.id,\n+                            *constness,\n                             *movability,\n                             fn_decl,\n                             body,\n@@ -651,6 +653,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 fn_decl_span: self.lower_span(span),\n                 fn_arg_span: None,\n                 movability: Some(hir::Movability::Static),\n+                constness: hir::Constness::NotConst,\n             });\n \n             hir::ExprKind::Closure(c)\n@@ -890,6 +893,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n+        constness: Const,\n         movability: Movability,\n         decl: &FnDecl,\n         body: &Expr,\n@@ -927,6 +931,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             fn_decl_span: self.lower_span(fn_decl_span),\n             fn_arg_span: Some(self.lower_span(fn_arg_span)),\n             movability: generator_option,\n+            constness: self.lower_constness(constness),\n         });\n \n         hir::ExprKind::Closure(c)\n@@ -1041,6 +1046,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             fn_decl_span: self.lower_span(fn_decl_span),\n             fn_arg_span: Some(self.lower_span(fn_arg_span)),\n             movability: None,\n+            constness: hir::Constness::NotConst,\n         });\n         hir::ExprKind::Closure(c)\n     }"}, {"sha": "065779d0670c687b86454b1e90fea8a30f237f2c", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -1239,7 +1239,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_constness(&mut self, c: Const) -> hir::Constness {\n+    pub(super) fn lower_constness(&mut self, c: Const) -> hir::Constness {\n         match c {\n             Const::Yes(_) => hir::Constness::Const,\n             Const::No => hir::Constness::NotConst,"}, {"sha": "b125c6407d05040bb2ed2868332fc90415b1a5bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -399,6 +399,7 @@ impl<'a> State<'a> {\n             ast::ExprKind::Closure(box ast::Closure {\n                 binder,\n                 capture_clause,\n+                constness,\n                 asyncness,\n                 movability,\n                 fn_decl,\n@@ -407,6 +408,7 @@ impl<'a> State<'a> {\n                 fn_arg_span: _,\n             }) => {\n                 self.print_closure_binder(binder);\n+                self.print_constness(*constness);\n                 self.print_movability(*movability);\n                 self.print_asyncness(*asyncness);\n                 self.print_capture_clause(*capture_clause);"}, {"sha": "9b16e79d49a9e951042e6978f33e92d712195430", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -533,6 +533,7 @@ impl<'a> ExtCtxt<'a> {\n             ast::ExprKind::Closure(Box::new(ast::Closure {\n                 binder: ast::ClosureBinder::NotPresent,\n                 capture_clause: ast::CaptureBy::Ref,\n+                constness: ast::Const::No,\n                 asyncness: ast::Async::No,\n                 movability: ast::Movability::Movable,\n                 fn_decl,"}, {"sha": "60f5b79de1033d13eb4fcfb56ba78324709eaddd", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -938,6 +938,7 @@ pub struct Crate<'hir> {\n pub struct Closure<'hir> {\n     pub def_id: LocalDefId,\n     pub binder: ClosureBinder,\n+    pub constness: Constness,\n     pub capture_clause: CaptureBy,\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n     pub fn_decl: &'hir FnDecl<'hir>,"}, {"sha": "02641b7cf8fb5e037599f4d46e4c63eb3dcb9d29", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -742,6 +742,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             fn_decl_span: _,\n             fn_arg_span: _,\n             movability: _,\n+            constness: _,\n         }) => {\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n             visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id)"}, {"sha": "f74c551a45b66ef7778555b5e301a359dac2c049", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -1464,6 +1464,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprKind::Closure(&hir::Closure {\n                 binder,\n+                constness,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n@@ -1474,6 +1475,7 @@ impl<'a> State<'a> {\n                 def_id: _,\n             }) => {\n                 self.print_closure_binder(binder, bound_generic_params);\n+                self.print_constness(constness);\n                 self.print_capture_clause(capture_clause);\n \n                 self.print_closure_params(fn_decl, body);\n@@ -2272,10 +2274,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_header_info(&mut self, header: hir::FnHeader) {\n-        match header.constness {\n-            hir::Constness::NotConst => {}\n-            hir::Constness::Const => self.word_nbsp(\"const\"),\n-        }\n+        self.print_constness(header.constness);\n \n         match header.asyncness {\n             hir::IsAsync::NotAsync => {}\n@@ -2292,6 +2291,13 @@ impl<'a> State<'a> {\n         self.word(\"fn\")\n     }\n \n+    pub fn print_constness(&mut self, s: hir::Constness) {\n+        match s {\n+            hir::Constness::NotConst => {}\n+            hir::Constness::Const => self.word_nbsp(\"const\"),\n+        }\n+    }\n+\n     pub fn print_unsafety(&mut self, s: hir::Unsafety) {\n         match s {\n             hir::Unsafety::Normal => {}"}, {"sha": "dd2b03988c3e8089536b1412b2cbba1e50203a3b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -1325,7 +1325,10 @@ impl<'a> Parser<'a> {\n             self.parse_array_or_repeat_expr(Delimiter::Bracket)\n         } else if self.check_path() {\n             self.parse_path_start_expr()\n-        } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n+        } else if self.check_keyword(kw::Move)\n+            || self.check_keyword(kw::Static)\n+            || self.check_const_closure()\n+        {\n             self.parse_closure_expr()\n         } else if self.eat_keyword(kw::If) {\n             self.parse_if_expr()\n@@ -2065,6 +2068,8 @@ impl<'a> Parser<'a> {\n             ClosureBinder::NotPresent\n         };\n \n+        let constness = self.parse_constness(Case::Sensitive);\n+\n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n \n@@ -2111,6 +2116,7 @@ impl<'a> Parser<'a> {\n             ExprKind::Closure(Box::new(ast::Closure {\n                 binder,\n                 capture_clause,\n+                constness,\n                 asyncness,\n                 movability,\n                 fn_decl,"}, {"sha": "2fd2a4e5154f3a98e0bd014881158a45191a7d7d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -736,6 +736,16 @@ impl<'a> Parser<'a> {\n         self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)\n     }\n \n+    fn check_const_closure(&self) -> bool {\n+        self.is_keyword_ahead(0, &[kw::Const])\n+            && self.look_ahead(1, |t| match &t.kind {\n+                token::Ident(kw::Move | kw::Static | kw::Async, _)\n+                | token::OrOr\n+                | token::BinOp(token::Or) => true,\n+                _ => false,\n+            })\n+    }\n+\n     fn check_inline_const(&self, dist: usize) -> bool {\n         self.is_keyword_ahead(dist, &[kw::Const])\n             && self.look_ahead(dist + 1, |t| match &t.kind {"}, {"sha": "8fd0fcf8f5c2c83ca8668700b0ec121e38d7953f", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -26,6 +26,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n pub(crate) fn rewrite_closure(\n     binder: &ast::ClosureBinder,\n+    constness: ast::Const,\n     capture: ast::CaptureBy,\n     is_async: &ast::Async,\n     movability: ast::Movability,\n@@ -38,7 +39,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        binder, capture, is_async, movability, fn_decl, body, span, context, shape,\n+        binder, constness, capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -230,6 +231,7 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     binder: &ast::ClosureBinder,\n+    constness: ast::Const,\n     capture: ast::CaptureBy,\n     asyncness: &ast::Async,\n     movability: ast::Movability,\n@@ -250,6 +252,12 @@ fn rewrite_closure_fn_decl(\n         ast::ClosureBinder::NotPresent => \"\".to_owned(),\n     };\n \n+    let const_ = if matches!(constness, ast::Const::Yes(_)) {\n+        \"const \"\n+    } else {\n+        \"\"\n+    };\n+\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -264,7 +272,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(binder.len() + immovable.len() + is_async.len() + mover.len())?\n+        .shrink_left(binder.len() + const_.len() + immovable.len() + is_async.len() + mover.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -302,7 +310,10 @@ fn rewrite_closure_fn_decl(\n         .tactic(tactic)\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}{}{}|{}|\", binder, immovable, is_async, mover, list_str);\n+    let mut prefix = format!(\n+        \"{}{}{}{}{}|{}|\",\n+        binder, const_, immovable, is_async, mover, list_str\n+    );\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -329,6 +340,7 @@ pub(crate) fn rewrite_last_closure(\n     if let ast::ExprKind::Closure(ref closure) = expr.kind {\n         let ast::Closure {\n             ref binder,\n+            constness,\n             capture_clause,\n             ref asyncness,\n             movability,\n@@ -349,6 +361,7 @@ pub(crate) fn rewrite_last_closure(\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n             binder,\n+            constness,\n             capture_clause,\n             asyncness,\n             movability,"}, {"sha": "868ff045ab78b2a5705100947217e26c693938e2", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -205,6 +205,7 @@ pub(crate) fn format_expr(\n         }\n         ast::ExprKind::Closure(ref cl) => closures::rewrite_closure(\n             &cl.binder,\n+            cl.constness,\n             cl.capture_clause,\n             &cl.asyncness,\n             cl.movability,"}, {"sha": "df22f5e065c8fde7c1df84225b78d65e721c107a", "filename": "tests/ui/parser/recover-quantified-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -7,6 +7,6 @@ fn main() {\n enum Foo { Bar }\n fn foo(x: impl Iterator<Item = Foo>) {\n     for <Foo>::Bar in x {}\n-    //~^ ERROR expected one of `move`, `static`, `|`\n+    //~^ ERROR expected one of `const`, `move`, `static`, `|`\n     //~^^ ERROR `for<...>` binders for closures are experimental\n }"}, {"sha": "9ec4d2c034d0fe35da4ae7597886ddc16bd4521b", "filename": "tests/ui/parser/recover-quantified-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fb10c0ce45673264d5dd428f4d5a4a389a2f1de/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=4fb10c0ce45673264d5dd428f4d5a4a389a2f1de", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `move`, `static`, `|`, or `||`, found `::`\n+error: expected one of `const`, `move`, `static`, `|`, or `||`, found `::`\n   --> $DIR/recover-quantified-closure.rs:9:14\n    |\n LL |     for <Foo>::Bar in x {}\n-   |              ^^ expected one of `move`, `static`, `|`, or `||`\n+   |              ^^ expected one of `const`, `move`, `static`, `|`, or `||`\n \n error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/recover-quantified-closure.rs:2:5"}]}