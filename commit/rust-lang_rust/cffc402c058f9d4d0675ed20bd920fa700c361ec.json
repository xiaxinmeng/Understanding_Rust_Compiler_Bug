{"sha": "cffc402c058f9d4d0675ed20bd920fa700c361ec", "node_id": "C_kwDOAAsO6NoAKGNmZmM0MDJjMDU4ZjlkNGQwNjc1ZWQyMGJkOTIwZmE3MDBjMzYxZWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T12:02:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T12:02:26Z"}, "message": "Auto merge of #14716 - Veykril:trait-deps-query, r=Veykril\n\nDon't merge trait_impls_in_deps results\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/9167\n\nWe effectively keep a lot of copies of `TraitImpl` results in memory by merging them into the result of this query. This wastes a lot of memory unnecessarily. The change here brings memory usage of self down by 50mb (at a slight cost of trait solving unfortunately, though I'm hopeful it was just noice)", "tree": {"sha": "f808d265915c92907dca1627c8af07ea45a6b8c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f808d265915c92907dca1627c8af07ea45a6b8c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cffc402c058f9d4d0675ed20bd920fa700c361ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cffc402c058f9d4d0675ed20bd920fa700c361ec", "html_url": "https://github.com/rust-lang/rust/commit/cffc402c058f9d4d0675ed20bd920fa700c361ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cffc402c058f9d4d0675ed20bd920fa700c361ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ac1cdbf54edc6134f57996afd43cb3ff8d738b", "html_url": "https://github.com/rust-lang/rust/commit/94ac1cdbf54edc6134f57996afd43cb3ff8d738b"}, {"sha": "3fdff0ae4b65caea86b128e77f340e1380f4af74", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdff0ae4b65caea86b128e77f340e1380f4af74", "html_url": "https://github.com/rust-lang/rust/commit/3fdff0ae4b65caea86b128e77f340e1380f4af74"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "b47a22c34252146ae601d43eaae26e62461f5d88", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cffc402c058f9d4d0675ed20bd920fa700c361ec/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cffc402c058f9d4d0675ed20bd920fa700c361ec/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=cffc402c058f9d4d0675ed20bd920fa700c361ec", "patch": "@@ -1,5 +1,6 @@\n //! The implementation of `RustIrDatabase` for Chalk, which provides information\n //! about the code that Chalk needs.\n+use core::ops;\n use std::{iter, sync::Arc};\n \n use tracing::debug;\n@@ -126,7 +127,6 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         let in_deps = self.db.trait_impls_in_deps(self.krate);\n         let in_self = self.db.trait_impls_in_crate(self.krate);\n \n-        let impl_maps = [in_deps, in_self];\n         let block_impls = iter::successors(self.block, |&block_id| {\n             cov_mark::hit!(block_local_impls);\n             self.db.block_def_map(block_id).parent().and_then(|module| module.containing_block())\n@@ -146,29 +146,31 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         match fps {\n             [] => {\n                 debug!(\"Unrestricted search for {:?} impls...\", trait_);\n-                let mut f = |impls: Arc<TraitImpls>| {\n+                let mut f = |impls: &TraitImpls| {\n                     result.extend(impls.for_trait(trait_).map(id_to_chalk));\n                 };\n-                impl_maps.into_iter().chain(block_impls).for_each(&mut f);\n+                f(&in_self);\n+                in_deps.iter().map(ops::Deref::deref).for_each(&mut f);\n+                block_impls.for_each(|it| f(&it));\n                 def_blocks\n                     .into_iter()\n                     .flatten()\n-                    .map(|it| self.db.trait_impls_in_block(it))\n-                    .for_each(f);\n+                    .for_each(|it| f(&self.db.trait_impls_in_block(it)));\n             }\n             fps => {\n                 let mut f =\n-                    |impls: Arc<TraitImpls>| {\n+                    |impls: &TraitImpls| {\n                         result.extend(fps.iter().flat_map(|fp| {\n                             impls.for_trait_and_self_ty(trait_, *fp).map(id_to_chalk)\n                         }));\n                     };\n-                impl_maps.into_iter().chain(block_impls).for_each(&mut f);\n+                f(&in_self);\n+                in_deps.iter().map(ops::Deref::deref).for_each(&mut f);\n+                block_impls.for_each(|it| f(&it));\n                 def_blocks\n                     .into_iter()\n                     .flatten()\n-                    .map(|it| self.db.trait_impls_in_block(it))\n-                    .for_each(f);\n+                    .for_each(|it| f(&self.db.trait_impls_in_block(it)));\n             }\n         }\n "}, {"sha": "d8bd5b3481780f99ddee54712e680af2b62c30a5", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cffc402c058f9d4d0675ed20bd920fa700c361ec/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cffc402c058f9d4d0675ed20bd920fa700c361ec/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=cffc402c058f9d4d0675ed20bd920fa700c361ec", "patch": "@@ -134,7 +134,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn trait_impls_in_block(&self, block: BlockId) -> Arc<TraitImpls>;\n \n     #[salsa::invoke(TraitImpls::trait_impls_in_deps_query)]\n-    fn trait_impls_in_deps(&self, krate: CrateId) -> Arc<TraitImpls>;\n+    fn trait_impls_in_deps(&self, krate: CrateId) -> Arc<[Arc<TraitImpls>]>;\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]"}, {"sha": "159544f6dc0cf072a487e23d081fe09144063688", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cffc402c058f9d4d0675ed20bd920fa700c361ec/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cffc402c058f9d4d0675ed20bd920fa700c361ec/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=cffc402c058f9d4d0675ed20bd920fa700c361ec", "patch": "@@ -160,17 +160,13 @@ impl TraitImpls {\n         Arc::new(impls)\n     }\n \n-    pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n+    pub(crate) fn trait_impls_in_deps_query(\n+        db: &dyn HirDatabase,\n+        krate: CrateId,\n+    ) -> Arc<[Arc<Self>]> {\n         let _p = profile::span(\"trait_impls_in_deps_query\").detail(|| format!(\"{krate:?}\"));\n         let crate_graph = db.crate_graph();\n-        let mut res = Self { map: FxHashMap::default() };\n-\n-        for krate in crate_graph.transitive_deps(krate) {\n-            res.merge(&db.trait_impls_in_crate(krate));\n-        }\n-        res.shrink_to_fit();\n-\n-        Arc::new(res)\n+        crate_graph.transitive_deps(krate).map(|krate| db.trait_impls_in_crate(krate)).collect()\n     }\n \n     fn shrink_to_fit(&mut self) {\n@@ -209,15 +205,6 @@ impl TraitImpls {\n         }\n     }\n \n-    fn merge(&mut self, other: &Self) {\n-        for (trait_, other_map) in &other.map {\n-            let map = self.map.entry(*trait_).or_default();\n-            for (fp, impls) in other_map {\n-                map.entry(*fp).or_default().extend(impls);\n-            }\n-        }\n-    }\n-\n     /// Queries all trait impls for the given type.\n     pub fn for_self_ty_without_blanket_impls(\n         &self,\n@@ -713,10 +700,12 @@ fn lookup_impl_assoc_item_for_trait_ref(\n     env: Arc<TraitEnvironment>,\n     name: &Name,\n ) -> Option<(AssocItemId, Substitution)> {\n+    let hir_trait_id = trait_ref.hir_trait_id();\n     let self_ty = trait_ref.self_type_parameter(Interner);\n     let self_ty_fp = TyFingerprint::for_trait_impl(&self_ty)?;\n     let impls = db.trait_impls_in_deps(env.krate);\n-    let impls = impls.for_trait_and_self_ty(trait_ref.hir_trait_id(), self_ty_fp);\n+    let impls =\n+        impls.iter().flat_map(|impls| impls.for_trait_and_self_ty(hir_trait_id, self_ty_fp));\n \n     let table = InferenceTable::new(db, env);\n "}]}