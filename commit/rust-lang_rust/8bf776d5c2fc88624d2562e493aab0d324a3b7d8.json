{"sha": "8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZjc3NmQ1YzJmYzg4NjI0ZDI1NjJlNDkzYWFiMGQzMjRhM2I3ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-15T03:59:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-15T03:59:08Z"}, "message": "Auto merge of #64478 - Centril:rollup-bnt51w1, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #64457 (def_collector: Do not ICE on attributes on unnamed fields)\n - #64463 (resolve: Tweak some expected/found wording)\n - #64471 (Warn on no_start, crate_id attribute use)\n - #64473 (Use try_fold instead of manually carrying an accumulator)\n - #64475 (simplify the initialization)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "510e773f2e28ba46fc6d98a98e07e1ec517f6ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510e773f2e28ba46fc6d98a98e07e1ec517f6ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "html_url": "https://github.com/rust-lang/rust/commit/8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572d3d9634b253bdd85af32380b10d1f7d189cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/572d3d9634b253bdd85af32380b10d1f7d189cdb", "html_url": "https://github.com/rust-lang/rust/commit/572d3d9634b253bdd85af32380b10d1f7d189cdb"}, {"sha": "88bd5646f13b3ac4cbca03e54369a6684385495a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88bd5646f13b3ac4cbca03e54369a6684385495a", "html_url": "https://github.com/rust-lang/rust/commit/88bd5646f13b3ac4cbca03e54369a6684385495a"}], "stats": {"total": 135, "additions": 88, "deletions": 47}, "files": [{"sha": "d1cc7a8ce988fd30efc58a0bb6ccfd7418a18c92", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -31,7 +31,7 @@ impl<'a> DefCollector<'a> {\n         self.definitions.create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n     }\n \n-    pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n+    fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n         let orig_parent_def = std::mem::replace(&mut self.parent_def, parent_def);\n         f(self);\n         self.parent_def = orig_parent_def;\n@@ -74,6 +74,22 @@ impl<'a> DefCollector<'a> {\n         })\n     }\n \n+    fn collect_field(&mut self, field: &'a StructField, index: Option<usize>) {\n+        if field.is_placeholder {\n+            self.visit_macro_invoc(field.id);\n+        } else {\n+            let name = field.ident.map(|ident| ident.name)\n+                .or_else(|| index.map(sym::integer))\n+                .unwrap_or_else(|| {\n+                    let node_id = NodeId::placeholder_from_expn_id(self.expansion);\n+                    sym::integer(self.definitions.placeholder_field_indices[&node_id])\n+                })\n+                .as_interned_str();\n+            let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n+            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n+        }\n+    }\n+\n     pub fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n@@ -170,17 +186,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_variant_data(&mut self, data: &'a VariantData) {\n+        // The assumption here is that non-`cfg` macro expansion cannot change field indices.\n+        // It currently holds because only inert attributes are accepted on fields,\n+        // and every such attribute expands into a single field after it's resolved.\n         for (index, field) in data.fields().iter().enumerate() {\n-            if field.is_placeholder {\n-                self.visit_macro_invoc(field.id);\n-                continue;\n+            self.collect_field(field, Some(index));\n+            if field.is_placeholder && field.ident.is_none() {\n+                self.definitions.placeholder_field_indices.insert(field.id, index);\n             }\n-            let name = field.ident.map(|ident| ident.name)\n-                .unwrap_or_else(|| sym::integer(index));\n-            let def = self.create_def(field.id,\n-                                      DefPathData::ValueNs(name.as_interned_str()),\n-                                      field.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n     }\n \n@@ -338,16 +351,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n     }\n \n-    fn visit_struct_field(&mut self, sf: &'a StructField) {\n-        if sf.is_placeholder {\n-            self.visit_macro_invoc(sf.id)\n-        } else {\n-            let name = sf.ident.map(|ident| ident.name)\n-                .unwrap_or_else(|| panic!(\"don't know the field number in this context\"));\n-            let def = self.create_def(sf.id,\n-                                        DefPathData::ValueNs(name.as_interned_str()),\n-                                        sf.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, sf));\n-        }\n+    // This method is called only when we are visiting an individual field\n+    // after expanding an attribute on it.\n+    fn visit_struct_field(&mut self, field: &'a StructField) {\n+        self.collect_field(field, None);\n     }\n }"}, {"sha": "187bc5933246078819b9cba87d3a819c453c9677", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -104,6 +104,8 @@ pub struct Definitions {\n     /// When collecting definitions from an AST fragment produced by a macro invocation `ExpnId`\n     /// we know what parent node that fragment should be attached to thanks to this table.\n     invocation_parents: FxHashMap<ExpnId, DefIndex>,\n+    /// Indices of unnamed struct or variant fields with unresolved attributes.\n+    pub(super) placeholder_field_indices: NodeMap<usize>,\n }\n \n /// A unique identifier that we can use to lookup a definition"}, {"sha": "cf19a9eb147a8c1560bfa9d860a9d3cb58f6990f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -669,6 +669,22 @@ impl DeprecatedAttr {\n     }\n }\n \n+fn lint_deprecated_attr(\n+    cx: &EarlyContext<'_>,\n+    attr: &ast::Attribute,\n+    msg: &str,\n+    suggestion: Option<&str>,\n+) {\n+    cx.struct_span_lint(DEPRECATED, attr.span, &msg)\n+        .span_suggestion_short(\n+            attr.span,\n+            suggestion.unwrap_or(\"remove this attribute\"),\n+            String::new(),\n+            Applicability::MachineApplicable\n+        )\n+        .emit();\n+}\n+\n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         for &&(n, _, _, ref g) in &self.depr_attrs {\n@@ -679,18 +695,15 @@ impl EarlyLintPass for DeprecatedAttr {\n                                              _) = g {\n                     let msg = format!(\"use of deprecated attribute `{}`: {}. See {}\",\n                                       name, reason, link);\n-                    let mut err = cx.struct_span_lint(DEPRECATED, attr.span, &msg);\n-                    err.span_suggestion_short(\n-                        attr.span,\n-                        suggestion.unwrap_or(\"remove this attribute\"),\n-                        String::new(),\n-                        Applicability::MachineApplicable\n-                    );\n-                    err.emit();\n+                    lint_deprecated_attr(cx, attr, &msg, suggestion);\n                 }\n                 return;\n             }\n         }\n+        if attr.check_name(sym::no_start) || attr.check_name(sym::crate_id) {\n+            let msg = format!(\"use of deprecated attribute `{}`: no longer used.\", attr.path);\n+            lint_deprecated_attr(cx, attr, &msg, None);\n+        }\n     }\n }\n "}, {"sha": "9ad1542905b687a9770431f5f7c1edbd7a68e093", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -477,7 +477,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         use rustc::mir::PlaceBase;\n \n-        let mut op = match &place.base {\n+        let base_op = match &place.base {\n             PlaceBase::Local(mir::RETURN_PLACE) =>\n                 throw_unsup!(ReadFromReturnPointer),\n             PlaceBase::Local(local) => {\n@@ -497,9 +497,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n \n-        for elem in place.projection.iter() {\n-            op = self.operand_projection(op, elem)?\n-        }\n+        let op = place.projection.iter().try_fold(\n+            base_op,\n+            |op, elem| self.operand_projection(op, elem)\n+        )?;\n \n         trace!(\"eval_place_to_op: got {:?}\", *op);\n         Ok(op)"}, {"sha": "9096d14645100614e82c173f5dc67e6b6e8a192f", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -237,7 +237,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n                 if let Res::Def(..) = res {\n                     self.session.span_err(\n                         span,\n-                        \"expected an inert attribute, found an attribute macro\"\n+                        &format!(\"expected an inert attribute, found {} {}\",\n+                                 res.article(), res.descr()),\n                     );\n                     return Ok(InvocationRes::Single(self.dummy_ext(kind)));\n                 }\n@@ -322,7 +323,7 @@ impl<'a> Resolver<'a> {\n         self.check_stability_and_deprecation(&ext, path);\n \n         Ok(if ext.macro_kind() != kind {\n-            let expected = if kind == MacroKind::Attr { \"attribute\" } else  { kind.descr() };\n+            let expected = if kind == MacroKind::Attr { \"attribute\" } else { kind.descr() };\n             let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path);\n             self.session.struct_span_err(path.span, &msg)\n                         .span_label(path.span, format!(\"not {} {}\", kind.article(), expected))"}, {"sha": "1197160fa9501db36b8b605f7d38d67d82f7a84b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -400,7 +400,7 @@ pub struct UnsafetyState {\n \n impl UnsafetyState {\n     pub fn function(unsafety: hir::Unsafety, def: hir::HirId) -> UnsafetyState {\n-        UnsafetyState { def: def, unsafety: unsafety, unsafe_push_count: 0, from_fn: true }\n+        UnsafetyState { def, unsafety, unsafe_push_count: 0, from_fn: true }\n     }\n \n     pub fn recurse(&mut self, blk: &hir::Block) -> UnsafetyState {"}, {"sha": "79cd0f5fbc358d62626cf332b6629fccf67daeb9", "filename": "src/test/ui/attributes/item-attributes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -11,8 +11,6 @@\n #![rustc_dummy]\n #![rustc_dummy(attr5)]\n \n-#![crate_id=\"foobar#0.1\"]\n-\n // These are attributes of the following mod\n #[rustc_dummy = \"val\"]\n #[rustc_dummy = \"val\"]"}, {"sha": "93f364047e9a5dfc6bf780cc66c56696a3caec4e", "filename": "src/test/ui/attributes/unnamed-field-attributes.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funnamed-field-attributes.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+struct S(\n+    #[rustfmt::skip] u8,\n+    u16,\n+    #[rustfmt::skip] u32,\n+);\n+\n+fn main() {}"}, {"sha": "68ff95e420895159f2daf9c957b74041e2e0bc63", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -84,12 +84,12 @@\n #![crate_name = \"0900\"]\n #![crate_type = \"bin\"] // cannot pass \"0800\" here\n \n-// For #![crate_id], see issue #43142. (I cannot bear to enshrine current behavior in a test)\n+#![crate_id = \"10\"] //~ WARN use of deprecated attribute\n \n // FIXME(#44232) we should warn that this isn't used.\n #![feature(rust1)]\n \n-// For #![no_start], see issue #43144. (I cannot bear to enshrine current behavior in a test)\n+#![no_start] //~ WARN use of deprecated attribute\n \n // (cannot easily gating state of crate-level #[no_main]; but non crate-level is below at \"0400\")\n #![no_builtins]"}, {"sha": "b2a6018b5354d145970352633e826e321034fab8", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -186,6 +186,20 @@ LL |     mod inner { #![macro_escape] }\n    |\n    = help: consider an outer attribute, `#[macro_use]` mod ...\n \n+warning: use of deprecated attribute `crate_id`: no longer used.\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:87:1\n+   |\n+LL | #![crate_id = \"10\"]\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+warning: use of deprecated attribute `no_start`: no longer used.\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:92:1\n+   |\n+LL | #![no_start]\n+   | ^^^^^^^^^^^^ help: remove this attribute\n+\n warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:90:12\n    |"}, {"sha": "77278ecda6ecb1d20ed85df56c21e991733d85d6", "filename": "src/test/ui/issues/issue-1251.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -6,8 +6,6 @@\n \n #![feature(rustc_private)]\n \n-#![crate_id=\"rust_get_test_int\"]\n-\n mod rustrt {\n     extern crate libc;\n "}, {"sha": "6fa5f01ffd926c58a1efb69944c124bd8e3b2957", "filename": "src/test/ui/issues/issue-49934-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -1,10 +1,10 @@\n fn foo<#[derive(Debug)] T>() {\n //~^ ERROR `derive` may only be applied to structs, enums and unions\n-//~| ERROR expected an inert attribute, found an attribute macro\n+//~| ERROR expected an inert attribute, found a derive macro\n     match 0 {\n         #[derive(Debug)]\n         //~^ ERROR `derive` may only be applied to structs, enums and unions\n-        //~| ERROR expected an inert attribute, found an attribute macro\n+        //~| ERROR expected an inert attribute, found a derive macro\n         _ => (),\n     }\n }"}, {"sha": "8778d88d0ebec5185c8fcaacf806098b3cd6e500", "filename": "src/test/ui/issues/issue-49934-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -4,7 +4,7 @@ error: `derive` may only be applied to structs, enums and unions\n LL | fn foo<#[derive(Debug)] T>() {\n    |        ^^^^^^^^^^^^^^^^\n \n-error: expected an inert attribute, found an attribute macro\n+error: expected an inert attribute, found a derive macro\n   --> $DIR/issue-49934-errors.rs:1:17\n    |\n LL | fn foo<#[derive(Debug)] T>() {\n@@ -16,7 +16,7 @@ error: `derive` may only be applied to structs, enums and unions\n LL |         #[derive(Debug)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: expected an inert attribute, found an attribute macro\n+error: expected an inert attribute, found a derive macro\n   --> $DIR/issue-49934-errors.rs:5:18\n    |\n LL |         #[derive(Debug)]"}, {"sha": "6f1e1f97708efd41a9c68f09f1a87a7727c7a435", "filename": "src/test/ui/issues/issue-6919.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-6919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf776d5c2fc88624d2562e493aab0d324a3b7d8/src%2Ftest%2Fui%2Fissues%2Fissue-6919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6919.rs?ref=8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "patch": "@@ -4,7 +4,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![crate_id=\"issue-6919\"]\n extern crate issue6919_3;\n \n pub fn main() {"}]}