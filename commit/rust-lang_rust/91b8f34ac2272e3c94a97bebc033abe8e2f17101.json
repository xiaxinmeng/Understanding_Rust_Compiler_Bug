{"sha": "91b8f34ac2272e3c94a97bebc033abe8e2f17101", "node_id": "C_kwDOAAsO6NoAKDkxYjhmMzRhYzIyNzJlM2M5NGE5N2JlYmMwMzNhYmU4ZTJmMTcxMDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-07T10:24:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-07T10:24:59Z"}, "message": "Auto merge of #104799 - pcc:linkage-fn, r=tmiasko\n\nSupport Option and similar enums as type of static variable with linkage attribute\n\nCompiler MCP:\nrust-lang/compiler-team#565", "tree": {"sha": "4c3707513fc8c10ed0e6da178cd9be923f4a24df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c3707513fc8c10ed0e6da178cd9be923f4a24df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b8f34ac2272e3c94a97bebc033abe8e2f17101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b8f34ac2272e3c94a97bebc033abe8e2f17101", "html_url": "https://github.com/rust-lang/rust/commit/91b8f34ac2272e3c94a97bebc033abe8e2f17101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b8f34ac2272e3c94a97bebc033abe8e2f17101/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec28f5338b8e54fa8ae3c18bf101c809c337f1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec28f5338b8e54fa8ae3c18bf101c809c337f1f5", "html_url": "https://github.com/rust-lang/rust/commit/ec28f5338b8e54fa8ae3c18bf101c809c337f1f5"}, {"sha": "b4278b02a7e6ad814c09bbc6c066c1713171fe82", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4278b02a7e6ad814c09bbc6c066c1713171fe82", "html_url": "https://github.com/rust-lang/rust/commit/b4278b02a7e6ad814c09bbc6c066c1713171fe82"}], "stats": {"total": 246, "additions": 157, "deletions": 89}, "files": [{"sha": "ea8ab76114604208ed7a9b619dc257e4e9e9c4ff", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -8,13 +8,11 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n-use rustc_span::Span;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n \n use crate::base;\n use crate::context::CodegenCx;\n-use crate::errors::LinkageConstOrMutType;\n use crate::type_of::LayoutGccExt;\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -239,12 +237,12 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                     }\n \n                     Node::ForeignItem(&hir::ForeignItem {\n-                        span,\n+                        span: _,\n                         kind: hir::ForeignItemKind::Static(..),\n                         ..\n                     }) => {\n                         let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n-                        check_and_apply_linkage(&self, &fn_attrs, ty, sym, span)\n+                        check_and_apply_linkage(&self, &fn_attrs, ty, sym)\n                     }\n \n                     item => bug!(\"get_static: expected static, found {:?}\", item),\n@@ -257,8 +255,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                 //debug!(\"get_static: sym={} item_attr={:?}\", sym, self.tcx.item_attrs(def_id));\n \n                 let attrs = self.tcx.codegen_fn_attrs(def_id);\n-                let span = self.tcx.def_span(def_id);\n-                let global = check_and_apply_linkage(&self, &attrs, ty, sym, span);\n+                let global = check_and_apply_linkage(&self, &attrs, ty, sym);\n \n                 let needs_dll_storage_attr = false; // TODO(antoyo)\n \n@@ -355,24 +352,12 @@ pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id\n     Ok((const_alloc_to_gcc(cx, alloc), alloc))\n }\n \n-fn check_and_apply_linkage<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, attrs: &CodegenFnAttrs, ty: Ty<'tcx>, sym: &str, span: Span) -> LValue<'gcc> {\n+fn check_and_apply_linkage<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, attrs: &CodegenFnAttrs, ty: Ty<'tcx>, sym: &str) -> LValue<'gcc> {\n     let is_tls = attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL);\n     let llty = cx.layout_of(ty).gcc_type(cx, true);\n-    if let Some(linkage) = attrs.linkage {\n-        // If this is a static with a linkage specified, then we need to handle\n-        // it a little specially. The typesystem prevents things like &T and\n-        // extern \"C\" fn() from being non-null, so we can't just declare a\n-        // static and call it a day. Some linkages (like weak) will make it such\n-        // that the static actually has a null value.\n-        let llty2 =\n-            if let ty::RawPtr(ref mt) = ty.kind() {\n-                cx.layout_of(mt.ty).gcc_type(cx, true)\n-            }\n-            else {\n-                cx.sess().emit_fatal(LinkageConstOrMutType { span: span })\n-            };\n+    if let Some(linkage) = attrs.import_linkage {\n         // Declare a symbol `foo` with the desired linkage.\n-        let global1 = cx.declare_global_with_linkage(&sym, llty2, base::global_linkage_to_gcc(linkage));\n+        let global1 = cx.declare_global_with_linkage(&sym, cx.type_i8(), base::global_linkage_to_gcc(linkage));\n \n         // Declare an internal global `extern_with_linkage_foo` which\n         // is initialized with the address of `foo`.  If `foo` is"}, {"sha": "d0ba7e2479111fed3ee8661f86984a3fbfd18cf2", "filename": "compiler/rustc_codegen_gcc/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -211,13 +211,6 @@ pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     pub in_elem: Ty<'a>,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_gcc_linkage_const_or_mut_type)]\n-pub(crate) struct LinkageConstOrMutType {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(codegen_gcc_lto_not_supported)]\n pub(crate) struct LTONotSupported;"}, {"sha": "3626aa901c0ef45b02dfa23fe54487d491436f11", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,7 +1,7 @@\n use crate::base;\n use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n-use crate::errors::{InvalidMinimumAlignment, LinkageConstOrMutType, SymbolAlreadyDefined};\n+use crate::errors::{InvalidMinimumAlignment, SymbolAlreadyDefined};\n use crate::llvm::{self, True};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -162,22 +162,12 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n     def_id: DefId,\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n-    if let Some(linkage) = attrs.linkage {\n+    if let Some(linkage) = attrs.import_linkage {\n         debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n \n-        // If this is a static with a linkage specified, then we need to handle\n-        // it a little specially. The typesystem prevents things like &T and\n-        // extern \"C\" fn() from being non-null, so we can't just declare a\n-        // static and call it a day. Some linkages (like weak) will make it such\n-        // that the static actually has a null value.\n-        let llty2 = if let ty::RawPtr(ref mt) = ty.kind() {\n-            cx.layout_of(mt.ty).llvm_type(cx)\n-        } else {\n-            cx.sess().emit_fatal(LinkageConstOrMutType { span: cx.tcx.def_span(def_id) })\n-        };\n         unsafe {\n             // Declare a symbol `foo` with the desired linkage.\n-            let g1 = cx.declare_global(sym, llty2);\n+            let g1 = cx.declare_global(sym, cx.type_i8());\n             llvm::LLVMRustSetLinkage(g1, base::linkage_to_llvm(linkage));\n \n             // Declare an internal global `extern_with_linkage_foo` which\n@@ -195,7 +185,7 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n                 })\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n-            llvm::LLVMSetInitializer(g2, g1);\n+            llvm::LLVMSetInitializer(g2, cx.const_ptrcast(g1, llty));\n             g2\n         }\n     } else if cx.tcx.sess.target.arch == \"x86\" &&"}, {"sha": "af9f31fc3249309ee4aee8db7d4b0176f5fabf75", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -61,13 +61,6 @@ pub(crate) struct InvalidMinimumAlignment {\n     pub err: String,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_llvm_linkage_const_or_mut_type)]\n-pub(crate) struct LinkageConstOrMutType {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(codegen_llvm_sanitizer_memtag_requires_mte)]\n pub(crate) struct SanitizerMemtagRequiresMte;"}, {"sha": "31a709c36d4bc57461cf93cc57840ece6635ebc2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -494,6 +494,7 @@ E0786: include_str!(\"./error_codes/E0786.md\"),\n E0787: include_str!(\"./error_codes/E0787.md\"),\n E0788: include_str!(\"./error_codes/E0788.md\"),\n E0790: include_str!(\"./error_codes/E0790.md\"),\n+E0791: include_str!(\"./error_codes/E0791.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "61d2f511a348db34cd81db91fb581945e5ae605f", "filename": "compiler/rustc_error_codes/src/error_codes/E0791.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0791.md", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0791.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0791.md?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -0,0 +1,41 @@\n+Static variables with the `#[linkage]` attribute within external blocks\n+must have one of the following types, which are equivalent to a nullable\n+pointer in C:\n+\n+* `*mut T` or `*const T`, where `T` may be any type.\n+\n+* An enumerator type with no `#[repr]` attribute and with two variants, where\n+  one of the variants has no fields, and the other has a single field of one of\n+  the following non-nullable types:\n+  * Reference type\n+  * Function pointer type\n+\n+  The variants can appear in either order.\n+\n+For example, the following declaration is invalid:\n+\n+```compile_fail,E0791\n+#![feature(linkage)]\n+\n+extern \"C\" {\n+    #[linkage = \"extern_weak\"]\n+    static foo: i8;\n+}\n+```\n+\n+The following declarations are valid:\n+\n+```\n+#![feature(linkage)]\n+\n+extern \"C\" {\n+    #[linkage = \"extern_weak\"]\n+    static foo: Option<unsafe extern \"C\" fn()>;\n+\n+    #[linkage = \"extern_weak\"]\n+    static bar: Option<&'static i8>;\n+\n+    #[linkage = \"extern_weak\"]\n+    static baz: *mut i8;\n+}\n+```"}, {"sha": "08ce5172574ac3bb1af28314ec2200a26b8d221a", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_gcc.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,6 +1,3 @@\n-codegen_gcc_linkage_const_or_mut_type =\n-    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-\n codegen_gcc_unwinding_inline_asm =\n     GCC backend does not support unwinding from inline asm\n "}, {"sha": "97198cb4be2c827def75802a49b4af95bc5adaf0", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -23,9 +23,6 @@ codegen_llvm_branch_protection_requires_aarch64 =\n codegen_llvm_invalid_minimum_alignment =\n     invalid minimum global alignment: {$err}\n \n-codegen_llvm_linkage_const_or_mut_type =\n-    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-\n codegen_llvm_sanitizer_memtag_requires_mte =\n     `-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\n "}, {"sha": "a9ea161b93eda2251a9c779dc1eabfad0a36baa1", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -115,3 +115,6 @@ hir_analysis_const_bound_for_non_const_trait =\n hir_analysis_self_in_impl_self =\n     `Self` is not valid in the self type of an impl block\n     .note = replace `Self` with a different type\n+\n+hir_analysis_linkage_type =\n+    invalid type for variable with `#[linkage]` attribute"}, {"sha": "fc0ca62090d19c62b3a1656963ef85f026d1b793", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,4 +1,5 @@\n use crate::check::intrinsicck::InlineAsmCtxt;\n+use crate::errors::LinkageType;\n \n use super::compare_method::check_type_bounds;\n use super::compare_method::{compare_impl_method, compare_ty_impl};\n@@ -20,7 +21,7 @@ use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{self, AdtDef, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -478,6 +479,36 @@ fn check_opaque_meets_bounds<'tcx>(\n     let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n }\n \n+fn is_enum_of_nonnullable_ptr<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    adt_def: AdtDef<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+) -> bool {\n+    if adt_def.repr().inhibit_enum_layout_opt() {\n+        return false;\n+    }\n+\n+    let [var_one, var_two] = &adt_def.variants().raw[..] else {\n+        return false;\n+    };\n+    let (([], [field]) | ([field], [])) = (&var_one.fields[..], &var_two.fields[..]) else {\n+        return false;\n+    };\n+    matches!(field.ty(tcx, substs).kind(), ty::FnPtr(..) | ty::Ref(..))\n+}\n+\n+fn check_static_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+    if tcx.codegen_fn_attrs(def_id).import_linkage.is_some() {\n+        if match tcx.type_of(def_id).kind() {\n+            ty::RawPtr(_) => false,\n+            ty::Adt(adt_def, substs) => !is_enum_of_nonnullable_ptr(tcx, *adt_def, *substs),\n+            _ => true,\n+        } {\n+            tcx.sess.emit_err(LinkageType { span: tcx.def_span(def_id) });\n+        }\n+    }\n+}\n+\n fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n     debug!(\n         \"check_item_type(it.def_id={:?}, it.name={})\",\n@@ -490,6 +521,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             tcx.ensure().typeck(id.owner_id.def_id);\n             maybe_check_static_with_link_section(tcx, id.owner_id.def_id);\n             check_static_inhabited(tcx, id.owner_id.def_id);\n+            check_static_linkage(tcx, id.owner_id.def_id);\n         }\n         DefKind::Const => {\n             tcx.ensure().typeck(id.owner_id.def_id);\n@@ -627,6 +659,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n                         }\n                         hir::ForeignItemKind::Static(..) => {\n                             check_static_inhabited(tcx, def_id);\n+                            check_static_linkage(tcx, def_id);\n                         }\n                         _ => {}\n                     }"}, {"sha": "945361ef43a4eff5e85557adb4244bfecef68041", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1814,7 +1814,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             );\n         } else if attr.has_name(sym::linkage) {\n             if let Some(val) = attr.value_str() {\n-                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, did, val.as_str()));\n+                let linkage = Some(linkage_by_name(tcx, did, val.as_str()));\n+                if tcx.is_foreign_item(did) {\n+                    codegen_fn_attrs.import_linkage = linkage;\n+                } else {\n+                    codegen_fn_attrs.linkage = linkage;\n+                }\n             }\n         } else if attr.has_name(sym::link_section) {\n             if let Some(val) = attr.value_str() {"}, {"sha": "c92ab749bc1f7dc4a7e44023f684401aecde76b7", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -289,3 +289,10 @@ pub struct SelfInImplSelf {\n     #[note]\n     pub note: (),\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_linkage_type, code = \"E0791\")]\n+pub(crate) struct LinkageType {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "bea884c856a95bd616b229e20f9f2984154ab573", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -26,8 +26,10 @@ pub struct CodegenFnAttrs {\n     /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n     /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,\n-    /// The `#[linkage = \"...\"]` attribute and the value we found.\n+    /// The `#[linkage = \"...\"]` attribute on Rust-defined items and the value we found.\n     pub linkage: Option<Linkage>,\n+    /// The `#[linkage = \"...\"]` attribute on foreign items and the value we found.\n+    pub import_linkage: Option<Linkage>,\n     /// The `#[link_section = \"...\"]` attribute, or what executable section this\n     /// should be placed in.\n     pub link_section: Option<Symbol>,\n@@ -113,6 +115,7 @@ impl CodegenFnAttrs {\n             link_ordinal: None,\n             target_features: vec![],\n             linkage: None,\n+            import_linkage: None,\n             link_section: None,\n             no_sanitize: SanitizerSet::empty(),\n             instruction_set: None,"}, {"sha": "f5a4ce929b2a9219311c6c6d1298fad26c695b0c", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -29,7 +29,21 @@ use crate::ptr;\n use crate::sync::atomic::{self, AtomicPtr, Ordering};\n \n // We can use true weak linkage on ELF targets.\n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+#[cfg(all(not(any(target_os = \"macos\", target_os = \"ios\")), not(bootstrap)))]\n+pub(crate) macro weak {\n+    (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n+        let ref $name: ExternWeak<unsafe extern \"C\" fn($($t),*) -> $ret> = {\n+            extern \"C\" {\n+                #[linkage = \"extern_weak\"]\n+                static $name: Option<unsafe extern \"C\" fn($($t),*) -> $ret>;\n+            }\n+            #[allow(unused_unsafe)]\n+            ExternWeak::new(unsafe { $name })\n+        };\n+    )\n+}\n+\n+#[cfg(all(not(any(target_os = \"macos\", target_os = \"ios\")), bootstrap))]\n pub(crate) macro weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n         let ref $name: ExternWeak<unsafe extern \"C\" fn($($t),*) -> $ret> = {\n@@ -47,18 +61,39 @@ pub(crate) macro weak {\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub(crate) use self::dlsym as weak;\n \n+#[cfg(not(bootstrap))]\n+pub(crate) struct ExternWeak<F: Copy> {\n+    weak_ptr: Option<F>,\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<F: Copy> ExternWeak<F> {\n+    #[inline]\n+    pub(crate) fn new(weak_ptr: Option<F>) -> Self {\n+        ExternWeak { weak_ptr }\n+    }\n+\n+    #[inline]\n+    pub(crate) fn get(&self) -> Option<F> {\n+        self.weak_ptr\n+    }\n+}\n+\n+#[cfg(bootstrap)]\n pub(crate) struct ExternWeak<F> {\n     weak_ptr: *const libc::c_void,\n     _marker: PhantomData<F>,\n }\n \n+#[cfg(bootstrap)]\n impl<F> ExternWeak<F> {\n     #[inline]\n     pub(crate) fn new(weak_ptr: *const libc::c_void) -> Self {\n         ExternWeak { weak_ptr, _marker: PhantomData }\n     }\n }\n \n+#[cfg(bootstrap)]\n impl<F> ExternWeak<F> {\n     #[inline]\n     pub(crate) fn get(&self) -> Option<F> {"}, {"sha": "505f31ec6388d1d2bf4ce3a8b50ab77206527412", "filename": "src/test/ui/feature-gates/feature-gate-linkage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,5 +1,5 @@\n extern \"C\" {\n-    #[linkage = \"extern_weak\"] static foo: isize;\n+    #[linkage = \"extern_weak\"] static foo: *mut isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n }\n "}, {"sha": "a1c73e555ef7a35689004863f8bdf29cfc38d3ed", "filename": "src/test/ui/feature-gates/feature-gate-linkage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: the `linkage` attribute is experimental and not portable across platforms\n   --> $DIR/feature-gate-linkage.rs:2:5\n    |\n-LL |     #[linkage = \"extern_weak\"] static foo: isize;\n+LL |     #[linkage = \"extern_weak\"] static foo: *mut isize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #29603 <https://github.com/rust-lang/rust/issues/29603> for more information"}, {"sha": "2300930e513afb95497a6c244db6baa60e1c4102", "filename": "src/test/ui/linkage-attr/auxiliary/def_external.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_external.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "previous_filename": "src/test/ui/linkage-attr/auxiliary/def_illtyped_external.rs"}, {"sha": "f754ddc6e08fd4657337f567522ce11673609e60", "filename": "src/test/ui/linkage-attr/linkage-import.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-import.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -0,0 +1,8 @@\n+// build-pass\n+// aux-build:def_external.rs\n+\n+extern crate def_external as dep;\n+\n+fn main() {\n+    println!(\"{:p}\", &dep::EXTERN);\n+}"}, {"sha": "93afc537f7c6c1175970596bc2d66293d4ca7204", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec28f5338b8e54fa8ae3c18bf101c809c337f1f5/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec28f5338b8e54fa8ae3c18bf101c809c337f1f5/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs?ref=ec28f5338b8e54fa8ae3c18bf101c809c337f1f5", "patch": "@@ -1,11 +0,0 @@\n-// rust-lang/rust#59548: We used to ICE when trying to use a static\n-// with a type that violated its own `#[linkage]`.\n-\n-// build-fail\n-// aux-build:def_illtyped_external.rs\n-\n-extern crate def_illtyped_external as dep;\n-\n-fn main() {\n-    println!(\"{:p}\", &dep::EXTERN);\n-}"}, {"sha": "5abbe745c6a215d043d43e8ad1f5da93a908c319", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec28f5338b8e54fa8ae3c18bf101c809c337f1f5/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec28f5338b8e54fa8ae3c18bf101c809c337f1f5/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr?ref=ec28f5338b8e54fa8ae3c18bf101c809c337f1f5", "patch": "@@ -1,8 +0,0 @@\n-error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-  --> $DIR/auxiliary/def_illtyped_external.rs:5:1\n-   |\n-LL | pub static EXTERN: u32 = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "aa42874f7ba8a64767d80708e2282fb1e349d88c", "filename": "src/test/ui/linkage-attr/linkage2.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,16 +1,11 @@\n-// FIXME https://github.com/rust-lang/rust/issues/59774\n-\n-// build-fail\n-// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// ignore-sgx no weak linkages permitted\n+// check-fail\n \n #![feature(linkage)]\n \n extern \"C\" {\n     #[linkage = \"extern_weak\"]\n     static foo: i32;\n-//~^ ERROR: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+//~^ ERROR: invalid type for variable with `#[linkage]` attribute\n }\n \n fn main() {"}, {"sha": "7265f711fd01643ca2020957052fadab196312d4", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b8f34ac2272e3c94a97bebc033abe8e2f17101/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=91b8f34ac2272e3c94a97bebc033abe8e2f17101", "patch": "@@ -1,8 +1,9 @@\n-error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-  --> $DIR/linkage2.rs:12:5\n+error[E0791]: invalid type for variable with `#[linkage]` attribute\n+  --> $DIR/linkage2.rs:7:5\n    |\n LL |     static foo: i32;\n    |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0791`."}]}