{"sha": "66153d76e25834812d2785675c98e95d5ecb1830", "node_id": "C_kwDOAAsO6NoAKDY2MTUzZDc2ZTI1ODM0ODEyZDI3ODU2NzVjOThlOTVkNWVjYjE4MzA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-02T20:12:31Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-02T20:12:31Z"}, "message": "Improve the comments in `Symbol::interner`.", "tree": {"sha": "fce89c21b34c013fcfbe9327a678345a532f9455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce89c21b34c013fcfbe9327a678345a532f9455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66153d76e25834812d2785675c98e95d5ecb1830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66153d76e25834812d2785675c98e95d5ecb1830", "html_url": "https://github.com/rust-lang/rust/commit/66153d76e25834812d2785675c98e95d5ecb1830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66153d76e25834812d2785675c98e95d5ecb1830/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207c80f105282245d93024c95ac408c622f70114", "url": "https://api.github.com/repos/rust-lang/rust/commits/207c80f105282245d93024c95ac408c622f70114", "html_url": "https://github.com/rust-lang/rust/commit/207c80f105282245d93024c95ac408c622f70114"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "dd6ce60abfb3dd0393c36064f9f58e257af46ac5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/66153d76e25834812d2785675c98e95d5ecb1830/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66153d76e25834812d2785675c98e95d5ecb1830/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=66153d76e25834812d2785675c98e95d5ecb1830", "patch": "@@ -1716,8 +1716,9 @@ pub(crate) struct Interner(Lock<InternerInner>);\n // found that to regress performance up to 2% in some cases. This might be\n // revisited after further improvements to `indexmap`.\n //\n-// This type is private to prevent accidentally constructing more than one `Interner` on the same\n-// thread, which makes it easy to mixup `Symbol`s between `Interner`s.\n+// This type is private to prevent accidentally constructing more than one\n+// `Interner` on the same thread, which makes it easy to mixup `Symbol`s\n+// between `Interner`s.\n #[derive(Default)]\n struct InternerInner {\n     arena: DroplessArena,\n@@ -1743,14 +1744,20 @@ impl Interner {\n \n         let name = Symbol::new(inner.strings.len() as u32);\n \n-        // `from_utf8_unchecked` is safe since we just allocated a `&str` which is known to be\n-        // UTF-8.\n+        // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,\n+        // and immediately convert the clone back to `&[u8], all because there\n+        // is no `inner.arena.alloc_str()` method. This is clearly safe.\n         let string: &str =\n             unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };\n-        // It is safe to extend the arena allocation to `'static` because we only access\n-        // these while the arena is still alive.\n+\n+        // SAFETY: we can extend the arena allocation to `'static` because we\n+        // only access these while the arena is still alive.\n         let string: &'static str = unsafe { &*(string as *const str) };\n         inner.strings.push(string);\n+\n+        // This second hash table lookup can be avoided by using `RawEntryMut`,\n+        // but this code path isn't hot enough for it to be worth it. See\n+        // #91445 for details.\n         inner.names.insert(string, name);\n         name\n     }"}]}