{"sha": "d1ecee96bfb7fb52b67358302c524a8c0193dc23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWNlZTk2YmZiN2ZiNTJiNjczNTgzMDJjNTI0YThjMDE5M2RjMjM=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-08-24T16:57:45Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-08-24T17:05:21Z"}, "message": "memrchr: Correct aligned offset computation\n\nThe memrchr fallback did not compute the offset correctly. It was\nintentioned to land on usize-aligned addresses but did not.\nThis was suspected to resulted in a crash on ARMv7 platform!\n\nThis bug affected non-linux platforms.\n\nI think like this, if we have a slice with pointer `ptr` and length\n`len`, we want to find the last usize-aligned offset in the slice.\nThe correct computation should be:\n\nFor example if ptr = 1 and len = 6, and size_of::<usize>() is 4:\n\n[ x x x x x x ]\n  1 2 3 4 5 6\n        ^-- last aligned address at offset 3 from the start.\n\nThe last aligned address is ptr + len - (ptr + len) % usize_size.\n\nCompute offset from the start as:\n\noffset = len - (ptr + len) % usize_size = 6 - (1 + 6) % 4 = 6 - 3 = 3.\n\nI believe the function's return value was always correct previously, if\nthe platform supported unaligned addresses.", "tree": {"sha": "cb8e0f2ac468455b045a8d712d416e36f79807aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb8e0f2ac468455b045a8d712d416e36f79807aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ecee96bfb7fb52b67358302c524a8c0193dc23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ecee96bfb7fb52b67358302c524a8c0193dc23", "html_url": "https://github.com/rust-lang/rust/commit/d1ecee96bfb7fb52b67358302c524a8c0193dc23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ecee96bfb7fb52b67358302c524a8c0193dc23/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490189634b656dcca9e41e6b52093569c03bd4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/490189634b656dcca9e41e6b52093569c03bd4df", "html_url": "https://github.com/rust-lang/rust/commit/490189634b656dcca9e41e6b52093569c03bd4df"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "89b77a7d6614e8a6d72d7638ef06a9938699af0b", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1ecee96bfb7fb52b67358302c524a8c0193dc23/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ecee96bfb7fb52b67358302c524a8c0193dc23/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=d1ecee96bfb7fb52b67358302c524a8c0193dc23", "patch": "@@ -209,7 +209,7 @@ mod fallback {\n         let end_align = (ptr as usize + len) & (usize_bytes - 1);\n         let mut offset;\n         if end_align > 0 {\n-            offset = len - cmp::min(usize_bytes - end_align, len);\n+            offset = len - cmp::min(end_align, len);\n             if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {\n                 return Some(offset + index);\n             }\n@@ -309,6 +309,17 @@ mod fallback {\n     fn no_match_reversed() {\n         assert_eq!(None, memrchr(b'a', b\"xyz\"));\n     }\n+\n+    #[test]\n+    fn each_alignment_reversed() {\n+        let mut data = [1u8; 64];\n+        let needle = 2;\n+        let pos = 40;\n+        data[pos] = needle;\n+        for start in 0..16 {\n+            assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n+        }\n+    }\n }\n \n #[cfg(test)]\n@@ -385,4 +396,15 @@ mod tests {\n     fn no_match_reversed() {\n         assert_eq!(None, memrchr(b'a', b\"xyz\"));\n     }\n+\n+    #[test]\n+    fn each_alignment() {\n+        let mut data = [1u8; 64];\n+        let needle = 2;\n+        let pos = 40;\n+        data[pos] = needle;\n+        for start in 0..16 {\n+            assert_eq!(Some(pos - start), memchr(needle, &data[start..]));\n+        }\n+    }\n }"}]}