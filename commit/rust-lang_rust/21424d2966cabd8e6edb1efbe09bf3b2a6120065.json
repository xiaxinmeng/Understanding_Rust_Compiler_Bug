{"sha": "21424d2966cabd8e6edb1efbe09bf3b2a6120065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNDI0ZDI5NjZjYWJkOGU2ZWRiMWVmYmUwOWJmM2IyYTYxMjAwNjU=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-07-03T15:21:39Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-07-05T17:51:56Z"}, "message": "rustdoc: Add `PrimitiveType` to `ItemId::Primitive`", "tree": {"sha": "7117e7ecc8086f788cd06ded6ce7be5aa9e16009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7117e7ecc8086f788cd06ded6ce7be5aa9e16009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21424d2966cabd8e6edb1efbe09bf3b2a6120065", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmDjRrwACgkQjGL+mKYv\nxGKKLw//bZ9WmOPXrjNd3HbEa/GkBEg/GaEXHn8ooLDQHoXvm/5sIZ56pZr+fztq\ni+69tyMnJgyGLNC9zn4lpG1GxoAZdLRu/PRwZkuDvDabyM+kPIrKAS/gmXs75zxO\n5MHRd2OhlsWL+WlR2F5B96/stSutAS8pPKpkbZwQM1dvRkE/h9z/BPBzYgJ95SyJ\nY7shKHosYQteviyDp6JX88iaXPE/gu6tvz6qif1MUTDXaXsGKh0oU3Op2QP2zxee\nY1W1NCDrUc9UH+L/0d7E8RLWm9dzx21gw0SWi79OtNj4/l6LkmLOuIHjaMRWmAtd\nA9f1ncoNYutORlyMpVibGTU27VGfqGd1v6s+ZSLZWF53FjUjQecjcQMoyPZ2vjKV\nVQwS2W50zSCc/hjiqc8nfTuDzsqvdR2dHsDcDuCzi6jSawGVP3Uc+t+uahMgA+jP\n1AKDwckgcRrhcn9scPyVV8o2+aAz15Xp8otqLeDw9FO+WBOlnb68dudVqEbiaW4L\nVOzH5NL4cL1/J2UB8YhlQUpUcvrEBpQvE/Lzl91qt1MYkmgfpB5w8vjttB2FOcCx\n+D1ePH94Hh99UWghZdvz7J8AofPQJGc6X6K+BUIMnaIO4gS/re9ZuqEf1aKTC6nR\nhJceQeaFpMz0K45twFFLC98lGTjUb6NNJOyGi538kOAha4ycr7U=\n=YPRw\n-----END PGP SIGNATURE-----", "payload": "tree 7117e7ecc8086f788cd06ded6ce7be5aa9e16009\nparent 4b1027a317d6ca533064a11319d35db75baff141\nauthor Justus K <justus.k@protonmail.com> 1625325699 +0200\ncommitter Justus K <justus.k@protonmail.com> 1625507516 +0200\n\nrustdoc: Add `PrimitiveType` to `ItemId::Primitive`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21424d2966cabd8e6edb1efbe09bf3b2a6120065", "html_url": "https://github.com/rust-lang/rust/commit/21424d2966cabd8e6edb1efbe09bf3b2a6120065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21424d2966cabd8e6edb1efbe09bf3b2a6120065/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1027a317d6ca533064a11319d35db75baff141", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1027a317d6ca533064a11319d35db75baff141", "html_url": "https://github.com/rust-lang/rust/commit/4b1027a317d6ca533064a11319d35db75baff141"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "6f2085e0d43dc803c2da0eee37fe092c2d9052df", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=21424d2966cabd8e6edb1efbe09bf3b2a6120065", "patch": "@@ -483,10 +483,11 @@ fn build_module(\n             }\n             if let Res::PrimTy(p) = item.res {\n                 // Primitive types can't be inlined so generate an import instead.\n+                let prim_ty = clean::PrimitiveType::from(p);\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: box clean::Attributes::default(),\n-                    def_id: ItemId::Primitive(did.krate),\n+                    def_id: ItemId::Primitive(prim_ty, did.krate),\n                     visibility: clean::Public,\n                     kind: box clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,\n@@ -495,7 +496,7 @@ fn build_module(\n                                 global: false,\n                                 res: item.res,\n                                 segments: vec![clean::PathSegment {\n-                                    name: clean::PrimitiveType::from(p).as_sym(),\n+                                    name: prim_ty.as_sym(),\n                                     args: clean::GenericArgs::AngleBracketed {\n                                         args: Vec::new(),\n                                         bindings: Vec::new(),"}, {"sha": "4ffce6c7656f09389826bfaf9d2007b5cc140ea4", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=21424d2966cabd8e6edb1efbe09bf3b2a6120065", "patch": "@@ -50,7 +50,7 @@ use self::Type::*;\n \n crate type ItemIdSet = FxHashSet<ItemId>;\n \n-#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, Copy)]\n crate enum ItemId {\n     /// A \"normal\" item that uses a [`DefId`] for identification.\n     DefId(DefId),\n@@ -59,7 +59,7 @@ crate enum ItemId {\n     /// Identifier that is used for blanket implementations.\n     Blanket { trait_: DefId, for_: DefId },\n     /// Identifier for primitive types.\n-    Primitive(CrateNum),\n+    Primitive(PrimitiveType, CrateNum),\n }\n \n impl ItemId {\n@@ -69,7 +69,7 @@ impl ItemId {\n             ItemId::Auto { for_: id, .. }\n             | ItemId::Blanket { for_: id, .. }\n             | ItemId::DefId(id) => id.is_local(),\n-            ItemId::Primitive(krate) => krate == LOCAL_CRATE,\n+            ItemId::Primitive(_, krate) => krate == LOCAL_CRATE,\n         }\n     }\n \n@@ -94,7 +94,7 @@ impl ItemId {\n             ItemId::Auto { for_: id, .. }\n             | ItemId::Blanket { for_: id, .. }\n             | ItemId::DefId(id) => id.krate,\n-            ItemId::Primitive(krate) => krate,\n+            ItemId::Primitive(_, krate) => krate,\n         }\n     }\n "}, {"sha": "e7d6e5ac2c24be1f3d635c04165d29b02fc358cc", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=21424d2966cabd8e6edb1efbe09bf3b2a6120065", "patch": "@@ -122,7 +122,7 @@ crate struct Cache {\n     /// All intra-doc links resolved so far.\n     ///\n     /// Links are indexed by the DefId of the item they document.\n-    crate intra_doc_links: BTreeMap<ItemId, Vec<clean::ItemLink>>,\n+    crate intra_doc_links: FxHashMap<ItemId, Vec<clean::ItemLink>>,\n }\n \n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`."}, {"sha": "bd9f54d2e80d7918e6d002e2583f82b3ca316502", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21424d2966cabd8e6edb1efbe09bf3b2a6120065/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=21424d2966cabd8e6edb1efbe09bf3b2a6120065", "patch": "@@ -188,7 +188,7 @@ crate fn from_item_id(did: ItemId) -> Id {\n         ItemId::Auto { for_, trait_ } => {\n             Id(format!(\"a:{}-{}\", DisplayDefId(trait_), DisplayDefId(for_)))\n         }\n-        ItemId::Primitive(krate) => Id(format!(\"p:{}\", krate.as_u32())),\n+        ItemId::Primitive(ty, krate) => Id(format!(\"p:{}:{}\", krate.as_u32(), ty.as_sym())),\n     }\n }\n "}]}