{"sha": "2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmM2FhMGRkMmU5YTU5OWE4MGUyMmQ3OWMzM2E1ZDdlMjU1NGY5MGI=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-01T15:37:14Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-03T02:55:36Z"}, "message": "metadata: Eliminate the `EsEnumBody` tag.\n\nIt doesn't serve any useful purpose. It *might* be useful when\nthere are some tags that are generated by `Encodable` and\nnot delimited by any tags, but IIUC it's not the case.\n\nPrevious:\n\n                  <-------------------- len1 ------------------->\n    EsEnum <len1> EsEnumVid <vid> EsEnumBody <len2> <arg1> <arg2>\n                                                    <--- len2 -->\n\nNow:\n\n                  <----------- len1 ---------->\n    EsEnum <len1> EsEnumVid <vid> <arg1> <arg2>", "tree": {"sha": "20764d298aa28879d50ff15e82743ae9cfb5a23f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20764d298aa28879d50ff15e82743ae9cfb5a23f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b", "html_url": "https://github.com/rust-lang/rust/commit/2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9840b644c7e69551c6f9d737125375e4aec602d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9840b644c7e69551c6f9d737125375e4aec602d", "html_url": "https://github.com/rust-lang/rust/commit/c9840b644c7e69551c6f9d737125375e4aec602d"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "58cf5daf94121fa90e25f3426e582ab1827f6518", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=2f3aa0dd2e9a599a80e22d79c33a5d7e2554f90b", "patch": "@@ -103,17 +103,16 @@ pub enum EbmlEncoderTag {\n \n     EsStr      = 0x11,\n     EsEnum     = 0x12,\n-    EsEnumBody = 0x13,\n-    EsVec      = 0x14,\n-    EsVecElt   = 0x15,\n-    EsMap      = 0x16,\n-    EsMapKey   = 0x17,\n-    EsMapVal   = 0x18,\n+    EsVec      = 0x13,\n+    EsVecElt   = 0x14,\n+    EsMap      = 0x15,\n+    EsMapKey   = 0x16,\n+    EsMapVal   = 0x17,\n \n-    EsOpaque   = 0x19,\n+    EsOpaque   = 0x18,\n \n     // Used only when debugging\n-    EsLabel    = 0x1a,\n+    EsLabel    = 0x19,\n }\n \n const NUM_TAGS: uint = 0x1000;\n@@ -160,7 +159,7 @@ pub mod reader {\n     use super::{ ApplicationError, EsVec, EsMap, EsEnum, EsVecLen, EsVecElt,\n         EsMapLen, EsMapKey, EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64,\n         EsI32, EsI16, EsI8, EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal,\n-        EsEnumBody, EsUint, EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc,\n+        EsUint, EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc,\n         Error, IntTooBig, InvalidTag, Expected, NUM_IMPLICIT_TAGS, TAG_IMPLICIT_LEN };\n \n     pub type DecodeResult<T> = Result<T, Error>;\n@@ -564,17 +563,7 @@ pub mod reader {\n             let idx = try!(self._next_uint(EsEnumVid));\n             debug!(\"  idx={}\", idx);\n \n-            let doc = try!(self.next_doc(EsEnumBody));\n-\n-            let (old_parent, old_pos) = (self.parent, self.pos);\n-            self.parent = doc;\n-            self.pos = self.parent.start;\n-\n-            let result = try!(f(self, idx));\n-\n-            self.parent = old_parent;\n-            self.pos = old_pos;\n-            Ok(result)\n+            f(self, idx)\n         }\n \n         fn read_enum_variant_arg<T, F>(&mut self, idx: uint, f: F) -> DecodeResult<T> where\n@@ -592,17 +581,7 @@ pub mod reader {\n             let idx = try!(self._next_uint(EsEnumVid));\n             debug!(\"  idx={}\", idx);\n \n-            let doc = try!(self.next_doc(EsEnumBody));\n-\n-            let (old_parent, old_pos) = (self.parent, self.pos);\n-            self.parent = doc;\n-            self.pos = self.parent.start;\n-\n-            let result = try!(f(self, idx));\n-\n-            self.parent = old_parent;\n-            self.pos = old_pos;\n-            Ok(result)\n+            f(self, idx)\n         }\n \n         fn read_enum_struct_variant_field<T, F>(&mut self,\n@@ -743,7 +722,7 @@ pub mod writer {\n \n     use super::{ EsVec, EsMap, EsEnum, EsVecLen, EsVecElt, EsMapLen, EsMapKey,\n         EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64, EsI32, EsI16, EsI8,\n-        EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal, EsEnumBody, EsUint,\n+        EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal, EsUint,\n         EsOpaque, EsLabel, EbmlEncoderTag, NUM_IMPLICIT_TAGS, NUM_TAGS };\n \n     use serialize;\n@@ -1059,9 +1038,7 @@ pub mod writer {\n             F: FnOnce(&mut Encoder<'a, W>) -> EncodeResult,\n         {\n             try!(self._emit_tagged_uint(EsEnumVid, v_id));\n-            try!(self.start_tag(EsEnumBody as uint));\n-            try!(f(self));\n-            self.end_tag()\n+            f(self)\n         }\n \n         fn emit_enum_variant_arg<F>(&mut self, _: uint, f: F) -> EncodeResult where"}]}