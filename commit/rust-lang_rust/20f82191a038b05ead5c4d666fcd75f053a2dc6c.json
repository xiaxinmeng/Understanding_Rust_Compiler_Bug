{"sha": "20f82191a038b05ead5c4d666fcd75f053a2dc6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjgyMTkxYTAzOGIwNWVhZDVjNGQ2NjZmY2Q3NWYwNTNhMmRjNmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-23T15:28:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-23T15:28:55Z"}, "message": "Merge #8637\n\n8637: Tag `yield` and `await` as ControlFlow in semantic highlighting r=Veykril a=Veykril\n\nand shuffle some code around\r\nCloses #8634\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "693884735a4ea8ae065e4e08bf3528c5c1f61b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693884735a4ea8ae065e4e08bf3528c5c1f61b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f82191a038b05ead5c4d666fcd75f053a2dc6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggue3CRBK7hj4Ov3rIwAAp0oIADTD5EJpxz38cU7ymzLPwbW3\nq9dwNBHWHEv4zpBKcULZ3+vlOOiQxT+sAnSL1VnkqIOcEHYlr79uvTCzc8P/FEmI\nCYwWEH8KFLRNL6oIyFds3TSWIZU+qdRbRE7oSOlZE/O3B4m0855JjOdtx0dEdGUz\nTJHObps0zvVS08Ie8OBd/vo0hHcaV1CB3TsF3FhWO70NJi6xtfi4hIJjabGvOOC1\n102iVHwhqXJtS+o5HpPn4d2f7RWcEWqKdSDBTZD5x/o2Jm4YiLyRosukYe5inR3o\nfEuaYKUZv01EUDrtyqZ9vzJiBQlnkhykSVFBO3S91BP4kUTXplRU0xyHIh4fuKk=\n=c9Nh\n-----END PGP SIGNATURE-----\n", "payload": "tree 693884735a4ea8ae065e4e08bf3528c5c1f61b8d\nparent 85bab7539a050bb2c0eeae93b029ebde2aa48668\nparent 1e88f5ec8e0ca6692d705b2100299822abfc4220\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619191735 +0000\ncommitter GitHub <noreply@github.com> 1619191735 +0000\n\nMerge #8637\n\n8637: Tag `yield` and `await` as ControlFlow in semantic highlighting r=Veykril a=Veykril\n\nand shuffle some code around\r\nCloses #8634\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f82191a038b05ead5c4d666fcd75f053a2dc6c", "html_url": "https://github.com/rust-lang/rust/commit/20f82191a038b05ead5c4d666fcd75f053a2dc6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f82191a038b05ead5c4d666fcd75f053a2dc6c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85bab7539a050bb2c0eeae93b029ebde2aa48668", "url": "https://api.github.com/repos/rust-lang/rust/commits/85bab7539a050bb2c0eeae93b029ebde2aa48668", "html_url": "https://github.com/rust-lang/rust/commit/85bab7539a050bb2c0eeae93b029ebde2aa48668"}, {"sha": "1e88f5ec8e0ca6692d705b2100299822abfc4220", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e88f5ec8e0ca6692d705b2100299822abfc4220", "html_url": "https://github.com/rust-lang/rust/commit/1e88f5ec8e0ca6692d705b2100299822abfc4220"}], "stats": {"total": 297, "additions": 147, "deletions": 150}, "files": [{"sha": "8731699dc991f602c2ddb4f853c952f92300d5a3", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 78, "deletions": 104, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -1,6 +1,6 @@\n //! Computes color for a single element.\n \n-use hir::{AsAssocItem, AssocItemContainer, Semantics, VariantDef};\n+use hir::{AsAssocItem, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase, SymbolKind,\n@@ -45,36 +45,34 @@ pub(super) fn element(\n             };\n \n             match name_kind {\n-                Some(NameClass::ExternCrate(_)) => HlTag::Symbol(SymbolKind::Module).into(),\n+                Some(NameClass::ExternCrate(_)) => SymbolKind::Module.into(),\n                 Some(NameClass::Definition(def)) => highlight_def(db, def) | HlMod::Definition,\n                 Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n                 Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n                     let mut h = HlTag::Symbol(SymbolKind::Field).into();\n                     if let Definition::Field(field) = field_ref {\n-                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                        if let hir::VariantDef::Union(_) = field.parent_def(db) {\n                             h |= HlMod::Unsafe;\n                         }\n                     }\n-\n                     h\n                 }\n                 None => highlight_name_by_syntax(name) | HlMod::Definition,\n             }\n         }\n-\n         // Highlight references like the definitions they resolve to\n         NAME_REF if element.ancestors().any(|it| it.kind() == ATTR) => {\n             // even though we track whether we are in an attribute or not we still need this special case\n             // as otherwise we would emit unresolved references for name refs inside attributes\n-            Highlight::from(HlTag::Symbol(SymbolKind::Function))\n+            SymbolKind::Function.into()\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n             highlight_func_by_name_ref(sema, &name_ref).unwrap_or_else(|| {\n                 let is_self = name_ref.self_token().is_some();\n                 let h = match NameRefClass::classify(sema, &name_ref) {\n                     Some(name_kind) => match name_kind {\n-                        NameRefClass::ExternCrate(_) => HlTag::Symbol(SymbolKind::Module).into(),\n+                        NameRefClass::ExternCrate(_) => SymbolKind::Module.into(),\n                         NameRefClass::Definition(def) => {\n                             if let Definition::Local(local) = &def {\n                                 if let Some(name) = local.name(db) {\n@@ -95,7 +93,7 @@ pub(super) fn element(\n                             if let Some(parent) = name_ref.syntax().parent() {\n                                 if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n                                     if let Definition::Field(field) = def {\n-                                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                                        if let hir::VariantDef::Union(_) = field.parent_def(db) {\n                                             h |= HlMod::Unsafe;\n                                         }\n                                     }\n@@ -104,17 +102,15 @@ pub(super) fn element(\n \n                             h\n                         }\n-                        NameRefClass::FieldShorthand { .. } => {\n-                            HlTag::Symbol(SymbolKind::Field).into()\n-                        }\n+                        NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n                     },\n                     None if syntactic_name_ref_highlighting => {\n                         highlight_name_ref_by_syntax(name_ref, sema)\n                     }\n                     None => HlTag::UnresolvedReference.into(),\n                 };\n                 if h.tag == HlTag::Symbol(SymbolKind::Module) && is_self {\n-                    HlTag::Symbol(SymbolKind::SelfParam).into()\n+                    SymbolKind::SelfParam.into()\n                 } else {\n                     h\n                 }\n@@ -135,65 +131,52 @@ pub(super) fn element(\n         INT_NUMBER | FLOAT_NUMBER => HlTag::NumericLiteral.into(),\n         BYTE => HlTag::ByteLiteral.into(),\n         CHAR => HlTag::CharLiteral.into(),\n-        QUESTION => Highlight::new(HlTag::Operator(HlOperator::Other)) | HlMod::ControlFlow,\n+        QUESTION => HlTag::Operator(HlOperator::Other) | HlMod::ControlFlow,\n         LIFETIME => {\n             let lifetime = element.into_node().and_then(ast::Lifetime::cast).unwrap();\n \n             match NameClass::classify_lifetime(sema, &lifetime) {\n                 Some(NameClass::Definition(def)) => highlight_def(db, def) | HlMod::Definition,\n                 None => match NameRefClass::classify_lifetime(sema, &lifetime) {\n                     Some(NameRefClass::Definition(def)) => highlight_def(db, def),\n-                    _ => Highlight::new(HlTag::Symbol(SymbolKind::LifetimeParam)),\n+                    _ => SymbolKind::LifetimeParam.into(),\n                 },\n-                _ => Highlight::new(HlTag::Symbol(SymbolKind::LifetimeParam)) | HlMod::Definition,\n+                _ => Highlight::from(SymbolKind::LifetimeParam) | HlMod::Definition,\n             }\n         }\n         p if p.is_punct() => match p {\n-            T![&] if element.parent().and_then(ast::BinExpr::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Bitwise).into()\n-            }\n+            T![&] if parent_matches::<ast::BinExpr>(&element) => HlOperator::Bitwise.into(),\n             T![&] => {\n                 let h = HlTag::Operator(HlOperator::Other).into();\n                 let is_unsafe = element\n                     .parent()\n                     .and_then(ast::RefExpr::cast)\n-                    .map(|ref_expr| sema.is_unsafe_ref_expr(&ref_expr))\n-                    .unwrap_or(false);\n+                    .map_or(false, |ref_expr| sema.is_unsafe_ref_expr(&ref_expr));\n                 if is_unsafe {\n                     h | HlMod::Unsafe\n                 } else {\n                     h\n                 }\n             }\n-            T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] | T![.] => {\n-                HlTag::Operator(HlOperator::Other).into()\n-            }\n-            T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n-                HlTag::Symbol(SymbolKind::Macro).into()\n-            }\n-            T![!] if element.parent().and_then(ast::NeverType::cast).is_some() => {\n-                HlTag::BuiltinType.into()\n-            }\n-            T![!] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Logical).into()\n-            }\n-            T![*] if element.parent().and_then(ast::PtrType::cast).is_some() => {\n-                HlTag::Keyword.into()\n-            }\n-            T![*] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n+            T![::] | T![->] | T![=>] | T![..] | T![=] | T![@] | T![.] => HlOperator::Other.into(),\n+            T![!] if parent_matches::<ast::MacroCall>(&element) => SymbolKind::Macro.into(),\n+            T![!] if parent_matches::<ast::NeverType>(&element) => HlTag::BuiltinType.into(),\n+            T![!] if parent_matches::<ast::PrefixExpr>(&element) => HlOperator::Logical.into(),\n+            T![*] if parent_matches::<ast::PtrType>(&element) => HlTag::Keyword.into(),\n+            T![*] if parent_matches::<ast::PrefixExpr>(&element) => {\n                 let prefix_expr = element.parent().and_then(ast::PrefixExpr::cast)?;\n \n                 let expr = prefix_expr.expr()?;\n                 let ty = sema.type_of_expr(&expr)?;\n                 if ty.is_raw_ptr() {\n                     HlTag::Operator(HlOperator::Other) | HlMod::Unsafe\n                 } else if let Some(ast::PrefixOp::Deref) = prefix_expr.op_kind() {\n-                    HlTag::Operator(HlOperator::Other).into()\n+                    HlOperator::Other.into()\n                 } else {\n-                    HlTag::Punctuation(HlPunct::Other).into()\n+                    HlPunct::Other.into()\n                 }\n             }\n-            T![-] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n+            T![-] if parent_matches::<ast::PrefixExpr>(&element) => {\n                 let prefix_expr = element.parent().and_then(ast::PrefixExpr::cast)?;\n \n                 let expr = prefix_expr.expr()?;\n@@ -203,41 +186,31 @@ pub(super) fn element(\n                 }\n                 .into()\n             }\n-            _ if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Other).into()\n-            }\n+            _ if parent_matches::<ast::PrefixExpr>(&element) => HlOperator::Other.into(),\n             T![+] | T![-] | T![*] | T![/] | T![+=] | T![-=] | T![*=] | T![/=]\n-                if element.parent().and_then(ast::BinExpr::cast).is_some() =>\n+                if parent_matches::<ast::BinExpr>(&element) =>\n             {\n-                HlTag::Operator(HlOperator::Arithmetic).into()\n+                HlOperator::Arithmetic.into()\n             }\n             T![|] | T![&] | T![!] | T![^] | T![|=] | T![&=] | T![^=]\n-                if element.parent().and_then(ast::BinExpr::cast).is_some() =>\n+                if parent_matches::<ast::BinExpr>(&element) =>\n             {\n-                HlTag::Operator(HlOperator::Bitwise).into()\n+                HlOperator::Bitwise.into()\n             }\n-            T![&&] | T![||] if element.parent().and_then(ast::BinExpr::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Logical).into()\n+            T![&&] | T![||] if parent_matches::<ast::BinExpr>(&element) => {\n+                HlOperator::Logical.into()\n             }\n             T![>] | T![<] | T![==] | T![>=] | T![<=] | T![!=]\n-                if element.parent().and_then(ast::BinExpr::cast).is_some() =>\n+                if parent_matches::<ast::BinExpr>(&element) =>\n             {\n-                HlTag::Operator(HlOperator::Comparison).into()\n-            }\n-            _ if element.parent().and_then(ast::BinExpr::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Other).into()\n+                HlOperator::Comparison.into()\n             }\n-            _ if element.parent().and_then(ast::RangeExpr::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Other).into()\n-            }\n-            _ if element.parent().and_then(ast::RangePat::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Other).into()\n-            }\n-            _ if element.parent().and_then(ast::RestPat::cast).is_some() => {\n-                HlTag::Operator(HlOperator::Other).into()\n-            }\n-            _ if element.parent().and_then(ast::Attr::cast).is_some() => HlTag::Attribute.into(),\n-            kind => HlTag::Punctuation(match kind {\n+            _ if parent_matches::<ast::BinExpr>(&element) => HlOperator::Other.into(),\n+            _ if parent_matches::<ast::RangeExpr>(&element) => HlOperator::Other.into(),\n+            _ if parent_matches::<ast::RangePat>(&element) => HlOperator::Other.into(),\n+            _ if parent_matches::<ast::RestPat>(&element) => HlOperator::Other.into(),\n+            _ if parent_matches::<ast::Attr>(&element) => HlTag::Attribute.into(),\n+            kind => match kind {\n                 T!['['] | T![']'] => HlPunct::Bracket,\n                 T!['{'] | T!['}'] => HlPunct::Brace,\n                 T!['('] | T![')'] => HlPunct::Parenthesis,\n@@ -247,22 +220,24 @@ pub(super) fn element(\n                 T![;] => HlPunct::Semi,\n                 T![.] => HlPunct::Dot,\n                 _ => HlPunct::Other,\n-            })\n+            }\n             .into(),\n         },\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HlTag::Keyword);\n             match k {\n-                T![break]\n+                T![await]\n+                | T![break]\n                 | T![continue]\n                 | T![else]\n                 | T![if]\n+                | T![in]\n                 | T![loop]\n                 | T![match]\n                 | T![return]\n                 | T![while]\n-                | T![in] => h | HlMod::ControlFlow,\n+                | T![yield] => h | HlMod::ControlFlow,\n                 T![for] if !is_child_of_impl(&element) => h | HlMod::ControlFlow,\n                 T![unsafe] => h | HlMod::Unsafe,\n                 T![true] | T![false] => HlTag::BoolLiteral.into(),\n@@ -301,7 +276,6 @@ pub(super) fn element(\n         hash((name, shadow_count))\n     }\n }\n-\n fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n     match def {\n         Definition::Macro(_) => HlTag::Symbol(SymbolKind::Macro),\n@@ -317,12 +291,12 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                     }\n \n                     match item.container(db) {\n-                        AssocItemContainer::Impl(i) => {\n+                        hir::AssocItemContainer::Impl(i) => {\n                             if i.trait_(db).is_some() {\n                                 h |= HlMod::Trait;\n                             }\n                         }\n-                        AssocItemContainer::Trait(_t) => {\n+                        hir::AssocItemContainer::Trait(_t) => {\n                             h |= HlMod::Trait;\n                         }\n                     }\n@@ -342,12 +316,12 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if let Some(item) = konst.as_assoc_item(db) {\n                     h |= HlMod::Associated;\n                     match item.container(db) {\n-                        AssocItemContainer::Impl(i) => {\n+                        hir::AssocItemContainer::Impl(i) => {\n                             if i.trait_(db).is_some() {\n                                 h |= HlMod::Trait;\n                             }\n                         }\n-                        AssocItemContainer::Trait(_t) => {\n+                        hir::AssocItemContainer::Trait(_t) => {\n                             h |= HlMod::Trait;\n                         }\n                     }\n@@ -361,12 +335,12 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if let Some(item) = type_.as_assoc_item(db) {\n                     h |= HlMod::Associated;\n                     match item.container(db) {\n-                        AssocItemContainer::Impl(i) => {\n+                        hir::AssocItemContainer::Impl(i) => {\n                             if i.trait_(db).is_some() {\n                                 h |= HlMod::Trait;\n                             }\n                         }\n-                        AssocItemContainer::Trait(_t) => {\n+                        hir::AssocItemContainer::Trait(_t) => {\n                             h |= HlMod::Trait;\n                         }\n                     }\n@@ -425,7 +399,7 @@ fn highlight_method_call(\n     method_call: &ast::MethodCallExpr,\n ) -> Option<Highlight> {\n     let func = sema.resolve_method_call(&method_call)?;\n-    let mut h = HlTag::Symbol(SymbolKind::Function).into();\n+    let mut h = SymbolKind::Function.into();\n     h |= HlMod::Associated;\n     if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(&method_call) {\n         h |= HlMod::Unsafe;\n@@ -461,20 +435,20 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     };\n \n     let tag = match parent.kind() {\n-        STRUCT => HlTag::Symbol(SymbolKind::Struct),\n-        ENUM => HlTag::Symbol(SymbolKind::Enum),\n-        VARIANT => HlTag::Symbol(SymbolKind::Variant),\n-        UNION => HlTag::Symbol(SymbolKind::Union),\n-        TRAIT => HlTag::Symbol(SymbolKind::Trait),\n-        TYPE_ALIAS => HlTag::Symbol(SymbolKind::TypeAlias),\n-        TYPE_PARAM => HlTag::Symbol(SymbolKind::TypeParam),\n-        RECORD_FIELD => HlTag::Symbol(SymbolKind::Field),\n-        MODULE => HlTag::Symbol(SymbolKind::Module),\n-        FN => HlTag::Symbol(SymbolKind::Function),\n-        CONST => HlTag::Symbol(SymbolKind::Const),\n-        STATIC => HlTag::Symbol(SymbolKind::Static),\n-        IDENT_PAT => HlTag::Symbol(SymbolKind::Local),\n-        _ => default,\n+        STRUCT => SymbolKind::Struct,\n+        ENUM => SymbolKind::Enum,\n+        VARIANT => SymbolKind::Variant,\n+        UNION => SymbolKind::Union,\n+        TRAIT => SymbolKind::Trait,\n+        TYPE_ALIAS => SymbolKind::TypeAlias,\n+        TYPE_PARAM => SymbolKind::TypeParam,\n+        RECORD_FIELD => SymbolKind::Field,\n+        MODULE => SymbolKind::Module,\n+        FN => SymbolKind::Function,\n+        CONST => SymbolKind::Const,\n+        STATIC => SymbolKind::Static,\n+        IDENT_PAT => SymbolKind::Local,\n+        _ => return default.into(),\n     };\n \n     tag.into()\n@@ -492,20 +466,15 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n         METHOD_CALL_EXPR => {\n             return ast::MethodCallExpr::cast(parent)\n                 .and_then(|it| highlight_method_call(sema, &it))\n-                .unwrap_or_else(|| HlTag::Symbol(SymbolKind::Function).into());\n+                .unwrap_or_else(|| SymbolKind::Function.into());\n         }\n         FIELD_EXPR => {\n             let h = HlTag::Symbol(SymbolKind::Field);\n             let is_union = ast::FieldExpr::cast(parent)\n-                .and_then(|field_expr| {\n-                    let field = sema.resolve_field(&field_expr)?;\n-                    Some(if let VariantDef::Union(_) = field.parent_def(sema.db) {\n-                        true\n-                    } else {\n-                        false\n-                    })\n-                })\n-                .unwrap_or(false);\n+                .and_then(|field_expr| sema.resolve_field(&field_expr))\n+                .map_or(false, |field| {\n+                    matches!(field.parent_def(sema.db), hir::VariantDef::Union(_))\n+                });\n             if is_union {\n                 h | HlMod::Unsafe\n             } else {\n@@ -522,9 +491,9 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n                 _ => {\n                     // within path, decide whether it is module or adt by checking for uppercase name\n                     return if name.text().chars().next().unwrap_or_default().is_uppercase() {\n-                        HlTag::Symbol(SymbolKind::Struct)\n+                        SymbolKind::Struct\n                     } else {\n-                        HlTag::Symbol(SymbolKind::Module)\n+                        SymbolKind::Module\n                     }\n                     .into();\n                 }\n@@ -535,11 +504,11 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n             };\n \n             match parent.kind() {\n-                CALL_EXPR => HlTag::Symbol(SymbolKind::Function).into(),\n+                CALL_EXPR => SymbolKind::Function.into(),\n                 _ => if name.text().chars().next().unwrap_or_default().is_uppercase() {\n-                    HlTag::Symbol(SymbolKind::Struct)\n+                    SymbolKind::Struct\n                 } else {\n-                    HlTag::Symbol(SymbolKind::Const)\n+                    SymbolKind::Const\n                 }\n                 .into(),\n             }\n@@ -574,6 +543,11 @@ fn parents_match(mut node: NodeOrToken<SyntaxNode, SyntaxToken>, mut kinds: &[Sy\n     kinds.len() == 0\n }\n \n+#[inline]\n+fn parent_matches<N: AstNode>(element: &SyntaxElement) -> bool {\n+    element.parent().map_or(false, |it| N::can_cast(it.kind()))\n+}\n+\n fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     match element.parent() {\n         Some(e) => e.kind() == IMPL,"}, {"sha": "a304b325064fc1a18ce12b56e5e6b270ebf7ab25", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -40,28 +40,33 @@ pub enum HlTag {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n #[repr(u8)]\n pub enum HlMod {\n+    /// Used for items in traits and impls.\n+    Associated = 0,\n     /// Used to differentiate individual elements within attributes.\n-    Attribute = 0,\n+    Attribute,\n+    /// Callable item or value.\n+    Callable,\n+    /// Value that is being consumed in a function call\n+    Consuming,\n     /// Used with keywords like `if` and `break`.\n     ControlFlow,\n     /// `foo` in `fn foo(x: i32)` is a definition, `foo` in `foo(90 + 2)` is\n     /// not.\n     Definition,\n+    /// Doc-strings like this one.\n     Documentation,\n+    /// Highlighting injection like rust code in doc strings or ra_fixture.\n     Injected,\n-    Mutable,\n-    Consuming,\n-    Callable,\n-    /// Used for associated functions\n-    Static,\n-    /// Used for items in impls&traits.\n-    Associated,\n     /// Used for intra doc links in doc injection.\n     IntraDocLink,\n+    /// Mutable binding.\n+    Mutable,\n+    /// Used for associated functions.\n+    Static,\n     /// Used for items in traits and trait impls.\n     Trait,\n-\n-    /// Keep this last!\n+    // Keep this last!\n+    /// Used for unsafe functions, mutable statics, union accesses and unsafe operations.\n     Unsafe,\n }\n \n@@ -169,17 +174,17 @@ impl fmt::Display for HlTag {\n \n impl HlMod {\n     const ALL: &'static [HlMod; HlMod::Unsafe as u8 as usize + 1] = &[\n+        HlMod::Associated,\n         HlMod::Attribute,\n+        HlMod::Callable,\n+        HlMod::Consuming,\n         HlMod::ControlFlow,\n         HlMod::Definition,\n         HlMod::Documentation,\n-        HlMod::IntraDocLink,\n         HlMod::Injected,\n+        HlMod::IntraDocLink,\n         HlMod::Mutable,\n-        HlMod::Consuming,\n-        HlMod::Callable,\n         HlMod::Static,\n-        HlMod::Associated,\n         HlMod::Trait,\n         HlMod::Unsafe,\n     ];\n@@ -229,6 +234,24 @@ impl From<HlTag> for Highlight {\n     }\n }\n \n+impl From<HlOperator> for Highlight {\n+    fn from(op: HlOperator) -> Highlight {\n+        Highlight::new(HlTag::Operator(op))\n+    }\n+}\n+\n+impl From<HlPunct> for Highlight {\n+    fn from(punct: HlPunct) -> Highlight {\n+        Highlight::new(HlTag::Punctuation(punct))\n+    }\n+}\n+\n+impl From<SymbolKind> for Highlight {\n+    fn from(sym: SymbolKind) -> Highlight {\n+        Highlight::new(HlTag::Symbol(sym))\n+    }\n+}\n+\n impl Highlight {\n     pub(crate) fn new(tag: HlTag) -> Highlight {\n         Highlight { tag, mods: HlMods::default() }"}, {"sha": "a0ea1db3467c0dfd1b47559ad7b8b2db4a909020", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -42,17 +42,17 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration static associated trait\">t_is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated trait\">t_is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">t_is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">t_is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n         </code></pre>\n\\ No newline at end of file"}, {"sha": "638f42c2f0874f7ff2b2fcfa1b9dd9d9c5cdb15b", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -50,7 +50,7 @@\n     <span class=\"comment\">//    KILLER WHALE</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">    Ishmael.\"</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration associated\">bar</span><span class=\"colon\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant associated declaration\">bar</span><span class=\"colon\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"semicolon\">;</span>\n \n     <span class=\"comment documentation\">/// Constructs a new `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n@@ -60,7 +60,7 @@\n     <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">bar</span><span class=\"colon\">:</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">}</span>\n     <span class=\"brace\">}</span>\n \n@@ -94,15 +94,15 @@\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n         <span class=\"bool_literal\">true</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"comment documentation\">/// </span><span class=\"struct documentation intra_doc_link injected\">[`Foo`](Foo)</span><span class=\"comment documentation\"> is a struct</span>\n-<span class=\"comment documentation\">/// This function is &gt; </span><span class=\"function documentation intra_doc_link injected\">[`all_the_links`](all_the_links)</span><span class=\"comment documentation\"> &lt;</span>\n+<span class=\"comment documentation\">/// </span><span class=\"struct documentation injected intra_doc_link\">[`Foo`](Foo)</span><span class=\"comment documentation\"> is a struct</span>\n+<span class=\"comment documentation\">/// This function is &gt; </span><span class=\"function documentation injected intra_doc_link\">[`all_the_links`](all_the_links)</span><span class=\"comment documentation\"> &lt;</span>\n <span class=\"comment documentation\">/// [`noop`](noop) is a macro below</span>\n-<span class=\"comment documentation\">/// </span><span class=\"struct documentation intra_doc_link injected\">[`Item`]</span><span class=\"comment documentation\"> is a struct in the module </span><span class=\"module documentation intra_doc_link injected\">[`module`]</span>\n+<span class=\"comment documentation\">/// </span><span class=\"struct documentation injected intra_doc_link\">[`Item`]</span><span class=\"comment documentation\"> is a struct in the module </span><span class=\"module documentation injected intra_doc_link\">[`module`]</span>\n <span class=\"comment documentation\">///</span>\n <span class=\"comment documentation\">/// [`Item`]: module::Item</span>\n <span class=\"comment documentation\">/// [mix_and_match]: ThisShouldntResolve</span>"}, {"sha": "6202a03ceb1b65fb2d1f4a157a8b6d771b803878", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -42,7 +42,7 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r#\"</span>\n         <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"brace\">{</span>\n-            <span class=\"keyword\">fn</span> <span class=\"function declaration static associated trait\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+            <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n                 <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n             <span class=\"brace\">}</span>\n         <span class=\"brace\">}</span><span class=\"string_literal\">\"#</span>"}, {"sha": "68165bdbfd5501e5a564837da35339f91bb49a1b", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -47,7 +47,7 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"semicolon\">;</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration unsafe\">unsafe_method</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"brace\">{</span>\n@@ -62,11 +62,11 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>"}, {"sha": "4319e8b50f022f8bd245f73111c94159ff13dd9c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/20f82191a038b05ead5c4d666fcd75f053a2dc6c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=20f82191a038b05ead5c4d666fcd75f053a2dc6c", "patch": "@@ -67,25 +67,25 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">Foo</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword mutable consuming\">self</span><span class=\"parenthesis\">)</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">baz</span><span class=\"parenthesis\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">Foo</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword consuming mutable\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -96,15 +96,15 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">FooCopy</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">FooCopy</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n@@ -128,7 +128,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">use</span> <span class=\"module\">ops</span><span class=\"operator\">::</span><span class=\"trait\">Fn</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"colon\">:</span> <span class=\"trait\">Fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"value_param declaration callable\">f</span><span class=\"colon\">:</span> <span class=\"type_param\">F</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"colon\">:</span> <span class=\"trait\">Fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"value_param callable declaration\">f</span><span class=\"colon\">:</span> <span class=\"type_param\">F</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"value_param callable\">f</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n \n@@ -199,16 +199,16 @@\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function mutable associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"brace\">{</span> <span class=\"field\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function mutable associated\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable mutable\">copy</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">a</span> <span class=\"operator\">=</span> <span class=\"punctuation\">|</span><span class=\"value_param declaration\">x</span><span class=\"punctuation\">|</span> <span class=\"value_param\">x</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">bar</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span><span class=\"operator\">::</span><span class=\"function associated\">baz</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable callable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"punctuation\">|</span><span class=\"value_param declaration\">x</span><span class=\"punctuation\">|</span> <span class=\"value_param\">x</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable callable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span><span class=\"operator\">::</span><span class=\"function associated\">baz</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"variable\">baz</span><span class=\"semicolon\">;</span>\n@@ -228,7 +228,7 @@\n <span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n \n <span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">T</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parenthesis\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parenthesis\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"brace\">{</span>\n             <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"comma\">,</span>"}]}