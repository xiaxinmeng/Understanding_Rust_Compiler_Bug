{"sha": "75c8c211dc138466945d1f60f74260bfbae79b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzhjMjExZGMxMzg0NjY5NDVkMWY2MGY3NDI2MGJmYmFlNzliNzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T03:32:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-29T03:32:56Z"}, "message": "Rollup merge of #63968 - eddyb:apfloat-nostd, r=matthewjasper\n\nrustc_apfloat: make the crate #![no_std] explicitly.\n\nWe only need allocation, and even that could be made optional.", "tree": {"sha": "f25e4d201bfe38909ebeb20ce25729ddb53ae441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25e4d201bfe38909ebeb20ce25729ddb53ae441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c8c211dc138466945d1f60f74260bfbae79b73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZ0doCRBK7hj4Ov3rIwAAdHIIABsQiyJz/k5FRziHyBcfdr79\n5HGXiOYqMafyFlsxI9SaIji4wW4pBGURRAaHCewujlWQMkZKzUQMxZoHesvThVkG\ny+NiT/jDnpgvkBwYD6nyavEgOHly3zjiVD9ueJWwXksYRZaj3t11Sx2qr42x8jbX\nn2nD2J+FsgoVRsUZRufl6xrz+hgfW5ehTEvCzAmvbKKpNXDJbbEhKQCPA6PXojhc\nOsVDQKt7gIFcv3U4XtBIOoJUEyiA+ztJhHnM5IZ3yMC14VTGcb+v4CnC7XEMvV9P\nScMzizJnDi0qnfp0H3FhT9KfzvP+neHchX+IRjPWCRwOWiS8zjuLAEn1GlVdwWg=\n=L6e0\n-----END PGP SIGNATURE-----\n", "payload": "tree f25e4d201bfe38909ebeb20ce25729ddb53ae441\nparent 1c4a9a905023956bdad921bb683533704f3a14ac\nparent 0006216c9d83dabed3f13f5ed231c152561ceb6a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567049576 +0200\ncommitter GitHub <noreply@github.com> 1567049576 +0200\n\nRollup merge of #63968 - eddyb:apfloat-nostd, r=matthewjasper\n\nrustc_apfloat: make the crate #![no_std] explicitly.\n\nWe only need allocation, and even that could be made optional.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c8c211dc138466945d1f60f74260bfbae79b73", "html_url": "https://github.com/rust-lang/rust/commit/75c8c211dc138466945d1f60f74260bfbae79b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c8c211dc138466945d1f60f74260bfbae79b73/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c4a9a905023956bdad921bb683533704f3a14ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4a9a905023956bdad921bb683533704f3a14ac", "html_url": "https://github.com/rust-lang/rust/commit/1c4a9a905023956bdad921bb683533704f3a14ac"}, {"sha": "0006216c9d83dabed3f13f5ed231c152561ceb6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0006216c9d83dabed3f13f5ed231c152561ceb6a", "html_url": "https://github.com/rust-lang/rust/commit/0006216c9d83dabed3f13f5ed231c152561ceb6a"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "18d968fbddd9b6b319798a369251ec85bab2bce0", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75c8c211dc138466945d1f60f74260bfbae79b73/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c8c211dc138466945d1f60f74260bfbae79b73/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=75c8c211dc138466945d1f60f74260bfbae79b73", "patch": "@@ -1,13 +1,13 @@\n use crate::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n use crate::{Float, FloatConvert, ParseError, Round, Status, StatusAnd};\n \n+use core::cmp::{self, Ordering};\n+use core::convert::TryFrom;\n+use core::fmt::{self, Write};\n+use core::marker::PhantomData;\n+use core::mem;\n+use core::ops::Neg;\n use smallvec::{SmallVec, smallvec};\n-use std::cmp::{self, Ordering};\n-use std::convert::TryFrom;\n-use std::fmt::{self, Write};\n-use std::marker::PhantomData;\n-use std::mem;\n-use std::ops::Neg;\n \n #[must_use]\n pub struct IeeeFloat<S> {\n@@ -2287,8 +2287,8 @@ impl Loss {\n /// Implementation details of IeeeFloat significands, such as big integer arithmetic.\n /// As a rule of thumb, no functions in this module should dynamically allocate.\n mod sig {\n-    use std::cmp::Ordering;\n-    use std::mem;\n+    use core::cmp::Ordering;\n+    use core::mem;\n     use super::{ExpInt, Limb, LIMB_BITS, limbs_for_bits, Loss};\n \n     pub(super) fn is_all_zeros(limbs: &[Limb]) -> bool {"}, {"sha": "1190cea21acc3cf364b89018d7798462f9b7c4b2", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/75c8c211dc138466945d1f60f74260bfbae79b73/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c8c211dc138466945d1f60f74260bfbae79b73/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=75c8c211dc138466945d1f60f74260bfbae79b73", "patch": "@@ -31,15 +31,19 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![no_std]\n #![forbid(unsafe_code)]\n \n #![feature(nll)]\n \n-use std::cmp::Ordering;\n-use std::fmt;\n-use std::ops::{Neg, Add, Sub, Mul, Div, Rem};\n-use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n-use std::str::FromStr;\n+#[macro_use]\n+extern crate alloc;\n+\n+use core::cmp::Ordering;\n+use core::fmt;\n+use core::ops::{Neg, Add, Sub, Mul, Div, Rem};\n+use core::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n+use core::str::FromStr;\n \n bitflags::bitflags! {\n     /// IEEE-754R 7: Default exception handling.\n@@ -587,7 +591,7 @@ macro_rules! float_common_impls {\n             }\n         }\n \n-        impl<$t> ::std::str::FromStr for $ty<$t> where Self: Float {\n+        impl<$t> ::core::str::FromStr for $ty<$t> where Self: Float {\n             type Err = ParseError;\n             fn from_str(s: &str) -> Result<Self, ParseError> {\n                 Self::from_str_r(s, Round::NearestTiesToEven).map(|x| x.value)\n@@ -596,66 +600,66 @@ macro_rules! float_common_impls {\n \n         // Rounding ties to the nearest even, by default.\n \n-        impl<$t> ::std::ops::Add for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Add for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn add(self, rhs: Self) -> StatusAnd<Self> {\n                 self.add_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Sub for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Sub for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn sub(self, rhs: Self) -> StatusAnd<Self> {\n                 self.sub_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Mul for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Mul for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn mul(self, rhs: Self) -> StatusAnd<Self> {\n                 self.mul_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Div for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Div for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn div(self, rhs: Self) -> StatusAnd<Self> {\n                 self.div_r(rhs, Round::NearestTiesToEven)\n             }\n         }\n \n-        impl<$t> ::std::ops::Rem for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::Rem for $ty<$t> where Self: Float {\n             type Output = StatusAnd<Self>;\n             fn rem(self, rhs: Self) -> StatusAnd<Self> {\n                 self.c_fmod(rhs)\n             }\n         }\n \n-        impl<$t> ::std::ops::AddAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::AddAssign for $ty<$t> where Self: Float {\n             fn add_assign(&mut self, rhs: Self) {\n                 *self = (*self + rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::SubAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::SubAssign for $ty<$t> where Self: Float {\n             fn sub_assign(&mut self, rhs: Self) {\n                 *self = (*self - rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::MulAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::MulAssign for $ty<$t> where Self: Float {\n             fn mul_assign(&mut self, rhs: Self) {\n                 *self = (*self * rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::DivAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::DivAssign for $ty<$t> where Self: Float {\n             fn div_assign(&mut self, rhs: Self) {\n                 *self = (*self / rhs).value;\n             }\n         }\n \n-        impl<$t> ::std::ops::RemAssign for $ty<$t> where Self: Float {\n+        impl<$t> ::core::ops::RemAssign for $ty<$t> where Self: Float {\n             fn rem_assign(&mut self, rhs: Self) {\n                 *self = (*self % rhs).value;\n             }"}, {"sha": "8e2e390568e48261e5e0ea262dfd89a64ad07bc4", "filename": "src/librustc_apfloat/ppc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c8c211dc138466945d1f60f74260bfbae79b73/src%2Flibrustc_apfloat%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c8c211dc138466945d1f60f74260bfbae79b73/src%2Flibrustc_apfloat%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fppc.rs?ref=75c8c211dc138466945d1f60f74260bfbae79b73", "patch": "@@ -1,9 +1,9 @@\n use crate::{Category, ExpInt, Float, FloatConvert, Round, ParseError, Status, StatusAnd};\n use crate::ieee;\n \n-use std::cmp::Ordering;\n-use std::fmt;\n-use std::ops::Neg;\n+use core::cmp::Ordering;\n+use core::fmt;\n+use core::ops::Neg;\n \n #[must_use]\n #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]"}]}