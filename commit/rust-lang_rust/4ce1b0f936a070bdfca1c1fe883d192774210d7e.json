{"sha": "4ce1b0f936a070bdfca1c1fe883d192774210d7e", "node_id": "C_kwDOAAsO6NoAKDRjZTFiMGY5MzZhMDcwYmRmY2ExYzFmZTg4M2QxOTI3NzQyMTBkN2U", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-07-27T15:55:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T15:55:03Z"}, "message": "Rollup merge of #99358 - compiler-errors:issue-99325, r=oli-obk\n\nAllow `ValTree::try_to_raw_bytes` on `u8` array\n\nFixes #99325\n\ncc `@b-naber` I think who touched this last in 705d818bd52a6324d5e7693cc4306457395eebc8", "tree": {"sha": "b1173c776e5662aea2d975515a2f31b52b8f3dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1173c776e5662aea2d975515a2f31b52b8f3dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce1b0f936a070bdfca1c1fe883d192774210d7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4V/XCRBK7hj4Ov3rIwAAlIQIAJuNwpAVPH4Yie9fdSd37JHr\n7OMZrlOflFOwfSgmHSA8HJQdQbThL4NF7F6O0w7tWyZFYn6LRgOD9WHBXEtCiSWL\nNuGaBukpzLLQVdUxLZP+hScqgTWr3XC3CGc9mDytER6QA5z0wFVyFwkN9GqSZykF\nYOcF5AA76IVd+sduMZc91QgG2LKQkdraJV5EedNZpA3VGseAM8uNWkBTB5LVIxDT\nYlqarNri7HgsUEs6jcSB/3SJ7D55JRQ/tTTrVz76YDsU28mx5C8s7RL++llsMtKz\n87wFqFFC/fFJ8z5MtQGSUWAmfmAfSYNRi+S203kAo0BhqqJoNEAkLpbl9fkHEOw=\n=iumk\n-----END PGP SIGNATURE-----\n", "payload": "tree b1173c776e5662aea2d975515a2f31b52b8f3dac\nparent ef81fca760067e887e1dc69413f004327d23bb7e\nparent 91e91d83be184ba743053350a6b837dcda38d1cb\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1658937303 +0200\ncommitter GitHub <noreply@github.com> 1658937303 +0200\n\nRollup merge of #99358 - compiler-errors:issue-99325, r=oli-obk\n\nAllow `ValTree::try_to_raw_bytes` on `u8` array\n\nFixes #99325\n\ncc `@b-naber` I think who touched this last in 705d818bd52a6324d5e7693cc4306457395eebc8\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce1b0f936a070bdfca1c1fe883d192774210d7e", "html_url": "https://github.com/rust-lang/rust/commit/4ce1b0f936a070bdfca1c1fe883d192774210d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce1b0f936a070bdfca1c1fe883d192774210d7e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef81fca760067e887e1dc69413f004327d23bb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef81fca760067e887e1dc69413f004327d23bb7e", "html_url": "https://github.com/rust-lang/rust/commit/ef81fca760067e887e1dc69413f004327d23bb7e"}, {"sha": "91e91d83be184ba743053350a6b837dcda38d1cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e91d83be184ba743053350a6b837dcda38d1cb", "html_url": "https://github.com/rust-lang/rust/commit/91e91d83be184ba743053350a6b837dcda38d1cb"}], "stats": {"total": 343, "additions": 322, "deletions": 21}, "files": [{"sha": "93707bb18ceec4c4f6a0341edea391c07d2f2f68", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4ce1b0f936a070bdfca1c1fe883d192774210d7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce1b0f936a070bdfca1c1fe883d192774210d7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=4ce1b0f936a070bdfca1c1fe883d192774210d7e", "patch": "@@ -80,31 +80,25 @@ impl<'tcx> ValTree<'tcx> {\n     }\n \n     /// Get the values inside the ValTree as a slice of bytes. This only works for\n-    /// constants with types &str and &[u8].\n+    /// constants with types &str, &[u8], or [u8; _].\n     pub fn try_to_raw_bytes(self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<&'tcx [u8]> {\n         match ty.kind() {\n             ty::Ref(_, inner_ty, _) => match inner_ty.kind() {\n-                ty::Str => {\n-                    let leafs = self\n-                        .unwrap_branch()\n-                        .into_iter()\n-                        .map(|v| v.unwrap_leaf().try_to_u8().unwrap());\n-\n-                    return Some(tcx.arena.alloc_from_iter(leafs));\n-                }\n-                ty::Slice(slice_ty) if *slice_ty == tcx.types.u8 => {\n-                    let leafs = self\n-                        .unwrap_branch()\n-                        .into_iter()\n-                        .map(|v| v.unwrap_leaf().try_to_u8().unwrap());\n-\n-                    return Some(tcx.arena.alloc_from_iter(leafs));\n-                }\n-                _ => {}\n+                // `&str` can be interpreted as raw bytes\n+                ty::Str => {}\n+                // `&[u8]` can be interpreted as raw bytes\n+                ty::Slice(slice_ty) if *slice_ty == tcx.types.u8 => {}\n+                // other `&_` can't be interpreted as raw bytes\n+                _ => return None,\n             },\n-            _ => {}\n+            // `[u8; N]` can be interpreted as raw bytes\n+            ty::Array(array_ty, _) if *array_ty == tcx.types.u8 => {}\n+            // Otherwise, type cannot be interpreted as raw bytes\n+            _ => return None,\n         }\n \n-        None\n+        Some(tcx.arena.alloc_from_iter(\n+            self.unwrap_branch().into_iter().map(|v| v.unwrap_leaf().try_to_u8().unwrap()),\n+        ))\n     }\n }"}, {"sha": "7f2e81a71a93d16cd773eeb221339fa8eeca15df", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce1b0f936a070bdfca1c1fe883d192774210d7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce1b0f936a070bdfca1c1fe883d192774210d7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4ce1b0f936a070bdfca1c1fe883d192774210d7e", "patch": "@@ -1452,7 +1452,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             },\n             (ty::ValTree::Branch(_), ty::Array(t, _)) if *t == u8_type => {\n-                let bytes = valtree.try_to_raw_bytes(self.tcx(), *t).unwrap_or_else(|| {\n+                let bytes = valtree.try_to_raw_bytes(self.tcx(), ty).unwrap_or_else(|| {\n                     bug!(\"expected to convert valtree to raw bytes for type {:?}\", t)\n                 });\n                 p!(\"*\");"}, {"sha": "b79946ea8b56c96d8d1c4305643a5685fcfbd19d", "filename": "src/test/mir-opt/issue-99325.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ce1b0f936a070bdfca1c1fe883d192774210d7e/src%2Ftest%2Fmir-opt%2Fissue-99325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce1b0f936a070bdfca1c1fe883d192774210d7e/src%2Ftest%2Fmir-opt%2Fissue-99325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-99325.rs?ref=4ce1b0f936a070bdfca1c1fe883d192774210d7e", "patch": "@@ -0,0 +1,12 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+pub fn function_with_bytes<const BYTES: &'static [u8; 4]>() -> &'static [u8] {\n+    BYTES\n+}\n+\n+// EMIT_MIR issue_99325.main.mir_map.0.mir\n+pub fn main() {\n+    assert_eq!(function_with_bytes::<b\"AAAA\">(), &[0x41, 0x41, 0x41, 0x41]);\n+    assert_eq!(function_with_bytes::<{ &[0x41, 0x41, 0x41, 0x41] }>(), b\"AAAA\");\n+}"}, {"sha": "175f244aa5dc9344f5588867fb017042cf3eb7a8", "filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/4ce1b0f936a070bdfca1c1fe883d192774210d7e/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ce1b0f936a070bdfca1c1fe883d192774210d7e/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir?ref=4ce1b0f936a070bdfca1c1fe883d192774210d7e", "patch": "@@ -0,0 +1,295 @@\n+// MIR for `main` 0 mir_map\n+\n+| User Type Annotations\n+| 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [], promoted: None }) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+|\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-99325.rs:9:15: 9:15\n+    let _1: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _2: (&&[u8], &&[u8; 4]);     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _3: &&[u8];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _4: &[u8];                       // in scope 0 at $DIR/issue-99325.rs:10:16: 10:48\n+    let mut _5: &&[u8; 4];               // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _6: &[u8; 4];                    // in scope 0 at $DIR/issue-99325.rs:10:50: 10:75\n+    let _7: [u8; 4];                     // in scope 0 at $DIR/issue-99325.rs:10:51: 10:75\n+    let _8: &&[u8];                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _9: &&[u8; 4];                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _12: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _13: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _14: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _16: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _17: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _18: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _19: &&[u8];                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _20: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _21: &&[u8; 4];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _22: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _23: ();                         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _24: (&&[u8], &&[u8; 4]);    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _25: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _26: &[u8];                      // in scope 0 at $DIR/issue-99325.rs:11:16: 11:70\n+    let mut _27: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _28: &[u8; 4];                   // in scope 0 at $DIR/issue-99325.rs:11:72: 11:79\n+    let _29: &&[u8];                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _30: &&[u8; 4];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _31: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _32: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _33: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _34: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _35: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _37: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _38: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _39: &&[u8];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _40: &&[u8];                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _41: &&[u8; 4];              // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _42: &&[u8; 4];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _43: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    scope 1 {\n+        debug left_val => _8;            // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        debug right_val => _9;           // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        let _15: core::panicking::AssertKind; // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        scope 2 {\n+            debug kind => _15;           // in scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        }\n+    }\n+    scope 3 {\n+        debug left_val => _29;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        debug right_val => _30;          // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        let _36: core::panicking::AssertKind; // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        scope 4 {\n+            debug kind => _36;           // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-99325.rs:10:16: 10:48\n+        _4 = function_with_bytes::<&*b\"AAAA\">() -> [return: bb1, unwind: bb19]; // scope 0 at $DIR/issue-99325.rs:10:16: 10:48\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-99325.rs:10:16: 10:46\n+                                         // + user_ty: UserType(0)\n+                                         // + literal: Const { ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        _3 = &_4;                        // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 0 at $DIR/issue-99325.rs:10:50: 10:75\n+        StorageLive(_7);                 // scope 0 at $DIR/issue-99325.rs:10:51: 10:75\n+        _7 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8]; // scope 0 at $DIR/issue-99325.rs:10:51: 10:75\n+        _6 = &_7;                        // scope 0 at $DIR/issue-99325.rs:10:50: 10:75\n+        _5 = &_6;                        // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _2 = (move _3, move _5);         // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        FakeRead(ForMatchedPlace(None), _2); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _8 = (_2.0: &&[u8]);             // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_9);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _9 = (_2.1: &&[u8; 4]);          // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_10);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_11);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_12);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _12 = &(*_8);                    // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _13 = &(*_9);                    // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _11 = <&[u8] as PartialEq<&[u8; 4]>>::eq(move _12, move _13) -> [return: bb2, unwind: bb19]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // + literal: Const { ty: for<'r, 's> fn(&'r &[u8], &'s &[u8; 4]) -> bool {<&[u8] as PartialEq<&[u8; 4]>>::eq}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_13);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_12);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _10 = Not(move _11);             // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_11);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _10) -> [false: bb4, otherwise: bb3]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageLive(_15);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _15 = core::panicking::AssertKind::Eq; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        FakeRead(ForLet(None), _15);     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_16);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_17);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _17 = move _15;                  // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_18);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_19);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _19 = &(*_8);                    // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _18 = &(*_19);                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_20);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_21);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _21 = &(*_9);                    // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _20 = &(*_21);                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_22);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _22 = Option::<Arguments>::None; // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _16 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _17, move _18, move _20, move _22) -> bb19; // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r &[u8], &'s &[u8; 4], Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 4]>}, val: Value(<ZST>) }\n+    }\n+\n+    bb4: {\n+        goto -> bb7;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        StorageDead(_22);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_20);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_18);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_17);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_21);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_19);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_16);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_15);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        unreachable;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        goto -> bb8;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _1 = const ();                   // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        goto -> bb8;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        StorageDead(_10);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        goto -> bb9;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        StorageDead(_7);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_6);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_1);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_23);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_24);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_25);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_26);                // scope 0 at $DIR/issue-99325.rs:11:16: 11:70\n+        _26 = function_with_bytes::<&*b\"AAAA\">() -> [return: bb10, unwind: bb19]; // scope 0 at $DIR/issue-99325.rs:11:16: 11:70\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-99325.rs:11:16: 11:68\n+                                         // + user_ty: UserType(1)\n+                                         // + literal: Const { ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}, val: Value(<ZST>) }\n+    }\n+\n+    bb10: {\n+        _25 = &_26;                      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_27);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_28);                // scope 0 at $DIR/issue-99325.rs:11:72: 11:79\n+        _28 = const b\"AAAA\";             // scope 0 at $DIR/issue-99325.rs:11:72: 11:79\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-99325.rs:11:72: 11:79\n+                                         // + literal: Const { ty: &[u8; 4], val: Value(Scalar(alloc4)) }\n+        _27 = &_28;                      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _24 = (move _25, move _27);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_27);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_25);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        FakeRead(ForMatchedPlace(None), _24); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_29);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _29 = (_24.0: &&[u8]);           // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_30);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _30 = (_24.1: &&[u8; 4]);        // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _33 = &(*_29);                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _34 = &(*_30);                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _32 = <&[u8] as PartialEq<&[u8; 4]>>::eq(move _33, move _34) -> [return: bb11, unwind: bb19]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // + literal: Const { ty: for<'r, 's> fn(&'r &[u8], &'s &[u8; 4]) -> bool {<&[u8] as PartialEq<&[u8; 4]>>::eq}, val: Value(<ZST>) }\n+    }\n+\n+    bb11: {\n+        StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _31 = Not(move _32);             // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _31) -> [false: bb13, otherwise: bb12]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb12: {\n+        StorageLive(_36);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _36 = core::panicking::AssertKind::Eq; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        FakeRead(ForLet(None), _36);     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_37);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_38);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _38 = move _36;                  // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_39);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_40);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _40 = &(*_29);                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _39 = &(*_40);                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_41);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_42);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _42 = &(*_30);                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _41 = &(*_42);                   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_43);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _43 = Option::<Arguments>::None; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _37 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _38, move _39, move _41, move _43) -> bb19; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r &[u8], &'s &[u8; 4], Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 4]>}, val: Value(<ZST>) }\n+    }\n+\n+    bb13: {\n+        goto -> bb16;                    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb14: {\n+        StorageDead(_43);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_41);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_39);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_38);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_42);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_40);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_37);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_36);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        unreachable;                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb15: {\n+        goto -> bb17;                    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb16: {\n+        _23 = const ();                  // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        goto -> bb17;                    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb17: {\n+        StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_30);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_29);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        goto -> bb18;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb18: {\n+        StorageDead(_28);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_26);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_24);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_23);                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _0 = const ();                   // scope 0 at $DIR/issue-99325.rs:9:15: 12:2\n+        return;                          // scope 0 at $DIR/issue-99325.rs:12:2: 12:2\n+    }\n+\n+    bb19 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-99325.rs:9:1: 12:2\n+    }\n+}\n+\n+alloc4 (size: 4, align: 1) {\n+    41 41 41 41                                     \u2502 AAAA\n+}"}]}