{"sha": "5cf55165fae5c8538db5c00e252ad9ba42aaf246", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjU1MTY1ZmFlNWM4NTM4ZGI1YzAwZTI1MmFkOWJhNDJhYWYyNDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-01T14:25:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-01T14:25:21Z"}, "message": "handle overflow/underflow in index offsets", "tree": {"sha": "65af15dd4e57cb5a47d2fca7810b3307bd049971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65af15dd4e57cb5a47d2fca7810b3307bd049971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf55165fae5c8538db5c00e252ad9ba42aaf246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf55165fae5c8538db5c00e252ad9ba42aaf246", "html_url": "https://github.com/rust-lang/rust/commit/5cf55165fae5c8538db5c00e252ad9ba42aaf246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf55165fae5c8538db5c00e252ad9ba42aaf246/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85919a0b5f474783cb56cd433292865a40539665", "url": "https://api.github.com/repos/rust-lang/rust/commits/85919a0b5f474783cb56cd433292865a40539665", "html_url": "https://github.com/rust-lang/rust/commit/85919a0b5f474783cb56cd433292865a40539665"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "677c0ecc33d7f5baa8ee63da15d3e2905117de9f", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5cf55165fae5c8538db5c00e252ad9ba42aaf246/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf55165fae5c8538db5c00e252ad9ba42aaf246/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=5cf55165fae5c8538db5c00e252ad9ba42aaf246", "patch": "@@ -330,10 +330,12 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n                 // find something. When we find something the `finger` will be set\n                 // to a UTF8 boundary.\n                 self.finger += index + 1;\n-                let found_char = self.finger - self.utf8_size;\n-                if let Some(slice) = self.haystack.as_bytes().get(found_char..self.finger) {\n-                    if slice == &self.utf8_encoded[0..self.utf8_size] {\n-                        return Some((found_char, self.finger));\n+                if self.finger >= self.utf8_size {\n+                    let found_char = self.finger - self.utf8_size;\n+                    if let Some(slice) = self.haystack.as_bytes().get(found_char..self.finger) {\n+                        if slice == &self.utf8_encoded[0..self.utf8_size] {\n+                            return Some((found_char, self.finger));\n+                        }\n                     }\n                 }\n             } else {\n@@ -386,12 +388,15 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n                 // char in the paradigm of reverse iteration). For\n                 // multibyte chars we need to skip down by the number of more\n                 // bytes they have than ASCII\n-                let found_char = index - (self.utf8_size - 1);\n-                if let Some(slice) = haystack.get(found_char..(found_char + self.utf8_size)) {\n-                    if slice == &self.utf8_encoded[0..self.utf8_size] {\n-                        // move finger to before the character found (i.e. at its start index)\n-                        self.finger_back = found_char;\n-                        return Some((self.finger_back, self.finger_back + self.utf8_size));\n+                let shift = self.utf8_size - 1;\n+                if index >= shift {\n+                    let found_char = index - shift;\n+                    if let Some(slice) = haystack.get(found_char..(found_char + self.utf8_size)) {\n+                        if slice == &self.utf8_encoded[0..self.utf8_size] {\n+                            // move finger to before the character found (i.e. at its start index)\n+                            self.finger_back = found_char;\n+                            return Some((self.finger_back, self.finger_back + self.utf8_size));\n+                        }\n                     }\n                 }\n                 // We can't use finger_back = index - size + 1 here. If we found the last char"}]}