{"sha": "63210ecddb74fb601a17314c6866685d74fa89dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMjEwZWNkZGI3NGZiNjAxYTE3MzE0YzY4NjY2ODVkNzRmYTg5ZGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-16T13:57:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-16T14:19:19Z"}, "message": "correct preservation of explicit borrows like \"let x = &*y;\"", "tree": {"sha": "b7870b2cedec5e50cef6b94b90fd01b599187290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7870b2cedec5e50cef6b94b90fd01b599187290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63210ecddb74fb601a17314c6866685d74fa89dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63210ecddb74fb601a17314c6866685d74fa89dc", "html_url": "https://github.com/rust-lang/rust/commit/63210ecddb74fb601a17314c6866685d74fa89dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63210ecddb74fb601a17314c6866685d74fa89dc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8069d817d5be3dc577dce6ab59ebfd89d19843", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8069d817d5be3dc577dce6ab59ebfd89d19843", "html_url": "https://github.com/rust-lang/rust/commit/5c8069d817d5be3dc577dce6ab59ebfd89d19843"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "06850c8c7b32bdd444c1a61e37a22d526268f877", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63210ecddb74fb601a17314c6866685d74fa89dc/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63210ecddb74fb601a17314c6866685d74fa89dc/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=63210ecddb74fb601a17314c6866685d74fa89dc", "patch": "@@ -1481,17 +1481,17 @@ impl preserve_methods for preserve_ctxt {\n             // Unsafe pointers are the user's problem\n             ok(())\n           }\n-          cat_deref(_, derefs, gc_ptr) {\n+          cat_deref(base, derefs, gc_ptr) {\n             // GC'd pointers of type @MT: always stable because we can inc\n             // the ref count or keep a GC root as necessary.  We need to\n             // insert this id into the root_map, however.\n             alt self.opt_scope_id {\n               some(scope_id) {\n                 #debug[\"Inserting root map entry for %s: \\\n                         node %d:%u -> scope %d\",\n-                       self.bccx.cmt_to_repr(cmt), cmt.id,\n+                       self.bccx.cmt_to_repr(cmt), base.id,\n                        derefs, scope_id];\n-                let rk = {id: cmt.id, derefs: derefs};\n+                let rk = {id: base.id, derefs: derefs};\n                 self.bccx.root_map.insert(rk, scope_id);\n                 ok(())\n               }"}, {"sha": "c37d3c1d21917e5116ded812a574878c3f5378ed", "filename": "src/test/compile-fail/regions-appearance-constraint.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/63210ecddb74fb601a17314c6866685d74fa89dc/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63210ecddb74fb601a17314c6866685d74fa89dc/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-appearance-constraint.rs?ref=63210ecddb74fb601a17314c6866685d74fa89dc", "patch": "@@ -0,0 +1,35 @@\n+/*\n+\n+Tests that borrowing always produces a pointer confined to the\n+innermost scope.  In this case, the variable `a` gets inferred\n+to the lifetime of the `if` statement because it is assigned\n+a borrow of `y` which takes place within the `if`.\n+\n+Note: If this constraint were lifted (as I contemplated at one point),\n+it complicates the preservation mechanics in trans, though not\n+irreperably.  I'm partially including this test so that if these\n+semantics do change we'll remember to test this scenario.\n+\n+*/\n+\n+fn testfn(cond: bool) {\n+    let mut x = @3;\n+    let mut y = @4;\n+\n+    let mut a = &*x;\n+    //!^ ERROR reference is not valid outside of its lifetime\n+\n+    let mut exp = 3;\n+    if cond {\n+        a = &*y;\n+\n+        exp = 4;\n+    }\n+\n+    x = @5;\n+    y = @6;\n+    assert *a == exp;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "13b7fa77c5e5cd4732d713cd0a3d44254ee70538", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63210ecddb74fb601a17314c6866685d74fa89dc/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63210ecddb74fb601a17314c6866685d74fa89dc/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=63210ecddb74fb601a17314c6866685d74fa89dc", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags:--borrowck=err\n+// exec-env:RUST_POISON_ON_FREE=1\n+\n+fn testfn(cond: bool) {\n+    let mut x = @3;\n+    let mut y = @4;\n+\n+    // borrow x and y\n+    let mut r_x = &*x;\n+    let mut r_y = &*y;\n+    let mut r = r_x, exp = 3;\n+\n+    if cond {\n+        r = r_y;\n+        exp = 4;\n+    }\n+\n+    #debug[\"*r = %d, exp = %d\", *r, exp];\n+    assert *r == exp;\n+\n+    x = @5;\n+    y = @6;\n+\n+    #debug[\"*r = %d, exp = %d\", *r, exp];\n+    assert *r == exp;\n+}\n+\n+fn main() {\n+    testfn(true);\n+    testfn(false);\n+}\n\\ No newline at end of file"}]}