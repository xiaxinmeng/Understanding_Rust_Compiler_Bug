{"sha": "75a13868dab681dfc31fbe31d76fff413bfe7c9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTEzODY4ZGFiNjgxZGZjMzFmYmUzMWQ3NmZmZjQxM2JmZTdjOWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-05T02:29:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-05T02:37:13Z"}, "message": "Block format control flow discriminant expressions and binops\n\nFixes #1450\n\nAdds control_style option", "tree": {"sha": "df52949000a27dfb3cce0362d26ccb5a8d3809a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df52949000a27dfb3cce0362d26ccb5a8d3809a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a13868dab681dfc31fbe31d76fff413bfe7c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a13868dab681dfc31fbe31d76fff413bfe7c9e", "html_url": "https://github.com/rust-lang/rust/commit/75a13868dab681dfc31fbe31d76fff413bfe7c9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a13868dab681dfc31fbe31d76fff413bfe7c9e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21cbb8d6e4f0442568968f4c8b83288e1be9b23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21cbb8d6e4f0442568968f4c8b83288e1be9b23d", "html_url": "https://github.com/rust-lang/rust/commit/21cbb8d6e4f0442568968f4c8b83288e1be9b23d"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "0e622bdd9434fd40a1a3d7a1f3e283a99102639b", "filename": "rfc-rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75a13868dab681dfc31fbe31d76fff413bfe7c9e/rfc-rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/75a13868dab681dfc31fbe31d76fff413bfe7c9e/rfc-rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc-rustfmt.toml?ref=75a13868dab681dfc31fbe31d76fff413bfe7c9e", "patch": "@@ -1,5 +1,6 @@\n fn_args_layout = \"Block\"\n array_layout = \"Block\"\n+control_style = \"Rfc\"\n where_style = \"Rfc\"\n generics_indent = \"Block\"\n fn_call_style = \"Block\""}, {"sha": "805581abb4ef34087544142fb6ca03a730883715", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75a13868dab681dfc31fbe31d76fff413bfe7c9e/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a13868dab681dfc31fbe31d76fff413bfe7c9e/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=75a13868dab681dfc31fbe31d76fff413bfe7c9e", "patch": "@@ -338,6 +338,7 @@ create_config! {\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n+    control_style: Style, Style::Default, \"Indent style for control flow statements\";\n     control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine,\n         \"Brace style for control flow constructs\";\n     impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";"}, {"sha": "bb4caaa7b935485b8c1b636e6997abde5b30c282", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75a13868dab681dfc31fbe31d76fff413bfe7c9e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a13868dab681dfc31fbe31d76fff413bfe7c9e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=75a13868dab681dfc31fbe31d76fff413bfe7c9e", "patch": "@@ -26,7 +26,7 @@ use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_w\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n             colon_spaces};\n use visitor::FmtVisitor;\n-use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle};\n+use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n use types::{rewrite_path, PathContext};\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -314,8 +314,12 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n                                   .max_width\n                                   .checked_sub(shape.used_width() + prefix.len() +\n                                                infix.len()));\n-    let rhs_shape = try_opt!(shape.sub_width(suffix.len() + prefix.len()))\n-        .visual_indent(prefix.len());\n+    let rhs_shape = match context.config.control_style {\n+        Style::Default => {\n+            try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n+        }\n+        Style::Rfc => try_opt!(shape.block_left(context.config.tab_spaces)),\n+    };\n \n     let rhs_result = try_opt!(rhs.rewrite(context, rhs_shape));\n     let lhs_result = try_opt!(lhs.rewrite(context,\n@@ -884,7 +888,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n \n         let pat_expr_string = match self.cond {\n             Some(cond) => {\n-                let mut cond_shape = try_opt!(constr_shape.shrink_left(add_offset));\n+                let mut cond_shape = match context.config.control_style {\n+                    Style::Default => try_opt!(constr_shape.shrink_left(add_offset)),\n+                    Style::Rfc => constr_shape,\n+                };\n                 if context.config.control_brace_style != ControlBraceStyle::AlwaysNextLine {\n                     // 2 = \" {\".len()\n                     cond_shape = try_opt!(cond_shape.sub_width(2));\n@@ -900,6 +907,9 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             None => String::new(),\n         };\n \n+        let force_newline_brace = context.config.control_style == Style::Rfc &&\n+                                  pat_expr_string.contains('\\n');\n+\n         // Try to format if-else on single line.\n         if self.allow_single_line && context.config.single_line_if_else_max_width > 0 {\n             let trial = self.rewrite_single_line(&pat_expr_string, context, shape.width);\n@@ -957,8 +967,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                             &shape.indent.block_only().to_string(context.config);\n         let block_sep = if self.cond.is_none() && between_kwd_cond_comment.is_some() {\n             \"\"\n-        } else if context.config.control_brace_style ==\n-                  ControlBraceStyle::AlwaysNextLine {\n+        } else if context.config.control_brace_style == ControlBraceStyle::AlwaysNextLine ||\n+                  force_newline_brace {\n             alt_block_sep.as_str()\n         } else {\n             \" \"\n@@ -1494,7 +1504,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n                     connector: &str,\n                     shape: Shape)\n                     -> Option<String> {\n-    debug!(\"rewrite_pat_expr {:?} {:?}\", shape, pat);\n+    debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, pat, expr);\n     let mut result = match pat {\n         Some(pat) => {\n             let matcher = if matcher.is_empty() {"}, {"sha": "a3f1a93ca48886a02c1f682d4c74cae78f716f04", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75a13868dab681dfc31fbe31d76fff413bfe7c9e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a13868dab681dfc31fbe31d76fff413bfe7c9e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=75a13868dab681dfc31fbe31d76fff413bfe7c9e", "patch": "@@ -287,6 +287,14 @@ impl Shape {\n         }\n     }\n \n+    pub fn block_left(&self, width: usize) -> Option<Shape> {\n+        let block_shape = self.block_indent(width);\n+        Some(Shape {\n+                 width: try_opt!(block_shape.width.checked_sub(width)),\n+                 ..block_shape\n+             })\n+    }\n+\n     pub fn add_offset(&self, extra_width: usize) -> Shape {\n         Shape {\n             width: self.width,"}, {"sha": "ad959f8ee0172561b3cf078fbddf6cccb5e6fbcf", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75a13868dab681dfc31fbe31d76fff413bfe7c9e/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a13868dab681dfc31fbe31d76fff413bfe7c9e/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=75a13868dab681dfc31fbe31d76fff413bfe7c9e", "patch": "@@ -1,5 +1,6 @@\n // rustfmt-array_layout: Block\n // rustfmt-fn_call_style: Block\n+// rustfmt-control_style: Rfc\n // Test expressions with block formatting.\n \n fn arrays() {\n@@ -120,3 +121,25 @@ fn macros() {\n         Some(p) => baz!(one_item_macro_as_expression_which_is_also_loooooooooooooooong),\n     };\n }\n+\n+fn issue_1450() {\n+    if selfstate\n+        .compare_exchandsfasdsdfgsdgsdfgsdfgsdfgsdfgsdfgfsfdsage_weak(\n+            STATE_PARKED,\n+            STATE_UNPARKED,\n+            Release,\n+            Relaxed,\n+            Release,\n+            Relaxed,\n+        )\n+        .is_ok() {\n+        return;\n+    }\n+}\n+\n+fn foo() {\n+    if real_total <= limit && !pre_line_comments &&\n+            !items.into_iter().any(|item| item.as_ref().is_multiline()) {\n+         DefinitiveListTactic::Horizontal\n+    }\n+}"}, {"sha": "349f2a00c8484bf51db4bee4f95aa6e1bab93226", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/75a13868dab681dfc31fbe31d76fff413bfe7c9e/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a13868dab681dfc31fbe31d76fff413bfe7c9e/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=75a13868dab681dfc31fbe31d76fff413bfe7c9e", "patch": "@@ -1,5 +1,6 @@\n // rustfmt-array_layout: Block\n // rustfmt-fn_call_style: Block\n+// rustfmt-control_style: Rfc\n // Test expressions with block formatting.\n \n fn arrays() {\n@@ -188,3 +189,27 @@ fn macros() {\n         Some(p) => baz!(one_item_macro_as_expression_which_is_also_loooooooooooooooong),\n     };\n }\n+\n+fn issue_1450() {\n+    if selfstate\n+        .compare_exchandsfasdsdfgsdgsdfgsdfgsdfgsdfgsdfgfsfdsage_weak(\n+            STATE_PARKED,\n+            STATE_UNPARKED,\n+            Release,\n+            Relaxed,\n+            Release,\n+            Relaxed,\n+        )\n+        .is_ok()\n+    {\n+        return;\n+    }\n+}\n+\n+fn foo() {\n+    if real_total <= limit && !pre_line_comments &&\n+        !items.into_iter().any(|item| item.as_ref().is_multiline())\n+    {\n+        DefinitiveListTactic::Horizontal\n+    }\n+}"}]}