{"sha": "f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Mzc2MmI3OWNmMjNiZmE5MWQ3N2Q2ZjA0ZWMyYjg3YjIxNTliMDc=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-02T17:03:16Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-05T08:14:20Z"}, "message": "Skip rustfmt as it is wanted for this test", "tree": {"sha": "b93a61daa838876ef247850a129a100693ece132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93a61daa838876ef247850a129a100693ece132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "html_url": "https://github.com/rust-lang/rust/commit/f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce98468158318a47f6bab3707d348e116451ad39", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce98468158318a47f6bab3707d348e116451ad39", "html_url": "https://github.com/rust-lang/rust/commit/ce98468158318a47f6bab3707d348e116451ad39"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "35a1310d68b849b6cb2dc062480d1be17295963f", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "patch": "@@ -1,11 +1,10 @@\n use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, UnOp, Mutability};\n+use rustc_ast::ast::{Expr, ExprKind, Mutability, UnOp};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::BytePos;\n-// use rustc_span::source_map::{BytePos, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n@@ -53,31 +52,29 @@ impl EarlyLintPass for DerefAddrOf {\n                         // Remove leading whitespace from the given span\n                         // e.g: ` $visitor` turns into `$visitor`\n                         let trim_leading_whitespaces = |span| {\n-                            if let Some(start_no_whitespace) = snippet_opt(cx, span).and_then(|snip| {\n+                            snippet_opt(cx, span).and_then(|snip| {\n+                                #[allow(clippy::cast_possible_truncation)]\n                                 snip.find(|c: char| !c.is_whitespace()).map(|pos| {\n                                     span.lo() + BytePos(pos as u32)\n                                 })\n-                            }) {\n-                                e.span.with_lo(start_no_whitespace)\n-                            } else {\n-                                span\n-                            }\n+                            }).map_or(span, |start_no_whitespace| e.span.with_lo(start_no_whitespace))\n                         };\n \n                         let rpos = if *mutability == Mutability::Mut {\n                             macro_source.rfind(\"mut\").expect(\"already checked this is a mutable reference\") + \"mut\".len()\n                         } else {\n-                            macro_source.rfind(\"&\").expect(\"already checked this is a reference\") + \"&\".len()\n+                            macro_source.rfind('&').expect(\"already checked this is a reference\") + \"&\".len()\n                         };\n+                        #[allow(clippy::cast_possible_truncation)]\n                         let span_after_ref = e.span.with_lo(BytePos(e.span.lo().0 + rpos as u32));\n                         let span = trim_leading_whitespaces(span_after_ref);\n-                        snippet_with_applicability(cx, span, \"_\", &mut applicability).to_string()\n+                        snippet_with_applicability(cx, span, \"_\", &mut applicability)\n                     } else {\n-                        snippet_with_applicability(cx, e.span, \"_\", &mut applicability).to_string()\n+                        snippet_with_applicability(cx, e.span, \"_\", &mut applicability)\n                     }\n                 } else {\n-                    snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability).to_string()\n-                };\n+                    snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability)\n+                }.to_string();\n                 span_lint_and_sugg(\n                     cx,\n                     DEREF_ADDROF,"}, {"sha": "9c1185d30f21d4c4957cd38cf779ebf5de8e0f56", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "patch": "@@ -92,22 +92,16 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n \n                 let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n \n-                // println!(\"\\n\\n{:?}\", in_macro(expr.span));\n-                // println!(\"{:#?}\", snippet(cx, err_arg.span, \"_\"));\n                 let origin_snippet = if err_arg.span.from_expansion() && !in_macro(expr.span) {\n-                    // println!(\"from expansion\");\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n-                    // println!(\"just a snippet\");\n                     snippet(cx, err_arg.span, \"_\")\n                 };\n                 let suggestion = if err_ty == expr_err_ty {\n                     format!(\"return {}{}{}\", prefix, origin_snippet, suffix)\n                 } else {\n                     format!(\"return {}{}.into(){}\", prefix, origin_snippet, suffix)\n                 };\n-                // println!(\"origin_snippet: {:#?}\", origin_snippet);\n-                // println!(\"suggestion: {:#?}\", suggestion);\n \n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "0795900558b695824bdead9959b7201313b13034", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "patch": "@@ -38,6 +38,7 @@ fn main() {\n     let b = *aref;\n }\n \n+#[rustfmt::skip]\n macro_rules! m {\n     ($visitor: expr) => {\n         $visitor"}, {"sha": "60c4318601bc881799a07d7e6e7ffdcbd3886957", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "patch": "@@ -38,6 +38,7 @@ fn main() {\n     let b = **&aref;\n }\n \n+#[rustfmt::skip]\n macro_rules! m {\n     ($visitor: expr) => {\n         *& $visitor"}, {"sha": "e85b30fa56eb884ff719241f62e659a57b3cc7fd", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f83762b79cf23bfa91d77d6f04ec2b87b2159b07/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "patch": "@@ -49,7 +49,7 @@ LL |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:43:9\n+  --> $DIR/deref_addrof.rs:44:9\n    |\n LL |         *& $visitor\n    |         ^^^^^^^^^^^ help: try this: `$visitor`\n@@ -60,7 +60,7 @@ LL |         m!(self)\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: immediately dereferencing a reference\n-  --> $DIR/deref_addrof.rs:50:9\n+  --> $DIR/deref_addrof.rs:51:9\n    |\n LL |         *& mut $visitor\n    |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`"}]}