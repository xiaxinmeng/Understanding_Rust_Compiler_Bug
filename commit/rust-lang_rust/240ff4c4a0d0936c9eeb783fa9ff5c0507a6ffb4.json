{"sha": "240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MGZmNGM0YTBkMDkzNmM5ZWViNzgzZmE5ZmY1YzA1MDdhNmZmYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T20:56:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T20:56:07Z"}, "message": "Auto merge of #85263 - Smittyvb:thir-unsafeck-union-field, r=oli-obk\n\nCheck for union field accesses in THIR unsafeck\n\nsee also #85259, #83129, https://github.com/rust-lang/project-thir-unsafeck/issues/7\n\nr? `@LeSeulArtichaut`", "tree": {"sha": "2083b067e9135136452947364726e86814e5c071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2083b067e9135136452947364726e86814e5c071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "html_url": "https://github.com/rust-lang/rust/commit/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eff244fc7340c14b34299c1ff70ec1a76202332", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eff244fc7340c14b34299c1ff70ec1a76202332", "html_url": "https://github.com/rust-lang/rust/commit/3eff244fc7340c14b34299c1ff70ec1a76202332"}, {"sha": "b86ed4a425b3fa830fa031ed7fe7187728403440", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86ed4a425b3fa830fa031ed7fe7187728403440", "html_url": "https://github.com/rust-lang/rust/commit/b86ed4a425b3fa830fa031ed7fe7187728403440"}], "stats": {"total": 1171, "additions": 1095, "deletions": 76}, "files": [{"sha": "c3af98fae9d5974a9cc1878f8c6fdfbb58ca8d4a", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 127, "deletions": 3, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -26,6 +26,8 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     /// calls to functions with `#[target_feature]` (RFC 2396).\n     body_target_features: &'tcx Vec<Symbol>,\n     is_const: bool,\n+    in_possible_lhs_union_assign: bool,\n+    in_union_destructure: bool,\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n@@ -158,14 +160,115 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_pat(&mut self, pat: &Pat<'tcx>) {\n+        use PatKind::*;\n+\n+        if self.in_union_destructure {\n+            match *pat.kind {\n+                // binding to a variable allows getting stuff out of variable\n+                Binding { .. }\n+                // match is conditional on having this value\n+                | Constant { .. }\n+                | Variant { .. }\n+                | Leaf { .. }\n+                | Deref { .. }\n+                | Range { .. }\n+                | Slice { .. }\n+                | Array { .. } => {\n+                    self.requires_unsafe(pat.span, AccessToUnionField);\n+                    return; // don't walk pattern\n+                }\n+                // wildcard doesn't take anything\n+                Wild |\n+                // these just wrap other patterns\n+                Or { .. } |\n+                AscribeUserType { .. } => {}\n+            }\n+        };\n+\n+        if let ty::Adt(adt_def, _) = pat.ty.kind() {\n+            // check for extracting values from union via destructuring\n+            if adt_def.is_union() {\n+                match *pat.kind {\n+                    // assigning the whole union is okay\n+                    // let x = Union { ... };\n+                    // let y = x; // safe\n+                    Binding { .. } |\n+                    // binding to wildcard is okay since that never reads anything and stops double errors\n+                    // with implict wildcard branches from `if let`s\n+                    Wild |\n+                    // doesn't have any effect on semantics\n+                    AscribeUserType { .. } |\n+                    // creating a union literal\n+                    Constant { .. } => {},\n+                    Leaf { .. } | Or { .. } => {\n+                        // pattern matching with a union and not doing something like v = Union { bar: 5 }\n+                        self.in_union_destructure = true;\n+                        visit::walk_pat(self, pat);\n+                        self.in_union_destructure = false;\n+                        return; // don't walk pattern\n+                    }\n+                    Variant { .. } | Deref { .. } | Range { .. } | Slice { .. } | Array { .. } =>\n+                        unreachable!(\"impossible union destructuring type\"),\n+                }\n+            }\n+        }\n+\n+        visit::walk_pat(self, pat);\n+    }\n+\n     fn visit_expr(&mut self, expr: &Expr<'tcx>) {\n+        // could we be in a the LHS of an assignment of a union?\n+        match expr.kind {\n+            ExprKind::Field { .. }\n+            | ExprKind::VarRef { .. }\n+            | ExprKind::UpvarRef { .. }\n+            | ExprKind::Scope { .. }\n+            | ExprKind::Cast { .. } => {}\n+\n+            ExprKind::AddressOf { .. }\n+            | ExprKind::Adt { .. }\n+            | ExprKind::Array { .. }\n+            | ExprKind::Binary { .. }\n+            | ExprKind::Block { .. }\n+            | ExprKind::Borrow { .. }\n+            | ExprKind::Literal { .. }\n+            | ExprKind::ConstBlock { .. }\n+            | ExprKind::Deref { .. }\n+            | ExprKind::Index { .. }\n+            | ExprKind::NeverToAny { .. }\n+            | ExprKind::PlaceTypeAscription { .. }\n+            | ExprKind::ValueTypeAscription { .. }\n+            | ExprKind::Pointer { .. }\n+            | ExprKind::Repeat { .. }\n+            | ExprKind::StaticRef { .. }\n+            | ExprKind::ThreadLocalRef { .. }\n+            | ExprKind::Tuple { .. }\n+            | ExprKind::Unary { .. }\n+            | ExprKind::Call { .. }\n+            | ExprKind::Assign { .. }\n+            | ExprKind::AssignOp { .. }\n+            | ExprKind::Break { .. }\n+            | ExprKind::Closure { .. }\n+            | ExprKind::Continue { .. }\n+            | ExprKind::Return { .. }\n+            | ExprKind::Yield { .. }\n+            | ExprKind::Loop { .. }\n+            | ExprKind::Match { .. }\n+            | ExprKind::Box { .. }\n+            | ExprKind::If { .. }\n+            | ExprKind::InlineAsm { .. }\n+            | ExprKind::LlvmInlineAsm { .. }\n+            | ExprKind::LogicalOp { .. }\n+            | ExprKind::Use { .. } => self.in_possible_lhs_union_assign = false,\n+        };\n         match expr.kind {\n             ExprKind::Scope { value, lint_level: LintLevel::Explicit(hir_id), region_scope: _ } => {\n                 let prev_id = self.hir_context;\n                 self.hir_context = hir_id;\n                 self.visit_expr(&self.thir[value]);\n                 self.hir_context = prev_id;\n-                return;\n+                return; // don't visit the whole expression\n             }\n             ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if self.thir[fun].ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n@@ -246,9 +349,29 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 // Unsafe blocks can be used in closures, make sure to take it into account\n                 self.safety_context = closure_visitor.safety_context;\n             }\n+            ExprKind::Field { lhs, .. } => {\n+                // assigning to union field is okay for AccessToUnionField\n+                if let ty::Adt(adt_def, _) = &self.thir[lhs].ty.kind() {\n+                    if adt_def.is_union() {\n+                        if self.in_possible_lhs_union_assign {\n+                            // FIXME: trigger AssignToDroppingUnionField unsafety if needed\n+                        } else {\n+                            self.requires_unsafe(expr.span, AccessToUnionField);\n+                        }\n+                    }\n+                }\n+            }\n+            // don't have any special handling for AssignOp since it causes a read *and* write to lhs\n+            ExprKind::Assign { lhs, rhs } => {\n+                // assigning to a union is safe, check here so it doesn't get treated as a read later\n+                self.in_possible_lhs_union_assign = true;\n+                visit::walk_expr(self, &self.thir()[lhs]);\n+                self.in_possible_lhs_union_assign = false;\n+                visit::walk_expr(self, &self.thir()[rhs]);\n+                return; // don't visit the whole expression\n+            }\n             _ => {}\n         }\n-\n         visit::walk_expr(self, expr);\n     }\n }\n@@ -296,7 +419,6 @@ enum UnsafeOpKind {\n     DerefOfRawPointer,\n     #[allow(dead_code)] // FIXME\n     AssignToDroppingUnionField,\n-    #[allow(dead_code)] // FIXME\n     AccessToUnionField,\n     #[allow(dead_code)] // FIXME\n     MutationOfLayoutConstrainedField,\n@@ -417,6 +539,8 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         body_unsafety,\n         body_target_features,\n         is_const,\n+        in_possible_lhs_union_assign: false,\n+        in_union_destructure: false,\n     };\n     visitor.visit_expr(&thir[expr]);\n }"}, {"sha": "ce5d4362c086ccb9f9bee5e94683e520322c21b2", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -153,8 +153,8 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n }\n \n pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stmt<'tcx>) {\n-    match stmt.kind {\n-        StmtKind::Expr { expr, scope: _ } => visitor.visit_expr(&visitor.thir()[expr]),\n+    match &stmt.kind {\n+        StmtKind::Expr { expr, scope: _ } => visitor.visit_expr(&visitor.thir()[*expr]),\n         StmtKind::Let {\n             initializer,\n             remainder_scope: _,\n@@ -163,7 +163,7 @@ pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stm\n             lint_level: _,\n         } => {\n             if let Some(init) = initializer {\n-                visitor.visit_expr(&visitor.thir()[init]);\n+                visitor.visit_expr(&visitor.thir()[*init]);\n             }\n             visitor.visit_pat(pattern);\n         }"}, {"sha": "305f482e8c21def2ee306dbe25e310e2bb2d53ad", "filename": "src/test/ui/issues/issue-47412.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Fissues%2Fissue-47412.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Fissues%2Fissue-47412.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47412.mir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -7,7 +7,7 @@ LL |     match u.void {}\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-47412.rs:21:11\n+  --> $DIR/issue-47412.rs:20:11\n    |\n LL |     match *ptr {}\n    |           ^^^^ dereference of raw pointer"}, {"sha": "df6d6e4222e8201b4054a4229bafb42281217ab1", "filename": "src/test/ui/issues/issue-47412.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Fissues%2Fissue-47412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Fissues%2Fissue-47412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47412.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -12,8 +12,7 @@ fn union_field() {\n     union Union { unit: (), void: Void }\n     let u = Union { unit: () };\n     match u.void {}\n-    //[mir]~^ ERROR access to union field is unsafe\n-    // FIXME(thir-unsafeck): AccessToUnionField unimplemented\n+    //~^ ERROR access to union field is unsafe\n }\n \n fn raw_ptr_deref() {"}, {"sha": "305f482e8c21def2ee306dbe25e310e2bb2d53ad", "filename": "src/test/ui/issues/issue-47412.thir.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Fissues%2Fissue-47412.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Fissues%2Fissue-47412.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47412.thir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,11 +1,19 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/issue-47412.rs:14:11\n+   |\n+LL |     match u.void {}\n+   |           ^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-47412.rs:21:11\n+  --> $DIR/issue-47412.rs:20:11\n    |\n LL |     match *ptr {}\n    |           ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "6a44f27dbb2a48b474d18d9934ee007857d1b603", "filename": "src/test/ui/union/union-align.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-align.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n \n use std::mem::{size_of, size_of_val, align_of, align_of_val};"}, {"sha": "b19eab9f52b5294e248d25740569fe22ce1ca8fe", "filename": "src/test/ui/union/union-backcomp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-backcomp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-backcomp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-backcomp.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(path_statements)]\n #![allow(dead_code)]\n "}, {"sha": "dcc552ac75c89a6294faf19981eb0f00c83dc257", "filename": "src/test/ui/union/union-basic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-basic.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(unused_imports)]\n \n // aux-build:union.rs"}, {"sha": "e785a2ee7335d11a60517373865b746afcd3e5ca", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.mirunsafeck.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:56:13\n    |\n LL |     let a = &mut u.x.0;\n    |             ---------- mutable borrow occurs here (via `u.x.0`)\n@@ -11,7 +11,7 @@ LL |     use_borrow(a);\n    = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0`\n \n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:60:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:63:13\n    |\n LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n@@ -21,7 +21,7 @@ LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:66:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:69:13\n    |\n LL |     let a = &mut (u.x.0).0;\n    |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n@@ -33,7 +33,7 @@ LL |     use_borrow(a);\n    = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0.0`\n \n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:73:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:76:13\n    |\n LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n@@ -43,7 +43,7 @@ LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:79:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:82:13\n    |\n LL |     let a = &mut *u.y;\n    |                   --- mutable borrow occurs here (via `u.y`)", "previous_filename": "src/test/ui/union/union-borrow-move-parent-sibling.stderr"}, {"sha": "e56d87255dbaff1e590d53bd5f2698a65d006051", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(untagged_unions)]\n #![allow(unused)]\n "}, {"sha": "e785a2ee7335d11a60517373865b746afcd3e5ca", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.thirunsafeck.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,60 @@\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0`)\n+  --> $DIR/union-borrow-move-parent-sibling.rs:56:13\n+   |\n+LL |     let a = &mut u.x.0;\n+   |             ---------- mutable borrow occurs here (via `u.x.0`)\n+LL |     let b = &u.y;\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0` -- occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+   |\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0`\n+\n+error[E0382]: use of moved value: `u`\n+  --> $DIR/union-borrow-move-parent-sibling.rs:63:13\n+   |\n+LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+   |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n+LL |     let a = u.x.0;\n+   |             ----- value moved here\n+LL |     let b = u.y;\n+   |             ^^^ value used here after move\n+\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n+  --> $DIR/union-borrow-move-parent-sibling.rs:69:13\n+   |\n+LL |     let a = &mut (u.x.0).0;\n+   |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n+LL |     let b = &u.y;\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0.0` -- occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+   |\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0.0`\n+\n+error[E0382]: use of moved value: `u`\n+  --> $DIR/union-borrow-move-parent-sibling.rs:76:13\n+   |\n+LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+   |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n+LL |     let a = (u.x.0).0;\n+   |             --------- value moved here\n+LL |     let b = u.y;\n+   |             ^^^ value used here after move\n+\n+error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `u.y`)\n+  --> $DIR/union-borrow-move-parent-sibling.rs:82:13\n+   |\n+LL |     let a = &mut *u.y;\n+   |                   --- mutable borrow occurs here (via `u.y`)\n+LL |     let b = &u.x;\n+   |             ^^^^ immutable borrow of `u.x` -- which overlaps with `u.y` -- occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+   |\n+   = note: `u.x` is a field of the union `U`, so it overlaps the field `u.y`\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "32a546cf35f2cd2d33f9ad7cb2513260220dd9ee", "filename": "src/test/ui/union/union-const-codegen.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-const-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-const-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-codegen.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n union U {\n     a: u64,"}, {"sha": "ca48785cd9f5ae2ab062d5790e6d0b06aa652baa", "filename": "src/test/ui/union/union-const-eval-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval-field.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n type Field1 = (i32, u32);\n type Field2 = f32;"}, {"sha": "0b6788b4226ab9d1f9b6fa3829b11c7eca336fe5", "filename": "src/test/ui/union/union-const-eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(const_fn_union)]\n \n union U {"}, {"sha": "ff37e6fd9177aacc09e1b534876d065847f248cb", "filename": "src/test/ui/union/union-deref.mirunsafeck.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-deref.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-deref.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:14:14\n+  --> $DIR/union-deref.rs:17:14\n    |\n LL |     unsafe { u.f.0 = Vec::new() };\n    |              ^^^\n@@ -8,7 +8,7 @@ LL |     unsafe { u.f.0 = Vec::new() };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:16:19\n+  --> $DIR/union-deref.rs:19:19\n    |\n LL |     unsafe { &mut u.f.0 };\n    |                   ^^^\n@@ -17,7 +17,7 @@ LL |     unsafe { &mut u.f.0 };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:18:14\n+  --> $DIR/union-deref.rs:21:14\n    |\n LL |     unsafe { u.f.0.push(0) };\n    |              ^^^\n@@ -26,7 +26,7 @@ LL |     unsafe { u.f.0.push(0) };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:22:14\n+  --> $DIR/union-deref.rs:25:14\n    |\n LL |     unsafe { u.f.0.0 = Vec::new() };\n    |              ^^^^^\n@@ -35,7 +35,7 @@ LL |     unsafe { u.f.0.0 = Vec::new() };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:24:19\n+  --> $DIR/union-deref.rs:27:19\n    |\n LL |     unsafe { &mut u.f.0.0 };\n    |                   ^^^^^\n@@ -44,7 +44,7 @@ LL |     unsafe { &mut u.f.0.0 };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:26:14\n+  --> $DIR/union-deref.rs:29:14\n    |\n LL |     unsafe { u.f.0.0.push(0) };\n    |              ^^^^^", "previous_filename": "src/test/ui/union/union-deref.stderr"}, {"sha": "4bf2ba2f1bfce0bccad8cef5f7780e3361f4c118", "filename": "src/test/ui/union/union-deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n //! Test the part of RFC 2514 that is about not applying `DerefMut` coercions\n //! of union fields.\n #![feature(untagged_unions)]"}, {"sha": "ff37e6fd9177aacc09e1b534876d065847f248cb", "filename": "src/test/ui/union/union-deref.thirunsafeck.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-deref.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-deref.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,56 @@\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:17:14\n+   |\n+LL |     unsafe { u.f.0 = Vec::new() };\n+   |              ^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:19:19\n+   |\n+LL |     unsafe { &mut u.f.0 };\n+   |                   ^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:21:14\n+   |\n+LL |     unsafe { u.f.0.push(0) };\n+   |              ^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:25:14\n+   |\n+LL |     unsafe { u.f.0.0 = Vec::new() };\n+   |              ^^^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:27:19\n+   |\n+LL |     unsafe { &mut u.f.0.0 };\n+   |                   ^^^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:29:14\n+   |\n+LL |     unsafe { u.f.0.0.push(0) };\n+   |              ^^^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "41e828c6d95153acb6e1421d7afd507d1d904623", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:3:10\n+  --> $DIR/union-derive-clone.rs:6:10\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n@@ -12,7 +12,7 @@ LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n-  --> $DIR/union-derive-clone.rs:35:15\n+  --> $DIR/union-derive-clone.rs:38:15\n    |\n LL | union U5<T> {\n    | -----------", "previous_filename": "src/test/ui/union/union-derive-clone.stderr"}, {"sha": "7aa62146e5490b913f31cf795317b041d1c22346", "filename": "src/test/ui/union/union-derive-clone.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n use std::mem::ManuallyDrop;\n \n #[derive(Clone)] //~ ERROR the trait bound `U1: Copy` is not satisfied"}, {"sha": "41e828c6d95153acb6e1421d7afd507d1d904623", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,36 @@\n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   | \n+  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ---- required by this bound in `AssertParamIsCopy`\n+   |\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n+  --> $DIR/union-derive-clone.rs:38:15\n+   |\n+LL | union U5<T> {\n+   | -----------\n+   | |\n+   | method `clone` not found for this\n+   | doesn't satisfy `U5<CloneNoCopy>: Clone`\n+...\n+LL | struct CloneNoCopy;\n+   | ------------------- doesn't satisfy `CloneNoCopy: Copy`\n+...\n+LL |     let w = u.clone();\n+   |               ^^^^^ method cannot be called on `U5<CloneNoCopy>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `CloneNoCopy: Copy`\n+           which is required by `U5<CloneNoCopy>: Clone`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "9477d8470fc6f6dd9ff7edc81818097b14b8c244", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `PartialEqNotEq: Eq` is not satisfied\n-  --> $DIR/union-derive-eq.rs:13:5\n+  --> $DIR/union-derive-eq.rs:16:5\n    |\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`", "previous_filename": "src/test/ui/union/union-derive-eq.stderr"}, {"sha": "b7e7f343f8a28b35ac83db3c48f8a3850960b302", "filename": "src/test/ui/union/union-derive-eq.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #[derive(Eq)] // OK\n union U1 {\n     a: u8,"}, {"sha": "9477d8470fc6f6dd9ff7edc81818097b14b8c244", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `PartialEqNotEq: Eq` is not satisfied\n+  --> $DIR/union-derive-eq.rs:16:5\n+   |\n+LL |     a: PartialEqNotEq,\n+   |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n+   | \n+  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               -- required by this bound in `AssertParamIsEq`\n+   |\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8276bc635fc748799a161d9b3de98681e2fe47c5", "filename": "src/test/ui/union/union-derive-rpass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "9766ae4e435f2fb8822905e00900c92b5c9a7d4a", "filename": "src/test/ui/union/union-drop.thirunsafeck.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,22 @@\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union-drop.rs:27:9\n+   |\n+LL |         unsafe { CHECK += 1; }\n+   |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: `#[warn(unused_unsafe)]` on by default\n+\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union-drop.rs:33:9\n+   |\n+LL |         unsafe { CHECK += 1; }\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union-drop.rs:40:5\n+   |\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "9f1e2947c869927b5e089a37d208b77b4ad2d5b8", "filename": "src/test/ui/union/union-fields-1.mirunsafeck.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,29 +1,29 @@\n error: field is never read: `c`\n-  --> $DIR/union-fields-1.rs:6:5\n+  --> $DIR/union-fields-1.rs:9:5\n    |\n LL |     c: u8,\n    |     ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/union-fields-1.rs:1:9\n+  --> $DIR/union-fields-1.rs:4:9\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n error: field is never read: `a`\n-  --> $DIR/union-fields-1.rs:9:5\n+  --> $DIR/union-fields-1.rs:12:5\n    |\n LL |     a: u8,\n    |     ^^^^^\n \n error: field is never read: `a`\n-  --> $DIR/union-fields-1.rs:13:20\n+  --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n    |                    ^^^^^\n \n error: field is never read: `c`\n-  --> $DIR/union-fields-1.rs:18:5\n+  --> $DIR/union-fields-1.rs:21:5\n    |\n LL |     c: u8,\n    |     ^^^^^", "previous_filename": "src/test/ui/union/union-fields-1.stderr"}, {"sha": "3d3e2355a26f2b10a9280d6c8178fb4057f5b1b5", "filename": "src/test/ui/union/union-fields-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![deny(dead_code)]\n \n union U1 {"}, {"sha": "9f1e2947c869927b5e089a37d208b77b4ad2d5b8", "filename": "src/test/ui/union/union-fields-1.thirunsafeck.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,32 @@\n+error: field is never read: `c`\n+  --> $DIR/union-fields-1.rs:9:5\n+   |\n+LL |     c: u8,\n+   |     ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/union-fields-1.rs:4:9\n+   |\n+LL | #![deny(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: field is never read: `a`\n+  --> $DIR/union-fields-1.rs:12:5\n+   |\n+LL |     a: u8,\n+   |     ^^^^^\n+\n+error: field is never read: `a`\n+  --> $DIR/union-fields-1.rs:16:20\n+   |\n+LL | union NoDropLike { a: u8 }\n+   |                    ^^^^^\n+\n+error: field is never read: `c`\n+  --> $DIR/union-fields-1.rs:21:5\n+   |\n+LL |     c: u8,\n+   |     ^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "867bf75dfdc0b8cc3623240301b9781a103a984f", "filename": "src/test/ui/union/union-fields-2.mirunsafeck.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-2.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-2.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,79 +1,79 @@\n error: union expressions should have exactly one field\n-  --> $DIR/union-fields-2.rs:7:13\n+  --> $DIR/union-fields-2.rs:10:13\n    |\n LL |     let u = U {};\n    |             ^\n \n error: union expressions should have exactly one field\n-  --> $DIR/union-fields-2.rs:9:13\n+  --> $DIR/union-fields-2.rs:12:13\n    |\n LL |     let u = U { a: 0, b: 1 };\n    |             ^\n \n error[E0560]: union `U` has no field named `c`\n-  --> $DIR/union-fields-2.rs:10:29\n+  --> $DIR/union-fields-2.rs:13:29\n    |\n LL |     let u = U { a: 0, b: 1, c: 2 };\n    |                             ^ `U` does not have this field\n    |\n    = note: available fields are: `a`, `b`\n \n error: union expressions should have exactly one field\n-  --> $DIR/union-fields-2.rs:10:13\n+  --> $DIR/union-fields-2.rs:13:13\n    |\n LL |     let u = U { a: 0, b: 1, c: 2 };\n    |             ^\n \n error: union expressions should have exactly one field\n-  --> $DIR/union-fields-2.rs:12:13\n+  --> $DIR/union-fields-2.rs:15:13\n    |\n LL |     let u = U { ..u };\n    |             ^\n \n error[E0436]: functional record update syntax requires a struct\n-  --> $DIR/union-fields-2.rs:12:19\n+  --> $DIR/union-fields-2.rs:15:19\n    |\n LL |     let u = U { ..u };\n    |                   ^\n \n error: union patterns should have exactly one field\n-  --> $DIR/union-fields-2.rs:15:9\n+  --> $DIR/union-fields-2.rs:18:9\n    |\n LL |     let U {} = u;\n    |         ^^^^\n \n error: union patterns should have exactly one field\n-  --> $DIR/union-fields-2.rs:17:9\n+  --> $DIR/union-fields-2.rs:20:9\n    |\n LL |     let U { a, b } = u;\n    |         ^^^^^^^^^^\n \n error: union patterns should have exactly one field\n-  --> $DIR/union-fields-2.rs:18:9\n+  --> $DIR/union-fields-2.rs:21:9\n    |\n LL |     let U { a, b, c } = u;\n    |         ^^^^^^^^^^^^^\n \n error[E0026]: union `U` does not have a field named `c`\n-  --> $DIR/union-fields-2.rs:18:19\n+  --> $DIR/union-fields-2.rs:21:19\n    |\n LL |     let U { a, b, c } = u;\n    |                   ^ union `U` does not have this field\n \n error: union patterns should have exactly one field\n-  --> $DIR/union-fields-2.rs:20:9\n+  --> $DIR/union-fields-2.rs:23:9\n    |\n LL |     let U { .. } = u;\n    |         ^^^^^^^^\n \n error: `..` cannot be used in union patterns\n-  --> $DIR/union-fields-2.rs:20:9\n+  --> $DIR/union-fields-2.rs:23:9\n    |\n LL |     let U { .. } = u;\n    |         ^^^^^^^^\n \n error: `..` cannot be used in union patterns\n-  --> $DIR/union-fields-2.rs:22:9\n+  --> $DIR/union-fields-2.rs:25:9\n    |\n LL |     let U { a, .. } = u;\n    |         ^^^^^^^^^^^", "previous_filename": "src/test/ui/union/union-fields-2.stderr"}, {"sha": "e738b18470337b586799488df597e9112567c720", "filename": "src/test/ui/union/union-fields-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n union U {\n     a: u8,\n     b: u16,"}, {"sha": "867bf75dfdc0b8cc3623240301b9781a103a984f", "filename": "src/test/ui/union/union-fields-2.thirunsafeck.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-2.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-fields-2.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,84 @@\n+error: union expressions should have exactly one field\n+  --> $DIR/union-fields-2.rs:10:13\n+   |\n+LL |     let u = U {};\n+   |             ^\n+\n+error: union expressions should have exactly one field\n+  --> $DIR/union-fields-2.rs:12:13\n+   |\n+LL |     let u = U { a: 0, b: 1 };\n+   |             ^\n+\n+error[E0560]: union `U` has no field named `c`\n+  --> $DIR/union-fields-2.rs:13:29\n+   |\n+LL |     let u = U { a: 0, b: 1, c: 2 };\n+   |                             ^ `U` does not have this field\n+   |\n+   = note: available fields are: `a`, `b`\n+\n+error: union expressions should have exactly one field\n+  --> $DIR/union-fields-2.rs:13:13\n+   |\n+LL |     let u = U { a: 0, b: 1, c: 2 };\n+   |             ^\n+\n+error: union expressions should have exactly one field\n+  --> $DIR/union-fields-2.rs:15:13\n+   |\n+LL |     let u = U { ..u };\n+   |             ^\n+\n+error[E0436]: functional record update syntax requires a struct\n+  --> $DIR/union-fields-2.rs:15:19\n+   |\n+LL |     let u = U { ..u };\n+   |                   ^\n+\n+error: union patterns should have exactly one field\n+  --> $DIR/union-fields-2.rs:18:9\n+   |\n+LL |     let U {} = u;\n+   |         ^^^^\n+\n+error: union patterns should have exactly one field\n+  --> $DIR/union-fields-2.rs:20:9\n+   |\n+LL |     let U { a, b } = u;\n+   |         ^^^^^^^^^^\n+\n+error: union patterns should have exactly one field\n+  --> $DIR/union-fields-2.rs:21:9\n+   |\n+LL |     let U { a, b, c } = u;\n+   |         ^^^^^^^^^^^^^\n+\n+error[E0026]: union `U` does not have a field named `c`\n+  --> $DIR/union-fields-2.rs:21:19\n+   |\n+LL |     let U { a, b, c } = u;\n+   |                   ^ union `U` does not have this field\n+\n+error: union patterns should have exactly one field\n+  --> $DIR/union-fields-2.rs:23:9\n+   |\n+LL |     let U { .. } = u;\n+   |         ^^^^^^^^\n+\n+error: `..` cannot be used in union patterns\n+  --> $DIR/union-fields-2.rs:23:9\n+   |\n+LL |     let U { .. } = u;\n+   |         ^^^^^^^^\n+\n+error: `..` cannot be used in union patterns\n+  --> $DIR/union-fields-2.rs:25:9\n+   |\n+LL |     let U { a, .. } = u;\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n+\n+Some errors have detailed explanations: E0026, E0436, E0560.\n+For more information about an error, try `rustc --explain E0026`."}, {"sha": "25f1f5050f99b46cf6835facd26d73ec775ec8a6", "filename": "src/test/ui/union/union-generic-rpass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n \n use std::mem::ManuallyDrop;"}, {"sha": "fcd0bdec25833321601a990d84a1224e1c421007", "filename": "src/test/ui/union/union-generic.mirunsafeck.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n-  --> $DIR/union-generic.rs:8:13\n+  --> $DIR/union-generic.rs:11:13\n    |\n LL | union U<T: Copy> {\n    | ---------------- required by `U`\n@@ -8,7 +8,7 @@ LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n-  --> $DIR/union-generic.rs:10:13\n+  --> $DIR/union-generic.rs:13:13\n    |\n LL | union U<T: Copy> {\n    | ---------------- required by `U`", "previous_filename": "src/test/ui/union/union-generic.stderr"}, {"sha": "3d68ecb87d8d673d1c93dfb2409e915e808c7e0e", "filename": "src/test/ui/union/union-generic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n use std::rc::Rc;\n \n union U<T: Copy> {"}, {"sha": "fcd0bdec25833321601a990d84a1224e1c421007", "filename": "src/test/ui/union/union-generic.thirunsafeck.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n+  --> $DIR/union-generic.rs:11:13\n+   |\n+LL | union U<T: Copy> {\n+   | ---------------- required by `U`\n+...\n+LL |     let u = U { a: Rc::new(0u32) };\n+   |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n+\n+error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n+  --> $DIR/union-generic.rs:13:13\n+   |\n+LL | union U<T: Copy> {\n+   | ---------------- required by `U`\n+...\n+LL |     let u = U::<Rc<u32>> { a: Default::default() };\n+   |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b0fd22da73adc146c203e8aa687a667b2753fe70", "filename": "src/test/ui/union/union-inherent-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-inherent-method.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n union U {\n     a: u8,"}, {"sha": "22d4428c902c8c0ec189ac9cb6e0072042023faf", "filename": "src/test/ui/union/union-lint-dead-code.mirunsafeck.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,11 +1,11 @@\n error: field is never read: `b`\n-  --> $DIR/union-lint-dead-code.rs:5:5\n+  --> $DIR/union-lint-dead-code.rs:8:5\n    |\n LL |     b: bool,\n    |     ^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/union-lint-dead-code.rs:1:9\n+  --> $DIR/union-lint-dead-code.rs:4:9\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^", "previous_filename": "src/test/ui/union/union-lint-dead-code.stderr"}, {"sha": "64c28d72e9eaa3ee59656d0e29bad07dba2a2299", "filename": "src/test/ui/union/union-lint-dead-code.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![deny(dead_code)]\n \n union Foo {"}, {"sha": "22d4428c902c8c0ec189ac9cb6e0072042023faf", "filename": "src/test/ui/union/union-lint-dead-code.thirunsafeck.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,14 @@\n+error: field is never read: `b`\n+  --> $DIR/union-lint-dead-code.rs:8:5\n+   |\n+LL |     b: bool,\n+   |     ^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/union-lint-dead-code.rs:4:9\n+   |\n+LL | #![deny(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7fd9d8221c612a0602bc875e1f153910af46743c", "filename": "src/test/ui/union/union-macro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-macro.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(unused_variables)]\n \n macro_rules! duplicate {"}, {"sha": "826bdf07cef5ec35937b8d4c9304bdb6cc3d8c25", "filename": "src/test/ui/union/union-manuallydrop-rpass.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,8 @@\n-#![allow(dead_code)]\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![allow(dead_code)]\n \n use std::mem::needs_drop;\n use std::mem::ManuallyDrop;"}, {"sha": "f55fbea6336e32cfa39ed27707c95498a2961431", "filename": "src/test/ui/union/union-move.mirunsafeck.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/union-move.rs:26:18\n+  --> $DIR/union-move.rs:29:18\n    |\n LL | fn test1(x: U1) {\n    |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n@@ -10,7 +10,7 @@ LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/union-move.rs:42:18\n+  --> $DIR/union-move.rs:45:18\n    |\n LL | fn test3(x: U1) {\n    |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n@@ -21,7 +21,7 @@ LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n \n error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n-  --> $DIR/union-move.rs:49:18\n+  --> $DIR/union-move.rs:52:18\n    |\n LL |         move_out(x.f1_nocopy);\n    |                  ^^^^^^^^^^^", "previous_filename": "src/test/ui/union/union-move.stderr"}, {"sha": "8f78c30d67a5537824396294b3ef9ac88f068720", "filename": "src/test/ui/union/union-move.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n //! Test the behavior of moving out of non-`Copy` union fields.\n //! Avoid types that `Drop`, we want to focus on moving.\n #![feature(untagged_unions)]"}, {"sha": "f55fbea6336e32cfa39ed27707c95498a2961431", "filename": "src/test/ui/union/union-move.thirunsafeck.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,35 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/union-move.rs:29:18\n+   |\n+LL | fn test1(x: U1) {\n+   |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n+...\n+LL |         move_out(x.f1_nocopy);\n+   |                  ----------- value moved here\n+LL |         move_out(x.f2_nocopy);\n+   |                  ^^^^^^^^^^^ value used here after move\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/union-move.rs:45:18\n+   |\n+LL | fn test3(x: U1) {\n+   |          - move occurs because `x` has type `U1`, which does not implement the `Copy` trait\n+...\n+LL |         move_out(x.f2_nocopy);\n+   |                  ----------- value moved here\n+LL |         move_out(x.f3_copy);\n+   |                  ^^^^^^^^^ value used here after move\n+\n+error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n+  --> $DIR/union-move.rs:52:18\n+   |\n+LL |         move_out(x.f1_nocopy);\n+   |                  ^^^^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  move occurs because `x.f1_nocopy` has type `RefCell<i32>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0382, E0509.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "6e6b105a73e9f461f2adeb5cfa64916f11aff7d8", "filename": "src/test/ui/union/union-nodrop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n #![allow(dead_code)]\n "}, {"sha": "d29e7a97180cf633d44f1d754a172c68682f0b8e", "filename": "src/test/ui/union/union-nonzero.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonzero.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n \n // Tests that unions aren't subject to unsafe non-zero/niche-filling optimizations."}, {"sha": "0eea14d9de0fc34beda14ecaa63f6b737406d28e", "filename": "src/test/ui/union/union-overwrite.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n #[repr(C)]\n #[derive(Copy, Clone)]"}, {"sha": "9c6398bf5aa631039253d25a501cc344f9b6df10", "filename": "src/test/ui/union/union-packed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-packed.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n "}, {"sha": "d628a200a076e675fcf184fe53a53a5dd275db11", "filename": "src/test/ui/union/union-pat-refutability.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-pat-refutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-pat-refutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-pat-refutability.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n #![allow(illegal_floating_point_literal_pattern)]\n "}, {"sha": "26fc25b96bd42a73193711c4f0dd5ec9be3cb792", "filename": "src/test/ui/union/union-suggest-field.mirunsafeck.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,17 +1,17 @@\n error[E0560]: union `U` has no field named `principle`\n-  --> $DIR/union-suggest-field.rs:10:17\n+  --> $DIR/union-suggest-field.rs:13:17\n    |\n LL |     let u = U { principle: 0 };\n    |                 ^^^^^^^^^ help: a field with a similar name exists: `principal`\n \n error[E0609]: no field `principial` on type `U`\n-  --> $DIR/union-suggest-field.rs:14:15\n+  --> $DIR/union-suggest-field.rs:17:15\n    |\n LL |     let w = u.principial;\n    |               ^^^^^^^^^^ help: a field with a similar name exists: `principal`\n \n error[E0615]: attempted to take value of method `calculate` on type `U`\n-  --> $DIR/union-suggest-field.rs:18:15\n+  --> $DIR/union-suggest-field.rs:21:15\n    |\n LL |     let y = u.calculate;\n    |               ^^^^^^^^^ method, not a field", "previous_filename": "src/test/ui/union/union-suggest-field.stderr"}, {"sha": "601a22a060048ec5bd64a95c6aae2eba06a6c765", "filename": "src/test/ui/union/union-suggest-field.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n union U {\n     principal: u8,\n }"}, {"sha": "26fc25b96bd42a73193711c4f0dd5ec9be3cb792", "filename": "src/test/ui/union/union-suggest-field.thirunsafeck.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,27 @@\n+error[E0560]: union `U` has no field named `principle`\n+  --> $DIR/union-suggest-field.rs:13:17\n+   |\n+LL |     let u = U { principle: 0 };\n+   |                 ^^^^^^^^^ help: a field with a similar name exists: `principal`\n+\n+error[E0609]: no field `principial` on type `U`\n+  --> $DIR/union-suggest-field.rs:17:15\n+   |\n+LL |     let w = u.principial;\n+   |               ^^^^^^^^^^ help: a field with a similar name exists: `principal`\n+\n+error[E0615]: attempted to take value of method `calculate` on type `U`\n+  --> $DIR/union-suggest-field.rs:21:15\n+   |\n+LL |     let y = u.calculate;\n+   |               ^^^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let y = u.calculate();\n+   |                        ^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0560, E0609, E0615.\n+For more information about an error, try `rustc --explain E0560`."}, {"sha": "6134e91f31e49023b341abb7d32f99fda2b4eb43", "filename": "src/test/ui/union/union-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-trait-impl.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n use std::fmt;\n "}, {"sha": "1a3b32d55f321cb161db870eb28fbf64afcfd6bb", "filename": "src/test/ui/union/union-transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-transmute.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n union U {\n     a: (u8, u8),"}, {"sha": "84a7eb2ef2e72c5aa8aa6fbe0e5e936da5e22ea2", "filename": "src/test/ui/union/union-unsafe.mir.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,85 +1,85 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:31:5\n+  --> $DIR/union-unsafe.rs:34:5\n    |\n LL |     *(u.p) = 13;\n    |     ^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:35:5\n+  --> $DIR/union-unsafe.rs:39:5\n    |\n LL |     u.a = (RefCell::new(0), 1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:36:5\n+  --> $DIR/union-unsafe.rs:40:5\n    |\n LL |     u.a.0 = RefCell::new(0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:43:6\n+  --> $DIR/union-unsafe.rs:47:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:49:6\n+  --> $DIR/union-unsafe.rs:53:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:57:13\n+  --> $DIR/union-unsafe.rs:61:13\n    |\n LL |     let a = u1.a;\n    |             ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:60:14\n+  --> $DIR/union-unsafe.rs:64:14\n    |\n LL |     let U1 { a } = u1;\n    |              ^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:61:20\n+  --> $DIR/union-unsafe.rs:65:20\n    |\n LL |     if let U1 { a: 12 } = u1 {}\n    |                    ^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:66:6\n+  --> $DIR/union-unsafe.rs:70:6\n    |\n LL |     *u2.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:70:6\n+  --> $DIR/union-unsafe.rs:74:6\n    |\n LL |     *u3.a = 1;\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:74:6\n+  --> $DIR/union-unsafe.rs:78:6\n    |\n LL |     *u3.a = String::from(\"new\");\n    |      ^^^^ access to union field", "previous_filename": "src/test/ui/union/union-unsafe.stderr"}, {"sha": "e8414903d548fbd80e8e6efdbbaa3ff54694e041", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(untagged_unions)]\n use std::mem::ManuallyDrop;\n use std::cell::RefCell;\n@@ -32,8 +35,9 @@ fn deref_union_field(mut u: URef) {\n }\n \n fn assign_noncopy_union_field(mut u: URefCell) {\n-    u.a = (RefCell::new(0), 1); //~ ERROR assignment to union field that might need dropping\n-    u.a.0 = RefCell::new(0); //~ ERROR assignment to union field that might need dropping\n+    // FIXME(thir-unsafeck)\n+    u.a = (RefCell::new(0), 1); //[mir]~ ERROR assignment to union field that might need dropping\n+    u.a.0 = RefCell::new(0); //[mir]~ ERROR assignment to union field that might need dropping\n     u.a.1 = 1; // OK\n }\n "}, {"sha": "51f19879c819550408bd3c295846f2ae1dcb696c", "filename": "src/test/ui/union/union-unsafe.thir.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,75 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:34:6\n+   |\n+LL |     *(u.p) = 13;\n+   |      ^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:47:6\n+   |\n+LL |     *u3.a = T::default();\n+   |      ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:53:6\n+   |\n+LL |     *u3.a = T::default();\n+   |      ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:61:13\n+   |\n+LL |     let a = u1.a;\n+   |             ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:64:14\n+   |\n+LL |     let U1 { a } = u1;\n+   |              ^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:65:20\n+   |\n+LL |     if let U1 { a: 12 } = u1 {}\n+   |                    ^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:70:6\n+   |\n+LL |     *u2.a = String::from(\"new\");\n+   |      ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:74:6\n+   |\n+LL |     *u3.a = 1;\n+   |      ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-unsafe.rs:78:6\n+   |\n+LL |     *u3.a = String::from(\"new\");\n+   |      ^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "86a13c1e7ca904db6b683dd18c8e48b7dd8c8b83", "filename": "src/test/ui/union/union-unsized.mirunsafeck.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsized.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsized.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:4:8\n+  --> $DIR/union-unsized.rs:7:8\n    |\n LL |     a: str,\n    |        ^^^ doesn't have a size known at compile-time\n@@ -17,7 +17,7 @@ LL |     a: Box<str>,\n    |        ^^^^   ^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:12:8\n+  --> $DIR/union-unsized.rs:15:8\n    |\n LL |     b: str,\n    |        ^^^ doesn't have a size known at compile-time", "previous_filename": "src/test/ui/union/union-unsized.stderr"}, {"sha": "e9792f527dc71ef672c44e51a1a9b1a6a8fe0bcb", "filename": "src/test/ui/union/union-unsized.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(untagged_unions)]\n \n union U {"}, {"sha": "86a13c1e7ca904db6b683dd18c8e48b7dd8c8b83", "filename": "src/test/ui/union/union-unsized.thirunsafeck.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsized.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-unsized.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/union-unsized.rs:7:8\n+   |\n+LL |     a: str,\n+   |        ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+   = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     a: &str,\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     a: Box<str>,\n+   |        ^^^^   ^\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/union-unsized.rs:15:8\n+   |\n+LL |     b: str,\n+   |        ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+   = note: no field of a union may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     b: &str,\n+   |        ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     b: Box<str>,\n+   |        ^^^^   ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2062fb7473faa35d1789be1a748c44879678aa2f", "filename": "src/test/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,35 +1,35 @@\n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/union-with-drop-fields.rs:9:5\n+  --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:9:5\n+  --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n \n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/union-with-drop-fields.rs:17:5\n+  --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:17:5\n+  --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n \n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/union-with-drop-fields.rs:22:5\n+  --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/union-with-drop-fields.rs:22:5\n+  --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^", "previous_filename": "src/test/ui/union/union-with-drop-fields.stderr"}, {"sha": "96c293418b62951fc548d7ef00872fe8bb348e52", "filename": "src/test/ui/union/union-with-drop-fields.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -1,4 +1,6 @@\n-#![feature(untagged_unions)]\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![allow(dead_code)]\n \n union U {"}, {"sha": "2062fb7473faa35d1789be1a748c44879678aa2f", "filename": "src/test/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,39 @@\n+error[E0740]: unions may not contain fields that need dropping\n+  --> $DIR/union-with-drop-fields.rs:11:5\n+   |\n+LL |     a: String,\n+   |     ^^^^^^^^^\n+   |\n+note: `std::mem::ManuallyDrop` can be used to wrap the type\n+  --> $DIR/union-with-drop-fields.rs:11:5\n+   |\n+LL |     a: String,\n+   |     ^^^^^^^^^\n+\n+error[E0740]: unions may not contain fields that need dropping\n+  --> $DIR/union-with-drop-fields.rs:19:5\n+   |\n+LL |     a: S,\n+   |     ^^^^\n+   |\n+note: `std::mem::ManuallyDrop` can be used to wrap the type\n+  --> $DIR/union-with-drop-fields.rs:19:5\n+   |\n+LL |     a: S,\n+   |     ^^^^\n+\n+error[E0740]: unions may not contain fields that need dropping\n+  --> $DIR/union-with-drop-fields.rs:24:5\n+   |\n+LL |     a: T,\n+   |     ^^^^\n+   |\n+note: `std::mem::ManuallyDrop` can be used to wrap the type\n+  --> $DIR/union-with-drop-fields.rs:24:5\n+   |\n+LL |     a: T,\n+   |     ^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0740`."}, {"sha": "98bc4077793e367996a8983761a94d61270ad541", "filename": "src/test/ui/unsafe/access_union_field.mir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.mir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/access_union_field.rs:13:13\n+   |\n+LL |     let a = foo.bar;\n+   |             ^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/access_union_field.rs:14:13\n+   |\n+LL |     let b = foo.baz;\n+   |             ^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "5c4e695df58f23a3cc29e90484a84ca1684e5dcb", "filename": "src/test/ui/unsafe/access_union_field.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,15 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#![allow(unused_variables)]\n+\n+union Foo {\n+    bar: i8,\n+    baz: u8,\n+}\n+\n+fn main() {\n+    let foo = Foo { bar: 5 };\n+    let a = foo.bar; //~ ERROR access to union field is unsafe and requires unsafe function or block\n+    let b = foo.baz; //~ ERROR access to union field is unsafe and requires unsafe function or block\n+}"}, {"sha": "98bc4077793e367996a8983761a94d61270ad541", "filename": "src/test/ui/unsafe/access_union_field.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Faccess_union_field.thir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/access_union_field.rs:13:13\n+   |\n+LL |     let a = foo.bar;\n+   |             ^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/access_union_field.rs:14:13\n+   |\n+LL |     let b = foo.baz;\n+   |             ^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "f7bd411a74416681f7aeb6cd8755d881564386ca", "filename": "src/test/ui/unsafe/union.mir.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion.mir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,16 @@\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union.rs:61:5\n+   |\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: `#[warn(unused_unsafe)]` on by default\n+\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union.rs:66:5\n+   |\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "0130fa67f2328e9069352de28de16a0b91798409", "filename": "src/test/ui/unsafe/union.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,80 @@\n+// run-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#![feature(untagged_unions)]\n+\n+union Foo {\n+    bar: i8,\n+    zst: (),\n+    pizza: Pizza,\n+}\n+\n+struct Pizza {\n+    topping: Option<PizzaTopping>\n+}\n+\n+#[allow(dead_code)]\n+enum PizzaTopping {\n+    Cheese,\n+    Pineapple,\n+}\n+\n+struct FooHolder {\n+    inner_foo: Foo\n+}\n+\n+fn do_nothing(_x: &mut Foo) {}\n+\n+pub fn main() {\n+    let mut foo = Foo { bar: 5 };\n+    do_nothing(&mut foo);\n+    foo.bar = 6;\n+    unsafe { foo.bar += 1; }\n+    assert_eq!(unsafe { foo.bar }, 7);\n+    unsafe {\n+        let Foo { bar: inner } = foo;\n+        assert_eq!(inner, 7);\n+    }\n+    let foo = if let true = true { foo } else { foo };\n+\n+    unsafe {\n+        match foo {\n+            Foo { bar: _a } => {},\n+        }\n+    }\n+    unsafe {\n+        match foo {\n+            Foo {\n+                pizza: Pizza {\n+                    topping: Some(PizzaTopping::Cheese) | Some(PizzaTopping::Pineapple) | None\n+                }\n+            } => {},\n+        }\n+    }\n+    // binding to wildcard is okay\n+    match foo {\n+        Foo { bar: _ } => {},\n+    }\n+    let Foo { bar: _ } = foo;\n+    // MIR unsafeck incorrectly thinks that it is safe to do these\n+    unsafe { //[mir]~ WARNING\n+        match foo {\n+            Foo { zst: () } => {},\n+        }\n+    }\n+    unsafe { //[mir]~ WARNING\n+        match foo {\n+            Foo { pizza: Pizza { .. } } => {},\n+        }\n+    }\n+    let foo = Foo { bar: 5 };\n+    let foo = if let 3 = if let true = true { 3 } else { 4 } { foo } else { foo };\n+\n+    let (_foo2, _random) = (foo, 42);\n+\n+    let mut foo_holder = FooHolder { inner_foo: Foo { bar: 5 } };\n+    foo_holder.inner_foo.bar = 4;\n+    assert_eq!(unsafe { foo_holder.inner_foo.bar }, 4);\n+    drop(foo_holder);\n+}"}, {"sha": "e4c0976b82659bee7d0879f6f3a031762d662ef3", "filename": "src/test/ui/unsafe/union_access_through_block.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_access_through_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_access_through_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion_access_through_block.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#[derive(Copy, Clone)]\n+pub struct Foo { a: bool }\n+\n+pub union Bar {\n+    a: Foo,\n+    b: u32,\n+}\n+pub fn baz(mut bar: Bar) {\n+    unsafe {\n+        { bar.a }.a = true;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "818f5ce03b54d3f7b96d80cb0a7b04ef0e30749e", "filename": "src/test/ui/unsafe/union_destructure.mir.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_destructure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_destructure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion_destructure.mir.stderr?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,16 @@\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union_destructure.rs:35:5\n+   |\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: `#[warn(unused_unsafe)]` on by default\n+\n+warning: unnecessary `unsafe` block\n+  --> $DIR/union_destructure.rs:41:5\n+   |\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "6c88344b5fdeebb8d3f8193aed5e9d725d7230ad", "filename": "src/test/ui/unsafe/union_destructure.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion_destructure.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,51 @@\n+// run-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#[derive(Copy, Clone)]\n+#[allow(dead_code)]\n+struct Pie {\n+    slices: u8,\n+    size: u8,\n+}\n+\n+union Foo {\n+    #[allow(dead_code)]\n+    bar: i8,\n+    baz: Pie\n+}\n+\n+fn main() {\n+    let u = Foo { bar: 5 };\n+    let (Some(Foo { bar: _ }) | None) = Some(u);\n+    let u = Foo { bar: 6 };\n+    let (Some(Foo { bar: _ }) | Some(Foo { bar: _ }) | None) = Some(u);\n+    unsafe {\n+        let u = Foo { bar: 7 };\n+        let (Foo { bar } | Foo { bar }) = u;\n+        assert_eq!(bar, 7)\n+    }\n+    let u = Foo { bar: 8 };\n+    match Some(u) {\n+        Some(Foo { bar: _ }) => 3,\n+        None => 4,\n+    };\n+\n+    let u = Foo { bar: 9 };\n+    unsafe { //[mir]~ WARNING unnecessary `unsafe` block\n+        match u {\n+            Foo { baz: Pie { .. } } => {},\n+        };\n+    }\n+    let u = Foo { bar: 10 };\n+    unsafe { //[mir]~ WARNING unnecessary `unsafe` block\n+        match u {\n+            Foo { baz: Pie { slices: _, size: _ } } => {},\n+        };\n+    }\n+\n+    let u = Foo { bar: 11 };\n+    match u {\n+        Foo { baz: _ } => {},\n+    };\n+}"}, {"sha": "52a0a7abf274b319c9d0acb19ad2ad787a6936b9", "filename": "src/test/ui/unsafe/union_wild_or_wild.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_wild_or_wild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4/src%2Ftest%2Fui%2Funsafe%2Funion_wild_or_wild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion_wild_or_wild.rs?ref=240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+union X { a: i8 }\n+\n+fn main() {\n+    let x = X { a: 5 };\n+    match x {\n+        X { a: _ | _ } => {},\n+    }\n+}"}]}