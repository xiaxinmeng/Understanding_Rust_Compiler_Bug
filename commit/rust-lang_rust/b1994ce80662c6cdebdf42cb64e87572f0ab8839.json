{"sha": "b1994ce80662c6cdebdf42cb64e87572f0ab8839", "node_id": "C_kwDOAAsO6NoAKGIxOTk0Y2U4MDY2MmM2Y2RlYmRmNDJjYjY0ZTg3NTcyZjBhYjg4Mzk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-03T14:35:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-05T15:33:25Z"}, "message": "Do not make typo suggestions when suggesting pattern matching\n\nFixes #103909.", "tree": {"sha": "42809283d50101090ba951beda4f564cb20e02d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42809283d50101090ba951beda4f564cb20e02d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1994ce80662c6cdebdf42cb64e87572f0ab8839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1994ce80662c6cdebdf42cb64e87572f0ab8839", "html_url": "https://github.com/rust-lang/rust/commit/b1994ce80662c6cdebdf42cb64e87572f0ab8839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1994ce80662c6cdebdf42cb64e87572f0ab8839/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160b19429523ea44c4c3b7cad4233b2a35f58b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "html_url": "https://github.com/rust-lang/rust/commit/160b19429523ea44c4c3b7cad4233b2a35f58b8f"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "a1338dcd4771bc8379af7b14c6805585b75fa11c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1994ce80662c6cdebdf42cb64e87572f0ab8839/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1994ce80662c6cdebdf42cb64e87572f0ab8839/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b1994ce80662c6cdebdf42cb64e87572f0ab8839", "patch": "@@ -322,7 +322,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n \n         self.suggest_bare_struct_literal(&mut err);\n-        self.suggest_pattern_match_with_let(&mut err, source, span);\n+\n+        if self.suggest_pattern_match_with_let(&mut err, source, span) {\n+            // Fallback label.\n+            err.span_label(base_error.span, &base_error.fallback_label);\n+            return (err, Vec::new());\n+        }\n \n         self.suggest_self_or_self_ref(&mut err, path, span);\n         self.detect_assoct_type_constraint_meant_as_path(&mut err, &base_error);\n@@ -341,7 +346,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         if !self.type_ascription_suggestion(&mut err, base_error.span) {\n             let mut fallback =\n                 self.suggest_trait_and_bounds(&mut err, source, res, span, &base_error);\n+\n+            // if we have suggested using pattern matching, then don't add needless suggestions\n+            // for typos.\n             fallback |= self.suggest_typo(&mut err, source, path, span, &base_error);\n+\n             if fallback {\n                 // Fallback label.\n                 err.span_label(base_error.span, &base_error.fallback_label);\n@@ -937,7 +946,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         err: &mut Diagnostic,\n         source: PathSource<'_>,\n         span: Span,\n-    ) {\n+    ) -> bool {\n         if let PathSource::Expr(_) = source &&\n         let Some(Expr {\n                     span: expr_span,\n@@ -954,8 +963,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     \"let \",\n                     Applicability::MaybeIncorrect,\n                 );\n+                return true;\n             }\n         }\n+        false\n     }\n \n     fn get_single_associated_item("}, {"sha": "20b67cd102d7037c4a228d9dc613cbc2c8a6b7a2", "filename": "src/test/ui/did_you_mean/issue-103909.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1994ce80662c6cdebdf42cb64e87572f0ab8839/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-103909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1994ce80662c6cdebdf42cb64e87572f0ab8839/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-103909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-103909.rs?ref=b1994ce80662c6cdebdf42cb64e87572f0ab8839", "patch": "@@ -0,0 +1,9 @@\n+#![allow(unused_variables)]\n+use std::fs::File;\n+\n+fn main() {\n+    if Err(err) = File::open(\"hello.txt\") {\n+        //~^ ERROR: cannot find value `err` in this scope\n+        //~| ERROR: mismatched types\n+    }\n+}"}, {"sha": "a28914051b980c78d4852d27d7e8bf0577773a33", "filename": "src/test/ui/did_you_mean/issue-103909.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1994ce80662c6cdebdf42cb64e87572f0ab8839/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-103909.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1994ce80662c6cdebdf42cb64e87572f0ab8839/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-103909.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-103909.stderr?ref=b1994ce80662c6cdebdf42cb64e87572f0ab8839", "patch": "@@ -0,0 +1,21 @@\n+error[E0425]: cannot find value `err` in this scope\n+  --> $DIR/issue-103909.rs:5:12\n+   |\n+LL |     if Err(err) = File::open(\"hello.txt\") {\n+   |            ^^^ not found in this scope\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let Err(err) = File::open(\"hello.txt\") {\n+   |        +++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-103909.rs:5:8\n+   |\n+LL |     if Err(err) = File::open(\"hello.txt\") {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425.\n+For more information about an error, try `rustc --explain E0308`."}]}