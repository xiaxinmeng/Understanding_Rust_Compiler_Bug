{"sha": "a289cfcfb32593c63d75f113547f63ffe2dde285", "node_id": "C_kwDOAAsO6NoAKGEyODljZmNmYjMyNTkzYzYzZDc1ZjExMzU0N2Y2M2ZmZTJkZGUyODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T13:49:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T13:49:56Z"}, "message": "Auto merge of #99462 - matthiaskrgr:rollup-ihhwaru, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #98028 (Add E0790 as more specific variant of E0283)\n - #99384 (use body's param-env when checking if type needs drop)\n - #99401 (Avoid `Symbol` to `&str` conversions)\n - #99419 (Stabilize `core::task::ready!`)\n - #99435 (Revert \"Stabilize $$ in Rust 1.63.0\")\n - #99438 (Improve suggestions for `NonZeroT` <- `T` coercion error)\n - #99441 (Update mdbook)\n - #99453 (:arrow_up: rust-analyzer)\n - #99457 (use `par_for_each_in` in `par_body_owners` and `collect_crate_mono_items`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a54aeb4086ab0399fd43dcb0724f0eb26deb91c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54aeb4086ab0399fd43dcb0724f0eb26deb91c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a289cfcfb32593c63d75f113547f63ffe2dde285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a289cfcfb32593c63d75f113547f63ffe2dde285", "html_url": "https://github.com/rust-lang/rust/commit/a289cfcfb32593c63d75f113547f63ffe2dde285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a289cfcfb32593c63d75f113547f63ffe2dde285/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd", "html_url": "https://github.com/rust-lang/rust/commit/8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd"}, {"sha": "e6904fc5b24a10e97d0a32908f49886e52e73990", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6904fc5b24a10e97d0a32908f49886e52e73990", "html_url": "https://github.com/rust-lang/rust/commit/e6904fc5b24a10e97d0a32908f49886e52e73990"}], "stats": {"total": 909, "additions": 705, "deletions": 204}, "files": [{"sha": "db8e3d5adbb9c482bbbab36dd0aaf6bc9478d2d5", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -634,7 +634,7 @@ version = \"3.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c11d40217d16aee8508cc8e5fde8b4ff24639758608e5374e731b53f85749fb9\"\n dependencies = [\n- \"heck 0.4.0\",\n+ \"heck\",\n  \"proc-macro-error\",\n  \"proc-macro2\",\n  \"quote\",\n@@ -1202,17 +1202,14 @@ checksum = \"cd56b59865bce947ac5958779cfa508f6c3b9497cc762b7e24a12d11ccde2c4f\"\n \n [[package]]\n name = \"elasticlunr-rs\"\n-version = \"2.3.9\"\n+version = \"3.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35622eb004c8f0c5e7e2032815f3314a93df0db30a1ce5c94e62c1ecc81e22b9\"\n+checksum = \"e6dae5cac90640734ee881bc5f21b6e5123f4e5235e52428db114abffc2391d6\"\n dependencies = [\n- \"lazy_static\",\n  \"regex\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n- \"strum\",\n- \"strum_macros\",\n ]\n \n [[package]]\n@@ -1735,15 +1732,6 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n-[[package]]\n-name = \"heck\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n-dependencies = [\n- \"unicode-segmentation\",\n-]\n-\n [[package]]\n name = \"heck\"\n version = \"0.4.0\"\n@@ -2360,17 +2348,17 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.18\"\n+version = \"0.4.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"74612ae81a3e5ee509854049dfa4c7975ae033c06f5fc4735c7dfbe60ee2a39d\"\n+checksum = \"13cdad8057b09a519c6c63e6d7c93ea854f5d7fbfe284df864d5e1140d215a2d\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\",\n  \"chrono\",\n  \"clap\",\n  \"clap_complete\",\n  \"elasticlunr-rs\",\n- \"env_logger 0.7.1\",\n+ \"env_logger 0.9.0\",\n  \"handlebars\",\n  \"lazy_static\",\n  \"log\",\n@@ -2379,7 +2367,6 @@ dependencies = [\n  \"pulldown-cmark\",\n  \"regex\",\n  \"serde\",\n- \"serde_derive\",\n  \"serde_json\",\n  \"shlex\",\n  \"tempfile\",\n@@ -3335,7 +3322,7 @@ dependencies = [\n  \"difference\",\n  \"env_logger 0.9.0\",\n  \"futures 0.3.19\",\n- \"heck 0.4.0\",\n+ \"heck\",\n  \"home\",\n  \"itertools\",\n  \"jsonrpc-core\",\n@@ -5134,24 +5121,6 @@ version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n \n-[[package]]\n-name = \"strum\"\n-version = \"0.18.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"57bd81eb48f4c437cadc685403cad539345bf703d78e63707418431cecd4522b\"\n-\n-[[package]]\n-name = \"strum_macros\"\n-version = \"0.18.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"87c85aa3f8ea653bfd3ddf25f7ee357ee4d204731f6aa9ad04002306f6e2774c\"\n-dependencies = [\n- \"heck 0.3.1\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"syn\"\n version = \"1.0.91\""}, {"sha": "cd77dbca3c440c700bae2df0550c94b4b3c29b00", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     InlineAsmRegOrRegClass::Reg(s) => {\n                         asm::InlineAsmRegOrRegClass::Reg(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmReg::parse(asm_arch, s).unwrap_or_else(|e| {\n-                                let msg = format!(\"invalid register `{}`: {}\", s.as_str(), e);\n+                                let msg = format!(\"invalid register `{}`: {}\", s, e);\n                                 sess.struct_span_err(*op_sp, &msg).emit();\n                                 asm::InlineAsmReg::Err\n                             })\n@@ -156,7 +156,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     InlineAsmRegOrRegClass::RegClass(s) => {\n                         asm::InlineAsmRegOrRegClass::RegClass(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmRegClass::parse(asm_arch, s).unwrap_or_else(|e| {\n-                                let msg = format!(\"invalid register class `{}`: {}\", s.as_str(), e);\n+                                let msg = format!(\"invalid register class `{}`: {}\", s, e);\n                                 sess.struct_span_err(*op_sp, &msg).emit();\n                                 asm::InlineAsmRegClass::Err\n                             })"}, {"sha": "22cb27af4fbc51afed2d1782a7fce9f7cfb70687", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -62,9 +62,9 @@ impl<'a> PostExpansionVisitor<'a> {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n         if let ast::Const::Yes(_) = constness {\n-            match symbol_unescaped.as_str() {\n+            match symbol_unescaped {\n                 // Stable\n-                \"Rust\" | \"C\" => {}\n+                sym::Rust | sym::C => {}\n                 abi => gate_feature_post!(\n                     &self,\n                     const_extern_fn,"}, {"sha": "80fd9726fc78005cde1f9d7d400f94bf34b31106", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -55,7 +55,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n             // The initial byte `4` instructs GDB that the following pretty printer\n             // is defined inline as opposed to in a standalone file.\n             section_contents.extend_from_slice(b\"\\x04\");\n-            let vis_name = format!(\"pretty-printer-{}-{}\\n\", crate_name.as_str(), index);\n+            let vis_name = format!(\"pretty-printer-{}-{}\\n\", crate_name, index);\n             section_contents.extend_from_slice(vis_name.as_bytes());\n             section_contents.extend_from_slice(&visualizer.src);\n "}, {"sha": "52952a7932dbc08b12616a4941983af29d2f68d5", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -146,7 +146,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub fn par_for_each_in<T: IntoIterator>(t: T, for_each: impl Fn(T::Item) + Sync + Send) {\n+        pub fn par_for_each_in<T: IntoIterator>(t: T, mut for_each: impl FnMut(T::Item) + Sync + Send) {\n             // We catch panics here ensuring that all the loop iterations execute.\n             // This makes behavior consistent with the parallel compiler.\n             let mut panic = None;"}, {"sha": "97766b8368ab6a17a9487e06910a1a407b3fc48a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -492,6 +492,7 @@ E0785: include_str!(\"./error_codes/E0785.md\"),\n E0786: include_str!(\"./error_codes/E0786.md\"),\n E0787: include_str!(\"./error_codes/E0787.md\"),\n E0788: include_str!(\"./error_codes/E0788.md\"),\n+E0790: include_str!(\"./error_codes/E0790.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "79d2c8204f95624c1c7f1bd0b8695ef34437d45b", "filename": "compiler/rustc_error_codes/src/error_codes/E0283.md", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0283.md?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -3,48 +3,27 @@ An implementation cannot be chosen unambiguously because of lack of information.\n Erroneous code example:\n \n ```compile_fail,E0283\n-trait Generator {\n-    fn create() -> u32;\n-}\n-\n-struct Impl;\n-\n-impl Generator for Impl {\n-    fn create() -> u32 { 1 }\n-}\n-\n-struct AnotherImpl;\n+struct Foo;\n \n-impl Generator for AnotherImpl {\n-    fn create() -> u32 { 2 }\n+impl Into<u32> for Foo {\n+    fn into(self) -> u32 { 1 }\n }\n \n-fn main() {\n-    let cont: u32 = Generator::create();\n-    // error, impossible to choose one of Generator trait implementation\n-    // Should it be Impl or AnotherImpl, maybe something else?\n-}\n+let foo = Foo;\n+let bar: u32 = foo.into() * 1u32;\n ```\n \n This error can be solved by adding type annotations that provide the missing\n-information to the compiler. In this case, the solution is to use a concrete\n-type:\n+information to the compiler. In this case, the solution is to specify the\n+trait's type parameter:\n \n ```\n-trait Generator {\n-    fn create() -> u32;\n-}\n-\n-struct AnotherImpl;\n+struct Foo;\n \n-impl Generator for AnotherImpl {\n-    fn create() -> u32 { 2 }\n+impl Into<u32> for Foo {\n+    fn into(self) -> u32 { 1 }\n }\n \n-fn main() {\n-    let gen1 = AnotherImpl::create();\n-\n-    // if there are multiple methods with same name (different traits)\n-    let gen2 = <AnotherImpl as Generator>::create();\n-}\n+let foo = Foo;\n+let bar: u32 = Into::<u32>::into(foo) * 1u32;\n ```"}, {"sha": "2aee9dfbdbd94f315d4aae5ab53a3bf688bf6caf", "filename": "compiler/rustc_error_codes/src/error_codes/E0790.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0790.md?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,47 @@\n+You need to specify a specific implementation of the trait in order to call the\n+method.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0790\n+trait Generator {\n+    fn create() -> u32;\n+}\n+\n+struct Impl;\n+\n+impl Generator for Impl {\n+    fn create() -> u32 { 1 }\n+}\n+\n+struct AnotherImpl;\n+\n+impl Generator for AnotherImpl {\n+    fn create() -> u32 { 2 }\n+}\n+\n+let cont: u32 = Generator::create();\n+// error, impossible to choose one of Generator trait implementation\n+// Should it be Impl or AnotherImpl, maybe something else?\n+```\n+\n+This error can be solved by adding type annotations that provide the missing\n+information to the compiler. In this case, the solution is to use a concrete\n+type:\n+\n+```\n+trait Generator {\n+    fn create() -> u32;\n+}\n+\n+struct AnotherImpl;\n+\n+impl Generator for AnotherImpl {\n+    fn create() -> u32 { 2 }\n+}\n+\n+let gen1 = AnotherImpl::create();\n+\n+// if there are multiple methods with same name (different traits)\n+let gen2 = <AnotherImpl as Generator>::create();\n+```"}, {"sha": "707cb73f097f87062f999dc9eb8cebbd476af86b", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -234,6 +234,8 @@ fn parse_tree(\n                             sess,\n                             &Token { kind: token::Dollar, span },\n                         );\n+                    } else {\n+                        maybe_emit_macro_metavar_expr_feature(features, sess, span);\n                     }\n                     TokenTree::token(token::Dollar, span)\n                 }"}, {"sha": "9a2ab3e32248bfda7c966720cc25cabb6de2bda4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -228,7 +228,7 @@ pub fn suggest_adding_lifetime_params<'tcx>(\n     if is_impl {\n         sugg.push_str(\" and update trait if needed\");\n     }\n-    err.multipart_suggestion(sugg.as_str(), suggestions, Applicability::MaybeIncorrect);\n+    err.multipart_suggestion(sugg, suggestions, Applicability::MaybeIncorrect);\n \n     true\n }"}, {"sha": "0001e1aa53efcc220b649c79951340cf373cdb56", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -491,9 +491,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n-        use rustc_data_structures::sync::{par_iter, ParallelIterator};\n-\n-        par_iter(&self.tcx.hir_crate_items(()).body_owners[..]).for_each(|&def_id| f(def_id));\n+        par_for_each_in(&self.tcx.hir_crate_items(()).body_owners[..], |&def_id| f(def_id));\n     }\n \n     pub fn ty_param_owner(self, def_id: LocalDefId) -> LocalDefId {"}, {"sha": "541dace5cc2bb5f31964d42799e792ebdab6af2d", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -74,6 +74,10 @@ impl TraitImpls {\n     pub fn blanket_impls(&self) -> &[DefId] {\n         self.blanket_impls.as_slice()\n     }\n+\n+    pub fn non_blanket_impls(&self) -> &FxIndexMap<SimplifiedType, Vec<DefId>> {\n+        &self.non_blanket_impls\n+    }\n }\n \n impl<'tcx> TraitDef {"}, {"sha": "1f0d0ce04aaa3aebdb023c6a0950c67b78c8b709", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -431,9 +431,9 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 let lhs = &self.thir[lhs];\n                 if let ty::Adt(adt_def, _) = lhs.ty.kind() && adt_def.is_union() {\n                     if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n-                        if assigned_ty.needs_drop(self.tcx, self.tcx.param_env(adt_def.did())) {\n+                        if assigned_ty.needs_drop(self.tcx, self.param_env) {\n                             // This would be unsafe, but should be outright impossible since we reject such unions.\n-                            self.tcx.sess.delay_span_bug(assignment_span, \"union fields that need dropping should be impossible\");\n+                            self.tcx.sess.delay_span_bug(assignment_span, format!(\"union fields that need dropping should be impossible: {assigned_ty}\"));\n                         }\n                     } else {\n                         self.requires_unsafe(expr.span, AccessToUnionField);"}, {"sha": "a2ad96cfc16d2929999300a8000d06dbd6d5f4cc", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -219,14 +219,11 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     // We have to check the actual type of the assignment, as that determines if the\n                     // old value is being dropped.\n                     let assigned_ty = place.ty(&self.body.local_decls, self.tcx).ty;\n-                    if assigned_ty.needs_drop(\n-                        self.tcx,\n-                        self.tcx.param_env(base_ty.ty_adt_def().unwrap().did()),\n-                    ) {\n+                    if assigned_ty.needs_drop(self.tcx, self.param_env) {\n                         // This would be unsafe, but should be outright impossible since we reject such unions.\n                         self.tcx.sess.delay_span_bug(\n                             self.source_info.span,\n-                            \"union fields that need dropping should be impossible\",\n+                            format!(\"union fields that need dropping should be impossible: {assigned_ty}\")\n                         );\n                     }\n                 } else {"}, {"sha": "e3cfb034e40ad3412760b2bff9d33f9ab35bf0ff", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -180,7 +180,7 @@\n //! regardless of whether it is actually needed or not.\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n+use rustc_data_structures::sync::{par_for_each_in, MTLock, MTRef};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n@@ -346,7 +346,7 @@ pub fn collect_crate_mono_items(\n         let inlining_map: MTRef<'_, _> = &mut inlining_map;\n \n         tcx.sess.time(\"monomorphization_collector_graph_walk\", || {\n-            par_iter(roots).for_each(|root| {\n+            par_for_each_in(roots, |root| {\n                 let mut recursion_depths = DefIdMap::default();\n                 collect_items_rec(\n                     tcx,"}, {"sha": "7381019a620160ff782f0eb05e9e5d2593b35ba1", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -77,7 +77,7 @@ fn err_if_attr_found(ctxt: &EntryContext<'_>, attrs: &[Attribute], sym: Symbol)\n             .sess\n             .struct_span_err(\n                 attr.span,\n-                &format!(\"`{}` attribute can only be used on functions\", sym.as_str()),\n+                &format!(\"`{}` attribute can only be used on functions\", sym),\n             )\n             .emit();\n     }"}, {"sha": "7a1695fc862bf603daa67504d882366b225b79f5", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1627,7 +1627,7 @@ impl<'a> Resolver<'a> {\n                     \"{}{} `{}` defined here\",\n                     prefix,\n                     suggestion.res.descr(),\n-                    suggestion.candidate.as_str(),\n+                    suggestion.candidate,\n                 ),\n             );\n         }"}, {"sha": "e428bae479bc2f4d70258cfd172203db8502acde", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -83,7 +83,7 @@ impl ForLifetimeSpanType {\n         }\n     }\n \n-    pub(crate) fn suggestion(&self, sugg: &str) -> String {\n+    pub(crate) fn suggestion(&self, sugg: impl std::fmt::Display) -> String {\n         match self {\n             Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n             Self::ClosureEmpty => format!(\"for<{}>\", sugg),\n@@ -2313,8 +2313,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n \n         let suggest_existing =\n             |err: &mut Diagnostic,\n-             name: &str,\n-             formatters: Vec<Option<Box<dyn Fn(&str) -> String>>>| {\n+             name: Symbol,\n+             formatters: Vec<Option<Box<dyn Fn(Symbol) -> String>>>| {\n                 if let Some(MissingLifetimeSpot::HigherRanked { span: for_span, span_type }) =\n                     self.missing_named_lifetime_spots.iter().rev().next()\n                 {\n@@ -2334,7 +2334,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     // If all single char lifetime names are present, we wrap around and double the chars.\n                     let lt_name = (1..)\n                         .flat_map(a_to_z_repeat_n)\n-                        .find(|lt| !lifetime_names.contains(&Symbol::intern(&lt)))\n+                        .map(|lt| Symbol::intern(&lt))\n+                        .find(|lt| !lifetime_names.contains(lt))\n                         .unwrap();\n                     let msg = format!(\n                         \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n@@ -2361,7 +2362,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     introduce_suggestion.push((*for_span, for_sugg));\n                     for ((span, _), formatter) in spans_with_counts.iter().zip(formatters.iter()) {\n                         if let Some(formatter) = formatter {\n-                            introduce_suggestion.push((*span, formatter(&lt_name)));\n+                            introduce_suggestion.push((*span, formatter(lt_name)));\n                         }\n                     }\n                     err.multipart_suggestion_verbose(\n@@ -2584,15 +2585,19 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         let lifetime_names: Vec<_> = lifetime_names.iter().collect();\n         match &lifetime_names[..] {\n             [name] => {\n-                let mut suggs: Vec<Option<Box<dyn Fn(&str) -> String>>> = Vec::new();\n+                let mut suggs: Vec<Option<Box<dyn Fn(Symbol) -> String>>> = Vec::new();\n                 for (snippet, (_, count)) in snippets.iter().zip(spans_with_counts.iter().copied())\n                 {\n                     suggs.push(match snippet.as_deref() {\n                         Some(\"&\") => Some(Box::new(|name| format!(\"&{} \", name))),\n                         Some(\"'_\") => Some(Box::new(|n| n.to_string())),\n                         Some(\"\") => Some(Box::new(move |n| format!(\"{}, \", n).repeat(count))),\n                         Some(\"<\") => Some(Box::new(move |n| {\n-                            std::iter::repeat(n).take(count).collect::<Vec<_>>().join(\", \")\n+                            std::iter::repeat(n)\n+                                .take(count)\n+                                .map(|n| n.to_string())\n+                                .collect::<Vec<_>>()\n+                                .join(\", \")\n                         })),\n                         Some(snippet) if !snippet.ends_with('>') => Some(Box::new(move |name| {\n                             format!(\n@@ -2607,7 +2612,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         _ => None,\n                     });\n                 }\n-                suggest_existing(err, name.as_str(), suggs);\n+                suggest_existing(err, **name, suggs);\n             }\n             [] => {\n                 let mut suggs = Vec::new();"}, {"sha": "54dd15270a136cd48b1b49dc36009cf82fe19c58", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -325,7 +325,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 UNUSED_MACROS,\n                 node_id,\n                 ident.span,\n-                &format!(\"unused macro definition: `{}`\", ident.as_str()),\n+                &format!(\"unused macro definition: `{}`\", ident.name),\n             );\n         }\n         for (&(def_id, arm_i), &(ident, rule_span)) in self.unused_macro_rules.iter() {\n@@ -341,7 +341,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 &format!(\n                     \"{} rule of macro `{}` is never used\",\n                     crate::diagnostics::ordinalize(arm_i + 1),\n-                    ident.as_str()\n+                    ident.name\n                 ),\n             );\n         }"}, {"sha": "3ccd3fcbafa2bafb5c4db93540e3689f6176dc58", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -223,6 +223,16 @@ symbols! {\n         LintPass,\n         Mutex,\n         N,\n+        NonZeroI128,\n+        NonZeroI16,\n+        NonZeroI32,\n+        NonZeroI64,\n+        NonZeroI8,\n+        NonZeroU128,\n+        NonZeroU16,\n+        NonZeroU32,\n+        NonZeroU64,\n+        NonZeroU8,\n         None,\n         Ok,\n         Option,\n@@ -257,6 +267,7 @@ symbols! {\n         Result,\n         Return,\n         Right,\n+        Rust,\n         RustcDecodable,\n         RustcEncodable,\n         Send,"}, {"sha": "29df771b957809c839d79d3127ea65ad72d4d1e6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         if let Some(ref s) = label {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n-                            err.span_label(span, s.as_str());\n+                            err.span_label(span, s);\n                             if !matches!(trait_ref.skip_binder().self_ty().kind(), ty::Param(_)) {\n                                 // When the self type is a type param We don't need to \"the trait\n                                 // `std::marker::Sized` is not implemented for `T`\" as we will point\n@@ -531,7 +531,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             let enclosing_scope_span =\n                                 tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(body));\n \n-                            err.span_label(enclosing_scope_span, s.as_str());\n+                            err.span_label(enclosing_scope_span, s);\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);\n@@ -2104,6 +2104,98 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         );\n                     }\n                 }\n+\n+                if let (Some(body_id), Some(ty::subst::GenericArgKind::Type(_))) =\n+                    (body_id, subst.map(|subst| subst.unpack()))\n+                {\n+                    struct FindExprBySpan<'hir> {\n+                        span: Span,\n+                        result: Option<&'hir hir::Expr<'hir>>,\n+                    }\n+\n+                    impl<'v> hir::intravisit::Visitor<'v> for FindExprBySpan<'v> {\n+                        fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+                            if self.span == ex.span {\n+                                self.result = Some(ex);\n+                            } else {\n+                                hir::intravisit::walk_expr(self, ex);\n+                            }\n+                        }\n+                    }\n+\n+                    let mut expr_finder = FindExprBySpan { span, result: None };\n+\n+                    expr_finder.visit_expr(&self.tcx.hir().body(body_id).value);\n+\n+                    if let Some(hir::Expr {\n+                        kind: hir::ExprKind::Path(hir::QPath::Resolved(None, path)), .. }\n+                    ) = expr_finder.result\n+                        && let [\n+                            ..,\n+                            trait_path_segment @ hir::PathSegment {\n+                                res: Some(rustc_hir::def::Res::Def(rustc_hir::def::DefKind::Trait, trait_id)),\n+                                ..\n+                            },\n+                            hir::PathSegment {\n+                                ident: assoc_item_name,\n+                                res: Some(rustc_hir::def::Res::Def(_, item_id)),\n+                                ..\n+                            }\n+                        ] = path.segments\n+                        && data.trait_ref.def_id == *trait_id\n+                        && self.tcx.trait_of_item(item_id) == Some(*trait_id)\n+                        && !self.is_tainted_by_errors()\n+                    {\n+                        let (verb, noun) = match self.tcx.associated_item(item_id).kind {\n+                            ty::AssocKind::Const => (\"refer to the\", \"constant\"),\n+                            ty::AssocKind::Fn => (\"call\", \"function\"),\n+                            ty::AssocKind::Type => (\"refer to the\", \"type\"), // this is already covered by E0223, but this single match arm doesn't hurt here\n+                        };\n+\n+                        // Replace the more general E0283 with a more specific error\n+                        err.cancel();\n+                        err = self.tcx.sess.struct_span_err_with_code(\n+                            span,\n+                            &format!(\n+                                \"cannot {verb} associated {noun} on trait without specifying the corresponding `impl` type\",\n+                             ),\n+                            rustc_errors::error_code!(E0790),\n+                        );\n+\n+                        if let Some(local_def_id) = data.trait_ref.def_id.as_local()\n+                            && let Some(hir::Node::Item(hir::Item { ident: trait_name, kind: hir::ItemKind::Trait(_, _, _, _, trait_item_refs), .. })) = self.tcx.hir().find_by_def_id(local_def_id)\n+                            && let Some(method_ref) = trait_item_refs.iter().find(|item_ref| item_ref.ident == *assoc_item_name) {\n+                            err.span_label(method_ref.span, format!(\"`{}::{}` defined here\", trait_name, assoc_item_name));\n+                        }\n+\n+                        err.span_label(span, format!(\"cannot {verb} associated {noun} of trait\"));\n+\n+                        let trait_impls = self.tcx.trait_impls_of(data.trait_ref.def_id);\n+\n+                        if trait_impls.blanket_impls().is_empty()\n+                            && let Some((impl_ty, _)) = trait_impls.non_blanket_impls().iter().next()\n+                            && let Some(impl_def_id) = impl_ty.def() {\n+                            let message = if trait_impls.non_blanket_impls().len() == 1 {\n+                                \"use the fully-qualified path to the only available implementation\".to_string()\n+                            } else {\n+                                format!(\n+                                    \"use a fully-qualified path to a specific available implementation ({} found)\",\n+                                    trait_impls.non_blanket_impls().len()\n+                                )\n+                            };\n+\n+                            err.multipart_suggestion(\n+                                message,\n+                                vec![\n+                                    (trait_path_segment.ident.span.shrink_to_lo(), format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())),\n+                                    (trait_path_segment.ident.span.shrink_to_hi(), format!(\">\"))\n+                                ],\n+                                Applicability::MaybeIncorrect\n+                            );\n+                        }\n+                    }\n+                };\n+\n                 err\n             }\n "}, {"sha": "c733f0d3c86d055fd3d611c6ccaa46d4695e4ab9", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &cause,\n             &mut |err| {\n                 if let Some((span, msg)) = &ret_reason {\n-                    err.span_label(*span, msg.as_str());\n+                    err.span_label(*span, msg);\n                 } else if let ExprKind::Block(block, _) = &then_expr.kind\n                     && let Some(expr) = &block.expr\n                 {"}, {"sha": "a2d8765289c55498ae098f049d3ea424b386a5aa", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -33,6 +33,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n+        self.suggest_non_zero_new_unwrap(err, expr, expected, expr_ty);\n         if self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty) {\n             return;\n         }\n@@ -347,14 +348,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            let compatible_variants: Vec<String> = expected_adt\n+            let compatible_variants: Vec<(String, Option<String>)> = expected_adt\n                 .variants()\n                 .iter()\n                 .filter(|variant| {\n                     variant.fields.len() == 1 && variant.ctor_kind == hir::def::CtorKind::Fn\n                 })\n                 .filter_map(|variant| {\n                     let sole_field = &variant.fields[0];\n+\n+                    let field_is_local = sole_field.did.is_local();\n+                    let field_is_accessible =\n+                        sole_field.vis.is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx);\n+\n+                    if !field_is_local && !field_is_accessible {\n+                        return None;\n+                    }\n+\n+                    let note_about_variant_field_privacy = (field_is_local && !field_is_accessible)\n+                        .then(|| format!(\" (its field is private, but it's local to this crate and its privacy can be changed)\"));\n+\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n                         let variant_path =\n@@ -363,9 +376,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\")\n                             && let Some((_, path)) = path.split_once(\"::\")\n                         {\n-                            return Some(path.to_string());\n+                            return Some((path.to_string(), note_about_variant_field_privacy));\n                         }\n-                        Some(variant_path)\n+                        Some((variant_path, note_about_variant_field_privacy))\n                     } else {\n                         None\n                     }\n@@ -379,10 +392,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match &compatible_variants[..] {\n                 [] => { /* No variants to format */ }\n-                [variant] => {\n+                [(variant, note)] => {\n                     // Just a single matching variant.\n                     err.multipart_suggestion_verbose(\n-                        &format!(\"try wrapping the expression in `{variant}`\"),\n+                        &format!(\n+                            \"try wrapping the expression in `{variant}`{note}\",\n+                            note = note.as_deref().unwrap_or(\"\")\n+                        ),\n                         vec![\n                             (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n                             (expr.span.shrink_to_hi(), \")\".to_string()),\n@@ -397,7 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"try wrapping the expression in a variant of `{}`\",\n                             self.tcx.def_path_str(expected_adt.did())\n                         ),\n-                        compatible_variants.into_iter().map(|variant| {\n+                        compatible_variants.into_iter().map(|(variant, _)| {\n                             vec![\n                                 (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}(\")),\n                                 (expr.span.shrink_to_hi(), \")\".to_string()),\n@@ -410,6 +426,57 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_non_zero_new_unwrap(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        expr_ty: Ty<'tcx>,\n+    ) {\n+        let tcx = self.tcx;\n+        let (adt, unwrap) = match expected.kind() {\n+            // In case Option<NonZero*> is wanted, but * is provided, suggest calling new\n+            ty::Adt(adt, substs) if tcx.is_diagnostic_item(sym::Option, adt.did()) => {\n+                // Unwrap option\n+                let ty::Adt(adt, _) = substs.type_at(0).kind() else { return };\n+\n+                (adt, \"\")\n+            }\n+            // In case NonZero* is wanted, but * is provided also add `.unwrap()` to satisfy types\n+            ty::Adt(adt, _) => (adt, \".unwrap()\"),\n+            _ => return,\n+        };\n+\n+        let map = [\n+            (sym::NonZeroU8, tcx.types.u8),\n+            (sym::NonZeroU16, tcx.types.u16),\n+            (sym::NonZeroU32, tcx.types.u32),\n+            (sym::NonZeroU64, tcx.types.u64),\n+            (sym::NonZeroU128, tcx.types.u128),\n+            (sym::NonZeroI8, tcx.types.i8),\n+            (sym::NonZeroI16, tcx.types.i16),\n+            (sym::NonZeroI32, tcx.types.i32),\n+            (sym::NonZeroI64, tcx.types.i64),\n+            (sym::NonZeroI128, tcx.types.i128),\n+        ];\n+\n+        let Some((s, _)) = map\n+            .iter()\n+            .find(|&&(s, t)| self.tcx.is_diagnostic_item(s, adt.did()) && self.can_coerce(expr_ty, t))\n+            else { return };\n+\n+        let path = self.tcx.def_path_str(adt.non_enum_variant().def_id);\n+\n+        err.multipart_suggestion(\n+            format!(\"consider calling `{s}::new`\"),\n+            vec![\n+                (expr.span.shrink_to_lo(), format!(\"{path}::new(\")),\n+                (expr.span.shrink_to_hi(), format!(\"){unwrap}\")),\n+            ],\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub fn get_conversion_methods(\n         &self,\n         span: Span,"}, {"sha": "a2daf6886f1ec796390ff764e0e60fe8ef75af3a", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -408,8 +408,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 false,\n                             ),\n                         };\n-                        let mut err =\n-                            struct_span_err!(self.tcx.sess, op.span, E0369, \"{}\", message.as_str());\n+                        let mut err = struct_span_err!(self.tcx.sess, op.span, E0369, \"{message}\");\n                         if !lhs_expr.span.eq(&rhs_expr.span) {\n                             self.add_type_neq_err_label(\n                                 &mut err,"}, {"sha": "4de0a0cf564c576928718c32ed85fa2f623d01f4", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -39,6 +39,7 @@ macro_rules! nonzero_integers {\n             #[repr(transparent)]\n             #[rustc_layout_scalar_valid_range_start(1)]\n             #[rustc_nonnull_optimization_guaranteed]\n+            #[rustc_diagnostic_item = stringify!($Ty)]\n             pub struct $Ty($Int);\n \n             impl $Ty {"}, {"sha": "c5f89b9a2c6082a412b79f4b91c9c9cfaa7c6875", "filename": "library/core/src/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -11,7 +11,7 @@ mod wake;\n pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n \n mod ready;\n-#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n+#[stable(feature = \"ready_macro\", since = \"1.64.0\")]\n pub use ready::ready;\n #[unstable(feature = \"poll_ready\", issue = \"89780\")]\n pub use ready::Ready;"}, {"sha": "b1daf545fbe7b5fef54e40ab2a6e826fcb52794d", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -13,8 +13,6 @@ use core::task::Poll;\n /// # Examples\n ///\n /// ```\n-/// #![feature(ready_macro)]\n-///\n /// use std::task::{ready, Context, Poll};\n /// use std::future::{self, Future};\n /// use std::pin::Pin;\n@@ -34,7 +32,6 @@ use core::task::Poll;\n /// The `ready!` call expands to:\n ///\n /// ```\n-/// # #![feature(ready_macro)]\n /// # use std::task::{Context, Poll};\n /// # use std::future::{self, Future};\n /// # use std::pin::Pin;\n@@ -53,7 +50,7 @@ use core::task::Poll;\n ///     # Poll::Ready(())\n /// # }\n /// ```\n-#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n+#[stable(feature = \"ready_macro\", since = \"1.64.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro ready($e:expr) {\n     match $e {"}, {"sha": "67ef4e74cf2e0824b449f485150739b36796ba7a", "filename": "src/test/ui/associated-consts/issue-63496.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -2,8 +2,8 @@ trait A {\n     const C: usize;\n \n     fn f() -> ([u8; A::C], [u8; A::C]);\n-    //~^ ERROR: type annotations needed\n-    //~| ERROR: type annotations needed\n+    //~^ ERROR: E0790\n+    //~| ERROR: E0790\n }\n \n fn main() {}"}, {"sha": "f2a4e01adea43a4ddfadd372e7d4ab766577191b", "filename": "src/test/ui/associated-consts/issue-63496.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,27 +1,21 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-63496.rs:4:21\n    |\n+LL |     const C: usize;\n+   |     --------------- `A::C` defined here\n+LL |\n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                     ^^^^\n-   |                     |\n-   |                     cannot infer type\n-   |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n-   |\n-   = note: cannot satisfy `_: A`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                     ^^^^ cannot refer to the associated constant of trait\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-63496.rs:4:33\n    |\n+LL |     const C: usize;\n+   |     --------------- `A::C` defined here\n+LL |\n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                                 ^^^^\n-   |                                 |\n-   |                                 cannot infer type\n-   |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n-   |\n-   = note: cannot satisfy `_: A`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                                 ^^^^ cannot refer to the associated constant of trait\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "d2b51184c999aa666aed784c9bb100eaecfff806", "filename": "src/test/ui/associated-item/issue-48027.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,6 +1,6 @@\n trait Bar {\n     const X: usize;\n-    fn return_n(&self) -> [u8; Bar::X]; //~ ERROR: type annotations needed\n+    fn return_n(&self) -> [u8; Bar::X]; //~ ERROR: E0790\n }\n \n impl dyn Bar {} //~ ERROR: the trait `Bar` cannot be made into an object"}, {"sha": "45ea419336b2c72c1dca32e9a1ac0a8ff558f0ef", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -13,19 +13,15 @@ LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-48027.rs:3:32\n    |\n+LL |     const X: usize;\n+   |     --------------- `Bar::X` defined here\n LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^\n-   |                                |\n-   |                                cannot infer type\n-   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n-   |\n-   = note: cannot satisfy `_: Bar`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                                ^^^^^^ cannot refer to the associated constant of trait\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0038, E0283.\n+Some errors have detailed explanations: E0038, E0790.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "2fb27bf3cd1ebc96198a68de9641c208638ebd84", "filename": "src/test/ui/associated-types/associated-types-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -12,5 +12,5 @@ impl Foo for isize {\n \n pub fn main() {\n     let x: isize = Foo::bar();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR E0790\n }"}, {"sha": "e51a8f3bd1a3ae05363f2db0ff0862ae66d0956d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,11 +1,12 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/associated-types-unconstrained.rs:14:20\n    |\n+LL |     fn bar() -> isize;\n+   |     ------------------ `Foo::bar` defined here\n+...\n LL |     let x: isize = Foo::bar();\n-   |                    ^^^^^^^^ cannot infer type\n-   |\n-   = note: cannot satisfy `_: Foo`\n+   |                    ^^^^^^^^ cannot call associated function of trait\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "0643af4b7e8c6659d524e0d68c6b6031220909e6", "filename": "src/test/ui/error-codes/E0283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -27,7 +27,7 @@ impl Generator for AnotherImpl {\n }\n \n fn main() {\n-    let cont: u32 = Generator::create(); //~ ERROR E0283\n+    let cont: u32 = Generator::create(); //~ ERROR E0790\n }\n \n fn buzz() {"}, {"sha": "90a28874ead8c7a073e535597305186689b0270b", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,10 +1,16 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0283.rs:30:21\n    |\n+LL |     fn create() -> u32;\n+   |     ------------------- `Generator::create` defined here\n+...\n LL |     let cont: u32 = Generator::create();\n-   |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n+   |                     ^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use a fully-qualified path to a specific available implementation (2 found)\n    |\n-   = note: cannot satisfy `_: Generator`\n+LL |     let cont: u32 = <::Impl as Generator>::create();\n+   |                     ++++++++++          +\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24\n@@ -27,4 +33,5 @@ LL |     let bar = <Impl as Into<T>>::into(foo_impl) * 1u32;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0283, E0790.\n+For more information about an error, try `rustc --explain E0283`."}, {"sha": "d99006d2df734964e081bd98a39b809262bdcf71", "filename": "src/test/ui/error-codes/E0790.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0790.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0790.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,53 @@\n+mod inner {\n+    pub trait MyTrait {\n+        const MY_ASSOC_CONST: ();\n+\n+        fn my_fn();\n+    }\n+\n+    pub struct MyStruct;\n+\n+    impl MyTrait for MyStruct {\n+        const MY_ASSOC_CONST: () = ();\n+\n+        fn my_fn() {}\n+    }\n+\n+    fn call() {\n+        MyTrait::my_fn(); //~ ERROR E0790\n+    }\n+\n+    fn use_const() {\n+        let _ = MyTrait::MY_ASSOC_CONST; //~ ERROR E0790\n+    }\n+}\n+\n+fn call_inner() {\n+    inner::MyTrait::my_fn(); //~ ERROR E0790\n+}\n+\n+fn use_const_inner() {\n+    let _ = inner::MyTrait::MY_ASSOC_CONST; //~ ERROR E0790\n+}\n+\n+trait MyTrait2 {\n+    fn my_fn();\n+}\n+\n+struct Impl1;\n+\n+impl MyTrait2 for Impl1 {\n+    fn my_fn() {}\n+}\n+\n+struct Impl2;\n+\n+impl MyTrait2 for Impl2 {\n+    fn my_fn() {}\n+}\n+\n+fn call_multiple_impls() {\n+    MyTrait2::my_fn(); //~ ERROR E0790\n+}\n+\n+fn main() {}"}, {"sha": "6e173a9682a0c2f7442e9196bdb53949af28f1bb", "filename": "src/test/ui/error-codes/E0790.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,73 @@\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:17:9\n+   |\n+LL |         fn my_fn();\n+   |         ----------- `MyTrait::my_fn` defined here\n+...\n+LL |         MyTrait::my_fn();\n+   |         ^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |         <::inner::MyStruct as MyTrait>::my_fn();\n+   |         +++++++++++++++++++++        +\n+\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:21:17\n+   |\n+LL |         const MY_ASSOC_CONST: ();\n+   |         ------------------------- `MyTrait::MY_ASSOC_CONST` defined here\n+...\n+LL |         let _ = MyTrait::MY_ASSOC_CONST;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ cannot refer to the associated constant of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |         let _ = <::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                 +++++++++++++++++++++        +\n+\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:26:5\n+   |\n+LL |         fn my_fn();\n+   |         ----------- `MyTrait::my_fn` defined here\n+...\n+LL |     inner::MyTrait::my_fn();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     inner::<::inner::MyStruct as MyTrait>::my_fn();\n+   |            +++++++++++++++++++++        +\n+\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:30:13\n+   |\n+LL |         const MY_ASSOC_CONST: ();\n+   |         ------------------------- `MyTrait::MY_ASSOC_CONST` defined here\n+...\n+LL |     let _ = inner::MyTrait::MY_ASSOC_CONST;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot refer to the associated constant of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     let _ = inner::<::inner::MyStruct as MyTrait>::MY_ASSOC_CONST;\n+   |                    +++++++++++++++++++++        +\n+\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/E0790.rs:50:5\n+   |\n+LL |     fn my_fn();\n+   |     ----------- `MyTrait2::my_fn` defined here\n+...\n+LL |     MyTrait2::my_fn();\n+   |     ^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use a fully-qualified path to a specific available implementation (2 found)\n+   |\n+LL |     <::Impl1 as MyTrait2>::my_fn();\n+   |     +++++++++++         +\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "d4e1df22770948d7ecaba87a6fc9625b55d97c0f", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,5 +1,5 @@\n const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-//~^ ERROR type annotations needed\n+//~^ ERROR E0790\n \n trait Tt {\n     const fn const_val<T: Sized>() -> usize {"}, {"sha": "668985c2b5914c6bcc4c74d23c720cd8fce360c9", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -4,13 +4,17 @@ error[E0379]: functions in traits cannot be declared const\n LL |     const fn const_val<T: Sized>() -> usize {\n    |     ^^^^^ functions in traits cannot be const\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-54954.rs:1:24\n    |\n-LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-   |\n-   = note: cannot satisfy `_: Tt`\n+LL |   const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+...\n+LL | /     const fn const_val<T: Sized>() -> usize {\n+LL | |\n+LL | |         core::mem::size_of::<T>()\n+LL | |     }\n+   | |_____- `Tt::const_val` defined here\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-54954.rs:11:15\n@@ -26,5 +30,5 @@ LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0080, E0283, E0379.\n+Some errors have detailed explanations: E0080, E0379, E0790.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "2a8a1eaa6d3a3054ad5c5494ed28039a3d7a91ad", "filename": "src/test/ui/issues/issue-58022.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -2,7 +2,7 @@ pub trait Foo: Sized {\n     const SIZE: usize;\n \n     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-    //~^ ERROR: type annotations needed\n+    //~^ ERROR: E0790\n }\n \n pub struct Bar<T: ?Sized>(T);"}, {"sha": "6d24209ad3c7eea3ea990fdc7dad7fc1256effd8", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -4,19 +4,16 @@ error[E0423]: expected function, tuple struct or tuple variant, found trait `Foo\n LL |         Foo(Box::new(*slice))\n    |         ^^^ not a function, tuple struct or tuple variant\n \n-error[E0283]: type annotations needed\n+error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-58022.rs:4:25\n    |\n+LL |     const SIZE: usize;\n+   |     ------------------ `Foo::SIZE` defined here\n+LL |\n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-   |                         ^^^^^^^^^\n-   |                         |\n-   |                         cannot infer type\n-   |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n-   |\n-   = note: cannot satisfy `_: Foo`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+   |                         ^^^^^^^^^ cannot refer to the associated constant of trait\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0283, E0423.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0423, E0790.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "c248c46f52cd35fa9676dbdd9e91247ca22f5ec7", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/allowed-features.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fallowed-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fallowed-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fallowed-features.rs?ref=8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd", "patch": "@@ -1,12 +0,0 @@\n-// check-pass\n-\n-macro_rules! dollar_dollar {\n-    () => {\n-        macro_rules! bar {\n-            ( $$( $$any:tt )* ) => { $$( $$any )* };\n-        }\n-    };\n-}\n-\n-fn main() {\n-}"}, {"sha": "b4fef11f1e29a0546d5f71a062de9d5998c79a69", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-feature.rs", "status": "renamed", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -5,6 +5,18 @@ macro_rules! count {\n     };\n }\n \n+macro_rules! dollar_dollar {\n+    () => {\n+        macro_rules! bar {\n+            ( $$( $$any:tt )* ) => { $$( $$any )* };\n+            //~^ ERROR meta-variable expressions are unstable\n+            //~| ERROR meta-variable expressions are unstable\n+            //~| ERROR meta-variable expressions are unstable\n+            //~| ERROR meta-variable expressions are unstable\n+        }\n+    };\n+}\n+\n macro_rules! index {\n     ( $( $e:stmt ),* ) => {\n         $( ${ignore(e)} ${index()} )*", "previous_filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-features.rs"}, {"sha": "ecf598b104d058240ac7990f15e16725e1952ab8", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-feature.stderr", "status": "renamed", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Frequired-feature.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-features.rs:3:10\n+  --> $DIR/required-feature.rs:3:10\n    |\n LL |         ${ count(e) }\n    |          ^^^^^^^^^^^^\n@@ -8,7 +8,43 @@ LL |         ${ count(e) }\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-features.rs:10:13\n+  --> $DIR/required-feature.rs:11:16\n+   |\n+LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n+   |                ^\n+   |\n+   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n+   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n+\n+error[E0658]: meta-variable expressions are unstable\n+  --> $DIR/required-feature.rs:11:20\n+   |\n+LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n+   |                    ^\n+   |\n+   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n+   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n+\n+error[E0658]: meta-variable expressions are unstable\n+  --> $DIR/required-feature.rs:11:39\n+   |\n+LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n+   |                                       ^\n+   |\n+   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n+   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n+\n+error[E0658]: meta-variable expressions are unstable\n+  --> $DIR/required-feature.rs:11:43\n+   |\n+LL |             ( $$( $$any:tt )* ) => { $$( $$any )* };\n+   |                                           ^\n+   |\n+   = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n+   = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n+\n+error[E0658]: meta-variable expressions are unstable\n+  --> $DIR/required-feature.rs:22:13\n    |\n LL |         $( ${ignore(e)} ${index()} )*\n    |             ^^^^^^^^^^^\n@@ -17,7 +53,7 @@ LL |         $( ${ignore(e)} ${index()} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-features.rs:10:26\n+  --> $DIR/required-feature.rs:22:26\n    |\n LL |         $( ${ignore(e)} ${index()} )*\n    |                          ^^^^^^^^^\n@@ -26,7 +62,7 @@ LL |         $( ${ignore(e)} ${index()} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-features.rs:18:19\n+  --> $DIR/required-feature.rs:30:19\n    |\n LL |         0 $( + 1 ${ignore(i)} )*\n    |                   ^^^^^^^^^^^\n@@ -35,7 +71,7 @@ LL |         0 $( + 1 ${ignore(i)} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-features.rs:25:13\n+  --> $DIR/required-feature.rs:37:13\n    |\n LL |         $( ${ignore(e)} ${length()} )*\n    |             ^^^^^^^^^^^\n@@ -44,14 +80,14 @@ LL |         $( ${ignore(e)} ${length()} )*\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n error[E0658]: meta-variable expressions are unstable\n-  --> $DIR/required-features.rs:25:26\n+  --> $DIR/required-feature.rs:37:26\n    |\n LL |         $( ${ignore(e)} ${length()} )*\n    |                          ^^^^^^^^^^\n    |\n    = note: see issue #83527 <https://github.com/rust-lang/rust/issues/83527> for more information\n    = help: add `#![feature(macro_metavar_expr)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0658`.", "previous_filename": "src/test/ui/macros/rfc-3086-metavar-expr/required-features.stderr"}, {"sha": "d2adbe01c18286f11a66787f469f0d0664a8d479", "filename": "src/test/ui/mismatched_types/non_zero_assigned_something.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let _: std::num::NonZeroU64 = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP  consider calling `NonZeroU64::new`\n+\n+    let _: Option<std::num::NonZeroU64> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP  consider calling `NonZeroU64::new`\n+}"}, {"sha": "d4b2c902f9b2ed4e275dc4c902a4d4acb8f1267d", "filename": "src/test/ui/mismatched_types/non_zero_assigned_something.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,31 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non_zero_assigned_something.rs:2:35\n+   |\n+LL |     let _: std::num::NonZeroU64 = 1;\n+   |            --------------------   ^ expected struct `NonZeroU64`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+help: consider calling `NonZeroU64::new`\n+   |\n+LL |     let _: std::num::NonZeroU64 = NonZeroU64::new(1).unwrap();\n+   |                                   ++++++++++++++++ ++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/non_zero_assigned_something.rs:6:43\n+   |\n+LL |     let _: Option<std::num::NonZeroU64> = 1;\n+   |            ----------------------------   ^ expected enum `Option`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Option<NonZeroU64>`\n+              found type `{integer}`\n+help: consider calling `NonZeroU64::new`\n+   |\n+LL |     let _: Option<std::num::NonZeroU64> = NonZeroU64::new(1);\n+   |                                           ++++++++++++++++ +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "63cb1a1299147d24a0ade82bc97567f6ffb22dc8", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,24 @@\n+mod inner {\n+    pub struct Wrapper<T>(T);\n+}\n+\n+fn needs_wrapper(t: inner::Wrapper<i32>) {}\n+fn needs_wrapping(t: std::num::Wrapping<i32>) {}\n+fn needs_ready(t: std::future::Ready<i32>) {}\n+\n+fn main() {\n+    // Suggest wrapping expression because type is local\n+    // and its privacy can be easily changed\n+    needs_wrapper(0);\n+    //~^ ERROR mismatched types\n+    //~| HELP  try wrapping the expression in `inner::Wrapper`\n+\n+    // Suggest wrapping expression because field is accessible\n+    needs_wrapping(0);\n+    //~^ ERROR mismatched types\n+    //~| HELP  try wrapping the expression in `std::num::Wrapping`\n+\n+    // Do not suggest wrapping expression\n+    needs_ready(Some(0));\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "e8eb8d263ec795d068e71d14ef464dc56020a7e4", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:12:19\n+   |\n+LL |     needs_wrapper(0);\n+   |     ------------- ^ expected struct `Wrapper`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Wrapper<i32>`\n+                found type `{integer}`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:5:4\n+   |\n+LL | fn needs_wrapper(t: inner::Wrapper<i32>) {}\n+   |    ^^^^^^^^^^^^^ ----------------------\n+help: try wrapping the expression in `inner::Wrapper` (its field is private, but it's local to this crate and its privacy can be changed)\n+   |\n+LL |     needs_wrapper(inner::Wrapper(0));\n+   |                   +++++++++++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:17:20\n+   |\n+LL |     needs_wrapping(0);\n+   |     -------------- ^ expected struct `Wrapping`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Wrapping<i32>`\n+                found type `{integer}`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:6:4\n+   |\n+LL | fn needs_wrapping(t: std::num::Wrapping<i32>) {}\n+   |    ^^^^^^^^^^^^^^ --------------------------\n+help: try wrapping the expression in `std::num::Wrapping`\n+   |\n+LL |     needs_wrapping(std::num::Wrapping(0));\n+   |                    +++++++++++++++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:22:17\n+   |\n+LL |     needs_ready(Some(0));\n+   |     ----------- ^^^^^^^ expected struct `std::future::Ready`, found enum `Option`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `std::future::Ready<i32>`\n+                found enum `Option<{integer}>`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:7:4\n+   |\n+LL | fn needs_ready(t: std::future::Ready<i32>) {}\n+   |    ^^^^^^^^^^^ --------------------------\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "882f314655d8377092265a0880836e1b97bc67f3", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -23,7 +23,13 @@ LL | pub fn foo() {}\n \n error: requires `sized` lang_item\n \n-error: aborting due to 3 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0432, E0603.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "42ce456d962a1562bf81db8b1762099e74059a95", "filename": "src/test/ui/privacy/privacy3.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -6,6 +6,12 @@ LL |     use bar::gpriv;\n \n error: requires `sized` lang_item\n \n-error: aborting due to 2 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "f4e94c4f7867c024c1d880b6a059543fb2b6b600", "filename": "src/test/ui/traits/static-method-generic-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -22,7 +22,7 @@ mod base {\n \n pub fn foo() {\n     let _f: base::Foo = base::HasNew::new();\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR E0790\n }\n \n fn main() { }"}, {"sha": "f1b8f23ecc7dbbd5bf4479a93448f175ebc6b1ed", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1,11 +1,17 @@\n-error[E0283]: type annotations needed\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/static-method-generic-inference.rs:24:25\n    |\n+LL |         fn new() -> T;\n+   |         -------------- `HasNew::new` defined here\n+...\n LL |     let _f: base::Foo = base::HasNew::new();\n-   |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n+   |                         ^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n    |\n-   = note: cannot satisfy `_: HasNew<Foo>`\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     let _f: base::Foo = base::<::base::Foo as HasNew>::new();\n+   |                               +++++++++++++++       +\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "1508b84c1b6e74fe36bd80e8847103bdc4e3325a", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -7,5 +7,14 @@ LL | pub fn drop<T>(_x: T) {}\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n \n-error: aborting due to previous error\n+error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n+   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "175018a7d71a71ac182efea4d7075c2d429dbd42", "filename": "src/test/ui/union/issue-99375.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a289cfcfb32593c63d75f113547f63ffe2dde285/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+union URes<R: Copy> {\n+    uninit: (),\n+    init: R,\n+}\n+\n+struct Params<F, R: Copy> {\n+    function: F,\n+    result: URes<R>,\n+}\n+\n+unsafe extern \"C\" fn do_call<F, R>(params: *mut Params<F, R>)\n+where\n+    R: Copy,\n+    F: Fn() -> R,\n+{\n+    (*params).result.init = ((*params).function)();\n+}\n+\n+fn main() {}"}, {"sha": "897a7ec4b826f85ec1626870e734490701138097", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=a289cfcfb32593c63d75f113547f63ffe2dde285", "patch": "@@ -1 +1 @@\n-Subproject commit 5342f47f4276641ddb5f0a5e08fb307742d6cdc4\n+Subproject commit 897a7ec4b826f85ec1626870e734490701138097"}]}