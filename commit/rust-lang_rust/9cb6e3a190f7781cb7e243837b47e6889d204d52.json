{"sha": "9cb6e3a190f7781cb7e243837b47e6889d204d52", "node_id": "C_kwDOAAsO6NoAKDljYjZlM2ExOTBmNzc4MWNiN2UyNDM4MzdiNDdlNjg4OWQyMDRkNTI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-02T11:42:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T11:42:40Z"}, "message": "Merge #11394\n\n11394: feat: Deprioritize completions of private but editable definitions r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "dd151f839af3ad2be99abacc934d93b221c7775e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd151f839af3ad2be99abacc934d93b221c7775e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb6e3a190f7781cb7e243837b47e6889d204d52", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+m4wCRBK7hj4Ov3rIwAARF8IAFw9dc1O5ii/IUYk71VNmsSw\n4ItaxjNndwxzjAqLw2igkPqfofgOzazXNCRE6Ed6Vft6otuazj1K7fPw6TRsQ1gQ\nV5aniO51zPBnXHw0heCJqeqNkVdyD4DY2XY5+B9wGGK9Xbtf+IR/oqBg3Xgq1OE+\n8EomW/qQmqdK6ttYTbJMWACCTi2NVbmKnRM8OD0Z90Ohxxs4Xu0KaWovchcurWnu\n8wtrjzRe4xCrjBORh5052gcstuuR28wXGcUqL46gQaEYDCuTAxgM+xb6i/DOnCSw\nno0nfnrktkgdFgp4WI63Ey+B9YIgudU1HM+1hFq22boq/oj/Nk8PSpJWmCzQXoU=\n=850s\n-----END PGP SIGNATURE-----\n", "payload": "tree dd151f839af3ad2be99abacc934d93b221c7775e\nparent d20ff927475a072529e4f11740bbd23611ed9045\nparent 2d77eb1e12bacc51b35f890cbf22f8a969622c9e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643802160 +0000\ncommitter GitHub <noreply@github.com> 1643802160 +0000\n\nMerge #11394\n\n11394: feat: Deprioritize completions of private but editable definitions r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb6e3a190f7781cb7e243837b47e6889d204d52", "html_url": "https://github.com/rust-lang/rust/commit/9cb6e3a190f7781cb7e243837b47e6889d204d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb6e3a190f7781cb7e243837b47e6889d204d52/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20ff927475a072529e4f11740bbd23611ed9045", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20ff927475a072529e4f11740bbd23611ed9045", "html_url": "https://github.com/rust-lang/rust/commit/d20ff927475a072529e4f11740bbd23611ed9045"}, {"sha": "2d77eb1e12bacc51b35f890cbf22f8a969622c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d77eb1e12bacc51b35f890cbf22f8a969622c9e", "html_url": "https://github.com/rust-lang/rust/commit/2d77eb1e12bacc51b35f890cbf22f8a969622c9e"}], "stats": {"total": 334, "additions": 199, "deletions": 135}, "files": [{"sha": "ac33d56858c03e89b1c354d7b870525d4fd6af0f", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -111,6 +111,10 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n+    if ctx.sema.resolve_method_call(&call).is_some() {\n+        return None;\n+    }\n+\n     let fn_name = call.name_ref()?;\n     let adt = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references().as_adt()?;\n \n@@ -481,7 +485,12 @@ fn fn_arg_name(sema: &Semantics<RootDatabase>, arg_expr: &ast::Expr) -> String {\n     let name = (|| match arg_expr {\n         ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(sema, &cast_expr.expr()?)),\n         expr => {\n-            let name_ref = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?;\n+            let name_ref = expr\n+                .syntax()\n+                .descendants()\n+                .filter_map(ast::NameRef::cast)\n+                .filter(|name| name.ident_token().is_some())\n+                .last()?;\n             if let Some(NameRefClass::Definition(Definition::Const(_) | Definition::Static(_))) =\n                 NameRefClass::classify(sema, &name_ref)\n             {\n@@ -1660,7 +1669,7 @@ fn main() {\n     foo(a.0);\n }\n \n-fn foo(arg0: ()) ${0:-> _} {\n+fn foo(a: ()) ${0:-> _} {\n     todo!()\n }\n \","}, {"sha": "92074b3e10d6647da6f48b21fde83a90e3394336", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 70, "deletions": 47, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -18,16 +18,16 @@ pub(crate) mod format_string;\n \n use std::iter;\n \n-use hir::known;\n+use hir::{known, ScopeDef};\n use ide_db::SymbolKind;\n \n use crate::{\n+    context::Visible,\n     item::Builder,\n     render::{\n         const_::render_const,\n         enum_variant::render_variant,\n         function::{render_fn, render_method},\n-        macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_tuple_field,\n         struct_literal::render_struct_literal,\n@@ -37,6 +37,22 @@ use crate::{\n     CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n+fn module_or_attr(def: ScopeDef) -> Option<ScopeDef> {\n+    match def {\n+        ScopeDef::MacroDef(mac) if mac.is_attr() => Some(def),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n+        _ => None,\n+    }\n+}\n+\n+fn module_or_fn_macro(def: ScopeDef) -> Option<ScopeDef> {\n+    match def {\n+        ScopeDef::MacroDef(mac) if mac.is_fn_like() => Some(def),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n+        _ => None,\n+    }\n+}\n+\n /// Represents an in-progress set of completions being built.\n #[derive(Debug, Default)]\n pub struct Completions {\n@@ -91,20 +107,7 @@ impl Completions {\n             cov_mark::hit!(qualified_path_doc_hidden);\n             return;\n         }\n-        self.add(render_resolution(RenderContext::new(ctx), local_name, resolution));\n-    }\n-\n-    pub(crate) fn add_macro(\n-        &mut self,\n-        ctx: &CompletionContext,\n-        name: Option<hir::Name>,\n-        macro_: hir::MacroDef,\n-    ) {\n-        let name = match name {\n-            Some(it) => it,\n-            None => return,\n-        };\n-        self.add(render_macro(RenderContext::new(ctx), None, name, macro_));\n+        self.add(render_resolution(RenderContext::new(ctx, false), local_name, resolution));\n     }\n \n     pub(crate) fn add_function(\n@@ -113,10 +116,12 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n-        if !ctx.is_visible(&func) {\n-            return;\n-        }\n-        self.add(render_fn(RenderContext::new(ctx), None, local_name, func));\n+        let is_private_editable = match ctx.is_visible(&func) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add(render_fn(RenderContext::new(ctx, is_private_editable), None, local_name, func));\n     }\n \n     pub(crate) fn add_method(\n@@ -126,32 +131,44 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n-        if !ctx.is_visible(&func) {\n-            return;\n-        }\n-        self.add(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n+        let is_private_editable = match ctx.is_visible(&func) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add(render_method(\n+            RenderContext::new(ctx, is_private_editable),\n+            None,\n+            receiver,\n+            local_name,\n+            func,\n+        ));\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, konst: hir::Const) {\n-        if !ctx.is_visible(&konst) {\n-            return;\n-        }\n-        self.add_opt(render_const(RenderContext::new(ctx), konst));\n+        let is_private_editable = match ctx.is_visible(&konst) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add_opt(render_const(RenderContext::new(ctx, is_private_editable), konst));\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        if !ctx.is_visible(&type_alias) {\n-            return;\n-        }\n-        self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n+        let is_private_editable = match ctx.is_visible(&type_alias) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add_opt(render_type_alias(RenderContext::new(ctx, is_private_editable), type_alias));\n     }\n \n     pub(crate) fn add_type_alias_with_eq(\n         &mut self,\n         ctx: &CompletionContext,\n         type_alias: hir::TypeAlias,\n     ) {\n-        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx), type_alias));\n+        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx, false), type_alias));\n     }\n \n     pub(crate) fn add_qualified_enum_variant(\n@@ -160,7 +177,7 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        let item = render_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n+        let item = render_variant(RenderContext::new(ctx, false), None, None, variant, Some(path));\n         self.add(item);\n     }\n \n@@ -170,7 +187,7 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n+        let item = render_variant(RenderContext::new(ctx, false), None, local_name, variant, None);\n         self.add(item);\n     }\n \n@@ -181,10 +198,12 @@ impl Completions {\n         field: hir::Field,\n         ty: &hir::Type,\n     ) {\n-        if !ctx.is_visible(&field) {\n-            return;\n-        }\n-        let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n+        let is_private_editable = match ctx.is_visible(&field) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        let item = render_field(RenderContext::new(ctx, is_private_editable), receiver, field, ty);\n         self.add(item);\n     }\n \n@@ -195,7 +214,7 @@ impl Completions {\n         path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_struct_literal(RenderContext::new(ctx), strukt, path, local_name);\n+        let item = render_struct_literal(RenderContext::new(ctx, false), strukt, path, local_name);\n         self.add_opt(item);\n     }\n \n@@ -206,13 +225,17 @@ impl Completions {\n         field: usize,\n         ty: &hir::Type,\n     ) {\n-        let item = render_tuple_field(RenderContext::new(ctx), receiver, field, ty);\n+        let item = render_tuple_field(RenderContext::new(ctx, false), receiver, field, ty);\n         self.add(item);\n     }\n \n-    pub(crate) fn add_static_lifetime(&mut self, ctx: &CompletionContext) {\n-        let item = CompletionItem::new(SymbolKind::LifetimeParam, ctx.source_range(), \"'static\");\n-        self.add(item.build());\n+    pub(crate) fn add_lifetime(&mut self, ctx: &CompletionContext, name: hir::Name) {\n+        CompletionItem::new(SymbolKind::LifetimeParam, ctx.source_range(), name.to_smol_str())\n+            .add_to(self)\n+    }\n+\n+    pub(crate) fn add_label(&mut self, ctx: &CompletionContext, name: hir::Name) {\n+        CompletionItem::new(SymbolKind::Label, ctx.source_range(), name.to_smol_str()).add_to(self)\n     }\n \n     pub(crate) fn add_variant_pat(\n@@ -221,7 +244,7 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, local_name, None));\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx, false), variant, local_name, None));\n     }\n \n     pub(crate) fn add_qualified_variant_pat(\n@@ -230,7 +253,7 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)));\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx, false), variant, None, Some(path)));\n     }\n \n     pub(crate) fn add_struct_pat(\n@@ -239,7 +262,7 @@ impl Completions {\n         strukt: hir::Struct,\n         local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_struct_pat(RenderContext::new(ctx), strukt, local_name));\n+        self.add_opt(render_struct_pat(RenderContext::new(ctx, false), strukt, local_name));\n     }\n }\n "}, {"sha": "8ca4634be25d2bffa6ecde931b61d25453762164", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -193,7 +193,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             })\n             .filter_map(|import| {\n                 render_resolution_with_import(\n-                    RenderContext::new(ctx),\n+                    RenderContext::new(ctx, false),\n                     ImportEdit { import, scope: import_scope.clone() },\n                 )\n             }),"}, {"sha": "878d72ea0fb9b72840687050233f164b6eb92e3a", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -7,7 +7,7 @@\n //! there is no value in lifting these out into the outline module test since they will either not\n //! show up for normal completions, or they won't show completions other than lifetimes depending\n //! on the fixture input.\n-use hir::ScopeDef;\n+use hir::{known, ScopeDef};\n use syntax::ast;\n \n use crate::{\n@@ -35,12 +35,12 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n             if param_lifetime != Some(&*name.to_smol_str()) {\n-                acc.add_resolution(ctx, name, res);\n+                acc.add_lifetime(ctx, name);\n             }\n         }\n     });\n     if param_lifetime.is_none() {\n-        acc.add_static_lifetime(ctx);\n+        acc.add_lifetime(ctx, known::STATIC_LIFETIME);\n     }\n }\n \n@@ -51,7 +51,7 @@ pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::Label(_) = res {\n-            acc.add_resolution(ctx, name, res);\n+            acc.add_label(ctx, name);\n         }\n     });\n }"}, {"sha": "7699c530c63454a189b89ecc5fca0f6f190e6087", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -13,7 +13,7 @@ use crate::{patterns::ImmediateLocation, CompletionItem};\n \n use crate::{context::CompletionContext, Completions};\n \n-/// Complete mod declaration, i.e. `mod $0 ;`\n+/// Complete mod declaration, i.e. `mod $0;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let mod_under_caret = match &ctx.completion_location {\n         Some(ImmediateLocation::ModDeclaration(mod_under_caret)) => mod_under_caret,"}, {"sha": "cd1022b2e357cda7b60d010bb79b4c92972ff321", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -7,6 +7,7 @@ use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n+    completions::{module_or_attr, module_or_fn_macro},\n     context::{PathCompletionContext, PathKind},\n     patterns::ImmediateLocation,\n     CompletionContext, Completions,\n@@ -57,12 +58,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 for (name, def) in module.scope(ctx.db, context_module) {\n-                    if let ScopeDef::MacroDef(macro_def) = def {\n-                        if macro_def.is_fn_like() {\n-                            acc.add_macro(ctx, Some(name.clone()), macro_def);\n-                        }\n-                    }\n-                    if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n+                    if let Some(def) = module_or_fn_macro(def) {\n                         acc.add_resolution(ctx, name, def);\n                     }\n                 }\n@@ -73,16 +69,18 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     }\n \n     match kind {\n+        // Complete next child module that comes after the qualified module which is still our parent\n         Some(PathKind::Vis { .. }) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 if let Some(current_module) = ctx.module {\n-                    if let Some(next) = current_module\n+                    let next_towards_current = current_module\n                         .path_to_root(ctx.db)\n                         .into_iter()\n                         .take_while(|&it| it != module)\n-                        .next()\n-                    {\n+                        .next();\n+                    if let Some(next) = next_towards_current {\n                         if let Some(name) = next.name(ctx.db) {\n+                            cov_mark::hit!(visibility_qualified);\n                             acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n                         }\n                     }\n@@ -93,12 +91,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         Some(PathKind::Attr) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 for (name, def) in module.scope(ctx.db, context_module) {\n-                    let add_resolution = match def {\n-                        ScopeDef::MacroDef(mac) => mac.is_attr(),\n-                        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n-                        _ => false,\n-                    };\n-                    if add_resolution {\n+                    if let Some(def) = module_or_attr(def) {\n                         acc.add_resolution(ctx, name, def);\n                     }\n                 }\n@@ -263,7 +256,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 );\n             }\n         }\n-        hir::PathResolution::Macro(mac) => acc.add_macro(ctx, None, mac),\n         _ => {}\n     }\n }"}, {"sha": "13b47356197c69ed665cfb30dd23e979966f05a4", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -3,7 +3,8 @@ use ide_db::SymbolKind;\n use syntax::{ast::Expr, T};\n \n use crate::{\n-    patterns::ImmediateLocation, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+    patterns::ImmediateLocation, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -25,7 +26,10 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                     CompletionItem::new(SymbolKind::Field, ctx.source_range(), completion_text);\n                 let completion_text =\n                     completion_text.strip_prefix(ctx.token.text()).unwrap_or(completion_text);\n-                item.insert_text(completion_text);\n+                item.insert_text(completion_text).set_relevance(CompletionRelevance {\n+                    exact_postfix_snippet_match: true,\n+                    ..Default::default()\n+                });\n                 item.add_to(acc);\n             }\n             if ctx.previous_token_is(T![.]) {"}, {"sha": "7a42cfbd42e7c4a2ad307455f2aa1af1a1910824", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -42,7 +42,7 @@ use text_edit::TextEdit;\n \n use crate::{CompletionContext, CompletionItem, CompletionItemKind, Completions};\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum ImplCompletionKind {\n     All,\n     Fn,\n@@ -53,23 +53,22 @@ enum ImplCompletionKind {\n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some((kind, trigger, impl_def)) = completion_match(ctx.token.clone()) {\n         if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {\n-            get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| match item {\n-                hir::AssocItem::Function(fn_item)\n-                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Fn =>\n-                {\n-                    add_function_impl(&trigger, acc, ctx, fn_item, hir_impl)\n+            get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| {\n+                match (item, kind) {\n+                    (\n+                        hir::AssocItem::Function(fn_item),\n+                        ImplCompletionKind::All | ImplCompletionKind::Fn,\n+                    ) => add_function_impl(&trigger, acc, ctx, fn_item, hir_impl),\n+                    (\n+                        hir::AssocItem::TypeAlias(type_item),\n+                        ImplCompletionKind::All | ImplCompletionKind::TypeAlias,\n+                    ) => add_type_alias_impl(&trigger, acc, ctx, type_item),\n+                    (\n+                        hir::AssocItem::Const(const_item),\n+                        ImplCompletionKind::All | ImplCompletionKind::Const,\n+                    ) => add_const_impl(&trigger, acc, ctx, const_item, hir_impl),\n+                    _ => {}\n                 }\n-                hir::AssocItem::TypeAlias(type_item)\n-                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::TypeAlias =>\n-                {\n-                    add_type_alias_impl(&trigger, acc, ctx, type_item)\n-                }\n-                hir::AssocItem::Const(const_item)\n-                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Const =>\n-                {\n-                    add_const_impl(&trigger, acc, ctx, const_item, hir_impl)\n-                }\n-                _ => {}\n             });\n         }\n     }\n@@ -194,7 +193,7 @@ fn get_transformed_assoc_item(\n \n     transform.apply(assoc_item.syntax());\n     if let ast::AssocItem::Fn(func) = &assoc_item {\n-        func.remove_attrs_and_docs()\n+        func.remove_attrs_and_docs();\n     }\n     Some(assoc_item)\n }"}, {"sha": "7e06b074ce2113f477e6ff7debb20deedd3fadb7", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -4,6 +4,7 @@ use hir::ScopeDef;\n use syntax::{ast, AstNode};\n \n use crate::{\n+    completions::{module_or_attr, module_or_fn_macro},\n     context::{PathCompletionContext, PathKind},\n     patterns::ImmediateLocation,\n     CompletionContext, Completions,\n@@ -36,14 +37,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     match kind {\n         Some(PathKind::Vis { .. }) => return,\n         Some(PathKind::Attr) => {\n-            ctx.process_all_names(&mut |name, res| {\n-                let add_resolution = match res {\n-                    ScopeDef::MacroDef(mac) => mac.is_attr(),\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n-                    _ => false,\n-                };\n-                if add_resolution {\n-                    acc.add_resolution(ctx, name, res);\n+            ctx.process_all_names(&mut |name, def| {\n+                if let Some(def) = module_or_attr(def) {\n+                    acc.add_resolution(ctx, name, def);\n                 }\n             });\n             return;\n@@ -54,14 +50,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     match &ctx.completion_location {\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             // only show macros in {Assoc}ItemList\n-            ctx.process_all_names(&mut |name, res| {\n-                if let hir::ScopeDef::MacroDef(mac) = res {\n-                    if mac.is_fn_like() {\n-                        acc.add_macro(ctx, Some(name.clone()), mac);\n-                    }\n-                }\n-                if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-                    acc.add_resolution(ctx, name, res);\n+            ctx.process_all_names(&mut |name, def| {\n+                if let Some(def) = module_or_fn_macro(def) {\n+                    acc.add_resolution(ctx, name, def);\n                 }\n             });\n             return;"}, {"sha": "ab55d9cc04a663feeb665bac9c3fa525c4674f51", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -34,6 +34,11 @@ pub(crate) enum PatternRefutability {\n     Refutable,\n     Irrefutable,\n }\n+pub(crate) enum Visible {\n+    Yes,\n+    Editable,\n+    No,\n+}\n \n #[derive(Copy, Clone, Debug)]\n pub(super) enum PathKind {\n@@ -103,7 +108,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) token: SyntaxToken,\n     /// The crate of the current file.\n     pub(super) krate: Option<hir::Crate>,\n-    /// The crate of the `scope`.\n+    /// The module of the `scope`.\n     pub(super) module: Option<hir::Module>,\n     pub(super) expected_name: Option<NameOrNameRef>,\n     pub(super) expected_type: Option<Type>,\n@@ -285,7 +290,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     /// Checks if an item is visible and not `doc(hidden)` at the completion site.\n-    pub(crate) fn is_visible<I>(&self, item: &I) -> bool\n+    pub(crate) fn is_visible<I>(&self, item: &I) -> Visible\n     where\n         I: hir::HasVisibility + hir::HasAttrs + hir::HasCrate + Copy,\n     {\n@@ -339,20 +344,24 @@ impl<'a> CompletionContext<'a> {\n         vis: &hir::Visibility,\n         attrs: &hir::Attrs,\n         defining_crate: hir::Crate,\n-    ) -> bool {\n+    ) -> Visible {\n         let module = match self.module {\n             Some(it) => it,\n-            None => return false,\n+            None => return Visible::No,\n         };\n         if !vis.is_visible_from(self.db, module.into()) {\n             // If the definition location is editable, also show private items\n             let root_file = defining_crate.root_file(self.db);\n             let source_root_id = self.db.file_source_root(root_file);\n             let is_editable = !self.db.source_root(source_root_id).is_library;\n-            return is_editable;\n+            return if is_editable { Visible::Editable } else { Visible::No };\n         }\n \n-        !self.is_doc_hidden(attrs, defining_crate)\n+        if self.is_doc_hidden(attrs, defining_crate) {\n+            Visible::No\n+        } else {\n+            Visible::Yes\n+        }\n     }\n \n     fn is_doc_hidden(&self, attrs: &hir::Attrs, defining_crate: hir::Crate) -> bool {"}, {"sha": "acaf17c25510d4c1a07719166ef3077d1d239307", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -141,6 +141,8 @@ pub struct CompletionRelevance {\n     pub is_local: bool,\n     /// Set for method completions of the `core::ops` and `core::cmp` family.\n     pub is_op_method: bool,\n+    /// Set for item completions that are private but in the workspace.\n+    pub is_private_editable: bool,\n     /// This is set in cases like these:\n     ///\n     /// ```\n@@ -177,7 +179,7 @@ pub enum CompletionRelevanceTypeMatch {\n }\n \n impl CompletionRelevance {\n-    const BASE_LINE: u32 = 1;\n+    const BASE_LINE: u32 = 2;\n     /// Provides a relevance score. Higher values are more relevant.\n     ///\n     /// The absolute value of the relevance score is not meaningful, for\n@@ -190,6 +192,15 @@ impl CompletionRelevance {\n     pub fn score(&self) -> u32 {\n         let mut score = Self::BASE_LINE;\n \n+        // score decreases\n+        if self.is_op_method {\n+            score -= 1;\n+        }\n+        if self.is_private_editable {\n+            score -= 1;\n+        }\n+\n+        // score increases\n         if self.exact_name_match {\n             score += 1;\n         }\n@@ -201,9 +212,6 @@ impl CompletionRelevance {\n         if self.is_local {\n             score += 1;\n         }\n-        if self.is_op_method {\n-            score -= 1;\n-        }\n         if self.exact_postfix_snippet_match {\n             score += 100;\n         }\n@@ -214,7 +222,7 @@ impl CompletionRelevance {\n     /// some threshold such that we think it is especially likely\n     /// to be relevant.\n     pub fn is_relevant(&self) -> bool {\n-        self.score() > (Self::BASE_LINE + 1)\n+        self.score() > Self::BASE_LINE\n     }\n }\n \n@@ -564,7 +572,15 @@ mod tests {\n         // This test asserts that the relevance score for these items is ascending, and\n         // that any items in the same vec have the same score.\n         let expected_relevance_order = vec![\n-            vec![CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() }],\n+            vec![CompletionRelevance {\n+                is_op_method: true,\n+                is_private_editable: true,\n+                ..CompletionRelevance::default()\n+            }],\n+            vec![\n+                CompletionRelevance { is_private_editable: true, ..CompletionRelevance::default() },\n+                CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() },\n+            ],\n             vec![CompletionRelevance::default()],\n             vec![\n                 CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },"}, {"sha": "6be265112383e0f7b7a00f15437c6e62f1477a43", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -28,11 +28,15 @@ use crate::{\n #[derive(Debug)]\n pub(crate) struct RenderContext<'a> {\n     completion: &'a CompletionContext<'a>,\n+    is_private_editable: bool,\n }\n \n impl<'a> RenderContext<'a> {\n-    pub(crate) fn new(completion: &'a CompletionContext<'a>) -> RenderContext<'a> {\n-        RenderContext { completion }\n+    pub(crate) fn new(\n+        completion: &'a CompletionContext<'a>,\n+        is_private_editable: bool,\n+    ) -> RenderContext<'a> {\n+        RenderContext { completion, is_private_editable }\n     }\n \n     fn snippet_cap(&self) -> Option<SnippetCap> {\n@@ -47,6 +51,10 @@ impl<'a> RenderContext<'a> {\n         self.completion.source_range()\n     }\n \n+    fn completion_relevance(&self) -> CompletionRelevance {\n+        CompletionRelevance { is_private_editable: self.is_private_editable, ..Default::default() }\n+    }\n+\n     fn is_deprecated(&self, def: impl HasAttrs) -> bool {\n         let attrs = def.attrs(self.db());\n         attrs.by_key(\"deprecated\").exists() || attrs.by_key(\"rustc_deprecated\").exists()\n@@ -582,6 +590,7 @@ fn main() { let _: m::Spam = S$0 }\n                             ),\n                             is_local: false,\n                             is_op_method: false,\n+                            is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                         trigger_call_info: true,\n@@ -603,6 +612,7 @@ fn main() { let _: m::Spam = S$0 }\n                             ),\n                             is_local: false,\n                             is_op_method: false,\n+                            is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                     },\n@@ -689,6 +699,7 @@ fn foo() { A { the$0 } }\n                             ),\n                             is_local: false,\n                             is_op_method: false,\n+                            is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                     },"}, {"sha": "89e6c82ddef60769077958e3fb9ef43a76d823b5", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -18,7 +18,8 @@ fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem>\n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(const_))\n         .set_deprecated(ctx.is_deprecated(const_) || ctx.is_deprecated_assoc_item(const_))\n-        .detail(detail);\n+        .detail(detail)\n+        .set_relevance(ctx.completion_relevance());\n \n     if let Some(actm) = const_.as_assoc_item(db) {\n         if let Some(trt) = actm.containing_trait_or_trait_impl(db) {"}, {"sha": "914ace910d4fbaaa10e1771c09fc3f5f1f26bbb7", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn render_variant(\n }\n \n fn render(\n-    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     local_name: Option<hir::Name>,\n     variant: hir::Variant,\n     path: Option<hir::ModPath>,\n@@ -58,18 +58,18 @@ fn render(\n     if variant_kind == hir::StructKind::Tuple {\n         cov_mark::hit!(inserts_parens_for_tuple_enums);\n         let params = Params::Anonymous(variant.fields(db).len());\n-        item.add_call_parens(ctx.completion, short_qualified_name, params);\n+        item.add_call_parens(completion, short_qualified_name, params);\n     } else if qualified {\n         item.lookup_by(short_qualified_name);\n     }\n \n-    let ty = variant.parent_enum(ctx.completion.db).ty(ctx.completion.db);\n+    let ty = variant.parent_enum(completion.db).ty(completion.db);\n     item.set_relevance(CompletionRelevance {\n-        type_match: compute_type_match(ctx.completion, &ty),\n-        ..CompletionRelevance::default()\n+        type_match: compute_type_match(completion, &ty),\n+        ..ctx.completion_relevance()\n     });\n \n-    if let Some(ref_match) = compute_ref_match(ctx.completion, &ty) {\n+    if let Some(ref_match) = compute_ref_match(completion, &ty) {\n         item.ref_match(ref_match);\n     }\n "}, {"sha": "20c7fe657ce7733cbec25f2df516a3b889465599", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn render_method(\n }\n \n fn render(\n-    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     local_name: Option<hir::Name>,\n     func: hir::Function,\n     func_type: FuncType,\n@@ -75,7 +75,7 @@ fn render(\n         type_match: compute_type_match(completion, &ret_type),\n         exact_name_match: compute_exact_name_match(completion, &call),\n         is_op_method,\n-        ..CompletionRelevance::default()\n+        ..ctx.completion_relevance()\n     });\n \n     if let Some(ref_match) = compute_ref_match(completion, &ret_type) {"}, {"sha": "29bd90aec9f512bcc944952bc7a1cd17d097f337", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn render_macro(\n }\n \n fn render(\n-    ctx @ RenderContext { completion }: RenderContext<'_>,\n+    ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     name: hir::Name,\n     macro_: hir::MacroDef,\n     import_to_add: Option<ImportEdit>,\n@@ -53,7 +53,8 @@ fn render(\n     );\n     item.set_deprecated(ctx.is_deprecated(macro_))\n         .set_detail(detail(&completion.sema, macro_))\n-        .set_documentation(docs);\n+        .set_documentation(docs)\n+        .set_relevance(ctx.completion_relevance());\n \n     if let Some(import_to_add) = import_to_add {\n         item.add_import(import_to_add);"}, {"sha": "68e29246d74ff7b18be2a8172826f16948424e06", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -59,7 +59,10 @@ fn build_completion(\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n     let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), name);\n-    item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&pat);\n+    item.set_documentation(ctx.docs(def))\n+        .set_deprecated(ctx.is_deprecated(def))\n+        .detail(&pat)\n+        .set_relevance(ctx.completion_relevance());\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, pat),\n         None => item.insert_text(pat),"}, {"sha": "a3d4bcf29e99a7b3892176ce49463c8e9cf81854", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -41,7 +41,10 @@ fn build_completion(\n         ctx.source_range(),\n         SmolStr::from_iter([&name, \" {\u2026}\"]),\n     );\n-    item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&literal);\n+    item.set_documentation(ctx.docs(def))\n+        .set_deprecated(ctx.is_deprecated(def))\n+        .detail(&literal)\n+        .set_relevance(ctx.completion_relevance());\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n         None => item.insert_text(literal),"}, {"sha": "a518be87bf0ff846ff984d8ca26ddb4ca34fa974", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -39,7 +39,8 @@ fn render(\n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(type_alias))\n         .set_deprecated(ctx.is_deprecated(type_alias) || ctx.is_deprecated_assoc_item(type_alias))\n-        .detail(detail);\n+        .detail(detail)\n+        .set_relevance(ctx.completion_relevance());\n \n     if let Some(actm) = type_alias.as_assoc_item(db) {\n         if let Some(trt) = actm.containing_trait_or_trait_impl(db) {"}, {"sha": "2fd16235dc6a7ea57593243a3088b1ec3dcbb8f8", "filename": "crates/ide_completion/src/tests/visibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb6e3a190f7781cb7e243837b47e6889d204d52/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=9cb6e3a190f7781cb7e243837b47e6889d204d52", "patch": "@@ -40,6 +40,7 @@ pub(in $0)\n \n #[test]\n fn qualified() {\n+    cov_mark::check!(visibility_qualified);\n     check(\n         r#\"\n mod foo {"}]}