{"sha": "7c4b47696907d64eff5621a64eb3c6e795a9ec77", "node_id": "C_kwDOAAsO6NoAKDdjNGI0NzY5NjkwN2Q2NGVmZjU2MjFhNjRlYjNjNmU3OTVhOWVjNzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-30T18:44:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-30T18:44:01Z"}, "message": "Auto merge of #96347 - estebank:issue-96292, r=compiler-errors\n\nErase type params when suggesting fully qualified path\n\nWhen suggesting the use of a fully qualified path for a method call that\nis ambiguous because it has multiple candidates, erase type params in\nthe resulting code, as they would result in an error when applied. We\nreplace them with `_` in the output to rely on inference. There might be\ncases where this still produces slighlty incomplete suggestions, but it\notherwise produces many more errors in relatively common cases.\n\nFix #96292", "tree": {"sha": "6741f99bbc2c7b939e2488b2f4e8302a3b9badbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6741f99bbc2c7b939e2488b2f4e8302a3b9badbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c4b47696907d64eff5621a64eb3c6e795a9ec77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4b47696907d64eff5621a64eb3c6e795a9ec77", "html_url": "https://github.com/rust-lang/rust/commit/7c4b47696907d64eff5621a64eb3c6e795a9ec77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c4b47696907d64eff5621a64eb3c6e795a9ec77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579d26876ddc5426be32cca1a026b6fd7fc5be24", "url": "https://api.github.com/repos/rust-lang/rust/commits/579d26876ddc5426be32cca1a026b6fd7fc5be24", "html_url": "https://github.com/rust-lang/rust/commit/579d26876ddc5426be32cca1a026b6fd7fc5be24"}, {"sha": "a7213832618f25690a65b5c270309df687d6b869", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7213832618f25690a65b5c270309df687d6b869", "html_url": "https://github.com/rust-lang/rust/commit/a7213832618f25690a65b5c270309df687d6b869"}], "stats": {"total": 111, "additions": 96, "deletions": 15}, "files": [{"sha": "465358de932c3f2740ad746453b225ac5cc4b036", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7c4b47696907d64eff5621a64eb3c6e795a9ec77/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4b47696907d64eff5621a64eb3c6e795a9ec77/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7c4b47696907d64eff5621a64eb3c6e795a9ec77", "patch": "@@ -734,22 +734,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !impl_candidates.is_empty() && e.span.contains(span)\n                     && let Some(expr) = exprs.first()\n                     && let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind\n-                    && let [path_segment] = path.segments\n+                    && let [_] = path.segments\n                 {\n+                    let mut eraser = TypeParamEraser(self.tcx);\n                     let candidate_len = impl_candidates.len();\n-                    let suggestions = impl_candidates.iter().map(|candidate| {\n-                        format!(\n-                            \"{}::{}({})\",\n-                            candidate, segment.ident, path_segment.ident\n-                        )\n-                    });\n-                    err.span_suggestions(\n-                        e.span,\n+                    let mut suggestions: Vec<_> = impl_candidates.iter().map(|candidate| {\n+                        let candidate = candidate.super_fold_with(&mut eraser);\n+                        vec![\n+                            (expr.span.shrink_to_lo(), format!(\"{}::{}(\", candidate, segment.ident)),\n+                            if exprs.len() == 1 {\n+                                (expr.span.shrink_to_hi().with_hi(e.span.hi()), \")\".to_string())\n+                            } else {\n+                                (expr.span.shrink_to_hi().with_hi(exprs[1].span.lo()), \", \".to_string())\n+                            },\n+                        ]\n+                    }).collect();\n+                    suggestions.sort_by(|a, b| a[0].1.cmp(&b[0].1));\n+                    err.multipart_suggestions(\n                         &format!(\n                             \"use the fully qualified path for the potential candidate{}\",\n                             pluralize!(candidate_len),\n                         ),\n-                        suggestions,\n+                        suggestions.into_iter(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -1037,3 +1043,18 @@ impl<'tcx> TypeFolder<'tcx> for ErrTypeParamEraser<'tcx> {\n         }\n     }\n }\n+\n+/// Replace type parameters with `ty::Infer(ty::Var)` to display `_`.\n+struct TypeParamEraser<'tcx>(TyCtxt<'tcx>);\n+\n+impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.0\n+    }\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        match t.kind() {\n+            ty::Param(_) | ty::Error(_) => self.tcx().mk_ty_var(ty::TyVid::from_u32(0)),\n+            _ => t.super_fold_with(self),\n+        }\n+    }\n+}"}, {"sha": "e2bab486064f0fa8c38a9f5a4ff4cd5ce28eb6b9", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=7c4b47696907d64eff5621a64eb3c6e795a9ec77", "patch": "@@ -14,7 +14,6 @@ LL |     let bar = foo_impl.into() * 1u32;\n    |               |        |\n    |               |        cannot infer type for type parameter `T` declared on the trait `Into`\n    |               this method call resolves to `T`\n-   |               help: use the fully qualified path for the potential candidate: `<Impl as Into<u32>>::into(foo_impl)`\n    |\n note: multiple `impl`s satisfying `Impl: Into<_>` found\n   --> $DIR/E0283.rs:17:1\n@@ -24,6 +23,10 @@ LL | impl Into<u32> for Impl {\n    = note: and another `impl` found in the `core` crate:\n            - impl<T, U> Into<U> for T\n              where U: From<T>;\n+help: use the fully qualified path for the potential candidate\n+   |\n+LL |     let bar = <Impl as Into<u32>>::into(foo_impl) * 1u32;\n+   |               ++++++++++++++++++++++++++        ~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9a444be500c41ad076f3e5f946794f10f57af7e0", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs?ref=7c4b47696907d64eff5621a64eb3c6e795a9ec77", "patch": "@@ -0,0 +1,20 @@\n+struct Thing<X>(X);\n+\n+trait Method<T> {\n+    fn method(self, _: i32) -> T;\n+}\n+\n+impl<X> Method<i32> for Thing<X> {\n+    fn method(self, _: i32) -> i32 { 0 }\n+}\n+\n+impl<X> Method<u32> for Thing<X> {\n+    fn method(self, _: i32) -> u32 { 0 }\n+}\n+\n+fn main() {\n+    let thing = Thing(true);\n+    thing.method(42);\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n+}"}, {"sha": "0e52420ec43777568f0ea8c9c09157740f904c96", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr?ref=7c4b47696907d64eff5621a64eb3c6e795a9ec77", "patch": "@@ -0,0 +1,37 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n+   |\n+LL |     thing.method(42);\n+   |     ------^^^^^^----\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n+   |\n+LL |     thing.method(42);\n+   |     ------^^^^^^----\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+   |\n+note: multiple `impl`s satisfying `Thing<bool>: Method<_>` found\n+  --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:7:1\n+   |\n+LL | impl<X> Method<i32> for Thing<X> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl<X> Method<u32> for Thing<X> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: use the fully qualified path for the potential candidates\n+   |\n+LL |     <Thing<_> as Method<i32>>::method(thing, 42);\n+   |     ++++++++++++++++++++++++++++++++++     ~\n+LL |     <Thing<_> as Method<u32>>::method(thing, 42);\n+   |     ++++++++++++++++++++++++++++++++++     ~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "63c1cb3791edf4144f239cff2393d5918eb86f16", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c4b47696907d64eff5621a64eb3c6e795a9ec77/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=7c4b47696907d64eff5621a64eb3c6e795a9ec77", "patch": "@@ -37,13 +37,13 @@ LL |     opts.get(opt.as_ref());\n help: use the fully qualified path for the potential candidates\n    |\n LL |     opts.get(<String as AsRef<OsStr>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |              +++++++++++++++++++++++++++++++++   ~\n LL |     opts.get(<String as AsRef<Path>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++++++++++++++   ~\n LL |     opts.get(<String as AsRef<[u8]>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |              ++++++++++++++++++++++++++++++++   ~\n LL |     opts.get(<String as AsRef<str>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |              +++++++++++++++++++++++++++++++   ~\n      and 4 other candidates\n \n error[E0283]: type annotations needed"}]}