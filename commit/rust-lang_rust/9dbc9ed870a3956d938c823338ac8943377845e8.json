{"sha": "9dbc9ed870a3956d938c823338ac8943377845e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYmM5ZWQ4NzBhMzk1NmQ5MzhjODIzMzM4YWM4OTQzMzc3ODQ1ZTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-05T00:29:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-05T00:29:42Z"}, "message": "Rollup merge of #77514 - scottmcm:less-once-chain-once, r=estebank\n\nReplace some once(x).chain(once(y)) with [x, y] IntoIter\n\nNow that we have by-value array iterators that are [already used](https://github.com/rust-lang/rust/blob/25c8c53dd994acb3f4f7c02fe6bb46076393f8b0/compiler/rustc_hir/src/def.rs#L305-L307)...\n\nFor example,\n```diff\n-        once(self.type_ns).chain(once(self.value_ns)).chain(once(self.macro_ns)).filter_map(|it| it)\n+        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).filter_map(|it| it)\n```", "tree": {"sha": "85a064e221ee2a73235ef426815ff9176a0b0aae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85a064e221ee2a73235ef426815ff9176a0b0aae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbc9ed870a3956d938c823338ac8943377845e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfemj2CRBK7hj4Ov3rIwAAdHIIADLM4HRu8fIu331pEMvEWczH\nYLQf0yfP4VN+Jn/7iazWE9gBkPNUQFsPAhfgom1QOKCcYoXMD/tvhNKwgCIRPGiz\nUjt2KhCx1ZMM562hfqHc5mNkxtGHEaDobjvfWrjzusF25ugHSRygXAoBLFlPVisA\nR2zIRGlK6G2v4gVzDM8bXQOepdxQ7JrjfE1WowMsGCEYKuTis3h901IK8FBpwMqT\n00OHj2FywB2SuK0VXJR+x9d5zItl9kF+bg59zGGAb2JXB3tLger+4A+ktfpdxAMN\nJyKpcnoJnRZbjyBTQHM5ndk/RLaIuIIX8ct+VI/tOCLTbKpwFQw+RidazsMcmyU=\n=E0nM\n-----END PGP SIGNATURE-----\n", "payload": "tree 85a064e221ee2a73235ef426815ff9176a0b0aae\nparent 5fbb41108a14b74645296f64cc78ba05aea9ca18\nparent d74b8e0505b83c72761987c48f3aa3fbb2656573\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601857782 +0200\ncommitter GitHub <noreply@github.com> 1601857782 +0200\n\nRollup merge of #77514 - scottmcm:less-once-chain-once, r=estebank\n\nReplace some once(x).chain(once(y)) with [x, y] IntoIter\n\nNow that we have by-value array iterators that are [already used](https://github.com/rust-lang/rust/blob/25c8c53dd994acb3f4f7c02fe6bb46076393f8b0/compiler/rustc_hir/src/def.rs#L305-L307)...\n\nFor example,\n```diff\n-        once(self.type_ns).chain(once(self.value_ns)).chain(once(self.macro_ns)).filter_map(|it| it)\n+        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).filter_map(|it| it)\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbc9ed870a3956d938c823338ac8943377845e8", "html_url": "https://github.com/rust-lang/rust/commit/9dbc9ed870a3956d938c823338ac8943377845e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbc9ed870a3956d938c823338ac8943377845e8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbb41108a14b74645296f64cc78ba05aea9ca18", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb41108a14b74645296f64cc78ba05aea9ca18", "html_url": "https://github.com/rust-lang/rust/commit/5fbb41108a14b74645296f64cc78ba05aea9ca18"}, {"sha": "d74b8e0505b83c72761987c48f3aa3fbb2656573", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74b8e0505b83c72761987c48f3aa3fbb2656573", "html_url": "https://github.com/rust-lang/rust/commit/d74b8e0505b83c72761987c48f3aa3fbb2656573"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "62b1254287724aedacab6f5a7642124dbfd2bcdb", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -341,9 +341,7 @@ impl<T> PerNS<Option<T>> {\n \n     /// Returns an iterator over the items which are `Some`.\n     pub fn present_items(self) -> impl Iterator<Item = T> {\n-        use std::iter::once;\n-\n-        once(self.type_ns).chain(once(self.value_ns)).chain(once(self.macro_ns)).filter_map(|it| it)\n+        IntoIter::new([self.type_ns, self.value_ns, self.macro_ns]).filter_map(|it| it)\n     }\n }\n "}, {"sha": "406e8936e6ecfcfc67aa40461693229ca658338d", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -11,6 +11,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(array_value_iter)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]"}, {"sha": "8fc14cb29971d1c1c698bc91bcd94e8c5fcb03f4", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -24,6 +24,7 @@ use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use smallvec::SmallVec;\n \n+use std::array;\n use std::iter;\n \n pub use crate::traits::{MethodViolationCode, ObjectSafetyViolation};\n@@ -652,8 +653,7 @@ fn receiver_is_dispatchable<'tcx>(\n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n             .caller_bounds()\n             .iter()\n-            .chain(iter::once(unsize_predicate))\n-            .chain(iter::once(trait_predicate))\n+            .chain(array::IntoIter::new([unsize_predicate, trait_predicate]))\n             .collect();\n \n         ty::ParamEnv::new(tcx.intern_predicates(&caller_bounds), param_env.reveal())"}, {"sha": "170ca2ce744cd94f66ce5cad8ac1178fd71b0031", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -35,8 +35,8 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n use smallvec::SmallVec;\n+use std::array;\n use std::collections::BTreeSet;\n-use std::iter;\n use std::slice;\n \n #[derive(Debug)]\n@@ -1346,7 +1346,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n             let is_equality = is_equality();\n-            let bounds = iter::once(bound).chain(iter::once(bound2)).chain(matching_candidates);\n+            let bounds = array::IntoIter::new([bound, bound2]).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n                 struct_span_err!("}, {"sha": "7efda54fbe035a697b046d6ec27e442dbba6d008", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -56,6 +56,7 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(array_value_iter)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "adb08543334f00426ee3258053cd5d4b87d3933a", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -9,10 +9,11 @@\n \n // ignore-tidy-filelength\n \n+use core::array;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::iter::{once, repeat_with, FromIterator, FusedIterator};\n+use core::iter::{repeat_with, FromIterator, FusedIterator};\n use core::mem::{self, replace, ManuallyDrop};\n use core::ops::{Index, IndexMut, Range, RangeBounds, Try};\n use core::ptr::{self, NonNull};\n@@ -99,7 +100,7 @@ impl<'a, 'b, T> PairSlices<'a, 'b, T> {\n     }\n \n     fn remainder(self) -> impl Iterator<Item = &'b [T]> {\n-        once(self.b0).chain(once(self.b1))\n+        array::IntoIter::new([self.b0, self.b1])\n     }\n }\n "}, {"sha": "046c3867d840328d2f1b25b267f33869f47f2cb6", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc9ed870a3956d938c823338ac8943377845e8/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc9ed870a3956d938c823338ac8943377845e8/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=9dbc9ed870a3956d938c823338ac8943377845e8", "patch": "@@ -77,6 +77,7 @@\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n+#![feature(array_value_iter)]\n #![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}]}