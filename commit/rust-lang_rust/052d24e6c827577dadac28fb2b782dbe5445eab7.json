{"sha": "052d24e6c827577dadac28fb2b782dbe5445eab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MmQyNGU2YzgyNzU3N2RhZGFjMjhmYjJiNzgyZGJlNTQ0NWVhYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-14T15:45:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-14T15:45:02Z"}, "message": "Auto merge of #54088 - matthewjasper:use-reason-in-dlle-errors, r=pnkfelix\n\n[NLL] Suggest let binding\n\nCloses #49821\n\nAlso adds an alternative to `explain_why_borrow_contains_point` that allows changing error messages based on the reason that will be given. This will also be useful for #51026, #51169 and maybe further changes to does not live long enough messages.", "tree": {"sha": "b57ab46dc6b56328f2cd77a7b05b98b2eff5a479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57ab46dc6b56328f2cd77a7b05b98b2eff5a479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052d24e6c827577dadac28fb2b782dbe5445eab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052d24e6c827577dadac28fb2b782dbe5445eab7", "html_url": "https://github.com/rust-lang/rust/commit/052d24e6c827577dadac28fb2b782dbe5445eab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052d24e6c827577dadac28fb2b782dbe5445eab7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85da24527adc45adc6b503d92fca2a29331ddab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/85da24527adc45adc6b503d92fca2a29331ddab5", "html_url": "https://github.com/rust-lang/rust/commit/85da24527adc45adc6b503d92fca2a29331ddab5"}, {"sha": "54f73115878a46d8591bfd6689e0a9fc60d89d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f73115878a46d8591bfd6689e0a9fc60d89d43", "html_url": "https://github.com/rust-lang/rust/commit/54f73115878a46d8591bfd6689e0a9fc60d89d43"}], "stats": {"total": 165, "additions": 133, "deletions": 32}, "files": [{"sha": "977b6a71f5e269f7d8440a22a427db7a28df14e7", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -24,6 +24,7 @@ use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n \n+use borrow_check::nll::explain_borrow::BorrowContainsPointReason;\n use dataflow::drop_flag_effects;\n use dataflow::move_paths::indexes::MoveOutIndex;\n use dataflow::move_paths::MovePathIndex;\n@@ -409,6 +410,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         self.access_place_error_reported\n             .insert((root_place.clone(), borrow_span));\n \n+        let borrow_reason = self.find_why_borrow_contains_point(context, borrow);\n+\n         let mut err = match &self.describe_place(&borrow.borrowed_place) {\n             Some(_) if self.is_place_thread_local(root_place) => {\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n@@ -418,17 +421,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 name,\n                 &scope_tree,\n                 &borrow,\n+                borrow_reason,\n                 drop_span,\n                 borrow_span,\n-                proper_span,\n                 kind.map(|k| (k, place_span.0)),\n             ),\n             None => self.report_temporary_value_does_not_live_long_enough(\n                 context,\n                 &scope_tree,\n                 &borrow,\n+                borrow_reason,\n                 drop_span,\n-                borrow_span,\n                 proper_span,\n             ),\n         };\n@@ -444,16 +447,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         name: &String,\n         scope_tree: &Lrc<ScopeTree>,\n         borrow: &BorrowData<'tcx>,\n+        reason: BorrowContainsPointReason<'tcx>,\n         drop_span: Span,\n         borrow_span: Span,\n-        _proper_span: Span,\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n     ) -> DiagnosticBuilder<'cx> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n-             {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n+             {:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n-            context, name, scope_tree, borrow, drop_span, borrow_span\n+            context, name, scope_tree, borrow, reason, drop_span, borrow_span\n         );\n \n         let mut err = self.tcx.path_does_not_live_long_enough(\n@@ -468,7 +471,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             format!(\"`{}` dropped here while still borrowed\", name),\n         );\n \n-        self.explain_why_borrow_contains_point(context, borrow, kind_place, &mut err);\n+        self.report_why_borrow_contains_point(&mut err, reason, kind_place);\n         err\n     }\n \n@@ -501,15 +504,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         context: Context,\n         scope_tree: &Lrc<ScopeTree>,\n         borrow: &BorrowData<'tcx>,\n+        reason: BorrowContainsPointReason<'tcx>,\n         drop_span: Span,\n-        _borrow_span: Span,\n         proper_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         debug!(\n             \"report_temporary_value_does_not_live_long_enough(\\\n-             {:?}, {:?}, {:?}, {:?}, {:?}\\\n+             {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n-            context, scope_tree, borrow, drop_span, proper_span\n+            context, scope_tree, borrow, reason, drop_span, proper_span\n         );\n \n         let tcx = self.tcx;\n@@ -518,7 +521,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.span_label(proper_span, \"temporary value does not live long enough\");\n         err.span_label(drop_span, \"temporary value only lives until here\");\n \n-        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n+        // Only give this note and suggestion if they could be relevant\n+        match reason {\n+            BorrowContainsPointReason::Liveness {..}\n+            | BorrowContainsPointReason::DropLiveness {..} => {\n+                err.note(\"consider using a `let` binding to create a longer lived value\");\n+            }\n+            BorrowContainsPointReason::OutlivesFreeRegion {..} => (),\n+        }\n+\n+        self.report_why_borrow_contains_point(&mut err, reason, None);\n         err\n     }\n "}, {"sha": "414cb1d6f05c2589f88a1f093fd2010c81590067", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 86, "deletions": 22, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -11,11 +11,28 @@\n use borrow_check::borrow_set::BorrowData;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::mir::{Location, Place, TerminatorKind};\n+use rustc::mir::{Local, Location, Place, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n+use rustc::ty::Region;\n \n mod find_use;\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum BorrowContainsPointReason<'tcx> {\n+    Liveness {\n+        local: Local,\n+        location: Location,\n+        in_loop: bool,\n+    },\n+    DropLiveness {\n+        local: Local,\n+        location: Location,\n+    },\n+    OutlivesFreeRegion {\n+        outlived_region: Option<Region<'tcx>>,\n+    },\n+}\n+\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Adds annotations to `err` explaining *why* the borrow contains the\n     /// point from `context`. This is key for the \"3-point errors\"\n@@ -32,15 +49,30 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n     pub(in borrow_check) fn explain_why_borrow_contains_point(\n-        &mut self,\n+        &self,\n         context: Context,\n         borrow: &BorrowData<'tcx>,\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n+        let reason = self.find_why_borrow_contains_point(context, borrow);\n+        self.report_why_borrow_contains_point(err, reason, kind_place);\n+    }\n+\n+    /// Finds the reason that [explain_why_borrow_contains_point] will report\n+    /// but doesn't add it to any message. This is a separate function in case\n+    /// the caller wants to change the error they report based on the reason\n+    /// that will be reported.\n+    pub(in borrow_check) fn find_why_borrow_contains_point(\n+        &self,\n+        context: Context,\n+        borrow: &BorrowData<'tcx>\n+    ) -> BorrowContainsPointReason<'tcx> {\n+        use self::BorrowContainsPointReason::*;\n+\n         debug!(\n-            \"explain_why_borrow_contains_point(context={:?}, borrow={:?}, kind_place={:?})\",\n-            context, borrow, kind_place,\n+            \"find_why_borrow_contains_point(context={:?}, borrow={:?})\",\n+            context, borrow,\n         );\n \n         let regioncx = &self.nonlexical_regioncx;\n@@ -62,11 +94,45 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         match find_use::find(mir, regioncx, tcx, region_sub, context.loc) {\n-            Some(Cause::LiveVar(local, location)) => {\n+            Some(Cause::LiveVar(local, location)) => Liveness {\n+                local,\n+                location,\n+                in_loop: self.is_borrow_location_in_loop(context.loc),\n+            },\n+            Some(Cause::DropVar(local, location)) => DropLiveness {\n+                local,\n+                location,\n+            },\n+            None => OutlivesFreeRegion {\n+                outlived_region: regioncx.to_error_region(region_sub),\n+            },\n+        }\n+    }\n+\n+    /// Adds annotations to `err` for the explanation `reason`. This is a\n+    /// separate method so that the caller can change their error message based\n+    /// on the reason that is going to be reported.\n+    pub (in borrow_check) fn report_why_borrow_contains_point(\n+        &self,\n+        err: &mut DiagnosticBuilder,\n+        reason: BorrowContainsPointReason<'tcx>,\n+        kind_place: Option<(WriteKind, &Place<'tcx>)>,\n+    ) {\n+        use self::BorrowContainsPointReason::*;\n+\n+        debug!(\n+            \"find_why_borrow_contains_point(reason={:?}, kind_place={:?})\",\n+            reason, kind_place,\n+        );\n+\n+        let mir = self.mir;\n+\n+        match reason {\n+            Liveness { local, location, in_loop } => {\n                 let span = mir.source_info(location).span;\n                 let spans = self.move_spans(&Place::Local(local), location)\n                     .or_else(|| self.borrow_spans(span, location));\n-                let message = if self.is_borrow_location_in_loop(context.loc) {\n+                let message = if in_loop {\n                     if spans.for_closure() {\n                         \"borrow captured here by closure in later iteration of loop\"\n                     } else {\n@@ -81,8 +147,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 };\n                 err.span_label(spans.var_or_use(), message);\n             }\n-\n-            Some(Cause::DropVar(local, location)) => match &mir.local_decls[local].name {\n+            DropLiveness { local, location } => match &mir.local_decls[local].name {\n                 Some(local_name) => {\n                     err.span_label(\n                         mir.source_info(location).span,\n@@ -93,31 +158,29 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         if let Place::Local(borrowed_local) = place {\n                             let dropped_local_scope = mir.local_decls[local].visibility_scope;\n                             let borrowed_local_scope =\n-                                mir.local_decls[*borrowed_local].visibility_scope;\n+                            mir.local_decls[*borrowed_local].visibility_scope;\n \n                             if mir.is_sub_scope(borrowed_local_scope, dropped_local_scope) {\n                                 err.note(\n-                                    \"values in a scope are dropped \\\n-                                     in the opposite order they are defined\",\n+                                \"values in a scope are dropped \\\n+                                                     in the opposite order they are defined\",\n                                 );\n                             }\n                         }\n                     }\n                 }\n \n                 None => {}\n-            },\n-\n-            None => {\n-                if let Some(region) = regioncx.to_error_region(region_sub) {\n-                    self.tcx.note_and_explain_free_region(\n-                        err,\n-                        \"borrowed value must be valid for \",\n-                        region,\n-                        \"...\",\n-                    );\n-                }\n             }\n+            OutlivesFreeRegion { outlived_region: Some(region) } => {\n+                self.tcx.note_and_explain_free_region(\n+                    err,\n+                    \"borrowed value must be valid for \",\n+                    region,\n+                    \"...\",\n+                );\n+            }\n+            OutlivesFreeRegion { outlived_region: None } => (),\n         }\n     }\n \n@@ -193,3 +256,4 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         false\n     }\n }\n+"}, {"sha": "eee3f9bd5c1308d3112720f39d7e305854c2c798", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,7 @@ LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ebf229696d8a99bbb563e606913356be6936ec6b", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not\n ...\n LL |     buggy_map.insert(43, &*tmp);\n    |     --------- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "e02f21f6e1247a1384d6baff47e71cc9421f1b29", "filename": "src/test/ui/issues/issue-36082.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     let val: &_ = x.borrow().0;\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "e02f21f6e1247a1384d6baff47e71cc9421f1b29", "filename": "src/test/ui/issues/issue-36082.mir.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     let val: &_ = x.borrow().0;\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "579ec4d923be1318f212965c03a337bcca3ab1d8", "filename": "src/test/ui/issues/issue-36082.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -28,6 +28,7 @@ fn main() {\n     //[mir]~^^^^^ ERROR borrowed value does not live long enough [E0597]\n     //[mir]~| NOTE temporary value does not live long enough\n     //[mir]~| NOTE temporary value only lives until here\n+    //[mir]~| NOTE consider using a `let` binding to create a longer lived value\n     println!(\"{}\", val);\n     //[mir]~^ borrow later used here\n }"}, {"sha": "a8a1b33c925bcf7fdef038de7661bd1780df260c", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -9,6 +9,7 @@ LL |     //~^ ERROR borrowed value does not live long enough\n LL |     x.use_mut();\n    |     - borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "8b69c57d3765db1062d7a84d547644a9bca396cb", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     });\n    |       - temporary value only lives until here\n LL |     println!(\"{:?}\", x);\n    |                      - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "aa744a3ae8a7482e18a1c757dafaac5e7fc1f225", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,7 @@ LL |         x = &id(3); //~ ERROR borrowed value does not live long enough\n LL |         assert_eq!(*x, 3);\n    |         ------------------ borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "001eba4b039b1e39486624d277127ea553dd96d3", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     v3.push(&id('x'));           // statement 6\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |              -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:38:18\n@@ -19,6 +21,8 @@ LL |         v4.push(&id('y'));\n ...\n LL |         v4.use_ref();\n    |         -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:49:14\n@@ -30,6 +34,8 @@ LL |     v5.push(&id('z'));\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |                                     -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c565842c2c0020e5ad0ecd9b50b09e1289d53000", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     }\n    |     - temporary value only lives until here\n LL |     println!(\"{}\", *msg);\n    |                    ---- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "8dcf486f8301142310ee1a6fa9de04c3a64b3767", "filename": "src/test/ui/span/issue-15480.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     ];\n ...\n LL |     for &&x in &v {\n    |                -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "3788b5a32849528d07d36def77ca1ef3fd323117", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -8,6 +8,8 @@ LL |     }\n    |     - temporary value only lives until here\n LL | }\n    | - borrow later used here, when `blah` is dropped\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "4a15d8ff455372cbd746da01d526242a1a266818", "filename": "src/test/ui/span/slice-borrow.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052d24e6c827577dadac28fb2b782dbe5445eab7/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr?ref=052d24e6c827577dadac28fb2b782dbe5445eab7", "patch": "@@ -9,6 +9,7 @@ LL |     }\n LL |     y.use_ref();\n    |     - borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}]}