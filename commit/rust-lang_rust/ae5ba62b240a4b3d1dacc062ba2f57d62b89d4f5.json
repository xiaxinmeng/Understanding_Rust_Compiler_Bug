{"sha": "ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNWJhNjJiMjQwYTRiM2QxZGFjYzA2MmJhMmY1N2Q2MmI4OWQ0ZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-31T01:15:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-31T01:15:29Z"}, "message": "rustc: Use the type cache to construct external item references", "tree": {"sha": "896ce879f08f8b3d308dbf17a93d387f9286f647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896ce879f08f8b3d308dbf17a93d387f9286f647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5", "html_url": "https://github.com/rust-lang/rust/commit/ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc59cea8b055cd94279c167e99b1176751702d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc59cea8b055cd94279c167e99b1176751702d36", "html_url": "https://github.com/rust-lang/rust/commit/cc59cea8b055cd94279c167e99b1176751702d36"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "9df068f3e4cf68cf76f13f85e2ec78c09a1c9636", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ae5ba62b240a4b3d1dacc062ba2f57d62b89d4f5", "patch": "@@ -764,6 +764,24 @@ fn type_of_arg(@crate_ctxt cx, &ty.arg arg) -> TypeRef {\n     ret typ;\n }\n \n+fn type_of_ty_params_opt_and_ty(@crate_ctxt ccx, ty.ty_params_opt_and_ty tpt)\n+        -> TypeRef {\n+    alt (tpt._1.struct) {\n+        case (ty.ty_fn(?proto, ?inputs, ?output)) {\n+            auto ty_params = option.get[vec[ast.def_id]](tpt._0);\n+            auto ty_param_count = _vec.len[ast.def_id](ty_params);\n+            auto llfnty = type_of_fn(ccx, proto, inputs, output,\n+                                     ty_param_count);\n+            ret T_fn_pair(ccx.tn, llfnty);\n+        }\n+        case (_) {\n+            // fall through\n+        }\n+    }\n+    ret type_of(ccx, tpt._1);\n+}\n+\n+\n // Name sanitation. LLVM will happily accept identifiers with weird names, but\n // gas doesn't!\n \n@@ -3570,14 +3588,30 @@ fn lval_val(@block_ctxt cx, ValueRef val) -> lval_result {\n             llobj=none[ValueRef]);\n }\n \n+fn trans_external_path(@block_ctxt cx, ast.def_id did,\n+                       ty.ty_params_opt_and_ty tpt) -> lval_result {\n+    auto ccx = cx.fcx.ccx;\n+    auto name = creader.get_symbol(ccx.sess, did);\n+    auto v = get_extern_const(ccx.externs, ccx.llmod,\n+                              name, type_of_ty_params_opt_and_ty(ccx, tpt));\n+    ret lval_val(cx, v);\n+}\n+\n fn lval_generic_fn(@block_ctxt cx,\n                    ty.ty_params_and_ty tpt,\n                    ast.def_id fn_id,\n                    &ast.ann ann)\n-    -> lval_result {\n-\n-    check (cx.fcx.ccx.fn_pairs.contains_key(fn_id));\n-    auto lv = lval_val(cx, cx.fcx.ccx.fn_pairs.get(fn_id));\n+        -> lval_result {\n+    auto lv;\n+    if (cx.fcx.ccx.sess.get_targ_crate_num() == fn_id._0) {\n+        // Internal reference.\n+        check (cx.fcx.ccx.fn_pairs.contains_key(fn_id));\n+        lv = lval_val(cx, cx.fcx.ccx.fn_pairs.get(fn_id));\n+    } else {\n+        // External reference.\n+        auto tpot = tup(some[vec[ast.def_id]](tpt._0), tpt._1);\n+        lv = trans_external_path(cx, fn_id, tpot);\n+    }\n \n     auto monoty;\n     auto tys;\n@@ -3609,22 +3643,10 @@ fn lval_generic_fn(@block_ctxt cx,\n     ret lv;\n }\n \n-fn trans_external_path(@block_ctxt cx, &ast.path p,\n-                       ast.def def, ast.ann a) -> lval_result {\n-    // FIXME: This isn't generic-safe.\n-    auto ccx = cx.fcx.ccx;\n-    auto ty = node_ann_type(ccx, a);\n-    auto name = creader.get_symbol(ccx.sess, ast.def_id_of_def(def));\n-    auto v = get_extern_const(ccx.externs, ccx.llmod,\n-                              name, type_of(ccx, ty));\n-    ret lval_mem(cx, v);\n-}\n-\n fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n               &ast.ann ann) -> lval_result {\n     alt (dopt) {\n         case (some[ast.def](?def)) {\n-\n             alt (def) {\n                 case (ast.def_arg(?did)) {\n                     alt (cx.fcx.llargs.find(did)) {\n@@ -3657,13 +3679,11 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                     ret lval_mem(cx, cx.fcx.llobjfields.get(did));\n                 }\n                 case (ast.def_fn(?did)) {\n-                    check (cx.fcx.ccx.items.contains_key(did));\n                     auto tyt = ty.lookup_generic_item_type(cx.fcx.ccx.sess,\n                         cx.fcx.ccx.type_cache, did);\n                     ret lval_generic_fn(cx, tyt, did, ann);\n                 }\n                 case (ast.def_obj(?did)) {\n-                    check (cx.fcx.ccx.items.contains_key(did));\n                     auto tyt = ty.lookup_generic_item_type(cx.fcx.ccx.sess,\n                         cx.fcx.ccx.type_cache, did);\n                     ret lval_generic_fn(cx, tyt, did, ann);\n@@ -3717,7 +3737,6 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                     ret lval_mem(cx, cx.fcx.ccx.consts.get(did));\n                 }\n                 case (ast.def_native_fn(?did)) {\n-                    check (cx.fcx.ccx.native_items.contains_key(did));\n                     auto tyt = ty.lookup_generic_item_type(cx.fcx.ccx.sess,\n                         cx.fcx.ccx.type_cache, did);\n                     ret lval_generic_fn(cx, tyt, did, ann);"}]}