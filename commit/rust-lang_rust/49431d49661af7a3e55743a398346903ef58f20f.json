{"sha": "49431d49661af7a3e55743a398346903ef58f20f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDMxZDQ5NjYxYWY3YTNlNTU3NDNhMzk4MzQ2OTAzZWY1OGYyMGY=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-01-19T22:39:54Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-01-19T22:39:54Z"}, "message": "Add a bunch of doc comments", "tree": {"sha": "ee7502a0ede2156d0d416625557979e55561291e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7502a0ede2156d0d416625557979e55561291e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49431d49661af7a3e55743a398346903ef58f20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49431d49661af7a3e55743a398346903ef58f20f", "html_url": "https://github.com/rust-lang/rust/commit/49431d49661af7a3e55743a398346903ef58f20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49431d49661af7a3e55743a398346903ef58f20f/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4befe1710b3c394018ca65a6e99e109d081f16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4befe1710b3c394018ca65a6e99e109d081f16e", "html_url": "https://github.com/rust-lang/rust/commit/c4befe1710b3c394018ca65a6e99e109d081f16e"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "606dfcd58a26cd37fa9f4bfa4a6a662225d590a5", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 72, "deletions": 3, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/49431d49661af7a3e55743a398346903ef58f20f/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49431d49661af7a3e55743a398346903ef58f20f/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=49431d49661af7a3e55743a398346903ef58f20f", "patch": "@@ -18,21 +18,26 @@ use tokenstream;\n \n use std::rc::Rc;\n \n+/// Contains the sub-token-trees of a \"delimited\" token tree, such as the contents of `(`. Note\n+/// thatthat the delimiter itself might be `NoDelim`.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Delimited {\n     pub delim: token::DelimToken,\n     pub tts: Vec<TokenTree>,\n }\n \n impl Delimited {\n+    /// Return the opening delimiter (possibly `NoDelim`).\n     pub fn open_token(&self) -> token::Token {\n         token::OpenDelim(self.delim)\n     }\n \n+    /// Return the closing delimiter (possibly `NoDelim`).\n     pub fn close_token(&self) -> token::Token {\n         token::CloseDelim(self.delim)\n     }\n \n+    /// Return a `self::TokenTree` witha a `Span` corresponding to the opening delimiter.\n     pub fn open_tt(&self, span: Span) -> TokenTree {\n         let open_span = if span == DUMMY_SP {\n             DUMMY_SP\n@@ -42,6 +47,7 @@ impl Delimited {\n         TokenTree::Token(open_span, self.open_token())\n     }\n \n+    /// Return a `self::TokenTree` witha a `Span` corresponding to the closing delimiter.\n     pub fn close_tt(&self, span: Span) -> TokenTree {\n         let close_span = if span == DUMMY_SP {\n             DUMMY_SP\n@@ -75,7 +81,7 @@ pub enum KleeneOp {\n }\n \n /// Similar to `tokenstream::TokenTree`, except that `$i`, `$i:ident`, and `$(...)`\n-/// are \"first-class\" token trees.\n+/// are \"first-class\" token trees. Useful for parsing macros.\n #[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub enum TokenTree {\n     Token(Span, token::Token),\n@@ -93,6 +99,7 @@ pub enum TokenTree {\n }\n \n impl TokenTree {\n+    /// Return the number of tokens in the tree.\n     pub fn len(&self) -> usize {\n         match *self {\n             TokenTree::Delimited(_, ref delimed) => match delimed.delim {\n@@ -104,6 +111,8 @@ impl TokenTree {\n         }\n     }\n \n+    /// Returns true if the given token tree contains no other tokens. This is vacuously true for\n+    /// single tokens or metavar/decls, but may be false for delimited trees or sequences.\n     pub fn is_empty(&self) -> bool {\n         match *self {\n             TokenTree::Delimited(_, ref delimed) => match delimed.delim {\n@@ -115,6 +124,7 @@ impl TokenTree {\n         }\n     }\n \n+    /// Get the `index`-th sub-token-tree. This only makes sense for delimited trees and sequences.\n     pub fn get_tt(&self, index: usize) -> TokenTree {\n         match (self, index) {\n             (&TokenTree::Delimited(_, ref delimed), _) if delimed.delim == token::NoDelim => {\n@@ -146,15 +156,39 @@ impl TokenTree {\n     }\n }\n \n+/// Takes a `tokenstream::TokenStream` and returns a `Vec<self::TokenTree>`. Specifically, this\n+/// takes a generic `TokenStream`, such as is used in the rest of the compiler, and returns a\n+/// collection of `TokenTree` for use in parsing a macro.\n+///\n+/// # Parameters\n+///\n+/// - `input`: a token stream to read from, the contents of which we are parsing.\n+/// - `expect_matchers`: `parse` can be used to parse either the \"patterns\" or the \"body\" of a\n+///   macro. Both take roughly the same form _except_ that in a pattern, metavars are declared with\n+///   their \"matcher\" type. For example `$var:expr` or `$id:ident`. In this example, `expr` and\n+///   `ident` are \"matchers\". They are not present in the body of a macro rule -- just in the\n+///   pattern, so we pass a parameter to indicate whether to expect them or not.\n+/// - `sess`: the parsing session. Any errors will be emitted to this session.\n+///\n+/// # Returns\n+///\n+/// A collection of `self::TokenTree`. There may also be some errors emitted to `sess`.\n pub fn parse(\n     input: tokenstream::TokenStream,\n     expect_matchers: bool,\n     sess: &ParseSess,\n ) -> Vec<TokenTree> {\n+    // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n+\n+    // For each token tree in `input`, parse the token into a `self::TokenTree`, consuming\n+    // additional trees if need be.\n     let mut trees = input.trees();\n     while let Some(tree) = trees.next() {\n         let tree = parse_tree(tree, &mut trees, expect_matchers, sess);\n+\n+        // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n+        // parse out the matcher (i.e. in `$id:ident` this would parse the `:` and `ident`).\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n                 let span = match trees.next() {\n@@ -182,12 +216,27 @@ pub fn parse(\n                     keywords::Invalid.ident(),\n                 ));\n             }\n+\n+            // Not a metavar or no matchers allowed, so just return the tree\n             _ => result.push(tree),\n         }\n     }\n     result\n }\n \n+/// Takes a `tokenstream::TokenTree` and returns a `self::TokenTree`. Specifically, this takes a\n+/// generic `TokenTree`, such as is used in the rest of the compiler, and returns a `TokenTree`\n+/// for use in parsing a macro.\n+///\n+/// Converting the given tree may involve reading more tokens.\n+///\n+/// # Parameters\n+///\n+/// - `tree`: the tree wish to convert.\n+/// - `trees`: an iterator over trees. We may need to read more tokens from it in order to finish\n+///   converting `tree`\n+/// - `expect_matchers`: same as for `parse` (see above).\n+/// - `sess`: the parsing session. Any errors will be emitted to this session.\n fn parse_tree<I>(\n     tree: tokenstream::TokenTree,\n     trees: &mut I,\n@@ -197,16 +246,24 @@ fn parse_tree<I>(\n where\n     I: Iterator<Item = tokenstream::TokenTree>,\n {\n+    // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n+        // `tree` is a `$` token. Look at the next token in `trees`\n         tokenstream::TokenTree::Token(span, token::Dollar) => match trees.next() {\n+            // `tree` is followed by a delimited set of token trees. This indicates the beginning\n+            // of a repetition sequence in the macro (e.g. `$(pat)*`).\n             Some(tokenstream::TokenTree::Delimited(span, delimited)) => {\n+                // Must have `(` not `{` or `[`\n                 if delimited.delim != token::Paren {\n                     let tok = pprust::token_to_string(&token::OpenDelim(delimited.delim));\n                     let msg = format!(\"expected `(`, found `{}`\", tok);\n                     sess.span_diagnostic.span_err(span, &msg);\n                 }\n+                // Parse the contents of the sequence itself\n                 let sequence = parse(delimited.tts.into(), expect_matchers, sess);\n+                // Get the Kleen operator and optional separator\n                 let (separator, op) = parse_sep_and_kleene_op(trees, span, sess);\n+                // Count the number of captured \"names\" (i.e. named metavars)\n                 let name_captures = macro_parser::count_names(&sequence);\n                 TokenTree::Sequence(\n                     span,\n@@ -218,6 +275,9 @@ where\n                     }),\n                 )\n             }\n+\n+            // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n+            // metavariable that names the crate of the invokation.\n             Some(tokenstream::TokenTree::Token(ident_span, ref token)) if token.is_ident() => {\n                 let ident = token.ident().unwrap();\n                 let span = ident_span.with_lo(span.lo());\n@@ -231,6 +291,8 @@ where\n                     TokenTree::MetaVar(span, ident)\n                 }\n             }\n+\n+            // `tree` is followed by a random token. This is an error.\n             Some(tokenstream::TokenTree::Token(span, tok)) => {\n                 let msg = format!(\n                     \"expected identifier, found `{}`\",\n@@ -239,9 +301,16 @@ where\n                 sess.span_diagnostic.span_err(span, &msg);\n                 TokenTree::MetaVar(span, keywords::Invalid.ident())\n             }\n+\n+            // There are no more tokens. Just return the `$` we already have.\n             None => TokenTree::Token(span, token::Dollar),\n         },\n+\n+        // `tree` is an arbitrary token. Keep it.\n         tokenstream::TokenTree::Token(span, tok) => TokenTree::Token(span, tok),\n+\n+        // `tree` is the beginning of a delimited set of tokens (e.g. `(` or `{`). We need to\n+        // descend into the delimited set and further parse it.\n         tokenstream::TokenTree::Delimited(span, delimited) => TokenTree::Delimited(\n             span,\n             Rc::new(Delimited {\n@@ -257,8 +326,8 @@ where\n /// For example, in a pattern such as `$(a),*`, `a` is the pattern to be repeated, `,` is the\n /// separator, and `*` is the Kleene operator. This function is specifically concerned with parsing\n /// the last two tokens of such a pattern: namely, the optional separator and the Kleene operator\n-/// itself. Note that here we are parsing the _pattern_ itself, rather than trying to match some\n-/// stream of tokens against the pattern.\n+/// itself. Note that here we are parsing the _macro_ itself, rather than trying to match some\n+/// stream of tokens in an invokation of a macro.\n ///\n /// This function will take some input iterator `input` corresponding to `span` and a parsing\n /// session `sess`. If the next one (or possibly two) tokens in `input` correspond to a Kleene"}]}