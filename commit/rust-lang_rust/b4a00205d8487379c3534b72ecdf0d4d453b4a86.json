{"sha": "b4a00205d8487379c3534b72ecdf0d4d453b4a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTAwMjA1ZDg0ODczNzljMzUzNGI3MmVjZGYwZDRkNDUzYjRhODY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-07T23:06:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-07T23:06:25Z"}, "message": "Rollup merge of #85038 - GuillaumeGomez:dont-stop-first-rustdoc-gui-failure, r=Mark-Simulacrum\n\nDon't stop running rustdoc-gui tests at first failure\n\nI just realized that before this PR, the rustdoc-gui test suite was stopping at the first failure, which isn't very convenient. All tests are now running and if one failed, it returns an error at the end once all tests have run.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "96d4d80aaf0dd0cc7441d11c8e9ca6ce7924590c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d4d80aaf0dd0cc7441d11c8e9ca6ce7924590c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a00205d8487379c3534b72ecdf0d4d453b4a86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglcfxCRBK7hj4Ov3rIwAA/0QIAHji3VyyTqTncHh6UZi1t1oW\ndiyYbqUo/ZSYmXRctt80f/LXx9038bkLc1seOQgegU8Tu/NmPf3EgNxcRpO6CBEd\n1yRSdH8msZ6F5MjFIl1PgodJIDWWaIR24we7v19v/mgYc7H/QqxmIURcaFaBQ7Y6\nqD3qiPbS+a+L8lYAC5Ode5ezbLO26nHJfHRjDyEzBle9a/qBTWRlj3KfvojdGVqN\n4uUHpSGgrHhEwdBILUu0hlQczlkp91EvB4lqJI/YoNGZSBJlxS+uAN6waKglRGCU\nj3EMO+8mrT5vKlU0C8D9E8jZg9xE9xiIq8lDvEYOWzBpT/IGeI776z4e9oIHfs0=\n=jka3\n-----END PGP SIGNATURE-----\n", "payload": "tree 96d4d80aaf0dd0cc7441d11c8e9ca6ce7924590c\nparent bba8f992816b6a699b41f80666c8fdafcd350722\nparent 919bfd86d94e039b016a63d3e91bc16dd94a92bf\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620428785 +0200\ncommitter GitHub <noreply@github.com> 1620428785 +0200\n\nRollup merge of #85038 - GuillaumeGomez:dont-stop-first-rustdoc-gui-failure, r=Mark-Simulacrum\n\nDon't stop running rustdoc-gui tests at first failure\n\nI just realized that before this PR, the rustdoc-gui test suite was stopping at the first failure, which isn't very convenient. All tests are now running and if one failed, it returns an error at the end once all tests have run.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a00205d8487379c3534b72ecdf0d4d453b4a86", "html_url": "https://github.com/rust-lang/rust/commit/b4a00205d8487379c3534b72ecdf0d4d453b4a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a00205d8487379c3534b72ecdf0d4d453b4a86/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba8f992816b6a699b41f80666c8fdafcd350722", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba8f992816b6a699b41f80666c8fdafcd350722", "html_url": "https://github.com/rust-lang/rust/commit/bba8f992816b6a699b41f80666c8fdafcd350722"}, {"sha": "919bfd86d94e039b016a63d3e91bc16dd94a92bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/919bfd86d94e039b016a63d3e91bc16dd94a92bf", "html_url": "https://github.com/rust-lang/rust/commit/919bfd86d94e039b016a63d3e91bc16dd94a92bf"}], "stats": {"total": 84, "additions": 38, "deletions": 46}, "files": [{"sha": "df467bebe7481b11a8fd5e6e4e8b9aa9767cb738", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4a00205d8487379c3534b72ecdf0d4d453b4a86/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a00205d8487379c3534b72ecdf0d4d453b4a86/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b4a00205d8487379c3534b72ecdf0d4d453b4a86", "patch": "@@ -831,28 +831,14 @@ impl Step for RustdocGUI {\n             command.arg(\"src/test/rustdoc-gui/lib.rs\").arg(\"-o\").arg(&out_dir);\n             builder.run(&mut command);\n \n-            let mut tests = Vec::new();\n-            for file in fs::read_dir(\"src/test/rustdoc-gui\").unwrap() {\n-                let file = file.unwrap();\n-                let file_path = file.path();\n-                let file_name = file.file_name();\n-\n-                if !file_name.to_str().unwrap().ends_with(\".goml\") {\n-                    continue;\n-                }\n-                tests.push(file_path);\n-            }\n-            tests.sort_unstable();\n-            for test in tests {\n-                let mut command = Command::new(&nodejs);\n-                command\n-                    .arg(\"src/tools/rustdoc-gui/tester.js\")\n-                    .arg(\"--doc-folder\")\n-                    .arg(out_dir.join(\"test_docs\"))\n-                    .arg(\"--test-file\")\n-                    .arg(test);\n-                builder.run(&mut command);\n-            }\n+            let mut command = Command::new(&nodejs);\n+            command\n+                .arg(\"src/tools/rustdoc-gui/tester.js\")\n+                .arg(\"--doc-folder\")\n+                .arg(out_dir.join(\"test_docs\"))\n+                .arg(\"--tests-folder\")\n+                .arg(\"src/test/rustdoc-gui\");\n+            builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"src/test/rustdoc-gui\\\" tests\");\n         }"}, {"sha": "298fc7519facc0e775e8ffbc19fb47231840faeb", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b4a00205d8487379c3534b72ecdf0d4d453b4a86/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/b4a00205d8487379c3534b72ecdf0d4d453b4a86/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=b4a00205d8487379c3534b72ecdf0d4d453b4a86", "patch": "@@ -3,29 +3,30 @@\n // ```\n // npm install browser-ui-test\n // ```\n-const path = require('path');\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n const {Options, runTest} = require('browser-ui-test');\n \n function showHelp() {\n     console.log(\"rustdoc-js options:\");\n     console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n     console.log(\"  --help                     : show this message then quit\");\n-    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+    console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n }\n \n function parseOptions(args) {\n     var opts = {\n         \"doc_folder\": \"\",\n-        \"test_file\": \"\",\n+        \"tests_folder\": \"\",\n     };\n     var correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n-        \"--test-file\": \"test_file\",\n+        \"--tests-folder\": \"tests_folder\",\n     };\n \n     for (var i = 0; i < args.length; ++i) {\n         if (args[i] === \"--doc-folder\"\n-            || args[i] === \"--test-file\") {\n+            || args[i] === \"--tests-folder\") {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n@@ -41,8 +42,8 @@ function parseOptions(args) {\n             return null;\n         }\n     }\n-    if (opts[\"test_file\"].length < 1) {\n-        console.log(\"Missing `--test-file` option.\");\n+    if (opts[\"tests_folder\"].length < 1) {\n+        console.log(\"Missing `--tests-folder` option.\");\n     } else if (opts[\"doc_folder\"].length < 1) {\n         console.log(\"Missing `--doc-folder` option.\");\n     } else {\n@@ -51,15 +52,8 @@ function parseOptions(args) {\n     return null;\n }\n \n-function checkFile(test_file, opts, loaded, index) {\n-    const test_name = path.basename(test_file, \".js\");\n-\n-    process.stdout.write('Checking \"' + test_name + '\" ... ');\n-    return runChecks(test_file, loaded, index);\n-}\n-\n-function main(argv) {\n-    var opts = parseOptions(argv.slice(2));\n+async function main(argv) {\n+    let opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n         process.exit(1);\n     }\n@@ -68,22 +62,34 @@ function main(argv) {\n     try {\n         // This is more convenient that setting fields one by one.\n         options.parseArguments([\n-            '--no-screenshot',\n+            \"--no-screenshot\",\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n         ]);\n     } catch (error) {\n         console.error(`invalid argument: ${error}`);\n         process.exit(1);\n     }\n \n-    runTest(opts[\"test_file\"], options).then(out => {\n-        const [output, nb_failures] = out;\n-        console.log(output);\n-        process.exit(nb_failures);\n-    }).catch(err => {\n-        console.error(err);\n+    let failed = false;\n+    let files = fs.readdirSync(opts[\"tests_folder\"]).filter(file => path.extname(file) == \".goml\");\n+\n+    files.sort();\n+    for (var i = 0; i < files.length; ++i) {\n+        const testPath = path.join(opts[\"tests_folder\"], files[i]);\n+        await runTest(testPath, options).then(out => {\n+            const [output, nb_failures] = out;\n+            console.log(output);\n+            if (nb_failures > 0) {\n+                failed = true;\n+            }\n+        }).catch(err => {\n+            console.error(err);\n+            failed = true;\n+        });\n+    }\n+    if (failed) {\n         process.exit(1);\n-    });\n+    }\n }\n \n main(process.argv);"}]}