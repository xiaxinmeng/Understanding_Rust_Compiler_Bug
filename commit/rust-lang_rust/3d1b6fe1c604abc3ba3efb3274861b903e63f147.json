{"sha": "3d1b6fe1c604abc3ba3efb3274861b903e63f147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMWI2ZmUxYzYwNGFiYzNiYTNlZmIzMjc0ODYxYjkwM2U2M2YxNDc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-20T14:23:13Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-20T14:23:13Z"}, "message": "Remove count_missing_closing_parens()", "tree": {"sha": "d5cc7f5111c2c7a21aaba54496fcbc29f2a35e84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5cc7f5111c2c7a21aaba54496fcbc29f2a35e84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d1b6fe1c604abc3ba3efb3274861b903e63f147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1b6fe1c604abc3ba3efb3274861b903e63f147", "html_url": "https://github.com/rust-lang/rust/commit/3d1b6fe1c604abc3ba3efb3274861b903e63f147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d1b6fe1c604abc3ba3efb3274861b903e63f147/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb17c41301e5a98748882cc6ad6a627def8eb80", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb17c41301e5a98748882cc6ad6a627def8eb80", "html_url": "https://github.com/rust-lang/rust/commit/6fb17c41301e5a98748882cc6ad6a627def8eb80"}], "stats": {"total": 56, "additions": 2, "deletions": 54}, "files": [{"sha": "309148d7c7bf3bb59b0ed0b06229531df0565e3c", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3d1b6fe1c604abc3ba3efb3274861b903e63f147/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1b6fe1c604abc3ba3efb3274861b903e63f147/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3d1b6fe1c604abc3ba3efb3274861b903e63f147", "patch": "@@ -837,52 +837,6 @@ impl Rewrite for ast::NestedMetaItem {\n     }\n }\n \n-fn count_missing_closing_parens(s: &str) -> u32 {\n-    let mut op_parens: u32 = 0;\n-    let mut cl_parens: u32 = 0;\n-\n-    #[derive(Eq, PartialEq)]\n-    pub enum SnippetState {\n-        Normal,\n-        InsideStr,\n-        InsideBulletComment,\n-        InsideSingleLineComment,\n-    }\n-\n-    let mut state = SnippetState::Normal;\n-    let mut iter = s.chars().peekable();\n-    let mut prev_char: Option<char> = None;\n-    while let Some(c) = iter.next() {\n-        let next_char = iter.peek();\n-        match c {\n-            '/' if state == SnippetState::Normal => match next_char {\n-                Some(&'*') => state = SnippetState::InsideBulletComment,\n-                Some(&'/') if prev_char.map_or(true, |c| c != '*') => {\n-                    state = SnippetState::InsideSingleLineComment;\n-                }\n-                _ => (),\n-            },\n-            '*' if state == SnippetState::InsideBulletComment &&\n-                next_char.map_or(false, |c| *c == '/') =>\n-            {\n-                state = SnippetState::Normal;\n-            }\n-            '\\n' if state == SnippetState::InsideSingleLineComment => state = SnippetState::Normal,\n-            '\"' if state == SnippetState::InsideStr && prev_char.map_or(false, |c| c != '\\\\') => {\n-                state = SnippetState::Normal;\n-            }\n-            '\"' if state == SnippetState::Normal && prev_char.map_or(false, |c| c != '\\\\') => {\n-                state = SnippetState::InsideStr\n-            }\n-            '(' if state == SnippetState::Normal => op_parens += 1,\n-            ')' if state == SnippetState::Normal => cl_parens += 1,\n-            _ => (),\n-        }\n-        prev_char = Some(c);\n-    }\n-    op_parens.checked_sub(cl_parens).unwrap_or(0)\n-}\n-\n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         Some(match self.node {\n@@ -895,21 +849,15 @@ impl Rewrite for ast::MetaItem {\n                         .shrink_left(name.len() + 3)\n                         .and_then(|s| s.sub_width(2))\n                 );\n-                let hi = self.span.hi +\n-                    BytePos(count_missing_closing_parens(&context.snippet(self.span)));\n                 let items = itemize_list(\n                     context.codemap,\n                     list.iter(),\n                     \")\",\n                     |nested_meta_item| nested_meta_item.span.lo,\n-                    // FIXME: Span from MetaItem is missing closing parens.\n-                    |nested_meta_item| {\n-                        let snippet = context.snippet(nested_meta_item.span);\n-                        nested_meta_item.span.hi + BytePos(count_missing_closing_parens(&snippet))\n-                    },\n+                    |nested_meta_item| nested_meta_item.span.hi,\n                     |nested_meta_item| nested_meta_item.rewrite(context, item_shape),\n                     self.span.lo,\n-                    hi,\n+                    self.span.hi,\n                     false,\n                 );\n                 let item_vec = items.collect::<Vec<_>>();"}]}