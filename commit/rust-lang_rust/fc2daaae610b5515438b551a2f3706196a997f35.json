{"sha": "fc2daaae610b5515438b551a2f3706196a997f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmRhYWFlNjEwYjU1MTU0MzhiNTUxYTJmMzcwNjE5NmE5OTdmMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T18:02:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T18:02:45Z"}, "message": "Auto merge of #77302 - RalfJung:rollup-n8gg3v6, r=RalfJung\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #76454 (UI to unit test for those using Cell/RefCell/UnsafeCell)\n - #76474 (Add option to pass a custom codegen backend from a driver)\n - #76711 (diag: improve closure/generic parameter mismatch)\n - #77170 (Remove `#[rustc_allow_const_fn_ptr]` and add `#![feature(const_fn_fn_ptr_basics)]`)\n - #77194 (Add doc alias for iterator fold)\n - #77288 (fix building libstd for Miri on macOS)\n - #77295 (Update unstable-book: Fix ABNF in inline assembly docs)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "b52ac610987bbde225a0bd84e23d0d802ed18fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b52ac610987bbde225a0bd84e23d0d802ed18fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2daaae610b5515438b551a2f3706196a997f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2daaae610b5515438b551a2f3706196a997f35", "html_url": "https://github.com/rust-lang/rust/commit/fc2daaae610b5515438b551a2f3706196a997f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2daaae610b5515438b551a2f3706196a997f35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62d3f7fa9a91d933213cc10e20e740608983f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62d3f7fa9a91d933213cc10e20e740608983f64", "html_url": "https://github.com/rust-lang/rust/commit/d62d3f7fa9a91d933213cc10e20e740608983f64"}, {"sha": "d9c11929a5b495c25da7e91d6a5eec1ae3a32536", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c11929a5b495c25da7e91d6a5eec1ae3a32536", "html_url": "https://github.com/rust-lang/rust/commit/d9c11929a5b495c25da7e91d6a5eec1ae3a32536"}], "stats": {"total": 1822, "additions": 940, "deletions": 882}, "files": [{"sha": "94e2a40e1fe368ca2da564cb0d568d6d711426e5", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -145,8 +145,6 @@ pub struct ConstStability {\n     pub feature: Symbol,\n     /// whether the function has a `#[rustc_promotable]` attribute\n     pub promotable: bool,\n-    /// whether the function has a `#[rustc_allow_const_fn_ptr]` attribute\n-    pub allow_const_fn_ptr: bool,\n }\n \n /// The available stability levels.\n@@ -190,7 +188,6 @@ where\n     let mut stab: Option<Stability> = None;\n     let mut const_stab: Option<ConstStability> = None;\n     let mut promotable = false;\n-    let mut allow_const_fn_ptr = false;\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -200,7 +197,6 @@ where\n             sym::unstable,\n             sym::stable,\n             sym::rustc_promotable,\n-            sym::rustc_allow_const_fn_ptr,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -215,9 +211,6 @@ where\n         if attr.has_name(sym::rustc_promotable) {\n             promotable = true;\n         }\n-        if attr.has_name(sym::rustc_allow_const_fn_ptr) {\n-            allow_const_fn_ptr = true;\n-        }\n         // attributes with data\n         else if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n@@ -360,12 +353,8 @@ where\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature });\n                             } else {\n-                                const_stab = Some(ConstStability {\n-                                    level,\n-                                    feature,\n-                                    promotable: false,\n-                                    allow_const_fn_ptr: false,\n-                                });\n+                                const_stab =\n+                                    Some(ConstStability { level, feature, promotable: false });\n                             }\n                         }\n                         (None, _, _) => {\n@@ -440,12 +429,8 @@ where\n                             if sym::stable == meta_name {\n                                 stab = Some(Stability { level, feature });\n                             } else {\n-                                const_stab = Some(ConstStability {\n-                                    level,\n-                                    feature,\n-                                    promotable: false,\n-                                    allow_const_fn_ptr: false,\n-                                });\n+                                const_stab =\n+                                    Some(ConstStability { level, feature, promotable: false });\n                             }\n                         }\n                         (None, _) => {\n@@ -464,18 +449,16 @@ where\n     }\n \n     // Merge the const-unstable info into the stability info\n-    if promotable || allow_const_fn_ptr {\n+    if promotable {\n         if let Some(ref mut stab) = const_stab {\n             stab.promotable = promotable;\n-            stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n             struct_span_err!(\n                 diagnostic,\n                 item_sp,\n                 E0717,\n-                \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n-                      must be paired with either a rustc_const_unstable or a rustc_const_stable \\\n-                      attribute\"\n+                \"`rustc_promotable` attribute must be paired with either a `rustc_const_unstable` \\\n+                or a `rustc_const_stable` attribute\"\n             )\n             .emit();\n         }"}, {"sha": "544efc124e117ef34c53910c48c3771f4bdbe1a6", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -141,6 +141,9 @@ pub fn run_compiler(\n     callbacks: &mut (dyn Callbacks + Send),\n     file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     emitter: Option<Box<dyn Write + Send>>,\n+    make_codegen_backend: Option<\n+        Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n+    >,\n ) -> interface::Result<()> {\n     let mut args = Vec::new();\n     for arg in at_args {\n@@ -162,6 +165,11 @@ pub fn run_compiler(\n     let sopts = config::build_session_options(&matches);\n     let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n \n+    // We wrap `make_codegen_backend` in another `Option` such that `dummy_config` can take\n+    // ownership of it when necessary, while also allowing the non-dummy config to take ownership\n+    // when `dummy_config` is not used.\n+    let mut make_codegen_backend = Some(make_codegen_backend);\n+\n     let mut dummy_config = |sopts, cfg, diagnostic_output| {\n         let mut config = interface::Config {\n             opts: sopts,\n@@ -177,6 +185,7 @@ pub fn run_compiler(\n             lint_caps: Default::default(),\n             register_lints: None,\n             override_queries: None,\n+            make_codegen_backend: make_codegen_backend.take().unwrap(),\n             registry: diagnostics_registry(),\n         };\n         callbacks.config(&mut config);\n@@ -253,6 +262,7 @@ pub fn run_compiler(\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        make_codegen_backend: make_codegen_backend.unwrap(),\n         registry: diagnostics_registry(),\n     };\n \n@@ -1265,7 +1275,7 @@ pub fn main() -> ! {\n                 })\n             })\n             .collect::<Vec<_>>();\n-        run_compiler(&args, &mut callbacks, None, None)\n+        run_compiler(&args, &mut callbacks, None, None, None)\n     });\n     // The extra `\\t` is necessary to align this label with the others.\n     print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());"}, {"sha": "7f5b19134804e3ac03acf62a1bb2c00d3751faf5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -587,6 +587,9 @@ declare_features! (\n     /// Allows basic arithmetic on floating point types in a `const fn`.\n     (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n \n+    /// Allows using and casting function pointers in a `const fn`.\n+    (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "22c1ca2f289d3b23e33c25edf3e511bf612b2a37", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -464,7 +464,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_allow_const_fn_ptr, AssumedUsed, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_args_required_const, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n \n     // =========================================================================="}, {"sha": "73a51ad477b22e90b886cd14288e5ae0542045a3", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -154,6 +154,10 @@ pub struct Config {\n     pub override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n \n+    /// This is a callback from the driver that is called to create a codegen backend.\n+    pub make_codegen_backend:\n+        Option<Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>>,\n+\n     /// Registry of diagnostics codes.\n     pub registry: Registry,\n }\n@@ -167,6 +171,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         config.file_loader,\n         config.input_path.clone(),\n         config.lint_caps,\n+        config.make_codegen_backend,\n         registry.clone(),\n     );\n "}, {"sha": "7ace707cc88e9d0d00204b85bdc09e5ada7ba8aa", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -63,9 +63,17 @@ pub fn create_session(\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    make_codegen_backend: Option<\n+        Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n+    >,\n     descriptions: Registry,\n ) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>) {\n-    let codegen_backend = get_codegen_backend(&sopts);\n+    let codegen_backend = if let Some(make_codegen_backend) = make_codegen_backend {\n+        make_codegen_backend(&sopts)\n+    } else {\n+        get_codegen_backend(&sopts)\n+    };\n+\n     // target_override is documented to be called before init(), so this is okay\n     let target_override = codegen_backend.target_override(&sopts);\n "}, {"sha": "d5b99ea4d288dc66a65bfe4b9fc304ade09eef5a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -457,10 +457,6 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is promotable: `{}`\", tcx.def_path_str(key) }\n         }\n \n-        query const_fn_is_allowed_fn_ptr(key: DefId) -> bool {\n-            desc { |tcx| \"checking if const fn allows `fn()` types: `{}`\", tcx.def_path_str(key) }\n-        }\n-\n         /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(key: DefId) -> bool {\n             desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }"}, {"sha": "67c69d69bda81bac7a78ee2f8d0e93da8ddcf409", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -475,6 +475,18 @@ impl<T> Trait<T> for X {\n                                  #traits-as-parameters\",\n                         );\n                     }\n+                    (ty::Param(p), ty::Closure(..) | ty::Generator(..)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let p_span = self.def_span(generics.type_param(p, self).def_id);\n+                        if !sp.contains(p_span) {\n+                            db.span_label(p_span, \"this type parameter\");\n+                        }\n+                        db.help(&format!(\n+                            \"every closure has a distinct type and so could not always match the \\\n+                             caller-chosen type of parameter `{}`\",\n+                            p\n+                        ));\n+                    }\n                     (ty::Param(p), _) | (_, ty::Param(p)) => {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);"}, {"sha": "aca822a05bde93c90148ebfa47a0bab489e5602b", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -151,17 +151,11 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         }\n }\n \n-fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    is_const_fn(tcx, def_id)\n-        && tcx.lookup_const_stability(def_id).map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n-}\n-\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         is_const_fn_raw,\n         is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),\n         is_promotable_const_fn,\n-        const_fn_is_allowed_fn_ptr,\n         ..*providers\n     };\n }"}, {"sha": "3b8d8a5aa99dd12ce69630dff74619919de70543", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -213,11 +213,21 @@ impl NonConstOp for FnPtrCast {\n     const STOPS_CONST_CHECKING: bool = true;\n \n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        mcf_status_in_item(ccx)\n+        if ccx.const_kind() != hir::ConstContext::ConstFn {\n+            Status::Allowed\n+        } else {\n+            Status::Unstable(sym::const_fn_fn_ptr_basics)\n+        }\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"function pointer casts are not allowed in const fn\");\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_fn_fn_ptr_basics,\n+            span,\n+            &format!(\"function pointer casts are not allowed in {}s\", ccx.const_kind()),\n+        )\n+        .emit()\n     }\n }\n \n@@ -596,17 +606,21 @@ pub mod ty {\n         const STOPS_CONST_CHECKING: bool = true;\n \n         fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-            // FIXME: This attribute a hack to allow the specialization of the `futures` API. See\n-            // #59739. We should have a proper feature gate for this.\n-            if ccx.tcx.has_attr(ccx.def_id.to_def_id(), sym::rustc_allow_const_fn_ptr) {\n+            if ccx.const_kind() != hir::ConstContext::ConstFn {\n                 Status::Allowed\n             } else {\n-                mcf_status_in_item(ccx)\n+                Status::Unstable(sym::const_fn_fn_ptr_basics)\n             }\n         }\n \n         fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(ccx, span, \"function pointers in const fn are unstable\");\n+            feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_fn_fn_ptr_basics,\n+                span,\n+                &format!(\"function pointers cannot appear in {}s\", ccx.const_kind()),\n+            )\n+            .emit()\n         }\n     }\n "}, {"sha": "4234aef33590652b17bf282905a5e774eedc165a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -353,6 +353,7 @@ symbols! {\n         const_extern_fn,\n         const_fn,\n         const_fn_floating_point_arithmetic,\n+        const_fn_fn_ptr_basics,\n         const_fn_transmute,\n         const_fn_union,\n         const_generics,\n@@ -884,7 +885,6 @@ symbols! {\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n-        rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,"}, {"sha": "3e66885448b9aa5f4a1956cb5f29636e0cf95269", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -117,11 +117,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    // Checks that the type of `expr` can be coerced to `expected`.\n-    //\n-    // N.B., this code relies on `self.diverges` to be accurate. In\n-    // particular, assignments to `!` will be permitted if the\n-    // diverges flag is currently \"always\".\n+    /// Checks that the type of `expr` can be coerced to `expected`.\n+    ///\n+    /// N.B., this code relies on `self.diverges` to be accurate. In particular, assignments to `!`\n+    /// will be permitted if the diverges flag is currently \"always\".\n     pub fn demand_coerce_diag(\n         &self,\n         expr: &hir::Expr<'_>,"}, {"sha": "6a83f5da87cc8f413348861bbb80e547cc2c7457", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,3 +1,4 @@\n+use std::cell::Cell;\n use std::mem::MaybeUninit;\n use std::ptr::NonNull;\n \n@@ -49,3 +50,10 @@ fn box_clone_from_ptr_stability() {\n         assert_eq!(copy.as_ptr() as usize, copy_raw);\n     }\n }\n+\n+#[test]\n+fn box_deref_lval() {\n+    let x = Box::new(Cell::new(5));\n+    x.set(1000);\n+    assert_eq!(x.get(), 1000);\n+}"}, {"sha": "757fddd241857a28d734b9db47652ad08988060d", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 321, "deletions": 1, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,7 +1,327 @@\n-use std::fmt;\n+#![deny(warnings)]\n+\n+use std::cell::RefCell;\n+use std::fmt::{self, Write};\n \n #[test]\n fn test_format() {\n     let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\n     assert_eq!(s, \"Hello, world!\");\n }\n+\n+struct A;\n+struct B;\n+struct C;\n+struct D;\n+\n+impl fmt::LowerHex for A {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(\"aloha\")\n+    }\n+}\n+impl fmt::UpperHex for B {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(\"adios\")\n+    }\n+}\n+impl fmt::Display for C {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.pad_integral(true, \"\u2603\", \"123\")\n+    }\n+}\n+impl fmt::Binary for D {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(\"aa\")?;\n+        f.write_char('\u2603')?;\n+        f.write_str(\"bb\")\n+    }\n+}\n+\n+macro_rules! t {\n+    ($a:expr, $b:expr) => {\n+        assert_eq!($a, $b)\n+    };\n+}\n+\n+#[test]\n+fn test_format_macro_interface() {\n+    // Various edge cases without formats\n+    t!(format!(\"\"), \"\");\n+    t!(format!(\"hello\"), \"hello\");\n+    t!(format!(\"hello {{\"), \"hello {\");\n+\n+    // default formatters should work\n+    t!(format!(\"{}\", 1.0f32), \"1\");\n+    t!(format!(\"{}\", 1.0f64), \"1\");\n+    t!(format!(\"{}\", \"a\"), \"a\");\n+    t!(format!(\"{}\", \"a\".to_string()), \"a\");\n+    t!(format!(\"{}\", false), \"false\");\n+    t!(format!(\"{}\", 'a'), \"a\");\n+\n+    // At least exercise all the formats\n+    t!(format!(\"{}\", true), \"true\");\n+    t!(format!(\"{}\", '\u2603'), \"\u2603\");\n+    t!(format!(\"{}\", 10), \"10\");\n+    t!(format!(\"{}\", 10_usize), \"10\");\n+    t!(format!(\"{:?}\", '\u2603'), \"'\u2603'\");\n+    t!(format!(\"{:?}\", 10), \"10\");\n+    t!(format!(\"{:?}\", 10_usize), \"10\");\n+    t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n+    t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n+    t!(\n+        format!(\"{:?}\", \"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"),\n+        r#\"\"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"\"#\n+    );\n+    t!(format!(\"{:?}\", \"foo\\0bar\\x01baz\\u{7f}q\\u{75}x\"), r#\"\"foo\\u{0}bar\\u{1}baz\\u{7f}qux\"\"#);\n+    t!(format!(\"{:o}\", 10_usize), \"12\");\n+    t!(format!(\"{:x}\", 10_usize), \"a\");\n+    t!(format!(\"{:X}\", 10_usize), \"A\");\n+    t!(format!(\"{}\", \"foo\"), \"foo\");\n+    t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n+    if cfg!(target_pointer_width = \"32\") {\n+        t!(format!(\"{:#p}\", 0x1234 as *const isize), \"0x00001234\");\n+        t!(format!(\"{:#p}\", 0x1234 as *mut isize), \"0x00001234\");\n+    } else {\n+        t!(format!(\"{:#p}\", 0x1234 as *const isize), \"0x0000000000001234\");\n+        t!(format!(\"{:#p}\", 0x1234 as *mut isize), \"0x0000000000001234\");\n+    }\n+    t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n+    t!(format!(\"{:p}\", 0x1234 as *mut isize), \"0x1234\");\n+    t!(format!(\"{:x}\", A), \"aloha\");\n+    t!(format!(\"{:X}\", B), \"adios\");\n+    t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n+    t!(format!(\"{1} {0}\", 0, 1), \"1 0\");\n+    t!(format!(\"{foo} {bar}\", foo = 0, bar = 1), \"0 1\");\n+    t!(format!(\"{foo} {1} {bar} {0}\", 0, 1, foo = 2, bar = 3), \"2 1 3 0\");\n+    t!(format!(\"{} {0}\", \"a\"), \"a a\");\n+    t!(format!(\"{_foo}\", _foo = 6usize), \"6\");\n+    t!(format!(\"{foo_bar}\", foo_bar = 1), \"1\");\n+    t!(format!(\"{}\", 5 + 5), \"10\");\n+    t!(format!(\"{:#4}\", C), \"\u2603123\");\n+    t!(format!(\"{:b}\", D), \"aa\u2603bb\");\n+\n+    let a: &dyn fmt::Debug = &1;\n+    t!(format!(\"{:?}\", a), \"1\");\n+\n+    // Formatting strings and their arguments\n+    t!(format!(\"{}\", \"a\"), \"a\");\n+    t!(format!(\"{:4}\", \"a\"), \"a   \");\n+    t!(format!(\"{:4}\", \"\u2603\"), \"\u2603   \");\n+    t!(format!(\"{:>4}\", \"a\"), \"   a\");\n+    t!(format!(\"{:<4}\", \"a\"), \"a   \");\n+    t!(format!(\"{:^5}\", \"a\"), \"  a  \");\n+    t!(format!(\"{:^5}\", \"aa\"), \" aa  \");\n+    t!(format!(\"{:^4}\", \"a\"), \" a  \");\n+    t!(format!(\"{:^4}\", \"aa\"), \" aa \");\n+    t!(format!(\"{:.4}\", \"a\"), \"a\");\n+    t!(format!(\"{:4.4}\", \"a\"), \"a   \");\n+    t!(format!(\"{:4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:<4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:>4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:^4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"      aaaa\");\n+    t!(format!(\"{:2.4}\", \"aaaaa\"), \"aaaa\");\n+    t!(format!(\"{:2.4}\", \"aaaa\"), \"aaaa\");\n+    t!(format!(\"{:2.4}\", \"aaa\"), \"aaa\");\n+    t!(format!(\"{:2.4}\", \"aa\"), \"aa\");\n+    t!(format!(\"{:2.4}\", \"a\"), \"a \");\n+    t!(format!(\"{:0>2}\", \"a\"), \"0a\");\n+    t!(format!(\"{:.*}\", 4, \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:.1$}\", \"aaaaaaaaaaaaaaaaaa\", 4), \"aaaa\");\n+    t!(format!(\"{:.a$}\", \"aaaaaaaaaaaaaaaaaa\", a = 4), \"aaaa\");\n+    t!(format!(\"{:._a$}\", \"aaaaaaaaaaaaaaaaaa\", _a = 4), \"aaaa\");\n+    t!(format!(\"{:1$}\", \"a\", 4), \"a   \");\n+    t!(format!(\"{1:0$}\", 4, \"a\"), \"a   \");\n+    t!(format!(\"{:a$}\", \"a\", a = 4), \"a   \");\n+    t!(format!(\"{:-#}\", \"a\"), \"a\");\n+    t!(format!(\"{:+#}\", \"a\"), \"a\");\n+    t!(format!(\"{:/^10.8}\", \"1234567890\"), \"/12345678/\");\n+\n+    // Some float stuff\n+    t!(format!(\"{:}\", 1.0f32), \"1\");\n+    t!(format!(\"{:}\", 1.0f64), \"1\");\n+    t!(format!(\"{:.3}\", 1.0f64), \"1.000\");\n+    t!(format!(\"{:10.3}\", 1.0f64), \"     1.000\");\n+    t!(format!(\"{:+10.3}\", 1.0f64), \"    +1.000\");\n+    t!(format!(\"{:+10.3}\", -1.0f64), \"    -1.000\");\n+\n+    t!(format!(\"{:e}\", 1.2345e6f32), \"1.2345e6\");\n+    t!(format!(\"{:e}\", 1.2345e6f64), \"1.2345e6\");\n+    t!(format!(\"{:E}\", 1.2345e6f64), \"1.2345E6\");\n+    t!(format!(\"{:.3e}\", 1.2345e6f64), \"1.234e6\");\n+    t!(format!(\"{:10.3e}\", 1.2345e6f64), \"   1.234e6\");\n+    t!(format!(\"{:+10.3e}\", 1.2345e6f64), \"  +1.234e6\");\n+    t!(format!(\"{:+10.3e}\", -1.2345e6f64), \"  -1.234e6\");\n+\n+    // Float edge cases\n+    t!(format!(\"{}\", -0.0), \"0\");\n+    t!(format!(\"{:?}\", -0.0), \"-0.0\");\n+    t!(format!(\"{:?}\", 0.0), \"0.0\");\n+\n+    // sign aware zero padding\n+    t!(format!(\"{:<3}\", 1), \"1  \");\n+    t!(format!(\"{:>3}\", 1), \"  1\");\n+    t!(format!(\"{:^3}\", 1), \" 1 \");\n+    t!(format!(\"{:03}\", 1), \"001\");\n+    t!(format!(\"{:<03}\", 1), \"001\");\n+    t!(format!(\"{:>03}\", 1), \"001\");\n+    t!(format!(\"{:^03}\", 1), \"001\");\n+    t!(format!(\"{:+03}\", 1), \"+01\");\n+    t!(format!(\"{:<+03}\", 1), \"+01\");\n+    t!(format!(\"{:>+03}\", 1), \"+01\");\n+    t!(format!(\"{:^+03}\", 1), \"+01\");\n+    t!(format!(\"{:#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:<#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:>#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:^#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:<05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:>05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:^05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:<05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:>05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:^05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:<+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:>+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:^+05}\", 1.2), \"+01.2\");\n+\n+    // Ergonomic format_args!\n+    t!(format!(\"{0:x} {0:X}\", 15), \"f F\");\n+    t!(format!(\"{0:x} {0:X} {}\", 15), \"f F 15\");\n+    t!(format!(\"{:x}{0:X}{a:x}{:X}{1:x}{a:X}\", 13, 14, a = 15), \"dDfEeF\");\n+    t!(format!(\"{a:x} {a:X}\", a = 15), \"f F\");\n+\n+    // And its edge cases\n+    t!(\n+        format!(\n+            \"{a:.0$} {b:.0$} {0:.0$}\\n{a:.c$} {b:.c$} {c:.c$}\",\n+            4,\n+            a = \"abcdefg\",\n+            b = \"hijklmn\",\n+            c = 3\n+        ),\n+        \"abcd hijk 4\\nabc hij 3\"\n+    );\n+    t!(format!(\"{a:.*} {0} {:.*}\", 4, 3, \"efgh\", a = \"abcdef\"), \"abcd 4 efg\");\n+    t!(format!(\"{:.a$} {a} {a:#x}\", \"aaaaaa\", a = 2), \"aa 2 0x2\");\n+\n+    // Test that pointers don't get truncated.\n+    {\n+        let val = usize::MAX;\n+        let exp = format!(\"{:#x}\", val);\n+        t!(format!(\"{:p}\", val as *const isize), exp);\n+    }\n+\n+    // Escaping\n+    t!(format!(\"{{\"), \"{\");\n+    t!(format!(\"}}\"), \"}\");\n+\n+    // make sure that format! doesn't move out of local variables\n+    let a = Box::new(3);\n+    format!(\"{}\", a);\n+    format!(\"{}\", a);\n+\n+    // make sure that format! doesn't cause spurious unused-unsafe warnings when\n+    // it's inside of an outer unsafe block\n+    unsafe {\n+        let a: isize = ::std::mem::transmute(3_usize);\n+        format!(\"{}\", a);\n+    }\n+\n+    // test that trailing commas are acceptable\n+    format!(\"{}\", \"test\",);\n+    format!(\"{foo}\", foo = \"test\",);\n+}\n+\n+// Basic test to make sure that we can invoke the `write!` macro with an\n+// fmt::Write instance.\n+#[test]\n+fn test_write() {\n+    let mut buf = String::new();\n+    let _ = write!(&mut buf, \"{}\", 3);\n+    {\n+        let w = &mut buf;\n+        let _ = write!(w, \"{foo}\", foo = 4);\n+        let _ = write!(w, \"{}\", \"hello\");\n+        let _ = writeln!(w, \"{}\", \"line\");\n+        let _ = writeln!(w, \"{foo}\", foo = \"bar\");\n+        let _ = w.write_char('\u2603');\n+        let _ = w.write_str(\"str\");\n+    }\n+\n+    t!(buf, \"34helloline\\nbar\\n\u2603str\");\n+}\n+\n+// Just make sure that the macros are defined, there's not really a lot that we\n+// can do with them just yet (to test the output)\n+#[test]\n+fn test_print() {\n+    print!(\"hi\");\n+    print!(\"{:?}\", vec![0u8]);\n+    println!(\"hello\");\n+    println!(\"this is a {}\", \"test\");\n+    println!(\"{foo}\", foo = \"bar\");\n+}\n+\n+// Just make sure that the macros are defined, there's not really a lot that we\n+// can do with them just yet (to test the output)\n+#[test]\n+fn test_format_args() {\n+    let mut buf = String::new();\n+    {\n+        let w = &mut buf;\n+        let _ = write!(w, \"{}\", format_args!(\"{}\", 1));\n+        let _ = write!(w, \"{}\", format_args!(\"test\"));\n+        let _ = write!(w, \"{}\", format_args!(\"{test}\", test = 3));\n+    }\n+    let s = buf;\n+    t!(s, \"1test3\");\n+\n+    let s = fmt::format(format_args!(\"hello {}\", \"world\"));\n+    t!(s, \"hello world\");\n+    let s = format!(\"{}: {}\", \"args were\", format_args!(\"hello {}\", \"world\"));\n+    t!(s, \"args were: hello world\");\n+}\n+\n+#[test]\n+fn test_order() {\n+    // Make sure format!() arguments are always evaluated in a left-to-right\n+    // ordering\n+    fn foo() -> isize {\n+        static mut FOO: isize = 0;\n+        unsafe {\n+            FOO += 1;\n+            FOO\n+        }\n+    }\n+    assert_eq!(\n+        format!(\"{} {} {a} {b} {} {c}\", foo(), foo(), foo(), a = foo(), b = foo(), c = foo()),\n+        \"1 2 4 5 3 6\".to_string()\n+    );\n+}\n+\n+#[test]\n+fn test_once() {\n+    // Make sure each argument are evaluated only once even though it may be\n+    // formatted multiple times\n+    fn foo() -> isize {\n+        static mut FOO: isize = 0;\n+        unsafe {\n+            FOO += 1;\n+            FOO\n+        }\n+    }\n+    assert_eq!(format!(\"{0} {0} {0} {a} {a} {a}\", foo(), a = foo()), \"1 1 1 2 2 2\".to_string());\n+}\n+\n+#[test]\n+fn test_refcell() {\n+    let refcell = RefCell::new(5);\n+    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n+    let borrow = refcell.borrow_mut();\n+    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: <borrowed> }\");\n+    drop(borrow);\n+    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n+}"}, {"sha": "b7c7138db4f522a62b74b9f86489ce96a966e99a", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,4 +1,5 @@\n use std::borrow::Cow;\n+use std::cell::Cell;\n use std::collections::TryReserveError::*;\n use std::fmt::Debug;\n use std::iter::InPlaceIterable;\n@@ -1831,3 +1832,82 @@ fn partialeq_vec_full() {\n     assert_partial_eq_valid!(vec2,vec3; array2,array3);\n     assert_partial_eq_valid!(vec2,vec3; arrayref2,arrayref3);\n }\n+\n+#[test]\n+fn test_vec_cycle() {\n+    #[derive(Debug)]\n+    struct C<'a> {\n+        v: Vec<Cell<Option<&'a C<'a>>>>,\n+    }\n+\n+    impl<'a> C<'a> {\n+        fn new() -> C<'a> {\n+            C { v: Vec::new() }\n+        }\n+    }\n+\n+    let mut c1 = C::new();\n+    let mut c2 = C::new();\n+    let mut c3 = C::new();\n+\n+    // Push\n+    c1.v.push(Cell::new(None));\n+    c1.v.push(Cell::new(None));\n+\n+    c2.v.push(Cell::new(None));\n+    c2.v.push(Cell::new(None));\n+\n+    c3.v.push(Cell::new(None));\n+    c3.v.push(Cell::new(None));\n+\n+    // Set\n+    c1.v[0].set(Some(&c2));\n+    c1.v[1].set(Some(&c3));\n+\n+    c2.v[0].set(Some(&c2));\n+    c2.v[1].set(Some(&c3));\n+\n+    c3.v[0].set(Some(&c1));\n+    c3.v[1].set(Some(&c2));\n+}\n+\n+#[test]\n+fn test_vec_cycle_wrapped() {\n+    struct Refs<'a> {\n+        v: Vec<Cell<Option<&'a C<'a>>>>,\n+    }\n+\n+    struct C<'a> {\n+        refs: Refs<'a>,\n+    }\n+\n+    impl<'a> Refs<'a> {\n+        fn new() -> Refs<'a> {\n+            Refs { v: Vec::new() }\n+        }\n+    }\n+\n+    impl<'a> C<'a> {\n+        fn new() -> C<'a> {\n+            C { refs: Refs::new() }\n+        }\n+    }\n+\n+    let mut c1 = C::new();\n+    let mut c2 = C::new();\n+    let mut c3 = C::new();\n+\n+    c1.refs.v.push(Cell::new(None));\n+    c1.refs.v.push(Cell::new(None));\n+    c2.refs.v.push(Cell::new(None));\n+    c2.refs.v.push(Cell::new(None));\n+    c3.refs.v.push(Cell::new(None));\n+    c3.refs.v.push(Cell::new(None));\n+\n+    c1.refs.v[0].set(Some(&c2));\n+    c1.refs.v[1].set(Some(&c3));\n+    c2.refs.v[0].set(Some(&c2));\n+    c2.refs.v[1].set(Some(&c3));\n+    c3.refs.v[0].set(Some(&c1));\n+    c3.refs.v[1].set(Some(&c2));\n+}"}, {"sha": "c1038ce4260bc0e8959752e8ad96411624a8bfac", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -2238,5 +2238,6 @@ impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n     }\n }\n \n-// If you expected tests to be here, look instead at the ui/ifmt.rs test,\n+// If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n // it's a lot easier than creating all of the rt::Piece structures here.\n+// There are also tests in the alloc crate, for those that need allocations."}, {"sha": "845df3f5ca55107aa602f11d9334cc9469a26028", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1976,6 +1976,8 @@ pub trait Iterator {\n     /// // they're the same\n     /// assert_eq!(result, result2);\n     /// ```\n+    #[doc(alias = \"reduce\")]\n+    #[doc(alias = \"inject\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fold<B, F>(mut self, init: B, mut f: F) -> B"}, {"sha": "22bf2b15d6695651a91bd67ae29a4fd955bdef8a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -83,6 +83,7 @@\n #![feature(const_fn_union)]\n #![feature(const_fn)]\n #![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n+#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]"}, {"sha": "ba3fb35caaf9d2a3b8743cc6550b011f711b15bd", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -129,13 +129,9 @@ impl RawWakerVTable {\n     /// associated task.\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    // `rustc_allow_const_fn_ptr` is a hack that should not be used anywhere else\n-    // without first consulting with T-Lang.\n-    //\n-    // FIXME: remove whenever we have a stable way to accept fn pointers from const fn\n-    // (see https://github.com/rust-rfcs/const-eval/issues/19#issuecomment-472799062)\n-    #[rustc_allow_const_fn_ptr]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_fn_ptr_basics))]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_ptr)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "89c2a969c28bb34af9ccfd5475a7064f4a36ba94", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -345,3 +345,32 @@ fn array_map_drop_safety() {\n     assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n     panic!(\"test succeeded\")\n }\n+\n+#[test]\n+fn cell_allows_array_cycle() {\n+    use core::cell::Cell;\n+\n+    #[derive(Debug)]\n+    struct B<'a> {\n+        a: [Cell<Option<&'a B<'a>>>; 2],\n+    }\n+\n+    impl<'a> B<'a> {\n+        fn new() -> B<'a> {\n+            B { a: [Cell::new(None), Cell::new(None)] }\n+        }\n+    }\n+\n+    let b1 = B::new();\n+    let b2 = B::new();\n+    let b3 = B::new();\n+\n+    b1.a[0].set(Some(&b2));\n+    b1.a[1].set(Some(&b3));\n+\n+    b2.a[0].set(Some(&b2));\n+    b2.a[1].set(Some(&b3));\n+\n+    b3.a[0].set(Some(&b1));\n+    b3.a[1].set(Some(&b2));\n+}"}, {"sha": "40be01f443931df7b3ad4ff312de170be12e65b1", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -303,6 +303,53 @@ fn cell_into_inner() {\n     assert_eq!(\"Hello world\".to_owned(), cell.into_inner());\n }\n \n+#[test]\n+fn cell_exterior() {\n+    #[derive(Copy, Clone)]\n+    #[allow(dead_code)]\n+    struct Point {\n+        x: isize,\n+        y: isize,\n+        z: isize,\n+    }\n+\n+    fn f(p: &Cell<Point>) {\n+        assert_eq!(p.get().z, 12);\n+        p.set(Point { x: 10, y: 11, z: 13 });\n+        assert_eq!(p.get().z, 13);\n+    }\n+\n+    let a = Point { x: 10, y: 11, z: 12 };\n+    let b = &Cell::new(a);\n+    assert_eq!(b.get().z, 12);\n+    f(b);\n+    assert_eq!(a.z, 12);\n+    assert_eq!(b.get().z, 13);\n+}\n+\n+#[test]\n+fn cell_does_not_clone() {\n+    #[derive(Copy)]\n+    #[allow(dead_code)]\n+    struct Foo {\n+        x: isize,\n+    }\n+\n+    impl Clone for Foo {\n+        fn clone(&self) -> Foo {\n+            // Using Cell in any way should never cause clone() to be\n+            // invoked -- after all, that would permit evil user code to\n+            // abuse `Cell` and trigger crashes.\n+\n+            panic!();\n+        }\n+    }\n+\n+    let x = Cell::new(Foo { x: 22 });\n+    let _y = x.get();\n+    let _z = x.clone();\n+}\n+\n #[test]\n fn refcell_default() {\n     let cell: RefCell<u64> = Default::default();\n@@ -367,3 +414,11 @@ fn refcell_replace_borrows() {\n     let _b = x.borrow();\n     x.replace(1);\n }\n+\n+#[test]\n+fn refcell_format() {\n+    let name = RefCell::new(\"rust\");\n+    let what = RefCell::new(\"rocks\");\n+    let msg = format!(\"{name} {}\", &*what.borrow(), name = &*name.borrow());\n+    assert_eq!(msg, \"rust rocks\".to_string());\n+}"}, {"sha": "ab97352a806adc3f4638f70005693c830f85251c", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -376,6 +376,103 @@ fn test_zip_next_back_side_effects_exhausted() {\n     assert_eq!(b, vec![200, 300, 400]);\n }\n \n+#[derive(Debug)]\n+struct CountClone(Cell<i32>);\n+\n+fn count_clone() -> CountClone {\n+    CountClone(Cell::new(0))\n+}\n+\n+impl PartialEq<i32> for CountClone {\n+    fn eq(&self, rhs: &i32) -> bool {\n+        self.0.get() == *rhs\n+    }\n+}\n+\n+impl Clone for CountClone {\n+    fn clone(&self) -> Self {\n+        let ret = CountClone(self.0.clone());\n+        let n = self.0.get();\n+        self.0.set(n + 1);\n+        ret\n+    }\n+}\n+\n+#[test]\n+fn test_zip_cloned_sideffectful() {\n+    let xs = [count_clone(), count_clone(), count_clone(), count_clone()];\n+    let ys = [count_clone(), count_clone()];\n+\n+    for _ in xs.iter().cloned().zip(ys.iter().cloned()) {}\n+\n+    assert_eq!(&xs, &[1, 1, 1, 0][..]);\n+    assert_eq!(&ys, &[1, 1][..]);\n+\n+    let xs = [count_clone(), count_clone()];\n+    let ys = [count_clone(), count_clone(), count_clone(), count_clone()];\n+\n+    for _ in xs.iter().cloned().zip(ys.iter().cloned()) {}\n+\n+    assert_eq!(&xs, &[1, 1][..]);\n+    assert_eq!(&ys, &[1, 1, 0, 0][..]);\n+}\n+\n+#[test]\n+fn test_zip_map_sideffectful() {\n+    let mut xs = [0; 6];\n+    let mut ys = [0; 4];\n+\n+    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) {}\n+\n+    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n+    assert_eq!(&ys, &[1, 1, 1, 1]);\n+\n+    let mut xs = [0; 4];\n+    let mut ys = [0; 6];\n+\n+    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) {}\n+\n+    assert_eq!(&xs, &[1, 1, 1, 1]);\n+    assert_eq!(&ys, &[1, 1, 1, 1, 0, 0]);\n+}\n+\n+#[test]\n+fn test_zip_map_rev_sideffectful() {\n+    let mut xs = [0; 6];\n+    let mut ys = [0; 4];\n+\n+    {\n+        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n+        it.next_back();\n+    }\n+    assert_eq!(&xs, &[0, 0, 0, 1, 1, 1]);\n+    assert_eq!(&ys, &[0, 0, 0, 1]);\n+\n+    let mut xs = [0; 6];\n+    let mut ys = [0; 4];\n+\n+    {\n+        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n+        (&mut it).take(5).count();\n+        it.next_back();\n+    }\n+    assert_eq!(&xs, &[1, 1, 1, 1, 1, 1]);\n+    assert_eq!(&ys, &[1, 1, 1, 1]);\n+}\n+\n+#[test]\n+fn test_zip_nested_sideffectful() {\n+    let mut xs = [0; 6];\n+    let ys = [0; 4];\n+\n+    {\n+        // test that it has the side effect nested inside enumerate\n+        let it = xs.iter_mut().map(|x| *x = 1).enumerate().zip(&ys);\n+        it.count();\n+    }\n+    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n+}\n+\n #[test]\n fn test_zip_nth_back_side_effects_exhausted() {\n     let mut a = Vec::new();"}, {"sha": "ae814efec2086ea5966864b90a6e53b3deedafa0", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,3 +1,4 @@\n+use core::cell::Cell;\n use core::clone::Clone;\n use core::mem;\n use core::ops::DerefMut;\n@@ -372,3 +373,32 @@ fn option_const() {\n     const IS_NONE: bool = OPTION.is_none();\n     assert!(!IS_NONE);\n }\n+\n+#[test]\n+fn test_unwrap_drop() {\n+    struct Dtor<'a> {\n+        x: &'a Cell<isize>,\n+    }\n+\n+    impl<'a> std::ops::Drop for Dtor<'a> {\n+        fn drop(&mut self) {\n+            self.x.set(self.x.get() - 1);\n+        }\n+    }\n+\n+    fn unwrap<T>(o: Option<T>) -> T {\n+        match o {\n+            Some(v) => v,\n+            None => panic!(),\n+        }\n+    }\n+\n+    let x = &Cell::new(1);\n+\n+    {\n+        let b = Some(Dtor { x });\n+        let _c = unwrap(b);\n+    }\n+\n+    assert_eq!(x.get(), 0);\n+}"}, {"sha": "5ef30b1a8898a563f5a8da9003dba2fee3bbe7be", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,3 +1,4 @@\n+use core::cell::Cell;\n use core::result::Result::{Err, Ok};\n \n #[test]\n@@ -1980,3 +1981,30 @@ fn test_is_sorted() {\n     assert!(![\"c\", \"bb\", \"aaa\"].is_sorted());\n     assert!([\"c\", \"bb\", \"aaa\"].is_sorted_by_key(|s| s.len()));\n }\n+\n+#[test]\n+fn test_slice_run_destructors() {\n+    // Make sure that destructors get run on slice literals\n+    struct Foo<'a> {\n+        x: &'a Cell<isize>,\n+    }\n+\n+    impl<'a> Drop for Foo<'a> {\n+        fn drop(&mut self) {\n+            self.x.set(self.x.get() + 1);\n+        }\n+    }\n+\n+    fn foo(x: &Cell<isize>) -> Foo<'_> {\n+        Foo { x }\n+    }\n+\n+    let x = &Cell::new(0);\n+\n+    {\n+        let l = &[foo(x)];\n+        assert_eq!(l[0].x.get(), 0);\n+    }\n+\n+    assert_eq!(x.get(), 1);\n+}"}, {"sha": "93fa1f4e585739971d68cd75e89273e9cb148df5", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -21,6 +21,7 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(const_fn)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "e343eef91126edc0c2482771257e2e2049471276", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -239,6 +239,7 @@\n #![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_fn_ptr_basics))]\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "4281867314cca7b366db0f0682a1c9e96ccd41c4", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -411,3 +411,6 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n pub fn resume_unwind(payload: Box<dyn Any + Send>) -> ! {\n     panicking::rust_panic_without_hook(payload)\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "b37d74011cc671096e38eab8b66c1508516c0102", "filename": "library/std/src/panic/tests.rs", "status": "renamed", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Fpanic%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Fpanic%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic%2Ftests.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,16 +1,18 @@\n-// run-pass\n #![allow(dead_code)]\n \n-use std::panic::{UnwindSafe, AssertUnwindSafe};\n-use std::cell::RefCell;\n-use std::sync::{Mutex, RwLock, Arc};\n-use std::rc::Rc;\n+use crate::cell::RefCell;\n+use crate::panic::{AssertUnwindSafe, UnwindSafe};\n+use crate::rc::Rc;\n+use crate::sync::{Arc, Mutex, RwLock};\n \n-struct Foo { a: i32 }\n+struct Foo {\n+    a: i32,\n+}\n \n fn assert<T: UnwindSafe + ?Sized>() {}\n \n-fn main() {\n+#[test]\n+fn panic_safety_traits() {\n     assert::<i32>();\n     assert::<&i32>();\n     assert::<*mut i32>();\n@@ -32,13 +34,16 @@ fn main() {\n     assert::<Arc<i32>>();\n     assert::<Box<[u8]>>();\n \n-    trait Trait: UnwindSafe {}\n-    assert::<Box<dyn Trait>>();\n+    {\n+        trait Trait: UnwindSafe {}\n+        assert::<Box<dyn Trait>>();\n+    }\n \n     fn bar<T>() {\n         assert::<Mutex<T>>();\n         assert::<RwLock<T>>();\n     }\n+\n     fn baz<T: UnwindSafe>() {\n         assert::<Box<T>>();\n         assert::<Vec<T>>();", "previous_filename": "src/test/ui/panics/panic-safe.rs"}, {"sha": "00680fadc18dc58e225cc4e6a2baff186f326fcd", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 50, "deletions": 49, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -93,60 +93,61 @@ pub fn init() {\n         reset_sigpipe();\n     }\n \n-    // In the case when all file descriptors are open, the poll has been\n-    // observed to perform better than fcntl (on GNU/Linux).\n-    #[cfg(not(any(\n-        miri,\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        // The poll on Darwin doesn't set POLLNVAL for closed fds.\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"redox\",\n-    )))]\n-    unsafe fn sanitize_standard_fds() {\n-        use crate::sys::os::errno;\n-        let pfds: &mut [_] = &mut [\n-            libc::pollfd { fd: 0, events: 0, revents: 0 },\n-            libc::pollfd { fd: 1, events: 0, revents: 0 },\n-            libc::pollfd { fd: 2, events: 0, revents: 0 },\n-        ];\n-        while libc::poll(pfds.as_mut_ptr(), 3, 0) == -1 {\n-            if errno() == libc::EINTR {\n-                continue;\n-            }\n-            libc::abort();\n-        }\n-        for pfd in pfds {\n-            if pfd.revents & libc::POLLNVAL == 0 {\n-                continue;\n-            }\n-            if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n-                // If the stream is closed but we failed to reopen it, abort the\n-                // process. Otherwise we wouldn't preserve the safety of\n-                // operations on the corresponding Rust object Stdin, Stdout, or\n-                // Stderr.\n-                libc::abort();\n-            }\n-        }\n-    }\n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"redox\"))]\n-    unsafe fn sanitize_standard_fds() {\n-        use crate::sys::os::errno;\n-        for fd in 0..3 {\n-            if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n-                if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+    cfg_if::cfg_if! {\n+        if #[cfg(miri)] {\n+            // The standard fds are always available in Miri.\n+            unsafe fn sanitize_standard_fds() {}\n+        } else if #[cfg(not(any(\n+            target_os = \"emscripten\",\n+            target_os = \"fuchsia\",\n+            // The poll on Darwin doesn't set POLLNVAL for closed fds.\n+            target_os = \"macos\",\n+            target_os = \"ios\",\n+            target_os = \"redox\",\n+        )))] {\n+            // In the case when all file descriptors are open, the poll has been\n+            // observed to perform better than fcntl (on GNU/Linux).\n+            unsafe fn sanitize_standard_fds() {\n+                use crate::sys::os::errno;\n+                let pfds: &mut [_] = &mut [\n+                    libc::pollfd { fd: 0, events: 0, revents: 0 },\n+                    libc::pollfd { fd: 1, events: 0, revents: 0 },\n+                    libc::pollfd { fd: 2, events: 0, revents: 0 },\n+                ];\n+                while libc::poll(pfds.as_mut_ptr(), 3, 0) == -1 {\n+                    if errno() == libc::EINTR {\n+                        continue;\n+                    }\n                     libc::abort();\n                 }\n+                for pfd in pfds {\n+                    if pfd.revents & libc::POLLNVAL == 0 {\n+                        continue;\n+                    }\n+                    if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                        // If the stream is closed but we failed to reopen it, abort the\n+                        // process. Otherwise we wouldn't preserve the safety of\n+                        // operations on the corresponding Rust object Stdin, Stdout, or\n+                        // Stderr.\n+                        libc::abort();\n+                    }\n+                }\n+            }\n+        } else if #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"redox\"))] {\n+            unsafe fn sanitize_standard_fds() {\n+                use crate::sys::os::errno;\n+                for fd in 0..3 {\n+                    if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n+                        if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                            libc::abort();\n+                        }\n+                    }\n+                }\n             }\n+        } else {\n+            unsafe fn sanitize_standard_fds() {}\n         }\n     }\n-    #[cfg(any(\n-        // The standard fds are always available in Miri.\n-        miri,\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\"))]\n-    unsafe fn sanitize_standard_fds() {}\n \n     #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n     unsafe fn reset_sigpipe() {"}, {"sha": "af39424ec6c30cfa2e0795da137c468d5b9eeacc", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -410,7 +410,7 @@ reg_spec := <register class> / \"<explicit register>\"\n operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n-option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"att_syntax\"\n+option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n ```"}, {"sha": "391859050e8a641f6dd15169bfb56fa6f8096cb6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -419,6 +419,7 @@ pub fn run_core(\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)\n             };\n         }),\n+        make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n     };\n "}, {"sha": "7a6c9eabb5f405533442deb5c570da729a4dafb7", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -95,6 +95,7 @@ pub fn run(options: Options) -> Result<(), ErrorReported> {\n         lint_caps,\n         register_lints: None,\n         override_queries: None,\n+        make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n     };\n "}, {"sha": "2636423c1a480c36f9adc78ee7740270505a3e5f", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -60,6 +60,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n     };\n "}, {"sha": "0025b47403d19f30f49b5edac7df4947c886d95f", "filename": "src/test/ui-fulldeps/compiler-calls.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -26,7 +26,13 @@ fn main() {\n     let mut count = 1;\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n     rustc_driver::catch_fatal_errors(|| {\n-        rustc_driver::run_compiler(&args, &mut TestCalls { count: &mut count }, None, None).ok();\n+        rustc_driver::run_compiler(\n+            &args,\n+            &mut TestCalls { count: &mut count },\n+            None,\n+            None,\n+            None,\n+        ).ok();\n     }).ok();\n     assert_eq!(count, 2);\n }"}, {"sha": "c262b5a1ff09e66896260dad7899f3d1a1bf3cad", "filename": "src/test/ui/array-slice-vec/arr_cycle.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Farr_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Farr_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farr_cycle.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-\n-use std::cell::Cell;\n-\n-#[derive(Debug)]\n-struct B<'a> {\n-    a: [Cell<Option<&'a B<'a>>>; 2]\n-}\n-\n-impl<'a> B<'a> {\n-    fn new() -> B<'a> {\n-        B { a: [Cell::new(None), Cell::new(None)] }\n-    }\n-}\n-\n-fn f() {\n-    let (b1, b2, b3);\n-    b1 = B::new();\n-    b2 = B::new();\n-    b3 = B::new();\n-    b1.a[0].set(Some(&b2));\n-    b1.a[1].set(Some(&b3));\n-    b2.a[0].set(Some(&b2));\n-    b2.a[1].set(Some(&b3));\n-    b3.a[0].set(Some(&b1));\n-    b3.a[1].set(Some(&b2));\n-}\n-\n-fn main() {\n-    f();\n-}"}, {"sha": "3a9ea86af34bbf3098edcce4f24c9b219acc4282", "filename": "src/test/ui/array-slice-vec/vec-slice-drop.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-slice-drop.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-\n-#![allow(non_camel_case_types)]\n-\n-use std::cell::Cell;\n-\n-// Make sure that destructors get run on slice literals\n-struct foo<'a> {\n-    x: &'a Cell<isize>,\n-}\n-\n-impl<'a> Drop for foo<'a> {\n-    fn drop(&mut self) {\n-        self.x.set(self.x.get() + 1);\n-    }\n-}\n-\n-fn foo(x: &Cell<isize>) -> foo {\n-    foo {\n-        x: x\n-    }\n-}\n-\n-pub fn main() {\n-    let x = &Cell::new(0);\n-    {\n-        let l = &[foo(x)];\n-        assert_eq!(l[0].x.get(), 0);\n-    }\n-    assert_eq!(x.get(), 1);\n-}"}, {"sha": "82bce437282628cf7f41ad34b870006fd94c9e5d", "filename": "src/test/ui/array-slice-vec/vec_cycle.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec_cycle.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,39 +0,0 @@\n-// run-pass\n-\n-use std::cell::Cell;\n-\n-#[derive(Debug)]\n-struct C<'a> {\n-    v: Vec<Cell<Option<&'a C<'a>>>>,\n-}\n-\n-impl<'a> C<'a> {\n-    fn new() -> C<'a> {\n-        C { v: Vec::new() }\n-    }\n-}\n-\n-fn f() {\n-    let (mut c1, mut c2, mut c3);\n-    c1 = C::new();\n-    c2 = C::new();\n-    c3 = C::new();\n-\n-    c1.v.push(Cell::new(None));\n-    c1.v.push(Cell::new(None));\n-    c2.v.push(Cell::new(None));\n-    c2.v.push(Cell::new(None));\n-    c3.v.push(Cell::new(None));\n-    c3.v.push(Cell::new(None));\n-\n-    c1.v[0].set(Some(&c2));\n-    c1.v[1].set(Some(&c3));\n-    c2.v[0].set(Some(&c2));\n-    c2.v[1].set(Some(&c3));\n-    c3.v[0].set(Some(&c1));\n-    c3.v[1].set(Some(&c2));\n-}\n-\n-fn main() {\n-    f();\n-}"}, {"sha": "1a3606d5e8d5af87c0cf5565f8c4dda8ce1abbb3", "filename": "src/test/ui/array-slice-vec/vec_cycle_wrapped.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec_cycle_wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec_cycle_wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec_cycle_wrapped.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,50 +0,0 @@\n-// run-pass\n-\n-use std::cell::Cell;\n-\n-#[derive(Debug)]\n-struct Refs<'a> {\n-    v: Vec<Cell<Option<&'a C<'a>>>>,\n-}\n-\n-#[derive(Debug)]\n-struct C<'a> {\n-    refs: Refs<'a>,\n-}\n-\n-impl<'a> Refs<'a> {\n-    fn new() -> Refs<'a> {\n-        Refs { v: Vec::new() }\n-    }\n-}\n-\n-impl<'a> C<'a> {\n-    fn new() -> C<'a> {\n-        C { refs: Refs::new() }\n-    }\n-}\n-\n-fn f() {\n-    let (mut c1, mut c2, mut c3);\n-    c1 = C::new();\n-    c2 = C::new();\n-    c3 = C::new();\n-\n-    c1.refs.v.push(Cell::new(None));\n-    c1.refs.v.push(Cell::new(None));\n-    c2.refs.v.push(Cell::new(None));\n-    c2.refs.v.push(Cell::new(None));\n-    c3.refs.v.push(Cell::new(None));\n-    c3.refs.v.push(Cell::new(None));\n-\n-    c1.refs.v[0].set(Some(&c2));\n-    c1.refs.v[1].set(Some(&c3));\n-    c2.refs.v[0].set(Some(&c2));\n-    c2.refs.v[1].set(Some(&c3));\n-    c3.refs.v[0].set(Some(&c1));\n-    c3.refs.v[1].set(Some(&c2));\n-}\n-\n-fn main() {\n-    f();\n-}"}, {"sha": "587447b54b7fdc038eced045ea862bf0108ed87d", "filename": "src/test/ui/cell-does-not-clone.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fcell-does-not-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fcell-does-not-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcell-does-not-clone.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,26 +0,0 @@\n-// run-pass\n-\n-#![allow(dead_code)]\n-\n-use std::cell::Cell;\n-\n-#[derive(Copy)]\n-struct Foo {\n-    x: isize\n-}\n-\n-impl Clone for Foo {\n-    fn clone(&self) -> Foo {\n-        // Using Cell in any way should never cause clone() to be\n-        // invoked -- after all, that would permit evil user code to\n-        // abuse `Cell` and trigger crashes.\n-\n-        panic!();\n-    }\n-}\n-\n-pub fn main() {\n-    let x = Cell::new(Foo { x: 22 });\n-    let _y = x.get();\n-    let _z = x.clone();\n-}"}, {"sha": "bf0b01a2ecfe0d89ed0005dc4af6ccb963a7df1a", "filename": "src/test/ui/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,6 +1,6 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n #![crate_type=\"rlib\"]\n \n pub const fn foo() -> usize { 22 }"}, {"sha": "ab18020056b0aeb174310fee3e665fd3730d020f", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -10,11 +10,23 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     X_CONST(x)\n    |     ^^^^^^^^^^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr.rs:19:14\n+   |\n+LL | const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n+   |              ^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr.rs:20:5\n+   |\n+LL |     x(y)\n+   |     ^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr.rs:20:5\n    |\n LL |     x(y)\n    |     ^^^^\n \n-warning: 1 warning emitted\n+error: `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "822d4af83064ea8dbedcc2c18976632c002651fd", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -20,6 +20,16 @@ LL |     assert_eq!(Z, 4);\n \n warning: skipping const checks\n    |\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr_fail2.rs:12:14\n+   |\n+LL | const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n+   |              ^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+   |\n+LL |     x(y)\n+   |     ^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr_fail2.rs:13:5\n    |"}, {"sha": "bf8bae5ea2c73609d5359a9b35ac19220d15e296", "filename": "src/test/ui/consts/const-eval/issue-70804-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n const fn nested(x: (for<'a> fn(&'a ()), String)) -> (fn(&'static ()), String) {\n     x"}, {"sha": "8642954a75b45f7353ac0de043b36f476c8adf51", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -2,7 +2,7 @@\n \n const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const unsafe extern fn use_float() { 1.0 + 1.0; }\n //~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }"}, {"sha": "455a822e2d0855e316b3b2f1c6b923a3e6df6b3c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,11 +1,11 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/const-extern-fn-min-const-fn.rs:4:41\n    |\n LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    |                                         ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: floating point arithmetic is not allowed in constant functions\n   --> $DIR/const-extern-fn-min-const-fn.rs:6:38\n@@ -27,5 +27,4 @@ LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0658, E0723.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "15877c53747ec0a3171a7ee2159d069ffcdfdf4c", "filename": "src/test/ui/consts/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n const fn x() {\n     let t = true;"}, {"sha": "90ea217698d6572f8040208d9f238c2e2d90d0d0", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,12 +1,11 @@\n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n const fn foo() { (||{})() }\n-//~^ ERROR calls in constant functions are limited to constant functions, tuple structs and tuple\n-// variants\n+//~^ ERROR calls in constant functions\n \n const fn bad(input: fn()) {\n     input()\n-    //~^ ERROR function pointers are not allowed in const fn\n+    //~^ ERROR function pointer\n }\n \n fn main() {"}, {"sha": "500af0a40069a2e0171a180e336e0e0442cdab29", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -5,7 +5,7 @@ LL | const fn foo() { (||{})() }\n    |                  ^^^^^^^^\n \n error: function pointers are not allowed in const fn\n-  --> $DIR/issue-56164.rs:8:5\n+  --> $DIR/issue-56164.rs:7:5\n    |\n LL |     input()\n    |     ^^^^^^^"}, {"sha": "dc10db177ed6970e920c7b775f3e83a4b1015d20", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,12 +1,14 @@\n-#![feature(rustc_attrs, staged_api)]\n+#![feature(rustc_attrs, staged_api, allow_internal_unstable)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-const fn error(_: fn()) {} //~ ERROR function pointers in const fn are unstable\n+const fn error(_: fn()) {}\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_allow_const_fn_ptr]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n+#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n const fn compiles(_: fn()) {}\n \n fn main() {}"}, {"sha": "94f6cda209749c199049bf3f7a2c12cce52d28d3", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,12 +1,14 @@\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/allow_const_fn_ptr.rs:5:16\n+error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n+  --> $DIR/allow_const_fn_ptr.rs:6:16\n    |\n LL | const fn error(_: fn()) {}\n    |                ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: if it is not part of the public API, make this function unstably const\n+   |\n+LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+   |\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`."}, {"sha": "0f9d37292958aa703dabcafad748323c8fe95a83", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,11 +0,0 @@\n-#![feature(staged_api)]\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-const fn error(_: fn()) {}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_allow_const_fn_ptr]\n-//~^ ERROR internal implementation detail\n-const fn compiles(_: fn()) {}\n-\n-fn main() {}"}, {"sha": "7794cc7583dfcefa8cdaf753b016e8276fa95a47", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: internal implementation detail\n-  --> $DIR/allow_const_fn_ptr_feature_gate.rs:7:1\n-   |\n-LL | #[rustc_allow_const_fn_ptr]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b4e836bbc95404ba13334bf9e537ff858663b6f9", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,11 +1,13 @@\n // run-pass\n+#![feature(allow_internal_unstable)]\n+#![feature(const_fn_fn_ptr_basics)]\n \n #![feature(rustc_attrs, staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_allow_const_fn_ptr]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n+#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n const fn takes_fn_ptr(_: fn()) {}\n \n const FN: fn() = || ();"}, {"sha": "43ef8ea12eb1f764d47122bf009b0bcff7cc487a", "filename": "src/test/ui/consts/min_const_fn/cast_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -2,12 +2,12 @@ fn main() {}\n \n const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const fn closure() -> fn() { || {} }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const fn closure2() {\n     (|| {}) as fn();\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n }\n const fn reify(f: fn()) -> unsafe fn() { f }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const fn reify2() { main as unsafe fn(); }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer"}, {"sha": "ac77c181afda8468c9a30f240fcdf17cc0e283c6", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,39 +1,39 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:4:23\n    |\n LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:7:5\n    |\n LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:10:28\n    |\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cast_errors.rs:12:21\n    |\n LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4aaf7b86e45605dfb53c2b0981b693b10ff6764a", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,4 +1,4 @@\n-const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointers in const fn are unstable\n+const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointer\n     unsafe { x == y }\n }\n "}, {"sha": "e913b187feeae55f610f41e2310b57d9b91a5854", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,12 +1,12 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/cmp_fn_pointers.rs:1:14\n    |\n LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    |              ^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "06a44b271064c1dce2540a4b1d7a0b039e71aa02", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -128,6 +128,6 @@ const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n //~^ ERROR trait bounds other than `Sized`\n \n const fn no_fn_ptrs(_x: fn()) {}\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer\n const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-//~^ ERROR function pointers in const fn are unstable\n+//~^ ERROR function pointer"}, {"sha": "5e6bf7ef890349fe31ec7c42f9601f538e76d0c0", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -209,23 +209,23 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/min_const_fn.rs:130:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/min_const_fn.rs:132:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to 26 previous errors\n "}, {"sha": "bc6fe89222bbf4d061464415f185b0393cd8576a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,3 +1,5 @@\n+// gate-test-const_fn_fn_ptr_basics\n+\n struct HasPtr {\n     field: fn(),\n }\n@@ -9,9 +11,9 @@ fn field() {}\n const fn no_inner_dyn_trait(_x: Hide) {}\n const fn no_inner_dyn_trait2(x: Hide) {\n     x.0.field;\n-//~^ ERROR function pointers in const fn\n+//~^ ERROR function pointer\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n-//~^ ERROR function pointers in const fn\n+//~^ ERROR function pointer\n \n fn main() {}"}, {"sha": "8d60436ea39bbdb00d626849cdd1b20f6dac0bed", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,21 +1,21 @@\n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn_fn_ptr.rs:11:5\n+error[E0658]: function pointers cannot appear in constant functions\n+  --> $DIR/min_const_fn_fn_ptr.rs:13:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn_fn_ptr.rs:14:59\n+error[E0658]: function pointers cannot appear in constant functions\n+  --> $DIR/min_const_fn_fn_ptr.rs:16:59\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8fd562c5dae84223391052dbd3e5570123f9a973", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -12,12 +12,12 @@ LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"\n \n warning: skipping const checks\n    |\n-help: skipping check for `const_fn` feature\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n   --> $DIR/abi-mismatch.rs:9:23\n    |\n LL | const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n    |                       ^^^^^\n-help: skipping check for `const_fn` feature\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n   --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();"}, {"sha": "f57872f80e02504789e94b1deda3f70eea44902b", "filename": "src/test/ui/deref-lval.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-lval.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,11 +0,0 @@\n-// run-pass\n-\n-#![feature(box_syntax)]\n-\n-use std::cell::Cell;\n-\n-pub fn main() {\n-    let x: Box<_> = box Cell::new(5);\n-    x.set(1000);\n-    println!(\"{}\", x.get());\n-}"}, {"sha": "6f2c37926bea65167b0952d2aa3f804df25fa472", "filename": "src/test/ui/exterior.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexterior.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,24 +0,0 @@\n-// run-pass\n-\n-#![allow(dead_code)]\n-\n-\n-use std::cell::Cell;\n-\n-#[derive(Copy, Clone)]\n-struct Point {x: isize, y: isize, z: isize}\n-\n-fn f(p: &Cell<Point>) {\n-    assert_eq!(p.get().z, 12);\n-    p.set(Point {x: 10, y: 11, z: 13});\n-    assert_eq!(p.get().z, 13);\n-}\n-\n-pub fn main() {\n-    let a: Point = Point {x: 10, y: 11, z: 12};\n-    let b: &Cell<Point> = &Cell::new(a);\n-    assert_eq!(b.get().z, 12);\n-    f(b);\n-    assert_eq!(a.z, 12);\n-    assert_eq!(b.get().z, 13);\n-}"}, {"sha": "afb2f8488b82aface3710befbc68562149b5542b", "filename": "src/test/ui/format-ref-cell.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fformat-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fformat-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fformat-ref-cell.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-\n-use std::cell::RefCell;\n-\n-pub fn main() {\n-    let name = RefCell::new(\"rust\");\n-    let what = RefCell::new(\"rocks\");\n-    let msg = format!(\"{name} {}\", &*what.borrow(), name=&*name.borrow());\n-    assert_eq!(msg, \"rust rocks\".to_string());\n-}"}, {"sha": "27ab3d6b7abffe921e2a30ad1fc9b74987341b41", "filename": "src/test/ui/ifmt.rs", "status": "removed", "additions": 0, "deletions": 319, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,319 +0,0 @@\n-// run-pass\n-\n-#![deny(warnings)]\n-#![allow(unused_must_use)]\n-#![allow(unused_features)]\n-#![feature(box_syntax)]\n-\n-use std::cell::RefCell;\n-use std::fmt::{self, Write};\n-use std::usize;\n-\n-struct A;\n-struct B;\n-struct C;\n-struct D;\n-\n-impl fmt::LowerHex for A {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.write_str(\"aloha\")\n-    }\n-}\n-impl fmt::UpperHex for B {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.write_str(\"adios\")\n-    }\n-}\n-impl fmt::Display for C {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad_integral(true, \"\u2603\", \"123\")\n-    }\n-}\n-impl fmt::Binary for D {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.write_str(\"aa\")?;\n-        f.write_char('\u2603')?;\n-        f.write_str(\"bb\")\n-    }\n-}\n-\n-macro_rules! t {\n-    ($a:expr, $b:expr) => { assert_eq!($a, $b) }\n-}\n-\n-pub fn main() {\n-    // Various edge cases without formats\n-    t!(format!(\"\"), \"\");\n-    t!(format!(\"hello\"), \"hello\");\n-    t!(format!(\"hello {{\"), \"hello {\");\n-\n-    // default formatters should work\n-    t!(format!(\"{}\", 1.0f32), \"1\");\n-    t!(format!(\"{}\", 1.0f64), \"1\");\n-    t!(format!(\"{}\", \"a\"), \"a\");\n-    t!(format!(\"{}\", \"a\".to_string()), \"a\");\n-    t!(format!(\"{}\", false), \"false\");\n-    t!(format!(\"{}\", 'a'), \"a\");\n-\n-    // At least exercise all the formats\n-    t!(format!(\"{}\", true), \"true\");\n-    t!(format!(\"{}\", '\u2603'), \"\u2603\");\n-    t!(format!(\"{}\", 10), \"10\");\n-    t!(format!(\"{}\", 10_usize), \"10\");\n-    t!(format!(\"{:?}\", '\u2603'), \"'\u2603'\");\n-    t!(format!(\"{:?}\", 10), \"10\");\n-    t!(format!(\"{:?}\", 10_usize), \"10\");\n-    t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n-    t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n-    t!(format!(\"{:?}\", \"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"),\n-       r#\"\"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"\"#);\n-    t!(format!(\"{:?}\", \"foo\\0bar\\x01baz\\u{7f}q\\u{75}x\"),\n-       r#\"\"foo\\u{0}bar\\u{1}baz\\u{7f}qux\"\"#);\n-    t!(format!(\"{:o}\", 10_usize), \"12\");\n-    t!(format!(\"{:x}\", 10_usize), \"a\");\n-    t!(format!(\"{:X}\", 10_usize), \"A\");\n-    t!(format!(\"{}\", \"foo\"), \"foo\");\n-    t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n-    if cfg!(target_pointer_width = \"32\") {\n-        t!(format!(\"{:#p}\", 0x1234 as *const isize), \"0x00001234\");\n-        t!(format!(\"{:#p}\", 0x1234 as *mut isize), \"0x00001234\");\n-    } else {\n-        t!(format!(\"{:#p}\", 0x1234 as *const isize), \"0x0000000000001234\");\n-        t!(format!(\"{:#p}\", 0x1234 as *mut isize), \"0x0000000000001234\");\n-    }\n-    t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n-    t!(format!(\"{:p}\", 0x1234 as *mut isize), \"0x1234\");\n-    t!(format!(\"{:x}\", A), \"aloha\");\n-    t!(format!(\"{:X}\", B), \"adios\");\n-    t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n-    t!(format!(\"{1} {0}\", 0, 1), \"1 0\");\n-    t!(format!(\"{foo} {bar}\", foo=0, bar=1), \"0 1\");\n-    t!(format!(\"{foo} {1} {bar} {0}\", 0, 1, foo=2, bar=3), \"2 1 3 0\");\n-    t!(format!(\"{} {0}\", \"a\"), \"a a\");\n-    t!(format!(\"{_foo}\", _foo = 6usize), \"6\");\n-    t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n-    t!(format!(\"{}\", 5 + 5), \"10\");\n-    t!(format!(\"{:#4}\", C), \"\u2603123\");\n-    t!(format!(\"{:b}\", D), \"aa\u2603bb\");\n-\n-    let a: &dyn fmt::Debug = &1;\n-    t!(format!(\"{:?}\", a), \"1\");\n-\n-    // Formatting strings and their arguments\n-    t!(format!(\"{}\", \"a\"), \"a\");\n-    t!(format!(\"{:4}\", \"a\"), \"a   \");\n-    t!(format!(\"{:4}\", \"\u2603\"), \"\u2603   \");\n-    t!(format!(\"{:>4}\", \"a\"), \"   a\");\n-    t!(format!(\"{:<4}\", \"a\"), \"a   \");\n-    t!(format!(\"{:^5}\", \"a\"),  \"  a  \");\n-    t!(format!(\"{:^5}\", \"aa\"), \" aa  \");\n-    t!(format!(\"{:^4}\", \"a\"),  \" a  \");\n-    t!(format!(\"{:^4}\", \"aa\"), \" aa \");\n-    t!(format!(\"{:.4}\", \"a\"), \"a\");\n-    t!(format!(\"{:4.4}\", \"a\"), \"a   \");\n-    t!(format!(\"{:4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:<4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:>4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:^4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"      aaaa\");\n-    t!(format!(\"{:2.4}\", \"aaaaa\"), \"aaaa\");\n-    t!(format!(\"{:2.4}\", \"aaaa\"), \"aaaa\");\n-    t!(format!(\"{:2.4}\", \"aaa\"), \"aaa\");\n-    t!(format!(\"{:2.4}\", \"aa\"), \"aa\");\n-    t!(format!(\"{:2.4}\", \"a\"), \"a \");\n-    t!(format!(\"{:0>2}\", \"a\"), \"0a\");\n-    t!(format!(\"{:.*}\", 4, \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:.1$}\", \"aaaaaaaaaaaaaaaaaa\", 4), \"aaaa\");\n-    t!(format!(\"{:.a$}\", \"aaaaaaaaaaaaaaaaaa\", a=4), \"aaaa\");\n-    t!(format!(\"{:._a$}\", \"aaaaaaaaaaaaaaaaaa\", _a=4), \"aaaa\");\n-    t!(format!(\"{:1$}\", \"a\", 4), \"a   \");\n-    t!(format!(\"{1:0$}\", 4, \"a\"), \"a   \");\n-    t!(format!(\"{:a$}\", \"a\", a=4), \"a   \");\n-    t!(format!(\"{:-#}\", \"a\"), \"a\");\n-    t!(format!(\"{:+#}\", \"a\"), \"a\");\n-    t!(format!(\"{:/^10.8}\", \"1234567890\"), \"/12345678/\");\n-\n-    // Some float stuff\n-    t!(format!(\"{:}\", 1.0f32), \"1\");\n-    t!(format!(\"{:}\", 1.0f64), \"1\");\n-    t!(format!(\"{:.3}\", 1.0f64), \"1.000\");\n-    t!(format!(\"{:10.3}\", 1.0f64),   \"     1.000\");\n-    t!(format!(\"{:+10.3}\", 1.0f64),  \"    +1.000\");\n-    t!(format!(\"{:+10.3}\", -1.0f64), \"    -1.000\");\n-\n-    t!(format!(\"{:e}\", 1.2345e6f32), \"1.2345e6\");\n-    t!(format!(\"{:e}\", 1.2345e6f64), \"1.2345e6\");\n-    t!(format!(\"{:E}\", 1.2345e6f64), \"1.2345E6\");\n-    t!(format!(\"{:.3e}\", 1.2345e6f64), \"1.234e6\");\n-    t!(format!(\"{:10.3e}\", 1.2345e6f64),   \"   1.234e6\");\n-    t!(format!(\"{:+10.3e}\", 1.2345e6f64),  \"  +1.234e6\");\n-    t!(format!(\"{:+10.3e}\", -1.2345e6f64), \"  -1.234e6\");\n-\n-    // Float edge cases\n-    t!(format!(\"{}\", -0.0), \"0\");\n-    t!(format!(\"{:?}\", -0.0), \"-0.0\");\n-    t!(format!(\"{:?}\", 0.0), \"0.0\");\n-\n-    // sign aware zero padding\n-    t!(format!(\"{:<3}\", 1), \"1  \");\n-    t!(format!(\"{:>3}\", 1), \"  1\");\n-    t!(format!(\"{:^3}\", 1), \" 1 \");\n-    t!(format!(\"{:03}\", 1), \"001\");\n-    t!(format!(\"{:<03}\", 1), \"001\");\n-    t!(format!(\"{:>03}\", 1), \"001\");\n-    t!(format!(\"{:^03}\", 1), \"001\");\n-    t!(format!(\"{:+03}\", 1), \"+01\");\n-    t!(format!(\"{:<+03}\", 1), \"+01\");\n-    t!(format!(\"{:>+03}\", 1), \"+01\");\n-    t!(format!(\"{:^+03}\", 1), \"+01\");\n-    t!(format!(\"{:#05x}\", 1), \"0x001\");\n-    t!(format!(\"{:<#05x}\", 1), \"0x001\");\n-    t!(format!(\"{:>#05x}\", 1), \"0x001\");\n-    t!(format!(\"{:^#05x}\", 1), \"0x001\");\n-    t!(format!(\"{:05}\", 1.2), \"001.2\");\n-    t!(format!(\"{:<05}\", 1.2), \"001.2\");\n-    t!(format!(\"{:>05}\", 1.2), \"001.2\");\n-    t!(format!(\"{:^05}\", 1.2), \"001.2\");\n-    t!(format!(\"{:05}\", -1.2), \"-01.2\");\n-    t!(format!(\"{:<05}\", -1.2), \"-01.2\");\n-    t!(format!(\"{:>05}\", -1.2), \"-01.2\");\n-    t!(format!(\"{:^05}\", -1.2), \"-01.2\");\n-    t!(format!(\"{:+05}\", 1.2), \"+01.2\");\n-    t!(format!(\"{:<+05}\", 1.2), \"+01.2\");\n-    t!(format!(\"{:>+05}\", 1.2), \"+01.2\");\n-    t!(format!(\"{:^+05}\", 1.2), \"+01.2\");\n-\n-    // Ergonomic format_args!\n-    t!(format!(\"{0:x} {0:X}\", 15), \"f F\");\n-    t!(format!(\"{0:x} {0:X} {}\", 15), \"f F 15\");\n-    t!(format!(\"{:x}{0:X}{a:x}{:X}{1:x}{a:X}\", 13, 14, a=15), \"dDfEeF\");\n-    t!(format!(\"{a:x} {a:X}\", a=15), \"f F\");\n-\n-    // And its edge cases\n-    t!(format!(\"{a:.0$} {b:.0$} {0:.0$}\\n{a:.c$} {b:.c$} {c:.c$}\",\n-               4, a=\"abcdefg\", b=\"hijklmn\", c=3),\n-               \"abcd hijk 4\\nabc hij 3\");\n-    t!(format!(\"{a:.*} {0} {:.*}\", 4, 3, \"efgh\", a=\"abcdef\"), \"abcd 4 efg\");\n-    t!(format!(\"{:.a$} {a} {a:#x}\", \"aaaaaa\", a=2), \"aa 2 0x2\");\n-\n-    // Test that pointers don't get truncated.\n-    {\n-        let val = usize::MAX;\n-        let exp = format!(\"{:#x}\", val);\n-        t!(format!(\"{:p}\", val as *const isize), exp);\n-    }\n-\n-    // Escaping\n-    t!(format!(\"{{\"), \"{\");\n-    t!(format!(\"}}\"), \"}\");\n-\n-    test_write();\n-    test_print();\n-    test_order();\n-    test_once();\n-\n-    // make sure that format! doesn't move out of local variables\n-    let a: Box<_> = box 3;\n-    format!(\"{}\", a);\n-    format!(\"{}\", a);\n-\n-    // make sure that format! doesn't cause spurious unused-unsafe warnings when\n-    // it's inside of an outer unsafe block\n-    unsafe {\n-        let a: isize = ::std::mem::transmute(3_usize);\n-        format!(\"{}\", a);\n-    }\n-\n-    test_format_args();\n-\n-    // test that trailing commas are acceptable\n-    format!(\"{}\", \"test\",);\n-    format!(\"{foo}\", foo=\"test\",);\n-\n-    test_refcell();\n-}\n-\n-// Basic test to make sure that we can invoke the `write!` macro with an\n-// fmt::Write instance.\n-fn test_write() {\n-    let mut buf = String::new();\n-    write!(&mut buf, \"{}\", 3);\n-    {\n-        let w = &mut buf;\n-        write!(w, \"{foo}\", foo=4);\n-        write!(w, \"{}\", \"hello\");\n-        writeln!(w, \"{}\", \"line\");\n-        writeln!(w, \"{foo}\", foo=\"bar\");\n-        w.write_char('\u2603');\n-        w.write_str(\"str\");\n-    }\n-\n-    t!(buf, \"34helloline\\nbar\\n\u2603str\");\n-}\n-\n-// Just make sure that the macros are defined, there's not really a lot that we\n-// can do with them just yet (to test the output)\n-fn test_print() {\n-    print!(\"hi\");\n-    print!(\"{:?}\", vec![0u8]);\n-    println!(\"hello\");\n-    println!(\"this is a {}\", \"test\");\n-    println!(\"{foo}\", foo=\"bar\");\n-}\n-\n-// Just make sure that the macros are defined, there's not really a lot that we\n-// can do with them just yet (to test the output)\n-fn test_format_args() {\n-    let mut buf = String::new();\n-    {\n-        let w = &mut buf;\n-        write!(w, \"{}\", format_args!(\"{}\", 1));\n-        write!(w, \"{}\", format_args!(\"test\"));\n-        write!(w, \"{}\", format_args!(\"{test}\", test=3));\n-    }\n-    let s = buf;\n-    t!(s, \"1test3\");\n-\n-    let s = fmt::format(format_args!(\"hello {}\", \"world\"));\n-    t!(s, \"hello world\");\n-    let s = format!(\"{}: {}\", \"args were\", format_args!(\"hello {}\", \"world\"));\n-    t!(s, \"args were: hello world\");\n-}\n-\n-fn test_order() {\n-    // Make sure format!() arguments are always evaluated in a left-to-right\n-    // ordering\n-    fn foo() -> isize {\n-        static mut FOO: isize = 0;\n-        unsafe {\n-            FOO += 1;\n-            FOO\n-        }\n-    }\n-    assert_eq!(format!(\"{} {} {a} {b} {} {c}\",\n-                       foo(), foo(), foo(), a=foo(), b=foo(), c=foo()),\n-               \"1 2 4 5 3 6\".to_string());\n-}\n-\n-fn test_once() {\n-    // Make sure each argument are evaluated only once even though it may be\n-    // formatted multiple times\n-    fn foo() -> isize {\n-        static mut FOO: isize = 0;\n-        unsafe {\n-            FOO += 1;\n-            FOO\n-        }\n-    }\n-    assert_eq!(format!(\"{0} {0} {0} {a} {a} {a}\", foo(), a=foo()),\n-               \"1 1 1 2 2 2\".to_string());\n-}\n-\n-fn test_refcell() {\n-    let refcell = RefCell::new(5);\n-    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n-    let borrow = refcell.borrow_mut();\n-    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: <borrowed> }\");\n-    drop(borrow);\n-    assert_eq!(format!(\"{:?}\", refcell), \"RefCell { value: 5 }\");\n-}"}, {"sha": "35b63bddca252937d815454a2a67733e42ea658b", "filename": "src/test/ui/issues/issue-37550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,6 +1,6 @@\n const fn x() {\n     let t = true;\n-    let x = || t; //~ ERROR function pointers in const fn are unstable\n+    let x = || t; //~ ERROR function pointer\n }\n \n fn main() {}"}, {"sha": "54b60df70fd2671982f5e116e5687a10c57ec1e9", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,12 +1,12 @@\n-error[E0723]: function pointers in const fn are unstable\n+error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/issue-37550.rs:3:9\n    |\n LL |     let x = || t;\n    |         ^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0a1e835672de9db26f312254c9c7e608db2d126f", "filename": "src/test/ui/issues/issue-46553.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-46553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-46553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46553.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_fn)]\n+#![feature(const_fn_fn_ptr_basics)]\n #![deny(const_err)]\n \n pub struct Data<T> {"}, {"sha": "12903f79010cbafd3118ed660301446afcf797a5", "filename": "src/test/ui/issues/issue-51154.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-51154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-51154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51154.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -0,0 +1,6 @@\n+fn foo<F: FnMut()>() {\n+    let _: Box<F> = Box::new(|| ());\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "3c3428f3096a8d282912dc512fe28bd1db9c2646", "filename": "src/test/ui/issues/issue-51154.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51154.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-51154.rs:2:30\n+   |\n+LL | fn foo<F: FnMut()>() {\n+   |        - this type parameter\n+LL |     let _: Box<F> = Box::new(|| ());\n+   |                              ^^^^^ expected type parameter `F`, found closure\n+   |\n+   = note: expected type parameter `F`\n+                     found closure `[closure@$DIR/issue-51154.rs:2:30: 2:35]`\n+   = help: every closure has a distinct type and so could not always match the caller-chosen type of parameter `F`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a76fa2408bb8a4c26caac427f6302ece1d3c17cf", "filename": "src/test/ui/iterators/iter-zip.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fiterators%2Fiter-zip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Fiterators%2Fiter-zip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-zip.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,103 +0,0 @@\n-// run-pass\n-// Test that .zip() specialization preserves side effects\n-// in sideeffectful iterator adaptors.\n-\n-use std::cell::Cell;\n-\n-#[derive(Debug)]\n-struct CountClone(Cell<i32>);\n-\n-fn count_clone() -> CountClone { CountClone(Cell::new(0)) }\n-\n-impl PartialEq<i32> for CountClone {\n-    fn eq(&self, rhs: &i32) -> bool {\n-        self.0.get() == *rhs\n-    }\n-}\n-\n-impl Clone for CountClone {\n-    fn clone(&self) -> Self {\n-        let ret = CountClone(self.0.clone());\n-        let n = self.0.get();\n-        self.0.set(n + 1);\n-        ret\n-    }\n-}\n-\n-fn test_zip_cloned_sideffectful() {\n-    let xs = [count_clone(), count_clone(), count_clone(), count_clone()];\n-    let ys = [count_clone(), count_clone()];\n-\n-    for _ in xs.iter().cloned().zip(ys.iter().cloned()) { }\n-\n-    assert_eq!(&xs, &[1, 1, 1, 0][..]);\n-    assert_eq!(&ys, &[1, 1][..]);\n-\n-    let xs = [count_clone(), count_clone()];\n-    let ys = [count_clone(), count_clone(), count_clone(), count_clone()];\n-\n-    for _ in xs.iter().cloned().zip(ys.iter().cloned()) { }\n-\n-    assert_eq!(&xs, &[1, 1][..]);\n-    assert_eq!(&ys, &[1, 1, 0, 0][..]);\n-}\n-\n-fn test_zip_map_sideffectful() {\n-    let mut xs = [0; 6];\n-    let mut ys = [0; 4];\n-\n-    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) { }\n-\n-    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n-    assert_eq!(&ys, &[1, 1, 1, 1]);\n-\n-    let mut xs = [0; 4];\n-    let mut ys = [0; 6];\n-\n-    for _ in xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1)) { }\n-\n-    assert_eq!(&xs, &[1, 1, 1, 1]);\n-    assert_eq!(&ys, &[1, 1, 1, 1, 0, 0]);\n-}\n-\n-fn test_zip_map_rev_sideffectful() {\n-    let mut xs = [0; 6];\n-    let mut ys = [0; 4];\n-\n-    {\n-        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n-        it.next_back();\n-    }\n-    assert_eq!(&xs, &[0, 0, 0, 1, 1, 1]);\n-    assert_eq!(&ys, &[0, 0, 0, 1]);\n-\n-    let mut xs = [0; 6];\n-    let mut ys = [0; 4];\n-\n-    {\n-        let mut it = xs.iter_mut().map(|x| *x += 1).zip(ys.iter_mut().map(|y| *y += 1));\n-        (&mut it).take(5).count();\n-        it.next_back();\n-    }\n-    assert_eq!(&xs, &[1, 1, 1, 1, 1, 1]);\n-    assert_eq!(&ys, &[1, 1, 1, 1]);\n-}\n-\n-fn test_zip_nested_sideffectful() {\n-    let mut xs = [0; 6];\n-    let ys = [0; 4];\n-\n-    {\n-        // test that it has the side effect nested inside enumerate\n-        let it = xs.iter_mut().map(|x| *x = 1).enumerate().zip(&ys);\n-        it.count();\n-    }\n-    assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n-}\n-\n-fn main() {\n-    test_zip_cloned_sideffectful();\n-    test_zip_map_sideffectful();\n-    test_zip_map_rev_sideffectful();\n-    test_zip_nested_sideffectful();\n-}"}, {"sha": "173f803ee24d24941adeb37c8f0830fb0d4d804f", "filename": "src/test/ui/option-unwrap.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62d3f7fa9a91d933213cc10e20e740608983f64/src%2Ftest%2Fui%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-unwrap.rs?ref=d62d3f7fa9a91d933213cc10e20e740608983f64", "patch": "@@ -1,32 +0,0 @@\n-// run-pass\n-\n-#![allow(non_camel_case_types)]\n-use std::cell::Cell;\n-\n-struct dtor<'a> {\n-    x: &'a Cell<isize>,\n-}\n-\n-impl<'a> Drop for dtor<'a> {\n-    fn drop(&mut self) {\n-        self.x.set(self.x.get() - 1);\n-    }\n-}\n-\n-fn unwrap<T>(o: Option<T>) -> T {\n-    match o {\n-      Some(v) => v,\n-      None => panic!()\n-    }\n-}\n-\n-pub fn main() {\n-    let x = &Cell::new(1);\n-\n-    {\n-        let b = Some(dtor { x:x });\n-        let _c = unwrap(b);\n-    }\n-\n-    assert_eq!(x.get(), 0);\n-}"}, {"sha": "0291a52633358eeef277f3d4b32e06adf875a758", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,10 +1,27 @@\n warning: skipping const checks\n    |\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:20:9\n+   |\n+LL |     let ptr: fn() -> L = attributed;\n+   |         ^^^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n+   |\n+LL |     ptr()\n+   |     ^^^\n+help: skipping check for `const_fn_fn_ptr_basics` feature\n+  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:20:26\n+   |\n+LL |     let ptr: fn() -> L = attributed;\n+   |                          ^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n    |\n LL |     ptr()\n    |     ^^^^^\n \n-warning: 1 warning emitted\n+error: `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "bdf426bbd37882f3565322e9e8af92881878de38", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_fn)]\n+#![feature(const_fn, const_fn_fn_ptr_basics)]\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> usize;"}, {"sha": "f4f2259cefd51a937753e424ec675df7042ae339", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2daaae610b5515438b551a2f3706196a997f35/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=fc2daaae610b5515438b551a2f3706196a997f35", "patch": "@@ -357,7 +357,7 @@ pub fn main() {\n                 args.extend(vec![\"--sysroot\".into(), sys_root]);\n             };\n \n-            return rustc_driver::run_compiler(&args, &mut DefaultCallbacks, None, None);\n+            return rustc_driver::run_compiler(&args, &mut DefaultCallbacks, None, None, None);\n         }\n \n         if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -420,6 +420,6 @@ pub fn main() {\n         let mut default = DefaultCallbacks;\n         let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n             if clippy_enabled { &mut clippy } else { &mut default };\n-        rustc_driver::run_compiler(&args, callbacks, None, None)\n+        rustc_driver::run_compiler(&args, callbacks, None, None, None)\n     }))\n }"}]}