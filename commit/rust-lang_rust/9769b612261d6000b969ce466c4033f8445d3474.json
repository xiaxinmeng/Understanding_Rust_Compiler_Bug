{"sha": "9769b612261d6000b969ce466c4033f8445d3474", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjliNjEyMjYxZDYwMDBiOTY5Y2U0NjZjNDAzM2Y4NDQ1ZDM0NzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-25T01:36:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-25T01:36:22Z"}, "message": "rustc: Parse type-parametric typedefs", "tree": {"sha": "5313b4cb1be29bbe3d396a758b3cf46a68b6a5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5313b4cb1be29bbe3d396a758b3cf46a68b6a5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9769b612261d6000b969ce466c4033f8445d3474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9769b612261d6000b969ce466c4033f8445d3474", "html_url": "https://github.com/rust-lang/rust/commit/9769b612261d6000b969ce466c4033f8445d3474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9769b612261d6000b969ce466c4033f8445d3474/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "html_url": "https://github.com/rust-lang/rust/commit/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "7da857b48f661ed83e7b81163b2d8777a587a940", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=9769b612261d6000b969ce466c4033f8445d3474", "patch": "@@ -170,7 +170,7 @@ type item = spanned[item_];\n tag item_ {\n     item_fn(ident, _fn, vec[ty_param], def_id, ann);\n     item_mod(ident, _mod, def_id);\n-    item_ty(ident, @ty, def_id, ann);\n+    item_ty(ident, @ty, vec[ty_param], def_id, ann);\n     item_tag(ident, vec[variant], vec[ty_param], def_id);\n }\n "}, {"sha": "f4874733aad0e9b178438a09a512ad5ed89e2e38", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=9769b612261d6000b969ce466c4033f8445d3474", "patch": "@@ -1026,7 +1026,7 @@ impure fn parse_block(parser p) -> ast.block {\n                             case (ast.item_mod(?i, _, _)) {\n                                 index.insert(i, u-1u);\n                             }\n-                            case (ast.item_ty(?i, _, _, _)) {\n+                            case (ast.item_ty(?i, _, _, _, _)) {\n                                 index.insert(i, u-1u);\n                             }\n                         }\n@@ -1112,11 +1112,13 @@ impure fn parse_item_type(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.TYPE);\n     auto id = parse_ident(p);\n+    auto tps = parse_ty_params(p);\n+\n     expect(p, token.EQ);\n     auto ty = parse_ty(p);\n     auto hi = p.get_span();\n     expect(p, token.SEMI);\n-    auto item = ast.item_ty(id, ty, p.next_def_id(), ast.ann_none);\n+    auto item = ast.item_ty(id, ty, tps, p.next_def_id(), ast.ann_none);\n     ret tup(id, @spanned(lo, hi, item));\n }\n "}, {"sha": "de2fd87ae0ef17c2e7eecc59f5f8547d72769dcd", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=9769b612261d6000b969ce466c4033f8445d3474", "patch": "@@ -166,7 +166,8 @@ type ast_fold[ENV] =\n          &ast._mod m, def_id id) -> @item)        fold_item_mod,\n \n      (fn(&ENV e, &span sp, ident ident,\n-         @ty t, def_id id, ann a) -> @item)       fold_item_ty,\n+         @ty t, vec[ast.ty_param] ty_params,\n+         def_id id, ann a) -> @item)              fold_item_ty,\n \n      (fn(&ENV e, &span sp, ident ident,\n          vec[ast.variant] variants,\n@@ -550,9 +551,9 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n             ret fld.fold_item_mod(env_, i.span, ident, mm_, id);\n         }\n \n-        case (ast.item_ty(?ident, ?ty, ?id, ?ann)) {\n+        case (ast.item_ty(?ident, ?ty, ?params, ?id, ?ann)) {\n             let @ast.ty ty_ = fold_ty[ENV](env_, fld, ty);\n-            ret fld.fold_item_ty(env_, i.span, ident, ty_, id, ann);\n+            ret fld.fold_item_ty(env_, i.span, ident, ty_, params, id, ann);\n         }\n \n         case (ast.item_tag(?ident, ?variants, ?ty_params, ?id)) {\n@@ -813,8 +814,9 @@ fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n }\n \n fn identity_fold_item_ty[ENV](&ENV e, &span sp, ident i,\n-                              @ty t, def_id id, ann a) -> @item {\n-    ret @respan(sp, ast.item_ty(i, t, id, a));\n+                              @ty t, vec[ast.ty_param] ty_params,\n+                              def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_ty(i, t, ty_params, id, a));\n }\n \n fn identity_fold_item_tag[ENV](&ENV e, &span sp, ident i,\n@@ -941,7 +943,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n \n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n-         fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_),\n+         fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_,_),\n          fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),"}, {"sha": "ed4d6c04a08d6bb0a7b7d174b55be555d11cfed6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9769b612261d6000b969ce466c4033f8445d3474", "patch": "@@ -35,7 +35,7 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n             case (ast.item_mod(_, _, ?id)) {\n                 ret some[def](ast.def_mod(id));\n             }\n-            case (ast.item_ty(_, _, ?id, _)) {\n+            case (ast.item_ty(_, _, _, ?id, _)) {\n                 ret some[def](ast.def_ty(id));\n             }\n         }"}, {"sha": "9c66895d4fbee324c3293a0c8897a9f0d9074e75", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9769b612261d6000b969ce466c4033f8445d3474/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9769b612261d6000b969ce466c4033f8445d3474", "patch": "@@ -326,7 +326,7 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                 ret t_fn;\n             }\n \n-            case (ast.item_ty(?ident, ?referent_ty, ?def_id, _)) {\n+            case (ast.item_ty(?ident, ?referent_ty, _, ?def_id, _)) {\n                 if (item_to_ty.contains_key(def_id)) {\n                     // Avoid repeating work.\n                     check (item_to_ty.contains_key(def_id));\n@@ -351,7 +351,7 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n     auto id_to_ty_item = @common.new_def_hash[@ast.item]();\n     for (@ast.item item in module.items) {\n         alt (item.node) {\n-            case (ast.item_ty(_, _, ?def_id, _)) {\n+            case (ast.item_ty(_, _, _, ?def_id, _)) {\n                 id_to_ty_item.insert(def_id, item);\n             }\n             case (_) { /* empty */ }\n@@ -371,10 +371,10 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                 result = ast.item_fn(ident, fn_info, tps, def_id,\n                                      ast.ann_type(t));\n             }\n-            case (ast.item_ty(?ident, ?referent_ty, ?def_id, _)) {\n+            case (ast.item_ty(?ident, ?referent_ty, ?tps, ?def_id, _)) {\n                 auto t = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n                 auto ann = ast.ann_type(t);\n-                result = ast.item_ty(ident, referent_ty, def_id, ann);\n+                result = ast.item_ty(ident, referent_ty, tps, def_id, ann);\n             }\n             case (ast.item_mod(_, _, _)) {\n                 result = it.node;"}]}