{"sha": "a23d7e10c7187ba2b0f2069a9905994592fa1108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyM2Q3ZTEwYzcxODdiYTJiMGYyMDY5YTk5MDU5OTQ1OTJmYTExMDg=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-04-24T17:07:01Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-05-01T07:58:42Z"}, "message": "Remove Managed\n\nLeftovers from @-pointer times.", "tree": {"sha": "72407c8a948900cd766879b4226c444ce77b4bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72407c8a948900cd766879b4226c444ce77b4bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23d7e10c7187ba2b0f2069a9905994592fa1108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23d7e10c7187ba2b0f2069a9905994592fa1108", "html_url": "https://github.com/rust-lang/rust/commit/a23d7e10c7187ba2b0f2069a9905994592fa1108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23d7e10c7187ba2b0f2069a9905994592fa1108/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c710b593b429d39ea01375172a9ce968f43ab26", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c710b593b429d39ea01375172a9ce968f43ab26", "html_url": "https://github.com/rust-lang/rust/commit/5c710b593b429d39ea01375172a9ce968f43ab26"}], "stats": {"total": 49, "additions": 6, "deletions": 43}, "files": [{"sha": "101381e2c71efa7b495342e8b6abb1b8e32daca9", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -267,9 +267,6 @@ extern \"rust-intrinsic\" {\n     /// `Copy`, then may return `true` or `false`.\n     pub fn needs_drop<T>() -> bool;\n \n-    /// Returns `true` if a type is managed (will be allocated on the local heap)\n-    pub fn owns_managed<T>() -> bool;\n-\n     /// Calculates the offset from a pointer.\n     ///\n     /// This is implemented as an intrinsic to avoid converting to and from an"}, {"sha": "04839b12ac895dc4046d8315a8931d9e275443f7", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -43,7 +43,6 @@ unsafe impl Send for .. { }\n \n impl<T> !Send for *const T { }\n impl<T> !Send for *mut T { }\n-impl !Send for Managed { }\n \n /// Types with a constant size known at compile-time.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -212,7 +211,6 @@ unsafe impl Sync for .. { }\n \n impl<T> !Sync for *const T { }\n impl<T> !Sync for *mut T { }\n-impl !Sync for Managed { }\n \n /// A type which is considered \"not POD\", meaning that it is not\n /// implicitly copyable. This is typically embedded in other types to\n@@ -223,14 +221,6 @@ impl !Sync for Managed { }\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct NoCopy;\n \n-/// A type which is considered managed by the GC. This is typically\n-/// embedded in other types.\n-#[unstable(feature = \"core\",\n-           reason = \"likely to change with new variance strategy\")]\n-#[lang=\"managed_bound\"]\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-pub struct Managed;\n-\n macro_rules! impls{\n     ($t: ident) => (\n         impl<T:?Sized> Hash for $t<T> {"}, {"sha": "c2865e338496706e415393c8568535bf4ca41180", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -334,7 +334,6 @@ lets_do_this! {\n     InvariantLifetimeItem,           \"invariant_lifetime\",      invariant_lifetime;\n \n     NoCopyItem,                      \"no_copy_bound\",           no_copy_bound;\n-    ManagedItem,                     \"managed_bound\",           managed_bound;\n \n     NonZeroItem,                     \"non_zero\",                non_zero;\n "}, {"sha": "c11a6003444a191154975c04056e9b4d5af8d9d3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -3490,12 +3490,10 @@ def_type_content_sets! {\n         // Things that are owned by the value (second and third nibbles):\n         OwnsOwned                           = 0b0000_0000__0000_0001__0000,\n         OwnsDtor                            = 0b0000_0000__0000_0010__0000,\n-        OwnsManaged /* see [1] below */     = 0b0000_0000__0000_0100__0000,\n         OwnsAll                             = 0b0000_0000__1111_1111__0000,\n \n         // Things that are reachable by the value in any way (fourth nibble):\n         ReachesBorrowed                     = 0b0000_0010__0000_0000__0000,\n-        // ReachesManaged /* see [1] below */  = 0b0000_0100__0000_0000__0000,\n         ReachesMutable                      = 0b0000_1000__0000_0000__0000,\n         ReachesFfiUnsafe                    = 0b0010_0000__0000_0000__0000,\n         ReachesAll                          = 0b0011_1111__0000_0000__0000,\n@@ -3506,13 +3504,6 @@ def_type_content_sets! {\n         // Things that prevent values from being considered sized\n         Nonsized                            = 0b0000_0000__0000_0000__0001,\n \n-        // Bits to set when a managed value is encountered\n-        //\n-        // [1] Do not set the bits TC::OwnsManaged or\n-        //     TC::ReachesManaged directly, instead reference\n-        //     TC::Managed to set them both at once.\n-        Managed                             = 0b0000_0100__0000_0100__0000,\n-\n         // All bits\n         All                                 = 0b1111_1111__1111_1111__1111\n     }\n@@ -3527,10 +3518,6 @@ impl TypeContents {\n         (self.bits & tc.bits) != 0\n     }\n \n-    pub fn owns_managed(&self) -> bool {\n-        self.intersects(TC::OwnsManaged)\n-    }\n-\n     pub fn owns_owned(&self) -> bool {\n         self.intersects(TC::OwnsOwned)\n     }\n@@ -3567,12 +3554,6 @@ impl TypeContents {\n             *self & TC::ReachesAll)\n     }\n \n-    /// Includes only those bits that still apply when indirected through a managed pointer (`@`)\n-    pub fn managed_pointer(&self) -> TypeContents {\n-        TC::Managed | (\n-            *self & TC::ReachesAll)\n-    }\n-\n     /// Includes only those bits that still apply when indirected through an unsafe pointer (`*`)\n     pub fn unsafe_pointer(&self) -> TypeContents {\n         *self & TC::ReachesAll\n@@ -3817,9 +3798,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n \n     fn apply_lang_items(cx: &ctxt, did: ast::DefId, tc: TypeContents)\n                         -> TypeContents {\n-        if Some(did) == cx.lang_items.managed_bound() {\n-            tc | TC::Managed\n-        } else if Some(did) == cx.lang_items.unsafe_cell_type() {\n+        if Some(did) == cx.lang_items.unsafe_cell_type() {\n             tc | TC::InteriorUnsafe\n         } else {\n             tc"}, {"sha": "4b1bdd63dd732f5117882b01dbd5e5921e8f898c", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -387,10 +387,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n             C_bool(ccx, bcx.fcx.type_needs_drop(tp_ty))\n         }\n-        (_, \"owns_managed\") => {\n-            let tp_ty = *substs.types.get(FnSpace, 0);\n-            C_bool(ccx, ty::type_contents(ccx.tcx(), tp_ty).owns_managed())\n-        }\n         (_, \"offset\") => {\n             let ptr = llargs[0];\n             let offset = llargs[1];"}, {"sha": "5168ca67e072989212a8132fae59bc9f35563c5a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -4945,7 +4945,6 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                ty::mk_nil(tcx))\n             }\n             \"needs_drop\" => (1, Vec::new(), ccx.tcx.types.bool),\n-            \"owns_managed\" => (1, Vec::new(), ccx.tcx.types.bool),\n \n             \"type_name\" => (1, Vec::new(), ty::mk_str_slice(tcx, tcx.mk_region(ty::ReStatic),\n                                                              ast::MutImmutable)),"}, {"sha": "7c5d1d93b1a7f673be6d9d9b8a64a4f99d1950b7", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23d7e10c7187ba2b0f2069a9905994592fa1108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs?ref=a23d7e10c7187ba2b0f2069a9905994592fa1108", "patch": "@@ -12,7 +12,10 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::Managed;\n+struct Managed;\n+impl !Send for Managed {}\n+impl !Sync for Managed {}\n+\n use std::cell::UnsafeCell;\n \n struct MySync {\n@@ -46,5 +49,5 @@ fn main() {\n     //~^ ERROR the trait `core::marker::Sync` is not implemented for the type `core::cell::UnsafeCell<u8>`\n \n     is_sync::<MyTypeManaged>();\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented for the type `core::marker::Managed`\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented for the type `Managed`\n }"}]}