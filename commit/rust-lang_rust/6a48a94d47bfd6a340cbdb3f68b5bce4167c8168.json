{"sha": "6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNDhhOTRkNDdiZmQ2YTM0MGNiZGIzZjY4YjViY2U0MTY3YzgxNjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-03T22:52:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-03T22:52:10Z"}, "message": "Merge #4268\n\n4268: Support auto-import in macro r=SomeoneToIgnore a=edwin0cheng\n\nFixed: #3854\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "9f349e75c0dc35364896c0887d9e335f822c0f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f349e75c0dc35364896c0887d9e335f822c0f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJer0saCRBK7hj4Ov3rIwAAdHIIAFt/cYEznOBenK8T1CooKf1j\nm2gOqfJgF8XMKuhxfW/4NyOP5G4/24F9MQVYQw/xMFkNY5r1Kd/RU4GI/P0O7pAt\n0k4VfAGbhBFUorCM9D5q6/Hq20XjPopILjhZMHAv2hBeYKtYAPE2SlVLLmDiCiEL\nC9pGVN5Phu0iIZkN8btBj2uM7qfxzgUO/I6oEyqL0wllRcAlYw4iOML2cgBBDwKF\nEK8K+yoWxz+DTchrI3XdYAAjOCtfFNUTYu/EqXpcpvLJTionyDg+OG/VGz2QSloM\nRFcl0IKJv6WZTaOyOiVGp200ovI9Rt8tmGYMZBU/Yq5e7YUOJBrJtBmHVM/IPM4=\n=HHMg\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f349e75c0dc35364896c0887d9e335f822c0f43\nparent baa35b02b2f1a197beec65bcd68f56ffb89abfa1\nparent 2034002413a62fb999d9372231905393ed5c0383\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588546330 +0000\ncommitter GitHub <noreply@github.com> 1588546330 +0000\n\nMerge #4268\n\n4268: Support auto-import in macro r=SomeoneToIgnore a=edwin0cheng\n\nFixed: #3854\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "html_url": "https://github.com/rust-lang/rust/commit/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa35b02b2f1a197beec65bcd68f56ffb89abfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa35b02b2f1a197beec65bcd68f56ffb89abfa1", "html_url": "https://github.com/rust-lang/rust/commit/baa35b02b2f1a197beec65bcd68f56ffb89abfa1"}, {"sha": "2034002413a62fb999d9372231905393ed5c0383", "url": "https://api.github.com/repos/rust-lang/rust/commits/2034002413a62fb999d9372231905393ed5c0383", "html_url": "https://github.com/rust-lang/rust/commit/2034002413a62fb999d9372231905393ed5c0383"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "da28800376363974df9f6cb1024577ffeaaf9f4a", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "patch": "@@ -105,7 +105,7 @@ impl<'a> AssistCtx<'a> {\n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n             let action = {\n-                let mut edit = ActionBuilder::default();\n+                let mut edit = ActionBuilder::new(&self);\n                 f(&mut edit);\n                 edit.build()\n             };\n@@ -130,6 +130,12 @@ impl<'a> AssistCtx<'a> {\n     pub(crate) fn find_node_at_offset<N: AstNode>(&self) -> Option<N> {\n         find_node_at_offset(self.source_file.syntax(), self.frange.range.start())\n     }\n+\n+    pub(crate) fn find_node_at_offset_with_descend<N: AstNode>(&self) -> Option<N> {\n+        self.sema\n+            .find_node_at_offset_with_descend(self.source_file.syntax(), self.frange.range.start())\n+    }\n+\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), self.frange.range)\n     }\n@@ -156,7 +162,7 @@ impl<'a> AssistGroup<'a> {\n         let mut info = AssistInfo::new(label).with_group(GroupLabel(self.group_name.clone()));\n         if self.ctx.should_compute_edit {\n             let action = {\n-                let mut edit = ActionBuilder::default();\n+                let mut edit = ActionBuilder::new(&self.ctx);\n                 f(&mut edit);\n                 edit.build()\n             };\n@@ -175,15 +181,29 @@ impl<'a> AssistGroup<'a> {\n     }\n }\n \n-#[derive(Default)]\n-pub(crate) struct ActionBuilder {\n+pub(crate) struct ActionBuilder<'a, 'b> {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextSize>,\n     target: Option<TextRange>,\n     file: AssistFile,\n+    ctx: &'a AssistCtx<'b>,\n }\n \n-impl ActionBuilder {\n+impl<'a, 'b> ActionBuilder<'a, 'b> {\n+    fn new(ctx: &'a AssistCtx<'b>) -> Self {\n+        Self {\n+            edit: TextEditBuilder::default(),\n+            cursor_position: None,\n+            target: None,\n+            file: AssistFile::default(),\n+            ctx,\n+        }\n+    }\n+\n+    pub(crate) fn ctx(&self) -> &AssistCtx<'b> {\n+        &self.ctx\n+    }\n+\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())"}, {"sha": "db6c4d2facdc577a4d0a006c73787c2865cc18d5", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "patch": "@@ -45,15 +45,12 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n+    let range = ctx.sema.original_range(&auto_import_assets.syntax_under_caret).range;\n     let mut group = ctx.add_assist_group(auto_import_assets.get_import_group_message());\n     for import in proposed_imports {\n         group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n-            edit.target(auto_import_assets.syntax_under_caret.text_range());\n-            insert_use_statement(\n-                &auto_import_assets.syntax_under_caret,\n-                &import,\n-                edit.text_edit_builder(),\n-            );\n+            edit.target(range);\n+            insert_use_statement(&auto_import_assets.syntax_under_caret, &import, edit);\n         });\n     }\n     group.finish()\n@@ -68,10 +65,10 @@ struct AutoImportAssets {\n \n impl AutoImportAssets {\n     fn new(ctx: &AssistCtx) -> Option<Self> {\n-        if let Some(path_under_caret) = ctx.find_node_at_offset::<ast::Path>() {\n+        if let Some(path_under_caret) = ctx.find_node_at_offset_with_descend::<ast::Path>() {\n             Self::for_regular_path(path_under_caret, &ctx)\n         } else {\n-            Self::for_method_call(ctx.find_node_at_offset()?, &ctx)\n+            Self::for_method_call(ctx.find_node_at_offset_with_descend()?, &ctx)\n         }\n     }\n \n@@ -305,6 +302,35 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn applicable_when_found_an_import_in_macros() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            macro_rules! foo {\n+                ($i:ident) => { fn foo(a: $i) {} }\n+            }\n+            foo!(Pub<|>Struct);\n+\n+            pub mod PubMod {\n+                pub struct PubStruct;\n+            }\n+            \",\n+            r\"\n+            use PubMod::PubStruct;\n+\n+            macro_rules! foo {\n+                ($i:ident) => { fn foo(a: $i) {} }\n+            }\n+            foo!(Pub<|>Struct);\n+\n+            pub mod PubMod {\n+                pub struct PubStruct;\n+            }\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn auto_imports_are_merged() {\n         check_assist("}, {"sha": "ff2463c77f98155a9b3f0ec2100fe2e1eee72e3b", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn replace_qualified_name_with_use(ctx: AssistCtx) -> Option<Assist>\n         \"Replace qualified path with use\",\n         |edit| {\n             let path_to_import = hir_path.mod_path().clone();\n-            insert_use_statement(path.syntax(), &path_to_import, edit.text_edit_builder());\n+            insert_use_statement(path.syntax(), &path_to_import, edit);\n \n             if let Some(last) = path.segment() {\n                 // Here we are assuming the assist will provide a correct use statement"}, {"sha": "6be704ce3af0c1f25b827a3733b8771421a7bb7e", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashSet;\n \n-pub use insert_use::insert_use_statement;\n+pub(crate) use insert_use::insert_use_statement;\n \n pub fn get_missing_impl_items(\n     sema: &Semantics<RootDatabase>,"}, {"sha": "c1f447efe7ab3e96e7f914981ca8ab6c65d7a197", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=6a48a94d47bfd6a340cbdb3f68b5bce4167c8168", "patch": "@@ -2,6 +2,7 @@\n // FIXME: rewrite according to the plan, outlined in\n // https://github.com/rust-analyzer/rust-analyzer/issues/3301#issuecomment-592931553\n \n+use crate::assist_ctx::ActionBuilder;\n use hir::{self, ModPath};\n use ra_syntax::{\n     ast::{self, NameOwner},\n@@ -14,14 +15,14 @@ use ra_text_edit::TextEditBuilder;\n /// Creates and inserts a use statement for the given path to import.\n /// The use statement is inserted in the scope most appropriate to the\n /// the cursor position given, additionally merged with the existing use imports.\n-pub fn insert_use_statement(\n+pub(crate) fn insert_use_statement(\n     // Ideally the position of the cursor, used to\n     position: &SyntaxNode,\n     path_to_import: &ModPath,\n-    edit: &mut TextEditBuilder,\n+    edit: &mut ActionBuilder,\n ) {\n     let target = path_to_import.to_string().split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n-    let container = position.ancestors().find_map(|n| {\n+    let container = edit.ctx().sema.ancestors_with_macros(position.clone()).find_map(|n| {\n         if let Some(module) = ast::Module::cast(n.clone()) {\n             return module.item_list().map(|it| it.syntax().clone());\n         }\n@@ -30,7 +31,7 @@ pub fn insert_use_statement(\n \n     if let Some(container) = container {\n         let action = best_action_for_target(container, position.clone(), &target);\n-        make_assist(&action, &target, edit);\n+        make_assist(&action, &target, edit.text_edit_builder());\n     }\n }\n "}]}