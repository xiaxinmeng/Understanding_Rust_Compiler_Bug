{"sha": "64ab5eaaf09de6a75392554c13784c492ed19465", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YWI1ZWFhZjA5ZGU2YTc1MzkyNTU0YzEzNzg0YzQ5MmVkMTk0NjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T01:32:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T01:33:17Z"}, "message": "Parse (and ignore) dtors on objs.", "tree": {"sha": "2c166a5924fcae5971dad486f42cc25d913c6d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c166a5924fcae5971dad486f42cc25d913c6d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ab5eaaf09de6a75392554c13784c492ed19465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ab5eaaf09de6a75392554c13784c492ed19465", "html_url": "https://github.com/rust-lang/rust/commit/64ab5eaaf09de6a75392554c13784c492ed19465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ab5eaaf09de6a75392554c13784c492ed19465/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9869aebf7d21e5076e16193f2fad9c7f9446fdc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9869aebf7d21e5076e16193f2fad9c7f9446fdc6", "html_url": "https://github.com/rust-lang/rust/commit/9869aebf7d21e5076e16193f2fad9c7f9446fdc6"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "4ed513a3e06bdb432d5e2d4d241637c3cf017f55", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64ab5eaaf09de6a75392554c13784c492ed19465/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ab5eaaf09de6a75392554c13784c492ed19465/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=64ab5eaaf09de6a75392554c13784c492ed19465", "patch": "@@ -247,7 +247,8 @@ type method = spanned[method_];\n \n type obj_field = rec(@ty ty, ident ident, def_id id, ann ann);\n type _obj = rec(vec[obj_field] fields,\n-                vec[@method] methods);\n+                vec[@method] methods,\n+                option.t[block] dtor);\n \n tag mod_index_entry {\n     mie_view_item(@view_item);"}, {"sha": "f747c084b5bdc713315cb5565e5355126cf7cdd2", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/64ab5eaaf09de6a75392554c13784c492ed19465/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ab5eaaf09de6a75392554c13784c492ed19465/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=64ab5eaaf09de6a75392554c13784c492ed19465", "patch": "@@ -1715,21 +1715,33 @@ impure fn parse_item_obj(parser p, ast.layer lyr) -> @ast.item {\n          some(token.COMMA),\n          pf, p);\n \n-    auto pm = parse_method;\n-    let util.common.spanned[vec[@ast.method]] meths =\n-        parse_seq[@ast.method]\n-        (token.LBRACE,\n-         token.RBRACE,\n-         none[token.token],\n-         pm, p);\n+    let vec[@ast.method] meths = vec();\n+    let option.t[ast.block] dtor = none[ast.block];\n+\n+    expect(p, token.LBRACE);\n+    while (p.peek() != token.RBRACE) {\n+        alt (p.peek()) {\n+            case (token.DROP) {\n+                p.bump();\n+                dtor = some[ast.block](parse_block(p));\n+            }\n+            case (_) {\n+                append[@ast.method](meths,\n+                                    parse_method(p));\n+            }\n+        }\n+    }\n+    auto hi = p.get_span();\n+    expect(p, token.RBRACE);\n \n     let ast._obj ob = rec(fields=fields.node,\n-                          methods=meths.node);\n+                          methods=meths,\n+                          dtor=dtor);\n \n     auto item = ast.item_obj(ident, ob, ty_params,\n                              p.next_def_id(), ast.ann_none);\n \n-    ret @spanned(lo, meths.span, item);\n+    ret @spanned(lo, hi, item);\n }\n \n impure fn parse_mod_items(parser p, token.token term) -> ast._mod {"}, {"sha": "0978307025294772e43aaad9783686188c4e3d98", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/64ab5eaaf09de6a75392554c13784c492ed19465/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ab5eaaf09de6a75392554c13784c492ed19465/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=64ab5eaaf09de6a75392554c13784c492ed19465", "patch": "@@ -269,7 +269,8 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e,\n          vec[ast.obj_field] fields,\n-         vec[@ast.method] methods) -> ast._obj)   fold_obj,\n+         vec[@ast.method] methods,\n+         option.t[block] dtor) -> ast._obj)       fold_obj,\n \n      // Env updates.\n      (fn(&ENV e, @ast.crate c) -> ENV) update_env_for_crate,\n@@ -791,6 +792,13 @@ fn fold_obj[ENV](&ENV env, ast_fold[ENV] fld, &ast._obj ob) -> ast._obj {\n     for (ast.obj_field f in ob.fields) {\n         fields += fold_obj_field(env, fld, f);\n     }\n+    let option.t[block] dtor = none[block];\n+    alt (ob.dtor) {\n+        case (none[block]) { }\n+        case (some[block](?b)) {\n+            dtor = some[block](fold_block[ENV](env, fld, b));\n+        }\n+    }\n     let vec[ast.ty_param] tp = vec();\n     for (@ast.method m in ob.methods) {\n         // Fake-up an ast.item for this method.\n@@ -805,7 +813,7 @@ fn fold_obj[ENV](&ENV env, ast_fold[ENV] fld, &ast._obj ob) -> ast._obj {\n         let ENV _env = fld.update_env_for_item(env, i);\n         append[@ast.method](meths, fold_method(_env, fld, m));\n     }\n-    ret fld.fold_obj(env, fields, meths);\n+    ret fld.fold_obj(env, fields, meths, dtor);\n }\n \n fn fold_view_item[ENV](&ENV env, ast_fold[ENV] fld, @view_item vi)\n@@ -1334,8 +1342,9 @@ fn identity_fold_crate[ENV](&ENV e, &span sp, &ast._mod m) -> @ast.crate {\n \n fn identity_fold_obj[ENV](&ENV e,\n                           vec[ast.obj_field] fields,\n-                          vec[@ast.method] methods) -> ast._obj {\n-    ret rec(fields=fields, methods=methods);\n+                          vec[@ast.method] methods,\n+                          option.t[block] dtor) -> ast._obj {\n+    ret rec(fields=fields, methods=methods, dtor=dtor);\n }\n \n \n@@ -1481,7 +1490,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n          fold_native_mod = bind identity_fold_native_mod[ENV](_,_),\n          fold_crate = bind identity_fold_crate[ENV](_,_,_),\n-         fold_obj = bind identity_fold_obj[ENV](_,_,_),\n+         fold_obj = bind identity_fold_obj[ENV](_,_,_,_),\n \n          update_env_for_crate = bind identity_update_env_for_crate[ENV](_,_),\n          update_env_for_item = bind identity_update_env_for_item[ENV](_,_),"}]}