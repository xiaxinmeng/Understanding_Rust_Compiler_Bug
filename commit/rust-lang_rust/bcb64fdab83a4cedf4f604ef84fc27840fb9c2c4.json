{"sha": "bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjY0ZmRhYjgzYTRjZWRmNGY2MDRlZjg0ZmMyNzg0MGZiOWMyYzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-20T10:20:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-20T10:20:35Z"}, "message": "Merge pull request #2853 from nrc/match-comment\n\nHandle missing comments in match arm and more generally", "tree": {"sha": "b0a6a4631274cb94497e49fdcff242c1a79bb19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a6a4631274cb94497e49fdcff242c1a79bb19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbUbdzCRBK7hj4Ov3rIwAAdHIIAKhAUkRE85CC0INUs/CY9x/D\nbue8ulyGlsneWLlLNV6KtwtfXEJj1uGLuWL/ZHSqXQePEY9L6TG6juAp+l4M1LHw\nW3+FTPYfQ4NaueAVxNkeYR+MY1DCDqNym3L5ChsHxKHYMWjSgp7fqy/mtWsGnh4j\nFfeY7Wk2PcKl0QRnNyx4JcvNxJ7uWrxi1lz4HPmmlGy4J0NuJfJYMP8WKQBOUfea\nWpTtIY3fDCN0AHpq82S7stz+YeacCoC2FHYpxGM0qgAVBn5VpFx+kco6+nW4lJpr\nDMBw/RWgm+1rNuAJOxUyT3NClVTHlUD4J0aSyVI+pnq7azUqyNdUyOZWwjeqxNk=\n=BfTg\n-----END PGP SIGNATURE-----\n", "payload": "tree b0a6a4631274cb94497e49fdcff242c1a79bb19e\nparent b3aa671d7114c18bbd27ca0511db6956108fd739\nparent b085113cbe77b558624bbd2acb098956f5d6f266\nauthor Nick Cameron <nrc@ncameron.org> 1532082035 +1200\ncommitter GitHub <noreply@github.com> 1532082035 +1200\n\nMerge pull request #2853 from nrc/match-comment\n\nHandle missing comments in match arm and more generally"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "html_url": "https://github.com/rust-lang/rust/commit/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3aa671d7114c18bbd27ca0511db6956108fd739", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3aa671d7114c18bbd27ca0511db6956108fd739", "html_url": "https://github.com/rust-lang/rust/commit/b3aa671d7114c18bbd27ca0511db6956108fd739"}, {"sha": "b085113cbe77b558624bbd2acb098956f5d6f266", "url": "https://api.github.com/repos/rust-lang/rust/commits/b085113cbe77b558624bbd2acb098956f5d6f266", "html_url": "https://github.com/rust-lang/rust/commit/b085113cbe77b558624bbd2acb098956f5d6f266"}], "stats": {"total": 117, "additions": 88, "deletions": 29}, "files": [{"sha": "6abb5a9ef6d16be9a59a81c769aeb8bbb99bc6f8", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "patch": "@@ -1,3 +1,3 @@\n error_on_line_overflow = true\n error_on_unformatted = true\n-edition = \"Edition2018\"\n\\ No newline at end of file\n+edition = \"Edition2018\""}, {"sha": "3d55f6560e3e3a6ab9f5b58a5ef41504a071b916", "filename": "src/comment.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "patch": "@@ -20,6 +20,7 @@ use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n use utils::{count_newlines, first_line_width, last_line_width};\n+use {ErrorKind, FormattingError};\n \n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n@@ -1124,7 +1125,17 @@ pub fn recover_comment_removed(\n ) -> Option<String> {\n     let snippet = context.snippet(span);\n     if snippet != new && changed_comment_content(snippet, &new) {\n-        // We missed some comments. Keep the original text.\n+        // We missed some comments. Warn and keep the original text.\n+        if context.config.error_on_unformatted() {\n+            context.report.append(\n+                context.codemap.span_to_filename(span).into(),\n+                vec![FormattingError::from_span(\n+                    &span,\n+                    &context.codemap,\n+                    ErrorKind::LostComment,\n+                )],\n+            );\n+        }\n         Some(snippet.to_owned())\n     } else {\n         Some(new)"}, {"sha": "820134c2085d4e6efaf50ddfefbf03282d4a2f47", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "patch": "@@ -140,8 +140,20 @@ pub enum ErrorKind {\n     ParseError,\n     /// The user mandated a version and the current version of Rustfmt does not\n     /// satisfy that requirement.\n-    #[fail(display = \"Version mismatch\")]\n+    #[fail(display = \"version mismatch\")]\n     VersionMismatch,\n+    /// If we had formatted the given node, then we would have lost a comment.\n+    #[fail(display = \"not formatted because a comment would be lost\")]\n+    LostComment,\n+}\n+\n+impl ErrorKind {\n+    fn is_comment(&self) -> bool {\n+        match self {\n+            ErrorKind::LostComment => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl From<io::Error> for ErrorKind {\n@@ -162,8 +174,8 @@ impl FormattingError {\n     fn from_span(span: &Span, codemap: &CodeMap, kind: ErrorKind) -> FormattingError {\n         FormattingError {\n             line: codemap.lookup_char_pos(span.lo()).line,\n+            is_comment: kind.is_comment(),\n             kind,\n-            is_comment: false,\n             is_string: false,\n             line_buffer: codemap\n                 .span_to_lines(*span)\n@@ -181,7 +193,8 @@ impl FormattingError {\n             ErrorKind::LineOverflow(..)\n             | ErrorKind::TrailingWhitespace\n             | ErrorKind::IoError(_)\n-            | ErrorKind::ParseError => \"internal error:\",\n+            | ErrorKind::ParseError\n+            | ErrorKind::LostComment => \"internal error:\",\n             ErrorKind::LicenseCheck | ErrorKind::BadAttr | ErrorKind::VersionMismatch => \"error:\",\n             ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n         }\n@@ -200,7 +213,10 @@ impl FormattingError {\n     fn format_len(&self) -> (usize, usize) {\n         match self.kind {\n             ErrorKind::LineOverflow(found, max) => (max, found - max),\n-            ErrorKind::TrailingWhitespace | ErrorKind::DeprecatedAttr | ErrorKind::BadAttr => {\n+            ErrorKind::TrailingWhitespace\n+            | ErrorKind::DeprecatedAttr\n+            | ErrorKind::BadAttr\n+            | ErrorKind::LostComment => {\n                 let trailing_ws_start = self\n                     .line_buffer\n                     .rfind(|c: char| !c.is_whitespace())\n@@ -501,15 +517,15 @@ fn should_report_error(\n     is_string: bool,\n     error_kind: &ErrorKind,\n ) -> bool {\n-    let allow_error_report = if char_kind.is_comment() || is_string {\n+    let allow_error_report = if char_kind.is_comment() || is_string || error_kind.is_comment() {\n         config.error_on_unformatted()\n     } else {\n         true\n     };\n \n     match error_kind {\n         ErrorKind::LineOverflow(..) => config.error_on_line_overflow() && allow_error_report,\n-        ErrorKind::TrailingWhitespace => allow_error_report,\n+        ErrorKind::TrailingWhitespace | ErrorKind::LostComment => allow_error_report,\n         _ => true,\n     }\n }"}, {"sha": "791f34cefe8ded442117fe601ed9c6820e7c1c94", "filename": "src/matches.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "patch": "@@ -17,7 +17,7 @@ use syntax::codemap::{BytePos, Span};\n use syntax::{ast, ptr};\n \n use codemap::SpanUtils;\n-use comment::combine_strs_with_missing_comments;\n+use comment::{combine_strs_with_missing_comments, rewrite_comment};\n use config::{Config, ControlBraceStyle, IndentStyle};\n use expr::{\n     format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line,\n@@ -267,12 +267,15 @@ fn rewrite_match_arm(\n                     false,\n                 )\n             })?;\n+\n+    let arrow_span = mk_sp(arm.pats.last().unwrap().span.hi(), arm.body.span.lo());\n     rewrite_match_body(\n         context,\n         &arm.body,\n         &pats_str,\n         shape,\n         arm.guard.is_some(),\n+        arrow_span,\n         is_last,\n     )\n }\n@@ -345,6 +348,7 @@ fn rewrite_match_body(\n     pats_str: &str,\n     shape: Shape,\n     has_guard: bool,\n+    arrow_span: Span,\n     is_last: bool,\n ) -> Option<String> {\n     let (extend, body) = flatten_arm_body(context, body);\n@@ -369,24 +373,43 @@ fn rewrite_match_body(\n         Some(format!(\"{} =>{}{}{}\", pats_str, block_sep, body_str, comma))\n     };\n \n-    let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n     let next_line_indent = if !is_block || is_empty_block {\n         shape.indent.block_indent(context.config)\n     } else {\n         shape.indent\n     };\n+\n+    let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n+\n+    // Look for comments between `=>` and the start of the body.\n+    let arrow_comment = {\n+        let arrow_snippet = context.snippet(arrow_span).trim();\n+        let arrow_index = arrow_snippet.find(\"=>\").unwrap();\n+        // 2 = `=>`\n+        let comment_str = arrow_snippet[arrow_index + 2..].trim();\n+        if comment_str.is_empty() {\n+            String::new()\n+        } else {\n+            rewrite_comment(comment_str, false, shape, &context.config)?\n+        }\n+    };\n+\n     let combine_next_line_body = |body_str: &str| {\n+        let nested_indent_str = next_line_indent.to_string_with_newline(context.config);\n+\n         if is_block {\n-            return Some(format!(\n-                \"{} =>{}{}\",\n-                pats_str,\n-                next_line_indent.to_string_with_newline(context.config),\n-                body_str\n-            ));\n+            let mut result = pats_str.to_owned();\n+            result.push_str(\" =>\");\n+            if !arrow_comment.is_empty() {\n+                result.push_str(&nested_indent_str);\n+                result.push_str(&arrow_comment);\n+            }\n+            result.push_str(&nested_indent_str);\n+            result.push_str(&body_str);\n+            return Some(result);\n         }\n \n         let indent_str = shape.indent.to_string_with_newline(context.config);\n-        let nested_indent_str = next_line_indent.to_string_with_newline(context.config);\n         let (body_prefix, body_suffix) = if context.config.match_arm_blocks() {\n             let comma = if context.config.match_block_trailing_comma() {\n                 \",\"\n@@ -401,32 +424,40 @@ fn rewrite_match_body(\n         let block_sep = match context.config.control_brace_style() {\n             ControlBraceStyle::AlwaysNextLine => format!(\"{}{}\", alt_block_sep, body_prefix),\n             _ if body_prefix.is_empty() => \"\".to_owned(),\n-            _ if forbid_same_line => format!(\"{}{}\", alt_block_sep, body_prefix),\n+            _ if forbid_same_line || !arrow_comment.is_empty() => {\n+                format!(\"{}{}\", alt_block_sep, body_prefix)\n+            }\n             _ => format!(\" {}\", body_prefix),\n         } + &nested_indent_str;\n \n-        Some(format!(\n-            \"{} =>{}{}{}\",\n-            pats_str, block_sep, body_str, body_suffix\n-        ))\n+        let mut result = pats_str.to_owned();\n+        result.push_str(\" =>\");\n+        if !arrow_comment.is_empty() {\n+            result.push_str(&indent_str);\n+            result.push_str(&arrow_comment);\n+        }\n+        result.push_str(&block_sep);\n+        result.push_str(&body_str);\n+        result.push_str(&body_suffix);\n+        Some(result)\n     };\n \n     // Let's try and get the arm body on the same line as the condition.\n     // 4 = ` => `.len()\n     let orig_body_shape = shape\n         .offset_left(extra_offset(pats_str, shape) + 4)\n         .and_then(|shape| shape.sub_width(comma.len()));\n-    let orig_body = if let Some(body_shape) = orig_body_shape {\n+    let orig_body = if forbid_same_line || !arrow_comment.is_empty() {\n+        None\n+    } else if let Some(body_shape) = orig_body_shape {\n         let rewrite = nop_block_collapse(\n             format_expr(body, ExprType::Statement, context, body_shape),\n             body_shape.width,\n         );\n \n         match rewrite {\n             Some(ref body_str)\n-                if !forbid_same_line\n-                    && (is_block\n-                        || (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n+                if is_block || (!body_str.contains('\\n') && body_str.len() <= body_shape.width) =>\n             {\n                 return combine_orig_body(body_str);\n             }\n@@ -445,8 +476,7 @@ fn rewrite_match_body(\n     );\n     match (orig_body, next_line_body) {\n         (Some(ref orig_str), Some(ref next_line_str))\n-            if forbid_same_line\n-                || prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n+            if prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n         {\n             combine_next_line_body(next_line_str)\n         }"}, {"sha": "b1fa0ff6fe119a5d8c9d08952d9f6979d20087c7", "filename": "tests/target/comment-not-disappear.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/tests%2Ftarget%2Fcomment-not-disappear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4/tests%2Ftarget%2Fcomment-not-disappear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment-not-disappear.rs?ref=bcb64fdab83a4cedf4f604ef84fc27840fb9c2c4", "patch": "@@ -11,8 +11,10 @@ fn a() {\n fn b() {\n     match x {\n         X =>\n-            // A comment\n+        // A comment\n+        {\n             y\n+        }\n     }\n }\n "}]}