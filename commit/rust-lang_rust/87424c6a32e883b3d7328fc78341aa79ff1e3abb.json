{"sha": "87424c6a32e883b3d7328fc78341aa79ff1e3abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDI0YzZhMzJlODgzYjNkNzMyOGZjNzgzNDFhYTc5ZmYxZTNhYmI=", "commit": {"author": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-12-06T23:05:13Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-12-06T23:07:26Z"}, "message": "Fix false positive alerts from a run-pass test on Command.\n\nReported as a part of rust-lang/rust#19120\n\nThe logic of rust-lang/rust@74fb798a200dc82cf5b4a18065e3ea565229adc3 was\nflawed because when a CI tool run the test parallely with other tasks,\nthey all belong to a single session family and the test may pick up\nirrelevant zombie processes before they are reaped by the CI tool\ndepending on timing.\n\nAlso, panic! inside a loop over all children makes the logic simpler.\n\nBy not destructing the return values of Command::spawn() until\nfind_zombies() finishes, I believe we can conduct a slightly stricter\ntest.\n\nSigned-off-by: NODA, Kai <nodakai@gmail.com>", "tree": {"sha": "6e68711c53d807a0b81c353ff6a5d2ada2ed421b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e68711c53d807a0b81c353ff6a5d2ada2ed421b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87424c6a32e883b3d7328fc78341aa79ff1e3abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87424c6a32e883b3d7328fc78341aa79ff1e3abb", "html_url": "https://github.com/rust-lang/rust/commit/87424c6a32e883b3d7328fc78341aa79ff1e3abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87424c6a32e883b3d7328fc78341aa79ff1e3abb/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "358db12a89d6edf4a61cb3c8d170449faea925cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/358db12a89d6edf4a61cb3c8d170449faea925cc", "html_url": "https://github.com/rust-lang/rust/commit/358db12a89d6edf4a61cb3c8d170449faea925cc"}], "stats": {"total": 68, "additions": 28, "deletions": 40}, "files": [{"sha": "577e114945c66ee33ed254b9a39c3ee681a07933", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/87424c6a32e883b3d7328fc78341aa79ff1e3abb/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87424c6a32e883b3d7328fc78341aa79ff1e3abb/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=87424c6a32e883b3d7328fc78341aa79ff1e3abb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n extern crate libc;\n \n use std::io::process::Command;\n@@ -18,51 +16,38 @@ use std::iter::IteratorExt;\n use libc::funcs::posix88::unistd;\n \n \n-// \"ps -A -o pid,sid,command\" with GNU ps should output something like this:\n-//   PID   SID COMMAND\n-//     1     1 /sbin/init\n+// The output from \"ps -A -o pid,ppid,args\" should look like this:\n+//   PID  PPID COMMAND\n+//     1     0 /sbin/init\n //     2     0 [kthreadd]\n-//     3     0 [ksoftirqd/0]\n // ...\n-// 12562  9237 ./spawn-failure\n-// 12563  9237 [spawn-failure] <defunct>\n-// 12564  9237 [spawn-failure] <defunct>\n+//  6076  9064 /bin/zsh\n+// ...\n+//  7164  6076 ./spawn-failure\n+//  7165  7164 [spawn-failure] <defunct>\n+//  7166  7164 [spawn-failure] <defunct>\n // ...\n-// 12592  9237 [spawn-failure] <defunct>\n-// 12593  9237 ps -A -o pid,sid,command\n-// 12884 12884 /bin/zsh\n-// 12922 12922 /bin/zsh\n+//  7197  7164 [spawn-failure] <defunct>\n+//  7198  7164 ps -A -o pid,ppid,command\n // ...\n \n #[cfg(unix)]\n fn find_zombies() {\n-    // http://man.freebsd.org/ps(1)\n-    // http://man7.org/linux/man-pages/man1/ps.1.html\n-    #[cfg(not(target_os = \"macos\"))]\n-    const FIELDS: &'static str = \"pid,sid,command\";\n-\n-    // https://developer.apple.com/library/mac/documentation/Darwin/\n-    // Reference/ManPages/man1/ps.1.html\n-    #[cfg(target_os = \"macos\")]\n-    const FIELDS: &'static str = \"pid,sess,command\";\n-\n-    let my_sid = unsafe { unistd::getsid(0) };\n+    let my_pid = unsafe { unistd::getpid() };\n \n-    let ps_cmd_output = Command::new(\"ps\").args(&[\"-A\", \"-o\", FIELDS]).output().unwrap();\n+    // http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ps.html\n+    let ps_cmd_output = Command::new(\"ps\").args(&[\"-A\", \"-o\", \"pid,ppid,args\"]).output().unwrap();\n     let ps_output = String::from_utf8_lossy(ps_cmd_output.output.as_slice());\n \n-    let found = ps_output.split('\\n').enumerate().any(|(line_no, line)|\n-        0 < line_no && 0 < line.len() &&\n-        my_sid == from_str(line.split(' ').filter(|w| 0 < w.len()).nth(1)\n-            .expect(\"1st column should be Session ID\")\n-            ).expect(\"Session ID string into integer\") &&\n-        line.contains(\"defunct\") && {\n-            println!(\"Zombie child {}\", line);\n-            true\n+    for (line_no, line) in ps_output.split('\\n').enumerate() {\n+        if 0 < line_no && 0 < line.len() &&\n+           my_pid == from_str(line.split(' ').filter(|w| 0 < w.len()).nth(1)\n+               .expect(\"1st column should be PPID\")\n+               ).expect(\"PPID string into integer\") &&\n+           line.contains(\"defunct\") {\n+            panic!(\"Zombie child {}\", line);\n         }\n-    );\n-\n-    assert!( ! found, \"Found at least one zombie child\");\n+    }\n }\n \n #[cfg(windows)]\n@@ -71,10 +56,13 @@ fn find_zombies() { }\n fn main() {\n     let too_long = format!(\"/NoSuchCommand{:0300}\", 0u8);\n \n-    for _ in range(0u32, 100) {\n-        let invalid = Command::new(too_long.as_slice()).spawn();\n-        assert!(invalid.is_err());\n-    }\n+    let _failures = Vec::from_fn(100, |_i| {\n+        let cmd = Command::new(too_long.as_slice());\n+        let failed = cmd.spawn();\n+        assert!(failed.is_err(), \"Make sure the command fails to spawn(): {}\", cmd);\n+        failed\n+    });\n \n     find_zombies();\n+    // then _failures goes out of scope\n }"}]}