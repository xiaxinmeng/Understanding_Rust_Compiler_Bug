{"sha": "24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YzQ1OWMyZTUxZmVjYjZmOWUxNDUzYmIxZDdhYjgxOWZmNDcxYTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-11T12:25:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-11T12:25:56Z"}, "message": "Use declare_anonymous_data for anonymous_str", "tree": {"sha": "5731979ea7317084b235c5283c86194b16547c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5731979ea7317084b235c5283c86194b16547c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "html_url": "https://github.com/rust-lang/rust/commit/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c40338ba13aa38c8ba4442f92d50155ad9f6ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c40338ba13aa38c8ba4442f92d50155ad9f6ddd", "html_url": "https://github.com/rust-lang/rust/commit/7c40338ba13aa38c8ba4442f92d50155ad9f6ddd"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "2e16dc37c08d6c7d2f113a70d2eab0ab9a4ebff1", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "patch": "@@ -870,7 +870,7 @@ pub(crate) fn codegen_operand<'tcx>(\n pub(crate) fn codegen_panic<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, msg_str: &str, span: Span) {\n     let location = fx.get_caller_location(span).load_scalar(fx);\n \n-    let msg_ptr = fx.anonymous_str(\"assert\", msg_str);\n+    let msg_ptr = fx.anonymous_str(msg_str);\n     let msg_len = fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(msg_str.len()).unwrap());\n     let args = [msg_ptr, msg_len, location];\n "}, {"sha": "ed6c4411a3d24c64aa31b6fb0ec016142ab9d49d", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "patch": "@@ -345,18 +345,12 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.module.isa().triple()\n     }\n \n-    pub(crate) fn anonymous_str(&mut self, prefix: &str, msg: &str) -> Value {\n-        use std::collections::hash_map::DefaultHasher;\n-        use std::hash::{Hash, Hasher};\n-\n-        let mut hasher = DefaultHasher::new();\n-        msg.hash(&mut hasher);\n-        let msg_hash = hasher.finish();\n+    pub(crate) fn anonymous_str(&mut self, msg: &str) -> Value {\n         let mut data_ctx = DataContext::new();\n         data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());\n         let msg_id = self\n             .module\n-            .declare_data(&format!(\"__{}_{:08x}\", prefix, msg_hash), Linkage::Local, false, false)\n+            .declare_anonymous_data(false, false)\n             .unwrap();\n \n         // Ignore DuplicateDefinition error, as the data will be the same"}, {"sha": "21d3e68dbc79257ac4f899715efe30ce481d2839", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c459c2e51fecb6f9e1453bb1d7ab819ff471a3/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=24c459c2e51fecb6f9e1453bb1d7ab819ff471a3", "patch": "@@ -21,7 +21,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n     }\n \n     let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, fx.symbol_name, msg);\n-    let msg_ptr = fx.anonymous_str(\"trap\", &real_msg);\n+    let msg_ptr = fx.anonymous_str(&real_msg);\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }\n "}]}