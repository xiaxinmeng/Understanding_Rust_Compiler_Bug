{"sha": "37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTk5MDM4ZDA2ZjJmN2VmZDRhNTIwYjhjZGI1ZGE2NmIxNWU4NWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-12T19:05:33Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-14T19:20:50Z"}, "message": "Remove rustc_mir::borrowck_errors::Origin", "tree": {"sha": "2e34a4a43494d7bdf457839d5475483a8467bfe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e34a4a43494d7bdf457839d5475483a8467bfe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "html_url": "https://github.com/rust-lang/rust/commit/37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2975c01747fd112812a13637103d7e8e2df46419", "url": "https://api.github.com/repos/rust-lang/rust/commits/2975c01747fd112812a13637103d7e8e2df46419", "html_url": "https://github.com/rust-lang/rust/commit/2975c01747fd112812a13637103d7e8e2df46419"}], "stats": {"total": 97, "additions": 19, "deletions": 78}, "files": [{"sha": "b8965b46d548945baea428f73d3b020aa834318b", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "patch": "@@ -22,7 +22,7 @@ use super::{InitializationRequiringAction, PrefixSet};\n use super::error_reporting::{IncludingDowncast, UseSpans};\n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MovePathIndex, MoveOutIndex};\n-use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::BorrowckErrors;\n \n #[derive(Debug)]\n struct MoveSite {\n@@ -94,7 +94,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 desired_action.as_noun(),\n                 &self.describe_place_with_options(moved_place, IncludingDowncast(true))\n                     .unwrap_or_else(|| \"_\".to_owned()),\n-                Origin::Mir,\n             );\n             err.span_label(span, format!(\"use of possibly uninitialized {}\", item_msg));\n \n@@ -125,7 +124,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 desired_action.as_noun(),\n                 msg,\n                 self.describe_place_with_options(&moved_place, IncludingDowncast(true)),\n-                Origin::Mir,\n             );\n \n             self.add_moved_or_invoked_closure_note(\n@@ -286,7 +284,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = tcx.cannot_move_when_borrowed(\n             span,\n             &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n-            Origin::Mir,\n         );\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n@@ -331,7 +328,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             borrow_span,\n             &self.describe_place(&borrow.borrowed_place)\n                 .unwrap_or_else(|| \"_\".to_owned()),\n-            Origin::Mir,\n         );\n \n         borrow_spans.var_span_label(&mut err, {\n@@ -398,7 +394,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     rgt,\n                     &msg_borrow,\n                     None,\n-                    Origin::Mir,\n                 )\n             }\n             (BorrowKind::Mut { .. }, _, lft, BorrowKind::Shared, rgt, _) => {\n@@ -413,7 +408,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     rgt,\n                     &msg_borrow,\n                     None,\n-                    Origin::Mir,\n                 )\n             }\n \n@@ -426,7 +420,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     issued_span,\n                     &msg_borrow,\n                     None,\n-                    Origin::Mir,\n                 )\n             }\n \n@@ -437,7 +430,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     &desc_place,\n                     issued_span,\n                     None,\n-                    Origin::Mir,\n                 )\n             }\n \n@@ -448,7 +440,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     issued_span,\n                     &desc_place,\n                     \"mutably borrow\",\n-                    Origin::Mir,\n                 );\n                 borrow_spans.var_span_label(\n                     &mut err,\n@@ -471,7 +462,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     \"it\",\n                     \"\",\n                     None,\n-                    Origin::Mir,\n                 )\n             },\n \n@@ -487,7 +477,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     \"\",\n                     None,\n                     second_borrow_desc,\n-                    Origin::Mir,\n                 )\n             }\n \n@@ -503,7 +492,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     \"\",\n                     None,\n                     second_borrow_desc,\n-                    Origin::Mir,\n                 )\n             }\n \n@@ -836,7 +824,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = self.infcx.tcx.path_does_not_live_long_enough(\n             borrow_span,\n             &format!(\"`{}`\", name),\n-            Origin::Mir,\n         );\n \n         if let Some(annotation) = self.annotate_argument_and_return_for_borrow(borrow) {\n@@ -927,7 +914,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.infcx\n             .tcx\n-            .cannot_borrow_across_destructor(borrow_span, Origin::Mir);\n+            .cannot_borrow_across_destructor(borrow_span);\n \n         let what_was_dropped = match self.describe_place(place) {\n             Some(name) => format!(\"`{}`\", name.as_str()),\n@@ -980,7 +967,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.infcx\n             .tcx\n-            .thread_local_value_does_not_live_long_enough(borrow_span, Origin::Mir);\n+            .thread_local_value_does_not_live_long_enough(borrow_span);\n \n         err.span_label(\n             borrow_span,\n@@ -1025,7 +1012,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n \n         let tcx = self.infcx.tcx;\n-        let mut err = tcx.temporary_value_borrowed_for_too_long(proper_span, Origin::Mir);\n+        let mut err = tcx.temporary_value_borrowed_for_too_long(proper_span);\n         err.span_label(\n             proper_span,\n             \"creates a temporary which is freed while still in use\",\n@@ -1137,7 +1124,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             return_kind,\n             reference_desc,\n             &place_desc,\n-            Origin::Mir,\n         );\n \n         if return_span != borrow_span {\n@@ -1162,7 +1148,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             args_span,\n             captured_var,\n             var_span,\n-          Origin::Mir,\n         );\n \n         let suggestion = match tcx.sess.source_map().span_to_snippet(args_span) {\n@@ -1218,7 +1203,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"function\"\n         };\n \n-        let mut err = tcx.borrowed_data_escapes_closure(escape_span, escapes_from, Origin::Mir);\n+        let mut err = tcx.borrowed_data_escapes_closure(escape_span, escapes_from);\n \n         err.span_label(\n             upvar_span,\n@@ -1367,7 +1352,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 loan_span,\n                 &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n                 \"assign\",\n-                Origin::Mir,\n             );\n             loan_spans.var_span_label(\n                 &mut err,\n@@ -1383,7 +1367,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             span,\n             loan_span,\n             &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n-            Origin::Mir,\n         );\n \n         loan_spans.var_span_label(\n@@ -1448,7 +1431,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             span,\n             place_description.as_ref().map(AsRef::as_ref).unwrap_or(\"_\"),\n             from_arg,\n-            Origin::Mir,\n         );\n         let msg = if from_arg {\n             \"cannot assign to immutable argument\""}, {"sha": "b7944c3a74888ab3b0de2013830be6ca475d0eec", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "patch": "@@ -41,7 +41,7 @@ use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{do_dataflow, DebugFormatted};\n use crate::dataflow::EverInitializedPlaces;\n use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::BorrowckErrors;\n \n use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n@@ -1503,7 +1503,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 .cannot_borrow_across_generator_yield(\n                     self.retrieve_borrow_spans(borrow).var_or_use(),\n                     yield_span,\n-                    Origin::Mir,\n                 );\n \n             err.buffer(&mut self.errors_buffer);"}, {"sha": "6110c9baaacc2622e2e487d9f3421f2f2cb89dc9", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "patch": "@@ -12,7 +12,7 @@ use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind,\n     LookupResult, MoveError, MovePathIndex,\n };\n-use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::BorrowckErrors;\n \n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For\n@@ -255,11 +255,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n                         self.infcx.tcx\n-                            .cannot_move_out_of_interior_of_drop(span, ty, Origin::Mir)\n+                            .cannot_move_out_of_interior_of_drop(span, ty)\n                     }\n                     IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } =>\n                         self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n-                            span, ty, Some(*is_index), Origin::Mir\n+                            span, ty, Some(*is_index),\n                         ),\n                 },\n                 span,\n@@ -293,7 +293,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             )\n         };\n \n-        self.infcx.tcx.cannot_move_out_of(span, &description, Origin::Mir)\n+        self.infcx.tcx.cannot_move_out_of(span, &description)\n     }\n \n     fn report_cannot_move_from_borrowed_content(\n@@ -302,8 +302,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         deref_target_place: &Place<'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'a> {\n-        let origin = Origin::Mir;\n-\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n         // was a move rather than a copy.\n@@ -322,7 +320,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let mut err = self.infcx.tcx.cannot_move_out_of(\n                     span,\n                     &format!(\"`{}` in pattern guard\", decl.name.unwrap()),\n-                    origin,\n                 );\n                 err.note(\n                     \"variables bound in patterns cannot be moved from \\\n@@ -334,9 +331,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         debug!(\"report: ty={:?}\", ty);\n         let mut err = match ty.sty {\n             ty::Array(..) | ty::Slice(..) =>\n-                self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n-                    span, ty, None, origin\n-                ),\n+                self.infcx.tcx.cannot_move_out_of_interior_noncopy(span, ty, None),\n             ty::Closure(def_id, closure_substs)\n                 if def_id == self.mir_def_id && upvar_field.is_some()\n             => {\n@@ -378,7 +373,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     closure_kind_ty, closure_kind, place_description,\n                 );\n \n-                let mut diag = self.infcx.tcx.cannot_move_out_of(span, &place_description, origin);\n+                let mut diag = self.infcx.tcx.cannot_move_out_of(span, &place_description);\n \n                 diag.span_label(upvar_span, \"captured outer variable\");\n \n@@ -391,14 +386,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         self.infcx.tcx.cannot_move_out_of(\n                             span,\n                             &format!(\"`{}` which is behind a {}\", place_desc, source_desc),\n-                            origin,\n                         )\n                     }\n                     (_, _) => {\n                         self.infcx.tcx.cannot_move_out_of(\n                             span,\n                             &source.describe_for_unnamed_place(),\n-                            origin,\n                         )\n                     }\n                 }"}, {"sha": "c15b33cdaaaf306b7b12c491858447f2fb722517", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "patch": "@@ -9,7 +9,7 @@ use syntax_pos::symbol::kw;\n \n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::error_reporting::BorrowedContentSource;\n-use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::BorrowckErrors;\n use crate::util::collect_writes::FindAssignments;\n use crate::util::suggest_ref_mut;\n use rustc_errors::Applicability;\n@@ -161,15 +161,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         let span = match error_access {\n             AccessKind::Move => {\n-                err = self.infcx.tcx\n-                    .cannot_move_out_of(span, &(item_msg + &reason), Origin::Mir);\n+                err = self.infcx.tcx.cannot_move_out_of(span, &(item_msg + &reason));\n                 err.span_label(span, \"cannot move\");\n                 err.buffer(&mut self.errors_buffer);\n                 return;\n             }\n             AccessKind::Mutate => {\n-                err = self.infcx.tcx\n-                    .cannot_assign(span, &(item_msg + &reason), Origin::Mir);\n+                err = self.infcx.tcx.cannot_assign(span, &(item_msg + &reason));\n                 act = \"assign\";\n                 acted_on = \"written\";\n                 span\n@@ -184,7 +182,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     borrow_span,\n                     &item_msg,\n                     &reason,\n-                    Origin::Mir,\n                 );\n                 borrow_spans.var_span_label(\n                     &mut err,"}, {"sha": "a255f7182e3f73ccd0d61d4679838d9cec43faa8", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "patch": "@@ -4,7 +4,7 @@ use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use crate::borrow_check::nll::type_check::Locations;\n use crate::borrow_check::nll::universal_regions::DefiningTy;\n use crate::borrow_check::nll::ConstraintDescription;\n-use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n+use crate::util::borrowck_errors::BorrowckErrors;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n@@ -489,7 +489,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let mut diag = infcx\n             .tcx\n-            .borrowed_data_escapes_closure(span, escapes_from, Origin::Mir);\n+            .borrowed_data_escapes_closure(span, escapes_from);\n \n         if let Some((Some(outlived_fr_name), outlived_fr_span)) = outlived_fr_name_and_span {\n             diag.span_label("}, {"sha": "d7fbb76b38c94fee11d19fa1b4d2417c0f61e9cd", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a99038d06f2f7efd4a520b8cdb5da66b15e85f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "patch": "@@ -2,13 +2,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n-// FIXME(chrisvittal) remove Origin entirely\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub enum Origin {\n-    Mir,\n-}\n-\n-pub trait BorrowckErrors<'cx>: Sized + Copy {\n+pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         self,\n         sp: S,\n@@ -22,7 +16,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self,\n         span: Span,\n         desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -39,7 +32,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         desc: &str,\n         borrow_span: Span,\n         borrow_desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -62,7 +54,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         span: Span,\n         verb: &str,\n         desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -82,7 +73,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         old_loan_span: Span,\n         old_opt_via: &str,\n         old_load_end_span: Option<Span>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let via = |msg: &str|\n             if msg.is_empty() { msg.to_string() } else { format!(\" (via `{}`)\", msg) };\n@@ -130,7 +120,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         desc: &str,\n         old_loan_span: Span,\n         old_load_end_span: Option<Span>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -164,7 +153,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         noun_old: &str,\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -197,7 +185,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n         second_borrow_desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -234,7 +221,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         kind_old: &str,\n         msg_old: &str,\n         old_load_end_span: Option<Span>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let via = |msg: &str|\n             if msg.is_empty() { msg.to_string() } else { format!(\" (via `{}`)\", msg) };\n@@ -282,7 +268,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         span: Span,\n         borrow_span: Span,\n         desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -305,7 +290,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         span: Span,\n         desc: &str,\n         is_arg: bool,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let msg = if is_arg {\n             \"to immutable argument\"\n@@ -322,15 +306,14 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_assign(self, span: Span, desc: &str, _: Origin) -> DiagnosticBuilder<'cx> {\n+    fn cannot_assign(self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n     fn cannot_move_out_of(\n         self,\n         move_from_span: Span,\n         move_from_desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -349,7 +332,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         move_from_span: Span,\n         ty: Ty<'_>,\n         is_index: Option<bool>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let type_name = match (&ty.sty, is_index) {\n             (&ty::Array(_, _), Some(true)) | (&ty::Array(_, _), None) => \"array\",\n@@ -372,7 +354,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self,\n         move_from_span: Span,\n         container_ty: Ty<'_>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -391,7 +372,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         verb: &str,\n         optional_adverb_for_moved: &str,\n         moved_path: Option<String>,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let moved_path = moved_path\n             .map(|mp| format!(\": `{}`\", mp))\n@@ -413,7 +393,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         span: Span,\n         path: &str,\n         reason: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -431,7 +410,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         match_span: Span,\n         match_place: &str,\n         action: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -450,7 +428,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self,\n         span: Span,\n         yield_span: Span,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -465,7 +442,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_borrow_across_destructor(\n         self,\n         borrow_span: Span,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -479,7 +455,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self,\n         span: Span,\n         path: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -496,7 +471,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -521,7 +495,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         closure_span: Span,\n         borrowed_path: &str,\n         capture_span: Span,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n@@ -544,7 +517,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self,\n         escape_span: Span,\n         escapes_from: &str,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -558,7 +530,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn thread_local_value_does_not_live_long_enough(\n         self,\n         span: Span,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,\n@@ -571,7 +542,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn temporary_value_borrowed_for_too_long(\n         self,\n         span: Span,\n-        _: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n             self,"}]}