{"sha": "9196b2d0c89b8af853f8f41b5854655932491758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTZiMmQwYzg5YjhhZjg1M2Y4ZjQxYjU4NTQ2NTU5MzI0OTE3NTg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-07-27T19:18:34Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-09-24T18:11:50Z"}, "message": "add error message for case", "tree": {"sha": "49b2c0d716b585358aa31d56634569182ab06a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b2c0d716b585358aa31d56634569182ab06a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9196b2d0c89b8af853f8f41b5854655932491758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9196b2d0c89b8af853f8f41b5854655932491758", "html_url": "https://github.com/rust-lang/rust/commit/9196b2d0c89b8af853f8f41b5854655932491758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9196b2d0c89b8af853f8f41b5854655932491758/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5665e811ba4eca0f778efb65bd3e4a69f4c3ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5665e811ba4eca0f778efb65bd3e4a69f4c3ca6", "html_url": "https://github.com/rust-lang/rust/commit/b5665e811ba4eca0f778efb65bd3e4a69f4c3ca6"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "6edd56f749290fbc8ffe7fa2785e9d75cc0b3fa7", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -556,7 +556,12 @@ impl<T> From<T> for T {\n \n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n #[cfg(not(boostrap_stdarch_ignore_this))]\n-#[rustc_reservation_impl]\n+#[rustc_reservation_impl=\"a future version of Rust might implement `From<!>` for \\\n+    all types. \\\n+    However, it is OK to implement `From<!>` for types you own - \\\n+    when the blanket impl will be added, coherence will be changed \\\n+    to make these impls not be an error.\"\n+]\n impl<T> From<!> for T {\n     fn from(t: !) -> T { t }\n }"}, {"sha": "c91ee1b9caa938e5e51632ffb7ed791070a8725d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -43,6 +43,8 @@ use crate::hir;\n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::Lock;\n use rustc_target::spec::abi::Abi;\n+use syntax::attr;\n+use syntax::symbol::sym;\n use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::fmt::{self, Display};\n@@ -99,6 +101,9 @@ pub enum IntercrateAmbiguityCause {\n         trait_desc: String,\n         self_desc: Option<String>,\n     },\n+    ReservationImpl {\n+        message: String\n+    },\n }\n \n impl IntercrateAmbiguityCause {\n@@ -139,6 +144,11 @@ impl IntercrateAmbiguityCause {\n                     trait_desc, self_desc\n                 )\n             }\n+            &IntercrateAmbiguityCause::ReservationImpl {\n+                ref message\n+            } => {\n+                message.clone()\n+            }\n         }\n     }\n }\n@@ -1328,15 +1338,32 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n     fn filter_negative_and_reservation_impls(\n-        &self,\n+        &mut self,\n         candidate: SelectionCandidate<'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n         if let ImplCandidate(def_id) = candidate {\n-            match self.tcx().impl_polarity(def_id) {\n+            let tcx = self.tcx();\n+            match tcx.impl_polarity(def_id) {\n                 ty::ImplPolarity::Negative if !self.allow_negative_impls => {\n                     return Err(Unimplemented);\n                 }\n                 ty::ImplPolarity::Reservation => {\n+                    if let Some(intercrate_ambiguity_clauses)\n+                        = &mut self.intercrate_ambiguity_causes\n+                    {\n+                        let attrs = tcx.get_attrs(def_id);\n+                        let attr = attr::find_by_name(&attrs, sym::rustc_reservation_impl);\n+                        let value = attr.and_then(|a| a.value_str());\n+                        if let Some(value) = value {\n+                            debug!(\"filter_negative_and_reservation_impls: \\\n+                                    reservation impl ambiguity on {:?}\", def_id);\n+                            intercrate_ambiguity_clauses.push(\n+                                IntercrateAmbiguityCause::ReservationImpl {\n+                                    message: value.to_string()\n+                                }\n+                            );\n+                        }\n+                    }\n                     return Ok(None);\n                 }\n                 _ => {}"}, {"sha": "d14afc6deaa69b238612282706d518377d1923bc", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -457,7 +457,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n     // Internal attributes, Misc:\n     // ==========================================================================\n-\n     gated!(\n         lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n         \"language items are subject to change\",\n@@ -498,7 +497,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         overflow checking behavior of several libcore functions that are inlined \\\n         across crates and will never be stable\",\n     ),\n-    rustc_attr!(rustc_reservation_impl, Normal, template!(Word),\n+    rustc_attr!(rustc_reservation_impl, Normal, template!(NameValueStr: \"reservation message\"),\n                 \"the `#[rustc_reservation_impl]` attribute is internally used \\\n                  for reserving for `for<T> From<!> for T` impl\"\n     ),"}, {"sha": "352fed7ca45156c3f2d820b18740060a72f76cfe", "filename": "src/test/ui/never-from-impl-is-reserved.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.stderr?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -6,6 +6,8 @@ LL | impl MyTrait for MyFoo {}\n LL | // This will conflict with the first impl if we impl `for<T> T: From<!>`.\n LL | impl<T> MyTrait for T where T: From<!> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyFoo`\n+   |\n+   = note: a future version of Rust might implement `From<!>` for all types. However, it is OK to implement `From<!>` for types you own - when the blanket impl will be added, coherence will be changed to make these impls not be an error.\n \n error: aborting due to previous error\n "}, {"sha": "775278c30cd4cbc51efb667ec72a3e143e43cff1", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -5,7 +5,7 @@\n #![feature(rustc_attrs)]\n \n trait MyTrait {}\n-#[rustc_reservation_impl]\n+#[rustc_reservation_impl=\"this impl is reserved\"]\n impl MyTrait for () {}\n \n trait OtherTrait {}"}, {"sha": "47e141bd048ebb16e86017ade0a77cf31bfd5494", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -5,6 +5,8 @@ LL | impl OtherTrait for () {}\n    | ---------------------- first implementation here\n LL | impl<T: MyTrait> OtherTrait for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n+   |\n+   = note: this impl is reserved\n \n error: aborting due to previous error\n "}, {"sha": "3391daaabe975a663c62f3f44a8a6ae14f0198b7", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -5,7 +5,7 @@\n #![feature(rustc_attrs)]\n \n trait MyTrait { fn foo(&self); }\n-#[rustc_reservation_impl]\n+#[rustc_reservation_impl = \"foo\"]\n impl MyTrait for () { fn foo(&self) {} }\n \n fn main() {"}, {"sha": "611c8d8841323b117f0e06a88589817d042bda1a", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196b2d0c89b8af853f8f41b5854655932491758/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-ok.rs?ref=9196b2d0c89b8af853f8f41b5854655932491758", "patch": "@@ -11,7 +11,7 @@ trait MyTrait<S> {\n     fn foo(&self, s: S) -> usize;\n }\n \n-#[rustc_reservation_impl]\n+#[rustc_reservation_impl = \"foo\"]\n impl<T> MyTrait<u64> for T {\n     fn foo(&self, _x: u64) -> usize { 0 }\n }"}]}