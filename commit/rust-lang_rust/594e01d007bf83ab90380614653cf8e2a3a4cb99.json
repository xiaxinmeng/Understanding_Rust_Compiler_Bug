{"sha": "594e01d007bf83ab90380614653cf8e2a3a4cb99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NGUwMWQwMDdiZjgzYWI5MDM4MDYxNDY1M2NmOGUyYTNhNGNiOTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T15:05:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:46Z"}, "message": "add pure, copies to liveness", "tree": {"sha": "b49e1264ea14bc6fc70ab73770094bc241173e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49e1264ea14bc6fc70ab73770094bc241173e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594e01d007bf83ab90380614653cf8e2a3a4cb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594e01d007bf83ab90380614653cf8e2a3a4cb99", "html_url": "https://github.com/rust-lang/rust/commit/594e01d007bf83ab90380614653cf8e2a3a4cb99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594e01d007bf83ab90380614653cf8e2a3a4cb99/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d17c2d87ff738aa2f4895255f99e2e89112cbb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d17c2d87ff738aa2f4895255f99e2e89112cbb6", "html_url": "https://github.com/rust-lang/rust/commit/7d17c2d87ff738aa2f4895255f99e2e89112cbb6"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "729ffa0bb93bb5ba9f8d8f10afd0b46558fccef0", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/594e01d007bf83ab90380614653cf8e2a3a4cb99/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e01d007bf83ab90380614653cf8e2a3a4cb99/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=594e01d007bf83ab90380614653cf8e2a3a4cb99", "patch": "@@ -133,7 +133,7 @@ impl of to_str::to_str for variable {\n // assignment.  And so forth.\n \n impl methods for live_node {\n-    fn is_valid() -> bool { *self != uint::max_value }\n+    pure fn is_valid() -> bool { *self != uint::max_value }\n }\n \n fn invalid_node() -> live_node { live_node(uint::max_value) }\n@@ -571,7 +571,7 @@ class liveness {\n     fn live_on_exit(ln: live_node, var: variable)\n         -> option<live_node_kind> {\n \n-        self.live_on_entry(self.successors[*ln], var)\n+        self.live_on_entry(copy self.successors[*ln], var)\n     }\n \n     fn used_on_entry(ln: live_node, var: variable) -> bool {\n@@ -590,7 +590,7 @@ class liveness {\n     fn assigned_on_exit(ln: live_node, var: variable)\n         -> option<live_node_kind> {\n \n-        self.assigned_on_entry(self.successors[*ln], var)\n+        self.assigned_on_entry(copy self.successors[*ln], var)\n     }\n \n     fn indices(ln: live_node, op: fn(uint)) {\n@@ -627,14 +627,14 @@ class liveness {\n             wr.write_str(\"[ln(\");\n             wr.write_uint(*ln);\n             wr.write_str(\") of kind \");\n-            wr.write_str(#fmt[\"%?\", self.ir.lnks[*ln]]);\n+            wr.write_str(#fmt[\"%?\", copy self.ir.lnks[*ln]]);\n             wr.write_str(\" reads\");\n             self.write_vars(wr, ln, {|idx| self.users[idx].reader});\n             wr.write_str(\"  writes\");\n             self.write_vars(wr, ln, {|idx| self.users[idx].writer});\n             wr.write_str(\" \");\n             wr.write_str(\" precedes \");\n-            wr.write_str(self.successors[*ln].to_str());\n+            wr.write_str((copy self.successors[*ln]).to_str());\n             wr.write_str(\"]\");\n         }\n     }\n@@ -668,9 +668,9 @@ class liveness {\n \n         let mut changed = false;\n         self.indices2(ln, succ_ln) { |idx, succ_idx|\n-            changed |= copy_if_invalid(self.users[succ_idx].reader,\n+            changed |= copy_if_invalid(copy self.users[succ_idx].reader,\n                                        self.users[idx].reader);\n-            changed |= copy_if_invalid(self.users[succ_idx].writer,\n+            changed |= copy_if_invalid(copy self.users[succ_idx].writer,\n                                        self.users[idx].writer);\n             if self.users[succ_idx].used && !self.users[idx].used {\n                 self.users[idx].used = true;"}]}