{"sha": "8bcbcc454cbb48b897083c122566c0b4c2b780aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2JjYzQ1NGNiYjQ4Yjg5NzA4M2MxMjI1NjZjMGI0YzJiNzgwYWE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-14T11:07:45Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-14T11:07:45Z"}, "message": "Extract generic_params method to a HasGenericParams trait", "tree": {"sha": "cb439cc77b5445f00cda86e932c199cb69ae47d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb439cc77b5445f00cda86e932c199cb69ae47d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bcbcc454cbb48b897083c122566c0b4c2b780aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcbcc454cbb48b897083c122566c0b4c2b780aa", "html_url": "https://github.com/rust-lang/rust/commit/8bcbcc454cbb48b897083c122566c0b4c2b780aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bcbcc454cbb48b897083c122566c0b4c2b780aa/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4497e1d3eae0a72ee1e52be6ab547c67d31279c6", "html_url": "https://github.com/rust-lang/rust/commit/4497e1d3eae0a72ee1e52be6ab547c67d31279c6"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "8f1ed1086c7fdda87b416bc93d7b59d953c147b1", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     expr::{Body, BodySourceMap},\n     ty::InferenceResult,\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n-    generics::GenericParams,\n+    generics::HasGenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeAliasId},\n     impl_block::ImplBlock,\n@@ -299,10 +299,6 @@ impl Struct {\n             .map(|(id, _)| StructField { parent: (*self).into(), id })\n     }\n \n-    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params((*self).into())\n-    }\n-\n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def((*self).into(), Namespace::Types)\n     }\n@@ -363,10 +359,6 @@ impl Enum {\n             .map(|(id, _)| EnumVariant { parent: *self, id })\n     }\n \n-    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params((*self).into())\n-    }\n-\n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def((*self).into(), Namespace::Types)\n     }\n@@ -537,10 +529,6 @@ impl Function {\n         db.infer((*self).into())\n     }\n \n-    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params((*self).into())\n-    }\n-\n     /// The containing impl block, if this is a method.\n     pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n@@ -696,10 +684,6 @@ impl Trait {\n         self.id.module(db)\n     }\n \n-    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params((*self).into())\n-    }\n-\n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         self.trait_data(db).name().clone()\n     }\n@@ -737,10 +721,6 @@ impl TypeAlias {\n         self.id.source(db)\n     }\n \n-    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params((*self).into())\n-    }\n-\n     pub fn module(&self, db: &impl DefDatabase) -> Module {\n         self.id.module(db)\n     }"}, {"sha": "5625c2459f56f11b41f07bb5325333aaa3f3d2dd", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -118,3 +118,16 @@ impl From<Container> for GenericDef {\n         }\n     }\n }\n+\n+pub trait HasGenericParams {\n+    fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams>;\n+}\n+\n+impl<T> HasGenericParams for T\n+where\n+    T: Into<GenericDef>,\n+{\n+    fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams> {\n+        db.generic_params(self.into())\n+    }\n+}"}, {"sha": "a8a466e43ee839edc3df6e513c1912e10fb38da8", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -9,12 +9,13 @@ use ra_syntax::{\n \n use crate::{\n     Const, TypeAlias, Function, HirFileId,\n-    HirDatabase, DefDatabase,\n+    HirDatabase, DefDatabase, TraitRef,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n     resolve::Resolver,\n-    ty::Ty, generics::GenericParams,\n-    TraitRef, code_model_api::{Module, ModuleSource}\n+    ty::Ty,\n+    generics::HasGenericParams,\n+    code_model_api::{Module, ModuleSource}\n };\n \n #[derive(Debug, Default, PartialEq, Eq)]\n@@ -92,10 +93,6 @@ impl ImplBlock {\n         db.impls_in_module(self.module).impls[self.impl_id].items().to_vec()\n     }\n \n-    pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params((*self).into())\n-    }\n-\n     pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module().resolver(db);\n         // add generic params, if present"}, {"sha": "9292de1b564d19d1ca1bac06c0d4dc1ce4dfbbbb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -67,6 +67,7 @@ pub use self::{\n     adt::AdtDef,\n     expr::ExprScopes,\n     resolve::Resolution,\n+    generics::{GenericParams, GenericParam, HasGenericParams},\n     source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax},\n };\n "}, {"sha": "651a78fe52b704690f1d5833372a3d022b2790b1", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -20,9 +20,9 @@ use std::sync::Arc;\n use std::mem;\n \n use ena::unify::{InPlaceUnificationTable, UnifyKey, UnifyValue, NoError};\n-use ra_arena::map::ArenaMap;\n use rustc_hash::FxHashMap;\n \n+use ra_arena::map::ArenaMap;\n use test_utils::tested_by;\n \n use crate::{\n@@ -33,15 +33,18 @@ use crate::{\n     ImplItem,\n     type_ref::{TypeRef, Mutability},\n     expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat,Array, self},\n-    generics::GenericParams,\n+    generics::{GenericParams, HasGenericParams},\n     path::{GenericArgs, GenericArg},\n     adt::VariantDef,\n     resolve::{Resolver, Resolution},\n     nameres::Namespace,\n-    ty::infer::diagnostics::InferenceDiagnostic,\n     diagnostics::DiagnosticSink,\n };\n-use super::{Ty, TypableDef, Substs, primitive, op, ApplicationTy, TypeCtor, traits::{ Solution, Obligation, Guidance}, CallableDef, TraitRef};\n+use super::{\n+    Ty, TypableDef, Substs, primitive, op, ApplicationTy, TypeCtor, CallableDef, TraitRef,\n+    traits::{ Solution, Obligation, Guidance},\n+};\n+use self::diagnostics::InferenceDiagnostic;\n \n /// The entry point of type inference.\n pub fn infer(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {"}, {"sha": "7fac084ce14550dbfc4f5aa3dc614629d498d9ed", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -16,8 +16,8 @@ use crate::{\n     name::KnownName,\n     nameres::Namespace,\n     resolve::{Resolver, Resolution},\n-    path::{ PathSegment, GenericArg},\n-    generics::GenericParams,\n+    path::{PathSegment, GenericArg},\n+    generics::{GenericParams, HasGenericParams},\n     adt::VariantDef, Trait\n };\n use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef};"}, {"sha": "6b7918187a21dc3bbe5265824e26812de2edf637", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bcbcc454cbb48b897083c122566c0b4c2b780aa/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=8bcbcc454cbb48b897083c122566c0b4c2b780aa", "patch": "@@ -10,10 +10,12 @@ use crate::{\n     HirDatabase, Module, Crate, Name, Function, Trait,\n     impl_block::{ImplId, ImplBlock, ImplItem},\n     ty::{Ty, TypeCtor},\n-    nameres::CrateModuleId, resolve::Resolver, traits::TraitItem\n-\n+    nameres::CrateModuleId,\n+    resolve::Resolver,\n+    traits::TraitItem,\n+    generics::HasGenericParams,\n };\n-use super::{ TraitRef, Substs};\n+use super::{TraitRef, Substs};\n \n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}]}