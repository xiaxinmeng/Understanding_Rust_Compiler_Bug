{"sha": "06f22ba427660589c543d6f37c8c45de88d28093", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjIyYmE0Mjc2NjA1ODljNTQzZDZmMzdjOGM0NWRlODhkMjgwOTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-29T15:15:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-29T16:26:29Z"}, "message": "resolve: Simplify treatment of ambiguity errors", "tree": {"sha": "aa2eda83b39ffba4201cb06c4646fc07fb79a675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa2eda83b39ffba4201cb06c4646fc07fb79a675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f22ba427660589c543d6f37c8c45de88d28093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f22ba427660589c543d6f37c8c45de88d28093", "html_url": "https://github.com/rust-lang/rust/commit/06f22ba427660589c543d6f37c8c45de88d28093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f22ba427660589c543d6f37c8c45de88d28093/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5175f4405029cf456ca0cd44b438a7f86ffdc06", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5175f4405029cf456ca0cd44b438a7f86ffdc06", "html_url": "https://github.com/rust-lang/rust/commit/d5175f4405029cf456ca0cd44b438a7f86ffdc06"}], "stats": {"total": 140, "additions": 65, "deletions": 75}, "files": [{"sha": "a452bbf0c9d5409f53da9c508f9b7d536c4aa9ff", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -42,6 +42,7 @@ impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Module(self.0),\n+            ambiguity: None,\n             vis: self.1,\n             span: self.2,\n             expansion: self.3,\n@@ -53,6 +54,7 @@ impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Def(self.0, false),\n+            ambiguity: None,\n             vis: self.1,\n             span: self.2,\n             expansion: self.3,\n@@ -66,6 +68,7 @@ impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark, IsMacroExport)\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Def(self.0, true),\n+            ambiguity: None,\n             vis: self.1,\n             span: self.2,\n             expansion: self.3,"}, {"sha": "dd19fcfc66add8ee62ac424560030abe5872da71", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -1191,6 +1191,7 @@ impl<'a> fmt::Debug for ModuleData<'a> {\n #[derive(Clone, Debug)]\n pub struct NameBinding<'a> {\n     kind: NameBindingKind<'a>,\n+    ambiguity: Option<(&'a NameBinding<'a>, AmbiguityKind)>,\n     expansion: Mark,\n     span: Span,\n     vis: ty::Visibility,\n@@ -1215,11 +1216,6 @@ enum NameBindingKind<'a> {\n         directive: &'a ImportDirective<'a>,\n         used: Cell<bool>,\n     },\n-    Ambiguity {\n-        kind: AmbiguityKind,\n-        b1: &'a NameBinding<'a>,\n-        b2: &'a NameBinding<'a>,\n-    }\n }\n \n struct PrivacyError<'a>(Span, Ident, &'a NameBinding<'a>);\n@@ -1309,15 +1305,13 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Def(def, _) => def,\n             NameBindingKind::Module(module) => module.def().unwrap(),\n             NameBindingKind::Import { binding, .. } => binding.def(),\n-            NameBindingKind::Ambiguity { .. } => Def::Err,\n         }\n     }\n \n-    fn def_ignoring_ambiguity(&self) -> Def {\n-        match self.kind {\n-            NameBindingKind::Import { binding, .. } => binding.def_ignoring_ambiguity(),\n-            NameBindingKind::Ambiguity { b1, .. } => b1.def_ignoring_ambiguity(),\n-            _ => self.def(),\n+    fn is_ambiguity(&self) -> bool {\n+        self.ambiguity.is_some() || match self.kind {\n+            NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),\n+            _ => false,\n         }\n     }\n \n@@ -1362,7 +1356,6 @@ impl<'a> NameBinding<'a> {\n     fn is_glob_import(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Import { directive, .. } => directive.is_glob(),\n-            NameBindingKind::Ambiguity { b1, .. } => b1.is_glob_import(),\n             _ => false,\n         }\n     }\n@@ -1382,7 +1375,7 @@ impl<'a> NameBinding<'a> {\n     }\n \n     fn macro_kind(&self) -> Option<MacroKind> {\n-        match self.def_ignoring_ambiguity() {\n+        match self.def() {\n             Def::Macro(_, kind) => Some(kind),\n             Def::NonMacroAttr(..) => Some(MacroKind::Attr),\n             _ => None,\n@@ -1893,6 +1886,7 @@ impl<'a> Resolver<'a> {\n             arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err, false),\n+                ambiguity: None,\n                 expansion: Mark::root(),\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n@@ -1963,33 +1957,30 @@ impl<'a> Resolver<'a> {\n \n     fn record_use(&mut self, ident: Ident, ns: Namespace,\n                   used_binding: &'a NameBinding<'a>, is_lexical_scope: bool) {\n-        match used_binding.kind {\n-            NameBindingKind::Import { directive, binding, ref used } if !used.get() => {\n-                // Avoid marking `extern crate` items that refer to a name from extern prelude,\n-                // but not introduce it, as used if they are accessed from lexical scope.\n-                if is_lexical_scope {\n-                    if let Some(entry) = self.extern_prelude.get(&ident.modern()) {\n-                        if let Some(crate_item) = entry.extern_crate_item {\n-                            if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {\n-                                return;\n-                            }\n+        if let Some((b2, kind)) = used_binding.ambiguity {\n+            self.ambiguity_errors.push(AmbiguityError {\n+                kind, ident, b1: used_binding, b2,\n+                misc1: AmbiguityErrorMisc::None,\n+                misc2: AmbiguityErrorMisc::None,\n+            });\n+        }\n+        if let NameBindingKind::Import { directive, binding, ref used } = used_binding.kind {\n+            // Avoid marking `extern crate` items that refer to a name from extern prelude,\n+            // but not introduce it, as used if they are accessed from lexical scope.\n+            if is_lexical_scope {\n+                if let Some(entry) = self.extern_prelude.get(&ident.modern()) {\n+                    if let Some(crate_item) = entry.extern_crate_item {\n+                        if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {\n+                            return;\n                         }\n                     }\n                 }\n-                used.set(true);\n-                directive.used.set(true);\n-                self.used_imports.insert((directive.id, ns));\n-                self.add_to_glob_map(directive.id, ident);\n-                self.record_use(ident, ns, binding, false);\n-            }\n-            NameBindingKind::Ambiguity { kind, b1, b2 } => {\n-                self.ambiguity_errors.push(AmbiguityError {\n-                    kind, ident, b1, b2,\n-                    misc1: AmbiguityErrorMisc::None,\n-                    misc2: AmbiguityErrorMisc::None,\n-                });\n             }\n-            _ => {}\n+            used.set(true);\n+            directive.used.set(true);\n+            self.used_imports.insert((directive.id, ns));\n+            self.add_to_glob_map(directive.id, ident);\n+            self.record_use(ident, ns, binding, false);\n         }\n     }\n "}, {"sha": "dd1e82f467f80465cc3940bbc24d53f7607637d0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -175,6 +175,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         self.macro_map.insert(def_id, ext);\n         let binding = self.arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Def(Def::Macro(def_id, kind), false),\n+            ambiguity: None,\n             span: DUMMY_SP,\n             vis: ty::Visibility::Public,\n             expansion: Mark::root(),\n@@ -389,7 +390,7 @@ impl<'a> Resolver<'a> {\n                     .push((path[0].ident, kind, parent_scope.clone(), binding.ok()));\n             }\n \n-            binding.map(|binding| binding.def_ignoring_ambiguity())\n+            binding.map(|binding| binding.def())\n         }\n     }\n \n@@ -950,9 +951,9 @@ impl<'a> Resolver<'a> {\n                 Ok(binding) => {\n                     let initial_def = initial_binding.map(|initial_binding| {\n                         self.record_use(ident, MacroNS, initial_binding, false);\n-                        initial_binding.def_ignoring_ambiguity()\n+                        initial_binding.def()\n                     });\n-                    let def = binding.def_ignoring_ambiguity();\n+                    let def = binding.def();\n                     let seg = Segment::from_ident(ident);\n                     check_consistency(self, &[seg], ident.span, kind, initial_def, def);\n                 }"}, {"sha": "853d63a5c63c4cb42a21241325a3201070559da7", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -445,6 +445,7 @@ impl<'a> Resolver<'a> {\n                 directive,\n                 used: Cell::new(false),\n             },\n+            ambiguity: None,\n             span: directive.span,\n             vis,\n             expansion: directive.parent_scope.expansion,\n@@ -494,8 +495,8 @@ impl<'a> Resolver<'a> {\n                                                                     nonglob_binding, glob_binding));\n                         } else {\n                             resolution.binding = Some(nonglob_binding);\n-                            resolution.shadowed_glob = Some(glob_binding);\n                         }\n+                        resolution.shadowed_glob = Some(glob_binding);\n                     }\n                     (false, false) => {\n                         if let (&NameBindingKind::Def(_, true), &NameBindingKind::Def(_, true)) =\n@@ -523,13 +524,15 @@ impl<'a> Resolver<'a> {\n         })\n     }\n \n-    fn ambiguity(&self, kind: AmbiguityKind, b1: &'a NameBinding<'a>, b2: &'a NameBinding<'a>)\n-                     -> &'a NameBinding<'a> {\n+    fn ambiguity(&self, kind: AmbiguityKind,\n+                 primary_binding: &'a NameBinding<'a>, secondary_binding: &'a NameBinding<'a>)\n+                 -> &'a NameBinding<'a> {\n         self.arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Ambiguity { kind, b1, b2 },\n-            vis: if b1.vis.is_at_least(b2.vis, self) { b1.vis } else { b2.vis },\n-            span: b1.span,\n-            expansion: Mark::root(),\n+            kind: primary_binding.kind.clone(),\n+            ambiguity: Some((secondary_binding, kind)),\n+            vis: primary_binding.vis,\n+            span: primary_binding.span,\n+            expansion: primary_binding.expansion,\n         })\n     }\n \n@@ -958,9 +961,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                                                 directive.module_path.is_empty());\n                             }\n                         }\n-                        initial_binding.def_ignoring_ambiguity()\n+                        initial_binding.def()\n                     });\n-                    let def = binding.def_ignoring_ambiguity();\n+                    let def = binding.def();\n                     if let Ok(initial_def) = initial_def {\n                         if def != initial_def && this.ambiguity_errors.is_empty() {\n                             span_bug!(directive.span, \"inconsistent resolution for an import\");\n@@ -1197,10 +1200,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 None => continue,\n             };\n \n-            // Filter away \"empty import canaries\".\n-            let is_non_canary_import =\n-                binding.is_import() && binding.vis != ty::Visibility::Invisible;\n-            if is_non_canary_import || binding.is_macro_def() {\n+            // Filter away \"empty import canaries\" and ambiguous imports.\n+            let is_good_import = binding.is_import() && !binding.is_ambiguity() &&\n+                                 binding.vis != ty::Visibility::Invisible;\n+            if is_good_import || binding.is_macro_def() {\n                 let def = binding.def();\n                 if def != Def::Err {\n                     if let Some(def_id) = def.opt_def_id() {"}, {"sha": "c83db64c6437c1953ceb9eb5a0d3383ee5c9fc1a", "filename": "src/test/ui/imports/auxiliary/glob-conflict.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -7,3 +7,7 @@ mod m2 {\n \n pub use m1::*;\n pub use m2::*;\n+\n+pub mod glob {\n+    pub use *;\n+}"}, {"sha": "db6538969ec71101d2d02390d1fd4623cdb83ec1", "filename": "src/test/ui/imports/duplicate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -33,11 +33,11 @@ mod g {\n fn main() {\n     e::foo();\n     f::foo(); //~ ERROR `foo` is ambiguous\n-    g::foo(); //~ ERROR `foo` is ambiguous\n+    g::foo();\n }\n \n mod ambiguous_module_errors {\n-    pub mod m1 { pub use super::m1 as foo; }\n+    pub mod m1 { pub use super::m1 as foo; pub fn bar() {} }\n     pub mod m2 { pub use super::m2 as foo; }\n \n     use self::m1::*;"}, {"sha": "acd66826fdfb7a004bb2f72949a23c21268e838c", "filename": "src/test/ui/imports/duplicate.stderr", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -50,25 +50,6 @@ LL |     pub use b::*;\n    |             ^^^^\n    = help: consider adding an explicit import of `foo` to disambiguate\n \n-error[E0659]: `foo` is ambiguous (glob import vs glob import in the same module)\n-  --> $DIR/duplicate.rs:36:8\n-   |\n-LL |     g::foo(); //~ ERROR `foo` is ambiguous\n-   |        ^^^ ambiguous name\n-   |\n-note: `foo` could refer to the function imported here\n-  --> $DIR/duplicate.rs:29:13\n-   |\n-LL |     pub use a::*;\n-   |             ^^^^\n-   = help: consider adding an explicit import of `foo` to disambiguate\n-note: `foo` could also refer to the unresolved item imported here\n-  --> $DIR/duplicate.rs:30:13\n-   |\n-LL |     pub use f::*;\n-   |             ^^^^\n-   = help: consider adding an explicit import of `foo` to disambiguate\n-\n error[E0659]: `foo` is ambiguous (glob import vs glob import in the same module)\n   --> $DIR/duplicate.rs:49:9\n    |\n@@ -88,7 +69,7 @@ LL |     use self::m2::*;\n    |         ^^^^^^^^^^^\n    = help: consider adding an explicit import of `foo` to disambiguate\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0252, E0659.\n For more information about an error, try `rustc --explain E0252`."}, {"sha": "c8b18525d805980d460823db5d85f9f9fcad629e", "filename": "src/test/ui/imports/glob-conflict-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.rs?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -4,4 +4,5 @@ extern crate glob_conflict;\n \n fn main() {\n     glob_conflict::f(); //~ ERROR cannot find function `f` in module `glob_conflict`\n+    glob_conflict::glob::f(); //~ ERROR cannot find function `f` in module `glob_conflict::glob`\n }"}, {"sha": "f5a82ef1b3b0156c2410ecfe96e8e0b595759f92", "filename": "src/test/ui/imports/glob-conflict-cross-crate.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06f22ba427660589c543d6f37c8c45de88d28093/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-conflict-cross-crate.stderr?ref=06f22ba427660589c543d6f37c8c45de88d28093", "patch": "@@ -4,6 +4,12 @@ error[E0425]: cannot find function `f` in module `glob_conflict`\n LL |     glob_conflict::f(); //~ ERROR cannot find function `f` in module `glob_conflict`\n    |                    ^ not found in `glob_conflict`\n \n-error: aborting due to previous error\n+error[E0425]: cannot find function `f` in module `glob_conflict::glob`\n+  --> $DIR/glob-conflict-cross-crate.rs:7:26\n+   |\n+LL |     glob_conflict::glob::f(); //~ ERROR cannot find function `f` in module `glob_conflict::glob`\n+   |                          ^ not found in `glob_conflict::glob`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}