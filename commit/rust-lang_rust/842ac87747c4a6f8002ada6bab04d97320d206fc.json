{"sha": "842ac87747c4a6f8002ada6bab04d97320d206fc", "node_id": "C_kwDOAAsO6NoAKDg0MmFjODc3NDdjNGE2ZjgwMDJhZGE2YmFiMDRkOTczMjBkMjA2ZmM", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-01-14T02:20:17Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-25T02:02:39Z"}, "message": "Use bitmask trait", "tree": {"sha": "73cddf0ec8a2d65877b8dd5212bb537b281069b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73cddf0ec8a2d65877b8dd5212bb537b281069b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/842ac87747c4a6f8002ada6bab04d97320d206fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/842ac87747c4a6f8002ada6bab04d97320d206fc", "html_url": "https://github.com/rust-lang/rust/commit/842ac87747c4a6f8002ada6bab04d97320d206fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/842ac87747c4a6f8002ada6bab04d97320d206fc/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4910274686bcd144228a04d8d4d5dece4c7f5e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4910274686bcd144228a04d8d4d5dece4c7f5e3d", "html_url": "https://github.com/rust-lang/rust/commit/4910274686bcd144228a04d8d4d5dece4c7f5e3d"}], "stats": {"total": 153, "additions": 93, "deletions": 60}, "files": [{"sha": "22514728ffafca8b6c3612f6178f51ea449b5e81", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=842ac87747c4a6f8002ada6bab04d97320d206fc", "patch": "@@ -12,8 +12,10 @@\n )]\n mod mask_impl;\n \n-use crate::simd::intrinsics;\n-use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+mod to_bitmask;\n+pub use to_bitmask::ToBitMask;\n+\n+use crate::simd::{intrinsics, LaneCount, Simd, SimdElement, SupportedLaneCount};\n use core::cmp::Ordering;\n use core::{fmt, mem};\n \n@@ -216,22 +218,6 @@ where\n         }\n     }\n \n-    /// Convert this mask to a bitmask, with one bit set per lane.\n-    #[cfg(feature = \"generic_const_exprs\")]\n-    #[inline]\n-    #[must_use = \"method returns a new array and does not mutate the original value\"]\n-    pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n-        self.0.to_bitmask()\n-    }\n-\n-    /// Convert a bitmask to a mask.\n-    #[cfg(feature = \"generic_const_exprs\")]\n-    #[inline]\n-    #[must_use = \"method returns a new mask and does not mutate the original value\"]\n-    pub fn from_bitmask(bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n-        Self(mask_impl::Mask::from_bitmask(bitmask))\n-    }\n-\n     /// Returns true if any lane is set, or false otherwise.\n     #[inline]\n     #[must_use = \"method returns a new bool and does not mutate the original value\"]"}, {"sha": "f20f83ecb38e8db0a00e4d6b7139cd23aa1eacb2", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=842ac87747c4a6f8002ada6bab04d97320d206fc", "patch": "@@ -115,20 +115,14 @@ where\n         unsafe { Self(intrinsics::simd_bitmask(value), PhantomData) }\n     }\n \n-    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n-    #[must_use = \"method returns a new array and does not mutate the original value\"]\n-    pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n-        // Safety: these are the same type and we are laundering the generic\n+    pub unsafe fn to_bitmask_intrinsic<U>(self) -> U {\n         unsafe { core::mem::transmute_copy(&self.0) }\n     }\n \n-    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n-    #[must_use = \"method returns a new mask and does not mutate the original value\"]\n-    pub fn from_bitmask(bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n-        // Safety: these are the same type and we are laundering the generic\n-        Self(unsafe { core::mem::transmute_copy(&bitmask) }, PhantomData)\n+    pub unsafe fn from_bitmask_intrinsic<U>(bitmask: U) -> Self {\n+        unsafe { Self(core::mem::transmute_copy(&bitmask), PhantomData) }\n     }\n \n     #[inline]"}, {"sha": "b20b0a4b7084990c9d6766299fc9e8bbb4469198", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=842ac87747c4a6f8002ada6bab04d97320d206fc", "patch": "@@ -109,41 +109,16 @@ where\n         unsafe { Mask(intrinsics::simd_cast(self.0)) }\n     }\n \n-    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n-    #[must_use = \"method returns a new array and does not mutate the original value\"]\n-    pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n-        unsafe {\n-            let mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN] =\n-                intrinsics::simd_bitmask(self.0);\n-\n-            // There is a bug where LLVM appears to implement this operation with the wrong\n-            // bit order.\n-            // TODO fix this in a better way\n-            if cfg!(target_endian = \"big\") {\n-                for x in bitmask.as_mut() {\n-                    *x = x.reverse_bits();\n-                }\n-            }\n-\n-            bitmask\n-        }\n+    pub unsafe fn to_bitmask_intrinsic<U>(self) -> U {\n+        // Safety: caller must only return bitmask types\n+        unsafe { intrinsics::simd_bitmask(self.0) }\n     }\n \n-    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n-    #[must_use = \"method returns a new mask and does not mutate the original value\"]\n-    pub fn from_bitmask(mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n+    pub unsafe fn from_bitmask_intrinsic<U>(bitmask: U) -> Self {\n+        // Safety: caller must only pass bitmask types\n         unsafe {\n-            // There is a bug where LLVM appears to implement this operation with the wrong\n-            // bit order.\n-            // TODO fix this in a better way\n-            if cfg!(target_endian = \"big\") {\n-                for x in bitmask.as_mut() {\n-                    *x = x.reverse_bits();\n-                }\n-            }\n-\n             Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n                 bitmask,\n                 Self::splat(true).to_int(),"}, {"sha": "3a9f89f19eba020ee33e8450f7e8e598110acf29", "filename": "crates/core_simd/src/masks/to_bitmask.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs?ref=842ac87747c4a6f8002ada6bab04d97320d206fc", "patch": "@@ -0,0 +1,78 @@\n+use super::{mask_impl, Mask, MaskElement};\n+\n+/// Converts masks to and from bitmasks.\n+///\n+/// In a bitmask, each bit represents if the corresponding lane in the mask is set.\n+pub trait ToBitMask<BitMask> {\n+    /// Converts a mask to a bitmask.\n+    fn to_bitmask(self) -> BitMask;\n+\n+    /// Converts a bitmask to a mask.\n+    fn from_bitmask(bitmask: BitMask) -> Self;\n+}\n+\n+macro_rules! impl_integer_intrinsic {\n+    { $(unsafe impl ToBitMask<$int:ty> for Mask<_, $lanes:literal>)* } => {\n+        $(\n+        impl<T: MaskElement> ToBitMask<$int> for Mask<T, $lanes> {\n+            fn to_bitmask(self) -> $int {\n+                unsafe { self.0.to_bitmask_intrinsic() }\n+            }\n+\n+            fn from_bitmask(bitmask: $int) -> Self {\n+                unsafe { Self(mask_impl::Mask::from_bitmask_intrinsic(bitmask)) }\n+            }\n+        }\n+        )*\n+    }\n+}\n+\n+impl_integer_intrinsic! {\n+    unsafe impl ToBitMask<u8> for Mask<_, 8>\n+    unsafe impl ToBitMask<u16> for Mask<_, 16>\n+    unsafe impl ToBitMask<u32> for Mask<_, 32>\n+    unsafe impl ToBitMask<u64> for Mask<_, 64>\n+}\n+\n+macro_rules! impl_integer_via {\n+    { $(impl ToBitMask<$int:ty, via $via:ty> for Mask<_, $lanes:literal>)* } => {\n+        $(\n+        impl<T: MaskElement> ToBitMask<$int> for Mask<T, $lanes> {\n+            fn to_bitmask(self) -> $int {\n+                let bitmask: $via = self.to_bitmask();\n+                bitmask as _\n+            }\n+\n+            fn from_bitmask(bitmask: $int) -> Self {\n+                Self::from_bitmask(bitmask as $via)\n+            }\n+        }\n+        )*\n+    }\n+}\n+\n+impl_integer_via! {\n+    impl ToBitMask<u16, via u8> for Mask<_, 8>\n+    impl ToBitMask<u32, via u8> for Mask<_, 8>\n+    impl ToBitMask<u64, via u8> for Mask<_, 8>\n+\n+    impl ToBitMask<u32, via u16> for Mask<_, 16>\n+    impl ToBitMask<u64, via u16> for Mask<_, 16>\n+\n+    impl ToBitMask<u64, via u32> for Mask<_, 32>\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+impl_integer_via! {\n+    impl ToBitMask<usize, via u8> for Mask<_, 8>\n+    impl ToBitMask<usize, via u16> for Mask<_, 16>\n+    impl ToBitMask<usize, via u32> for Mask<_, 32>\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+impl_integer_via! {\n+    impl ToBitMask<usize, via u8> for Mask<_, 8>\n+    impl ToBitMask<usize, via u16> for Mask<_, 16>\n+    impl ToBitMask<usize, via u32> for Mask<_, 32>\n+    impl ToBitMask<usize, via u64> for Mask<_, 64>\n+}"}, {"sha": "965c0fa2635971d78eb8793013e5cfb09c3c2f81", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842ac87747c4a6f8002ada6bab04d97320d206fc/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=842ac87747c4a6f8002ada6bab04d97320d206fc", "patch": "@@ -68,16 +68,16 @@ macro_rules! test_mask_api {\n                 assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n             }\n \n-            #[cfg(feature = \"generic_const_exprs\")]\n             #[test]\n             fn roundtrip_bitmask_conversion() {\n+                use core_simd::ToBitMask;\n                 let values = [\n                     true, false, false, true, false, false, true, false,\n                     true, true, false, false, false, false, false, true,\n                 ];\n                 let mask = core_simd::Mask::<$type, 16>::from_array(values);\n-                let bitmask = mask.to_bitmask();\n-                assert_eq!(bitmask, [0b01001001, 0b10000011]);\n+                let bitmask: u16 = mask.to_bitmask();\n+                assert_eq!(bitmask, 0b1000001101001001);\n                 assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n             }\n         }"}]}