{"sha": "1292e51e73586f6d8297a3987ab3d3de425b83e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOTJlNTFlNzM1ODZmNmQ4Mjk3YTM5ODdhYjNkM2RlNDI1YjgzZTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-07T11:10:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-07T11:10:49Z"}, "message": "Improve code", "tree": {"sha": "e33743aad71398cc37ebc4a618f8e4f123dd6227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33743aad71398cc37ebc4a618f8e4f123dd6227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1292e51e73586f6d8297a3987ab3d3de425b83e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1292e51e73586f6d8297a3987ab3d3de425b83e1", "html_url": "https://github.com/rust-lang/rust/commit/1292e51e73586f6d8297a3987ab3d3de425b83e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1292e51e73586f6d8297a3987ab3d3de425b83e1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43815a508c2ed924e1616138f8a7915caa79d4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/43815a508c2ed924e1616138f8a7915caa79d4ba", "html_url": "https://github.com/rust-lang/rust/commit/43815a508c2ed924e1616138f8a7915caa79d4ba"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "59395648221c44d3199b3927a8431eb1e05b2050", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1292e51e73586f6d8297a3987ab3d3de425b83e1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1292e51e73586f6d8297a3987ab3d3de425b83e1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1292e51e73586f6d8297a3987ab3d3de425b83e1", "patch": "@@ -1440,23 +1440,23 @@ impl AllTypes {\n         }\n     }\n \n-    fn append(&mut self, item_name: String, item_type: &str) {\n+    fn append(&mut self, item_name: String, item_type: &ItemType) {\n         let mut url: Vec<_> = item_name.split(\"::\").skip(1).collect();\n         if let Some(name) = url.pop() {\n             let new_url = format!(\"{}/{}.{}.html\", url.join(\"/\"), item_type, name);\n             url.push(name);\n             let name = url.join(\"::\");\n-            match item_type {\n-                \"struct\" => self.structs.insert(ItemEntry::new(new_url, name)),\n-                \"enum\" => self.enums.insert(ItemEntry::new(new_url, name)),\n-                \"union\" => self.unions.insert(ItemEntry::new(new_url, name)),\n-                \"primitive\" => self.primitives.insert(ItemEntry::new(new_url, name)),\n-                \"trait\" => self.traits.insert(ItemEntry::new(new_url, name)),\n-                \"macro\" => self.macros.insert(ItemEntry::new(new_url, name)),\n-                \"fn\" => self.functions.insert(ItemEntry::new(new_url, name)),\n-                \"typedef\" => self.typedefs.insert(ItemEntry::new(new_url, name)),\n-                \"static\" => self.statics.insert(ItemEntry::new(new_url, name)),\n-                \"constant\" => self.constants.insert(ItemEntry::new(new_url, name)),\n+            match *item_type {\n+                ItemType::Struct => self.structs.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Enum => self.enums.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Union => self.unions.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Primitive => self.primitives.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Trait => self.traits.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Macro => self.macros.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Function => self.functions.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Typedef => self.typedefs.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Static => self.statics.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Constant => self.constants.insert(ItemEntry::new(new_url, name)),\n                 _ => true,\n             };\n         }\n@@ -1562,8 +1562,7 @@ impl Context {\n             }\n         }\n \n-        let mut w = BufWriter::new(File::create(&final_file)\n-                                        .expect(\"failed to create all.html\"));\n+        let mut w = BufWriter::new(try_err!(File::create(&final_file), &final_file));\n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n         if !root_path.ends_with('/') {\n             root_path.push('/');\n@@ -1586,10 +1585,11 @@ impl Context {\n         } else {\n             String::new()\n         };\n-        layout::render(&mut w, &self.shared.layout,\n-                       &page, &sidebar, &all,\n-                       self.shared.css_file_extension.is_some(),\n-                       &self.shared.themes).expect(\"layout rendering failed\");\n+        try_err!(layout::render(&mut w, &self.shared.layout,\n+                                &page, &sidebar, &all,\n+                                self.shared.css_file_extension.is_some(),\n+                                &self.shared.themes),\n+                 &final_file);\n         Ok(())\n     }\n \n@@ -1728,7 +1728,7 @@ impl Context {\n                 let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n                 try_err!(dst.write_all(&buf), &joint_dst);\n \n-                all.append(full_path(self, &item), item_type.css_class());\n+                all.append(full_path(self, &item), &item_type);\n                 // Redirect from a sane URL using the namespace to Rustdoc's\n                 // URL for the page.\n                 let redir_name = format!(\"{}.{}.html\", name, item_type.name_space());\n@@ -3733,9 +3733,8 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                        \"<div class='block version'>\\\n                         <p>Version {}</p>\\\n                         </div>\n-                        <a id='all-types' href='all{}.html'><p>See all {}'s items</p></a>\",\n+                        <a id='all-types' href='all.html'><p>See all {}'s items</p></a>\",\n                        version,\n-                       cx.shared.resource_suffix,\n                        it.name.as_ref().unwrap())?;\n             }\n         }"}]}