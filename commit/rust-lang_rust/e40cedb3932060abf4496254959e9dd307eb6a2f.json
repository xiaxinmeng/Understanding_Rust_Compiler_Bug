{"sha": "e40cedb3932060abf4496254959e9dd307eb6a2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MGNlZGIzOTMyMDYwYWJmNDQ5NjI1NDk1OWU5ZGQzMDdlYjZhMmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-24T20:30:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-17T21:12:48Z"}, "message": "Detect implicitly defined late bound lifetime parameters as well", "tree": {"sha": "4d36a2d969241b210e3feae9770fd8b6ff06f655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d36a2d969241b210e3feae9770fd8b6ff06f655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40cedb3932060abf4496254959e9dd307eb6a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40cedb3932060abf4496254959e9dd307eb6a2f", "html_url": "https://github.com/rust-lang/rust/commit/e40cedb3932060abf4496254959e9dd307eb6a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40cedb3932060abf4496254959e9dd307eb6a2f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca378b251329755ca94fa70221c4aa7f7af06ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca378b251329755ca94fa70221c4aa7f7af06ac", "html_url": "https://github.com/rust-lang/rust/commit/7ca378b251329755ca94fa70221c4aa7f7af06ac"}], "stats": {"total": 205, "additions": 171, "deletions": 34}, "files": [{"sha": "32ccfc511fc4bc38c572a1a52edd1db7f62028f0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e40cedb3932060abf4496254959e9dd307eb6a2f", "patch": "@@ -772,6 +772,92 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.alloc_trait_def(def)\n }\n \n+fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                    node: hir_map::Node<'tcx>)\n+                                    -> bool {\n+    struct LateBoundRegionsDetector<'a, 'tcx: 'a> {\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        binder_depth: usize,\n+        has_late_bound_regions: bool,\n+    }\n+\n+    impl<'a, 'tcx> Visitor<'tcx> for LateBoundRegionsDetector<'a, 'tcx> {\n+        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+            NestedVisitorMap::None\n+        }\n+\n+        fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n+            if self.has_late_bound_regions { return }\n+            match ty.node {\n+                hir::TyBareFn(..) => {\n+                    self.binder_depth += 1;\n+                    intravisit::walk_ty(self, ty);\n+                    self.binder_depth -= 1;\n+                }\n+                _ => intravisit::walk_ty(self, ty)\n+            }\n+        }\n+\n+        fn visit_poly_trait_ref(&mut self,\n+                                tr: &'tcx hir::PolyTraitRef,\n+                                m: hir::TraitBoundModifier) {\n+            if self.has_late_bound_regions { return }\n+            self.binder_depth += 1;\n+            intravisit::walk_poly_trait_ref(self, tr, m);\n+            self.binder_depth -= 1;\n+        }\n+\n+        fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n+            if self.has_late_bound_regions { return }\n+\n+            match self.tcx.named_region_map.defs.get(&lt.id).cloned() {\n+                Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n+                _ => self.has_late_bound_regions = true\n+            }\n+        }\n+    }\n+\n+    fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                        generics: &'tcx hir::Generics,\n+                                        decl: &'tcx hir::FnDecl)\n+                                        -> bool {\n+        let mut visitor = LateBoundRegionsDetector {\n+            tcx, binder_depth: 0, has_late_bound_regions: false\n+        };\n+        for lifetime in &generics.lifetimes {\n+            if tcx.named_region_map.late_bound.contains(&lifetime.lifetime.id) {\n+                return true;\n+            }\n+        }\n+        visitor.visit_fn_decl(decl);\n+        visitor.has_late_bound_regions\n+    }\n+\n+    match node {\n+        hir_map::NodeTraitItem(item) => match item.node {\n+            hir::TraitItemKind::Method(ref sig, _) =>\n+                has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n+            _ => false,\n+        },\n+        hir_map::NodeImplItem(item) => match item.node {\n+            hir::ImplItemKind::Method(ref sig, _) =>\n+                has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n+            _ => false,\n+        },\n+        hir_map::NodeForeignItem(item) => match item.node {\n+            hir::ForeignItemFn(ref fn_decl, _, ref generics) =>\n+                has_late_bound_regions(tcx, generics, fn_decl),\n+            _ => false,\n+        },\n+        hir_map::NodeItem(item) => match item.node {\n+            hir::ItemFn(ref fn_decl, .., ref generics, _) =>\n+                has_late_bound_regions(tcx, generics, fn_decl),\n+            _ => false,\n+        },\n+        _ => false\n+    }\n+}\n+\n fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                          def_id: DefId)\n                          -> &'tcx ty::Generics {\n@@ -876,13 +962,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let has_self = opt_self.is_some();\n     let mut parent_has_self = false;\n-    let mut parent_has_late_bound_regions = false;\n     let mut own_start = has_self as u32;\n     let (parent_regions, parent_types) = parent_def_id.map_or((0, 0), |def_id| {\n         let generics = tcx.generics_of(def_id);\n         assert_eq!(has_self, false);\n         parent_has_self = generics.has_self;\n-        parent_has_late_bound_regions = generics.has_late_bound_regions;\n         own_start = generics.count() as u32;\n         (generics.parent_regions + generics.regions.len() as u32,\n             generics.parent_types + generics.types.len() as u32)\n@@ -900,7 +984,6 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }).collect::<Vec<_>>();\n \n-    let has_late_bound_regions = regions.len() != ast_generics.lifetimes.len();\n     let object_lifetime_defaults =\n         tcx.named_region_map.object_lifetime_defaults.get(&node_id);\n \n@@ -963,7 +1046,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         types: types,\n         type_param_to_index: type_param_to_index,\n         has_self: has_self || parent_has_self,\n-        has_late_bound_regions: has_late_bound_regions || parent_has_late_bound_regions,\n+        has_late_bound_regions: has_late_bound_regions(tcx, node),\n     })\n }\n "}, {"sha": "50db9707355f4e69c2321fa639fbf9d959ae7eba", "filename": "src/test/compile-fail/constructor-lifetime-args.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fcompile-fail%2Fconstructor-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fcompile-fail%2Fconstructor-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconstructor-lifetime-args.rs?ref=e40cedb3932060abf4496254959e9dd307eb6a2f", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// All lifetime parameters in struct constructors are currently considered early bound,\n+// i.e. `S::<ARGS>` is interpreted kinda like an associated item `S::<ARGS>::ctor`.\n+// This behavior is a bit weird, because if equivalent constructor were written manually\n+// it would get late bound lifetime parameters.\n+// Variant constructors behave in the same way, lifetime parameters are considered\n+// belonging to the enum and being early bound.\n+// https://github.com/rust-lang/rust/issues/30904\n+\n+struct S<'a, 'b>(&'a u8, &'b u8);\n+enum E<'a, 'b> {\n+    V(&'a u8),\n+    U(&'b u8),\n+}\n+\n+fn main() {\n+    S(&0, &0); // OK\n+    S::<'static>(&0, &0);\n+    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    S::<'static, 'static, 'static>(&0, &0);\n+    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    E::V(&0); // OK\n+    E::V::<'static>(&0);\n+    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    E::V::<'static, 'static, 'static>(&0);\n+    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+}"}, {"sha": "9bf34de92fe8d33d6780500c63eb1dce98aebb5f", "filename": "src/test/compile-fail/method-call-lifetime-args-lint.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs?ref=e40cedb3932060abf4496254959e9dd307eb6a2f", "patch": "@@ -42,25 +42,25 @@ fn method_call() {\n     //~| WARN this was previously accepted\n \n     S.late_implicit(&0, &0); // OK\n-    // S.late_implicit::<'static>(&0, &0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n-    // S.late_implicit::<'static, 'static>(&0, &0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n-    // S.late_implicit::<'static, 'static, 'static>(&0, &0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n+    S.late_implicit::<'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_implicit::<'static, 'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_implicit::<'static, 'static, 'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n     S.late_implicit_early(&0); // OK\n     S.late_implicit_early::<'static>(&0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n-    // S.late_implicit_early::<'static, 'static>(&0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n-    // S.late_implicit_early::<'static, 'static, 'static>(&0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_implicit_early::<'static, 'static>(&0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_implicit_early::<'static, 'static, 'static>(&0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n }\n \n fn ufcs() {\n@@ -69,8 +69,8 @@ fn ufcs() {\n     //~| WARN this was previously accepted\n \n     S::late_implicit_early::<'static>(S, &0);\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n-    //FIXME WARN this was previously accepted\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n }\n \n fn main() {}"}, {"sha": "c29701804a741b56cb7df3d3325d126c4c7e1fc0", "filename": "src/test/compile-fail/method-call-lifetime-args.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs?ref=e40cedb3932060abf4496254959e9dd307eb6a2f", "patch": "@@ -16,7 +16,17 @@ impl S {\n     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n+    fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n+    fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n     fn life_and_type<'a, T>(self) -> &'a T { loop {} }\n+\n+    // 'late lifetimes here belong to nested types not to the tested functions.\n+    fn early_tricky_explicit<'a>(_: for<'late> fn(&'late u8),\n+                                 _: Box<for<'late> Fn(&'late u8)>)\n+                                 -> &'a u8 { loop {} }\n+    fn early_tricky_implicit<'a>(_: fn(&u8),\n+                                 _: Box<Fn(&u8)>)\n+                                 -> &'a u8 { loop {} }\n }\n \n fn method_call() {\n@@ -46,21 +56,26 @@ fn ufcs() {\n \n     S::late_implicit(S, &0, &0); // OK\n     S::late_implicit::<'static>(S, &0, &0);\n-    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n     S::late_implicit::<'static, 'static>(S, &0, &0);\n-    //~^ ERROR expected at most 0 lifetime parameters, found 2 lifetime parameters\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n     S::late_implicit::<'static, 'static, 'static>(S, &0, &0);\n-    //~^ ERROR expected at most 0 lifetime parameters, found 3 lifetime parameters\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n     S::late_implicit_early(S, &0); // OK\n     S::late_implicit_early::<'static, 'static>(S, &0);\n-    //~^ ERROR expected at most 1 lifetime parameter, found 2 lifetime parameters\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n     S::late_implicit_early::<'static, 'static, 'static>(S, &0);\n-    //~^ ERROR expected at most 1 lifetime parameter, found 3 lifetime parameters\n-    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit_self_early(&S); // OK\n+    S::late_implicit_self_early::<'static, 'static>(&S);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit_self_early::<'static, 'static, 'static>(&S);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_unused_early(S); // OK\n+    S::late_unused_early::<'static, 'static>(S);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_unused_early::<'static, 'static, 'static>(S);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n \n     S::early(S); // OK\n     S::early::<'static>(S);\n@@ -70,6 +85,9 @@ fn ufcs() {\n     let _: &u8 = S::life_and_type::<'static>(S);\n     S::life_and_type::<u8>(S);\n     S::life_and_type::<'static, u8>(S);\n+\n+    S::early_tricky_explicit::<'static>(loop {}, loop {}); // OK\n+    S::early_tricky_implicit::<'static>(loop {}, loop {}); // OK\n }\n \n fn main() {}"}, {"sha": "daddc0c9f5459a3af5c09c80158be76b96651db5", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40cedb3932060abf4496254959e9dd307eb6a2f/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=e40cedb3932060abf4496254959e9dd307eb6a2f", "patch": "@@ -369,7 +369,7 @@ impl Foo {\n impl Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }"}]}