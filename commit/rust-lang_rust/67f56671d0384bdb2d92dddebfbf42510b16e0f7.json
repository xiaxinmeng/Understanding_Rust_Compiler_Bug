{"sha": "67f56671d0384bdb2d92dddebfbf42510b16e0f7", "node_id": "C_kwDOAAsO6NoAKDY3ZjU2NjcxZDAzODRiZGIyZDkyZGRkZWJmYmY0MjUxMGIxNmUwZjc", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-08T09:28:12Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T17:44:56Z"}, "message": "Use Term in ProjectionPredicate\n\nProjectionPredicate should be able to handle both associated types and consts so this adds the\nfirst step of that. It mainly just pipes types all the way down, not entirely sure how to handle\nconsts, but hopefully that'll come with time.", "tree": {"sha": "40e044743da8fab20f86e317f65f1276e78343c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40e044743da8fab20f86e317f65f1276e78343c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f56671d0384bdb2d92dddebfbf42510b16e0f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f56671d0384bdb2d92dddebfbf42510b16e0f7", "html_url": "https://github.com/rust-lang/rust/commit/67f56671d0384bdb2d92dddebfbf42510b16e0f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f56671d0384bdb2d92dddebfbf42510b16e0f7/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "html_url": "https://github.com/rust-lang/rust/commit/fb57b7518d207caa99bdd99f4dab2a7d3902a83a"}], "stats": {"total": 533, "additions": 274, "deletions": 259}, "files": [{"sha": "529e17b158fc83b8e8bc867a212320be6470b6b2", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -335,7 +335,7 @@ dependencies = [\n  \"cargo-test-macro\",\n  \"cargo-test-support\",\n  \"cargo-util\",\n- \"clap 3.0.6\",\n+ \"clap\",\n  \"crates-io\",\n  \"crossbeam-utils\",\n  \"curl\",\n@@ -615,28 +615,13 @@ dependencies = [\n  \"ansi_term 0.12.1\",\n  \"atty\",\n  \"bitflags\",\n- \"strsim 0.8.0\",\n- \"textwrap 0.11.0\",\n+ \"strsim\",\n+ \"textwrap\",\n  \"unicode-width\",\n  \"vec_map\",\n  \"yaml-rust 0.3.5\",\n ]\n \n-[[package]]\n-name = \"clap\"\n-version = \"3.0.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1957aa4a5fb388f0a0a73ce7556c5b42025b874e5cdc2c670775e346e97adec0\"\n-dependencies = [\n- \"atty\",\n- \"bitflags\",\n- \"indexmap\",\n- \"os_str_bytes\",\n- \"strsim 0.10.0\",\n- \"termcolor\",\n- \"textwrap 0.14.2\",\n-]\n-\n [[package]]\n name = \"clippy\"\n version = \"0.1.60\"\n@@ -669,7 +654,7 @@ version = \"0.0.1\"\n dependencies = [\n  \"bytecount\",\n  \"cargo_metadata 0.14.0\",\n- \"clap 2.34.0\",\n+ \"clap\",\n  \"indoc\",\n  \"itertools 0.10.1\",\n  \"opener\",\n@@ -1751,7 +1736,7 @@ name = \"installer\"\n version = \"0.0.0\"\n dependencies = [\n  \"anyhow\",\n- \"clap 2.34.0\",\n+ \"clap\",\n  \"flate2\",\n  \"lazy_static\",\n  \"num_cpus\",\n@@ -2190,7 +2175,7 @@ dependencies = [\n  \"ammonia\",\n  \"anyhow\",\n  \"chrono\",\n- \"clap 2.34.0\",\n+ \"clap\",\n  \"elasticlunr-rs\",\n  \"env_logger 0.7.1\",\n  \"handlebars\",\n@@ -2521,15 +2506,6 @@ dependencies = [\n  \"winapi\",\n ]\n \n-[[package]]\n-name = \"os_str_bytes\"\n-version = \"6.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64\"\n-dependencies = [\n- \"memchr\",\n-]\n-\n [[package]]\n name = \"output_vt100\"\n version = \"0.1.2\"\n@@ -2934,7 +2910,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b0b4b5faaf07040474e8af74a9e19ff167d5d204df5db5c5c765edecfb900358\"\n dependencies = [\n  \"bitflags\",\n- \"clap 2.34.0\",\n+ \"clap\",\n  \"derive_more\",\n  \"env_logger 0.7.1\",\n  \"humantime 2.0.1\",\n@@ -3282,7 +3258,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.34.0\",\n+ \"clap\",\n  \"env_logger 0.7.1\",\n  \"mdbook\",\n ]\n@@ -4898,19 +4874,13 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \n-[[package]]\n-name = \"strsim\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n-\n [[package]]\n name = \"structopt\"\n version = \"0.3.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"40b9788f4202aa75c240ecc9c15c65185e6a39ccdeb0fd5d008b98825464c87c\"\n dependencies = [\n- \"clap 2.34.0\",\n+ \"clap\",\n  \"lazy_static\",\n  \"structopt-derive\",\n ]\n@@ -5081,12 +5051,6 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n-[[package]]\n-name = \"textwrap\"\n-version = \"0.14.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0066c8d12af8b5acd21e00547c3797fde4e8677254a7ee429176ccebbe93dd80\"\n-\n [[package]]\n name = \"thiserror\"\n version = \"1.0.30\""}, {"sha": "b2965774e2a6e85a4253f5cdd7ea47c926469afe", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -997,10 +997,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         let kind = match constraint.kind {\n-            AssocConstraintKind::Equality { ref term } => match term {\n-                Term::Ty(ref ty) => hir::TypeBindingKind::Equality { ty: self.lower_ty(ty, itctx) },\n-                Term::Const(ref c) => hir::TypeBindingKind::Const { c: self.lower_anon_const(c) },\n-            },\n+            AssocConstraintKind::Equality { ref term } => {\n+                let term = match term {\n+                    Term::Ty(ref ty) => self.lower_ty(ty, itctx).into(),\n+                    Term::Const(ref c) => self.lower_anon_const(c).into(),\n+                };\n+                hir::TypeBindingKind::Equality { term }\n+            }\n             AssocConstraintKind::Bound { ref bounds } => {\n                 let mut capturable_lifetimes;\n                 let mut parent_def_id = self.current_hir_id_owner;\n@@ -1079,7 +1082,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             itctx,\n                         );\n \n-                        hir::TypeBindingKind::Equality { ty }\n+                        hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n                 } else {\n                     // Desugar `AssocTy: Bounds` into a type binding where the"}, {"sha": "79262235cd9f250584e1556c7145a415eb2cf982", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -420,7 +420,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         ty: &'hir hir::Ty<'hir>,\n     ) -> hir::TypeBinding<'hir> {\n         let ident = Ident::with_dummy_span(hir::FN_OUTPUT_NAME);\n-        let kind = hir::TypeBindingKind::Equality { ty };\n+        let kind = hir::TypeBindingKind::Equality { term: ty.into() };\n         let args = arena_vec![self;];\n         let bindings = arena_vec![self;];\n         let gen_args = self.arena.alloc(hir::GenericArgs {"}, {"sha": "17941058ed6f0ce7e21e58da0ec86c322446c361", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -964,9 +964,7 @@ impl<'a> State<'a> {\n                     Term::Const(c) => self.print_expr_anon_const(c),\n                 }\n             }\n-            ast::AssocConstraintKind::Bound { bounds } => {\n-                self.print_type_bounds(\":\", &*bounds);\n-            }\n+            ast::AssocConstraintKind::Bound { bounds } => self.print_type_bounds(\":\", &*bounds),\n         }\n     }\n "}, {"sha": "01cc72121c7d4d5cfc9ad03787ee2f363578c12b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -779,7 +779,10 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                                     [\n                                         hir::TypeBinding {\n                                             ident: Ident { name: sym::Output, .. },\n-                                            kind: hir::TypeBindingKind::Equality { ty },\n+                                            kind:\n+                                                hir::TypeBindingKind::Equality {\n+                                                    term: hir::Term::Ty(ty),\n+                                                },\n                                             ..\n                                         },\n                                     ],"}, {"sha": "43aa0ae265a095eacc0a7ed3a67175f3b580d950", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -377,7 +377,7 @@ impl GenericArgs<'_> {\n             GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err),\n             _ => false,\n         }) || self.bindings.iter().any(|arg| match arg.kind {\n-            TypeBindingKind::Equality { ty } => matches!(ty.kind, TyKind::Err),\n+            TypeBindingKind::Equality { term: Term::Ty(ty) } => matches!(ty.kind, TyKind::Err),\n             _ => false,\n         })\n     }\n@@ -2129,21 +2129,37 @@ pub struct TypeBinding<'hir> {\n     pub span: Span,\n }\n \n+#[derive(Debug, HashStable_Generic)]\n+pub enum Term<'hir> {\n+    Ty(&'hir Ty<'hir>),\n+    Const(AnonConst),\n+}\n+\n+impl<'hir> From<&'hir Ty<'hir>> for Term<'hir> {\n+    fn from(ty: &'hir Ty<'hir>) -> Self {\n+        Term::Ty(ty)\n+    }\n+}\n+\n+impl<'hir> From<AnonConst> for Term<'hir> {\n+    fn from(c: AnonConst) -> Self {\n+        Term::Const(c)\n+    }\n+}\n+\n // Represents the two kinds of type bindings.\n #[derive(Debug, HashStable_Generic)]\n pub enum TypeBindingKind<'hir> {\n     /// E.g., `Foo<Bar: Send>`.\n     Constraint { bounds: &'hir [GenericBound<'hir>] },\n-    /// E.g., `Foo<Bar = ()>`.\n-    Equality { ty: &'hir Ty<'hir> },\n-    /// E.g., `Foo<N = 3>`.\n-    Const { c: AnonConst },\n+    /// E.g., `Foo<Bar = ()>`, `Foo<Bar = ()>`\n+    Equality { term: Term<'hir> },\n }\n \n impl TypeBinding<'_> {\n     pub fn ty(&self) -> &Ty<'_> {\n         match self.kind {\n-            TypeBindingKind::Equality { ref ty } => ty,\n+            TypeBindingKind::Equality { term: Term::Ty(ref ty) } => ty,\n             _ => panic!(\"expected equality type binding for parenthesized generic args\"),\n         }\n     }"}, {"sha": "a219dad7b3d226399ad644a1595a92e750cfa5a1", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -827,11 +827,11 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n     visitor.visit_ident(type_binding.ident);\n     visitor.visit_generic_args(type_binding.span, type_binding.gen_args);\n     match type_binding.kind {\n-        TypeBindingKind::Equality { ref ty } => visitor.visit_ty(ty),\n-        TypeBindingKind::Const { ref c } => visitor.visit_anon_const(c),\n-        TypeBindingKind::Constraint { bounds } => {\n-            walk_list!(visitor, visit_param_bound, bounds);\n-        }\n+        TypeBindingKind::Equality { ref term } => match term {\n+            Term::Ty(ref ty) => visitor.visit_ty(ty),\n+            Term::Const(ref c) => visitor.visit_anon_const(c),\n+        },\n+        TypeBindingKind::Constraint { bounds } => walk_list!(visitor, visit_param_bound, bounds),\n     }\n }\n "}, {"sha": "a301c5e34565cabd107e279828293ab846d2c690", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -6,7 +6,7 @@ use rustc_ast_pretty::pp::Breaks::{Consistent, Inconsistent};\n use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n use rustc_hir as hir;\n-use rustc_hir::{GenericArg, GenericParam, GenericParamKind, Node};\n+use rustc_hir::{GenericArg, GenericParam, GenericParamKind, Node, Term};\n use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, Ident, IdentPrinter, Symbol};\n@@ -1752,13 +1752,12 @@ impl<'a> State<'a> {\n                 self.print_generic_args(binding.gen_args, false, false);\n                 self.space();\n                 match generic_args.bindings[0].kind {\n-                    hir::TypeBindingKind::Equality { ref ty } => {\n+                    hir::TypeBindingKind::Equality { ref term } => {\n                         self.word_space(\"=\");\n-                        self.print_type(ty);\n-                    }\n-                    hir::TypeBindingKind::Const { ref c } => {\n-                        self.word_space(\"=\");\n-                        self.print_anon_const(c);\n+                        match term {\n+                            Term::Ty(ref ty) => self.print_type(ty),\n+                            Term::Const(ref c) => self.print_anon_const(c),\n+                        }\n                     }\n                     hir::TypeBindingKind::Constraint { bounds } => {\n                         self.print_bounds(\":\", bounds);"}, {"sha": "f1e99faba01bd1fa99d32efb0364f2cdaa99dff9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -69,7 +69,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    Region, Ty, TyCtxt, TypeFoldable,\n+    Region, Term, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::{sym, BytePos, DesugaringKind, MultiSpan, Pos, Span};\n use rustc_target::spec::abi;\n@@ -1780,7 +1780,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 {\n                     if projection_predicate.projection_ty.item_def_id == item_def_id {\n                         // We don't account for multiple `Future::Output = Ty` contraints.\n-                        return Some(projection_predicate.ty);\n+                        match projection_predicate.term {\n+                            Term::Ty(ty) => return Some(ty),\n+                            // Can return None, but not sure if that makes sense?\n+                            Term::Const(_c) => todo!(),\n+                        }\n                     }\n                 }\n             }"}, {"sha": "3fa71d1a3d8171204636aade006a54da3fd1bd14", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -122,8 +122,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             {\n                                 for type_binding in generic_args.bindings.iter() {\n                                     if type_binding.ident.name == rustc_span::sym::Output {\n-                                        if let hir::TypeBindingKind::Equality { ty } =\n-                                            type_binding.kind\n+                                        if let hir::TypeBindingKind::Equality {\n+                                            term: hir::Term::Ty(ty),\n+                                        } = type_binding.kind\n                                         {\n                                             return Some(ty);\n                                         }"}, {"sha": "39339da9a0bfcca1146fe26e564c667afdac38f5", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -7,7 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, OpaqueTypeKey, Term, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::Span;\n \n use std::ops::ControlFlow;\n@@ -584,9 +584,13 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             debug!(?predicate);\n \n             if let ty::PredicateKind::Projection(projection) = predicate.kind().skip_binder() {\n-                if projection.ty.references_error() {\n-                    // No point on adding these obligations since there's a type error involved.\n-                    return tcx.ty_error();\n+                if let Term::Ty(ty) = projection.term {\n+                    if ty.references_error() {\n+                        // No point on adding these obligations since there's a type error involved.\n+                        return tcx.ty_error();\n+                    }\n+                } else {\n+                    todo!();\n                 }\n             }\n "}, {"sha": "b45a6514d79347e05f8e1e47320901227486c2c1", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -26,7 +26,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             kind: TypeVariableOriginKind::NormalizeProjectionType,\n             span: self.tcx.def_span(def_id),\n         });\n-        let projection = ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, ty: ty_var });\n+        let projection =\n+            ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, term: ty_var.into() });\n         let obligation = Obligation::with_depth(\n             cause,\n             recursion_depth,"}, {"sha": "74c8d7b7777227701aa4d106ed69bd58e526b55a", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, InferConst, Ty, TypeFlags};\n+use crate::ty::{self, InferConst, Term, Ty, TypeFlags};\n use std::slice;\n \n #[derive(Debug)]\n@@ -241,9 +241,12 @@ impl FlagComputation {\n                 self.add_ty(a);\n                 self.add_ty(b);\n             }\n-            ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {\n+            ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {\n                 self.add_projection_ty(projection_ty);\n-                self.add_ty(ty);\n+                match term {\n+                    Term::Ty(ty) => self.add_ty(ty),\n+                    Term::Const(_c) => todo!(),\n+                }\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n                 self.add_substs(slice::from_ref(&arg));"}, {"sha": "f1851150e38e82ad66c384e7c07444e9ca1ac596", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -484,7 +484,7 @@ crate struct PredicateInner<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PredicateInner<'_>, 48);\n+static_assert_size!(PredicateInner<'_>, 56);\n \n #[derive(Clone, Copy, Lift)]\n pub struct Predicate<'tcx> {\n@@ -795,11 +795,35 @@ pub struct CoercePredicate<'tcx> {\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n+#[derive(HashStable, TypeFoldable)]\n+pub enum Term<'tcx> {\n+    Ty(Ty<'tcx>),\n+    Const(&'tcx Const<'tcx>),\n+}\n+\n+impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {\n+    fn from(ty: Ty<'tcx>) -> Self {\n+        Term::Ty(ty)\n+    }\n+}\n+\n+impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {\n+    fn from(c: &'tcx Const<'tcx>) -> Self {\n+        Term::Const(c)\n+    }\n+}\n+\n+impl<'tcx> Term<'tcx> {\n+    pub fn ty(&self) -> Ty<'tcx> {\n+        if let Term::Ty(ty) = self { ty } else { panic!(\"Expected type\") }\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n /// 1. `T: TraitRef<..., Item = Type>`\n-/// - Or `T: TraitRef<..., Item = Const>`\n /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)\n ///\n /// In particular, form #1 is \"desugared\" to the combination of a\n@@ -812,26 +836,7 @@ pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n #[derive(HashStable, TypeFoldable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n-    pub ty: Ty<'tcx>,\n-}\n-\n-/// This kind of predicate has no *direct* correspondent in the\n-/// syntax, but it roughly corresponds to the syntactic forms:\n-///\n-/// 1. `T: TraitRef<..., Item = Const>`\n-/// 2. `<T as TraitRef<...>>::Item == Const` (NYI)\n-///\n-/// In particular, form #1 is \"desugared\" to the combination of a\n-/// normal trait predicate (`T: TraitRef<...>`) and one of these\n-/// predicates. Form #2 is a broader form in that it also permits\n-/// equality between arbitrary types. Processing an instance of\n-/// Form #2 eventually yields one of these `ProjectionPredicate`\n-/// instances to normalize the LHS.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug)]\n-#[derive(HashStable, TypeFoldable)]\n-pub struct ConstPredicate<'tcx> {\n-    pub projection: ProjectionTy<'tcx>,\n-    pub c: &'tcx Const<'tcx>,\n+    pub term: Term<'tcx>,\n }\n \n pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;\n@@ -857,7 +862,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     }\n \n     pub fn ty(&self) -> Binder<'tcx, Ty<'tcx>> {\n-        self.map_bound(|predicate| predicate.ty)\n+        self.map_bound(|predicate| if let Term::Ty(ty) = predicate.term { ty } else { todo!() })\n     }\n \n     /// The `DefId` of the `TraitItem` for the associated type."}, {"sha": "8c07f154637e398148af165e52412eb0389f51cf", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -2499,7 +2499,14 @@ define_print_and_forward_display! {\n     }\n \n     ty::ProjectionPredicate<'tcx> {\n-        p!(print(self.projection_ty), \" == \", print(self.ty))\n+        p!(print(self.projection_ty), \" == \", print(self.term))\n+    }\n+\n+    ty::Term<'tcx> {\n+      match self {\n+        ty::Term::Ty(ty) => p!(print(ty)),\n+        ty::Term::Const(c) => p!(print(c)),\n+      }\n     }\n \n     ty::ProjectionTy<'tcx> {"}, {"sha": "851c4592f4fad8594e6fa4f85064bfb1ea9dba7f", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -7,7 +7,7 @@\n use crate::mir::interpret::{get_slice_bytes, ConstValue, GlobalAlloc, Scalar};\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, Term, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n@@ -839,10 +839,13 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {\n         a: ty::ProjectionPredicate<'tcx>,\n         b: ty::ProjectionPredicate<'tcx>,\n     ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {\n-        Ok(ty::ProjectionPredicate {\n-            projection_ty: relation.relate(a.projection_ty, b.projection_ty)?,\n-            ty: relation.relate(a.ty, b.ty)?,\n-        })\n+        match (a.term, b.term) {\n+            (Term::Ty(a_ty), Term::Ty(b_ty)) => Ok(ty::ProjectionPredicate {\n+                projection_ty: relation.relate(a.projection_ty, b.projection_ty)?,\n+                term: relation.relate(a_ty, b_ty)?.into(),\n+            }),\n+            _ => todo!(),\n+        }\n     }\n }\n "}, {"sha": "3cbea92ae67149dbe95eaee5d44972920c53107c", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -6,7 +6,7 @@ use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n-use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n+use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n@@ -158,7 +158,7 @@ impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> {\n \n impl<'tcx> fmt::Debug for ty::ProjectionPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"ProjectionPredicate({:?}, {:?})\", self.projection_ty, self.ty)\n+        write!(f, \"ProjectionPredicate({:?}, {:?})\", self.projection_ty, self.term)\n     }\n }\n \n@@ -356,6 +356,16 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for Term<'a> {\n+    type Lifted = ty::Term<'tcx>;\n+    fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n+        Some(match self {\n+            Term::Ty(ty) => Term::Ty(tcx.lift(ty)?),\n+            Term::Const(c) => Term::Const(tcx.lift(c)?),\n+        })\n+    }\n+}\n+\n impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     type Lifted = ty::TraitPredicate<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ty::TraitPredicate<'tcx>> {\n@@ -403,8 +413,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n     type Lifted = ty::ProjectionPredicate<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ty::ProjectionPredicate<'tcx>> {\n-        tcx.lift((self.projection_ty, self.ty))\n-            .map(|(projection_ty, ty)| ty::ProjectionPredicate { projection_ty, ty })\n+        tcx.lift((self.projection_ty, self.term))\n+            .map(|(projection_ty, term)| ty::ProjectionPredicate { projection_ty, term })\n     }\n }\n "}, {"sha": "50d0862905bbf38a05a45bcb414cbbbf05ffc527", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -8,7 +8,7 @@ use crate::infer::canonical::Canonical;\n use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::{self, *};\n-use crate::ty::{self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable};\n+use crate::ty::{self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable};\n use crate::ty::{DelaySpanBugEmitted, List, ParamEnv, TyS};\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n@@ -1570,7 +1570,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n                 item_def_id: self.item_def_id,\n                 substs: tcx.mk_substs_trait(self_ty, self.substs),\n             },\n-            ty: self.ty,\n+            term: self.ty.into(),\n         }\n     }\n \n@@ -1580,11 +1580,16 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     ) -> Self {\n         // Assert there is a Self.\n         projection_predicate.projection_ty.substs.type_at(0);\n+        let ty = if let Term::Ty(ty) = projection_predicate.term {\n+            ty\n+        } else {\n+            todo!();\n+        };\n \n         Self {\n             item_def_id: projection_predicate.projection_ty.item_def_id,\n             substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),\n-            ty: projection_predicate.ty,\n+            ty,\n         }\n     }\n }"}, {"sha": "531cac1f57e5649826c6e035ea76652fbff3b47e", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -503,17 +503,15 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, AssocConstraintKind> {\n         let arg = self.parse_generic_arg(None)?;\n         let span = ident.span.to(self.prev_token.span);\n-        let ty = match arg {\n-            Some(GenericArg::Type(ty)) => ty,\n-            Some(GenericArg::Const(c)) => {\n-                return Ok(AssocConstraintKind::Equality { term: c.into() });\n-            }\n+        let term = match arg {\n+            Some(GenericArg::Type(ty)) => ty.into(),\n+            Some(GenericArg::Const(c)) => c.into(),\n             Some(GenericArg::Lifetime(lt)) => {\n                 self.struct_span_err(span, \"associated lifetimes are not supported\")\n                     .span_label(lt.ident.span, \"the lifetime is given here\")\n                     .help(\"if you meant to specify a trait object, write `dyn Trait + 'lifetime`\")\n                     .emit();\n-                self.mk_ty(span, ast::TyKind::Err)\n+                self.mk_ty(span, ast::TyKind::Err).into()\n             }\n             None => {\n                 let after_eq = eq.shrink_to_hi();\n@@ -542,7 +540,7 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             }\n         };\n-        Ok(AssocConstraintKind::Equality { term: ty.into() })\n+        Ok(AssocConstraintKind::Equality { term })\n     }\n \n     /// We do not permit arbitrary expressions as const arguments. They must be one of:"}, {"sha": "dc432905b1c7c448dd1c59830922b7604cbab0ab", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -127,7 +127,8 @@ where\n                 constness: _,\n                 polarity: _,\n             }) => self.visit_trait(trait_ref),\n-            ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {\n+            ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {\n+                let ty = term.ty();\n                 ty.visit_with(self)?;\n                 self.visit_projection_ty(projection_ty)\n             }\n@@ -1185,7 +1186,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n             }\n \n             for (poly_predicate, _) in bounds.projection_bounds {\n-                if self.visit(poly_predicate.skip_binder().ty).is_break()\n+                if self.visit(poly_predicate.skip_binder().term.ty()).is_break()\n                     || self\n                         .visit_projection_ty(poly_predicate.skip_binder().projection_ty)\n                         .is_break()"}, {"sha": "85135383b8062a3ba9c43b15019c30d1af683d9b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1304,7 +1304,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n                 debug!(\n                     \"report_projection_error normalized_ty={:?} data.ty={:?}\",\n-                    normalized_ty, data.ty\n+                    normalized_ty,\n+                    data.term.ty()\n                 );\n \n                 let is_normalized_ty_expected = !matches!(\n@@ -1318,12 +1319,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n                     is_normalized_ty_expected,\n                     normalized_ty,\n-                    data.ty,\n+                    data.term.ty(),\n                 ) {\n                     values = Some(infer::ValuePairs::Types(ExpectedFound::new(\n                         is_normalized_ty_expected,\n                         normalized_ty,\n-                        data.ty,\n+                        data.term.ty(),\n                     )));\n \n                     err_buf = error;\n@@ -1803,7 +1804,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ty::PredicateKind::Projection(data) => {\n                 let self_ty = data.projection_ty.self_ty();\n-                let ty = data.ty;\n+                let ty = data.term.ty();\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }"}, {"sha": "4995590baec231f8856b9b00a54a1193be646f54", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -214,7 +214,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n     match infcx\n         .at(&obligation.cause, obligation.param_env)\n-        .eq(normalized_ty, obligation.predicate.ty)\n+        .eq(normalized_ty, obligation.predicate.term.ty())\n     {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n@@ -1615,7 +1615,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n                 substs: trait_ref.substs,\n                 item_def_id: obligation.predicate.item_def_id,\n             },\n-            ty,\n+            term: ty.into(),\n         }\n     });\n \n@@ -1641,7 +1641,7 @@ fn confirm_discriminant_kind_candidate<'cx, 'tcx>(\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: discriminant_def_id },\n-        ty: self_ty.discriminant_ty(tcx),\n+        term: self_ty.discriminant_ty(tcx).into(),\n     };\n \n     // We get here from `poly_project_and_unify_type` which replaces bound vars\n@@ -1674,7 +1674,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: metadata_def_id },\n-        ty: metadata_ty,\n+        term: metadata_ty.into(),\n     };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)\n@@ -1747,7 +1747,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n             substs: trait_ref.substs,\n             item_def_id: fn_once_output_def_id,\n         },\n-        ty: ret_type,\n+        term: ret_type.into(),\n     });\n \n     confirm_param_env_candidate(selcx, obligation, predicate, true)\n@@ -1803,7 +1803,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n         Ok(InferOk { value: _, obligations }) => {\n             nested_obligations.extend(obligations);\n             assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);\n-            Progress { ty: cache_entry.ty, obligations: nested_obligations }\n+            Progress { ty: cache_entry.term.ty(), obligations: nested_obligations }\n         }\n         Err(e) => {\n             let msg = format!("}, {"sha": "acac76cdfaaf026487f4f6367057f8fadbcda14d", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn update<'tcx, T>(\n     if let ty::PredicateKind::Projection(predicate) = obligation.predicate.kind().skip_binder() {\n         // If the projection predicate (Foo::Bar == X) has X as a non-TyVid,\n         // we need to make it into one.\n-        if let Some(vid) = predicate.ty.ty_vid() {\n+        if let Some(vid) = predicate.term.ty().ty_vid() {\n             debug!(\"relationship: {:?}.output = true\", vid);\n             engine.relationships().entry(vid).or_default().output = true;\n         }"}, {"sha": "e3b366c65bf5c779e2bb83d3e8ee31e6966eb9de", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -116,7 +116,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n         }\n         ty::PredicateKind::Projection(t) => {\n             wf.compute_projection(t.projection_ty);\n-            wf.compute(t.ty.into());\n+            wf.compute(t.term.ty().into());\n         }\n         ty::PredicateKind::WellFormed(arg) => {\n             wf.compute(arg);\n@@ -219,7 +219,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n             // projection coming from another associated type. See\n             // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs` and\n             // `traits-assoc-type-in-supertrait-bad.rs`.\n-            if let ty::Projection(projection_ty) = proj.ty.kind() {\n+            if let ty::Projection(projection_ty) = proj.term.ty().kind() {\n                 if let Some(&impl_item_id) =\n                     tcx.impl_item_implementor_ids(impl_def_id).get(&projection_ty.item_def_id)\n                 {"}, {"sha": "e651ff63c5249d9d223f284deda8e8fff97a383b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::AliasEq<RustInterner<'tcx>>>\n {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::AliasEq<RustInterner<'tcx>> {\n         chalk_ir::AliasEq {\n-            ty: self.ty.lower_into(interner),\n+            ty: self.term.ty().lower_into(interner),\n             alias: self.projection_ty.lower_into(interner),\n         }\n     }\n@@ -787,7 +787,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n             trait_bound: trait_ref.lower_into(interner),\n             associated_ty_id: chalk_ir::AssocTypeId(self.projection_ty.item_def_id),\n             parameters: own_substs.iter().map(|arg| arg.lower_into(interner)).collect(),\n-            value: self.ty.lower_into(interner),\n+            value: self.term.ty().lower_into(interner),\n         }\n     }\n }"}, {"sha": "b532c41642c6e88b814b41cc79e804ed0afad937", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -151,8 +151,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .bindings\n                     .iter()\n                     .find_map(|b| match (b.ident.name == sym::Output, &b.kind) {\n-                        (true, hir::TypeBindingKind::Equality { ty }) => {\n-                            sess.source_map().span_to_snippet(ty.span).ok()\n+                        (true, hir::TypeBindingKind::Equality { term }) => {\n+                            let span = match term {\n+                                hir::Term::Ty(ty) => ty.span,\n+                                hir::Term::Const(c) => self.tcx().hir().span(c.hir_id),\n+                            };\n+                            sess.source_map().span_to_snippet(span).ok()\n                         }\n                         _ => None,\n                     })"}, {"sha": "2866a7884a77a0916af881a11ec8c5218ca6891a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -602,14 +602,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .iter()\n             .map(|binding| {\n                 let kind = match binding.kind {\n-                    hir::TypeBindingKind::Equality { ty } => {\n-                        ConvertedBindingKind::Equality(self.ast_ty_to_ty(ty))\n-                    }\n-                    hir::TypeBindingKind::Const { ref c } => {\n-                        let local_did = self.tcx().hir().local_def_id(c.hir_id);\n-                        let c = Const::from_anon_const(self.tcx(), local_did);\n-                        ConvertedBindingKind::Const(&c)\n-                    }\n+                    hir::TypeBindingKind::Equality { ref term } => match term {\n+                        hir::Term::Ty(ref ty) => {\n+                            ConvertedBindingKind::Equality(self.ast_ty_to_ty(ty))\n+                        }\n+                        hir::Term::Const(ref c) => {\n+                            let local_did = self.tcx().hir().local_def_id(c.hir_id);\n+                            let c = Const::from_anon_const(self.tcx(), local_did);\n+                            ConvertedBindingKind::Const(&c)\n+                        }\n+                    },\n                     hir::TypeBindingKind::Constraint { ref bounds } => {\n                         ConvertedBindingKind::Constraint(bounds)\n                     }\n@@ -1227,21 +1229,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // `<T as Iterator>::Item = u32`\n                 bounds.projection_bounds.push((\n-                    projection_ty.map_bound(|projection_ty| {\n-                        debug!(\n-                            \"add_predicates_for_ast_type_binding: projection_ty {:?}, substs: {:?}\",\n-                            projection_ty, projection_ty.substs\n-                        );\n-                        ty::ProjectionPredicate { projection_ty, ty }\n+                    projection_ty.map_bound(|projection_ty| ty::ProjectionPredicate {\n+                        projection_ty,\n+                        term: ty.into(),\n                     }),\n                     binding.span,\n                 ));\n             }\n             ConvertedBindingKind::Const(c) => {\n-                bounds.const_bounds.push((\n-                    projection_ty.map_bound(|projection_ty| ty::ConstPredicate {\n-                        projection: projection_ty,\n-                        c,\n+                bounds.projection_bounds.push((\n+                    projection_ty.map_bound(|projection_ty| ty::ProjectionPredicate {\n+                        projection_ty,\n+                        term: c.into(),\n                     }),\n                     binding.span,\n                 ));\n@@ -1393,7 +1392,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         // A `Self` within the original bound will be substituted with a\n                         // `trait_object_dummy_self`, so check for that.\n                         let references_self =\n-                            pred.skip_binder().ty.walk().any(|arg| arg == dummy_self.into());\n+                            pred.skip_binder().term.ty().walk().any(|arg| arg == dummy_self.into());\n \n                         // If the projection output contains `Self`, force the user to\n                         // elaborate it explicitly to avoid a lot of complexity."}, {"sha": "6a28bb16a20acf2945f940d3f376d957529c3adf", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -37,12 +37,6 @@ pub struct Bounds<'tcx> {\n     /// here.\n     pub projection_bounds: Vec<(ty::PolyProjectionPredicate<'tcx>, Span)>,\n \n-    /// A list of const equality bounds. So if you had `T:\n-    /// Iterator<N = 4>` this would include `<T as\n-    /// Iterator>::N => 4`. Note that the self-type is explicit\n-    /// here.\n-    pub const_bounds: Vec<(ty::Binder<'tcx, ty::ConstPredicate<'tcx>>, Span)>,\n-\n     /// `Some` if there is *no* `?Sized` predicate. The `span`\n     /// is the location in the source of the `T` declaration which can\n     /// be cited as the source of the `T: Sized` requirement.\n@@ -90,24 +84,7 @@ impl<'tcx> Bounds<'tcx> {\n             .projection_bounds\n             .iter()\n             .map(move |&(projection, span)| (projection.to_predicate(tcx), span));\n-        let const_bounds = self.const_bounds.iter().map(move |&(bound, span)| {\n-            // FIXME(...): what about the projection's generics?\n-            // Is this the right local defid? Or should I get the self ty then\n-            let pred = bound\n-                .map_bound(|cp| {\n-                    let got =\n-                        ty::Const::from_anon_const(tcx, cp.projection.item_def_id.expect_local());\n-                    ty::PredicateKind::ConstEquate(cp.c, got)\n-                })\n-                .to_predicate(tcx);\n-            (pred, span)\n-        });\n \n-        sized_predicate\n-            .into_iter()\n-            .chain(region_preds)\n-            .chain(trait_bounds)\n-            .chain(projection_bounds)\n-            .chain(const_bounds)\n+        sized_predicate.into_iter().chain(region_preds).chain(trait_bounds).chain(projection_bounds)\n     }\n }"}, {"sha": "c8e1d8b190c9d6ca10585203beacd44ca28e347d", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -279,7 +279,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        let ret_param_ty = projection.skip_binder().ty;\n+        let ret_param_ty = projection.skip_binder().term.ty();\n         let ret_param_ty = self.resolve_vars_if_possible(ret_param_ty);\n         debug!(\"deduce_sig_from_projection: ret_param_ty={:?}\", ret_param_ty);\n \n@@ -706,7 +706,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Extract the type from the projection. Note that there can\n         // be no bound variables in this type because the \"self type\"\n         // does not have any regions in it.\n-        let output_ty = self.resolve_vars_if_possible(predicate.ty);\n+        let output_ty = self.resolve_vars_if_possible(predicate.term.ty());\n         debug!(\"deduce_future_output_from_projection: output_ty={:?}\", output_ty);\n         Some(output_ty)\n     }"}, {"sha": "c3fae46909f1c2e99eed636d202243ac618bbd3e", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1360,7 +1360,7 @@ pub fn check_type_bounds<'tcx>(\n                             item_def_id: trait_ty.def_id,\n                             substs: rebased_substs,\n                         },\n-                        ty: impl_ty_value,\n+                        term: impl_ty_value.into(),\n                     },\n                     bound_vars,\n                 )"}, {"sha": "590d65b7cba3f3cffb06a58e9c7a4129989626e4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     item_def_id: projection_ty.item_def_id,\n                                 };\n \n-                                let ty = pred.skip_binder().ty;\n+                                let ty: Ty<'_> = pred.skip_binder().term.ty();\n \n                                 let obligation = format!(\"{} = {}\", projection_ty, ty);\n                                 let quiet = format!(\"{} = {}\", quiet_projection_ty, ty);"}, {"sha": "8d06b8a7a170b2b69d133bf5c959f92bf642ec3f", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -691,7 +691,11 @@ fn bounds_from_generic_predicates<'tcx>(\n         // insert the associated types where they correspond, but for now let's be \"lazy\" and\n         // propose this instead of the following valid resugaring:\n         // `T: Trait, Trait::Assoc = K` \u2192 `T: Trait<Assoc = K>`\n-        where_clauses.push(format!(\"{} = {}\", tcx.def_path_str(p.projection_ty.item_def_id), p.ty));\n+        where_clauses.push(format!(\n+            \"{} = {}\",\n+            tcx.def_path_str(p.projection_ty.item_def_id),\n+            p.term.ty()\n+        ));\n     }\n     let where_clauses = if where_clauses.is_empty() {\n         String::new()"}, {"sha": "2843f19d09e0e0c76fd911f7d1f0f8ea80b3de33", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -664,7 +664,11 @@ impl<'tcx> ItemCtxt<'tcx> {\n             .params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                GenericParamKind::Type { .. } if param.hir_id == param_id => Some(&param.bounds),\n+                GenericParamKind::Type { .. } | GenericParamKind::Const { .. }\n+                    if param.hir_id == param_id =>\n+                {\n+                    Some(&param.bounds)\n+                }\n                 _ => None,\n             })\n             .flat_map(|bounds| bounds.iter())"}, {"sha": "87a67c4a4e060ed147802f1cacd9c298bdbfc667", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -67,11 +67,7 @@ fn opaque_type_bounds<'tcx>(\n         let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n-        let preds = bounds.predicates(tcx, item_ty);\n-\n-        let bounds = tcx.arena.alloc_from_iter(preds);\n-        debug!(\"opaque_type_bounds({}) = {:?}\", tcx.def_path_str(opaque_def_id), bounds);\n-        bounds\n+        tcx.arena.alloc_from_iter(bounds.predicates(tcx, item_ty))\n     })\n }\n "}, {"sha": "a0c8fc822dffd88769c78094b71dda48211d0125", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -203,7 +203,7 @@ pub fn setup_constraining_predicates<'tcx>(\n                 if !relies_only_on_inputs {\n                     continue;\n                 }\n-                input_parameters.extend(parameters_for(&projection.ty, false));\n+                input_parameters.extend(parameters_for(&projection.term, false));\n             } else {\n                 continue;\n             }"}, {"sha": "5e6704c9864fcae3039474b79559eae419769d66", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -199,7 +199,7 @@ fn unconstrained_parent_impl_substs<'tcx>(\n     for (predicate, _) in impl_generic_predicates.predicates.iter() {\n         if let ty::PredicateKind::Projection(proj) = predicate.kind().skip_binder() {\n             let projection_ty = proj.projection_ty;\n-            let projected_ty = proj.ty;\n+            let projected_ty = proj.term.ty();\n \n             let unbound_trait_ref = projection_ty.trait_ref(tcx);\n             if Some(unbound_trait_ref) == impl_trait_ref {"}, {"sha": "f6af81769b7a1be6fbe0cfe9ccdbaaa412f1296b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -354,7 +354,8 @@ impl<'tcx> Clean<Option<WherePredicate>> for ty::OutlivesPredicate<Ty<'tcx>, ty:\n \n impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> WherePredicate {\n-        let ty::ProjectionPredicate { projection_ty, ty } = self;\n+        let ty::ProjectionPredicate { projection_ty, term } = self;\n+        let ty = term.ty();\n         WherePredicate::EqPredicate { lhs: projection_ty.clean(cx), rhs: ty.clean(cx) }\n     }\n }\n@@ -623,8 +624,9 @@ fn clean_ty_generics(\n                             .filter(|b| !b.is_sized_bound(cx)),\n                     );\n \n-                    let proj = projection\n-                        .map(|p| (p.skip_binder().projection_ty.clean(cx), p.skip_binder().ty));\n+                    let proj = projection.map(|p| {\n+                        (p.skip_binder().projection_ty.clean(cx), p.skip_binder().term.ty())\n+                    });\n                     if let Some(((_, trait_did, name), rhs)) =\n                         proj.as_ref().and_then(|(lhs, rhs)| Some((lhs.projection()?, rhs)))\n                     {\n@@ -1566,7 +1568,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                                                 .ident\n                                                 .name,\n                                             kind: TypeBindingKind::Equality {\n-                                                ty: proj.ty.clean(cx),\n+                                                ty: proj.term.ty().clean(cx),\n                                             },\n                                         })\n                                     } else {\n@@ -2114,10 +2116,10 @@ impl Clean<TypeBinding> for hir::TypeBinding<'_> {\n impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> TypeBindingKind {\n         match *self {\n-            hir::TypeBindingKind::Equality { ref ty } => {\n-                TypeBindingKind::Equality { ty: ty.clean(cx) }\n-            }\n-            hir::TypeBindingKind::Const { c: _ } => todo!(),\n+            hir::TypeBindingKind::Equality { ref term } => match term {\n+                hir::Term::Ty(ref ty) => TypeBindingKind::Equality { ty: ty.clean(cx) },\n+                hir::Term::Const(ref _c) => todo!(),\n+            },\n             hir::TypeBindingKind::Constraint { ref bounds } => TypeBindingKind::Constraint {\n                 bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n             },"}, {"sha": "6b3dbcc81a470e5da84576d63fcfc19e3b1154cd", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1 +1 @@\n-Subproject commit 2abffbf977a9e8c6ca4174a08fe5c4d7781f0aac\n+Subproject commit 6b3dbcc81a470e5da84576d63fcfc19e3b1154cd"}, {"sha": "582d0a69229854bcf32d059e8248d080216a6cbe", "filename": "src/test/ui/associated-consts/assoc-const.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -10,5 +10,10 @@ impl Foo for Bar {\n   const N: usize = 3;\n }\n \n+const TEST:usize = 3;\n+\n+\n fn foo<F: Foo<N=3>>() {}\n+fn bar<F: Foo<N={TEST}>>() {}\n+\n fn main() {}"}, {"sha": "32b08fb97f2711a147062b472b2b698af1cad679", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -7,7 +7,7 @@ struct Bar;\n const T: usize = 42;\n \n impl Foo<N = 3> for Bar {\n-//~^ ERROR cannot constrain an associated constant to a value\n+//~^ ERROR this trait takes 1 generic argument but 0 generic arguments were supplied\n //~| ERROR associated type bindings are not allowed here\n     fn do_x(&self) -> [u8; 3] {\n         [0u8; 3]"}, {"sha": "455f6f61aada35853de04543d4d3a995839b1cba", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1,11 +1,18 @@\n-error: cannot constrain an associated constant to a value\n-  --> $DIR/issue-89013-no-kw.rs:9:10\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/issue-89013-no-kw.rs:9:6\n    |\n LL | impl Foo<N = 3> for Bar {\n-   |          -^^^-\n-   |          |   |\n-   |          |   ...cannot be constrained to this value\n-   |          this associated constant...\n+   |      ^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `N`\n+  --> $DIR/issue-89013-no-kw.rs:1:7\n+   |\n+LL | trait Foo<const N: usize> {\n+   |       ^^^       -\n+help: add missing generic argument\n+   |\n+LL | impl Foo<N, N = 3> for Bar {\n+   |          ++\n \n error[E0229]: associated type bindings are not allowed here\n   --> $DIR/issue-89013-no-kw.rs:9:10\n@@ -15,4 +22,5 @@ LL | impl Foo<N = 3> for Bar {\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0229`.\n+Some errors have detailed explanations: E0107, E0229.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "97c22fa7862d5750082b630f1d9dbd8838699563", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -8,7 +8,7 @@ const T: usize = 42;\n \n impl Foo<N = const 3> for Bar {\n //~^ ERROR expected lifetime, type, or constant, found keyword `const`\n-//~| ERROR cannot constrain an associated constant to a value\n+//~| ERROR this trait takes 1 generic\n //~| ERROR associated type bindings are not allowed here\n     fn do_x(&self) -> [u8; 3] {\n         [0u8; 3]"}, {"sha": "57108d718cfdea808cd6416420a11457a57afe5b", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -10,14 +10,21 @@ LL - impl Foo<N = const 3> for Bar {\n LL + impl Foo<N = 3> for Bar {\n    | \n \n-error: cannot constrain an associated constant to a value\n-  --> $DIR/issue-89013.rs:9:10\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/issue-89013.rs:9:6\n    |\n LL | impl Foo<N = const 3> for Bar {\n-   |          -^^^^^^^^^-\n-   |          |         |\n-   |          |         ...cannot be constrained to this value\n-   |          this associated constant...\n+   |      ^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `N`\n+  --> $DIR/issue-89013.rs:1:7\n+   |\n+LL | trait Foo<const N: usize> {\n+   |       ^^^       -\n+help: add missing generic argument\n+   |\n+LL | impl Foo<N, N = const 3> for Bar {\n+   |          ++\n \n error[E0229]: associated type bindings are not allowed here\n   --> $DIR/issue-89013.rs:9:10\n@@ -27,4 +34,5 @@ LL | impl Foo<N = const 3> for Bar {\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0229`.\n+Some errors have detailed explanations: E0107, E0229.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "3f7423dcb8e0cd14e79932a9268ce76a5f3cb366", "filename": "src/test/ui/parser/recover-assoc-const-constraint.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1,7 +1,9 @@\n+// run-pass\n+\n #[cfg(FALSE)]\n fn syntax() {\n-    bar::<Item = 42>(); //~ ERROR cannot constrain an associated constant to a value\n-    bar::<Item = { 42 }>(); //~ ERROR cannot constrain an associated constant to a value\n+    bar::<Item = 42>();\n+    bar::<Item = { 42 }>();\n }\n \n fn main() {}"}, {"sha": "c6733b33faa58072d1cff7a65dba2549687aec34", "filename": "src/test/ui/parser/recover-assoc-const-constraint.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -1,20 +0,0 @@\n-error: cannot constrain an associated constant to a value\n-  --> $DIR/recover-assoc-const-constraint.rs:3:11\n-   |\n-LL |     bar::<Item = 42>();\n-   |           ----^^^--\n-   |           |      |\n-   |           |      ...cannot be constrained to this value\n-   |           this associated constant...\n-\n-error: cannot constrain an associated constant to a value\n-  --> $DIR/recover-assoc-const-constraint.rs:4:11\n-   |\n-LL |     bar::<Item = { 42 }>();\n-   |           ----^^^------\n-   |           |      |\n-   |           |      ...cannot be constrained to this value\n-   |           this associated constant...\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "358e79fe56fe374649275ca7aebaafd57ade0e8d", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1 +1 @@\n-Subproject commit 06b9d31743210b788b130c8a484c2838afa6fc27\n+Subproject commit 358e79fe56fe374649275ca7aebaafd57ade0e8d"}, {"sha": "2af3555e370a4b8ec15f0c4204e24276abe324c1", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n+    Term, AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n     IsAsync, ItemKind, LifetimeName, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -140,7 +140,7 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n         if binding.ident.name == sym::Output;\n-        if let TypeBindingKind::Equality{ty: output} = binding.kind;\n+        if let TypeBindingKind::Equality{term: Term::Ty(output)} = binding.kind;\n         then {\n             return Some(output)\n         }"}, {"sha": "c0e65e520f23a59c85fab26c1ee237cda12c212e", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -2143,10 +2143,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(projection_predicate.term.ty(), self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(projection_predicate.term.ty(), self_ty) {\n                             return;\n                         }\n                     }"}, {"sha": "865a36a5cd1d668efcd9cf48b296de774303ea3f", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -243,7 +243,7 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.ty);\n+                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term.ty());\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n                     && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\") == Some(normalized_ty)\n             } else {"}, {"sha": "09f9e1ee09990ed1964f0c541f8528634de8ecbc", "filename": "src/tools/clippy/clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f56671d0384bdb2d92dddebfbf42510b16e0f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -98,9 +98,9 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n                         if trait_pred.self_ty() == inp;\n                         if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n                         then {\n-                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"Ord\".to_string()));\n-                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"PartialOrd\".to_string()));\n                             }\n                         }"}, {"sha": "8e9ccbf97a70259b6c6576e8fd7d77d28238737e", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=67f56671d0384bdb2d92dddebfbf42510b16e0f7", "patch": "@@ -1 +1 @@\n-Subproject commit 0f8c96c92689af8378dbe9f466c6bf15a3a27458\n+Subproject commit 8e9ccbf97a70259b6c6576e8fd7d77d28238737e"}]}