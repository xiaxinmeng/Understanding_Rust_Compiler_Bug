{"sha": "f4c7596ac3f2d27578787da3279705fd45aefbd6", "node_id": "C_kwDOAAsO6NoAKGY0Yzc1OTZhYzNmMmQyNzU3ODc4N2RhMzI3OTcwNWZkNDVhZWZiZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T15:48:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T15:48:40Z"}, "message": "Auto merge of #108311 - oli-obk:invert_defines, r=lcnr\n\nMake hidden type registration opt-in, so that each site can be reviewed on its own and we have the right defaults for trait solvers\n\nr? `@lcnr`\n\npulled out of https://github.com/rust-lang/rust/pull/107891 as it is the uncontroversial part", "tree": {"sha": "9d8bcf06faab6546b5748e1617dffdcdc8cc0baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d8bcf06faab6546b5748e1617dffdcdc8cc0baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c7596ac3f2d27578787da3279705fd45aefbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c7596ac3f2d27578787da3279705fd45aefbd6", "html_url": "https://github.com/rust-lang/rust/commit/f4c7596ac3f2d27578787da3279705fd45aefbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c7596ac3f2d27578787da3279705fd45aefbd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3200982b7689ff496e63584c5c8f9bf707b98ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3200982b7689ff496e63584c5c8f9bf707b98ae3", "html_url": "https://github.com/rust-lang/rust/commit/3200982b7689ff496e63584c5c8f9bf707b98ae3"}, {"sha": "88a7b6803b7791febe1cdeb0f66f01b3b6b75af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/88a7b6803b7791febe1cdeb0f66f01b3b6b75af6", "html_url": "https://github.com/rust-lang/rust/commit/88a7b6803b7791febe1cdeb0f66f01b3b6b75af6"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "4ccdeeff72b03370938e8a79a7556da57f10191e", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -273,7 +273,8 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         // FIXME(oli-obk): Also do region checks here and then consider removing `check_opaque_meets_bounds` entirely.\n         let param_env = self.tcx.param_env(def_id);\n         // HACK This bubble is required for this tests to pass:\n-        // type-alias-impl-trait/issue-67844-nested-opaque.rs\n+        // nested-return-type2-tait2.rs\n+        // nested-return-type2-tait3.rs\n         let infcx =\n             self.tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).build();\n         let ocx = ObligationCtxt::new(&infcx);"}, {"sha": "c289eae8d2745ad4a8bc23ce4c02c1595f46b0cb", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -561,8 +561,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ) {\n                 // Check that E' = S'.\n                 let cause = self.misc(hir_ty.span);\n-                let InferOk { value: (), obligations } =\n-                    self.at(&cause, self.param_env).eq(*expected_ty, supplied_ty)?;\n+                let InferOk { value: (), obligations } = self\n+                    .at(&cause, self.param_env)\n+                    .define_opaque_types(true)\n+                    .eq(*expected_ty, supplied_ty)?;\n                 all_obligations.extend(obligations);\n             }\n \n@@ -574,6 +576,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let cause = &self.misc(decl.output.span());\n             let InferOk { value: (), obligations } = self\n                 .at(cause, self.param_env)\n+                .define_opaque_types(true)\n                 .eq(expected_sigs.liberated_sig.output(), supplied_output_ty)?;\n             all_obligations.extend(obligations);\n "}, {"sha": "a15fc9b57fbe6a8ca3813a9a3f7299e23c605a5c", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -143,11 +143,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n         debug!(\"unify(a: {:?}, b: {:?}, use_lub: {})\", a, b, self.use_lub);\n         self.commit_if_ok(|_| {\n+            let at = self.at(&self.cause, self.fcx.param_env).define_opaque_types(true);\n             if self.use_lub {\n-                self.at(&self.cause, self.fcx.param_env).lub(b, a)\n+                at.lub(b, a)\n             } else {\n-                self.at(&self.cause, self.fcx.param_env)\n-                    .sup(b, a)\n+                at.sup(b, a)\n                     .map(|InferOk { value: (), obligations }| InferOk { value: a, obligations })\n             }\n         })\n@@ -174,7 +174,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             // Best-effort try to unify these types -- we're already on the error path,\n             // so this will have the side-effect of making sure we have no ambiguities\n             // due to `[type error]` and `_` not coercing together.\n-            let _ = self.commit_if_ok(|_| self.at(&self.cause, self.param_env).eq(a, b));\n+            let _ = self.commit_if_ok(|_| {\n+                self.at(&self.cause, self.param_env).define_opaque_types(true).eq(a, b)\n+            });\n             return success(vec![], self.fcx.tcx.ty_error(), vec![]);\n         }\n \n@@ -1484,6 +1486,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             // Another example is `break` with no argument expression.\n             assert!(expression_ty.is_unit(), \"if let hack without unit type\");\n             fcx.at(cause, fcx.param_env)\n+                // needed for tests/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs\n+                .define_opaque_types(true)\n                 .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())\n                 .map(|infer_ok| {\n                     fcx.register_infer_ok_obligations(infer_ok);"}, {"sha": "241547b70aa2fa95e76cd24976d9b2fde1ad7ec8", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n-        match self.at(cause, self.param_env).sup(expected, actual) {\n+        match self.at(cause, self.param_env).define_opaque_types(true).sup(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n                 None\n@@ -143,7 +143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n-        match self.at(cause, self.param_env).eq(expected, actual) {\n+        match self.at(cause, self.param_env).define_opaque_types(true).eq(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n                 None"}, {"sha": "8b0473b7454c0b2427c41e5babbebaec611b82f4", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -1436,7 +1436,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             TraitCandidate(trait_ref) => self.probe(|_| {\n                 let _ = self\n                     .at(&ObligationCause::dummy(), self.param_env)\n-                    .define_opaque_types(false)\n                     .sup(candidate.xform_self_ty, self_ty);\n                 match self.select_trait_candidate(trait_ref) {\n                     Ok(Some(traits::ImplSource::UserDefined(ref impl_data))) => {\n@@ -1466,7 +1465,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // First check that the self type can be related.\n             let sub_obligations = match self\n                 .at(&ObligationCause::dummy(), self.param_env)\n-                .define_opaque_types(false)\n                 .sup(probe.xform_self_ty, self_ty)\n             {\n                 Ok(InferOk { obligations, value: () }) => obligations,\n@@ -1683,7 +1681,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 if let ProbeResult::Match = result\n                     && self\n                     .at(&ObligationCause::dummy(), self.param_env)\n-                    .define_opaque_types(false)\n                     .sup(return_ty, xform_ret_ty)\n                     .is_err()\n                 {"}, {"sha": "c952ddc827a4a9d417f058501ce52e7703f1c6c5", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         cause: &'a ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> At<'a, 'tcx> {\n-        At { infcx: self, cause, param_env, define_opaque_types: true }\n+        At { infcx: self, cause, param_env, define_opaque_types: false }\n     }\n \n     /// Forks the inference context, creating a new inference context with the same inference"}, {"sha": "2dd57e4c039af50382a77e32905355409c7882c8", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -264,7 +264,7 @@ pub struct InferCtxt<'tcx> {\n     /// short lived InferCtxt within queries. The opaque type obligations are forwarded\n     /// to the outside until the end up in an `InferCtxt` for typeck or borrowck.\n     ///\n-    /// It is default value is `DefiningAnchor::Error`, this way it is easier to catch errors that\n+    /// Its default value is `DefiningAnchor::Error`, this way it is easier to catch errors that\n     /// might come up during inference or typeck.\n     pub defining_use_anchor: DefiningAnchor,\n "}, {"sha": "a657d655f3eef690f2378f3f7ecf7c61d1bf106c", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -545,8 +545,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             origin,\n         );\n         if let Some(prev) = prev {\n-            obligations =\n-                self.at(&cause, param_env).eq_exp(a_is_expected, prev, hidden_ty)?.obligations;\n+            obligations = self\n+                .at(&cause, param_env)\n+                .define_opaque_types(true)\n+                .eq_exp(a_is_expected, prev, hidden_ty)?\n+                .obligations;\n         }\n \n         let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());"}, {"sha": "06570e1f4b41cd600615f1507e023378c7cb3125", "filename": "compiler/rustc_trait_selection/src/solve/infcx_ext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -54,7 +54,6 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         rhs: T,\n     ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution> {\n         self.at(&ObligationCause::dummy(), param_env)\n-            .define_opaque_types(false)\n             .eq(lhs, rhs)\n             .map(|InferOk { value: (), obligations }| {\n                 obligations.into_iter().map(|o| o.into()).collect()"}, {"sha": "44369670f5fb8562eafc101a50ad1d8dd4d0f2cc", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -217,6 +217,7 @@ fn equate_impl_headers<'cx, 'tcx>(\n     selcx\n         .infcx\n         .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n+        .define_opaque_types(true)\n         .eq_impl_headers(impl1_header, impl2_header)\n         .map(|infer_ok| infer_ok.obligations)\n         .ok()"}, {"sha": "4a7f08a35bc61035d8265a8782869be92d05989d", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -128,6 +128,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n     {\n         self.infcx\n             .at(cause, param_env)\n+            .define_opaque_types(true)\n             .eq_exp(a_is_expected, a, b)\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n@@ -141,6 +142,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n     ) -> Result<(), TypeError<'tcx>> {\n         self.infcx\n             .at(cause, param_env)\n+            .define_opaque_types(true)\n             .eq(expected, actual)\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n@@ -155,6 +157,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n     ) -> Result<(), TypeError<'tcx>> {\n         self.infcx\n             .at(cause, param_env)\n+            .define_opaque_types(true)\n             .sup(expected, actual)\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n@@ -169,6 +172,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n     ) -> Result<(), TypeError<'tcx>> {\n         self.infcx\n             .at(cause, param_env)\n+            .define_opaque_types(true)\n             .sup(expected, actual)\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }"}, {"sha": "9ccdeca842ccde234d6410b93624a48dee1235a3", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -286,7 +286,12 @@ fn project_and_unify_type<'cx, 'tcx>(\n         );\n     obligations.extend(new);\n \n-    match infcx.at(&obligation.cause, obligation.param_env).eq(normalized, actual) {\n+    match infcx\n+        .at(&obligation.cause, obligation.param_env)\n+        // This is needed to support nested opaque types like `impl Fn() -> impl Trait`\n+        .define_opaque_types(true)\n+        .eq(normalized, actual)\n+    {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n             ProjectAndUnifyResult::Holds(obligations)"}, {"sha": "5c5b2d6dac3fbc24911a3a37b859241db405eb8b", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -821,6 +821,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n+            // needed for tests/ui/type-alias-impl-trait/assoc-projection-ice.rs\n+            .define_opaque_types(true)\n             .sup(obligation_trait_ref, expected_trait_ref)\n             .map(|InferOk { mut obligations, .. }| {\n                 obligations.extend(nested);"}, {"sha": "79c188d7f815b1c2abb655dd9d7ccbd2b80d529a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -1752,7 +1752,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         });\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .define_opaque_types(false)\n             .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)\n             .map(|InferOk { obligations: _, value: () }| {\n                 // This method is called within a probe, so we can't have\n@@ -1815,7 +1814,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let is_match = self\n             .infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .define_opaque_types(false)\n             .sup(obligation.predicate, infer_projection)\n             .map_or(false, |InferOk { obligations, value: () }| {\n                 self.evaluate_predicates_recursively(\n@@ -2507,7 +2505,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let InferOk { obligations, .. } = self\n             .infcx\n             .at(&cause, obligation.param_env)\n-            .define_opaque_types(false)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n             .map_err(|e| {\n                 debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e.to_string(self.tcx()))\n@@ -2558,11 +2555,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n-            // We don't want predicates for opaque types to just match all other types,\n-            // if there is an obligation on the opaque type, then that obligation must be met\n-            // opaquely. Otherwise we'd match any obligation to the opaque type and then error\n-            // out later.\n-            .define_opaque_types(false)\n             .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)\n             .map(|InferOk { obligations, .. }| obligations)\n             .map_err(|_| ())"}, {"sha": "f5c2abc0efa2ea12171e403be060ac219ad563a9", "filename": "tests/ui/type-alias-impl-trait/match-unification.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4c7596ac3f2d27578787da3279705fd45aefbd6/tests%2Fui%2Ftype-alias-impl-trait%2Fmatch-unification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c7596ac3f2d27578787da3279705fd45aefbd6/tests%2Fui%2Ftype-alias-impl-trait%2Fmatch-unification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fmatch-unification.rs?ref=f4c7596ac3f2d27578787da3279705fd45aefbd6", "patch": "@@ -0,0 +1,14 @@\n+use std::fmt::Debug;\n+\n+// check-pass\n+\n+fn bar() -> impl Debug {}\n+\n+fn baz(b: bool) -> Option<impl Debug> {\n+    match b {\n+        true => baz(false),\n+        false => Some(bar()),\n+    }\n+}\n+\n+fn main() {}"}]}