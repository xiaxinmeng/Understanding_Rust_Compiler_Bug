{"sha": "12bca20d781cf4f6810c1cfc1666c1adb1d5d97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYmNhMjBkNzgxY2Y0ZjY4MTBjMWNmYzE2NjZjMWFkYjFkNWQ5N2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-07T02:01:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-07T02:01:01Z"}, "message": "auto merge of #9030 : tikue/rust/glob, r=huonw", "tree": {"sha": "e93f6e8a405c2a7ea5adfe8501e94194736906da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93f6e8a405c2a7ea5adfe8501e94194736906da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12bca20d781cf4f6810c1cfc1666c1adb1d5d97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12bca20d781cf4f6810c1cfc1666c1adb1d5d97f", "html_url": "https://github.com/rust-lang/rust/commit/12bca20d781cf4f6810c1cfc1666c1adb1d5d97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12bca20d781cf4f6810c1cfc1666c1adb1d5d97f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f883159cdf3a84967513dfb27f004499ac456a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f883159cdf3a84967513dfb27f004499ac456a1a", "html_url": "https://github.com/rust-lang/rust/commit/f883159cdf3a84967513dfb27f004499ac456a1a"}, {"sha": "39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ce095ebdfcfb35f93b386bcf5a6f0586f78611", "html_url": "https://github.com/rust-lang/rust/commit/39ce095ebdfcfb35f93b386bcf5a6f0586f78611"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d82c1fd35c2ce8823aef51878db758038d1d0f3a", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12bca20d781cf4f6810c1cfc1666c1adb1d5d97f/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12bca20d781cf4f6810c1cfc1666c1adb1d5d97f/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=12bca20d781cf4f6810c1cfc1666c1adb1d5d97f", "patch": "@@ -304,11 +304,11 @@ impl Pattern {\n              && is_sep(prev_char.unwrap_or_default('/')))\n         };\n \n-        for ti in range(i, self.tokens.len()) {\n-            match self.tokens[ti] {\n+        for (ti, token) in self.tokens.slice_from(i).iter().enumerate() {\n+            match *token {\n                 AnySequence => {\n                     loop {\n-                        match self.matches_from(prev_char, file, ti + 1, options) {\n+                        match self.matches_from(prev_char, file, i + ti + 1, options) {\n                             SubPatternDoesntMatch => (), // keep trying\n                             m => return m,\n                         }\n@@ -331,7 +331,7 @@ impl Pattern {\n                     }\n \n                     let (c, next) = file.slice_shift_char();\n-                    let matches = match self.tokens[ti] {\n+                    let matches = match *token {\n                         AnyChar => {\n                             !require_literal(c)\n                         }"}]}