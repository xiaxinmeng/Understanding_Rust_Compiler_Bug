{"sha": "b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOGEyZDdjZTk2OThhODVhMTg3NGVkMWM5MjM4NmYwMDcwYzRmYzk=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-02T06:42:04Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-02T06:42:04Z"}, "message": "UI test cleanup: Extract for_kv_map lint tests", "tree": {"sha": "156eecaa0efb52a78e21d4c96d49f971e8afc1ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156eecaa0efb52a78e21d4c96d49f971e8afc1ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwsXU4ACgkQtvoGpuDi\nZluNQRAAotuAqjvpFbOKMjTPxCOdkbVRmkTGPypydzygLxUGYJzp8dgJQzakrgZ9\nYpynm1uNjnvlV9dWHZbnBusINXHVrM4ESoWAThV3quSCmI5jj23Av6ePjoGxk/hx\n7st5n6jOPrePIuYIXXuBDICX1K4CuZ58OJLdCwZPuP5U99XB2ZRvOSgSQyBN/3WR\n2F1eIio0ePvApnQkrFPGfivmFnKyZcNDEHJtX9Ju/YAJdS7NLo9k0sOIJYrAReYg\nfu4L9fi0epNtABsRujhfqkjo/vbVQ8BEq6A1cdY6EEwIwaUVkhh7XoVITUdkKOYL\nrbmsH1pG4SxYFHGVK/+bZkDH79Obtq1RtCzr8T+faspjpGCjjPP5Q/4/lEp4OjFy\n1CWvr0PbRTYuKmmeCOwqteZ0+MpEJpJVG3NqRySq+NGYFib/EH0fwbiZnWEKop+B\nNqd1oydy87rIXhSUab9l+CgRlVda18Z0y6cTB9eWqSu2yW8wssvroIUlTMW8DPcb\n5BoKxBs4an75xpDV/69Vmz88/B2YSFZnjanZO+PaBmfd2FQkex/fng/5UmU/bm6h\nMvicRerYIAFVRdpoWIXdcDHPaeYOvQsl/f1uvMB0100eHf74VHorU/1FQ74abgaS\n0gQv2+qb1ymPh0soN69vf2tpb8sacmnugCtdbBwxwYfy68ZpB6k=\n=F9FU\n-----END PGP SIGNATURE-----", "payload": "tree 156eecaa0efb52a78e21d4c96d49f971e8afc1ce\nparent 85ba5f0f17f71e5010e136cf1e7c7b6266188c42\nauthor Philipp Hansch <dev@phansch.net> 1546411324 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1546411324 +0100\n\nUI test cleanup: Extract for_kv_map lint tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "html_url": "https://github.com/rust-lang/rust/commit/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ba5f0f17f71e5010e136cf1e7c7b6266188c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ba5f0f17f71e5010e136cf1e7c7b6266188c42", "html_url": "https://github.com/rust-lang/rust/commit/85ba5f0f17f71e5010e136cf1e7c7b6266188c42"}], "stats": {"total": 228, "additions": 122, "deletions": 106}, "files": [{"sha": "d79ea4bebeb517b35ca236bb2e374b43d7446e16", "filename": "tests/ui/for_kv_map.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_kv_map.rs?ref=b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![warn(clippy::for_kv_map)]\n+#![allow(clippy::used_underscore_binding)]\n+\n+use std::collections::*;\n+use std::rc::Rc;\n+\n+fn main() {\n+    let m: HashMap<u64, u64> = HashMap::new();\n+    for (_, v) in &m {\n+        let _v = v;\n+    }\n+\n+    let m: Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n+    for (_, v) in &*m {\n+        let _v = v;\n+        // Here the `*` is not actually necessary, but the test tests that we don't\n+        // suggest\n+        // `in *m.values()` as we used to\n+    }\n+\n+    let mut m: HashMap<u64, u64> = HashMap::new();\n+    for (_, v) in &mut m {\n+        let _v = v;\n+    }\n+\n+    let m: &mut HashMap<u64, u64> = &mut HashMap::new();\n+    for (_, v) in &mut *m {\n+        let _v = v;\n+    }\n+\n+    let m: HashMap<u64, u64> = HashMap::new();\n+    let rm = &m;\n+    for (k, _value) in rm {\n+        let _k = k;\n+    }\n+    test_for_kv_map();\n+}\n+\n+fn test_for_kv_map() {\n+    let m: HashMap<u64, u64> = HashMap::new();\n+\n+    // No error, _value is actually used\n+    for (k, _value) in &m {\n+        let _ = _value;\n+        let _k = k;\n+    }\n+}"}, {"sha": "7b65c58f58d58e86ef510f5ef5449f0863aae564", "filename": "tests/ui/for_kv_map.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_kv_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_kv_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_kv_map.stderr?ref=b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "patch": "@@ -0,0 +1,54 @@\n+error: you seem to want to iterate on a map's values\n+  --> $DIR/for_kv_map.rs:18:19\n+   |\n+LL |     for (_, v) in &m {\n+   |                   ^^\n+   |\n+   = note: `-D clippy::for-kv-map` implied by `-D warnings`\n+help: use the corresponding method\n+   |\n+LL |     for v in m.values() {\n+   |         ^    ^^^^^^^^^^\n+\n+error: you seem to want to iterate on a map's values\n+  --> $DIR/for_kv_map.rs:23:19\n+   |\n+LL |     for (_, v) in &*m {\n+   |                   ^^^\n+help: use the corresponding method\n+   |\n+LL |     for v in (*m).values() {\n+   |         ^    ^^^^^^^^^^^^^\n+\n+error: you seem to want to iterate on a map's values\n+  --> $DIR/for_kv_map.rs:31:19\n+   |\n+LL |     for (_, v) in &mut m {\n+   |                   ^^^^^^\n+help: use the corresponding method\n+   |\n+LL |     for v in m.values_mut() {\n+   |         ^    ^^^^^^^^^^^^^^\n+\n+error: you seem to want to iterate on a map's values\n+  --> $DIR/for_kv_map.rs:36:19\n+   |\n+LL |     for (_, v) in &mut *m {\n+   |                   ^^^^^^^\n+help: use the corresponding method\n+   |\n+LL |     for v in (*m).values_mut() {\n+   |         ^    ^^^^^^^^^^^^^^^^^\n+\n+error: you seem to want to iterate on a map's keys\n+  --> $DIR/for_kv_map.rs:42:24\n+   |\n+LL |     for (k, _value) in rm {\n+   |                        ^^\n+help: use the corresponding method\n+   |\n+LL |     for k in rm.keys() {\n+   |         ^    ^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c172b0b3b7709373e37f58894cc198df17e0186b", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "patch": "@@ -333,37 +333,6 @@ fn main() {\n     }\n     println!(\"index: {}\", index);\n \n-    let m: HashMap<u64, u64> = HashMap::new();\n-    for (_, v) in &m {\n-        let _v = v;\n-    }\n-\n-    let m: Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n-    for (_, v) in &*m {\n-        let _v = v;\n-        // Here the `*` is not actually necessary, but the test tests that we don't\n-        // suggest\n-        // `in *m.values()` as we used to\n-    }\n-\n-    let mut m: HashMap<u64, u64> = HashMap::new();\n-    for (_, v) in &mut m {\n-        let _v = v;\n-    }\n-\n-    let m: &mut HashMap<u64, u64> = &mut HashMap::new();\n-    for (_, v) in &mut *m {\n-        let _v = v;\n-    }\n-\n-    let m: HashMap<u64, u64> = HashMap::new();\n-    let rm = &m;\n-    for (k, _value) in rm {\n-        let _k = k;\n-    }\n-\n-    test_for_kv_map();\n-\n     fn f<T>(_: &T, _: &T) -> bool {\n         unimplemented!()\n     }\n@@ -381,17 +350,6 @@ fn main() {\n     }\n }\n \n-#[allow(clippy::used_underscore_binding)]\n-fn test_for_kv_map() {\n-    let m: HashMap<u64, u64> = HashMap::new();\n-\n-    // No error, _value is actually used\n-    for (k, _value) in &m {\n-        let _ = _value;\n-        let _k = k;\n-    }\n-}\n-\n #[allow(dead_code)]\n fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n     let pivot = v.len() - 1;"}, {"sha": "4ded425b3210dba474cd529a88d415f9aac1f0f2", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 12, "deletions": 64, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b38a2d7ce9698a85a1874ed1c92386f0070c4fc9/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=b38a2d7ce9698a85a1874ed1c92386f0070c4fc9", "patch": "@@ -292,92 +292,40 @@ LL |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n    |\n    = note: `-D clippy::unused-collect` implied by `-D warnings`\n \n-error: you seem to want to iterate on a map's values\n-  --> $DIR/for_loop.rs:337:19\n-   |\n-LL |     for (_, v) in &m {\n-   |                   ^^\n-   |\n-   = note: `-D clippy::for-kv-map` implied by `-D warnings`\n-help: use the corresponding method\n-   |\n-LL |     for v in m.values() {\n-   |         ^    ^^^^^^^^^^\n-\n-error: you seem to want to iterate on a map's values\n-  --> $DIR/for_loop.rs:342:19\n-   |\n-LL |     for (_, v) in &*m {\n-   |                   ^^^\n-help: use the corresponding method\n-   |\n-LL |     for v in (*m).values() {\n-   |         ^    ^^^^^^^^^^^^^\n-\n-error: you seem to want to iterate on a map's values\n-  --> $DIR/for_loop.rs:350:19\n-   |\n-LL |     for (_, v) in &mut m {\n-   |                   ^^^^^^\n-help: use the corresponding method\n-   |\n-LL |     for v in m.values_mut() {\n-   |         ^    ^^^^^^^^^^^^^^\n-\n-error: you seem to want to iterate on a map's values\n-  --> $DIR/for_loop.rs:355:19\n-   |\n-LL |     for (_, v) in &mut *m {\n-   |                   ^^^^^^^\n-help: use the corresponding method\n-   |\n-LL |     for v in (*m).values_mut() {\n-   |         ^    ^^^^^^^^^^^^^^^^^\n-\n-error: you seem to want to iterate on a map's keys\n-  --> $DIR/for_loop.rs:361:24\n-   |\n-LL |     for (k, _value) in rm {\n-   |                        ^^\n-help: use the corresponding method\n-   |\n-LL |     for k in rm.keys() {\n-   |         ^    ^^^^^^^^^\n-\n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:414:14\n+  --> $DIR/for_loop.rs:372:14\n    |\n LL |     for i in 0..src.len() {\n    |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n    |\n    = note: `-D clippy::manual-memcpy` implied by `-D warnings`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:419:14\n+  --> $DIR/for_loop.rs:377:14\n    |\n LL |     for i in 0..src.len() {\n    |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[10..(src.len() + 10)].clone_from_slice(&src[..])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:424:14\n+  --> $DIR/for_loop.rs:382:14\n    |\n LL |     for i in 0..src.len() {\n    |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[10..])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:429:14\n+  --> $DIR/for_loop.rs:387:14\n    |\n LL |     for i in 11..src.len() {\n    |              ^^^^^^^^^^^^^ help: try replacing the loop by: `dst[11..src.len()].clone_from_slice(&src[(11 - 10)..(src.len() - 10)])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:434:14\n+  --> $DIR/for_loop.rs:392:14\n    |\n LL |     for i in 0..dst.len() {\n    |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst.clone_from_slice(&src[..dst.len()])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:447:14\n+  --> $DIR/for_loop.rs:405:14\n    |\n LL |     for i in 10..256 {\n    |              ^^^^^^^\n@@ -388,34 +336,34 @@ LL |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n    |\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:459:14\n+  --> $DIR/for_loop.rs:417:14\n    |\n LL |     for i in 10..LOOP_OFFSET {\n    |              ^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[(10 + LOOP_OFFSET)..(LOOP_OFFSET + LOOP_OFFSET)].clone_from_slice(&src[(10 - some_var)..(LOOP_OFFSET - some_var)])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:472:14\n+  --> $DIR/for_loop.rs:430:14\n    |\n LL |     for i in 0..src_vec.len() {\n    |              ^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst_vec[..src_vec.len()].clone_from_slice(&src_vec[..])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:501:14\n+  --> $DIR/for_loop.rs:459:14\n    |\n LL |     for i in from..from + src.len() {\n    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + src.len()].clone_from_slice(&src[0..(from + src.len() - from)])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:505:14\n+  --> $DIR/for_loop.rs:463:14\n    |\n LL |     for i in from..from + 3 {\n    |              ^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + 3].clone_from_slice(&src[0..(from + 3 - from)])`\n \n error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:512:14\n+  --> $DIR/for_loop.rs:470:14\n    |\n LL |     for i in 0..src.len() {\n    |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n \n-error: aborting due to 51 previous errors\n+error: aborting due to 46 previous errors\n "}]}