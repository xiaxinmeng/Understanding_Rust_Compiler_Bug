{"sha": "4d99bf9af2107523c01566968e889c4f1a5de49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOTliZjlhZjIxMDc1MjNjMDE1NjY5NjhlODg5YzRmMWE1ZGU0OWU=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-21T22:10:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-27T16:58:39Z"}, "message": "Added some locking to ports to prevent the case where two threads simultaneously wake up a task blocked on a certain port.", "tree": {"sha": "8d7fb27687d58be9bd8f6f907b914da4e76fced3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7fb27687d58be9bd8f6f907b914da4e76fced3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d99bf9af2107523c01566968e889c4f1a5de49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d99bf9af2107523c01566968e889c4f1a5de49e", "html_url": "https://github.com/rust-lang/rust/commit/4d99bf9af2107523c01566968e889c4f1a5de49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d99bf9af2107523c01566968e889c4f1a5de49e/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb00befff050e69565d2862b458bbd56f20b7cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb00befff050e69565d2862b458bbd56f20b7cd3", "html_url": "https://github.com/rust-lang/rust/commit/cb00befff050e69565d2862b458bbd56f20b7cd3"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "4349794e658f7d630e6e118895064d0c5c1a1121", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d99bf9af2107523c01566968e889c4f1a5de49e/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4d99bf9af2107523c01566968e889c4f1a5de49e/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=4d99bf9af2107523c01566968e889c4f1a5de49e", "patch": "@@ -31,6 +31,7 @@ rust_chan::~rust_chan() {\n void rust_chan::associate(maybe_proxy<rust_port> *port) {\n     this->port = port;\n     if (port->is_proxy() == false) {\n+        scoped_lock sync(port->referent()->lock);\n         LOG(task, task,\n             \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n             this, port);\n@@ -49,6 +50,7 @@ void rust_chan::disassociate() {\n     A(task->dom, is_associated(), \"Channel must be associated with a port.\");\n \n     if (port->is_proxy() == false) {\n+        scoped_lock sync(port->referent()->lock);\n         LOG(task, task,\n             \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n             this, port->referent());\n@@ -81,6 +83,7 @@ void rust_chan::send(void *sptr) {\n         buffer.dequeue(NULL);\n     } else {\n         rust_port *target_port = port->referent();\n+        scoped_lock sync(target_port->lock);\n         if (target_port->task->blocked_on(target_port)) {\n             DLOG(dom, comm, \"dequeued in rendezvous_ptr\");\n             buffer.dequeue(target_port->task->rendezvous_ptr);"}, {"sha": "144a3b45cecd4f5a2f8975e3b0fac956b31c36fe", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d99bf9af2107523c01566968e889c4f1a5de49e/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/4d99bf9af2107523c01566968e889c4f1a5de49e/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=4d99bf9af2107523c01566968e889c4f1a5de49e", "patch": "@@ -13,6 +13,8 @@ class rust_port : public maybe_proxy<rust_port>,\n     // Data sent to this port from remote tasks is buffered in this channel.\n     rust_chan *remote_channel;\n \n+    lock_and_signal lock;\n+\n     rust_port(rust_task *task, size_t unit_sz);\n     ~rust_port();\n     void log_state();"}, {"sha": "c26e793b979b44bfe71e0ece16a3b02b19f14304", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d99bf9af2107523c01566968e889c4f1a5de49e/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4d99bf9af2107523c01566968e889c4f1a5de49e/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=4d99bf9af2107523c01566968e889c4f1a5de49e", "patch": "@@ -170,10 +170,7 @@ rust_task::start(uintptr_t spawnee_fn,\n     ctx.call((void *)task_start_wrapper, a, sp);\n \n     yield_timer.reset(0);\n-    {\n-        scoped_lock sync(dom->scheduler_lock);\n-        transition(&dom->newborn_tasks, &dom->running_tasks);\n-    }\n+    transition(&dom->newborn_tasks, &dom->running_tasks);\n }\n \n void\n@@ -408,6 +405,7 @@ rust_task::free(void *p, bool is_gc)\n \n void\n rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n+    scoped_lock sync(dom->scheduler_lock);\n     DLOG(dom, task,\n          \"task %s \" PTR \" state change '%s' -> '%s' while in '%s'\",\n          name, (uintptr_t)this, src->name, dst->name, state->name);\n@@ -424,10 +422,7 @@ rust_task::block(rust_cond *on, const char* name) {\n     A(dom, cond == NULL, \"Cannot block an already blocked task.\");\n     A(dom, on != NULL, \"Cannot block on a NULL object.\");\n \n-    {\n-        scoped_lock sync(dom->scheduler_lock);\n-        transition(&dom->running_tasks, &dom->blocked_tasks);\n-    }\n+    transition(&dom->running_tasks, &dom->blocked_tasks);\n     cond = on;\n     cond_name = name;\n }\n@@ -439,18 +434,14 @@ rust_task::wakeup(rust_cond *from) {\n                         (uintptr_t) cond, (uintptr_t) from);\n     A(dom, cond == from, \"Cannot wake up blocked task on wrong condition.\");\n \n-    {\n-        scoped_lock sync(dom->scheduler_lock);\n-        transition(&dom->blocked_tasks, &dom->running_tasks);\n-    }\n+    transition(&dom->blocked_tasks, &dom->running_tasks);\n     I(dom, cond == from);\n     cond = NULL;\n     cond_name = \"none\";\n }\n \n void\n rust_task::die() {\n-    scoped_lock sync(dom->scheduler_lock);\n     transition(&dom->running_tasks, &dom->dead_tasks);\n }\n "}]}