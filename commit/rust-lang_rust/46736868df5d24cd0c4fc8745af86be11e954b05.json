{"sha": "46736868df5d24cd0c4fc8745af86be11e954b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzM2ODY4ZGY1ZDI0Y2QwYzRmYzg3NDVhZjg2YmUxMWU5NTRiMDU=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-15T12:39:51Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-15T12:39:51Z"}, "message": "Removed `has_*` predicates from NumStrConv trait\nMoved `is_*` predicates into standalone functions", "tree": {"sha": "13535d6cd57b1e7d62cec96b3a6d276fa99ddba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13535d6cd57b1e7d62cec96b3a6d276fa99ddba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46736868df5d24cd0c4fc8745af86be11e954b05", "comment_count": 11, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46736868df5d24cd0c4fc8745af86be11e954b05", "html_url": "https://github.com/rust-lang/rust/commit/46736868df5d24cd0c4fc8745af86be11e954b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46736868df5d24cd0c4fc8745af86be11e954b05/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0846d4f6a8e21b92b34ed7e26950f4942391ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0846d4f6a8e21b92b34ed7e26950f4942391ea9", "html_url": "https://github.com/rust-lang/rust/commit/a0846d4f6a8e21b92b34ed7e26950f4942391ea9"}], "stats": {"total": 84, "additions": 34, "deletions": 50}, "files": [{"sha": "4322ea40428fb37afa008e57d6f1c6927ff169eb", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 34, "deletions": 50, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/46736868df5d24cd0c4fc8745af86be11e954b05/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46736868df5d24cd0c4fc8745af86be11e954b05/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=46736868df5d24cd0c4fc8745af86be11e954b05", "patch": "@@ -36,34 +36,47 @@ pub enum SignFormat {\n     SignAll\n }\n \n-pub trait NumStrConv {\n-    static pure fn has_NaN()      -> bool;\n-    static pure fn has_inf()      -> bool;\n-    static pure fn has_neg_inf()  -> bool;\n-    static pure fn has_neg_zero() -> bool;\n+#[inline(always)]\n+pure fn is_NaN<T:Eq>(num: &T) -> bool {\n+    *num != *num\n+}\n+\n+#[inline(always)]\n+pure fn is_inf<T:Eq+NumStrConv>(num: &T) -> bool {\n+    match NumStrConv::inf() {\n+        None    => false,\n+        Some(n) => *num == n\n+    }\n+}\n+\n+#[inline(always)]\n+pure fn is_neg_inf<T:Eq+NumStrConv>(num: &T) -> bool {\n+    match NumStrConv::neg_inf() {\n+        None    => false,\n+        Some(n) => *num == n\n+    }\n+}\n+\n+#[inline(always)]\n+pure fn is_neg_zero<T:Eq+One+Zero+NumStrConv+Div<T,T>>(num: &T) -> bool {\n+    let _0: T = Zero::zero();\n+    let _1: T = One::one();\n+\n+    *num == _0 && is_neg_inf(&(_1 / *num))\n+}\n \n+pub trait NumStrConv {\n     static pure fn NaN()      -> Option<Self>;\n     static pure fn inf()      -> Option<Self>;\n     static pure fn neg_inf()  -> Option<Self>;\n     static pure fn neg_zero() -> Option<Self>;\n \n-    pure fn is_NaN(&self)      -> bool;\n-    pure fn is_inf(&self)      -> bool;\n-    pure fn is_neg_inf(&self)  -> bool;\n-    pure fn is_neg_zero(&self) -> bool;\n-\n     pure fn round_to_zero(&self)   -> Self;\n     pure fn fractional_part(&self) -> Self;\n-\n }\n \n macro_rules! impl_NumStrConv_Floating (($t:ty) => (\n     impl NumStrConv for $t {\n-        #[inline(always)] static pure fn has_NaN()      -> bool { true }\n-        #[inline(always)] static pure fn has_inf()      -> bool { true }\n-        #[inline(always)] static pure fn has_neg_inf()  -> bool { true }\n-        #[inline(always)] static pure fn has_neg_zero() -> bool { true }\n-\n         #[inline(always)]\n         static pure fn NaN()      -> Option<$t> { Some( 0.0 / 0.0) }\n         #[inline(always)]\n@@ -73,27 +86,10 @@ macro_rules! impl_NumStrConv_Floating (($t:ty) => (\n         #[inline(always)]\n         static pure fn neg_zero() -> Option<$t> { Some(-0.0      ) }\n \n-        #[inline(always)] pure fn is_NaN(&self) -> bool { *self != *self }\n-\n-        #[inline(always)]\n-        pure fn is_inf(&self)      -> bool {\n-            *self == NumStrConv::inf().unwrap()\n-        }\n-\n-        #[inline(always)]\n-        pure fn is_neg_inf(&self)  -> bool {\n-            *self == NumStrConv::neg_inf().unwrap()\n-        }\n-\n-        #[inline(always)]\n-        pure fn is_neg_zero(&self) -> bool {\n-            *self == 0.0 && (1.0 / *self).is_neg_inf()\n-        }\n-\n         #[inline(always)]\n         pure fn round_to_zero(&self) -> $t {\n             ( if *self < 0.0 { f64::ceil(*self as f64)  }\n-                else           { f64::floor(*self as f64) }\n+              else           { f64::floor(*self as f64) }\n             ) as $t\n         }\n \n@@ -106,21 +102,11 @@ macro_rules! impl_NumStrConv_Floating (($t:ty) => (\n \n macro_rules! impl_NumStrConv_Integer (($t:ty) => (\n     impl NumStrConv for $t {\n-        #[inline(always)] static pure fn has_NaN()      -> bool { false }\n-        #[inline(always)] static pure fn has_inf()      -> bool { false }\n-        #[inline(always)] static pure fn has_neg_inf()  -> bool { false }\n-        #[inline(always)] static pure fn has_neg_zero() -> bool { false }\n-\n         #[inline(always)] static pure fn NaN()      -> Option<$t> { None }\n         #[inline(always)] static pure fn inf()      -> Option<$t> { None }\n         #[inline(always)] static pure fn neg_inf()  -> Option<$t> { None }\n         #[inline(always)] static pure fn neg_zero() -> Option<$t> { None }\n \n-        #[inline(always)] pure fn is_NaN(&self)      -> bool { false }\n-        #[inline(always)] pure fn is_inf(&self)      -> bool { false }\n-        #[inline(always)] pure fn is_neg_inf(&self)  -> bool { false }\n-        #[inline(always)] pure fn is_neg_zero(&self) -> bool { false }\n-\n         #[inline(always)] pure fn round_to_zero(&self)   -> $t { *self }\n         #[inline(always)] pure fn fractional_part(&self) -> $t {     0 }\n     }\n@@ -190,25 +176,23 @@ pub pure fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n \n-    if NumStrConv::has_NaN::<T>() && num.is_NaN() {\n+    if is_NaN(num) {\n         return (str::to_bytes(\"NaN\"), true);\n     }\n-    if NumStrConv::has_inf::<T>() && num.is_inf(){\n+    else if is_inf(num){\n         return match sign {\n             SignAll => (str::to_bytes(\"+inf\"), true),\n             _       => (str::to_bytes(\"inf\"), true)\n         }\n     }\n-    if NumStrConv::has_neg_inf::<T>() && num.is_neg_inf() {\n+    else if is_neg_inf(num) {\n         return match sign {\n             SignNone => (str::to_bytes(\"inf\"), true),\n             _        => (str::to_bytes(\"-inf\"), true),\n         }\n     }\n \n-    let neg = *num < _0 || (negative_zero\n-                            && NumStrConv::has_neg_zero::<T>()\n-                            && num.is_neg_zero());\n+    let neg = *num < _0 || (negative_zero && is_neg_zero(num));\n     let mut buf: ~[u8] = ~[];\n     let radix_gen: T   = cast(radix as int);\n "}]}