{"sha": "b8760afe478f5f2e10687b70146ac7123df2319b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzYwYWZlNDc4ZjVmMmUxMDY4N2I3MDE0NmFjNzEyM2RmMjMxOWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T20:51:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-14T17:14:19Z"}, "message": "More test fixes", "tree": {"sha": "c8b618879f4cf9c47c2e124c9973db6d085137b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b618879f4cf9c47c2e124c9973db6d085137b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8760afe478f5f2e10687b70146ac7123df2319b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8760afe478f5f2e10687b70146ac7123df2319b", "html_url": "https://github.com/rust-lang/rust/commit/b8760afe478f5f2e10687b70146ac7123df2319b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8760afe478f5f2e10687b70146ac7123df2319b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cd8a5a45bda26e632fc0dadb41a5a3b165a2840", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd8a5a45bda26e632fc0dadb41a5a3b165a2840", "html_url": "https://github.com/rust-lang/rust/commit/9cd8a5a45bda26e632fc0dadb41a5a3b165a2840"}], "stats": {"total": 153, "additions": 62, "deletions": 91}, "files": [{"sha": "eeb1493d86856d240dc099485b3964a63fb278d0", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -17,9 +17,11 @@\n #![feature(test)]\n #![feature(path_ext)]\n #![feature(str_char)]\n+#![feature(libc)]\n \n #![deny(warnings)]\n \n+extern crate libc;\n extern crate test;\n extern crate getopts;\n \n@@ -244,7 +246,7 @@ pub fn run_tests(config: &Config) {\n     // sadly osx needs some file descriptor limits raised for running tests in\n     // parallel (especially when we have lots and lots of child processes).\n     // For context, see #8904\n-    raise_fd_limit::raise_fd_limit();\n+    unsafe { raise_fd_limit::raise_fd_limit(); }\n     // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n     // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n     env::set_var(\"__COMPAT_LAYER\", \"RunAsInvoker\");"}, {"sha": "89b9135558e062b9df9ba337811236c71d56de1e", "filename": "src/compiletest/raise_fd_limit.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Fcompiletest%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Fcompiletest%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fraise_fd_limit.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n /// darwin_fd_limit exists to work around an issue where launchctl on Mac OS X\n /// defaults the rlimit maxfiles to 256/unlimited. The default soft limit of 256\n /// ends up being far too low for our multithreaded scheduler testing, depending\n@@ -6,10 +16,15 @@\n /// This fixes issue #7772.\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n #[allow(non_camel_case_types)]\n-pub fn raise_fd_limit() {\n+pub unsafe fn raise_fd_limit() {\n     use libc;\n+    use std::cmp;\n+    use std::io;\n+    use std::mem::size_of_val;\n+    use std::ptr::null_mut;\n \n     type rlim_t = libc::uint64_t;\n+\n     #[repr(C)]\n     struct rlimit {\n         rlim_cur: rlim_t,\n@@ -31,9 +46,6 @@ pub fn raise_fd_limit() {\n     // The strategy here is to fetch the current resource limits, read the\n     // kern.maxfilesperproc sysctl value, and bump the soft resource limit for\n     // maxfiles up to the sysctl value.\n-    use ptr::null_mut;\n-    use mem::size_of_val;\n-    use io;\n \n     // Fetch the kern.maxfilesperproc value\n     let mut mib: [libc::c_int; 2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n@@ -54,7 +66,7 @@ pub fn raise_fd_limit() {\n \n     // Bump the soft limit to the smaller of kern.maxfilesperproc and the hard\n     // limit\n-    rlim.rlim_cur = ::cmp::min(maxfiles as rlim_t, rlim.rlim_max);\n+    rlim.rlim_cur = cmp::min(maxfiles as rlim_t, rlim.rlim_max);\n \n     // Set our newly-increased resource limit\n     if setrlimit(RLIMIT_NOFILE, &rlim) != 0 {\n@@ -64,4 +76,4 @@ pub fn raise_fd_limit() {\n }\n \n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n-pub fn raise_fd_limit() {}\n+pub unsafe fn raise_fd_limit() {}"}, {"sha": "4e150d4a222341cc456eafb31a45747bbf78e1fe", "filename": "src/libcollectionstest/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbench.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -74,7 +74,7 @@ macro_rules! map_find_rand_bench {\n             let n: usize = $n;\n \n             // setup\n-            let mut rng = rand::thread_rng();\n+            let mut rng = thread_rng();\n             let mut keys: Vec<_> = (0..n).map(|_| rng.gen::<usize>() % n).collect();\n \n             for &k in &keys {"}, {"sha": "d020f551dd55dcd842df23048ce9db885ef4f6ad", "filename": "src/libcollectionstest/bit/set.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbit%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbit%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbit%2Fset.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -389,16 +389,15 @@ fn test_bit_vec_clone() {\n \n mod bench {\n     use std::collections::{BitSet, BitVec};\n-    use std::rand::{Rng, self};\n+    use std::__rand::{Rng, thread_rng, ThreadRng};\n     use std::u32;\n \n     use test::{Bencher, black_box};\n \n     const BENCH_BITS : usize = 1 << 14;\n \n-    fn rng() -> rand::IsaacRng {\n-        let seed: &[_] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n-        rand::SeedableRng::from_seed(seed)\n+    fn rng() -> ThreadRng {\n+        thread_rng()\n     }\n \n     #[bench]"}, {"sha": "3cddaef07915ef6a03d7a8620d4d223c4d2d5ef6", "filename": "src/libcollectionstest/bit/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbit%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbit%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbit%2Fvec.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -633,7 +633,7 @@ fn test_bit_vec_extend() {\n mod bench {\n     use std::collections::BitVec;\n     use std::u32;\n-    use std::__rand::{Rng, thread_rng};\n+    use std::__rand::{Rng, thread_rng, ThreadRng};\n \n     use test::{Bencher, black_box};\n "}, {"sha": "a29968ae8a2fc5f03eb01fbd2872ca1b5307e6da", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -251,7 +251,7 @@ fn test_entry(){\n \n mod bench {\n     use std::collections::BTreeMap;\n-    use std::rand::{Rng, thread_rng};\n+    use std::__rand::{Rng, thread_rng};\n \n     use test::{Bencher, black_box};\n "}, {"sha": "e1c4e05e192c7f85df4b18f935518b185b6ab466", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -12,7 +12,7 @@ use std::cmp::Ordering::{Equal, Greater, Less};\n use std::default::Default;\n use std::iter::RandomAccessIterator;\n use std::mem;\n-use std::rand::{Rng, thread_rng};\n+use std::__rand::{Rng, thread_rng};\n use std::rc::Rc;\n use std::slice::ElementSwaps;\n \n@@ -1296,7 +1296,7 @@ fn test_to_vec() {\n mod bench {\n     use std::iter::repeat;\n     use std::{mem, ptr};\n-    use std::rand::{Rng, thread_rng};\n+    use std::__rand::{Rng, thread_rng};\n \n     use test::{Bencher, black_box};\n "}, {"sha": "53ea28f0c11d3998a29d22d19ab6ea3f86b71d7f", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -379,7 +379,7 @@ pub struct Closed01<F>(pub F);\n mod test {\n     use std::__rand as rand;\n \n-    pub struct MyRng { inner: Box<rand::Rng> }\n+    pub struct MyRng<R> { inner: R }\n \n     impl<R: rand::Rng> ::Rng for MyRng<R> {\n         fn next_u32(&mut self) -> u32 {\n@@ -388,10 +388,10 @@ mod test {\n     }\n \n     pub fn rng() -> MyRng<rand::ThreadRng> {\n-        MyRng { inner: Box::new(rand::thread_rng()) }\n+        MyRng { inner: rand::thread_rng() }\n     }\n \n     pub fn weak_rng() -> MyRng<rand::ThreadRng> {\n-        MyRng { inner: Box::new(rand::thread_rng()) }\n+        MyRng { inner: rand::thread_rng() }\n     }\n }"}, {"sha": "2ab4d7ff78a1d256edc6fad38d6e96b17e308412", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -8,43 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc;\n use std::io;\n use std::path::{Path, PathBuf};\n \n #[cfg(windows)]\n pub fn realpath(original: &Path) -> io::Result<PathBuf> {\n-    use std::fs::File;\n-    use std::ffi::OsString;\n-    use std::os::windows::prelude::*;\n-\n-    extern \"system\" {\n-        fn GetFinalPathNameByHandleW(hFile: libc::HANDLE,\n-                                     lpszFilePath: libc::LPCWSTR,\n-                                     cchFilePath: libc::DWORD,\n-                                     dwFlags: libc::DWORD) -> libc::DWORD;\n-    }\n-\n-    let mut v = Vec::with_capacity(16 * 1024);\n-    let f = try!(File::open(original));\n-    unsafe {\n-        let ret = GetFinalPathNameByHandleW(f.as_raw_handle(),\n-                                            v.as_mut_ptr(),\n-                                            v.capacity() as libc::DWORD,\n-                                            libc::VOLUME_NAME_DOS);\n-        if ret == 0 {\n-            return Err(io::Error::last_os_error())\n-        }\n-        assert!((ret as usize) < v.capacity());\n-        v.set_len(ret);\n-    }\n-    Ok(PathBuf::from(OsString::from_wide(&v)))\n+    Ok(original.to_path_buf())\n }\n \n #[cfg(unix)]\n pub fn realpath(original: &Path) -> io::Result<PathBuf> {\n-    use std::os::unix::prelude::*;\n+    use libc;\n     use std::ffi::{OsString, CString};\n+    use std::os::unix::prelude::*;\n \n     extern {\n         fn realpath(pathname: *const libc::c_char, resolved: *mut libc::c_char)"}, {"sha": "df7cedd1c293890adc17ccb1114204d6d66ef3ce", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -20,7 +20,7 @@\n \n extern crate libc;\n \n-use std::process::{self, Command, Child, Output};\n+use std::process::{self, Command, Child, Output, Stdio};\n use std::str;\n use std::sync::mpsc::channel;\n use std::thread;\n@@ -68,7 +68,9 @@ fn test_destroy_actually_kills() {\n     static BLOCK_COMMAND: &'static str = \"cmd\";\n \n     // this process will stay alive indefinitely trying to read from stdin\n-    let mut p = Command::new(BLOCK_COMMAND).spawn().unwrap();\n+    let mut p = Command::new(BLOCK_COMMAND)\n+                        .stdin(Stdio::piped())\n+                        .spawn().unwrap();\n \n     p.kill().unwrap();\n \n@@ -80,6 +82,11 @@ fn test_destroy_actually_kills() {\n             process::exit(1);\n         }\n     });\n-    assert!(p.wait().unwrap().code().is_none());\n+    let code = p.wait().unwrap().code();\n+    if cfg!(windows) {\n+        assert!(code.is_some());\n+    } else {\n+        assert!(code.is_none());\n+    }\n     tx.send(());\n }"}, {"sha": "aaf5eb6f2a14ba03f29c05f30f40b246b007c598", "filename": "src/test/run-pass/drop-flag-skip-sanity-check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -17,8 +17,6 @@\n //\n // See also drop-flag-sanity-check.rs.\n \n-#![feature(old_io)]\n-\n use std::env;\n use std::process::Command;\n \n@@ -28,9 +26,9 @@ fn main() {\n         return test();\n     }\n \n-    let mut p = Command::new(&args[0]).arg(\"test\").spawn().unwrap();\n+    let s = Command::new(&args[0]).arg(\"test\").status().unwrap();\n     // Invocatinn should succeed as drop-flag sanity check is skipped.\n-    assert!(p.wait().unwrap().success());\n+    assert!(s.success());\n }\n \n #[derive(Debug)]"}, {"sha": "9292a9c608eb9fbd028b0008548a07780f09f0e2", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n use std::sync::mpsc::channel;\n use std::thread;\n "}, {"sha": "394fd84781d590d0a6de43301889fb64965d8e65", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n use std::sync::mpsc::{TryRecvError, channel};\n use std::thread;\n "}, {"sha": "c47b95bec2b52daaad2ccb4ce63fd519f76f2302", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8760afe478f5f2e10687b70146ac7123df2319b/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=b8760afe478f5f2e10687b70146ac7123df2319b", "patch": "@@ -8,65 +8,46 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-linux see joyent/libuv#1189\n // ignore-android needs extra network permissions\n // ignore-openbsd system ulimit (Too many open files)\n // ignore-bitrig system ulimit (Too many open files)\n-// exec-env:RUST_LOG=debug\n-\n-#![feature(rustc_private, libc, old_io, io, std_misc)]\n-#![allow(deprecated, unused_must_use)]\n-\n-#[macro_use]\n-extern crate log;\n-extern crate libc;\n \n+use std::io::prelude::*;\n+use std::net::{TcpListener, TcpStream};\n+use std::process;\n use std::sync::mpsc::channel;\n-use std::old_io::net::tcp::{TcpListener, TcpStream};\n-use std::old_io::{Acceptor, Listener, Reader, Writer};\n use std::thread::{self, Builder};\n-use std::time::Duration;\n \n fn main() {\n     // This test has a chance to time out, try to not let it time out\n     thread::spawn(move|| -> () {\n-        use std::old_io::timer;\n-        timer::sleep(Duration::milliseconds(30 * 1000));\n-        println!(\"timed out!\");\n-        unsafe { libc::exit(1) }\n+        thread::sleep_ms(30 * 1000);\n+        process::exit(1);\n     });\n \n-    let (tx, rx) = channel();\n+    let mut listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n+    let addr = listener.local_addr().unwrap();\n     thread::spawn(move || -> () {\n-        let mut listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n-        tx.send(listener.socket_name().unwrap()).unwrap();\n-        let mut acceptor = listener.listen();\n         loop {\n-            let mut stream = match acceptor.accept() {\n-                Ok(stream) => stream,\n-                Err(error) => {\n-                    debug!(\"accept panicked: {}\", error);\n-                    continue;\n-                }\n+            let mut stream = match listener.accept() {\n+                Ok(stream) => stream.0,\n+                Err(error) => continue,\n             };\n-            stream.read_byte();\n+            stream.read(&mut [0]);\n             stream.write(&[2]);\n         }\n     });\n-    let addr = rx.recv().unwrap();\n \n     let (tx, rx) = channel();\n     for _ in 0..1000 {\n         let tx = tx.clone();\n         Builder::new().stack_size(64 * 1024).spawn(move|| {\n             match TcpStream::connect(addr) {\n-                Ok(stream) => {\n-                    let mut stream = stream;\n+                Ok(mut stream) => {\n                     stream.write(&[1]);\n-                    let mut buf = [0];\n-                    stream.read(&mut buf);\n+                    stream.read(&mut [0]);\n                 },\n-                Err(e) => debug!(\"{}\", e)\n+                Err(..) => {}\n             }\n             tx.send(()).unwrap();\n         });\n@@ -78,5 +59,5 @@ fn main() {\n     for _ in 0..1000 {\n         rx.recv().unwrap();\n     }\n-    unsafe { libc::exit(0) }\n+    process::exit(0);\n }"}]}