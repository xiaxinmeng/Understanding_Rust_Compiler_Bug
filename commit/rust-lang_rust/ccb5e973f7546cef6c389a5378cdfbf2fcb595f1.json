{"sha": "ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjVlOTczZjc1NDZjZWY2YzM4OWE1Mzc4Y2RmYmYyZmNiNTk1ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-20T05:57:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-20T05:57:41Z"}, "message": "Auto merge of #50820 - alexcrichton:no-modules, r=petrochenkov\n\nrustc: Disallow modules and macros in expansions\n\nThis commit feature gates generating modules and macro definitions in procedural\nmacro expansions. Custom derive is exempt from this check as it would be a large\nretroactive breaking change (#50587). It's hoped that we can hopefully stem the\nbleeding to figure out a better solution here before opening up the floodgates.\n\nThe restriction here is specifically targeted at surprising hygiene results [1]\nthat result in non-\"copy/paste\" behavior. Hygiene and procedural macros is\nintended to be avoided as much as possible for Macros 1.2 by saying everything\nis \"as if you copy/pasted the code\", but modules and macros are sort of weird\nexceptions to this rule that aren't fully fleshed out.\n\n[1]: https://github.com/rust-lang/rust/issues/50504#issuecomment-387734625\n\ncc #50504", "tree": {"sha": "0f52d956edc7676181f0b045f19943fdf526a8a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f52d956edc7676181f0b045f19943fdf526a8a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "html_url": "https://github.com/rust-lang/rust/commit/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522aa5e00bde42fa8ad380b30763ed4921a7c3a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/522aa5e00bde42fa8ad380b30763ed4921a7c3a0", "html_url": "https://github.com/rust-lang/rust/commit/522aa5e00bde42fa8ad380b30763ed4921a7c3a0"}, {"sha": "5e4bac31b82241db4ca8e9234a4f368c30e8966a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4bac31b82241db4ca8e9234a4f368c30e8966a", "html_url": "https://github.com/rust-lang/rust/commit/5e4bac31b82241db4ca8e9234a4f368c30e8966a"}], "stats": {"total": 159, "additions": 153, "deletions": 6}, "files": [{"sha": "146db632c07bae6c12b33bc92db529764843be34", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "patch": "@@ -21,7 +21,7 @@ use ext::placeholders::{placeholder, PlaceholderExpander};\n use feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use fold;\n use fold::*;\n-use parse::{DirectoryOwnership, PResult};\n+use parse::{DirectoryOwnership, PResult, ParseSess};\n use parse::token::{self, Token};\n use parse::parser::Parser;\n use ptr::P;\n@@ -31,7 +31,7 @@ use syntax_pos::{Span, DUMMY_SP, FileName};\n use syntax_pos::hygiene::ExpnFormat;\n use tokenstream::{TokenStream, TokenTree};\n use util::small_vector::SmallVector;\n-use visit::Visitor;\n+use visit::{self, Visitor};\n \n use std::collections::HashMap;\n use std::fs::File;\n@@ -533,7 +533,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 })).into();\n                 let input = self.extract_proc_macro_attr_input(attr.tokens, attr.span);\n                 let tok_result = mac.expand(self.cx, attr.span, input, item_tok);\n-                self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n+                let res = self.parse_expansion(tok_result, kind, &attr.path, attr.span);\n+                self.gate_proc_macro_expansion(attr.span, &res);\n+                res\n             }\n             ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", attr.path));\n@@ -592,6 +594,50 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         );\n     }\n \n+    fn gate_proc_macro_expansion(&self, span: Span, expansion: &Option<Expansion>) {\n+        if self.cx.ecfg.proc_macro_gen() {\n+            return\n+        }\n+        let expansion = match expansion {\n+            Some(expansion) => expansion,\n+            None => return,\n+        };\n+\n+        expansion.visit_with(&mut DisallowModules {\n+            span,\n+            parse_sess: self.cx.parse_sess,\n+        });\n+\n+        struct DisallowModules<'a> {\n+            span: Span,\n+            parse_sess: &'a ParseSess,\n+        }\n+\n+        impl<'ast, 'a> Visitor<'ast> for DisallowModules<'a> {\n+            fn visit_item(&mut self, i: &'ast ast::Item) {\n+                let name = match i.node {\n+                    ast::ItemKind::Mod(_) => Some(\"modules\"),\n+                    ast::ItemKind::MacroDef(_) => Some(\"macro definitions\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = name {\n+                    emit_feature_err(\n+                        self.parse_sess,\n+                        \"proc_macro_gen\",\n+                        self.span,\n+                        GateIssue::Language,\n+                        &format!(\"procedural macros cannot expand to {}\", name),\n+                    );\n+                }\n+                visit::walk_item(self, i);\n+            }\n+\n+            fn visit_mac(&mut self, _mac: &'ast ast::Mac) {\n+                // ...\n+            }\n+        }\n+    }\n+\n     /// Expand a macro invocation. Returns the result of expansion.\n     fn expand_bang_invoc(&mut self,\n                          invoc: Invocation,\n@@ -740,7 +786,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     });\n \n                     let tok_result = expandfun.expand(self.cx, span, mac.node.stream());\n-                    self.parse_expansion(tok_result, kind, path, span)\n+                    let result = self.parse_expansion(tok_result, kind, path, span);\n+                    self.gate_proc_macro_expansion(span, &result);\n+                    result\n                 }\n             }\n         };\n@@ -823,7 +871,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     span: DUMMY_SP,\n                     node: ast::MetaItemKind::Word,\n                 };\n-                Some(kind.expect_from_annotatables(ext.expand(self.cx, span, &dummy, item)))\n+                let items = ext.expand(self.cx, span, &dummy, item);\n+                Some(kind.expect_from_annotatables(items))\n             }\n             BuiltinDerive(func) => {\n                 expn_info.callee.allow_internal_unstable = true;\n@@ -1500,6 +1549,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn proc_macro_enabled = proc_macro,\n         fn macros_in_extern_enabled = macros_in_extern,\n         fn proc_macro_mod = proc_macro_mod,\n+        fn proc_macro_gen = proc_macro_gen,\n         fn proc_macro_expr = proc_macro_expr,\n         fn proc_macro_non_items = proc_macro_non_items,\n     }"}, {"sha": "604df862dc25bf959bd33ce4a614e277e8ca7606", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "patch": "@@ -451,6 +451,7 @@ declare_features! (\n     (active, proc_macro_mod, \"1.27.0\", None, None),\n     (active, proc_macro_expr, \"1.27.0\", None, None),\n     (active, proc_macro_non_items, \"1.27.0\", None, None),\n+    (active, proc_macro_gen, \"1.27.0\", None, None),\n \n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),"}, {"sha": "def12f8e4ec8571ab55164f1791f9a373b55dde8", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/more-gates.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs?ref=ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn attr2mod(_: TokenStream, _: TokenStream) -> TokenStream {\n+    \"mod test {}\".parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr2mac1(_: TokenStream, _: TokenStream) -> TokenStream {\n+    \"macro_rules! foo1 { (a) => (a) }\".parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr2mac2(_: TokenStream, _: TokenStream) -> TokenStream {\n+    \"macro foo2(a) { a }\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn mac2mod(_: TokenStream) -> TokenStream {\n+    \"mod test2 {}\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn mac2mac1(_: TokenStream) -> TokenStream {\n+    \"macro_rules! foo3 { (a) => (a) }\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn mac2mac2(_: TokenStream) -> TokenStream {\n+    \"macro foo4(a) { a }\".parse().unwrap()\n+}\n+\n+#[proc_macro]\n+pub fn tricky(_: TokenStream) -> TokenStream {\n+    \"fn foo() {\n+        mod test {}\n+        macro_rules! foo { (a) => (a) }\n+    }\".parse().unwrap()\n+}"}, {"sha": "a799f79ef70f30e38d0388a2486016ef62b49f6f", "filename": "src/test/compile-fail-fulldeps/proc-macro/more-gates.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmore-gates.rs?ref=ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:more-gates.rs\n+\n+#![feature(proc_macro)]\n+\n+extern crate more_gates as foo;\n+\n+use foo::*;\n+\n+#[attr2mod]\n+//~^ ERROR: cannot expand to modules\n+pub fn a() {}\n+#[attr2mac1]\n+//~^ ERROR: cannot expand to macro definitions\n+pub fn a() {}\n+#[attr2mac2]\n+//~^ ERROR: cannot expand to macro definitions\n+pub fn a() {}\n+\n+mac2mod!(); //~ ERROR: cannot expand to modules\n+mac2mac1!(); //~ ERROR: cannot expand to macro definitions\n+mac2mac2!(); //~ ERROR: cannot expand to macro definitions\n+\n+tricky!();\n+//~^ ERROR: cannot expand to modules\n+//~| ERROR: cannot expand to macro definitions\n+\n+fn main() {}"}, {"sha": "70b2b5fdd336dc3798f717e69cc7e31debee49b2", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "patch": "@@ -14,6 +14,7 @@\n // gate-test-proc_macro_mod line\n // gate-test-proc_macro_expr\n // gate-test-proc_macro_mod\n+// gate-test-proc_macro_gen\n \n #![feature(proc_macro, stmt_expr_attributes)]\n \n@@ -29,10 +30,12 @@ fn _test_inner() {\n }\n \n #[a] //~ ERROR: custom attributes cannot be applied to modules\n+//~| ERROR: procedural macros cannot expand to modules\n mod _test2 {}\n \n mod _test2_inner {\n     #![a] //~ ERROR: custom attributes cannot be applied to modules\n+    //~| ERROR: procedural macros cannot expand to modules\n }\n \n #[a = y] //~ ERROR: must only be followed by a delimiter token"}, {"sha": "2349fa68c65f0b5ce28e5c12c0d260acf08ea800", "filename": "src/test/run-pass-fulldeps/macro-quote-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5e973f7546cef6c389a5378cdfbf2fcb595f1/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs?ref=ccb5e973f7546cef6c389a5378cdfbf2fcb595f1", "patch": "@@ -13,7 +13,7 @@\n // aux-build:hello_macro.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(use_extern_macros, proc_macro_non_items, proc_macro_gen)]\n \n extern crate hello_macro;\n "}]}