{"sha": "e5ce7a9846ee9479549d153101351f917f858f02", "node_id": "C_kwDOAAsO6NoAKGU1Y2U3YTk4NDZlZTk0Nzk1NDlkMTUzMTAxMzUxZjkxN2Y4NThmMDI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-09T18:05:44Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-09T18:24:35Z"}, "message": "Fix simd_select_bitmask", "tree": {"sha": "fe89113f28785c9924abac2cc8a883d9fab43f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe89113f28785c9924abac2cc8a883d9fab43f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ce7a9846ee9479549d153101351f917f858f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ce7a9846ee9479549d153101351f917f858f02", "html_url": "https://github.com/rust-lang/rust/commit/e5ce7a9846ee9479549d153101351f917f858f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ce7a9846ee9479549d153101351f917f858f02/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fd2d3c9c58124b3038ff1e575d054660d836ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fd2d3c9c58124b3038ff1e575d054660d836ab", "html_url": "https://github.com/rust-lang/rust/commit/04fd2d3c9c58124b3038ff1e575d054660d836ab"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "adcd6235b7096be12dbeb5ae1369972f3d44ffff", "filename": "src/builder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5ce7a9846ee9479549d153101351f917f858f02/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ce7a9846ee9479549d153101351f917f858f02/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=e5ce7a9846ee9479549d153101351f917f858f02", "patch": "@@ -1597,7 +1597,6 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-\n     pub fn vector_select(&mut self, cond: RValue<'gcc>, then_val: RValue<'gcc>, else_val: RValue<'gcc>) -> RValue<'gcc> {\n         // cond is a vector of integers, not of bools.\n         let cond_type = cond.get_type();\n@@ -1607,10 +1606,12 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         let zeros = vec![self.context.new_rvalue_zero(element_type); num_units];\n         let zeros = self.context.new_rvalue_from_vector(None, cond_type, &zeros);\n \n+        let result_type = then_val.get_type();\n+\n         let masks = self.context.new_comparison(None, ComparisonOp::NotEquals, cond, zeros);\n         // NOTE: masks is a vector of integers, but the values can be vectors of floats, so use bitcast to make\n         // the & operation work.\n-        let masks = self.bitcast_if_needed(masks, then_val.get_type());\n+        let then_val = self.bitcast_if_needed(then_val, masks.get_type());\n         let then_vals = masks & then_val;\n \n         let minus_ones = vec![self.context.new_rvalue_from_int(element_type, -1); num_units];\n@@ -1623,7 +1624,8 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         let else_val = self.context.new_bitcast(None, else_val, then_val.get_type());\n         let else_vals = inverted_masks & else_val;\n \n-        then_vals | else_vals\n+        let res = then_vals | else_vals;\n+        self.bitcast_if_needed(res, result_type)\n     }\n }\n "}, {"sha": "fbfcebe46a13e589b04a0aab703cabf05e43d897", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5ce7a9846ee9479549d153101351f917f858f02/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ce7a9846ee9479549d153101351f917f858f02/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=e5ce7a9846ee9479549d153101351f917f858f02", "patch": "@@ -93,14 +93,19 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let arg1_vector_type = arg1_type.unqualified().dyncast_vector().expect(\"vector type\");\n         let arg1_element_type = arg1_vector_type.get_element_type();\n \n+        // NOTE: since the arguments can be vectors of floats, make sure the mask is a vector of\n+        // integer.\n+        let mask_element_type = bx.type_ix(arg1_element_type.get_size() as u64 * 8);\n+        let vector_mask_type = bx.context.new_vector_type(mask_element_type, arg1_vector_type.get_num_units() as u64);\n+\n         let mut elements = vec![];\n         let one = bx.context.new_rvalue_one(mask.get_type());\n         for _ in 0..len {\n-            let element = bx.context.new_cast(None, mask & one, arg1_element_type);\n+            let element = bx.context.new_cast(None, mask & one, mask_element_type);\n             elements.push(element);\n             mask = mask >> one;\n         }\n-        let vector_mask = bx.context.new_rvalue_from_vector(None, arg1_type, &elements);\n+        let vector_mask = bx.context.new_rvalue_from_vector(None, vector_mask_type, &elements);\n \n         return Ok(bx.vector_select(vector_mask, arg1, args[2].immediate()));\n     }"}]}