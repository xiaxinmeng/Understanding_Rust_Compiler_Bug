{"sha": "85afb907889565c69cf8477ad09d52f94744bd54", "node_id": "C_kwDOAAsO6NoAKDg1YWZiOTA3ODg5NTY1YzY5Y2Y4NDc3YWQwOWQ1MmY5NDc0NGJkNTQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-26T04:12:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-26T04:12:23Z"}, "message": "Rollup merge of #99718 - TaKO8Ki:avoid-&str-symbol-to-string-conversions, r=michaelwoerister\n\nAvoid `&str`/`Symbol` to `String` conversions\n\nfollow-up to #99342 and #98668", "tree": {"sha": "607765b7bf22fd9b2088498d176110809c755372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607765b7bf22fd9b2088498d176110809c755372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85afb907889565c69cf8477ad09d52f94744bd54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi32mnCRBK7hj4Ov3rIwAAGWIIAD56XLpdHO5O3O9duXGf++oX\nIJtEb24QlIriDnwR328retyZ5gDAL7FmqeTtET0npR6wE1l6S0a/GYhyGQEqHULt\nJt7nHmJqyl2hC5snq+3Y2v7gVv6qBGXXu4U9lFTBLHdPHfB5cwcd9JMD8RxEGEIA\nW5hLQhMPF+AFCbfsidCFQBa2K3x3D3i/dcdSyqILO1Av445+FJAoZMe/sRhKsiWV\nlyiVcarLpi3WDMNBLpWA91/6Zuo/+54nbAchGE0igBPou36NewpUlGpm49Ud/rhs\nYeFwTlJGlyFfHpfR9ldcSd3ABeyvCIi9s5aljNMga5bzAxZJXSp2oOae8NfXKd8=\n=YoqH\n-----END PGP SIGNATURE-----\n", "payload": "tree 607765b7bf22fd9b2088498d176110809c755372\nparent 3c1eef2e91dda0b97aa604e519ebb5fc98fbdbb2\nparent 051e98b7bf7a2ab095516a9b3912d6120b5b8c91\nauthor Yuki Okushi <jtitor@2k36.org> 1658808743 +0900\ncommitter GitHub <noreply@github.com> 1658808743 +0900\n\nRollup merge of #99718 - TaKO8Ki:avoid-&str-symbol-to-string-conversions, r=michaelwoerister\n\nAvoid `&str`/`Symbol` to `String` conversions\n\nfollow-up to #99342 and #98668\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85afb907889565c69cf8477ad09d52f94744bd54", "html_url": "https://github.com/rust-lang/rust/commit/85afb907889565c69cf8477ad09d52f94744bd54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85afb907889565c69cf8477ad09d52f94744bd54/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1eef2e91dda0b97aa604e519ebb5fc98fbdbb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1eef2e91dda0b97aa604e519ebb5fc98fbdbb2", "html_url": "https://github.com/rust-lang/rust/commit/3c1eef2e91dda0b97aa604e519ebb5fc98fbdbb2"}, {"sha": "051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "html_url": "https://github.com/rust-lang/rust/commit/051e98b7bf7a2ab095516a9b3912d6120b5b8c91"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "1d66153734c782f36d0217ecf35e29615ff5379f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -850,13 +850,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             debug!(\"trait spans found: {:?}\", traits);\n             for span in &traits {\n                 let mut multi_span: MultiSpan = vec![*span].into();\n-                multi_span.push_span_label(\n-                    *span,\n-                    \"this has an implicit `'static` lifetime requirement\".to_string(),\n-                );\n+                multi_span\n+                    .push_span_label(*span, \"this has an implicit `'static` lifetime requirement\");\n                 multi_span.push_span_label(\n                     ident.span,\n-                    \"calling this method introduces the `impl`'s 'static` requirement\".to_string(),\n+                    \"calling this method introduces the `impl`'s 'static` requirement\",\n                 );\n                 err.span_note(multi_span, \"the used `impl` has a `'static` requirement\");\n                 err.span_suggestion_verbose("}, {"sha": "3435f127c72e2420306ef0895b5cdf9dbd7ee30a", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -951,7 +951,7 @@ fn adt_defined_here<'p, 'tcx>(\n         let mut span: MultiSpan =\n             if spans.is_empty() { def_span.into() } else { spans.clone().into() };\n \n-        span.push_span_label(def_span, String::new());\n+        span.push_span_label(def_span, \"\");\n         for pat in spans {\n             span.push_span_label(pat, \"not covered\");\n         }"}, {"sha": "8a655cbf3845ad68a182ec1578b86f1e4a48cd1c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -565,8 +565,7 @@ impl<'a> Resolver<'a> {\n                     } else if let Some(sp) = sm.generate_fn_name_span(span) {\n                         err.span_label(\n                             sp,\n-                            \"try adding a local generic parameter in this method instead\"\n-                                .to_string(),\n+                            \"try adding a local generic parameter in this method instead\",\n                         );\n                     } else {\n                         err.help(\"try using a local generic parameter instead\");"}, {"sha": "47159584afe3b3780f7113fa748e0a6a1ad7e36f", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -586,17 +586,6 @@ impl SourceMap {\n         }\n     }\n \n-    /// Returns whether or not this span points into a file\n-    /// in the current crate. This may be `false` for spans\n-    /// produced by a macro expansion, or for spans associated\n-    /// with the definition of an item in a foreign crate\n-    pub fn is_local_span(&self, sp: Span) -> bool {\n-        let local_begin = self.lookup_byte_offset(sp.lo());\n-        let local_end = self.lookup_byte_offset(sp.hi());\n-        // This might be a weird span that covers multiple files\n-        local_begin.sf.src.is_some() && local_end.sf.src.is_some()\n-    }\n-\n     pub fn is_span_accessible(&self, sp: Span) -> bool {\n         self.span_to_source(sp, |src, start_index, end_index| {\n             Ok(src.get(start_index..end_index).is_some())"}, {"sha": "99a8101dc96ba3b60239fc167345fed08b70ab67", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty;\n use rustc_session::parse::feature_err;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n \n use std::collections::BTreeSet;\n \n@@ -17,7 +17,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// the type parameter's name as a placeholder.\n     pub(crate) fn complain_about_missing_type_params(\n         &self,\n-        missing_type_params: Vec<String>,\n+        missing_type_params: Vec<Symbol>,\n         def_id: DefId,\n         span: Span,\n         empty_generic_args: bool,"}, {"sha": "58f4f02052f8bd64a7c9d964311fb73263a5e32a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -382,7 +382,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             def_id: DefId,\n             generic_args: &'a GenericArgs<'a>,\n             span: Span,\n-            missing_type_params: Vec<String>,\n+            missing_type_params: Vec<Symbol>,\n             inferred_params: Vec<Span>,\n             infer_args: bool,\n             is_object: bool,\n@@ -514,7 +514,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             // defaults. This will lead to an ICE if we are not\n                             // careful!\n                             if self.default_needs_object_self(param) {\n-                                self.missing_type_params.push(param.name.to_string());\n+                                self.missing_type_params.push(param.name);\n                                 tcx.ty_error().into()\n                             } else {\n                                 // This is a default type parameter."}, {"sha": "0438ac02ea91a75fed88aa5e83d42b617667afa2", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85afb907889565c69cf8477ad09d52f94744bd54/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=85afb907889565c69cf8477ad09d52f94744bd54", "patch": "@@ -244,7 +244,7 @@ pub struct UnconstrainedOpaqueType {\n pub struct MissingTypeParams {\n     pub span: Span,\n     pub def_span: Span,\n-    pub missing_type_params: Vec<String>,\n+    pub missing_type_params: Vec<Symbol>,\n     pub empty_generic_args: bool,\n }\n \n@@ -285,7 +285,15 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 err.span_suggestion(\n                     self.span,\n                     rustc_errors::fluent::typeck::suggestion,\n-                    format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n+                    format!(\n+                        \"{}<{}>\",\n+                        snippet,\n+                        self.missing_type_params\n+                            .iter()\n+                            .map(|n| n.to_string())\n+                            .collect::<Vec<_>>()\n+                            .join(\", \")\n+                    ),\n                     Applicability::HasPlaceholders,\n                 );\n                 suggested = true;"}]}