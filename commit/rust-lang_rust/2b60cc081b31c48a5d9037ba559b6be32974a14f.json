{"sha": "2b60cc081b31c48a5d9037ba559b6be32974a14f", "node_id": "C_kwDOAAsO6NoAKDJiNjBjYzA4MWIzMWM0OGE1ZDkwMzdiYTU1OWI2YmUzMjk3NGExNGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-25T05:23:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-29T23:42:34Z"}, "message": "Simplify and rename `count_names`.", "tree": {"sha": "13d4346cef347fc4b445db298be4a9ca1daf1084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d4346cef347fc4b445db298be4a9ca1daf1084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b60cc081b31c48a5d9037ba559b6be32974a14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b60cc081b31c48a5d9037ba559b6be32974a14f", "html_url": "https://github.com/rust-lang/rust/commit/2b60cc081b31c48a5d9037ba559b6be32974a14f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b60cc081b31c48a5d9037ba559b6be32974a14f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6ead557d6c1f2ec87793d95b8a8bc9453e0f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6ead557d6c1f2ec87793d95b8a8bc9453e0f66", "html_url": "https://github.com/rust-lang/rust/commit/df6ead557d6c1f2ec87793d95b8a8bc9453e0f66"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "9d134e398ccdc439046330e75f4ab7c299eccced", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b60cc081b31c48a5d9037ba559b6be32974a14f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60cc081b31c48a5d9037ba559b6be32974a14f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=2b60cc081b31c48a5d9037ba559b6be32974a14f", "patch": "@@ -177,7 +177,7 @@ impl<'tt> MatcherPos<'tt> {\n     /// Generates the top-level matcher position in which the \"dot\" is before the first token of\n     /// the matcher `ms`.\n     fn new(ms: &'tt [TokenTree]) -> Self {\n-        let match_idx_hi = count_names(ms);\n+        let match_idx_hi = count_metavar_decls(ms);\n         MatcherPos {\n             // Start with the top level matcher given to us.\n             top_elts: ms,\n@@ -254,24 +254,24 @@ crate enum ParseResult<T> {\n /// of metavars to the token trees they bind to.\n crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;\n \n-/// Count how many metavars are named in the given matcher `ms`.\n-pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n-    ms.iter().fold(0, |count, elt| {\n-        count\n-            + match elt {\n-                TokenTree::Delimited(_, delim) => count_names(delim.inner_tts()),\n+/// Count how many metavars declarations are in `matcher`.\n+pub(super) fn count_metavar_decls(matcher: &[TokenTree]) -> usize {\n+    matcher\n+        .iter()\n+        .map(|tt| {\n+            match tt {\n+                TokenTree::Delimited(_, delim) => count_metavar_decls(delim.inner_tts()),\n                 TokenTree::MetaVar(..) => 0,\n                 TokenTree::MetaVarDecl(..) => 1,\n-                // Panicking here would abort execution because `parse_tree` makes use of this\n-                // function. In other words, RHS meta-variable expressions eventually end-up here.\n-                //\n-                // `0` is still returned to inform that no meta-variable was found. `Meta-variables\n-                // != Meta-variable expressions`\n+                // RHS meta-variable expressions eventually end-up here. `0` is returned to inform\n+                // that no meta-variable was found, because \"meta-variables\" != \"meta-variable\n+                // expressions\".\n                 TokenTree::MetaVarExpr(..) => 0,\n                 TokenTree::Sequence(_, seq) => seq.num_captures,\n                 TokenTree::Token(..) => 0,\n             }\n-    })\n+        })\n+        .sum()\n }\n \n /// `NamedMatch` is a pattern-match result for a single metavar. All"}, {"sha": "d91871c7e57db143be6791bd2e8e86a81c5f2a85", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b60cc081b31c48a5d9037ba559b6be32974a14f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b60cc081b31c48a5d9037ba559b6be32974a14f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=2b60cc081b31c48a5d9037ba559b6be32974a14f", "patch": "@@ -211,7 +211,7 @@ fn parse_tree(\n                     let (separator, kleene) =\n                         parse_sep_and_kleene_op(&mut trees, delim_span.entire(), sess);\n                     // Count the number of captured \"names\" (i.e., named metavars)\n-                    let name_captures = macro_parser::count_names(&sequence);\n+                    let name_captures = macro_parser::count_metavar_decls(&sequence);\n                     TokenTree::Sequence(\n                         delim_span,\n                         Lrc::new(SequenceRepetition {"}]}