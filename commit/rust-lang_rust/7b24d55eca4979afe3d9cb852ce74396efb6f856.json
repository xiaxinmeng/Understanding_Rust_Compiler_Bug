{"sha": "7b24d55eca4979afe3d9cb852ce74396efb6f856", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMjRkNTVlY2E0OTc5YWZlM2Q5Y2I4NTJjZTc0Mzk2ZWZiNmY4NTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-07T08:12:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-07T08:12:15Z"}, "message": "address comments", "tree": {"sha": "98a297a5b8edabc5274779f60e9b4186b60cfc62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a297a5b8edabc5274779f60e9b4186b60cfc62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b24d55eca4979afe3d9cb852ce74396efb6f856", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXz8vfAAoJEFbW7qD8Z6xGMWUP/3kJMInfsrfhFJ3IiXSHZZ9R\nYRN5FRgF37AF/X65AqtEqrtur2pZkOy6Uo300QnHa6PJYmvQzprj28W6xihM1J0L\nv8DBq6gAyUXT/IEeGyiP8s2cX84KV8xCMHXApGLLxn9t2oYhmCxXRcQ2RlFh/IuR\nzDa23M0FbGsgAPBjW6nGClm5jp9dymQRtUAXkbqSVMpy8CH5KWqKDmB15GfAYcJ7\n6SRcFmtD95AAQgXvuGxjLjH01W/jUEPsmZHGDUPBu0sAbDy4X8szM1XrQSHaot6M\nPXPS8LBSheWymSYtN45VBe6AhBjPRngLjJaanaRDH4Xc+WxmJYIqS+68MDQVqfAg\nHlGgkluO/SrnbFdVwyUAHrN9LiQ8gZ+QsyxZW0+Dfn7gJopDeLGsQPBzrdjhNuKK\nkjq2RMBdolI+/mueBKIO4pwo/oM0mfA8soGTOaiE6kLyDlT0SS7ldMVlvQydHgC9\nak9r+cak5Nf7KNg2B5hbxOuJjGcYI275/fS2LSjOK56njhbuqJEJ1AXmGYgWvYbS\nsM2XV31mcOgZQibEs9dYdtuUtuEVqGNVduy9R8P/e2Kp+Pzx1BYZcX04bE15Kip+\nlDLqIyA7P+wiA7EfxLAc3WmJYl3p5z4o5xdFr0b6Zeh4R7CQKJRRqB8nJ95YRVP5\ndypLnjjqaedlTrZfehly\n=QZy8\n-----END PGP SIGNATURE-----", "payload": "tree 98a297a5b8edabc5274779f60e9b4186b60cfc62\nparent cd42bb97f0cd6ea6d758659f4208dbabe8f4873d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473235935 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473235935 +0200\n\naddress comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b24d55eca4979afe3d9cb852ce74396efb6f856", "html_url": "https://github.com/rust-lang/rust/commit/7b24d55eca4979afe3d9cb852ce74396efb6f856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b24d55eca4979afe3d9cb852ce74396efb6f856/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "html_url": "https://github.com/rust-lang/rust/commit/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "3ab33e6bd9866b1a72864179391133b32766928b", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b24d55eca4979afe3d9cb852ce74396efb6f856/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b24d55eca4979afe3d9cb852ce74396efb6f856/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=7b24d55eca4979afe3d9cb852ce74396efb6f856", "patch": "@@ -239,8 +239,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             // The discriminant_value intrinsic returns 0 for non-sum types.\n             Array { .. } | FatPointer { .. } | Scalar { .. } | Univariant { .. } |\n-            Vector { .. } => 0,\n-            UntaggedUnion { .. } => unimplemented!(),\n+            Vector { .. } | UntaggedUnion { .. } => 0,\n         };\n \n         Ok(discr_val)\n@@ -279,7 +278,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"assume\" => {}\n \n             \"copy_nonoverlapping\" => {\n-                let elem_ty = substs.types().next().expect(\"should at least have one type argument\");\n+                let elem_ty = substs.type_at(0);\n                 let elem_size = self.type_size(elem_ty);\n                 let elem_align = self.type_align(elem_ty);\n                 let src = self.memory.read_ptr(args_ptrs[0])?;\n@@ -289,7 +288,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"discriminant_value\" => {\n-                let ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let ty = substs.type_at(0);\n                 let adt_ptr = self.memory.read_ptr(args_ptrs[0])?;\n                 let discr_val = self.read_discriminant_value(adt_ptr, ty)?;\n                 self.memory.write_uint(dest, discr_val, 8)?;\n@@ -300,19 +299,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"init\" => self.memory.write_repeat(dest, 0, dest_layout.size(&self.tcx.data_layout).bytes() as usize)?,\n \n             \"min_align_of\" => {\n-                let elem_ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let elem_ty = substs.type_at(0);\n                 let elem_align = self.type_align(elem_ty);\n                 self.memory.write_uint(dest, elem_align as u64, pointer_size)?;\n             }\n \n             \"move_val_init\" => {\n-                let ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let ty = substs.type_at(0);\n                 let ptr = self.memory.read_ptr(args_ptrs[0])?;\n                 self.move_(args_ptrs[1], ptr, ty)?;\n             }\n \n             \"offset\" => {\n-                let pointee_ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let pointee_ty = substs.type_at(0);\n                 let pointee_size = self.type_size(pointee_ty) as isize;\n                 let ptr_arg = args_ptrs[0];\n                 let offset = self.memory.read_isize(args_ptrs[1])?;\n@@ -344,13 +343,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"size_of\" => {\n-                let ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let ty = substs.type_at(0);\n                 let size = self.type_size(ty) as u64;\n                 self.memory.write_uint(dest, size, pointer_size)?;\n             }\n \n             \"size_of_val\" => {\n-                let ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let ty = substs.type_at(0);\n                 if self.type_is_sized(ty) {\n                     let size = self.type_size(ty) as u64;\n                     self.memory.write_uint(dest, size, pointer_size)?;\n@@ -370,7 +369,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"transmute\" => {\n-                let ty = substs.types().next().expect(\"should have at least one type argument\");\n+                let ty = substs.type_at(0);\n                 self.move_(args_ptrs[0], dest, ty)?;\n             }\n             \"uninit\" => self.memory.mark_definedness(dest, dest_layout.size(&self.tcx.data_layout).bytes() as usize, false)?,\n@@ -571,7 +570,7 @@ fn get_impl_method<'a, 'tcx>(\n     impl_substs: &'tcx Substs<'tcx>,\n     name: ast::Name,\n ) -> ImplMethod<'tcx> {\n-    assert!(!substs.types().any(|ty| ty.needs_infer()));\n+    assert!(!substs.needs_infer());\n \n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.lookup_trait_def(trait_def_id);"}]}