{"sha": "9d34c280d92e1bc443c9ae10744e5b73a71e8915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMzRjMjgwZDkyZTFiYzQ0M2M5YWUxMDc0NGU1YjczYTcxZTg5MTU=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-06-01T00:08:00Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-06-01T00:08:00Z"}, "message": "generate fewer basic blocks for variant switches", "tree": {"sha": "21eebbb0106e8860fa785c393e423496b8502679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21eebbb0106e8860fa785c393e423496b8502679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d34c280d92e1bc443c9ae10744e5b73a71e8915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d34c280d92e1bc443c9ae10744e5b73a71e8915", "html_url": "https://github.com/rust-lang/rust/commit/9d34c280d92e1bc443c9ae10744e5b73a71e8915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d34c280d92e1bc443c9ae10744e5b73a71e8915/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298730e7032cd55809423773da397cd5c7d827d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/298730e7032cd55809423773da397cd5c7d827d4", "html_url": "https://github.com/rust-lang/rust/commit/298730e7032cd55809423773da397cd5c7d827d4"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "bdaaafc1d8f0e01fd11657fa7364abb4f904c519", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d34c280d92e1bc443c9ae10744e5b73a71e8915/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d34c280d92e1bc443c9ae10744e5b73a71e8915/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=9d34c280d92e1bc443c9ae10744e5b73a71e8915", "patch": "@@ -266,6 +266,7 @@ enum TestKind<'tcx> {\n     // test the branches of enum\n     Switch {\n         adt_def: AdtDef<'tcx>,\n+        variants: Vec<bool>,\n     },\n \n     // test the branches of enum\n@@ -391,9 +392,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn join_otherwise_blocks(&mut self,\n                              span: Span,\n-                             otherwise: Vec<BasicBlock>)\n+                             mut otherwise: Vec<BasicBlock>)\n                              -> BasicBlock\n     {\n+        otherwise.sort();\n+        otherwise.dedup(); // variant switches can introduce duplicate target blocks\n         let scope_id = self.innermost_scope_id();\n         if otherwise.len() == 1 {\n             otherwise[0]\n@@ -502,6 +505,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+            TestKind::Switch { adt_def: _, ref mut variants} => {\n+                for candidate in candidates.iter() {\n+                    if !self.add_variants_to_switch(&match_pair.lvalue,\n+                                                    candidate,\n+                                                    variants) {\n+                        break;\n+                    }\n+                }\n+            }\n             _ => { }\n         }\n \n@@ -525,6 +537,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                                           &mut target_candidates))\n                       .count();\n         assert!(tested_candidates > 0); // at least the last candidate ought to be tested\n+        debug!(\"tested_candidates: {}\", tested_candidates);\n+        debug!(\"untested_candidates: {}\", candidates.len() - tested_candidates);\n \n         // For each outcome of test, process the candidates that still\n         // apply. Collect a list of blocks where control flow will"}, {"sha": "307c8ecd832007c82054b5ea57db904e9d364dab", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9d34c280d92e1bc443c9ae10744e5b73a71e8915/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d34c280d92e1bc443c9ae10744e5b73a71e8915/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=9d34c280d92e1bc443c9ae10744e5b73a71e8915", "patch": "@@ -33,7 +33,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { ref adt_def, variant_index: _, subpatterns: _ } => {\n                 Test {\n                     span: match_pair.pattern.span,\n-                    kind: TestKind::Switch { adt_def: adt_def.clone() },\n+                    kind: TestKind::Switch { \n+                        adt_def: adt_def.clone(), \n+                        variants: vec![false; self.hir.num_variants(adt_def)], \n+                    },\n                 }\n             }\n \n@@ -125,9 +128,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                        });\n                 true\n             }\n-\n+            PatternKind::Variant { .. } => {\n+                panic!(\"you should have called add_cases_to_switch_switch instead!\");\n+            }\n             PatternKind::Range { .. } |\n-            PatternKind::Variant { .. } |\n             PatternKind::Slice { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n@@ -140,6 +144,30 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn add_variants_to_switch<'pat>(&mut self,\n+                                     test_lvalue: &Lvalue<'tcx>,\n+                                     candidate: &Candidate<'pat, 'tcx>,\n+                                     variants: &mut Vec<bool>)\n+                                     -> bool\n+    {\n+        let match_pair = match candidate.match_pairs.iter().find(|mp| mp.lvalue == *test_lvalue) {\n+            Some(match_pair) => match_pair,\n+            _ => { return false; }\n+        };\n+\n+        match *match_pair.pattern.kind {\n+            PatternKind::Variant { adt_def: _ , variant_index,  .. } => {\n+                // Do I need to look at the PatternKind::Variant subpatterns?\n+                variants[variant_index] |= true;\n+                true\n+            }\n+            _ => {\n+                // don't know how to add these patterns to a switch\n+                false\n+            }\n+        }\n+    }\n+\n     /// Generates the code to perform a test.\n     pub fn perform_test(&mut self,\n                         block: BasicBlock,\n@@ -148,11 +176,26 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         -> Vec<BasicBlock> {\n         let scope_id = self.innermost_scope_id();\n         match test.kind {\n-            TestKind::Switch { adt_def } => {\n+            TestKind::Switch { adt_def, ref variants } => {\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n-                let target_blocks: Vec<_> =\n+                debug!(\"num_enum_variants: {}\", num_enum_variants);\n+                debug!(\"variants.len(): {}\", variants.len());\n+                debug!(\"variants: {:?}\", variants);\n+                let target_blocks: Vec<_> = if variants.into_iter().any(|b| {!b}) {\n+                    let otherwise_block = self.cfg.start_new_block();\n+                    debug!(\"basic block: {:?} is an otherwise block!\", otherwise_block);\n+                    (0..num_enum_variants).map(|i| \n+                        if variants[i] {\n+                            self.cfg.start_new_block()\n+                        } else {\n+                            otherwise_block\n+                        }\n+                    )\n+                    .collect()\n+                } else {\n                     (0..num_enum_variants).map(|_| self.cfg.start_new_block())\n-                                          .collect();\n+                                          .collect()\n+                };\n                 self.cfg.terminate(block, scope_id, test.span, TerminatorKind::Switch {\n                     discr: lvalue.clone(),\n                     adt_def: adt_def,\n@@ -383,7 +426,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match test.kind {\n             // If we are performing a variant switch, then this\n             // informs variant patterns, but nothing else.\n-            TestKind::Switch { adt_def: tested_adt_def } => {\n+            TestKind::Switch { adt_def: tested_adt_def , .. } => {\n                 match *match_pair.pattern.kind {\n                     PatternKind::Variant { adt_def, variant_index, ref subpatterns } => {\n                         assert_eq!(adt_def, tested_adt_def);"}]}