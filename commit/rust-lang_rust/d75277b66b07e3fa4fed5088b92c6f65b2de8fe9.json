{"sha": "d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTI3N2I2NmIwN2UzZmE0ZmVkNTA4OGI5MmM2ZjY1YjJkZThmZTk=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T22:50:54Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-25T02:20:12Z"}, "message": "Refactor application of `library` semantic token modifier", "tree": {"sha": "55fe3758a35a38d4516507e17a774ea8f97878a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55fe3758a35a38d4516507e17a774ea8f97878a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmCsXt4ACgkQ94j36ZAT\nYAP/Bg//VUIS4yFz50S/8Uz+zkOczfPUQ087VkOt45M6TApOnERfcRtvKwCcJPr8\njilZ4/J5feRHRbhMP5KMzbiqvQCNUfJvu4TNnibauHrfgS5fANZf2nKQyCTp6NX5\nyUhsjdNe2N4jtNmY+oWWFuYBxjiPXLFHNlzxjyaO3mwyEtHTX4flHolpvf0vaPqi\n6UkzhQB+XwAxXDtaErT7cwnj8/LmgGLietYB6mADw/N6x+a8lhpxec9Bztzq3amI\nSQDjT6O0jygI5XxHCxKePd7PVjs0qpExzBNPLCtJuyThVkmzdP4ap7LDDMjgWl1o\nPQLfXBQ2WuPpwSj+GEV+c6JS4+wy9YidMlUPJ2Df6Ud+TJb67pU1oKVRTtHWnRPL\najFfZ79ahcL7+QpAvOVcIJ0HQALoGPZ1KrJQ4BMcYECXUx2z1KHTSoS9BrkLwCO9\naTLEHhUTtpbJeQLEQ7TPo7uzigol4hjtdxd+Mcpd96gIMnxcVlBztB5LWy0yDAAK\ntUBj/HgkD7YLEPgWUL7PU++oytffEY8xUklYXdko5yrylj7Gy/LV+DI3MTPsjZb4\nsX5VZmcXXwmzbtLZFvqNncOU3yYqZmTwQHlYQg/woZ1SZty6eeDJcGHjJ34kUDQ1\nY7NCrR8e15IX+dyGNFvMEHyu881IMB1pW9beD+EW87dxxOy+q8s=\n=zKjB\n-----END PGP SIGNATURE-----", "payload": "tree 55fe3758a35a38d4516507e17a774ea8f97878a1\nparent eca4b764e4d8653f3862129586f47cb60be4bf3f\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1621896654 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1621909212 +1000\n\nRefactor application of `library` semantic token modifier\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "html_url": "https://github.com/rust-lang/rust/commit/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca4b764e4d8653f3862129586f47cb60be4bf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca4b764e4d8653f3862129586f47cb60be4bf3f", "html_url": "https://github.com/rust-lang/rust/commit/eca4b764e4d8653f3862129586f47cb60be4bf3f"}], "stats": {"total": 77, "additions": 15, "deletions": 62}, "files": [{"sha": "b4a3d39c9192c1cf84dd1d1d6871ea68d9c71192", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 15, "deletions": 62, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "patch": "@@ -283,35 +283,11 @@ pub(super) fn element(\n     }\n }\n fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition) -> Highlight {\n-    match def {\n-        Definition::Macro(m) => {\n-            let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Macro));\n-\n-            if m.module(db).map(hir::Module::krate) != krate {\n-                h |= HlMod::Library;\n-            }\n-\n-            h\n-        }\n-        Definition::Field(field) => {\n-            let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Field));\n-\n-            if Some(field.parent_def(db).module(db).krate()) != krate {\n-                h |= HlMod::Library;\n-            }\n-\n-            h\n-        }\n+    let mut h = match def {\n+        Definition::Macro(_) => Highlight::new(HlTag::Symbol(SymbolKind::Macro)),\n+        Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::ModuleDef(def) => match def {\n-            hir::ModuleDef::Module(module) => {\n-                let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));\n-\n-                if Some(module.krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n-\n-                h\n-            }\n+            hir::ModuleDef::Module(_) => Highlight::new(HlTag::Symbol(SymbolKind::Module)),\n             hir::ModuleDef::Function(func) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Function));\n                 if let Some(item) = func.as_assoc_item(db) {\n@@ -343,9 +319,6 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 if func.is_async(db) {\n                     h |= HlMod::Async;\n                 }\n-                if Some(func.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n \n                 h\n             }\n@@ -355,23 +328,10 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     hir::Adt::Enum(_) => HlTag::Symbol(SymbolKind::Enum),\n                     hir::Adt::Union(_) => HlTag::Symbol(SymbolKind::Union),\n                 };\n-                let mut h = Highlight::new(h);\n-\n-                if Some(adt.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n \n-                h\n-            }\n-            hir::ModuleDef::Variant(variant) => {\n-                let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Variant));\n-\n-                if Some(variant.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n-\n-                h\n+                Highlight::new(h)\n             }\n+            hir::ModuleDef::Variant(_) => Highlight::new(HlTag::Symbol(SymbolKind::Variant)),\n             hir::ModuleDef::Const(konst) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Const));\n \n@@ -389,10 +349,6 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     }\n                 }\n \n-                if Some(konst.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n-\n                 h\n             }\n             hir::ModuleDef::Trait(trait_) => {\n@@ -402,10 +358,6 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Unsafe;\n                 }\n \n-                if Some(trait_.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n-\n                 h\n             }\n             hir::ModuleDef::TypeAlias(type_) => {\n@@ -425,10 +377,6 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     }\n                 }\n \n-                if Some(type_.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n-\n                 h\n             }\n             hir::ModuleDef::BuiltinType(_) => Highlight::new(HlTag::BuiltinType),\n@@ -440,10 +388,6 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Unsafe;\n                 }\n \n-                if Some(s.module(db).krate()) != krate {\n-                    h |= HlMod::Library;\n-                }\n-\n                 h\n             }\n         },\n@@ -476,7 +420,16 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n             h\n         }\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n+    };\n+\n+    let is_from_other_crate = def.module(db).map(hir::Module::krate) != krate;\n+    let is_builtin_type = matches!(def, Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)));\n+\n+    if is_from_other_crate && !is_builtin_type {\n+        h |= HlMod::Library;\n     }\n+\n+    h\n }\n \n fn highlight_func_by_name_ref("}]}