{"sha": "c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjQwYTJhNjkzM2Y3MDdhOTk4MTYxY2NiYmQ4YzdkNmY4ZWIzZGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-24T09:34:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-25T21:54:24Z"}, "message": "Changes to RustDoc", "tree": {"sha": "b43b746e1898878337bf4ec03e2525dae8520303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43b746e1898878337bf4ec03e2525dae8520303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "html_url": "https://github.com/rust-lang/rust/commit/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4688aadfde7fa84d5a6cffbcfb309a653ae24441", "url": "https://api.github.com/repos/rust-lang/rust/commits/4688aadfde7fa84d5a6cffbcfb309a653ae24441", "html_url": "https://github.com/rust-lang/rust/commit/4688aadfde7fa84d5a6cffbcfb309a653ae24441"}], "stats": {"total": 90, "additions": 34, "deletions": 56}, "files": [{"sha": "3eda39f54a997e8a036a280d024bf73c92bed2bf", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -163,13 +163,12 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n         }\n     });\n     let trait_def = ty::lookup_trait_def(tcx, did);\n-    let (bounds, default_unbound) = trait_def.bounds.clean(cx);\n+    let bounds = trait_def.bounds.clean(cx);\n     clean::Trait {\n         unsafety: def.unsafety,\n         generics: (&def.generics, subst::TypeSpace).clean(cx),\n         items: items.collect(),\n         bounds: bounds,\n-        default_unbound: default_unbound\n     }\n }\n \n@@ -328,7 +327,7 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             derived: clean::detect_derived(attrs.as_slice()),\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n-                    clean::TraitBound(polyt) => polyt.trait_,\n+                    clean::TraitBound(polyt, _) => polyt.trait_,\n                     clean::RegionBound(..) => unreachable!(),\n                 }\n             }),"}, {"sha": "a39764f3c55fe1f3bb4dbf8037b925b454e54568", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -458,8 +458,6 @@ pub struct TyParam {\n     pub did: ast::DefId,\n     pub bounds: Vec<TyParamBound>,\n     pub default: Option<Type>,\n-    /// An optional default bound on the parameter which is unbound, like `Sized?`\n-    pub default_unbound: Option<Type>\n }\n \n impl Clean<TyParam> for ast::TyParam {\n@@ -469,7 +467,6 @@ impl Clean<TyParam> for ast::TyParam {\n             did: ast::DefId { krate: ast::LOCAL_CRATE, node: self.id },\n             bounds: self.bounds.clean(cx),\n             default: self.default.clean(cx),\n-            default_unbound: self.unbound.clean(cx)\n         }\n     }\n }\n@@ -478,28 +475,27 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.external_typarams.borrow_mut().as_mut().unwrap()\n           .insert(self.def_id, self.name.clean(cx));\n-        let (bounds, default_unbound) = self.bounds.clean(cx);\n+        let bounds = self.bounds.clean(cx);\n         TyParam {\n             name: self.name.clean(cx),\n             did: self.def_id,\n             bounds: bounds,\n             default: self.default.clean(cx),\n-            default_unbound: default_unbound\n         }\n     }\n }\n \n #[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n-    TraitBound(PolyTrait)\n+    TraitBound(PolyTrait, ast::TraitBoundModifier)\n }\n \n impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n             ast::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n-            ast::TraitTyParamBound(ref t) => TraitBound(t.clean(cx)),\n+            ast::TraitTyParamBound(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n         }\n     }\n }\n@@ -600,7 +596,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 did: did,\n             },\n             lifetimes: vec![]\n-        })\n+        }, ast::TraitBoundModifier::None)\n     }\n }\n \n@@ -648,37 +644,20 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         TraitBound(PolyTrait {\n             trait_: ResolvedPath { path: path, typarams: None, did: self.def_id, },\n             lifetimes: late_bounds\n-        })\n+        }, ast::TraitBoundModifier::None)\n     }\n }\n \n-// Returns (bounds, default_unbound)\n-impl<'tcx> Clean<(Vec<TyParamBound>, Option<Type>)> for ty::ParamBounds<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> (Vec<TyParamBound>, Option<Type>) {\n+impl<'tcx> Clean<Vec<TyParamBound>> for ty::ParamBounds<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n         let mut v = Vec::new();\n-        let mut has_sized_bound = false;\n-        for b in self.builtin_bounds.iter() {\n-            if b != ty::BoundSized {\n-                v.push(b.clean(cx));\n-            } else {\n-                has_sized_bound = true;\n-            }\n-        }\n         for t in self.trait_bounds.iter() {\n             v.push(t.clean(cx));\n         }\n         for r in self.region_bounds.iter().filter_map(|r| r.clean(cx)) {\n             v.push(RegionBound(r));\n         }\n-        if has_sized_bound {\n-            (v, None)\n-        } else {\n-            let ty = match ty::BoundSized.clean(cx) {\n-                TraitBound(polyt) => polyt.trait_,\n-                _ => unreachable!()\n-            };\n-            (v, Some(ty))\n-        }\n+        v\n     }\n }\n \n@@ -689,7 +668,7 @@ impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n         v.extend(self.types.iter().map(|t| TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             lifetimes: vec![]\n-        })));\n+        }, ast::TraitBoundModifier::None)));\n         if v.len() > 0 {Some(v)} else {None}\n     }\n }\n@@ -1047,8 +1026,6 @@ pub struct Trait {\n     pub items: Vec<TraitMethod>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n-    /// An optional default bound not required for `Self`, like `Sized?`\n-    pub default_unbound: Option<Type>\n }\n \n impl Clean<Item> for doctree::Trait {\n@@ -1065,7 +1042,6 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n-                default_unbound: self.default_unbound.clean(cx)\n             }),\n         }\n     }\n@@ -2412,7 +2388,6 @@ impl Clean<Item> for ty::AssociatedType {\n                 },\n                 bounds: vec![],\n                 default: None,\n-                default_unbound: None\n             }),\n             visibility: None,\n             def_id: self.def_id,"}, {"sha": "251ce5aefeb717429c5542d5d2ac10a0e7ae12b0", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -178,7 +178,6 @@ pub struct Trait {\n     pub whence: Span,\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n-    pub default_unbound: Option<ast::TraitRef> // FIXME(tomjakubowski)\n }\n \n pub struct Impl {"}, {"sha": "f20a74f937b75442160bf14183004c89b79a823b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -97,9 +97,6 @@ impl fmt::Show for clean::Generics {\n                 if i > 0 {\n                     try!(f.write(\", \".as_bytes()))\n                 }\n-                if let Some(ref unbound) = tp.default_unbound {\n-                    try!(write!(f, \"{}? \", unbound));\n-                };\n                 try!(f.write(tp.name.as_bytes()));\n \n                 if tp.bounds.len() > 0 {\n@@ -182,8 +179,12 @@ impl fmt::Show for clean::TyParamBound {\n             clean::RegionBound(ref lt) => {\n                 write!(f, \"{}\", *lt)\n             }\n-            clean::TraitBound(ref ty) => {\n-                write!(f, \"{}\", *ty)\n+            clean::TraitBound(ref ty, modifier) => {\n+                let modifier_str = match modifier {\n+                    ast::TraitBoundModifier::None => \"\",\n+                    ast::TraitBoundModifier::Maybe => \"?\",\n+                };\n+                write!(f, \"{}{}\", modifier_str, *ty)\n             }\n         }\n     }\n@@ -458,12 +459,15 @@ impl fmt::Show for clean::Type {\n                            for bound in decl.bounds.iter() {\n                                 match *bound {\n                                     clean::RegionBound(..) => {}\n-                                    clean::TraitBound(ref t) => {\n+                                    clean::TraitBound(ref t, modifier) => {\n                                         if ret.len() == 0 {\n                                             ret.push_str(\": \");\n                                         } else {\n                                             ret.push_str(\" + \");\n                                         }\n+                                        if modifier == ast::TraitBoundModifier::Maybe {\n+                                            ret.push_str(\"?\");\n+                                        }\n                                         ret.push_str(format!(\"{}\",\n                                                              *t).as_slice());\n                                     }"}, {"sha": "bfb03cb2589c2a3366ed6b48d7b3805c50abb5c5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -1679,9 +1679,6 @@ fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Trait) -> fmt::Result {\n     let mut bounds = String::new();\n-    if let Some(ref ty) = t.default_unbound {\n-        bounds.push_str(format!(\" for {}?\", ty).as_slice());\n-    }\n     if t.bounds.len() > 0 {\n         if bounds.len() > 0 {\n             bounds.push(' ');"}, {"sha": "e71711aa8d6e77d80efdb56cf74d6e0aec444f1f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            ast::ItemTrait(unsafety, ref gen, ref def_ub, ref b, ref items) => {\n+            ast::ItemTrait(unsafety, ref gen, ref b, ref items) => {\n                 let t = Trait {\n                     unsafety: unsafety,\n                     name: name,\n@@ -334,7 +334,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n-                    default_unbound: def_ub.clone()\n                 };\n                 om.traits.push(t);\n             },"}, {"sha": "1d3dc42cf08c2d27a2b0133a6c1e92d38832e912", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c4640a2a6933f707a998161ccbbd8c7d6f8eb3dd", "patch": "@@ -965,13 +965,18 @@ impl<'a> State<'a> {\n                 try!(self.word_nbsp(\"trait\"));\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n-                // TODO find and print the unbound, remove it from bounds\n-                /*if let &Some(ref tref) = unbound {\n-                    try!(space(&mut self.s));\n-                    try!(self.word_space(\"for ?\"));\n-                    try!(self.print_trait_ref(tref));\n-                }*/\n-                try!(self.print_bounds(\":\", bounds[]));\n+                let bounds: Vec<_> = bounds.iter().map(|b| b.clone()).collect();\n+                let mut real_bounds = Vec::with_capacity(bounds.len());\n+                for b in bounds.into_iter() {\n+                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = b {\n+                        try!(space(&mut self.s));\n+                        try!(self.word_space(\"for ?\"));\n+                        try!(self.print_trait_ref(&ptr.trait_ref));\n+                    } else {\n+                        real_bounds.push(b);\n+                    }\n+                }\n+                try!(self.print_bounds(\":\", real_bounds[]));\n                 try!(self.print_where_clause(generics));\n                 try!(word(&mut self.s, \" \"));\n                 try!(self.bopen());"}]}