{"sha": "b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTdlMTg5OTVkNmI2OTkyZjk3NTEyYzZiODZiNWNiM2YyZjM0ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T17:17:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T17:17:30Z"}, "message": "Auto merge of #65202 - pietroalbini:scriptify-ci-config, r=alexcrichton\n\nci: move most of the prepare config into scripts\n\nThis PR moves most of the configuration from the CI yamls into bash scripts, driven by a small Python script (which understands and emulates the two `##vso[` commands we use).\n\nThere are two reasons why we'd want to do this:\n\n* Being able to prepare the build environment locally by just running `src/ci/prepare.py` simplifies a lot setting up a local VM similar to CI (software pre-installed in the CI images won't be prepared, but it's a start anyway).\n* When we'll switch to GitHub Actions we'll need to either duplicate code in multiple workflows or write a preprocessor. Having all the prepare steps in a single one is going to simplify the implementation of both options.\n\nAlong with the move I did a few changes to the actual scripts:\n\n* Mirrored all the remaining external URLs we download (except chocolatey) to the `rust-lang-ci-mirrors` bucket, to increase reliability and reduce the chance of supply chain attacks. I didn't audit and mirror the CI scripts outside this PR though.\n* Extracted CI-specific behavior (like issuing `##vso[` commands and detecting the host platform) into `shared.sh` and included it in most of the scripts. This way a switch to another CI provider will be less painful.\n\nIt's possible (and easier) to review this commit-by-commit.\nr? @alexcrichton\ncc @rust-lang/infra", "tree": {"sha": "103497af035ddea52b0bfb006ab166254faeff68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103497af035ddea52b0bfb006ab166254faeff68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "html_url": "https://github.com/rust-lang/rust/commit/b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "html_url": "https://github.com/rust-lang/rust/commit/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd"}, {"sha": "7e051236b02ae6d924f24e080784fcf10cb8c4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e051236b02ae6d924f24e080784fcf10cb8c4d3", "html_url": "https://github.com/rust-lang/rust/commit/7e051236b02ae6d924f24e080784fcf10cb8c4d3"}], "stats": {"total": 734, "additions": 453, "deletions": 281}, "files": [{"sha": "24b07a1b7c950111eae85bc9822b2d2725592854", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -315,6 +315,7 @@ jobs:\n \n       # 32/64 bit MSVC and GNU deployment\n       dist-x86_64-msvc:\n+        MSYS_BITS: 64\n         RUST_CONFIGURE_ARGS: >\n           --build=x86_64-pc-windows-msvc\n           --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n@@ -324,6 +325,7 @@ jobs:\n         DIST_REQUIRE_ALL_TOOLS: 1\n         DEPLOY: 1\n       dist-i686-msvc:\n+        MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: >\n           --build=i686-pc-windows-msvc\n           --target=i586-pc-windows-msvc"}, {"sha": "14daf81b430755cda020c104ec9da8a8cc138f2c", "filename": "src/ci/azure-pipelines/steps/install-clang.yml", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,46 +0,0 @@\n-steps:\n-\n-- bash: |\n-    set -e\n-    curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf -\n-\n-    export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n-    echo \"##vso[task.setvariable variable=CC]$CC\"\n-\n-    export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n-    echo \"##vso[task.setvariable variable=CXX]$CXX\"\n-\n-    # Configure `AR` specifically so rustbuild doesn't try to infer it as\n-    # `clang-ar` by accident.\n-    echo \"##vso[task.setvariable variable=AR]ar\"\n-  displayName: Install clang (OSX)\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n-\n-# If we're compiling for MSVC then we, like most other distribution builders,\n-# switch to clang as the compiler. This'll allow us eventually to enable LTO\n-# amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n-# clang has an output mode compatible with MinGW that we need. If it does we\n-# should switch to clang for MinGW as well!\n-#\n-# Note that the LLVM installer is an NSIS installer\n-#\n-# Original downloaded here came from\n-# http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n-# That installer was run through `wine` on Linux and then the resulting\n-# installation directory (found in `$HOME/.wine/drive_c/Program Files/LLVM`) was\n-# packaged up into a tarball. We've had issues otherwise that the installer will\n-# randomly hang, provide not a lot of useful information, pollute global state,\n-# etc. In general the tarball is just more confined and easier to deal with when\n-# working with various CI environments.\n-- bash: |\n-    set -e\n-    mkdir -p citools\n-    cd citools\n-    curl -f https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/LLVM-7.0.0-win64.tar.gz | tar xzf -\n-    echo \"##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]$RUST_CONFIGURE_ARGS --set llvm.clang-cl=`pwd`/clang-rust/bin/clang-cl.exe\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n-  displayName: Install clang (Windows)\n-\n-# Note that we don't install clang on Linux since its compiler story is just so\n-# different. Each container has its own toolchain configured appropriately\n-# already."}, {"sha": "d4679c1c6733e50807df5f8c61dec675a15e031c", "filename": "src/ci/azure-pipelines/steps/install-sccache.yml", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-sccache.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-sccache.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-sccache.yml?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,21 +0,0 @@\n-steps:\n-\n-- bash: |\n-    set -e\n-    curl -fo /usr/local/bin/sccache https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2018-04-02-sccache-x86_64-apple-darwin\n-    chmod +x /usr/local/bin/sccache\n-  displayName: Install sccache (OSX)\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n-\n-- script: |\n-    md sccache\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf sccache\\sccache.exe https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n-    echo ##vso[task.prependpath]%CD%\\sccache\n-  displayName: Install sccache (Windows)\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-# Note that we don't install sccache on Linux since it's installed elsewhere\n-# through all the containers.\n-#\n-# FIXME: we should probably install sccache outside the containers and then\n-# mount it inside the containers so we can centralize all installation here."}, {"sha": "812339900fe427452249700dd0cb65cd908d20af", "filename": "src/ci/azure-pipelines/steps/install-windows-build-deps.yml", "status": "removed", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=8d78bf6b273848d17da8f5c92162c6a6b9b10dfd", "patch": "@@ -1,143 +0,0 @@\n-steps:\n-# We use the WIX toolset to create combined installers for Windows, and these\n-# binaries are downloaded from\n-# https://github.com/wixtoolset/wix3 originally\n-- bash: |\n-    set -e\n-    curl -O https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/wix311-binaries.zip\n-    echo \"##vso[task.setvariable variable=WIX]`pwd`/wix\"\n-    mkdir -p wix/bin\n-    cd wix/bin\n-    7z x ../../wix311-binaries.zip\n-  displayName: Install wix\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-# We use InnoSetup and its `iscc` program to also create combined installers.\n-# Honestly at this point WIX above and `iscc` are just holdovers from\n-# oh-so-long-ago and are required for creating installers on Windows. I think\n-# one is MSI installers and one is EXE, but they're not used so frequently at\n-# this point anyway so perhaps it's a wash!\n-- script: |\n-    echo ##vso[task.prependpath]C:\\Program Files (x86)\\Inno Setup 5\n-    curl.exe -o is-install.exe https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-08-22-is.exe\n-    is-install.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n-  displayName: Install InnoSetup\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-# We've had issues with the default drive in use running out of space during a\n-# build, and it looks like the `C:` drive has more space than the default `D:`\n-# drive. We should probably confirm this with the azure pipelines team at some\n-# point, but this seems to fix our \"disk space full\" problems.\n-- script: |\n-    mkdir c:\\MORE_SPACE\n-    mklink /J build c:\\MORE_SPACE\n-  displayName: \"Ensure build happens on C:/ instead of D:/\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-- bash: git config --replace-all --global core.autocrlf false\n-  displayName: \"Disable git automatic line ending conversion (on C:/)\"\n-\n-# Download and install MSYS2, needed primarily for the test suite (run-make) but\n-# also used by the MinGW toolchain for assembling things.\n-#\n-# FIXME: we should probe the default azure image and see if we can use the MSYS2\n-# toolchain there. (if there's even one there). For now though this gets the job\n-# done.\n-- bash: |\n-    set -e\n-    choco install msys2 --params=\"/InstallDir:$(System.Workfolder)/msys2 /NoPath\" -y --no-progress\n-    echo \"##vso[task.prependpath]$(System.Workfolder)/msys2/usr/bin\"\n-    mkdir -p \"$(System.Workfolder)/msys2/home/$USERNAME\"\n-  displayName: Install msys2\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-- bash: pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar\n-  displayName: Install msys2 base deps\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-# If we need to download a custom MinGW, do so here and set the path\n-# appropriately.\n-#\n-# Here we also do a pretty heinous thing which is to mangle the MinGW\n-# installation we just downloaded. Currently, as of this writing, we're using\n-# MinGW-w64 builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it\n-# appears to be the first version which contains a fix for #40546, builds\n-# randomly failing during LLVM due to ar.exe/ranlib.exe failures.\n-#\n-# Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n-# to contain a regression in gdb (#40184). As a result if we were to use the\n-# gdb provided (7.11.1) then we would fail all debuginfo tests.\n-#\n-# In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n-# avoid disabling gdb tests we download an *old* version of gdb, specifically\n-# that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n-# with the 6.2.0 gdb to get tests passing.\n-#\n-# Note that we don't literally overwrite the gdb.exe binary because it appears\n-# to just use gdborig.exe, so that's the binary we deal with instead.\n-- bash: |\n-    set -e\n-    curl -o mingw.7z $MINGW_URL/$MINGW_ARCHIVE\n-    7z x -y mingw.7z > /dev/null\n-    curl -o $MINGW_DIR/bin/gdborig.exe $MINGW_URL/2017-04-20-${MSYS_BITS}bit-gdborig.exe\n-    echo \"##vso[task.prependpath]`pwd`/$MINGW_DIR/bin\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n-  displayName: Download custom MinGW\n-\n-# FIXME(#65767): workaround msys bug, step 1\n-- bash: |\n-    set -e\n-    arch=i686\n-    if [ \"$MSYS_BITS\" = \"64\" ]; then\n-      arch=x86_64\n-    fi\n-    curl -O https://ci-mirrors.rust-lang.org/rustc/msys2-repo/mingw/$arch/mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-  displayName: Download working ca-certificates for msys\n-\n-# Otherwise install MinGW through `pacman`\n-- bash: |\n-    set -e\n-    arch=i686\n-    if [ \"$MSYS_BITS\" = \"64\" ]; then\n-      arch=x86_64\n-    fi\n-    pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake mingw-w64-$arch-gcc mingw-w64-$arch-python2\n-    echo \"##vso[task.prependpath]$(System.Workfolder)/msys2/mingw$MSYS_BITS/bin\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n-  displayName: Download standard MinGW\n-\n-# FIXME(#65767): workaround msys bug, step 2\n-- bash: |\n-    set -e\n-    arch=i686\n-    if [ \"$MSYS_BITS\" = \"64\" ]; then\n-      arch=x86_64\n-    fi\n-    pacman -U --noconfirm --noprogressbar mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n-    rm mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-  displayName: Install working ca-certificates for msys\n-\n-# Make sure we use the native python interpreter instead of some msys equivalent\n-# one way or another. The msys interpreters seem to have weird path conversions\n-# baked in which break LLVM's build system one way or another, so let's use the\n-# native version which keeps everything as native as possible.\n-- bash: |\n-    set -e\n-    cp C:/Python27amd64/python.exe C:/Python27amd64/python2.7.exe\n-    echo \"##vso[task.prependpath]C:/Python27amd64\"\n-  displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-\n-# Note that this is originally from the github releases patch of Ninja\n-- bash: |\n-    set -e\n-    mkdir ninja\n-    curl -o ninja.zip https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-03-15-ninja-win.zip\n-    7z x -oninja ninja.zip\n-    rm ninja.zip\n-    echo \"##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]$RUST_CONFIGURE_ARGS --enable-ninja\"\n-    echo \"##vso[task.prependpath]`pwd`/ninja\"\n-  displayName: Download and install ninja\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))"}, {"sha": "01858cca50b1cc7820446359bff8fed279857bb6", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 87, "deletions": 67, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -48,86 +48,106 @@ steps:\n - bash: python src/ci/cpu-usage-over-time.py &> cpu-usage.csv &\n   displayName: \"Collect CPU-usage statistics in the background\"\n \n-- bash: printenv | sort\n-  displayName: Show environment variables\n+- bash: src/ci/scripts/dump-environment.sh\n+  displayName: Show the current environment\n \n-- bash: |\n-    set -e\n-    df -h\n-    du . | sort -nr | head -n100\n-  displayName: Show disk usage\n-  # FIXME: this hasn't been tested, but maybe it works on Windows? Should test!\n-  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))\n-\n-- template: install-sccache.yml\n-- template: install-clang.yml\n-\n-# Switch to XCode 9.3 on OSX since it seems to be the last version that supports\n-# i686-apple-darwin. We'll eventually want to upgrade this and it will probably\n-# force us to drop i686-apple-darwin, but let's keep the wheels turning for now.\n-- bash: |\n-    set -e\n-    sudo xcode-select --switch /Applications/Xcode_9.3.app\n-  displayName: Switch to Xcode 9.3 (OSX)\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n+- bash: src/ci/scripts/install-sccache.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Install sccache\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/install-clang.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Install clang\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n \n-- template: install-windows-build-deps.yml\n+- bash: src/ci/scripts/switch-xcode.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Switch to Xcode 9.3\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n \n-# Looks like docker containers have IPv6 disabled by default, so let's turn it\n-# on since libstd tests require it\n-- bash: |\n-    set -e\n-    sudo mkdir -p /etc/docker\n-    echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json\n-    sudo service docker restart\n-  displayName: Enable IPv6\n-  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['Agent.OS'], 'Linux'))\n+- bash: src/ci/scripts/install-wix.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Install wix\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/install-innosetup.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Install InnoSetup\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/windows-symlink-build-dir.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Ensure the build happens on C:\\ instead of D:\\\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/disable-git-crlf-conversion.sh\n+  displayName: \"Disable git automatic line ending conversion (on C:/)\"\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/install-msys2.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+    SYSTEM_WORKFOLDER: $(System.Workfolder)\n+  displayName: Install msys2\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/install-msys2-packages.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+    SYSTEM_WORKFOLDER: $(System.Workfolder)\n+  displayName: Install msys2 packages\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/install-mingw.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+    SYSTEM_WORKFOLDER: $(System.Workfolder)\n+  displayName: Install MinGW\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/install-ninja.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Install ninja\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/enable-docker-ipv6.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Enable IPv6 on Docker\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n \n # Disable automatic line ending conversion (again). On Windows, when we're\n # installing dependencies, something switches the git configuration directory or\n # re-enables autocrlf. We've not tracked down the exact cause -- and there may\n # be multiple -- but this should ensure submodules are checked out with the\n # appropriate line endings.\n-- bash: git config --replace-all --global core.autocrlf false\n-  displayName: \"Disable git automatic line ending conversion\"\n+- bash: src/ci/scripts/disable-git-crlf-conversion.sh\n+  displayName: Disable git automatic line ending conversion\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n \n-# Check out all our submodules, but more quickly than using git by using one of\n-# our custom scripts\n-- bash: |\n-    set -e\n-    mkdir -p $HOME/rustsrc\n-    $BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc\n-  condition: and(succeeded(), not(variables.SKIP_JOB), ne(variables['Agent.OS'], 'Windows_NT'))\n-  displayName: Check out submodules (Unix)\n-- script: |\n-    if not exist C:\\cache\\rustsrc\\NUL mkdir C:\\cache\\rustsrc\n-    sh src/ci/init_repo.sh . /c/cache/rustsrc\n-  condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['Agent.OS'], 'Windows_NT'))\n-  displayName: Check out submodules (Windows)\n-\n-# See also the disable for autocrlf above, this just checks that it worked\n-#\n-# We check both in rust-lang/rust and in a submodule to make sure both are\n-# accurate. Submodules are checked out significantly later than the main\n-# repository in this script, so settings can (and do!) change between then.\n-#\n-# Linux (and maybe macOS) builders don't currently have dos2unix so just only\n-# run this step on Windows.\n-- bash: |\n-    set -x\n-    # print out the git configuration so we can better investigate failures in\n-    # the following\n-    git config --list --show-origin\n-    dos2unix -ih Cargo.lock src/tools/rust-installer/install-template.sh\n-    endings=$(dos2unix -ic Cargo.lock src/tools/rust-installer/install-template.sh)\n-    # if endings has non-zero length, error out\n-    if [ -n \"$endings\" ]; then exit 1 ; fi\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n-  displayName: Verify line endings are LF\n+- bash: src/ci/scripts/checkout-submodules.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Checkout submodules\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n+- bash: src/ci/scripts/verify-line-endings.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+  displayName: Verify line endings\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n \n # Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n # images, etc.\n-- bash: src/ci/install-awscli.sh\n+- bash: src/ci/scripts/install-awscli.sh\n   env:\n     AGENT_OS: $(Agent.OS)\n   condition: and(succeeded(), not(variables.SKIP_JOB))"}, {"sha": "bce35670c8d46b8fdcba6030086b18db192ad099", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -117,7 +117,7 @@ make check-bootstrap\n \n # Display the CPU and memory information. This helps us know why the CI timing\n # is fluctuating.\n-if isOSX; then\n+if isMacOS; then\n     system_profiler SPHardwareDataType || true\n     sysctl hw || true\n     ncpus=$(sysctl -n hw.ncpu)"}, {"sha": "0b44ea3c90bc91ea780f94082d1cafffdb6b3074", "filename": "src/ci/scripts/checkout-submodules.sh", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fcheckout-submodules.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fcheckout-submodules.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fcheckout-submodules.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,17 @@\n+#!/bin/bash\n+# Check out all our submodules, but more quickly than using git by using one of\n+# our custom scripts\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    path=\"/c/cache/rustsrc\"\n+else\n+    path=\"${HOME}/rustsrc\"\n+fi\n+\n+mkdir -p \"${path}\"\n+\"$(cd \"$(dirname \"$0\")\" && pwd)/../init_repo.sh\" . \"${path}\""}, {"sha": "836145fbb8e602e5c8868929d451a8fb2a35d37f", "filename": "src/ci/scripts/disable-git-crlf-conversion.sh", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fdisable-git-crlf-conversion.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fdisable-git-crlf-conversion.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fdisable-git-crlf-conversion.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,13 @@\n+#!/bin/bash\n+# Disable automatic line ending conversion, which is enabled by default on\n+# Azure's Windows image. Having the conversion enabled caused regressions both\n+# in our test suite (it broke miri tests) and in the ecosystem, since we\n+# started shipping install scripts with CRLF endings instead of the old LF.\n+#\n+# Note that we do this a couple times during the build as the PATH and current\n+# user/directory change, e.g. when mingw is enabled.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+git config --replace-all --global core.autocrlf false"}, {"sha": "c6774b52ab92dc8d2af0159d1bf2b24b7896e825", "filename": "src/ci/scripts/dump-environment.sh", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fdump-environment.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fdump-environment.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fdump-environment.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,19 @@\n+#!/bin/bash\n+# This script dumps information about the build environment to stdout.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+echo \"environment variables:\"\n+printenv | sort\n+echo\n+\n+echo \"disk usage:\"\n+df -h\n+echo\n+\n+echo \"biggest files in the working dir:\"\n+set +o pipefail\n+du . | sort -nr | head -n100\n+set -o pipefail\n+echo"}, {"sha": "03d5a75e24e27fa4c53231bebb6f926eaf7f8ac9", "filename": "src/ci/scripts/enable-docker-ipv6.sh", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fenable-docker-ipv6.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fenable-docker-ipv6.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fenable-docker-ipv6.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,15 @@\n+#!/bin/bash\n+# Looks like docker containers have IPv6 disabled by default, so let's turn it\n+# on since libstd tests require it\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isLinux; then\n+    sudo mkdir -p /etc/docker\n+    echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' \\\n+        | sudo tee /etc/docker/daemon.json\n+    sudo service docker restart\n+fi"}, {"sha": "e21187938504caa08b6ee8c04c3a1f386d519549", "filename": "src/ci/scripts/install-awscli.sh", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-awscli.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-awscli.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-awscli.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -16,12 +16,14 @@\n set -euo pipefail\n IFS=$'\\n\\t'\n \n-MIRROR=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2019-07-27-awscli.tar\"\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+MIRROR=\"${MIRRORS_BASE}/2019-07-27-awscli.tar\"\n DEPS_DIR=\"/tmp/awscli-deps\"\n \n pip=\"pip\"\n pipflags=\"\"\n-if [[ \"${AGENT_OS}\" == \"Linux\" ]]; then\n+if isLinux; then\n     pip=\"pip3\"\n     pipflags=\"--user\"\n ", "previous_filename": "src/ci/install-awscli.sh"}, {"sha": "e9b685718e61f6acba9de10f7545ad10f4f64269", "filename": "src/ci/scripts/install-clang.sh", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-clang.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,43 @@\n+#!/bin/bash\n+# This script installs clang on the local machine. Note that we don't install\n+# clang on Linux since its compiler story is just so different. Each container\n+# has its own toolchain configured appropriately already.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isMacOS; then\n+    curl -f \"${MIRRORS_BASE}/clang%2Bllvm-7.0.0-x86_64-apple-darwin.tar.xz\" | tar xJf -\n+\n+    ciCommandSetEnv CC \"$(pwd)/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\"\n+    ciCommandSetEnv CXX \"$(pwd)/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\"\n+\n+    # Configure `AR` specifically so rustbuild doesn't try to infer it as\n+    # `clang-ar` by accident.\n+    ciCommandSetEnv AR \"ar\"\n+elif isWindows && [[ -z ${MINGW_URL+x} ]]; then\n+    # If we're compiling for MSVC then we, like most other distribution builders,\n+    # switch to clang as the compiler. This'll allow us eventually to enable LTO\n+    # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+    # clang has an output mode compatible with MinGW that we need. If it does we\n+    # should switch to clang for MinGW as well!\n+    #\n+    # Note that the LLVM installer is an NSIS installer\n+    #\n+    # Original downloaded here came from\n+    # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n+    # That installer was run through `wine` on Linux and then the resulting\n+    # installation directory (found in `$HOME/.wine/drive_c/Program Files/LLVM`) was\n+    # packaged up into a tarball. We've had issues otherwise that the installer will\n+    # randomly hang, provide not a lot of useful information, pollute global state,\n+    # etc. In general the tarball is just more confined and easier to deal with when\n+    # working with various CI environments.\n+\n+    mkdir -p citools\n+    cd citools\n+    curl -f \"${MIRRORS_BASE}/LLVM-7.0.0-win64.tar.gz\" | tar xzf -\n+    ciCommandSetEnv RUST_CONFIGURE_ARGS \\\n+        \"${RUST_CONFIGURE_ARGS} --set llvm.clang-cl=$(pwd)/clang-rust/bin/clang-cl.exe\"\n+fi"}, {"sha": "04ca249777a11a55228c5dbb6a94c59254afab20", "filename": "src/ci/scripts/install-innosetup.sh", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-innosetup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-innosetup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-innosetup.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,18 @@\n+#!/bin/bash\n+# We use InnoSetup and its `iscc` program to also create combined installers.\n+# Honestly at this point WIX above and `iscc` are just holdovers from\n+# oh-so-long-ago and are required for creating installers on Windows. I think\n+# one is MSI installers and one is EXE, but they're not used so frequently at\n+# this point anyway so perhaps it's a wash!\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    curl.exe -o is-install.exe \"${MIRRORS_BASE}/2017-08-22-is.exe\"\n+    cmd.exe //c \"is-install.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\"\n+\n+    ciCommandAddPath \"C:\\\\Program Files (x86)\\\\Inno Setup 5\"\n+fi"}, {"sha": "b4e8b889f520a9e26fc17ccb3cb249fb0a303a7e", "filename": "src/ci/scripts/install-mingw.sh", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,45 @@\n+#!/bin/bash\n+# If we need to download a custom MinGW, do so here and set the path\n+# appropriately.\n+#\n+# Here we also do a pretty heinous thing which is to mangle the MinGW\n+# installation we just downloaded. Currently, as of this writing, we're using\n+# MinGW-w64 builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it\n+# appears to be the first version which contains a fix for #40546, builds\n+# randomly failing during LLVM due to ar.exe/ranlib.exe failures.\n+#\n+# Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+# to contain a regression in gdb (#40184). As a result if we were to use the\n+# gdb provided (7.11.1) then we would fail all debuginfo tests.\n+#\n+# In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+# avoid disabling gdb tests we download an *old* version of gdb, specifically\n+# that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+# with the 6.2.0 gdb to get tests passing.\n+#\n+# Note that we don't literally overwrite the gdb.exe binary because it appears\n+# to just use gdborig.exe, so that's the binary we deal with instead.\n+#\n+# Otherwise install MinGW through `pacman`\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    if [[ -z \"${MINGW_URL+x}\" ]]; then\n+        arch=i686\n+        if [ \"$MSYS_BITS\" = \"64\" ]; then\n+          arch=x86_64\n+        fi\n+        pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake \\\n+            mingw-w64-$arch-gcc mingw-w64-$arch-python2\n+        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${MSYS_BITS}/bin\"\n+    else\n+        curl -o mingw.7z \"${MINGW_URL}/${MINGW_ARCHIVE}\"\n+        7z x -y mingw.7z > /dev/null\n+        curl -o \"${MINGW_DIR}/bin/gdborig.exe\" \"${MINGW_URL}/2017-04-20-${MSYS_BITS}bit-gdborig.exe\"\n+        ciCommandAddPath \"$(pwd)/${MINGW_DIR}/bin\"\n+    fi\n+fi"}, {"sha": "375f13f30b3ed3b34e324c2c3c13c0d76de0c0a2", "filename": "src/ci/scripts/install-msys2-packages.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar\n+\n+    # FIXME(#65767): workaround msys bug, step 2\n+    arch=i686\n+    if [ \"$MSYS_BITS\" = \"64\" ]; then\n+      arch=x86_64\n+    fi\n+    pacman -U --noconfirm --noprogressbar mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n+    rm mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\n+\n+    # Make sure we use the native python interpreter instead of some msys equivalent\n+    # one way or another. The msys interpreters seem to have weird path conversions\n+    # baked in which break LLVM's build system one way or another, so let's use the\n+    # native version which keeps everything as native as possible.\n+    cp C:/Python27amd64/python.exe C:/Python27amd64/python2.7.exe\n+    ciCommandAddPath \"C:\\\\Python27amd64\"\n+fi"}, {"sha": "8b631192ea2b44b96d96688de57fd333327c8e9c", "filename": "src/ci/scripts/install-msys2.sh", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,27 @@\n+#!/bin/bash\n+# ignore-tidy-linelength\n+# Download and install MSYS2, needed primarily for the test suite (run-make) but\n+# also used by the MinGW toolchain for assembling things.\n+#\n+# FIXME: we should probe the default azure image and see if we can use the MSYS2\n+# toolchain there. (if there's even one there). For now though this gets the job\n+# done.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    # FIXME(#65767): workaround msys bug, step 1\n+    arch=i686\n+    if [ \"$MSYS_BITS\" = \"64\" ]; then\n+      arch=x86_64\n+    fi\n+    curl -O \"${MIRRORS_BASE}/msys2-repo/mingw/$arch/mingw-w64-$arch-ca-certificates-20180409-1-any.pkg.tar.xz\"\n+\n+    choco install msys2 --params=\"/InstallDir:${SYSTEM_WORKFOLDER}/msys2 /NoPath\" -y --no-progress\n+    mkdir -p \"${SYSTEM_WORKFOLDER}/msys2/home/${USERNAME}\"\n+\n+    ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/usr/bin\"\n+fi"}, {"sha": "b8261d8a6f284fe97d486d1170b5d81b2a6b3d59", "filename": "src/ci/scripts/install-ninja.sh", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-ninja.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-ninja.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-ninja.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,16 @@\n+#!/bin/bash\n+# Note that this is originally from the github releases patch of Ninja\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    mkdir ninja\n+    curl -o ninja.zip \"${MIRRORS_BASE}/2017-03-15-ninja-win.zip\"\n+    7z x -oninja ninja.zip\n+    rm ninja.zip\n+    ciCommandSetEnv \"RUST_CONFIGURE_ARGS\" \"${RUST_CONFIGURE_ARGS} --enable-ninja\"\n+    ciCommandAddPath \"$(pwd)/ninja\"\n+fi"}, {"sha": "d3c298992254ef3424da236fbbaafceef4fb8e20", "filename": "src/ci/scripts/install-sccache.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-sccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-sccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-sccache.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+# This script installs sccache on the local machine. Note that we don't install\n+# sccache on Linux since it's installed elsewhere through all the containers.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isMacOS; then\n+    curl -fo /usr/local/bin/sccache \"${MIRRORS_BASE}/2018-04-02-sccache-x86_64-apple-darwin\"\n+    chmod +x /usr/local/bin/sccache\n+elif isWindows; then\n+    mkdir -p sccache\n+    curl -fo sccache/sccache.exe \"${MIRRORS_BASE}/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n+    ciCommandAddPath \"$(pwd)/sccache\"\n+fi\n+\n+# FIXME: we should probably install sccache outside the containers and then\n+# mount it inside the containers so we can centralize all installation here."}, {"sha": "688f1a49cbfdc69fea8c5e86604b2ab0f7a20441", "filename": "src/ci/scripts/install-wix.sh", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-wix.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Finstall-wix.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-wix.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,17 @@\n+#!/bin/bash\n+# We use the WIX toolset to create combined installers for Windows, and these\n+# binaries are downloaded from https://github.com/wixtoolset/wix3 originally\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    ciCommandSetEnv WIX \"$(pwd)/wix\"\n+\n+    curl -O \"${MIRRORS_BASE}/wix311-binaries.zip\"\n+    mkdir -p wix/bin\n+    cd wix/bin\n+    7z x ../../wix311-binaries.zip\n+fi"}, {"sha": "2cbb2ddbc7046ab77caf06977f76aad5e750568f", "filename": "src/ci/scripts/switch-xcode.sh", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fswitch-xcode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fswitch-xcode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fswitch-xcode.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,13 @@\n+#!/bin/bash\n+# Switch to XCode 9.3 on OSX since it seems to be the last version that supports\n+# i686-apple-darwin. We'll eventually want to upgrade this and it will probably\n+# force us to drop i686-apple-darwin, but let's keep the wheels turning for now.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isMacOS; then\n+    sudo xcode-select --switch /Applications/Xcode_9.3.app\n+fi"}, {"sha": "f3cac13ea4802f207338c00b2964f413fa345a80", "filename": "src/ci/scripts/verify-line-endings.sh", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fverify-line-endings.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fverify-line-endings.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fverify-line-endings.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,24 @@\n+#!/bin/bash\n+# See also the disable for autocrlf, this just checks that it worked.\n+#\n+# We check both in rust-lang/rust and in a submodule to make sure both are\n+# accurate. Submodules are checked out significantly later than the main\n+# repository in this script, so settings can (and do!) change between then.\n+#\n+# Linux (and maybe macOS) builders don't currently have dos2unix so just only\n+# run this step on Windows.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    # print out the git configuration so we can better investigate failures in\n+    # the following\n+    git config --list --show-origin\n+    dos2unix -ih Cargo.lock src/tools/rust-installer/install-template.sh\n+    endings=$(dos2unix -ic Cargo.lock src/tools/rust-installer/install-template.sh)\n+    # if endings has non-zero length, error out\n+    if [ -n \"$endings\" ]; then exit 1 ; fi\n+fi"}, {"sha": "e57128c70f5f194e533adfbc15c1f3cde35220b0", "filename": "src/ci/scripts/windows-symlink-build-dir.sh", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fwindows-symlink-build-dir.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fscripts%2Fwindows-symlink-build-dir.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fwindows-symlink-build-dir.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -0,0 +1,15 @@\n+#!/bin/bash\n+# We've had issues with the default drive in use running out of space during a\n+# build, and it looks like the `C:` drive has more space than the default `D:`\n+# drive. We should probably confirm this with the azure pipelines team at some\n+# point, but this seems to fix our \"disk space full\" problems.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    cmd //c \"mkdir c:\\\\MORE_SPACE\"\n+    cmd //c \"mklink /J build c:\\\\MORE_SPACE\"\n+fi"}, {"sha": "37e45b5639dc9ae538253f27b0d291b6f87c6916", "filename": "src/ci/shared.sh", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b497e18995d6b6992f97512c6b86b5cb3f2f34f5/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=b497e18995d6b6992f97512c6b86b5cb3f2f34f5", "patch": "@@ -4,6 +4,8 @@\n # `source shared.sh`, hence the invalid shebang and not being\n # marked as an executable file in git.\n \n+export MIRRORS_BASE=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\"\n+\n # See http://unix.stackexchange.com/questions/82598\n # Duplicated in docker/dist-various-2/shared.sh\n function retry {\n@@ -28,10 +30,39 @@ function isCI {\n   [ \"$CI\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n }\n \n-function isOSX {\n+function isMacOS {\n   [ \"$AGENT_OS\" = \"Darwin\" ]\n }\n \n+function isWindows {\n+  [ \"$AGENT_OS\" = \"Windows_NT\" ]\n+}\n+\n+function isLinux {\n+  [ \"$AGENT_OS\" = \"Linux\" ]\n+}\n+\n function getCIBranch {\n   echo \"$BUILD_SOURCEBRANCHNAME\"\n }\n+\n+function ciCommandAddPath {\n+    if [[ $# -ne 1 ]]; then\n+        echo \"usage: $0 <path>\"\n+        exit 1\n+    fi\n+    path=\"$1\"\n+\n+    echo \"##vso[task.prependpath]${path}\"\n+}\n+\n+function ciCommandSetEnv {\n+    if [[ $# -ne 2 ]]; then\n+        echo \"usage: $0 <name> <value>\"\n+        exit 1\n+    fi\n+    name=\"$1\"\n+    value=\"$2\"\n+\n+    echo \"##vso[task.setvariable variable=${name}]${value}\"\n+}"}]}