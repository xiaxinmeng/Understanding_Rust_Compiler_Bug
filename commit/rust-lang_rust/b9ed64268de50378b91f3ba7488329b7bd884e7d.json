{"sha": "b9ed64268de50378b91f3ba7488329b7bd884e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZWQ2NDI2OGRlNTAzNzhiOTFmM2JhNzQ4ODMyOWI3YmQ4ODRlN2Q=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-02T22:11:08Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-03T14:19:26Z"}, "message": "Make visit_projection iterative", "tree": {"sha": "25439112e8e56c06b78d9c2343b63172aa80a972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25439112e8e56c06b78d9c2343b63172aa80a972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ed64268de50378b91f3ba7488329b7bd884e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2WA3IACgkQiMlBzaHU\nZDKfsg/+MySvQOHq97f6QBQcnzBzp150CJjTvbaddU0dn/L7H2li7J3mcUBWYBBn\n69ZYC9d8BRCRSlPBVGaNCQ2t2my2rUVX0sr4cd6Ao6Op0vzwRR11s0UJD245UUid\nS3GtLT2e1WzgStaZQm8Cr6kd8f1GBY1pAWjKaXYkIL96YzoJhHcAaR23AQBR+3dJ\nTfEgTQQrueM1uhtkKK9WXA5/QI8fluST9y1fk9mxGZ27VG92nIt8/KmkdOhsJFVh\n3UtmSH53LOFn5KNcNw+gp6UXtj5mdjI5OIOA08zV/kletDNUkqcrVLkHwDkDyycA\nR2lH/r7OlKbb+umZOL6ZgbCZ5tCqVMEg2PTBVEjErhsdLX67Ovqr7BS8kxCSm/Li\nvjlf6bIaMt9vNTabNn/KVpf4KxvcBkc70UjiC5sTF70NuMVu53+Il6NReYxUQ4ji\n+NzD93H9l6vpwitYY9FVJQ3yJzzpxmUDo9H5bjC3UJPFQveKF5m4gm1YnZj54KMa\nS/z+UAI+yrdJc0Qqymj+S3iFS2l6V3mfEgZoSsIxwqGHTefAyk9u2m9ssW4Jhguf\nBs4UIj+ofos9UlwZK0sjI6iFq9TKrbwGfyyWMIOm1xkRlZ8Uqemj6rkKOYO7u34Y\nk+VMqGDWU9BOai+sMWVKn6R7eNVx4OJVaq/mThJ6clC3oeyU1G4=\n=QtHW\n-----END PGP SIGNATURE-----", "payload": "tree 25439112e8e56c06b78d9c2343b63172aa80a972\nparent a8d70d1b4ad9c82b082d3e15a8b965289625d8e6\nauthor Santiago Pastorino <spastorino@gmail.com> 1570054268 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1570112366 -0300\n\nMake visit_projection iterative\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ed64268de50378b91f3ba7488329b7bd884e7d", "html_url": "https://github.com/rust-lang/rust/commit/b9ed64268de50378b91f3ba7488329b7bd884e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ed64268de50378b91f3ba7488329b7bd884e7d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6", "html_url": "https://github.com/rust-lang/rust/commit/a8d70d1b4ad9c82b082d3e15a8b965289625d8e6"}], "stats": {"total": 146, "additions": 76, "deletions": 70}, "files": [{"sha": "bfbeeebd1e230cb7e994716d2412390480418aac", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9ed64268de50378b91f3ba7488329b7bd884e7d/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ed64268de50378b91f3ba7488329b7bd884e7d/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=b9ed64268de50378b91f3ba7488329b7bd884e7d", "patch": "@@ -734,9 +734,10 @@ macro_rules! make_mir_visitor {\n                                 projection: & $($mutability)? [PlaceElem<'tcx>],\n                                 context: PlaceContext,\n                                 location: Location) {\n-                if let [proj_base @ .., elem] = projection {\n-                    self.visit_projection(base, proj_base, context, location);\n-                    self.visit_projection_elem(base, proj_base, elem, context, location);\n+                let mut cursor = projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n+                    self.visit_projection_elem(base, cursor, elem, context, location);\n                 }\n             }\n "}, {"sha": "3a2a81f11913bb9b357321a2bf9a88f5549549c0", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9ed64268de50378b91f3ba7488329b7bd884e7d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ed64268de50378b91f3ba7488329b7bd884e7d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b9ed64268de50378b91f3ba7488329b7bd884e7d", "patch": "@@ -404,25 +404,25 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n         self.super_assign(dest, rvalue, location);\n     }\n \n-    fn visit_projection(\n+    fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,\n-        proj: &[PlaceElem<'tcx>],\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {\n         trace!(\n-            \"visit_place_projection: proj={:?} context={:?} location={:?}\",\n-            proj,\n+            \"visit_projection_elem: place_base={:?} proj_base={:?} elem={:?} \\\n+            context={:?} location={:?}\",\n+            place_base,\n+            proj_base,\n+            elem,\n             context,\n             location,\n         );\n-        self.super_projection(place_base, proj, context, location);\n \n-        let (elem, proj_base) = match proj.split_last() {\n-            Some(x) => x,\n-            None => return,\n-        };\n+        self.super_projection_elem(place_base, proj_base, elem, context, location);\n \n         match elem {\n             ProjectionElem::Deref => {"}, {"sha": "fbcf9c8cb5eba5063f6087e10d2ca3f007081a4b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 63, "deletions": 58, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/b9ed64268de50378b91f3ba7488329b7bd884e7d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ed64268de50378b91f3ba7488329b7bd884e7d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b9ed64268de50378b91f3ba7488329b7bd884e7d", "patch": "@@ -1156,82 +1156,87 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_projection(\n+    fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,\n-        proj: &[PlaceElem<'tcx>],\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {\n         debug!(\n-            \"visit_place_projection: proj={:?} context={:?} location={:?}\",\n-            proj, context, location,\n+            \"visit_projection_elem: place_base={:?} proj_base={:?} elem={:?} \\\n+            context={:?} location={:?}\",\n+            place_base,\n+            proj_base,\n+            elem,\n+            context,\n+            location,\n         );\n-        self.super_projection(place_base, proj, context, location);\n \n-        if let [proj_base @ .., elem] = proj {\n-            match elem {\n-                ProjectionElem::Deref => {\n-                    if context.is_mutating_use() {\n-                        // `not_const` errors out in const contexts\n-                        self.not_const(ops::MutDeref)\n-                    }\n-                    let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n-                    match self.mode {\n-                        Mode::NonConstFn => {}\n-                        _ if self.suppress_errors => {}\n-                        _ => {\n-                            if let ty::RawPtr(_) = base_ty.kind {\n-                                if !self.tcx.features().const_raw_ptr_deref {\n-                                    self.record_error(ops::RawPtrDeref);\n-                                    emit_feature_err(\n-                                        &self.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n-                                        self.span, GateIssue::Language,\n-                                        &format!(\n-                                            \"dereferencing raw pointers in {}s is unstable\",\n-                                            self.mode,\n-                                        ),\n-                                    );\n-                                }\n+        self.super_projection_elem(place_base, proj_base, elem, context, location);\n+\n+        match elem {\n+            ProjectionElem::Deref => {\n+                if context.is_mutating_use() {\n+                    // `not_const` errors out in const contexts\n+                    self.not_const(ops::MutDeref)\n+                }\n+                let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n+                match self.mode {\n+                    Mode::NonConstFn => {}\n+                    _ if self.suppress_errors => {}\n+                    _ => {\n+                        if let ty::RawPtr(_) = base_ty.kind {\n+                            if !self.tcx.features().const_raw_ptr_deref {\n+                                self.record_error(ops::RawPtrDeref);\n+                                emit_feature_err(\n+                                    &self.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n+                                    self.span, GateIssue::Language,\n+                                    &format!(\n+                                        \"dereferencing raw pointers in {}s is unstable\",\n+                                        self.mode,\n+                                    ),\n+                                );\n                             }\n                         }\n                     }\n                 }\n+            }\n \n-                ProjectionElem::ConstantIndex {..} |\n-                ProjectionElem::Subslice {..} |\n-                ProjectionElem::Field(..) |\n-                ProjectionElem::Index(_) => {\n-                    let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n-                    if let Some(def) = base_ty.ty_adt_def() {\n-                        if def.is_union() {\n-                            match self.mode {\n-                                Mode::ConstFn => {\n-                                    if !self.tcx.features().const_fn_union\n-                                        && !self.suppress_errors\n-                                    {\n-                                        self.record_error(ops::UnionAccess);\n-                                        emit_feature_err(\n-                                            &self.tcx.sess.parse_sess, sym::const_fn_union,\n-                                            self.span, GateIssue::Language,\n-                                            \"unions in const fn are unstable\",\n-                                        );\n-                                    }\n-                                },\n+            ProjectionElem::ConstantIndex {..} |\n+            ProjectionElem::Subslice {..} |\n+            ProjectionElem::Field(..) |\n+            ProjectionElem::Index(_) => {\n+                let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n+                if let Some(def) = base_ty.ty_adt_def() {\n+                    if def.is_union() {\n+                        match self.mode {\n+                            Mode::ConstFn => {\n+                                if !self.tcx.features().const_fn_union\n+                                    && !self.suppress_errors\n+                                {\n+                                    self.record_error(ops::UnionAccess);\n+                                    emit_feature_err(\n+                                        &self.tcx.sess.parse_sess, sym::const_fn_union,\n+                                        self.span, GateIssue::Language,\n+                                        \"unions in const fn are unstable\",\n+                                    );\n+                                }\n+                            },\n \n-                                | Mode::NonConstFn\n-                                | Mode::Static\n-                                | Mode::StaticMut\n-                                | Mode::Const\n-                                => {},\n-                            }\n+                            | Mode::NonConstFn\n+                            | Mode::Static\n+                            | Mode::StaticMut\n+                            | Mode::Const\n+                            => {},\n                         }\n                     }\n                 }\n+            }\n \n-                ProjectionElem::Downcast(..) => {\n-                    self.not_const(ops::Downcast)\n-                }\n+            ProjectionElem::Downcast(..) => {\n+                self.not_const(ops::Downcast)\n             }\n         }\n     }"}]}