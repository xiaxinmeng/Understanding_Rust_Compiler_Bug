{"sha": "2dd139f5fd51ba8cd2af454c6a36e216708649f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDEzOWY1ZmQ1MWJhOGNkMmFmNDU0YzZhMzZlMjE2NzA4NjQ5ZjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-02T11:09:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-01T13:44:28Z"}, "message": "add some XXX markers", "tree": {"sha": "7f24953037147fe4ec38379965daf71d1246d8f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f24953037147fe4ec38379965daf71d1246d8f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd139f5fd51ba8cd2af454c6a36e216708649f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd139f5fd51ba8cd2af454c6a36e216708649f2", "html_url": "https://github.com/rust-lang/rust/commit/2dd139f5fd51ba8cd2af454c6a36e216708649f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd139f5fd51ba8cd2af454c6a36e216708649f2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4a4ada5822bf90ca271afbbdfb26079eb66d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4a4ada5822bf90ca271afbbdfb26079eb66d9c", "html_url": "https://github.com/rust-lang/rust/commit/dc4a4ada5822bf90ca271afbbdfb26079eb66d9c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ec7274a9b6df29dcfe299b7a7834163c53413f94", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd139f5fd51ba8cd2af454c6a36e216708649f2/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd139f5fd51ba8cd2af454c6a36e216708649f2/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=2dd139f5fd51ba8cd2af454c6a36e216708649f2", "patch": "@@ -228,7 +228,7 @@ pub fn necessary_variants(dm: &DefMap, pat: &hir::Pat) -> Vec<ast::NodeId> {\n             hir::PatStruct(..) => {\n                 match dm.borrow().get(&p.id) {\n                     Some(&PathResolution { base_def: DefVariant(_, id, _), .. }) => {\n-                        variants.push(id.node);\n+                        variants.push(id.node); // XXX\n                     }\n                     _ => ()\n                 }"}, {"sha": "076b2fcc004d6ec6df487eb42b9e1f29a8a70973", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd139f5fd51ba8cd2af454c6a36e216708649f2/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd139f5fd51ba8cd2af454c6a36e216708649f2/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=2dd139f5fd51ba8cd2af454c6a36e216708649f2", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n         self.add_exports_for_module(&mut exports, module_);\n         match module_.def_id.get() {\n             Some(def_id) => {\n-                self.export_map.insert(def_id.node, exports);\n+                self.export_map.insert(def_id.node, exports); // XXX\n                 debug!(\"(computing exports) writing exports for {} (some)\",\n                        def_id.node);\n             }"}, {"sha": "5811c3c72f789031a3632c5d9b5d396ba23daa64", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dd139f5fd51ba8cd2af454c6a36e216708649f2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd139f5fd51ba8cd2af454c6a36e216708649f2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2dd139f5fd51ba8cd2af454c6a36e216708649f2", "patch": "@@ -558,7 +558,7 @@ fn is_param<'tcx>(tcx: &ty::ctxt<'tcx>,\n     if let hir::TyPath(None, _) = ast_ty.node {\n         let path_res = *tcx.def_map.borrow().get(&ast_ty.id).unwrap();\n         match path_res.base_def {\n-            def::DefSelfTy(Some(def_id), None) => {\n+            def::DefSelfTy(Some(def_id), None) => { // XXX\n                 path_res.depth == 0 && def_id.node == param_id\n             }\n             def::DefTyParam(_, _, def_id, _) => {"}]}