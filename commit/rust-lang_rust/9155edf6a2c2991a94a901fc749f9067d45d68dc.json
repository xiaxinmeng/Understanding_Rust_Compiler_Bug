{"sha": "9155edf6a2c2991a94a901fc749f9067d45d68dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTVlZGY2YTJjMjk5MWE5NGE5MDFmYzc0OWY5MDY3ZDQ1ZDY4ZGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-02T07:37:22Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-02T07:37:22Z"}, "message": "Rollup merge of #28686 - eefriedman:unresolved-path-error, r=nikomatsakis\n\nThe behavior here isn't really ideal, but we can't really do much better\r\ngiven the current state of constant evaluation.\r\n\r\nThe changes to ExprUseVisitor are to avoid a compile error; apparently\r\nthat bit of code is extremely sensitive to changes in other areas of the\r\ncompiler.\r\n\r\nFixes #28670, and probably a bunch of duplicates.", "tree": {"sha": "6c708280d88fff09af6b52c8697f7fd63ccbfbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c708280d88fff09af6b52c8697f7fd63ccbfbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9155edf6a2c2991a94a901fc749f9067d45d68dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9155edf6a2c2991a94a901fc749f9067d45d68dc", "html_url": "https://github.com/rust-lang/rust/commit/9155edf6a2c2991a94a901fc749f9067d45d68dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9155edf6a2c2991a94a901fc749f9067d45d68dc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d2a49b87ff0041b4c6507f5be04083a0d0aa02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d2a49b87ff0041b4c6507f5be04083a0d0aa02", "html_url": "https://github.com/rust-lang/rust/commit/b1d2a49b87ff0041b4c6507f5be04083a0d0aa02"}, {"sha": "1763fcb36d85767fa1fee4c2de66fc2855633fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1763fcb36d85767fa1fee4c2de66fc2855633fcd", "html_url": "https://github.com/rust-lang/rust/commit/1763fcb36d85767fa1fee4c2de66fc2855633fcd"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "d3f427e770cf39e6752387aa85a85001ff16003a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9155edf6a2c2991a94a901fc749f9067d45d68dc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155edf6a2c2991a94a901fc749f9067d45d68dc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=9155edf6a2c2991a94a901fc749f9067d45d68dc", "patch": "@@ -367,6 +367,7 @@ pub enum ErrKind {\n     ShiftRightWithOverflow,\n     MissingStructField,\n     NonConstPath,\n+    UnresolvedPath,\n     ExpectedConstTuple,\n     ExpectedConstStruct,\n     TupleIndexOutOfBounds,\n@@ -403,7 +404,8 @@ impl ConstEvalErr {\n             ShiftLeftWithOverflow => \"attempted left shift with overflow\".into_cow(),\n             ShiftRightWithOverflow => \"attempted right shift with overflow\".into_cow(),\n             MissingStructField  => \"nonexistent struct field\".into_cow(),\n-            NonConstPath        => \"non-constant path in constant expr\".into_cow(),\n+            NonConstPath        => \"non-constant path in constant expression\".into_cow(),\n+            UnresolvedPath => \"unresolved path in constant expression\".into_cow(),\n             ExpectedConstTuple => \"expected constant tuple\".into_cow(),\n             ExpectedConstStruct => \"expected constant struct\".into_cow(),\n             TupleIndexOutOfBounds => \"tuple index out of bounds\".into_cow(),\n@@ -895,7 +897,20 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n       }\n       hir::ExprPath(..) => {\n-          let opt_def = tcx.def_map.borrow().get(&e.id).map(|d| d.full_def());\n+          let opt_def = if let Some(def) = tcx.def_map.borrow().get(&e.id) {\n+              // After type-checking, def_map contains definition of the\n+              // item referred to by the path. During type-checking, it\n+              // can contain the raw output of path resolution, which\n+              // might be a partially resolved path.\n+              // FIXME: There's probably a better way to make sure we don't\n+              // panic here.\n+              if def.depth != 0 {\n+                  signal!(e, UnresolvedPath);\n+              }\n+              Some(def.full_def())\n+          } else {\n+              None\n+          };\n           let (const_expr, const_ty) = match opt_def {\n               Some(def::DefConst(def_id)) => {\n                   if let Some(node_id) = tcx.map.as_local_node_id(def_id) {"}, {"sha": "3c4ad5a56ec362ba221e64cf879cd5ea3acf2616", "filename": "src/test/compile-fail/invalid-path-in-const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9155edf6a2c2991a94a901fc749f9067d45d68dc/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9155edf6a2c2991a94a901fc749f9067d45d68dc/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs?ref=9155edf6a2c2991a94a901fc749f9067d45d68dc", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    fn f(a: [u8; u32::DOESNOTEXIST]) {}\n+    //~^ ERROR unresolved path in constant expression\n+}"}]}