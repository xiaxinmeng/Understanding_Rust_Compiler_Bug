{"sha": "2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNDBkMzljMWUyNmMwOTY0MTgwZmRlNTFjNWJmY2Y5MjQ3YTcwYTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T18:00:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T18:10:25Z"}, "message": "support computing the remainder of a ptr, if covered by alignment", "tree": {"sha": "fb58b647dfca17d47dfc5235662143b4e04ca54c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb58b647dfca17d47dfc5235662143b4e04ca54c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "html_url": "https://github.com/rust-lang/rust/commit/2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93fef9a6a2958a0cef2cef64afd1ffa478aef5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/93fef9a6a2958a0cef2cef64afd1ffa478aef5fe", "html_url": "https://github.com/rust-lang/rust/commit/93fef9a6a2958a0cef2cef64afd1ffa478aef5fe"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "ab1701c6cbf170b5dea74450eadf9c87eb7dccd5", "filename": "src/operator.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "patch": "@@ -130,8 +130,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     err!(InvalidPointerMath)\n                 }\n             }\n-            // These work if one operand is a pointer, the other an integer\n-            Add | BitAnd | Sub\n+            // These work if the left operand is a pointer, the right an integer\n+            Add | BitAnd | Sub | Rem\n                 if left_kind == right_kind && (left_kind == usize || left_kind == isize) &&\n                        left.is_ptr() && right.is_bits() => {\n                 // Cast to i128 is fine as we checked the kind to be ptr-sized\n@@ -142,6 +142,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     left_kind == isize,\n                 ).map(Some)\n             }\n+            // Commutative operators also work if the integer is on the left\n             Add | BitAnd\n                 if left_kind == right_kind && (left_kind == usize || left_kind == isize) &&\n                        left.is_bits() && right.is_ptr() => {\n@@ -180,7 +181,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 map_to_primval(left.overflowing_offset(Size::from_bytes(right as u64), self)),\n \n             BitAnd if !signed => {\n-                let base_mask : u64 = !(self.memory.get(left.alloc_id)?.align.abi() - 1);\n+                let ptr_base_align = self.memory.get(left.alloc_id)?.align.abi();\n+                let base_mask : u64 = !(ptr_base_align - 1);\n                 let right = right as u64;\n                 let ptr_size = self.memory.pointer_size().bytes() as u8;\n                 if right & base_mask == base_mask {\n@@ -194,6 +196,23 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 }\n             }\n \n+            Rem if !signed => {\n+                // Doing modulo a multiple of the alignment is allowed\n+                let ptr_base_align = self.memory.get(left.alloc_id)?.align.abi();\n+                let right = right as u64;\n+                let ptr_size = self.memory.pointer_size().bytes() as u8;\n+                if right == 1 {\n+                    // modulo 1 is always 0\n+                    (Scalar::Bits { bits: 0, size: ptr_size }, false)\n+                } else if right % ptr_base_align == 0 {\n+                    // the base address would be cancelled out by the modulo operation, so we can\n+                    // just take the modulo of the offset\n+                    (Scalar::Bits { bits: (left.offset.bytes() % right) as u128, size: ptr_size }, false)\n+                } else {\n+                    return err!(ReadPointerAsBytes);\n+                }\n+            }\n+\n             _ => {\n                 let msg = format!(\"unimplemented binary op on pointer {:?}: {:?}, {:?} ({})\", bin_op, left, right, if signed { \"signed\" } else { \"unsigned\" });\n                 return err!(Unimplemented(msg));"}, {"sha": "4cfdfb62e27f541f04c90d512c1dc0fea2cbc5cd", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const usize;\n     let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _ = ptr_bytes % 432; //~ ERROR constant evaluation error\n+    let _ = ptr_bytes / 432; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "233c9a733c999d740984c7dfccd095e1e15e2f7c", "filename": "tests/compile-fail/ptr_bitops2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Fcompile-fail%2Fptr_bitops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Fcompile-fail%2Fptr_bitops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops2.rs?ref=2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let val = 13usize;\n+    let addr = &val as *const _ as usize;\n+    let _ = addr & 13; //~ ERROR access part of a pointer value as raw bytes\n+}"}, {"sha": "26fba9b82c533b30c621ba2b071053583f63040d", "filename": "tests/compile-fail/ptr_rem.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Fcompile-fail%2Fptr_rem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Fcompile-fail%2Fptr_rem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_rem.rs?ref=2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let val = 13usize;\n+    let addr = &val as *const _ as usize;\n+    let _ = addr % 2; //~ ERROR access part of a pointer value as raw bytes\n+}"}, {"sha": "9a29c2d30837d5bcea93399f410add26082d7b0e", "filename": "tests/run-pass/ptr_int_ops.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Frun-pass%2Fptr_int_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b40d39c1e26c0964180fde51c5bfcf9247a70a8/tests%2Frun-pass%2Fptr_int_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_ops.rs?ref=2b40d39c1e26c0964180fde51c5bfcf9247a70a8", "patch": "@@ -0,0 +1,20 @@\n+fn main() {\n+    let v = [1i16, 2];\n+    let x = &v[1] as *const i16 as usize;\n+    // arithmetic\n+    let _y = x + 4;\n+    let _y = 4 + x;\n+    let _y = x - 2;\n+    // bit-operations, covered by alignment\n+    assert_eq!(x & 1, 0);\n+    assert_eq!(x & 0, 0);\n+    assert_eq!(1 & (x+1), 1);\n+    let _y = !1 & x;\n+    let _y = !0 & x;\n+    let _y = x & !1;\n+    // remainder, covered by alignment\n+    assert_eq!(x % 2, 0);\n+    assert_eq!((x+1) % 2, 1);\n+    // remainder with 1 is always 0\n+    assert_eq!(x % 1, 0);\n+}"}]}