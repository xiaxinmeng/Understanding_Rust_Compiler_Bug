{"sha": "1d25981c730f41591622a9c1a04cdd3de84e5a30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjU5ODFjNzMwZjQxNTkxNjIyYTljMWEwNGNkZDNkZTg0ZTVhMzA=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-31T01:14:40Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-15T19:41:41Z"}, "message": "Formatting fixup in parser.rs", "tree": {"sha": "ef8caa0a51f1aa20390a5f10e1b45a35bbfe46bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8caa0a51f1aa20390a5f10e1b45a35bbfe46bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d25981c730f41591622a9c1a04cdd3de84e5a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d25981c730f41591622a9c1a04cdd3de84e5a30", "html_url": "https://github.com/rust-lang/rust/commit/1d25981c730f41591622a9c1a04cdd3de84e5a30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d25981c730f41591622a9c1a04cdd3de84e5a30/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32167f52b018e319ac1e62a9713b771566bebe8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32167f52b018e319ac1e62a9713b771566bebe8e", "html_url": "https://github.com/rust-lang/rust/commit/32167f52b018e319ac1e62a9713b771566bebe8e"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "f2481e4addacba286ba2f1f458146dbde6acc488", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1d25981c730f41591622a9c1a04cdd3de84e5a30/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d25981c730f41591622a9c1a04cdd3de84e5a30/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1d25981c730f41591622a9c1a04cdd3de84e5a30", "patch": "@@ -95,7 +95,7 @@ class parser {\n         self.restricted_keywords = token::restricted_keyword_table();\n     }\n \n-    //TODO: uncomment when destructors workd\n+    //TODO: uncomment when destructors work\n     //drop {} /* do not copy the parser; its state is tied to outside state */\n \n     fn bump() {\n@@ -995,7 +995,7 @@ class parser {\n                     let tys = if self.eat(token::MOD_SEP) {\n                         self.expect(token::LT);\n                         self.parse_seq_to_gt(some(token::COMMA),\n-                                        {|p| p.parse_ty(false)})\n+                                             {|p| p.parse_ty(false)})\n                     } else { [] };\n                     e = self.mk_pexpr(lo, hi, expr_field(self.to_expr(e),\n                                                          self.get_str(i),\n@@ -1018,45 +1018,46 @@ class parser {\n                 let nd =\n                     if vec::any(es_opt, {|e| option::is_none(e) }) {\n                     expr_bind(self.to_expr(e), es_opt)\n-            } else {\n-                let es = vec::map(es_opt) {|e| option::get(e) };\n-                expr_call(self.to_expr(e), es, false)\n-            };\n-            e = self.mk_pexpr(lo, hi, nd);\n-          }\n-\n-          // expr {|| ... }\n-          token::LBRACE if (token::is_bar(self.look_ahead(1u))\n-                            && self.permits_call()) {\n-            self.bump();\n-            let blk = self.parse_fn_block_expr();\n-            alt e.node {\n-              expr_call(f, args, false) {\n-                e = pexpr(@{node: expr_call(f, args + [blk], true)\n-                            with *self.to_expr(e)});\n+                } else {\n+                    let es = vec::map(es_opt) {|e| option::get(e) };\n+                    expr_call(self.to_expr(e), es, false)\n+                };\n+                e = self.mk_pexpr(lo, hi, nd);\n               }\n-              _ {\n-                e = self.mk_pexpr(lo, self.last_span.hi,\n-                                  expr_call(self.to_expr(e), [blk], true));\n+\n+              // expr {|| ... }\n+              token::LBRACE if (token::is_bar(self.look_ahead(1u))\n+                                && self.permits_call()) {\n+                self.bump();\n+                let blk = self.parse_fn_block_expr();\n+                alt e.node {\n+                  expr_call(f, args, false) {\n+                    e = pexpr(@{node: expr_call(f, args + [blk], true)\n+                                with *self.to_expr(e)});\n+                  }\n+                  _ {\n+                    e = self.mk_pexpr(lo, self.last_span.hi,\n+                                      expr_call(self.to_expr(e),\n+                                                [blk], true));\n+                  }\n+                }\n               }\n-            }\n-          }\n \n-          // expr[...]\n-          token::LBRACKET {\n-            self.bump();\n-            let ix = self.parse_expr();\n-            hi = ix.span.hi;\n-            self.expect(token::RBRACKET);\n-            self.get_id(); // see ast_util::op_expr_callee_id\n-            e = self.mk_pexpr(lo, hi, expr_index(self.to_expr(e), ix));\n-          }\n+              // expr[...]\n+              token::LBRACKET {\n+                self.bump();\n+                let ix = self.parse_expr();\n+                hi = ix.span.hi;\n+                self.expect(token::RBRACKET);\n+                self.get_id(); // see ast_util::op_expr_callee_id\n+                e = self.mk_pexpr(lo, hi, expr_index(self.to_expr(e), ix));\n+              }\n \n-          _ { ret e; }\n+              _ { ret e; }\n+            }\n         }\n+        ret e;\n     }\n-    ret e;\n-}\n \n     fn parse_token_tree() -> token_tree {\n         #[doc=\"what's the opposite delimiter?\"]\n@@ -2072,18 +2073,18 @@ class parser {\n         }\n         else if self.eat_keyword(\"priv\") {\n             self.expect(token::LBRACE);\n-        let mut results = [];\n-        while self.token != token::RBRACE {\n-            results += [self.parse_single_class_item(private)];\n+            let mut results = [];\n+            while self.token != token::RBRACE {\n+                results += [self.parse_single_class_item(private)];\n+            }\n+            self.bump();\n+            ret members(results);\n+        }\n+        else {\n+            // Probably need to parse attrs\n+            ret members([self.parse_single_class_item(public)]);\n         }\n-        self.bump();\n-        ret members(results);\n-    }\n-    else {\n-        // Probably need to parse attrs\n-        ret members([self.parse_single_class_item(public)]);\n     }\n-}\n \n     fn parse_visibility(def: visibility) -> visibility {\n         if self.eat_keyword(\"pub\") { public }"}]}