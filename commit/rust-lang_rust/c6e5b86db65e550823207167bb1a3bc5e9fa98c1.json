{"sha": "c6e5b86db65e550823207167bb1a3bc5e9fa98c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTViODZkYjY1ZTU1MDgyMzIwNzE2N2JiMWEzYmM1ZTlmYTk4YzE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-21T21:15:26Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-21T21:15:58Z"}, "message": "std: add file::io::test module and ensure correct build", "tree": {"sha": "a707d3e6b8f8bd1acc2d2d975d74fc39276b990d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a707d3e6b8f8bd1acc2d2d975d74fc39276b990d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e5b86db65e550823207167bb1a3bc5e9fa98c1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e5b86db65e550823207167bb1a3bc5e9fa98c1", "html_url": "https://github.com/rust-lang/rust/commit/c6e5b86db65e550823207167bb1a3bc5e9fa98c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e5b86db65e550823207167bb1a3bc5e9fa98c1/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb364d80b98397e7f83c97fcd3e9656dd4c470", "html_url": "https://github.com/rust-lang/rust/commit/6ebb364d80b98397e7f83c97fcd3e9656dd4c470"}], "stats": {"total": 494, "additions": 251, "deletions": 243}, "files": [{"sha": "2206f8bf6ae0fb9d9ce4353c85093b0b97755a95", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 251, "deletions": 243, "changes": 494, "blob_url": "https://github.com/rust-lang/rust/blob/c6e5b86db65e550823207167bb1a3bc5e9fa98c1/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e5b86db65e550823207167bb1a3bc5e9fa98c1/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=c6e5b86db65e550823207167bb1a3bc5e9fa98c1", "patch": "@@ -32,8 +32,7 @@ free function counterparts.\n use prelude::*;\n use super::support::PathLike;\n use super::{Reader, Writer, Seek};\n-use super::{SeekStyle,SeekSet, SeekCur, SeekEnd,\n-            Open, Read, Write, Create, ReadWrite};\n+use super::{SeekStyle, Read, Write};\n use rt::rtio::{RtioFileStream, IoFactory, IoFactoryObject};\n use rt::io::{io_error, read_error, EndOfFile,\n             FileMode, FileAccess, FileStat, IoError,\n@@ -42,7 +41,6 @@ use rt::io::{io_error, read_error, EndOfFile,\n use rt::local::Local;\n use option::{Some, None};\n use path::Path;\n-use super::super::test::*;\n \n /// Open a file for reading/writing, as indicated by `path`.\n ///\n@@ -686,281 +684,291 @@ trait DirectoryInfo : FileSystemInfo {\n /// `DirectoryInfo` impl for `path::Path`\n impl DirectoryInfo for Path { }\n \n-#[test]\n-fn file_test_io_smoke_test() {\n-    do run_in_mt_newsched_task {\n-        let message = \"it's alright. have a good time\";\n-        let filename = &Path(\"./tmp/file_rt_io_file_test.txt\");\n-        {\n-            let mut write_stream = open(filename, Create, ReadWrite).unwrap();\n-            write_stream.write(message.as_bytes());\n-        }\n-        {\n-            use str;\n-            let mut read_stream = open(filename, Open, Read).unwrap();\n-            let mut read_buf = [0, .. 1028];\n-            let read_str = match read_stream.read(read_buf).unwrap() {\n-                -1|0 => fail!(\"shouldn't happen\"),\n-                n => str::from_utf8(read_buf.slice_to(n))\n-            };\n-            assert!(read_str == message.to_owned());\n+#[cfg(test)]\n+mod test {\n+    use super::super::{SeekSet, SeekCur, SeekEnd,\n+                       io_error, Read, Create, Open, ReadWrite};\n+    use super::super::super::test::*;\n+    use option::{Some, None};\n+    use path::Path;\n+    use super::*;\n+    use iter::range;\n+    #[test]\n+    fn file_test_io_smoke_test() {\n+        do run_in_mt_newsched_task {\n+            let message = \"it's alright. have a good time\";\n+            let filename = &Path(\"./tmp/file_rt_io_file_test.txt\");\n+            {\n+                let mut write_stream = open(filename, Create, ReadWrite).unwrap();\n+                write_stream.write(message.as_bytes());\n+            }\n+            {\n+                use str;\n+                let mut read_stream = open(filename, Open, Read).unwrap();\n+                let mut read_buf = [0, .. 1028];\n+                let read_str = match read_stream.read(read_buf).unwrap() {\n+                    -1|0 => fail!(\"shouldn't happen\"),\n+                    n => str::from_utf8(read_buf.slice_to(n))\n+                };\n+                assert!(read_str == message.to_owned());\n+            }\n+            unlink(filename);\n         }\n-        unlink(filename);\n     }\n-}\n \n-#[test]\n-fn file_test_io_invalid_path_opened_without_create_should_raise_condition() {\n-    do run_in_mt_newsched_task {\n-        let filename = &Path(\"./tmp/file_that_does_not_exist.txt\");\n-        let mut called = false;\n-        do io_error::cond.trap(|_| {\n-            called = true;\n-        }).inside {\n-            let result = open(filename, Open, Read);\n-            assert!(result.is_none());\n+    #[test]\n+    fn file_test_io_invalid_path_opened_without_create_should_raise_condition() {\n+        do run_in_mt_newsched_task {\n+            let filename = &Path(\"./tmp/file_that_does_not_exist.txt\");\n+            let mut called = false;\n+            do io_error::cond.trap(|_| {\n+                called = true;\n+            }).inside {\n+                let result = open(filename, Open, Read);\n+                assert!(result.is_none());\n+            }\n+            assert!(called);\n         }\n-        assert!(called);\n     }\n-}\n \n-#[test]\n-fn file_test_iounlinking_invalid_path_should_raise_condition() {\n-    do run_in_mt_newsched_task {\n-        let filename = &Path(\"./tmp/file_another_file_that_does_not_exist.txt\");\n-        let mut called = false;\n-        do io_error::cond.trap(|_| {\n-            called = true;\n-        }).inside {\n-            unlink(filename);\n+    #[test]\n+    fn file_test_iounlinking_invalid_path_should_raise_condition() {\n+        do run_in_mt_newsched_task {\n+            let filename = &Path(\"./tmp/file_another_file_that_does_not_exist.txt\");\n+            let mut called = false;\n+            do io_error::cond.trap(|_| {\n+                called = true;\n+            }).inside {\n+                unlink(filename);\n+            }\n+            assert!(called);\n         }\n-        assert!(called);\n     }\n-}\n \n-#[test]\n-fn file_test_io_non_positional_read() {\n-    do run_in_mt_newsched_task {\n-        use str;\n-        let message = \"ten-four\";\n-        let mut read_mem = [0, .. 8];\n-        let filename = &Path(\"./tmp/file_rt_io_file_test_positional.txt\");\n-        {\n-            let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n-            rw_stream.write(message.as_bytes());\n-        }\n-        {\n-            let mut read_stream = open(filename, Open, Read).unwrap();\n+    #[test]\n+    fn file_test_io_non_positional_read() {\n+        do run_in_mt_newsched_task {\n+            use str;\n+            let message = \"ten-four\";\n+            let mut read_mem = [0, .. 8];\n+            let filename = &Path(\"./tmp/file_rt_io_file_test_positional.txt\");\n             {\n-                let read_buf = read_mem.mut_slice(0, 4);\n-                read_stream.read(read_buf);\n+                let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n+                rw_stream.write(message.as_bytes());\n             }\n             {\n-                let read_buf = read_mem.mut_slice(4, 8);\n-                read_stream.read(read_buf);\n+                let mut read_stream = open(filename, Open, Read).unwrap();\n+                {\n+                    let read_buf = read_mem.mut_slice(0, 4);\n+                    read_stream.read(read_buf);\n+                }\n+                {\n+                    let read_buf = read_mem.mut_slice(4, 8);\n+                    read_stream.read(read_buf);\n+                }\n             }\n+            unlink(filename);\n+            let read_str = str::from_utf8(read_mem);\n+            assert!(read_str == message.to_owned());\n         }\n-        unlink(filename);\n-        let read_str = str::from_utf8(read_mem);\n-        assert!(read_str == message.to_owned());\n-    }\n-}\n-\n-#[test]\n-fn file_test_io_seek_and_tell_smoke_test() {\n-    do run_in_mt_newsched_task {\n-        use str;\n-        let message = \"ten-four\";\n-        let mut read_mem = [0, .. 4];\n-        let set_cursor = 4 as u64;\n-        let mut tell_pos_pre_read;\n-        let mut tell_pos_post_read;\n-        let filename = &Path(\"./tmp/file_rt_io_file_test_seeking.txt\");\n-        {\n-            let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n-            rw_stream.write(message.as_bytes());\n-        }\n-        {\n-            let mut read_stream = open(filename, Open, Read).unwrap();\n-            read_stream.seek(set_cursor as i64, SeekSet);\n-            tell_pos_pre_read = read_stream.tell();\n-            read_stream.read(read_mem);\n-            tell_pos_post_read = read_stream.tell();\n-        }\n-        unlink(filename);\n-        let read_str = str::from_utf8(read_mem);\n-        assert!(read_str == message.slice(4, 8).to_owned());\n-        assert!(tell_pos_pre_read == set_cursor);\n-        assert!(tell_pos_post_read == message.len() as u64);\n     }\n-}\n \n-#[test]\n-fn file_test_io_seek_and_write() {\n-    do run_in_mt_newsched_task {\n-        use str;\n-        let initial_msg =   \"food-is-yummy\";\n-        let overwrite_msg =    \"-the-bar!!\";\n-        let final_msg =     \"foo-the-bar!!\";\n-        let seek_idx = 3;\n-        let mut read_mem = [0, .. 13];\n-        let filename = &Path(\"./tmp/file_rt_io_file_test_seek_and_write.txt\");\n-        {\n-            let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n-            rw_stream.write(initial_msg.as_bytes());\n-            rw_stream.seek(seek_idx as i64, SeekSet);\n-            rw_stream.write(overwrite_msg.as_bytes());\n-        }\n-        {\n-            let mut read_stream = open(filename, Open, Read).unwrap();\n-            read_stream.read(read_mem);\n-        }\n-        unlink(filename);\n-        let read_str = str::from_utf8(read_mem);\n-        assert!(read_str == final_msg.to_owned());\n-    }\n-}\n-\n-#[test]\n-fn file_test_io_seek_shakedown() {\n-    do run_in_mt_newsched_task {\n-        use str;          // 01234567890123\n-        let initial_msg =   \"qwer-asdf-zxcv\";\n-        let chunk_one = \"qwer\";\n-        let chunk_two = \"asdf\";\n-        let chunk_three = \"zxcv\";\n-        let mut read_mem = [0, .. 4];\n-        let filename = &Path(\"./tmp/file_rt_io_file_test_seek_shakedown.txt\");\n-        {\n-            let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n-            rw_stream.write(initial_msg.as_bytes());\n-        }\n-        {\n-            let mut read_stream = open(filename, Open, Read).unwrap();\n-\n-            read_stream.seek(-4, SeekEnd);\n-            read_stream.read(read_mem);\n+    #[test]\n+    fn file_test_io_seek_and_tell_smoke_test() {\n+        do run_in_mt_newsched_task {\n+            use str;\n+            let message = \"ten-four\";\n+            let mut read_mem = [0, .. 4];\n+            let set_cursor = 4 as u64;\n+            let mut tell_pos_pre_read;\n+            let mut tell_pos_post_read;\n+            let filename = &Path(\"./tmp/file_rt_io_file_test_seeking.txt\");\n+            {\n+                let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n+                rw_stream.write(message.as_bytes());\n+            }\n+            {\n+                let mut read_stream = open(filename, Open, Read).unwrap();\n+                read_stream.seek(set_cursor as i64, SeekSet);\n+                tell_pos_pre_read = read_stream.tell();\n+                read_stream.read(read_mem);\n+                tell_pos_post_read = read_stream.tell();\n+            }\n+            unlink(filename);\n             let read_str = str::from_utf8(read_mem);\n-            assert!(read_str == chunk_three.to_owned());\n+            assert!(read_str == message.slice(4, 8).to_owned());\n+            assert!(tell_pos_pre_read == set_cursor);\n+            assert!(tell_pos_post_read == message.len() as u64);\n+        }\n+    }\n \n-            read_stream.seek(-9, SeekCur);\n-            read_stream.read(read_mem);\n+    #[test]\n+    fn file_test_io_seek_and_write() {\n+        do run_in_mt_newsched_task {\n+            use str;\n+            let initial_msg =   \"food-is-yummy\";\n+            let overwrite_msg =    \"-the-bar!!\";\n+            let final_msg =     \"foo-the-bar!!\";\n+            let seek_idx = 3;\n+            let mut read_mem = [0, .. 13];\n+            let filename = &Path(\"./tmp/file_rt_io_file_test_seek_and_write.txt\");\n+            {\n+                let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n+                rw_stream.write(initial_msg.as_bytes());\n+                rw_stream.seek(seek_idx as i64, SeekSet);\n+                rw_stream.write(overwrite_msg.as_bytes());\n+            }\n+            {\n+                let mut read_stream = open(filename, Open, Read).unwrap();\n+                read_stream.read(read_mem);\n+            }\n+            unlink(filename);\n             let read_str = str::from_utf8(read_mem);\n-            assert!(read_str == chunk_two.to_owned());\n+            assert!(read_str == final_msg.to_owned());\n+        }\n+    }\n \n-            read_stream.seek(0, SeekSet);\n-            read_stream.read(read_mem);\n-            let read_str = str::from_utf8(read_mem);\n-            assert!(read_str == chunk_one.to_owned());\n+    #[test]\n+    fn file_test_io_seek_shakedown() {\n+        do run_in_mt_newsched_task {\n+            use str;          // 01234567890123\n+            let initial_msg =   \"qwer-asdf-zxcv\";\n+            let chunk_one = \"qwer\";\n+            let chunk_two = \"asdf\";\n+            let chunk_three = \"zxcv\";\n+            let mut read_mem = [0, .. 4];\n+            let filename = &Path(\"./tmp/file_rt_io_file_test_seek_shakedown.txt\");\n+            {\n+                let mut rw_stream = open(filename, Create, ReadWrite).unwrap();\n+                rw_stream.write(initial_msg.as_bytes());\n+            }\n+            {\n+                let mut read_stream = open(filename, Open, Read).unwrap();\n+\n+                read_stream.seek(-4, SeekEnd);\n+                read_stream.read(read_mem);\n+                let read_str = str::from_utf8(read_mem);\n+                assert!(read_str == chunk_three.to_owned());\n+\n+                read_stream.seek(-9, SeekCur);\n+                read_stream.read(read_mem);\n+                let read_str = str::from_utf8(read_mem);\n+                assert!(read_str == chunk_two.to_owned());\n+\n+                read_stream.seek(0, SeekSet);\n+                read_stream.read(read_mem);\n+                let read_str = str::from_utf8(read_mem);\n+                assert!(read_str == chunk_one.to_owned());\n+            }\n+            unlink(filename);\n         }\n-        unlink(filename);\n     }\n-}\n \n-#[test]\n-fn file_test_stat_is_correct_on_is_file() {\n-    do run_in_mt_newsched_task {\n-        let filename = &Path(\"./tmp/file_stat_correct_on_is_file.txt\");\n-        {\n-            let mut fs = open(filename, Create, ReadWrite).unwrap();\n-            let msg = \"hw\";\n-            fs.write(msg.as_bytes());\n-        }\n-        let stat_res = match stat(filename) {\n-            Some(s) => s,\n-            None => fail!(\"shouldn't happen\")\n-        };\n-        assert!(stat_res.is_file);\n-        unlink(filename);\n+    #[test]\n+    fn file_test_stat_is_correct_on_is_file() {\n+        do run_in_mt_newsched_task {\n+            let filename = &Path(\"./tmp/file_stat_correct_on_is_file.txt\");\n+            {\n+                let mut fs = open(filename, Create, ReadWrite).unwrap();\n+                let msg = \"hw\";\n+                fs.write(msg.as_bytes());\n+            }\n+            let stat_res = match stat(filename) {\n+                Some(s) => s,\n+                None => fail!(\"shouldn't happen\")\n+            };\n+            assert!(stat_res.is_file);\n+            unlink(filename);\n+        }\n     }\n-}\n \n-#[test]\n-fn file_test_stat_is_correct_on_is_dir() {\n-    do run_in_mt_newsched_task {\n-        let filename = &Path(\"./tmp/file_stat_correct_on_is_dir\");\n-        mkdir(filename);\n-        let stat_res = match stat(filename) {\n-            Some(s) => s,\n-            None => fail!(\"shouldn't happen\")\n-        };\n-        assert!(stat_res.is_dir);\n-        rmdir(filename);\n+    #[test]\n+    fn file_test_stat_is_correct_on_is_dir() {\n+        do run_in_mt_newsched_task {\n+            let filename = &Path(\"./tmp/file_stat_correct_on_is_dir\");\n+            mkdir(filename);\n+            let stat_res = match stat(filename) {\n+                Some(s) => s,\n+                None => fail!(\"shouldn't happen\")\n+            };\n+            assert!(stat_res.is_dir);\n+            rmdir(filename);\n+        }\n     }\n-}\n \n-#[test]\n-fn file_test_fileinfo_false_when_checking_is_file_on_a_directory() {\n-    do run_in_mt_newsched_task {\n-        let dir = &Path(\"./tmp/fileinfo_false_on_dir\");\n-        mkdir(dir);\n-        assert!(dir.is_file() == false);\n-        rmdir(dir);\n+    #[test]\n+    fn file_test_fileinfo_false_when_checking_is_file_on_a_directory() {\n+        do run_in_mt_newsched_task {\n+            let dir = &Path(\"./tmp/fileinfo_false_on_dir\");\n+            mkdir(dir);\n+            assert!(dir.is_file() == false);\n+            rmdir(dir);\n+        }\n     }\n-}\n \n-#[test]\n-fn file_test_fileinfo_check_exists_before_and_after_file_creation() {\n-    do run_in_mt_newsched_task {\n-        let file = &Path(\"./tmp/fileinfo_check_exists_b_and_a.txt\");\n-        {\n-            let msg = \"foo\".as_bytes();\n-            let mut w = file.open_writer(Create);\n-            w.write(msg);\n+    #[test]\n+    fn file_test_fileinfo_check_exists_before_and_after_file_creation() {\n+        do run_in_mt_newsched_task {\n+            let file = &Path(\"./tmp/fileinfo_check_exists_b_and_a.txt\");\n+            {\n+                let msg = \"foo\".as_bytes();\n+                let mut w = file.open_writer(Create);\n+                w.write(msg);\n+            }\n+            assert!(file.exists());\n+            file.unlink();\n+            assert!(!file.exists());\n         }\n-        assert!(file.exists());\n-        file.unlink();\n-        assert!(!file.exists());\n     }\n-}\n \n-#[test]\n-fn file_test_directoryinfo_check_exists_before_and_after_mkdir() {\n-    do run_in_mt_newsched_task {\n-        let dir = &Path(\"./tmp/before_and_after_dir\");\n-        assert!(!dir.exists());\n-        dir.mkdir();\n-        assert!(dir.exists());\n-        assert!(dir.is_dir());\n-        dir.rmdir();\n-        assert!(!dir.exists());\n+    #[test]\n+    fn file_test_directoryinfo_check_exists_before_and_after_mkdir() {\n+        do run_in_mt_newsched_task {\n+            let dir = &Path(\"./tmp/before_and_after_dir\");\n+            assert!(!dir.exists());\n+            dir.mkdir();\n+            assert!(dir.exists());\n+            assert!(dir.is_dir());\n+            dir.rmdir();\n+            assert!(!dir.exists());\n+        }\n     }\n-}\n \n-#[test]\n-fn file_test_directoryinfo_readdir() {\n-    use str;\n-    do run_in_mt_newsched_task {\n-        let dir = &Path(\"./tmp/di_readdir\");\n-        dir.mkdir();\n-        let prefix = \"foo\";\n-        for n in range(0,3) {\n-            let f = dir.push(fmt!(\"%d.txt\", n));\n-            let mut w = f.open_writer(Create);\n-            let msg_str = (prefix + n.to_str().to_owned()).to_owned();\n-            let msg = msg_str.as_bytes();\n-            w.write(msg);\n-        }\n-        match dir.readdir() {\n-            Some(files) => {\n-                let mut mem = [0u8, .. 4];\n-                for f in files.iter() {\n-                    {\n-                        let n = f.filestem();\n-                        let mut r = f.open_reader(Open);\n-                        r.read(mem);\n-                        let read_str = str::from_utf8(mem);\n-                        let expected = match n {\n-                            Some(n) => prefix+n,\n-                            None => fail!(\"really shouldn't happen..\")\n-                        };\n-                        assert!(expected == read_str);\n+    #[test]\n+    fn file_test_directoryinfo_readdir() {\n+        use str;\n+        do run_in_mt_newsched_task {\n+            let dir = &Path(\"./tmp/di_readdir\");\n+            dir.mkdir();\n+            let prefix = \"foo\";\n+            for n in range(0,3) {\n+                let f = dir.push(fmt!(\"%d.txt\", n));\n+                let mut w = f.open_writer(Create);\n+                let msg_str = (prefix + n.to_str().to_owned()).to_owned();\n+                let msg = msg_str.as_bytes();\n+                w.write(msg);\n+            }\n+            match dir.readdir() {\n+                Some(files) => {\n+                    let mut mem = [0u8, .. 4];\n+                    for f in files.iter() {\n+                        {\n+                            let n = f.filestem();\n+                            let mut r = f.open_reader(Open);\n+                            r.read(mem);\n+                            let read_str = str::from_utf8(mem);\n+                            let expected = match n {\n+                                Some(n) => prefix+n,\n+                                None => fail!(\"really shouldn't happen..\")\n+                            };\n+                            assert!(expected == read_str);\n+                        }\n+                        f.unlink();\n                     }\n-                    f.unlink();\n-                }\n-            },\n-            None => fail!(\"shouldn't happen\")\n+                },\n+                None => fail!(\"shouldn't happen\")\n+            }\n+            dir.rmdir();\n         }\n-        dir.rmdir();\n     }\n }\n\\ No newline at end of file"}]}