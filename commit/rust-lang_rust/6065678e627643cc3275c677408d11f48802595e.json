{"sha": "6065678e627643cc3275c677408d11f48802595e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNjU2NzhlNjI3NjQzY2MzMjc1YzY3NzQwOGQxMWY0ODgwMjU5NWU=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-08-26T12:27:32Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-08-27T19:48:03Z"}, "message": "Use a different buffer doubling logic for `std::sys::os::getcwd`\n\nMake `std::sys::os::getcwd` call `Vec::reserve(1)` followed by\n`Vec::set_len` to double the buffer. This is to align with other similar\nfunctions, such as:\n\n- `std::sys_common::io::read_to_end_uninitialized`\n- `std::sys::fs::readlink`\n\nAlso, reduce the initial buffer size from 2048 to 512. The previous size was\nintroduced with 4bc26ce in 2013, but it seems a bit excessive. This is\nprobably because buffer doubling was not implemented back then.", "tree": {"sha": "b9fdd3cbaad37da03cdaa6b7730746239c0673e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9fdd3cbaad37da03cdaa6b7730746239c0673e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6065678e627643cc3275c677408d11f48802595e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6065678e627643cc3275c677408d11f48802595e", "html_url": "https://github.com/rust-lang/rust/commit/6065678e627643cc3275c677408d11f48802595e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6065678e627643cc3275c677408d11f48802595e/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7723550fdd7fe29bee9dcbd45bdef4f209a7e1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7723550fdd7fe29bee9dcbd45bdef4f209a7e1f1", "html_url": "https://github.com/rust-lang/rust/commit/7723550fdd7fe29bee9dcbd45bdef4f209a7e1f1"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "fa31ac682d40bd04878edcd40807f4d2c881f077", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6065678e627643cc3275c677408d11f48802595e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6065678e627643cc3275c677408d11f48802595e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=6065678e627643cc3275c677408d11f48802595e", "patch": "@@ -30,7 +30,6 @@ use sys::c;\n use sys::fd;\n use vec;\n \n-const GETCWD_BUF_BYTES: usize = 2048;\n const TMPBUF_SZ: usize = 128;\n \n /// Returns the platform-specific value of errno\n@@ -94,11 +93,9 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {\n-    let mut buf = Vec::new();\n-    let mut n = GETCWD_BUF_BYTES;\n+    let mut buf = Vec::with_capacity(512);\n     loop {\n         unsafe {\n-            buf.reserve(n);\n             let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n             if !libc::getcwd(ptr, buf.capacity() as libc::size_t).is_null() {\n                 let len = CStr::from_ptr(buf.as_ptr() as *const libc::c_char).to_bytes().len();\n@@ -111,7 +108,12 @@ pub fn getcwd() -> io::Result<PathBuf> {\n                     return Err(error);\n                 }\n             }\n-            n *= 2;\n+\n+            // Trigger the internal buffer resizing logic of `Vec` by requiring\n+            // more space than the current capacity.\n+            let cap = buf.capacity();\n+            buf.set_len(cap);\n+            buf.reserve(1);\n         }\n     }\n }"}]}