{"sha": "e8a93306f0068adacc6fe2e811e261a5795f68e8", "node_id": "C_kwDOAAsO6NoAKGU4YTkzMzA2ZjAwNjhhZGFjYzZmZTJlODExZTI2MWE1Nzk1ZjY4ZTg", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T08:46:33Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T08:46:33Z"}, "message": "Remove 0 TextSize at front", "tree": {"sha": "56476c869ad869704e4098fba2fc5355b73782ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56476c869ad869704e4098fba2fc5355b73782ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a93306f0068adacc6fe2e811e261a5795f68e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a93306f0068adacc6fe2e811e261a5795f68e8", "html_url": "https://github.com/rust-lang/rust/commit/e8a93306f0068adacc6fe2e811e261a5795f68e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a93306f0068adacc6fe2e811e261a5795f68e8/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65004877358fc5e9b285d9a7683baf62ec541f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/65004877358fc5e9b285d9a7683baf62ec541f73", "html_url": "https://github.com/rust-lang/rust/commit/65004877358fc5e9b285d9a7683baf62ec541f73"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "214fc215f661e03e64fd78d027b562c8170398a1", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8a93306f0068adacc6fe2e811e261a5795f68e8/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a93306f0068adacc6fe2e811e261a5795f68e8/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=e8a93306f0068adacc6fe2e811e261a5795f68e8", "patch": "@@ -83,7 +83,7 @@ impl WideChar {\n /// Maps flat [`TextSize`] offsets to/from `(line, column)` representation.\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct LineIndex {\n-    /// Offset the beginning of each line, zero-based.\n+    /// Offset the beginning of each line (except the first, which always has offset 0).\n     newlines: Box<[TextSize]>,\n     /// List of non-ASCII characters on each line.\n     line_wide_chars: IntMap<u32, Box<[WideChar]>>,\n@@ -100,8 +100,6 @@ impl LineIndex {\n         let mut cur_col = TextSize::from(0);\n         let mut line = 0;\n \n-        newlines.push(TextSize::from(0));\n-\n         for c in text.chars() {\n             let c_len = TextSize::of(c);\n             cur_row += c_len;\n@@ -147,8 +145,8 @@ impl LineIndex {\n     /// Transforms the `TextSize` into a `LineCol`, or returns `None` if the `offset` was invalid,\n     /// e.g. if it points to the middle of a multi-byte character.\n     pub fn try_line_col(&self, offset: TextSize) -> Option<LineCol> {\n-        let line = self.newlines.partition_point(|&it| it <= offset).checked_sub(1)?;\n-        let start = self.newlines.get(line)?;\n+        let line = self.newlines.partition_point(|&it| it <= offset);\n+        let start = self.start_offset(line)?;\n         let col = offset - start;\n         let ret = LineCol { line: line as u32, col: col.into() };\n         self.line_wide_chars\n@@ -162,9 +160,14 @@ impl LineIndex {\n \n     /// Transforms the `LineCol` into a `TextSize`.\n     pub fn offset(&self, line_col: LineCol) -> Option<TextSize> {\n-        self.newlines\n-            .get(line_col.line as usize)\n-            .map(|offset| offset + TextSize::from(line_col.col))\n+        self.start_offset(line_col.line as usize).map(|start| start + TextSize::from(line_col.col))\n+    }\n+\n+    fn start_offset(&self, line: usize) -> Option<TextSize> {\n+        match line.checked_sub(1) {\n+            None => Some(TextSize::from(0)),\n+            Some(it) => self.newlines.get(it).copied(),\n+        }\n     }\n \n     /// Transforms the `LineCol` with the given `WideEncoding` into a `WideLineCol`."}]}