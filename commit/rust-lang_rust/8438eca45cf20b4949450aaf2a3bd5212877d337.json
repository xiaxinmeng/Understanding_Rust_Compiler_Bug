{"sha": "8438eca45cf20b4949450aaf2a3bd5212877d337", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MzhlY2E0NWNmMjBiNDk0OTQ1MGFhZjJhM2JkNTIxMjg3N2QzMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-06T23:35:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T22:52:48Z"}, "message": "Integrate shootout benchmarks into testsuite", "tree": {"sha": "d7ec1601effc334f3f98a4aac176d19047cc321a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ec1601effc334f3f98a4aac176d19047cc321a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8438eca45cf20b4949450aaf2a3bd5212877d337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8438eca45cf20b4949450aaf2a3bd5212877d337", "html_url": "https://github.com/rust-lang/rust/commit/8438eca45cf20b4949450aaf2a3bd5212877d337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8438eca45cf20b4949450aaf2a3bd5212877d337/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242ecd0e96e568d80e20ad847a9a7766213cffee", "url": "https://api.github.com/repos/rust-lang/rust/commits/242ecd0e96e568d80e20ad847a9a7766213cffee", "html_url": "https://github.com/rust-lang/rust/commit/242ecd0e96e568d80e20ad847a9a7766213cffee"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "e2f2957cb5961bb31cb80442afd7de325693084c", "filename": "src/Makefile", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8438eca45cf20b4949450aaf2a3bd5212877d337/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8438eca45cf20b4949450aaf2a3bd5212877d337/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=8438eca45cf20b4949450aaf2a3bd5212877d337", "patch": "@@ -574,7 +574,8 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         while-type-error.rs \\\n                         wrong-ret-type.rs \\\n                         ), \\\n-                      $(wildcard test/*fail/*.rs test/*fail/*.rc))\n+                      $(wildcard test/*fail/*.rs test/*fail/*.rc)) \\\n+                     test/bench/shootout/fasta.rs\n \n \n ifdef MINGW_CROSS\n@@ -586,8 +587,10 @@ TEST_XFAILS_BOOT += test/run-pass/native-mod.rc\n TEST_XFAILS_RUSTC += test/run-pass/native-mod.rc\n endif\n \n-RPASS_RC := $(wildcard test/run-pass/*.rc)\n-RPASS_RS := $(wildcard test/run-pass/*.rs)\n+BENCH_RC := $(wildcard test/bench/shootout/*rc)\n+BENCH_RS := $(wildcard test/bench/shootout/*rs)\n+RPASS_RC := $(wildcard test/run-pass/*.rc) $(BENCH_RC)\n+RPASS_RS := $(wildcard test/run-pass/*.rs) $(BENCH_RS)\n RFAIL_RC := $(wildcard test/run-fail/*.rc)\n RFAIL_RS := $(wildcard test/run-fail/*.rs)\n CFAIL_RC := $(wildcard test/compile-fail/*.rc)\n@@ -731,6 +734,12 @@ test/run-pass/%.out.tmp: test/run-pass/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n \t@$(call CFG_ECHO, run: $<)\n \t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n \n+test/bench/shootout/%.out.tmp: test/bench/shootout/%$(CFG_EXE_SUFFIX) \\\n+                                  $(CFG_RUNTIME)\n+\t$(CFG_QUIET)rm -f $<.tmp\n+\t@$(call CFG_ECHO, run: $<)\n+\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n+\n test/run-fail/%.out.tmp: test/run-fail/%$(CFG_EXE_SUFFIX) \\\n                                   $(CFG_RUNTIME)\n \t$(CFG_QUIET)rm -f $<.tmp"}, {"sha": "5f87943484fe1971a12bcf3f820a4f83f3f00622", "filename": "src/test/bench/shootout/binary-trees.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8438eca45cf20b4949450aaf2a3bd5212877d337/src%2Ftest%2Fbench%2Fshootout%2Fbinary-trees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8438eca45cf20b4949450aaf2a3bd5212877d337/src%2Ftest%2Fbench%2Fshootout%2Fbinary-trees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Fbinary-trees.rs?ref=8438eca45cf20b4949450aaf2a3bd5212877d337", "patch": "@@ -1,14 +1,14 @@\n tag tree {\n-  nil();\n+  nil;\n   node(@tree, @tree, int);\n }\n \n-fn item_check(&tree t) -> int {\n-  alt (t) {\n-    case (nil()) {\n+fn item_check(@tree t) -> int {\n+  alt (*t) {\n+    case (nil) {\n       ret 0;\n     }\n-    case (node(@tree left, @tree right, int item)) {\n+    case (node(?left, ?right, ?item)) {\n       ret item + item_check(left) - item_check(right);\n     }\n   }"}]}