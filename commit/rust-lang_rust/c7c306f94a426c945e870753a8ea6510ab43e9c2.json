{"sha": "c7c306f94a426c945e870753a8ea6510ab43e9c2", "node_id": "C_kwDOAAsO6NoAKGM3YzMwNmY5NGE0MjZjOTQ1ZTg3MDc1M2E4ZWE2NTEwYWI0M2U5YzI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-17T20:46:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Do not decode span when we only need the name.", "tree": {"sha": "507e3ebf7cad36ad02c4f350c623dc7dffd9d9d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507e3ebf7cad36ad02c4f350c623dc7dffd9d9d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c306f94a426c945e870753a8ea6510ab43e9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c306f94a426c945e870753a8ea6510ab43e9c2", "html_url": "https://github.com/rust-lang/rust/commit/c7c306f94a426c945e870753a8ea6510ab43e9c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c306f94a426c945e870753a8ea6510ab43e9c2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07f1bfc606874d045714b7d957027c64377d64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07f1bfc606874d045714b7d957027c64377d64c", "html_url": "https://github.com/rust-lang/rust/commit/f07f1bfc606874d045714b7d957027c64377d64c"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "e77b3ee1d1e932cacf29dada6b67dc61308a2467", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c7c306f94a426c945e870753a8ea6510ab43e9c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c306f94a426c945e870753a8ea6510ab43e9c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c7c306f94a426c945e870753a8ea6510ab43e9c2", "patch": "@@ -808,8 +808,16 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         &self.raw_proc_macros.unwrap()[pos]\n     }\n \n+    fn opt_item_name(self, item_index: DefIndex) -> Option<Symbol> {\n+        self.def_key(item_index).disambiguated_data.data.get_opt_name()\n+    }\n+\n+    fn item_name(self, item_index: DefIndex) -> Symbol {\n+        self.opt_item_name(item_index).expect(\"no encoded ident for item\")\n+    }\n+\n     fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {\n-        let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;\n+        let name = self.opt_item_name(item_index)?;\n         let span = match self.root.tables.def_ident_span.get(self, item_index) {\n             Some(lazy_span) => lazy_span.decode((self, sess)),\n             None => {\n@@ -927,13 +935,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_variant(\n-        self,\n-        kind: &EntryKind,\n-        index: DefIndex,\n-        parent_did: DefId,\n-        sess: &Session,\n-    ) -> ty::VariantDef {\n+    fn get_variant(self, kind: &EntryKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n         let data = match kind {\n             EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {\n                 data.decode(self)\n@@ -953,7 +955,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let ctor_did = data.ctor.map(|index| self.local_def_id(index));\n \n         ty::VariantDef::new(\n-            self.item_ident(index, sess).name,\n+            self.item_name(index),\n             variant_did,\n             ctor_did,\n             data.discr,\n@@ -965,7 +967,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .decode(self)\n                 .map(|index| ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    name: self.item_ident(index, sess).name,\n+                    name: self.item_name(index),\n                     vis: self.get_visibility(index),\n                 })\n                 .collect(),\n@@ -995,10 +997,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .get(self, item_id)\n                 .unwrap_or_else(Lazy::empty)\n                 .decode(self)\n-                .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))\n+                .map(|index| self.get_variant(&self.kind(index), index, did))\n                 .collect()\n         } else {\n-            std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()\n+            std::iter::once(self.get_variant(&kind, item_id, did)).collect()\n         };\n \n         tcx.alloc_adt_def(did, adt_kind, variants, repr)\n@@ -1228,10 +1230,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {\n+    fn get_associated_item(self, id: DefIndex) -> ty::AssocItem {\n         let def_key = self.def_key(id);\n         let parent = self.local_def_id(def_key.parent.unwrap());\n-        let ident = self.item_ident(id, sess);\n+        let name = self.item_name(id);\n \n         let (kind, container, has_self) = match self.kind(id) {\n             EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),\n@@ -1244,7 +1246,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n \n         ty::AssocItem {\n-            name: ident.name,\n+            name,\n             kind,\n             vis: self.get_visibility(id),\n             defaultness: container.defaultness(),\n@@ -1301,7 +1303,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .get(self, id)\n             .unwrap_or_else(Lazy::empty)\n             .decode(self)\n-            .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))\n+            .map(move |index| respan(self.get_span(index, sess), self.item_name(index)))\n     }\n \n     fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {"}, {"sha": "8427961165dff06e0b35d7ae9640aae5ab81ff9a", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7c306f94a426c945e870753a8ea6510ab43e9c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c306f94a426c945e870753a8ea6510ab43e9c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c7c306f94a426c945e870753a8ea6510ab43e9c2", "patch": "@@ -139,7 +139,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.calculate_dtor(def_id, |_,_| Ok(()))\n     }\n     associated_item_def_ids => { cdata.get_associated_item_def_ids(tcx, def_id.index) }\n-    associated_item => { cdata.get_associated_item(def_id.index, tcx.sess) }\n+    associated_item => { cdata.get_associated_item(def_id.index) }\n     impl_polarity => { cdata.get_impl_polarity(def_id.index) }\n     coerce_unsized_info => {\n         cdata.get_coerce_unsized_info(def_id.index).unwrap_or_else(|| {"}]}