{"sha": "f4bf8cd100deb76bd424897c9796f0886468c77a", "node_id": "C_kwDOAAsO6NoAKGY0YmY4Y2QxMDBkZWI3NmJkNDI0ODk3Yzk3OTZmMDg4NjQ2OGM3N2E", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-09T07:04:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-09T07:04:37Z"}, "message": "Extend comma suggestion to cases where fields arent missing", "tree": {"sha": "177201e9ba35c38a72f5ab37f19f7382c1493e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177201e9ba35c38a72f5ab37f19f7382c1493e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bf8cd100deb76bd424897c9796f0886468c77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bf8cd100deb76bd424897c9796f0886468c77a", "html_url": "https://github.com/rust-lang/rust/commit/f4bf8cd100deb76bd424897c9796f0886468c77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bf8cd100deb76bd424897c9796f0886468c77a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d394408fb38c4de61f765a3ed5189d2731a1da91", "url": "https://api.github.com/repos/rust-lang/rust/commits/d394408fb38c4de61f765a3ed5189d2731a1da91", "html_url": "https://github.com/rust-lang/rust/commit/d394408fb38c4de61f765a3ed5189d2731a1da91"}], "stats": {"total": 126, "additions": 96, "deletions": 30}, "files": [{"sha": "a0fa27a1018ec211ee60fb1090bc20d3af1af0de", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f4bf8cd100deb76bd424897c9796f0886468c77a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bf8cd100deb76bd424897c9796f0886468c77a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=f4bf8cd100deb76bd424897c9796f0886468c77a", "patch": "@@ -1518,7 +1518,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut error_happened = false;\n \n         // Type-check each field.\n-        for field in ast_fields {\n+        for (idx, field) in ast_fields.iter().enumerate() {\n             let ident = tcx.adjust_ident(field.ident, variant.def_id);\n             let field_type = if let Some((i, v_field)) = remaining_fields.remove(&ident) {\n                 seen_fields.insert(ident, field.span);\n@@ -1556,7 +1556,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Make sure to give a type to the field even if there's\n             // an error, so we can continue type-checking.\n-            self.check_expr_coercable_to_type(&field.expr, field_type, None);\n+            let ty = self.check_expr_with_hint(&field.expr, field_type);\n+            let (_, diag) =\n+                self.demand_coerce_diag(&field.expr, ty, field_type, None, AllowTwoPhase::No);\n+\n+            if let Some(mut diag) = diag {\n+                if idx == ast_fields.len() - 1 && remaining_fields.is_empty() {\n+                    self.suggest_fru_from_range(field, variant, substs, &mut diag);\n+                }\n+                diag.emit();\n+            }\n         }\n \n         // Make sure the programmer specified correct number of fields.\n@@ -1784,25 +1793,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         err.span_label(span, format!(\"missing {remaining_fields_names}{truncated_fields_error}\"));\n \n-        // If the last field is a range literal, but it isn't supposed to be, then they probably\n-        // meant to use functional update syntax.\n-        //\n+        if let Some(last) = ast_fields.last() {\n+            self.suggest_fru_from_range(last, variant, substs, &mut err);\n+        }\n+\n+        err.emit();\n+    }\n+\n+    /// If the last field is a range literal, but it isn't supposed to be, then they probably\n+    /// meant to use functional update syntax.\n+    fn suggest_fru_from_range(\n+        &self,\n+        last_expr_field: &hir::ExprField<'tcx>,\n+        variant: &ty::VariantDef,\n+        substs: SubstsRef<'tcx>,\n+        err: &mut Diagnostic,\n+    ) {\n         // I don't use 'is_range_literal' because only double-sided, half-open ranges count.\n-        if let Some((\n-            last,\n-            ExprKind::Struct(\n+        if let ExprKind::Struct(\n                 QPath::LangItem(LangItem::Range, ..),\n                 &[ref range_start, ref range_end],\n                 _,\n-            ),\n-        )) = ast_fields.last().map(|last| (last, &last.expr.kind)) &&\n-        let variant_field =\n-            variant.fields.iter().find(|field| field.ident(self.tcx) == last.ident) &&\n-        let range_def_id = self.tcx.lang_items().range_struct() &&\n-        variant_field\n-            .and_then(|field| field.ty(self.tcx, substs).ty_adt_def())\n-            .map(|adt| adt.did())\n-            != range_def_id\n+            ) = last_expr_field.expr.kind\n+            && let variant_field =\n+                variant.fields.iter().find(|field| field.ident(self.tcx) == last_expr_field.ident)\n+            && let range_def_id = self.tcx.lang_items().range_struct()\n+            && variant_field\n+                .and_then(|field| field.ty(self.tcx, substs).ty_adt_def())\n+                .map(|adt| adt.did())\n+                != range_def_id\n         {\n             let instead = self\n                 .tcx\n@@ -1818,8 +1837,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MaybeIncorrect,\n             );\n         }\n-\n-        err.emit();\n     }\n \n     /// Report an error for a struct field expression when there are invisible fields."}, {"sha": "49e38b196deb210e7cd3258b9c2601cad92972fc", "filename": "src/test/ui/structs/struct-record-suggestion.fixed", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4bf8cd100deb76bd424897c9796f0886468c77a/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f4bf8cd100deb76bd424897c9796f0886468c77a/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.fixed?ref=f4bf8cd100deb76bd424897c9796f0886468c77a", "patch": "@@ -6,11 +6,29 @@ struct A {\n     d: usize,\n }\n \n-fn main() {\n-    let q = A { c: 5, .. Default::default() };\n+fn a() {\n+    let q = A { c: 5,..Default::default() };\n     //~^ ERROR mismatched types\n     //~| ERROR missing fields\n     //~| HELP separate the last named field with a comma\n-    let r = A { c: 5, .. Default::default() };\n+    let r = A { c: 5, ..Default::default() };\n     assert_eq!(q, r);\n }\n+\n+#[derive(Debug, Default, Eq, PartialEq)]\n+struct B {\n+    b: u32,\n+}\n+\n+fn b() {\n+    let q = B { b: 1,..Default::default() };\n+    //~^ ERROR mismatched types\n+    //~| HELP separate the last named field with a comma\n+    let r = B { b: 1 };\n+    assert_eq!(q, r);\n+}\n+\n+fn main() {\n+    a();\n+    b();\n+}"}, {"sha": "901f310c8bdb21a7434a1d611ce11c7d158b6506", "filename": "src/test/ui/structs/struct-record-suggestion.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4bf8cd100deb76bd424897c9796f0886468c77a/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bf8cd100deb76bd424897c9796f0886468c77a/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.rs?ref=f4bf8cd100deb76bd424897c9796f0886468c77a", "patch": "@@ -6,11 +6,29 @@ struct A {\n     d: usize,\n }\n \n-fn main() {\n-    let q = A { c: 5 .. Default::default() };\n+fn a() {\n+    let q = A { c: 5..Default::default() };\n     //~^ ERROR mismatched types\n     //~| ERROR missing fields\n     //~| HELP separate the last named field with a comma\n-    let r = A { c: 5, .. Default::default() };\n+    let r = A { c: 5, ..Default::default() };\n     assert_eq!(q, r);\n }\n+\n+#[derive(Debug, Default, Eq, PartialEq)]\n+struct B {\n+    b: u32,\n+}\n+\n+fn b() {\n+    let q = B { b: 1..Default::default() };\n+    //~^ ERROR mismatched types\n+    //~| HELP separate the last named field with a comma\n+    let r = B { b: 1 };\n+    assert_eq!(q, r);\n+}\n+\n+fn main() {\n+    a();\n+    b();\n+}"}, {"sha": "66e9f021ed68fbfb60a3b5ec7ba20a7a81db77f0", "filename": "src/test/ui/structs/struct-record-suggestion.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4bf8cd100deb76bd424897c9796f0886468c77a/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4bf8cd100deb76bd424897c9796f0886468c77a/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=f4bf8cd100deb76bd424897c9796f0886468c77a", "patch": "@@ -1,24 +1,37 @@\n error[E0308]: mismatched types\n   --> $DIR/struct-record-suggestion.rs:10:20\n    |\n-LL |     let q = A { c: 5 .. Default::default() };\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found struct `std::ops::Range`\n+LL |     let q = A { c: 5..Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found struct `std::ops::Range`\n    |\n    = note: expected type `u64`\n             found struct `std::ops::Range<{integer}>`\n \n error[E0063]: missing fields `b` and `d` in initializer of `A`\n   --> $DIR/struct-record-suggestion.rs:10:13\n    |\n-LL |     let q = A { c: 5 .. Default::default() };\n+LL |     let q = A { c: 5..Default::default() };\n    |             ^ missing `b` and `d`\n    |\n help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n    |\n-LL |     let q = A { c: 5, .. Default::default() };\n+LL |     let q = A { c: 5,..Default::default() };\n    |                     +\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/struct-record-suggestion.rs:24:20\n+   |\n+LL |     let q = B { b: 1..Default::default() };\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `u32`\n+            found struct `std::ops::Range<{integer}>`\n+help: to set the remaining fields from `Default::default()`, separate the last named field with a comma\n+   |\n+LL |     let q = B { b: 1,..Default::default() };\n+   |                     +\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0063, E0308.\n For more information about an error, try `rustc --explain E0063`."}]}