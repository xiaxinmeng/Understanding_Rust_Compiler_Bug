{"sha": "32cf4a188c220d1d36a153af19ede1eb43cace05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyY2Y0YTE4OGMyMjBkMWQzNmExNTNhZjE5ZWRlMWViNDNjYWNlMDU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-09T09:41:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:58Z"}, "message": "native: remove some internal ~[].", "tree": {"sha": "b11ffb7591e5c3c5202f7ec8ac868b718251eacf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11ffb7591e5c3c5202f7ec8ac868b718251eacf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32cf4a188c220d1d36a153af19ede1eb43cace05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32cf4a188c220d1d36a153af19ede1eb43cace05", "html_url": "https://github.com/rust-lang/rust/commit/32cf4a188c220d1d36a153af19ede1eb43cace05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32cf4a188c220d1d36a153af19ede1eb43cace05/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec16e1e66354199fff519fb9380bcd749e33d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec16e1e66354199fff519fb9380bcd749e33d2f", "html_url": "https://github.com/rust-lang/rust/commit/8ec16e1e66354199fff519fb9380bcd749e33d2f"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "569b4cbb258e0fa0b2d2f097c65e6e20a1ff208a", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32cf4a188c220d1d36a153af19ede1eb43cace05/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cf4a188c220d1d36a153af19ede1eb43cace05/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=32cf4a188c220d1d36a153af19ede1eb43cace05", "patch": "@@ -102,19 +102,19 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n     // active timers are those which are able to be selected upon (and it's a\n     // sorted list, and dead timers are those which have expired, but ownership\n     // hasn't yet been transferred back to the timer itself.\n-    let mut active: ~[~Inner] = ~[];\n-    let mut dead = ~[];\n+    let mut active: Vec<~Inner> = vec![];\n+    let mut dead = vec![];\n \n     // inserts a timer into an array of timers (sorted by firing time)\n-    fn insert(t: ~Inner, active: &mut ~[~Inner]) {\n+    fn insert(t: ~Inner, active: &mut Vec<~Inner>) {\n         match active.iter().position(|tm| tm.target > t.target) {\n             Some(pos) => { active.insert(pos, t); }\n             None => { active.push(t); }\n         }\n     }\n \n     // signals the first requests in the queue, possible re-enqueueing it.\n-    fn signal(active: &mut ~[~Inner], dead: &mut ~[(uint, ~Inner)]) {\n+    fn signal(active: &mut Vec<~Inner>, dead: &mut Vec<(uint, ~Inner)>) {\n         let mut timer = match active.shift() {\n             Some(timer) => timer, None => return\n         };\n@@ -137,15 +137,15 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n             let now = now();\n             // If this request has already expired, then signal it and go\n             // through another iteration\n-            if active[0].target <= now {\n+            if active.get(0).target <= now {\n                 signal(&mut active, &mut dead);\n                 continue;\n             }\n \n             // The actual timeout listed in the requests array is an\n             // absolute date, so here we translate the absolute time to a\n             // relative time.\n-            let tm = active[0].target - now;\n+            let tm = active.get(0).target - now;\n             timeout.tv_sec = (tm / 1000) as libc::time_t;\n             timeout.tv_usec = ((tm % 1000) * 1000) as libc::suseconds_t;\n             &timeout as *libc::timeval"}, {"sha": "d37a39fc30e8d6aa11774d1b9a9e6020daa9cc18", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32cf4a188c220d1d36a153af19ede1eb43cace05/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cf4a188c220d1d36a153af19ede1eb43cace05/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=32cf4a188c220d1d36a153af19ede1eb43cace05", "patch": "@@ -76,7 +76,7 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n \n     add(efd, input);\n     let events: [imp::epoll_event, ..16] = unsafe { mem::init() };\n-    let mut list: ~[(libc::c_int, Sender<()>, bool)] = ~[];\n+    let mut list: Vec<(libc::c_int, Sender<()>, bool)> = vec![];\n     'outer: loop {\n         let n = match unsafe {\n             imp::epoll_wait(efd, events.as_ptr(),\n@@ -104,9 +104,9 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n                 //      times?\n                 let _ = FileDesc::new(fd, false).inner_read(bits).unwrap();\n                 let (remove, i) = {\n-                    match list.bsearch(|&(f, _, _)| f.cmp(&fd)) {\n+                    match list.as_slice().bsearch(|&(f, _, _)| f.cmp(&fd)) {\n                         Some(i) => {\n-                            let (_, ref c, oneshot) = list[i];\n+                            let (_, ref c, oneshot) = *list.get(i);\n                             (!c.try_send(()) || oneshot, i)\n                         }\n                         None => fail!(\"fd not active: {}\", fd),\n@@ -128,9 +128,9 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n \n                     // If we haven't previously seen the file descriptor, then\n                     // we need to add it to the epoll set.\n-                    match list.bsearch(|&(f, _, _)| f.cmp(&fd)) {\n+                    match list.as_slice().bsearch(|&(f, _, _)| f.cmp(&fd)) {\n                         Some(i) => {\n-                            drop(mem::replace(&mut list[i], (fd, chan, one)));\n+                            drop(mem::replace(list.get_mut(i), (fd, chan, one)));\n                         }\n                         None => {\n                             match list.iter().position(|&(f, _, _)| f >= fd) {\n@@ -150,7 +150,7 @@ fn helper(input: libc::c_int, messages: Receiver<Req>) {\n                 }\n \n                 Data(RemoveTimer(fd, chan)) => {\n-                    match list.bsearch(|&(f, _, _)| f.cmp(&fd)) {\n+                    match list.as_slice().bsearch(|&(f, _, _)| f.cmp(&fd)) {\n                         Some(i) => {\n                             drop(list.remove(i));\n                             del(efd, fd);"}, {"sha": "8b7592783da044dbaada0ff9125f34630e5d21fd", "filename": "src/libnative/io/timer_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32cf4a188c220d1d36a153af19ede1eb43cace05/src%2Flibnative%2Fio%2Ftimer_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cf4a188c220d1d36a153af19ede1eb43cace05/src%2Flibnative%2Fio%2Ftimer_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_win32.rs?ref=32cf4a188c220d1d36a153af19ede1eb43cace05", "patch": "@@ -40,8 +40,8 @@ pub enum Req {\n }\n \n fn helper(input: libc::HANDLE, messages: Receiver<Req>) {\n-    let mut objs = ~[input];\n-    let mut chans = ~[];\n+    let mut objs = vec![input];\n+    let mut chans = vec![];\n \n     'outer: loop {\n         let idx = unsafe {\n@@ -78,7 +78,7 @@ fn helper(input: libc::HANDLE, messages: Receiver<Req>) {\n             }\n         } else {\n             let remove = {\n-                match &chans[idx as uint - 1] {\n+                match chans.get(idx as uint - 1) {\n                     &(ref c, oneshot) => !c.try_send(()) || oneshot\n                 }\n             };"}]}