{"sha": "c073f81920bc2324b026cf9610a096df0d97c6a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNzNmODE5MjBiYzIzMjRiMDI2Y2Y5NjEwYTA5NmRmMGQ5N2M2YTU=", "commit": {"author": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2015-07-18T21:59:38Z"}, "committer": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2015-07-19T12:54:44Z"}, "message": "optimize from_str_radix", "tree": {"sha": "f7608d227096c4f699f91441e456bc0ed3171365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7608d227096c4f699f91441e456bc0ed3171365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c073f81920bc2324b026cf9610a096df0d97c6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c073f81920bc2324b026cf9610a096df0d97c6a5", "html_url": "https://github.com/rust-lang/rust/commit/c073f81920bc2324b026cf9610a096df0d97c6a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c073f81920bc2324b026cf9610a096df0d97c6a5/comments", "author": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf9e1aaf63e741cec122f3cea1afa6d62b01350", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf9e1aaf63e741cec122f3cea1afa6d62b01350", "html_url": "https://github.com/rust-lang/rust/commit/ebf9e1aaf63e741cec122f3cea1afa6d62b01350"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "bfbb2ded0782dbf4e177d35b00cca42e70e581e2", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c073f81920bc2324b026cf9610a096df0d97c6a5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c073f81920bc2324b026cf9610a096df0d97c6a5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c073f81920bc2324b026cf9610a096df0d97c6a5", "patch": "@@ -24,6 +24,7 @@ use mem::size_of;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n use str::{FromStr, StrExt};\n+use slice::SliceExt;\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n@@ -1448,19 +1449,30 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n                                          -> Result<T, ParseIntError> {\n     use self::IntErrorKind::*;\n     use self::ParseIntError as PIE;\n+\n     assert!(radix >= 2 && radix <= 36,\n            \"from_str_radix_int: must lie in the range `[2, 36]` - found {}\",\n            radix);\n \n+    if src.is_empty() {\n+        return Err(PIE { kind: Empty });\n+    }\n+\n     let is_signed_ty = T::from_u32(0) > T::min_value();\n \n-    match src.slice_shift_char() {\n-        Some(('-', \"\")) => Err(PIE { kind: Empty }),\n-        Some(('-', src)) if is_signed_ty => {\n+    // all valid digits are ascii, so we will just iterate over the utf8 bytes\n+    // and cast them to chars. .to_digit() will safely return None for anything\n+    // other than a valid ascii digit for a the given radix, including the first-byte\n+    // of multi-byte sequences\n+    let src = src.as_bytes();\n+\n+    match (src[0], &src[1..])  {\n+        (b'-', digits) if digits.is_empty() => Err(PIE { kind: Empty }),\n+        (b'-', digits) if is_signed_ty => {\n             // The number is negative\n             let mut result = T::from_u32(0);\n-            for c in src.chars() {\n-                let x = match c.to_digit(radix) {\n+            for &c in digits {\n+                let x = match (c as char).to_digit(radix) {\n                     Some(x) => x,\n                     None => return Err(PIE { kind: InvalidDigit }),\n                 };\n@@ -1475,11 +1487,14 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n             }\n             Ok(result)\n         },\n-        Some((_, _)) => {\n+        (c, digits) => {\n             // The number is signed\n-            let mut result = T::from_u32(0);\n-            for c in src.chars() {\n-                let x = match c.to_digit(radix) {\n+            let mut result = match (c as char).to_digit(radix) {\n+                Some(x) => T::from_u32(x),\n+                None => return Err(PIE { kind: InvalidDigit }),\n+            };\n+            for &c in digits {\n+                let x = match (c as char).to_digit(radix) {\n                     Some(x) => x,\n                     None => return Err(PIE { kind: InvalidDigit }),\n                 };\n@@ -1493,8 +1508,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n                 };\n             }\n             Ok(result)\n-        },\n-        None => Err(ParseIntError { kind: Empty }),\n+        }\n     }\n }\n "}, {"sha": "a9baa2cc477f6c326923888cb80bfa3bc162eb05", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c073f81920bc2324b026cf9610a096df0d97c6a5/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c073f81920bc2324b026cf9610a096df0d97c6a5/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=c073f81920bc2324b026cf9610a096df0d97c6a5", "patch": "@@ -117,7 +117,14 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_int_from_minus_sign() {\n-        assert_eq!(\"-\".parse::<i32>().ok(), None);\n+    fn test_invalid() {\n+        assert_eq!(\"--129\".parse::<i8>().ok(), None);\n+        assert_eq!(\"\u0421\u044a\u0435\u0448\u044c\".parse::<u8>().ok(), None);\n+    }\n+\n+    #[test]\n+    fn test_empty() {\n+        assert_eq!(\"-\".parse::<i8>().ok(), None);\n+        assert_eq!(\"\".parse::<u8>().ok(), None);\n     }\n }"}]}