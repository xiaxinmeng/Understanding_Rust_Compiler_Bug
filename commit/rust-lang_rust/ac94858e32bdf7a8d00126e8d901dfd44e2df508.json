{"sha": "ac94858e32bdf7a8d00126e8d901dfd44e2df508", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOTQ4NThlMzJiZGY3YThkMDAxMjZlOGQ5MDFkZmQ0NGUyZGY1MDg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-21T13:39:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Add int variables and float variables to `InferenceFudger`", "tree": {"sha": "0debd6f9ebd0f6970c671e936eedc7153d9d9d4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0debd6f9ebd0f6970c671e936eedc7153d9d9d4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac94858e32bdf7a8d00126e8d901dfd44e2df508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac94858e32bdf7a8d00126e8d901dfd44e2df508", "html_url": "https://github.com/rust-lang/rust/commit/ac94858e32bdf7a8d00126e8d901dfd44e2df508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac94858e32bdf7a8d00126e8d901dfd44e2df508/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "html_url": "https://github.com/rust-lang/rust/commit/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "198e0ce73819119909c413400fb673de7462870c", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ac94858e32bdf7a8d00126e8d901dfd44e2df508/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94858e32bdf7a8d00126e8d901dfd44e2df508/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=ac94858e32bdf7a8d00126e8d901dfd44e2df508", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::{self, Ty, TyCtxt, TyVid, RegionVid};\n+use crate::ty::{self, Ty, TyCtxt, TyVid, IntVid, FloatVid, RegionVid};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n use super::InferCtxt;\n@@ -56,7 +56,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"fudge_inference_if_ok(origin={:?})\", origin);\n \n-        let (type_variables, region_vars, value) = self.probe(|snapshot| {\n+        let (type_vars, int_vars, float_vars, region_vars, value) = self.probe(|snapshot| {\n             match f() {\n                 Ok(value) => {\n                     let value = self.resolve_type_vars_if_possible(&value);\n@@ -67,14 +67,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     // going to be popped, so we will have to\n                     // eliminate any references to them.\n \n-                    let type_variables = self.type_variables.borrow_mut().vars_since_snapshot(\n+                    let type_vars = self.type_variables.borrow_mut().vars_since_snapshot(\n                         &snapshot.type_snapshot,\n                     );\n+                    let int_vars = self.int_unification_table.borrow_mut().vars_since_snapshot(\n+                        &snapshot.int_snapshot,\n+                    );\n+                    let float_vars = self.float_unification_table.borrow_mut().vars_since_snapshot(\n+                        &snapshot.float_snapshot,\n+                    );\n                     let region_vars = self.borrow_region_constraints().vars_since_snapshot(\n                         &snapshot.region_constraints_snapshot,\n                     );\n \n-                    Ok((type_variables, region_vars, value))\n+                    Ok((type_vars, int_vars, float_vars, region_vars, value))\n                 }\n                 Err(e) => Err(e),\n             }\n@@ -87,13 +93,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // Micro-optimization: if no variables have been created, then\n         // `value` can't refer to any of them. =) So we can just return it.\n-        if type_variables.is_empty() && region_vars.is_empty() {\n+        if type_vars.is_empty() &&\n+            int_vars.is_empty() &&\n+            float_vars.is_empty() &&\n+            region_vars.is_empty() {\n             return Ok(value);\n         }\n \n         let mut fudger = InferenceFudger {\n             infcx: self,\n-            type_variables: &type_variables,\n+            type_vars: &type_vars,\n+            int_vars: &int_vars,\n+            float_vars: &float_vars,\n             region_vars: &region_vars,\n             origin,\n         };\n@@ -104,7 +115,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    type_variables: &'a Range<TyVid>,\n+    type_vars: &'a Range<TyVid>,\n+    int_vars: &'a Range<IntVid>,\n+    float_vars: &'a Range<FloatVid>,\n     region_vars: &'a Range<RegionVid>,\n     origin: &'a RegionVariableOrigin,\n }\n@@ -117,7 +130,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match ty.sty {\n             ty::Infer(ty::InferTy::TyVar(vid)) => {\n-                if self.type_variables.contains(&vid) {\n+                if self.type_vars.contains(&vid) {\n                     // This variable was created during the fudging.\n                     // Recreate it with a fresh variable here.\n                     let origin = self.infcx.type_variables.borrow().var_origin(vid).clone();\n@@ -134,6 +147,20 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n                     ty\n                 }\n             }\n+            ty::Infer(ty::InferTy::IntVar(vid)) => {\n+                if self.int_vars.contains(&vid) {\n+                    self.infcx.tcx.mk_int_var(self.infcx.next_int_var_id())\n+                } else {\n+                    ty\n+                }\n+            }\n+            ty::Infer(ty::InferTy::FloatVar(vid)) => {\n+                if self.float_vars.contains(&vid) {\n+                    self.infcx.tcx.mk_float_var(self.infcx.next_float_var_id())\n+                } else {\n+                    ty\n+                }\n+            }\n             _ => ty.super_fold_with(self),\n         }\n     }"}, {"sha": "a09c03c34cafafdb24be86af8cec2b0a9323c95e", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac94858e32bdf7a8d00126e8d901dfd44e2df508/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94858e32bdf7a8d00126e8d901dfd44e2df508/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=ac94858e32bdf7a8d00126e8d901dfd44e2df508", "patch": "@@ -6,7 +6,6 @@ use std::cmp;\n use std::marker::PhantomData;\n use std::ops::Range;\n use std::u32;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n use ut::UnifyKey;"}]}