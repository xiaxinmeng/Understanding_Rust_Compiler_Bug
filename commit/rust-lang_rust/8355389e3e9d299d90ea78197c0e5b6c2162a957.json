{"sha": "8355389e3e9d299d90ea78197c0e5b6c2162a957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTUzODllM2U5ZDI5OWQ5MGVhNzgxOTdjMGU1YjZjMjE2MmE5NTc=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-08T18:24:28Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-14T20:59:55Z"}, "message": "derive: improve hygiene for type parameters (see #2810)\n\nWhen deriving Hash, RustcEncodable and RustcDecodable, the syntax extension\nneeds a type parameter to use in the inner method. They used to use __H, __S\nand __D respectively. If this conflicts with a type parameter already declared\nfor the item, bad times result (see the test). There is no hygiene for type\nparameters, but this commit introduces a better heuristic by concatenating the\nnames of all extant type parameters (and prepending __H).", "tree": {"sha": "6f0853fad3dbb342f9c3801d20882f19145be12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f0853fad3dbb342f9c3801d20882f19145be12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8355389e3e9d299d90ea78197c0e5b6c2162a957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8355389e3e9d299d90ea78197c0e5b6c2162a957", "html_url": "https://github.com/rust-lang/rust/commit/8355389e3e9d299d90ea78197c0e5b6c2162a957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8355389e3e9d299d90ea78197c0e5b6c2162a957/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4fa62885d7b7319a7cf88e834fa1016ac9ae5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4fa62885d7b7319a7cf88e834fa1016ac9ae5c", "html_url": "https://github.com/rust-lang/rust/commit/fd4fa62885d7b7319a7cf88e834fa1016ac9ae5c"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "a7e156c5f68205e9aba949295bd636e2be20b66f", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=8355389e3e9d299d90ea78197c0e5b6c2162a957", "patch": "@@ -11,7 +11,7 @@\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{MetaItem, Expr, BinOpKind, self};\n+use syntax::ast::{MetaItem, Expr, self};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;"}, {"sha": "49f14c937e953771e442fd3f315733dfcadee607", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=8355389e3e9d299d90ea78197c0e5b6c2162a957", "patch": "@@ -10,6 +10,7 @@\n \n //! The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.\n \n+use deriving;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -54,6 +55,8 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n         return\n     }\n \n+    let typaram = &*deriving::hygienic_type_parameter(item, \"__D\");\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -66,18 +69,17 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                 name: \"decode\",\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n-                    bounds: vec!((\"__D\", vec!(Path::new_(\n-                                    vec!(krate, \"Decoder\"), None,\n-                                    vec!(), true))))\n+                    bounds: vec![(typaram,\n+                                  vec![Path::new_(vec!(krate, \"Decoder\"), None, vec!(), true)])]\n                 },\n                 explicit_self: None,\n-                args: vec!(Ptr(Box::new(Literal(Path::new_local(\"__D\"))),\n+                args: vec!(Ptr(Box::new(Literal(Path::new_local(typaram))),\n                             Borrowed(None, Mutability::Mutable))),\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,\n                     vec!(Box::new(Self_), Box::new(Literal(Path::new_(\n-                        vec![\"__D\", \"Error\"], None, vec![], false\n+                        vec![typaram, \"Error\"], None, vec![], false\n                     )))),\n                     true\n                 )),"}, {"sha": "a05bd7869b2a9ccd1065c375c6fb4f28af1b748c", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=8355389e3e9d299d90ea78197c0e5b6c2162a957", "patch": "@@ -88,6 +88,7 @@\n //! }\n //! ```\n \n+use deriving;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -130,6 +131,8 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n         return;\n     }\n \n+    let typaram = &*deriving::hygienic_type_parameter(item, \"__S\");\n+\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -142,18 +145,17 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                 name: \"encode\",\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n-                    bounds: vec!((\"__S\", vec!(Path::new_(\n-                                    vec!(krate, \"Encoder\"), None,\n-                                    vec!(), true))))\n+                    bounds: vec![(typaram,\n+                                  vec![Path::new_(vec![krate, \"Encoder\"], None, vec!(), true)])]\n                 },\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(Ptr(Box::new(Literal(Path::new_local(\"__S\"))),\n+                args: vec!(Ptr(Box::new(Literal(Path::new_local(typaram))),\n                             Borrowed(None, Mutability::Mutable))),\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,\n                     vec!(Box::new(Tuple(Vec::new())), Box::new(Literal(Path::new_(\n-                        vec![\"__S\", \"Error\"], None, vec![], false\n+                        vec![typaram, \"Error\"], None, vec![], false\n                     )))),\n                     true\n                 )),"}, {"sha": "ba38ebc860713e744c8a71a58d5058dbfd9454e8", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=8355389e3e9d299d90ea78197c0e5b6c2162a957", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -26,7 +27,10 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n \n     let path = Path::new_(pathvec_std!(cx, core::hash::Hash), None,\n                           vec!(), true);\n-    let arg = Path::new_local(\"__H\");\n+\n+    let typaram = &*deriving::hygienic_type_parameter(item, \"__H\");\n+\n+    let arg = Path::new_local(typaram);\n     let hash_trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n@@ -39,7 +43,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                 name: \"hash\",\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n-                    bounds: vec![(\"__H\",\n+                    bounds: vec![(typaram,\n                                   vec![path_std!(cx, core::hash::Hasher)])],\n                 },\n                 explicit_self: borrowed_explicit_self(),"}, {"sha": "75de5c56ea139e32d1e4dd31dbd525a7823642ec", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=8355389e3e9d299d90ea78197c0e5b6c2162a957", "patch": "@@ -9,11 +9,8 @@\n // except according to those terms.\n \n //! The compiler code necessary to implement the `#[derive]` extensions.\n-//!\n-//! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n-//! the standard library, and \"std\" is the core library.\n \n-use syntax::ast::{MetaItem, MetaItemKind};\n+use syntax::ast::{MetaItem, MetaItemKind, self};\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{ExtCtxt, SyntaxEnv, Annotatable};\n use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n@@ -197,3 +194,27 @@ fn warn_if_deprecated(ecx: &mut ExtCtxt, sp: Span, name: &str) {\n                                    name, replacement));\n     }\n }\n+\n+/// Construct a name for the inner type parameter that can't collide with any type parameters of\n+/// the item. This is achieved by starting with a base and then concatenating the names of all\n+/// other type parameters.\n+// FIXME(aburka): use real hygiene when that becomes possible\n+fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n+    let mut typaram = String::from(base);\n+    if let Annotatable::Item(ref item) = *item {\n+        match item.node {\n+            ast::ItemKind::Struct(_, ast::Generics { ref ty_params, .. }) |\n+                ast::ItemKind::Enum(_, ast::Generics { ref ty_params, .. }) => {\n+\n+                for ty in ty_params.iter() {\n+                    typaram.push_str(&ty.ident.name.as_str());\n+                }\n+            }\n+\n+            _ => {}\n+        }\n+    }\n+\n+    typaram\n+}\n+"}, {"sha": "a98cfa2393f1ef01bd5daaab5ef35c66f36ccbaa", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8355389e3e9d299d90ea78197c0e5b6c2162a957/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=8355389e3e9d299d90ea78197c0e5b6c2162a957", "patch": "@@ -20,6 +20,10 @@ struct Person {\n     phone: usize,\n }\n \n+// test for hygiene name collisions\n+#[derive(Hash)] struct __H__H;\n+#[derive(Hash)] enum Collision<__H> { __H { __H__H: __H } }\n+\n fn hash<T: Hash>(t: &T) -> u64 {\n     let mut s = SipHasher::new_with_keys(0, 0);\n     t.hash(&mut s);"}]}