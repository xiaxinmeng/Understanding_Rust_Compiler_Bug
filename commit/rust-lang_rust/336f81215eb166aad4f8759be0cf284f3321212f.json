{"sha": "336f81215eb166aad4f8759be0cf284f3321212f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNmY4MTIxNWViMTY2YWFkNGY4NzU5YmUwY2YyODRmMzMyMTIxMmY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-29T22:34:17Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-29T22:34:17Z"}, "message": "Remove type_needs_unwind_cleanup\n\nAfter the last @dinosaur went extinct, the check became redundant with\ntype_needs_drop, except for its bugginess.\n\nFixes #26655.", "tree": {"sha": "b356c37e97e458932a7090c1fe6ce2a8872b3df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b356c37e97e458932a7090c1fe6ce2a8872b3df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336f81215eb166aad4f8759be0cf284f3321212f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336f81215eb166aad4f8759be0cf284f3321212f", "html_url": "https://github.com/rust-lang/rust/commit/336f81215eb166aad4f8759be0cf284f3321212f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336f81215eb166aad4f8759be0cf284f3321212f/comments", "author": null, "committer": null, "parents": [{"sha": "bf164bc6e3b81b9999ad4baddb91079a99f49ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf164bc6e3b81b9999ad4baddb91079a99f49ab4", "html_url": "https://github.com/rust-lang/rust/commit/bf164bc6e3b81b9999ad4baddb91079a99f49ab4"}], "stats": {"total": 88, "additions": 37, "deletions": 51}, "files": [{"sha": "0b4d7e602be801f7c38c2ee1a963f74a65740fb9", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/336f81215eb166aad4f8759be0cf284f3321212f/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336f81215eb166aad4f8759be0cf284f3321212f/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=336f81215eb166aad4f8759be0cf284f3321212f", "patch": "@@ -389,7 +389,6 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n         if !self.type_needs_drop(ty) { return; }\n         let drop = box DropValue {\n             is_immediate: false,\n-            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             fill_on_drop: false,\n@@ -415,7 +414,6 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n \n         let drop = box DropValue {\n             is_immediate: false,\n-            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             fill_on_drop: true,\n@@ -447,7 +445,6 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n \n         let drop = box DropValue {\n             is_immediate: false,\n-            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             fill_on_drop: false,\n@@ -473,7 +470,6 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n         if !self.type_needs_drop(ty) { return; }\n         let drop = box DropValue {\n             is_immediate: true,\n-            must_unwind: common::type_needs_unwind_cleanup(self.ccx, ty),\n             val: val,\n             ty: ty,\n             fill_on_drop: false,\n@@ -1031,7 +1027,6 @@ impl EarlyExitLabel {\n #[derive(Copy, Clone)]\n pub struct DropValue<'tcx> {\n     is_immediate: bool,\n-    must_unwind: bool,\n     val: ValueRef,\n     ty: Ty<'tcx>,\n     fill_on_drop: bool,\n@@ -1040,11 +1035,11 @@ pub struct DropValue<'tcx> {\n \n impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n-        self.must_unwind\n+        true\n     }\n \n     fn clean_on_unwind(&self) -> bool {\n-        self.must_unwind\n+        true\n     }\n \n     fn is_lifetime_end(&self) -> bool {"}, {"sha": "9c2aea1e67adfda878defeefcd57fe62a184df98", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/336f81215eb166aad4f8759be0cf284f3321212f/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336f81215eb166aad4f8759be0cf284f3321212f/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=336f81215eb166aad4f8759be0cf284f3321212f", "patch": "@@ -25,7 +25,7 @@ use middle::lang_items::LangItem;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n use middle::region;\n-use middle::subst::{self, Subst, Substs};\n+use middle::subst::{self, Substs};\n use trans::base;\n use trans::build;\n use trans::cleanup;\n@@ -54,8 +54,6 @@ use syntax::ast;\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n-use util::common::memoized;\n-use util::nodemap::FnvHashSet;\n \n pub use trans::context::CrateContext;\n \n@@ -136,47 +134,6 @@ pub fn type_is_fat_ptr<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-// Some things don't need cleanups during unwinding because the\n-// thread can free them all at once later. Currently only things\n-// that only contain scalars and shared boxes can avoid unwind\n-// cleanups.\n-pub fn type_needs_unwind_cleanup<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    return memoized(ccx.needs_unwind_cleanup_cache(), ty, |ty| {\n-        type_needs_unwind_cleanup_(ccx.tcx(), ty, &mut FnvHashSet())\n-    });\n-\n-    fn type_needs_unwind_cleanup_<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                        ty: Ty<'tcx>,\n-                                        tycache: &mut FnvHashSet<Ty<'tcx>>)\n-                                        -> bool\n-    {\n-        // Prevent infinite recursion\n-        if !tycache.insert(ty) {\n-            return false;\n-        }\n-\n-        let mut needs_unwind_cleanup = false;\n-        ty.maybe_walk(|ty| {\n-            needs_unwind_cleanup |= match ty.sty {\n-                ty::TyBool | ty::TyInt(_) | ty::TyUint(_) |\n-                ty::TyFloat(_) | ty::TyTuple(_) | ty::TyRawPtr(_) => false,\n-\n-                ty::TyEnum(did, substs) =>\n-                    tcx.enum_variants(did).iter().any(|v|\n-                        v.args.iter().any(|&aty| {\n-                            let t = aty.subst(tcx, substs);\n-                            type_needs_unwind_cleanup_(tcx, t, tycache)\n-                        })\n-                    ),\n-\n-                _ => true\n-            };\n-            !needs_unwind_cleanup\n-        });\n-        needs_unwind_cleanup\n-    }\n-}\n-\n /// If `type_needs_drop` returns true, then `ty` is definitely\n /// non-copy and *might* have a destructor attached; if it returns\n /// false, then `ty` definitely has no destructor (i.e. no drop glue)."}, {"sha": "bdd3a80d74cf4a4da7409d6f7fb5e15df398956e", "filename": "src/test/run-pass/issue-26655.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/336f81215eb166aad4f8759be0cf284f3321212f/src%2Ftest%2Frun-pass%2Fissue-26655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336f81215eb166aad4f8759be0cf284f3321212f/src%2Ftest%2Frun-pass%2Fissue-26655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26655.rs?ref=336f81215eb166aad4f8759be0cf284f3321212f", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+// Check that the destructors of simple enums are run on unwinding\n+\n+use std::sync::atomic::{Ordering, AtomicUsize};\n+use std::thread;\n+\n+static LOG: AtomicUsize = AtomicUsize::new(0);\n+\n+enum WithDtor { Val }\n+impl Drop for WithDtor {\n+    fn drop(&mut self) {\n+        LOG.store(LOG.load(Ordering::SeqCst)+1,Ordering::SeqCst);\n+    }\n+}\n+\n+pub fn main() {\n+    thread::spawn(move|| {\n+        let _e: WithDtor = WithDtor::Val;\n+        panic!(\"fail\");\n+    }).join().unwrap_err();\n+\n+    assert_eq!(LOG.load(Ordering::SeqCst), 1);\n+}"}]}