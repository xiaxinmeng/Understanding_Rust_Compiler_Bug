{"sha": "683f5c9c23a07fc6434b3e15207aa12144c90420", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4M2Y1YzljMjNhMDdmYzY0MzRiM2UxNTIwN2FhMTIxNDRjOTA0MjA=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-26T15:00:41Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-12-02T14:10:09Z"}, "message": "Disallow cell borrowing", "tree": {"sha": "cb35f92063d8f28ea3c1d8cda8862e7d59297e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb35f92063d8f28ea3c1d8cda8862e7d59297e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683f5c9c23a07fc6434b3e15207aa12144c90420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683f5c9c23a07fc6434b3e15207aa12144c90420", "html_url": "https://github.com/rust-lang/rust/commit/683f5c9c23a07fc6434b3e15207aa12144c90420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683f5c9c23a07fc6434b3e15207aa12144c90420/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31a1368fda9c5b4b4bc39e69754b19d36dff8c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31a1368fda9c5b4b4bc39e69754b19d36dff8c2", "html_url": "https://github.com/rust-lang/rust/commit/e31a1368fda9c5b4b4bc39e69754b19d36dff8c2"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "1d23b6e27f31c73d5bcd7a46ce4e20e3c0804279", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/683f5c9c23a07fc6434b3e15207aa12144c90420/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683f5c9c23a07fc6434b3e15207aa12144c90420/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=683f5c9c23a07fc6434b3e15207aa12144c90420", "patch": "@@ -1,7 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use rustc::hir::def_id::DefId;\n-use rustc::mir::BorrowKind;\n use rustc::session::config::nightly_options;\n use rustc::ty::TyCtxt;\n use syntax::feature_gate::feature_err;\n@@ -181,36 +180,39 @@ impl NonConstOp for Loop {\n }\n \n #[derive(Debug)]\n-pub struct MutBorrow(pub BorrowKind);\n+pub struct CellBorrow;\n+impl NonConstOp for CellBorrow {\n+    fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n+        span_err!(item.tcx.sess, span, E0492,\n+            \"cannot borrow a constant which may contain \\\n+            interior mutability, create a static instead\");\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct MutBorrow;\n impl NonConstOp for MutBorrow {\n     fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n         Some(tcx.features().const_mut_refs)\n     }\n \n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        let kind = self.0;\n-        if let BorrowKind::Mut { .. } = kind {\n-            let mut err = struct_span_err!(item.tcx.sess, span, E0017,\n-                                           \"references in {}s may only refer \\\n-                                            to immutable values\", item.const_kind());\n-            err.span_label(span, format!(\"{}s require immutable values\",\n-                                                item.const_kind()));\n-            if item.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"References in statics and constants may only refer \\\n-                          to immutable values.\\n\\n\\\n-                          Statics are shared everywhere, and if they refer to \\\n-                          mutable data one might violate memory safety since \\\n-                          holding multiple mutable references to shared data \\\n-                          is not allowed.\\n\\n\\\n-                          If you really want global mutable state, try using \\\n-                          static mut or a global UnsafeCell.\");\n-            }\n-            err.emit();\n-        } else {\n-            span_err!(item.tcx.sess, span, E0492,\n-                      \"cannot borrow a constant which may contain \\\n-                       interior mutability, create a static instead\");\n+        let mut err = struct_span_err!(item.tcx.sess, span, E0017,\n+                                       \"references in {}s may only refer \\\n+                                        to immutable values\", item.const_kind());\n+        err.span_label(span, format!(\"{}s require immutable values\",\n+                                            item.const_kind()));\n+        if item.tcx.sess.teach(&err.get_code().unwrap()) {\n+            err.note(\"References in statics and constants may only refer \\\n+                      to immutable values.\\n\\n\\\n+                      Statics are shared everywhere, and if they refer to \\\n+                      mutable data one might violate memory safety since \\\n+                      holding multiple mutable references to shared data \\\n+                      is not allowed.\\n\\n\\\n+                      If you really want global mutable state, try using \\\n+                      static mut or a global UnsafeCell.\");\n         }\n+        err.emit();\n     }\n }\n "}, {"sha": "4a55bce767d8172278a0aa04b69505f307f4c1d3", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/683f5c9c23a07fc6434b3e15207aa12144c90420/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683f5c9c23a07fc6434b3e15207aa12144c90420/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=683f5c9c23a07fc6434b3e15207aa12144c90420", "patch": "@@ -360,7 +360,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 };\n \n                 if !is_allowed {\n-                    self.check_op(ops::MutBorrow(kind));\n+                    if let BorrowKind::Mut{ .. } = kind {\n+                        self.check_op(ops::MutBorrow);\n+                    } else {\n+                        self.check_op(ops::CellBorrow);\n+                    }\n                 }\n             }\n \n@@ -385,7 +389,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 );\n \n                 if borrowed_place_has_mut_interior {\n-                    self.check_op(ops::MutBorrow(kind));\n+                    if let BorrowKind::Mut{ .. } = kind {\n+                        self.check_op(ops::MutBorrow);\n+                    } else {\n+                        self.check_op(ops::CellBorrow);\n+                    }\n                 }\n             }\n \n@@ -452,7 +460,6 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             }\n         }\n     }\n-\n     fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,"}]}