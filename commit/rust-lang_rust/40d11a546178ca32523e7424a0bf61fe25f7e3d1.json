{"sha": "40d11a546178ca32523e7424a0bf61fe25f7e3d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDExYTU0NjE3OGNhMzI1MjNlNzQyNGEwYmY2MWZlMjVmN2UzZDE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-06T00:02:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-06T22:09:20Z"}, "message": "iterator: rename `Counter::new` to `count`\n\nto match the convention used by `range`, since `iterator::count` is\nalready namespaced enough and won't be ambiguous", "tree": {"sha": "86e459fd56b5056ee939cbade990e10b6d840b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e459fd56b5056ee939cbade990e10b6d840b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d11a546178ca32523e7424a0bf61fe25f7e3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d11a546178ca32523e7424a0bf61fe25f7e3d1", "html_url": "https://github.com/rust-lang/rust/commit/40d11a546178ca32523e7424a0bf61fe25f7e3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d11a546178ca32523e7424a0bf61fe25f7e3d1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c13f4f398a0c27af573fac8d426a6cda68a168fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c13f4f398a0c27af573fac8d426a6cda68a168fe", "html_url": "https://github.com/rust-lang/rust/commit/c13f4f398a0c27af573fac8d426a6cda68a168fe"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "da8089250b34587a24cd3191031c87c286b40f1d", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d11a546178ca32523e7424a0bf61fe25f7e3d1/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d11a546178ca32523e7424a0bf61fe25f7e3d1/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=40d11a546178ca32523e7424a0bf61fe25f7e3d1", "patch": "@@ -696,7 +696,7 @@ mod tests {\n         let u: ~[int] = deq.iter().transform(|&x| x).collect();\n         assert_eq!(u, v);\n \n-        let mut seq = iterator::Counter::new(0u, 2).take_(256);\n+        let mut seq = iterator::count(0u, 2).take_(256);\n         let deq: RingBuf<uint> = seq.collect();\n         for (i, &x) in deq.iter().enumerate() {\n             assert_eq!(2*i, x);"}, {"sha": "65cb7e7a8a9eea5b7a900b58042a54f9b60f9072", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/40d11a546178ca32523e7424a0bf61fe25f7e3d1/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d11a546178ca32523e7424a0bf61fe25f7e3d1/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=40d11a546178ca32523e7424a0bf61fe25f7e3d1", "patch": "@@ -313,7 +313,7 @@ pub trait IteratorUtil<A> {\n     /// ~~~ {.rust}\n     /// let xs = [2u, 3];\n     /// let ys = [0u, 1, 0, 1, 2];\n-    /// let mut it = xs.iter().flat_map_(|&x| Counter::new(0u, 1).take_(x));\n+    /// let mut it = xs.iter().flat_map_(|&x| count(0u, 1).take_(x));\n     /// // Check that `it` has the same elements as `ys`\n     /// let mut i = 0;\n     /// for x: uint in it {\n@@ -351,7 +351,7 @@ pub trait IteratorUtil<A> {\n     /// ~~~ {.rust}\n     /// use std::iterator::Counter;\n     ///\n-    /// for i in Counter::new(0, 10) {\n+    /// for i in count(0, 10) {\n     ///     printfln!(\"%d\", i);\n     /// }\n     /// ~~~\n@@ -723,7 +723,7 @@ pub trait MultiplicativeIterator<A> {\n     /// use std::iterator::Counter;\n     ///\n     /// fn factorial(n: uint) -> uint {\n-    ///     Counter::new(1u, 1).take_while(|&i| i <= n).product()\n+    ///     count(1u, 1).take_while(|&i| i <= n).product()\n     /// }\n     /// assert!(factorial(0) == 1);\n     /// assert!(factorial(1) == 1);\n@@ -790,7 +790,7 @@ pub trait ClonableIterator {\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n-    /// let a = Counter::new(1,1).take_(1);\n+    /// let a = count(1,1).take_(1);\n     /// let mut cy = a.cycle();\n     /// assert_eq!(cy.next(), Some(1));\n     /// assert_eq!(cy.next(), Some(1));\n@@ -1526,12 +1526,10 @@ pub struct Counter<A> {\n     step: A\n }\n \n-impl<A> Counter<A> {\n-    /// Creates a new counter with the specified start/step\n-    #[inline]\n-    pub fn new(start: A, step: A) -> Counter<A> {\n-        Counter{state: start, step: step}\n-    }\n+/// Creates a new counter with the specified start/step\n+#[inline]\n+pub fn count<A>(start: A, step: A) -> Counter<A> {\n+    Counter{state: start, step: step}\n }\n \n /// A range of numbers from [0, N)\n@@ -1618,7 +1616,7 @@ mod tests {\n \n     #[test]\n     fn test_counter_from_iter() {\n-        let mut it = Counter::new(0, 5).take_(10);\n+        let mut it = count(0, 5).take_(10);\n         let xs: ~[int] = FromIterator::from_iterator(&mut it);\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n@@ -1636,7 +1634,7 @@ mod tests {\n         }\n         assert_eq!(i, expected.len());\n \n-        let ys = Counter::new(30u, 10).take_(4);\n+        let ys = count(30u, 10).take_(4);\n         let mut it = xs.iter().transform(|&x| x).chain_(ys);\n         let mut i = 0;\n         for x in it {\n@@ -1648,7 +1646,7 @@ mod tests {\n \n     #[test]\n     fn test_filter_map() {\n-        let mut it = Counter::new(0u, 1u).take_(10)\n+        let mut it = count(0u, 1u).take_(10)\n             .filter_map(|x| if x.is_even() { Some(x*x) } else { None });\n         assert_eq!(it.collect::<~[uint]>(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n     }\n@@ -1737,7 +1735,7 @@ mod tests {\n     fn test_iterator_flat_map() {\n         let xs = [0u, 3, 6];\n         let ys = [0u, 1, 2, 3, 4, 5, 6, 7, 8];\n-        let mut it = xs.iter().flat_map_(|&x| Counter::new(x, 1).take_(3));\n+        let mut it = xs.iter().flat_map_(|&x| count(x, 1).take_(3));\n         let mut i = 0;\n         for x in it {\n             assert_eq!(x, ys[i]);\n@@ -1784,13 +1782,13 @@ mod tests {\n     #[test]\n     fn test_cycle() {\n         let cycle_len = 3;\n-        let it = Counter::new(0u, 1).take_(cycle_len).cycle();\n+        let it = count(0u, 1).take_(cycle_len).cycle();\n         assert_eq!(it.size_hint(), (uint::max_value, None));\n         for (i, x) in it.take_(100).enumerate() {\n             assert_eq!(i % cycle_len, x);\n         }\n \n-        let mut it = Counter::new(0u, 1).take_(0).cycle();\n+        let mut it = count(0u, 1).take_(0).cycle();\n         assert_eq!(it.size_hint(), (0, Some(0)));\n         assert_eq!(it.next(), None);\n     }\n@@ -1852,7 +1850,7 @@ mod tests {\n \n     #[test]\n     fn test_iterator_size_hint() {\n-        let c = Counter::new(0, 1);\n+        let c = count(0, 1);\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n         let v2 = &[10, 11, 12];\n         let vi = v.iter();"}]}