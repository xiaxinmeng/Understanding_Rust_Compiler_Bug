{"sha": "ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMGJhYjM5ZTA0YTEzYWQ5OTZlNDFhMmVmMmNhOWI4M2ZiYjJjZjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-06T07:41:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-06T07:41:56Z"}, "message": "make sure we only guess field alignment at offset 0", "tree": {"sha": "2bbbbef1b3a249a85657ffc3b33e0246a6a79037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bbbbef1b3a249a85657ffc3b33e0246a6a79037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "html_url": "https://github.com/rust-lang/rust/commit/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6622c265c9a359c277af576c4849a74d476f597", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6622c265c9a359c277af576c4849a74d476f597", "html_url": "https://github.com/rust-lang/rust/commit/a6622c265c9a359c277af576c4849a74d476f597"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "cca4e8a3ce31a7672c90506d8f06c76412c3be37", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "patch": "@@ -374,13 +374,12 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 let (unsized_size, unsized_align) = match self.size_and_align_of(metadata, field)? {\n                     Some(size_and_align) => size_and_align,\n                     None => {\n-                        // A field with extern type.  If this field is at offset 0 and the sized\n-                        // part makes no alignment constraints, we behave like the underlying\n-                        // extern type.\n+                        // A field with extern type.  If this field is at offset 0, we behave\n+                        // like the underlying extern type.\n                         // FIXME: Once we have made decisions for how to handle size and alignment\n                         // of `extern type`, this should be adapted.  It is just a temporary hack\n                         // to get some code to work that probably ought to work.\n-                        if sized_size == Size::ZERO && sized_align.abi() == 1 {\n+                        if sized_size == Size::ZERO {\n                             return Ok(None)\n                         } else {\n                             bug!(\"Fields cannot be extern types, unless they are at offset 0\")"}, {"sha": "a836a199f768da0d91341f0409346c9b95789c06", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ba0bab39e04a13ad996e41a2ef2ca9b83fbb2cf4", "patch": "@@ -353,13 +353,17 @@ where\n         // Offset may need adjustment for unsized fields\n         let (meta, offset) = if field_layout.is_unsized() {\n             // re-use parent metadata to determine dynamic field layout\n-            let align = self.size_and_align_of(base.meta, field_layout)?\n-                .map(|(_, align)| align)\n-                // If this is an extern type, we fall back to its static alignment.\n-                // FIXME: Once we have made decisions for how to handle size and alignment\n-                // of `extern type`, this should be adapted.  It is just a temporary hack\n-                // to get some code to work that probably ought to work.\n-                .unwrap_or_else(|| base.layout.align);\n+            let align = match self.size_and_align_of(base.meta, field_layout)? {\n+                Some((_, align)) => align,\n+                None if offset == Size::ZERO =>\n+                    // An extern type at offset 0, we fall back to its static alignment.\n+                    // FIXME: Once we have made decisions for how to handle size and alignment\n+                    // of `extern type`, this should be adapted.  It is just a temporary hack\n+                    // to get some code to work that probably ought to work.\n+                    field_layout.align,\n+                None =>\n+                    bug!(\"Cannot compute offset for extern type field at non-0 offset\"),\n+            };\n             (base.meta, offset.abi_align(align))\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized"}]}