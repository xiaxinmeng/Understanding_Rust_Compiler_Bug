{"sha": "54a3ed3114c5fcacfa9ec15e89935c105b4c00a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YTNlZDMxMTRjNWZjYWNmYTllYzE1ZTg5OTM1YzEwNWI0YzAwYTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-21T16:42:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-20T14:15:28Z"}, "message": "use exhaustive match for checking Rvalue::Repeat", "tree": {"sha": "306ee0f87e8cf60c6278e498c8ec54d586791311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306ee0f87e8cf60c6278e498c8ec54d586791311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a3ed3114c5fcacfa9ec15e89935c105b4c00a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a3ed3114c5fcacfa9ec15e89935c105b4c00a9", "html_url": "https://github.com/rust-lang/rust/commit/54a3ed3114c5fcacfa9ec15e89935c105b4c00a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a3ed3114c5fcacfa9ec15e89935c105b4c00a9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2f1cb2785f87177249e2bdb628ed782fcd8def", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f1cb2785f87177249e2bdb628ed782fcd8def", "html_url": "https://github.com/rust-lang/rust/commit/bd2f1cb2785f87177249e2bdb628ed782fcd8def"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "42cd050abc5dd47e92701c13f96e41a45bb841f3", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/54a3ed3114c5fcacfa9ec15e89935c105b4c00a9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a3ed3114c5fcacfa9ec15e89935c105b4c00a9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=54a3ed3114c5fcacfa9ec15e89935c105b4c00a9", "patch": "@@ -1988,44 +1988,48 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // If the length is larger than 1, the repeat expression will need to copy the\n                 // element, so we require the `Copy` trait.\n                 if len.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n-                    if let Operand::Move(_) = operand {\n-                        // While this is located in `nll::typeck` this error is not an NLL error, it's\n-                        // a required check to make sure that repeated elements implement `Copy`.\n-                        let span = body.source_info(location).span;\n-                        let ty = operand.ty(body, tcx);\n-                        if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n-                            let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n-                            // To determine if `const_in_array_repeat_expressions` feature gate should\n-                            // be mentioned, need to check if the rvalue is promotable.\n-                            let should_suggest =\n-                                should_suggest_const_in_array_repeat_expressions_attribute(\n-                                    &ccx, operand,\n-                                );\n-                            debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n-\n-                            let def_id = body.source.def_id().expect_local();\n-                            self.infcx.report_selection_error(\n-                                &traits::Obligation::new(\n-                                    ObligationCause::new(\n-                                        span,\n-                                        self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                        traits::ObligationCauseCode::RepeatVec(should_suggest),\n-                                    ),\n-                                    self.param_env,\n-                                    ty::Binder::bind(ty::TraitRef::new(\n-                                        self.tcx().require_lang_item(\n-                                            LangItem::Copy,\n-                                            Some(self.last_span),\n+                    match operand {\n+                        Operand::Copy(..) | Operand::Constant(..) => {\n+                            // These are always okay: direct use of a const, or a value that can evidently be copied.\n+                        }\n+                        Operand::Move(_) => {\n+                            // Make sure that repeated elements implement `Copy`.\n+                            let span = body.source_info(location).span;\n+                            let ty = operand.ty(body, tcx);\n+                            if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                                let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n+                                // To determine if `const_in_array_repeat_expressions` feature gate should\n+                                // be mentioned, need to check if the rvalue is promotable.\n+                                let should_suggest =\n+                                    should_suggest_const_in_array_repeat_expressions_attribute(\n+                                        &ccx, operand,\n+                                    );\n+                                debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n+\n+                                let def_id = body.source.def_id().expect_local();\n+                                self.infcx.report_selection_error(\n+                                    &traits::Obligation::new(\n+                                        ObligationCause::new(\n+                                            span,\n+                                            self.tcx().hir().local_def_id_to_hir_id(def_id),\n+                                            traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                         ),\n-                                        tcx.mk_substs_trait(ty, &[]),\n-                                    ))\n-                                    .without_const()\n-                                    .to_predicate(self.tcx()),\n-                                ),\n-                                &traits::SelectionError::Unimplemented,\n-                                false,\n-                                false,\n-                            );\n+                                        self.param_env,\n+                                        ty::Binder::bind(ty::TraitRef::new(\n+                                            self.tcx().require_lang_item(\n+                                                LangItem::Copy,\n+                                                Some(self.last_span),\n+                                            ),\n+                                            tcx.mk_substs_trait(ty, &[]),\n+                                        ))\n+                                        .without_const()\n+                                        .to_predicate(self.tcx()),\n+                                    ),\n+                                    &traits::SelectionError::Unimplemented,\n+                                    false,\n+                                    false,\n+                                );\n+                            }\n                         }\n                     }\n                 }"}]}