{"sha": "396540f19d37e4d8ad87a8d9db179c6b05263aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjU0MGYxOWQzN2U0ZDhhZDg3YThkOWRiMTc5YzZiMDUyNjNhZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T23:43:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T23:43:57Z"}, "message": "rustdoc: Don't prune reexports", "tree": {"sha": "748d90a52cebd632f42e612c68ea6f99a9a28d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/748d90a52cebd632f42e612c68ea6f99a9a28d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396540f19d37e4d8ad87a8d9db179c6b05263aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396540f19d37e4d8ad87a8d9db179c6b05263aff", "html_url": "https://github.com/rust-lang/rust/commit/396540f19d37e4d8ad87a8d9db179c6b05263aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396540f19d37e4d8ad87a8d9db179c6b05263aff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b009ea23d761d4cd7c0297289c6d3bb10c7cca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b009ea23d761d4cd7c0297289c6d3bb10c7cca7", "html_url": "https://github.com/rust-lang/rust/commit/9b009ea23d761d4cd7c0297289c6d3bb10c7cca7"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "f4541e85491e61fd8d05fbd0d2eb0063ce98c0f4", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=396540f19d37e4d8ad87a8d9db179c6b05263aff", "patch": "@@ -27,6 +27,8 @@ type itemdoc = {\n     path: [str],\n     brief: option<str>,\n     desc: option<str>,\n+    // Indicates that this node is a reexport of a different item\n+    reexport: bool\n };\n \n type moddoc = {"}, {"sha": "193413fe74066df9c13ecc1131af68e985bb422b", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=396540f19d37e4d8ad87a8d9db179c6b05263aff", "patch": "@@ -40,6 +40,7 @@ fn mk_itemdoc(id: ast::node_id, name: ast::ident) -> doc::itemdoc {\n         path: [],\n         brief: none,\n         desc: none,\n+        reexport: false\n     }\n }\n "}, {"sha": "c64b4dd6bcd5a717ac16673d67343b2b11871d1e", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=396540f19d37e4d8ad87a8d9db179c6b05263aff", "patch": "@@ -77,7 +77,8 @@ fn exported_items_from(\n           }\n           _ { itemtag }\n         };\n-        if is_exported(srv, itemtag.name()) {\n+\n+        if itemtag.item().reexport || is_exported(srv, itemtag.name()) {\n             some(itemtag)\n         } else {\n             none\n@@ -226,6 +227,21 @@ fn should_prune_unexported_types() {\n     assert vec::is_empty(doc.topmod.types());\n }\n \n+#[test]\n+fn should_not_prune_reexports() {\n+    fn mk_doc(source: str) -> doc::cratedoc {\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = reexport_pass::mk_pass()(srv, doc);\n+            run(srv, doc)\n+        }\n+    }\n+    let doc = mk_doc(\"import a::b; \\\n+                      export b; \\\n+                      mod a { fn b() { } }\");\n+    assert vec::is_not_empty(doc.topmod.fns());\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}, {"sha": "a4ac12ff58ec0200e44e8ce25235b1835acaabc8", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=396540f19d37e4d8ad87a8d9db179c6b05263aff", "patch": "@@ -212,70 +212,71 @@ fn merge_reexports(\n           some(name_docs) {\n             vec::foldl([], name_docs) {|v, name_doc|\n                 let (name, doc) = name_doc;\n-                v + [rename_doc(doc, name)]\n+                v + [reexport_doc(doc, name)]\n             }\n           }\n           none { [] }\n         }\n     }\n \n-    fn rename_doc(doc: doc::itemtag, name: str) -> doc::itemtag {\n+    fn reexport_doc(doc: doc::itemtag, name: str) -> doc::itemtag {\n         alt doc {\n           doc::modtag(doc @ {item, _}) {\n             doc::modtag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::nmodtag(_) { fail }\n           doc::consttag(doc @ {item, _}) {\n             doc::consttag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::fntag(doc @ {item, _}) {\n             doc::fntag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::enumtag(doc @ {item, _}) {\n             doc::enumtag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::restag(doc @ {item, _}) {\n             doc::restag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::ifacetag(doc @ {item, _}) {\n             doc::ifacetag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::impltag(doc @ {item, _}) {\n             doc::impltag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n           doc::tytag(doc @ {item, _}) {\n             doc::tytag({\n-                item: rename(item, name)\n+                item: reexport(item, name)\n                 with doc\n             })\n           }\n         }\n     }\n \n-    fn rename(doc: doc::itemdoc, name: str) -> doc::itemdoc {\n+    fn reexport(doc: doc::itemdoc, name: str) -> doc::itemdoc {\n         {\n-            name: name\n+            name: name,\n+            reexport: true\n             with doc\n         }\n     }\n@@ -289,6 +290,14 @@ fn should_duplicate_reexported_items() {\n     assert doc.topmod.mods()[1].fns()[0].name() == \"b\";\n }\n \n+#[test]\n+fn should_mark_reepxorts_as_such() {\n+    let source = \"mod a { export b; fn b() { } } \\\n+                  mod c { import a::b; export b; }\";\n+    let doc = test::mk_doc(source);\n+    assert doc.topmod.mods()[1].fns()[0].item.reexport == true;\n+}\n+\n #[test]\n fn should_duplicate_multiple_reexported_items() {\n     let source = \"mod a { \\"}, {"sha": "f00f0d0726aa4abce6713b3e92a918769935ec55", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396540f19d37e4d8ad87a8d9db179c6b05263aff/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=396540f19d37e4d8ad87a8d9db179c6b05263aff", "patch": "@@ -97,6 +97,7 @@ fn run(source_file: str) {\n     astsrv::from_file(source_file) {|srv|\n         let doc = extract::from_srv(srv, default_name);\n         run_passes(srv, doc, [\n+            reexport_pass::mk_pass(),\n             prune_unexported_pass::mk_pass(),\n             tystr_pass::mk_pass(),\n             path_pass::mk_pass(),\n@@ -107,7 +108,6 @@ fn run(source_file: str) {\n             desc_to_brief_pass::mk_pass(),\n             trim_pass::mk_pass(),\n             unindent_pass::mk_pass(),\n-            reexport_pass::mk_pass(),\n             sort_item_name_pass::mk_pass(),\n             sort_item_type_pass::mk_pass(),\n             markdown_pass::mk_pass {|f| f(std::io:: stdout()) }"}]}