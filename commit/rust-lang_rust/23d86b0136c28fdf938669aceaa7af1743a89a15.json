{"sha": "23d86b0136c28fdf938669aceaa7af1743a89a15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDg2YjAxMzZjMjhmZGY5Mzg2NjlhY2VhYTdhZjE3NDNhODlhMTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-16T07:36:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T07:06:28Z"}, "message": "try_read_value_from_ptr -> try_read_value_from_mplace", "tree": {"sha": "05ba38a59ec474c82be152115f57ea56c26f7ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ba38a59ec474c82be152115f57ea56c26f7ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d86b0136c28fdf938669aceaa7af1743a89a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d86b0136c28fdf938669aceaa7af1743a89a15", "html_url": "https://github.com/rust-lang/rust/commit/23d86b0136c28fdf938669aceaa7af1743a89a15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d86b0136c28fdf938669aceaa7af1743a89a15/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e7ba15fd1a8c9b3f4e54daf4e59a91a53b2d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e7ba15fd1a8c9b3f4e54daf4e59a91a53b2d57", "html_url": "https://github.com/rust-lang/rust/commit/61e7ba15fd1a8c9b3f4e54daf4e59a91a53b2d57"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "6f57cbfd1a8953f3f1b3050c60fb57874a034b53", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/23d86b0136c28fdf938669aceaa7af1743a89a15/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d86b0136c28fdf938669aceaa7af1743a89a15/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=23d86b0136c28fdf938669aceaa7af1743a89a15", "patch": "@@ -184,23 +184,25 @@ impl<'tcx> OpTy<'tcx> {\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Try reading a value in memory; this is interesting particularily for ScalarPair.\n     /// Return None if the layout does not permit loading this as a value.\n-    fn try_read_value_from_ptr(\n+    fn try_read_value_from_mplace(\n         &self,\n-        ptr: Scalar,\n-        ptr_align: Align,\n-        layout: TyLayout<'tcx>,\n+        mplace: MPlaceTy<'tcx>,\n     ) -> EvalResult<'tcx, Option<Value>> {\n+        if mplace.extra != PlaceExtra::None {\n+            return Ok(None);\n+        }\n+        let (ptr, ptr_align) = mplace.to_scalar_ptr_align();\n         self.memory.check_align(ptr, ptr_align)?;\n \n-        if layout.size.bytes() == 0 {\n+        if mplace.layout.size.bytes() == 0 {\n             return Ok(Some(Value::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits { bits: 0, size: 0 }))));\n         }\n \n         let ptr = ptr.to_ptr()?;\n \n-        match layout.abi {\n+        match mplace.layout.abi {\n             layout::Abi::Scalar(..) => {\n-                let scalar = self.memory.read_scalar(ptr, ptr_align, layout.size)?;\n+                let scalar = self.memory.read_scalar(ptr, ptr_align, mplace.layout.size)?;\n                 Ok(Some(Value::Scalar(scalar)))\n             }\n             layout::Abi::ScalarPair(ref a, ref b) => {\n@@ -226,21 +228,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// in a `Value`, not on which data is stored there currently.\n     pub(super) fn try_read_value(\n         &self,\n-        OpTy { op: src, layout } : OpTy<'tcx>,\n+        src : OpTy<'tcx>,\n     ) -> EvalResult<'tcx, Result<Value, MemPlace>> {\n-        match src {\n-            Operand::Indirect(mplace) => {\n-                if mplace.extra == PlaceExtra::None {\n-                    if let Some(val) =\n-                        self.try_read_value_from_ptr(mplace.ptr, mplace.align, layout)?\n-                    {\n-                        return Ok(Ok(val));\n-                    }\n+        Ok(match src.try_as_mplace() {\n+            Ok(mplace) => {\n+                if let Some(val) = self.try_read_value_from_mplace(mplace)? {\n+                    Ok(val)\n+                } else {\n+                    Err(*mplace)\n                 }\n-                Ok(Err(mplace))\n             },\n-            Operand::Immediate(val) => Ok(Ok(val)),\n-        }\n+            Err(val) => Ok(val),\n+        })\n     }\n \n     /// Read a value from a place, asserting that that is possible with the given layout."}]}