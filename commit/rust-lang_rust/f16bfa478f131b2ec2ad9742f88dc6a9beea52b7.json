{"sha": "f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "node_id": "C_kwDOAAsO6NoAKGYxNmJmYTQ3OGYxMzFiMmVjMmFkOTc0MmY4OGRjNmE5YmVlYTUyYjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T11:07:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T11:07:14Z"}, "message": "Auto merge of #10703 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "393446ee037a9e33e0688f2c10024e1dcfdb68b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393446ee037a9e33e0688f2c10024e1dcfdb68b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "html_url": "https://github.com/rust-lang/rust/commit/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ed905928a03b6e433d0b429190bf3a847128b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ed905928a03b6e433d0b429190bf3a847128b3", "html_url": "https://github.com/rust-lang/rust/commit/a3ed905928a03b6e433d0b429190bf3a847128b3"}, {"sha": "36bf3ef0042397f0d9d21f9de695f551e4e9d3b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/36bf3ef0042397f0d9d21f9de695f551e4e9d3b5", "html_url": "https://github.com/rust-lang/rust/commit/36bf3ef0042397f0d9d21f9de695f551e4e9d3b5"}], "stats": {"total": 216, "additions": 129, "deletions": 87}, "files": [{"sha": "3c72bb62ed19e75625b871ac88893d66024835a4", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "a0db69b652db0adf7da2157a4f8a335c5a65e5f1", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "8c3ad24eeed4393d245148b9d3d07b66af75aa8c", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -41,7 +41,7 @@ fn extract_bool_lit(e: &Expr<'_>) -> Option<bool> {\n     }) = e.kind\n         && !e.span.from_expansion()\n     {\n-        Some(b)\n+        Some(*b)\n     } else {\n         None\n     }"}, {"sha": "804ae841100a5088459a088b97a9aed0d19cc13a", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -141,9 +141,9 @@ fn lint_unnecessary_cast(\n \n fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     match expr.kind {\n-        ExprKind::Lit(ref lit) => Some(lit),\n+        ExprKind::Lit(lit) => Some(lit),\n         ExprKind::Unary(UnOp::Neg, e) => {\n-            if let ExprKind::Lit(ref lit) = e.kind {\n+            if let ExprKind::Lit(lit) = e.kind {\n                 Some(lit)\n             } else {\n                 None"}, {"sha": "93bf50fd5e79547469894c380a4e619531934aee", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n         let ty = cx.typeck_results().expr_ty(expr);\n         if_chain! {\n             if let ty::Float(fty) = *ty.kind();\n-            if let hir::ExprKind::Lit(ref lit) = expr.kind;\n+            if let hir::ExprKind::Lit(lit) = expr.kind;\n             if let LitKind::Float(sym, lit_float_ty) = lit.node;\n             then {\n                 let sym_str = sym.as_str();"}, {"sha": "c07bb6af9dcc03259b21bfa3a5095918dfd04ef2", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -677,7 +677,7 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             {\n                 let mut proposal = format!(\"{}.to_degrees()\", Sugg::hir(cx, mul_lhs, \"..\").maybe_par());\n                 if_chain! {\n-                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ExprKind::Lit(literal) = mul_lhs.kind;\n                     if let ast::LitKind::Float(ref value, float_type) = literal.node;\n                     if float_type == ast::LitFloatType::Unsuffixed;\n                     then {\n@@ -703,7 +703,7 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             {\n                 let mut proposal = format!(\"{}.to_radians()\", Sugg::hir(cx, mul_lhs, \"..\").maybe_par());\n                 if_chain! {\n-                    if let ExprKind::Lit(ref literal) = mul_lhs.kind;\n+                    if let ExprKind::Lit(literal) = mul_lhs.kind;\n                     if let ast::LitKind::Float(ref value, float_type) = literal.node;\n                     if float_type == ast::LitFloatType::Unsuffixed;\n                     then {"}, {"sha": "012aa5a1d1daf862b281d86d1c8f581ec0d52422", "filename": "clippy_lints/src/implicit_saturating_add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_add.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingAdd {\n             if expr1.span.ctxt() == ctxt;\n             if clippy_utils::SpanlessEq::new(cx).eq_expr(l, target);\n             if BinOpKind::Add == op1.node;\n-            if let ExprKind::Lit(ref lit) = value.kind;\n+            if let ExprKind::Lit(lit) = value.kind;\n             if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n             if block.expr.is_none();\n             then {"}, {"sha": "1e99b6faa6ca5025fde771cf9342d68b05dafe13", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                 // Get the variable name\n                 let var_name = ares_path.segments[0].ident.name.as_str();\n                 match cond_num_val.kind {\n-                    ExprKind::Lit(ref cond_lit) => {\n+                    ExprKind::Lit(cond_lit) => {\n                         // Check if the constant is zero\n                         if let LitKind::Int(0, _) = cond_lit.node {\n                             if cx.typeck_results().expr_ty(cond_left).is_signed() {"}, {"sha": "17bd89efaee03e2b58d0e0c3063ed2974ea1177f", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -532,7 +532,7 @@ fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Ex\n }\n \n fn is_empty_string(expr: &Expr<'_>) -> bool {\n-    if let ExprKind::Lit(ref lit) = expr.kind {\n+    if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(lit, _) = lit.node {\n             let lit = lit.as_str();\n             return lit.is_empty();"}, {"sha": "cb446567506af142031b0085a7ad7e7281818903", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -208,7 +208,7 @@ fn is_end_eq_array_len<'tcx>(\n     indexed_ty: Ty<'tcx>,\n ) -> bool {\n     if_chain! {\n-        if let ExprKind::Lit(ref lit) = end.kind;\n+        if let ExprKind::Lit(lit) = end.kind;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n         if let ty::Array(_, arr_len_const) = indexed_ty.kind();\n         if let Some(arr_len) = arr_len_const.try_eval_target_usize(cx.tcx, cx.param_env);"}, {"sha": "5f1fdf00be8c3fc11df5dc1a0eced013ff23f69d", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -226,7 +226,8 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_seq),\n-        ExprKind::Yield(_, _)\n+        ExprKind::OffsetOf(_, _)\n+        | ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)"}, {"sha": "7d28c11162458d13f3f042e5b0e6122f28ac62e8", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -159,7 +159,7 @@ fn eq_pattern_length<'tcx>(cx: &LateContext<'tcx>, pattern: &Expr<'_>, expr: &'t\n         ..\n     }) = expr.kind\n     {\n-        constant_length(cx, pattern).map_or(false, |length| length == n)\n+        constant_length(cx, pattern).map_or(false, |length| length == *n)\n     } else {\n         len_arg(cx, expr).map_or(false, |arg| eq_expr_value(cx, pattern, arg))\n     }"}, {"sha": "69105ff0d5c7acaa31c85c0461aae50c3491831e", "filename": "clippy_lints/src/matches/match_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn check(cx: &LateContext<'_>, scrutinee: &Expr<'_>, arms: &[Arm<'_>]\n                 if arms.len() == 2 {\n                     // no guards\n                     let exprs = if let PatKind::Lit(arm_bool) = arms[0].pat.kind {\n-                        if let ExprKind::Lit(ref lit) = arm_bool.kind {\n+                        if let ExprKind::Lit(lit) = arm_bool.kind {\n                             match lit.node {\n                                 LitKind::Bool(true) => Some((arms[0].body, arms[1].body)),\n                                 LitKind::Bool(false) => Some((arms[1].body, arms[0].body)),"}, {"sha": "33bc20dad6b788b5ab61107336bc358461db125b", "filename": "clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -162,7 +162,7 @@ fn find_bool_lit(ex: &ExprKind<'_>) -> Option<bool> {\n                 node: LitKind::Bool(b), ..\n             }) = exp.kind\n             {\n-                Some(b)\n+                Some(*b)\n             } else {\n                 None\n             }"}, {"sha": "fb9f9c1122f278a3ccc2885a952dbecc55ec7955", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -334,7 +334,7 @@ fn find_good_method_for_match<'a>(\n     };\n \n     match body_node_pair {\n-        (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n+        (ExprKind::Lit(lit_left), ExprKind::Lit(lit_right)) => match (&lit_left.node, &lit_right.node) {\n             (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n             (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n             _ => None,"}, {"sha": "7945275393c04e5e666611c0df065b1562ae9873", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -342,6 +342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::DropTemps(_) |\n             ExprKind::Err(_) |\n             ExprKind::InlineAsm(_) |\n+            ExprKind::OffsetOf(_, _) |\n             ExprKind::Let(_) |\n             ExprKind::Lit(_) |\n             ExprKind::Loop(_, _, _, _) |"}, {"sha": "8984b2cf8fd5005450c4e5b75d81bd57fa9e2f1a", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(\n ) -> bool {\n     if_chain! {\n         if let Some(args) = method_chain_args(info.chain, chain_methods);\n-        if let hir::ExprKind::Lit(ref lit) = info.other.kind;\n+        if let hir::ExprKind::Lit(lit) = info.other.kind;\n         if let ast::LitKind::Char(c) = lit.node;\n         then {\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "e2029da8081f4b1a3798a82cea748934a71174d7", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n             if let hir::ExprKind::Index(caller_var, index_expr) = &caller_expr.kind;\n             if let Some(higher::Range { start: Some(start_expr), end: None, limits: ast::RangeLimits::HalfOpen })\n                 = higher::Range::hir(index_expr);\n-            if let hir::ExprKind::Lit(ref start_lit) = &start_expr.kind;\n+            if let hir::ExprKind::Lit(start_lit) = &start_expr.kind;\n             if let ast::LitKind::Int(start_idx, _) = start_lit.node;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "bd625a6914c3ca54a3f22bbaf05ffef298e90823", "filename": "clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -42,13 +42,13 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n         // Only proceed if this is a call on some object of type std::fs::OpenOptions\n         if match_type(cx, obj_ty, &paths::OPEN_OPTIONS) && !arguments.is_empty() {\n             let argument_option = match arguments[0].kind {\n-                ExprKind::Lit(ref span) => {\n+                ExprKind::Lit(span) => {\n                     if let Spanned {\n                         node: LitKind::Bool(lit),\n                         ..\n-                    } = *span\n+                    } = span\n                     {\n-                        if lit { Argument::True } else { Argument::False }\n+                        if *lit { Argument::True } else { Argument::False }\n                     } else {\n                         // The function is called with a literal which is not a boolean literal.\n                         // This is theoretically possible, but not very likely."}, {"sha": "0284d9dea3032438730d3b88fc6f66c45b392642", "filename": "clippy_lints/src/methods/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n         if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::PathBuf);\n-        if let ExprKind::Lit(ref lit) = arg.kind;\n+        if let ExprKind::Lit(lit) = arg.kind;\n         if let LitKind::Str(ref path_lit, _) = lit.node;\n         if let pushed_path = Path::new(path_lit.as_str());\n         if let Some(pushed_path_lit) = pushed_path.to_str();"}, {"sha": "c028e954381dde85e8a4b147630d309e4c9e7de1", "filename": "clippy_lints/src/methods/seek_from_current.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fseek_from_current.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fseek_from_current.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fseek_from_current.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -38,7 +38,7 @@ fn arg_is_seek_from_current<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         match_def_path(cx, def_id, &paths::STD_IO_SEEK_FROM_CURRENT) {\n         // check if argument of `SeekFrom::Current` is `0`\n         if args.len() == 1 &&\n-            let ExprKind::Lit(ref lit) = args[0].kind &&\n+            let ExprKind::Lit(lit) = args[0].kind &&\n             let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node {\n             return true\n         }"}, {"sha": "787e9e0ebd245647f51bd856d7b6b2e8338ddb7b", "filename": "clippy_lints/src/methods/seek_to_start_instead_of_rewind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fseek_to_start_instead_of_rewind.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n         let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id() &&\n         match_def_path(cx, def_id, &paths::STD_IO_SEEKFROM_START) &&\n         args1.len() == 1 &&\n-        let ExprKind::Lit(ref lit) = args1[0].kind &&\n+        let ExprKind::Lit(lit) = args1[0].kind &&\n         let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node\n     {\n         let method_call_span = expr.span.with_lo(name_span.lo());"}, {"sha": "5a3d12fd790ea4f2063dfaf8bc5bcbf5377c4d24", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -78,7 +78,7 @@ pub(super) fn check(\n     }\n \n     // Check if the first argument to .fold is a suitable literal\n-    if let hir::ExprKind::Lit(ref lit) = init.kind {\n+    if let hir::ExprKind::Lit(lit) = init.kind {\n         match lit.node {\n             ast::LitKind::Bool(false) => check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::Or, \"any\", true),\n             ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::And, \"all\", true),"}, {"sha": "bd3ca7bcfac856a130aca1f07f1fde6710389db1", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -369,7 +369,7 @@ fn fetch_bool_block(expr: &Expr<'_>) -> Option<Expression> {\n }\n \n fn fetch_bool_expr(expr: &Expr<'_>) -> Option<bool> {\n-    if let ExprKind::Lit(ref lit_ptr) = peel_blocks(expr).kind {\n+    if let ExprKind::Lit(lit_ptr) = peel_blocks(expr).kind {\n         if let LitKind::Bool(value) = lit_ptr.node {\n             return Some(value);\n         }"}, {"sha": "da1b9d99931a5dc65e615e671f04bc05017d5ea9", "filename": "clippy_lints/src/needless_parens_on_range_literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -49,14 +49,14 @@ fn snippet_enclosed_in_parenthesis(snippet: &str) -> bool {\n \n fn check_for_parens(cx: &LateContext<'_>, e: &Expr<'_>, is_start: bool) {\n     if is_start &&\n-    let ExprKind::Lit(ref literal) = e.kind &&\n+    let ExprKind::Lit(literal) = e.kind &&\n     let ast::LitKind::Float(_sym, ast::LitFloatType::Unsuffixed) = literal.node\n     {\n         // don't check floating point literals on the start expression of a range\n         return;\n     }\n     if_chain! {\n-        if let ExprKind::Lit(ref literal) = e.kind;\n+        if let ExprKind::Lit(literal) = e.kind;\n         // the indicator that parenthesis surround the literal is that the span of the expression and the literal differ\n         if (literal.span.data().hi - literal.span.data().lo) != (e.span.data().hi - e.span.data().lo);\n         // inspect the source code of the expression for parenthesis"}, {"sha": "0bb1775aae9cfb23c2c700c1cfb73109c927de67", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n \n-        let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n+        let preds = traits::elaborate(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|pred| {\n                 // Note that we do not want to deal with qualified predicates here."}, {"sha": "db0e22842d14ade5e5f151ac0fc2ffaa9cb00d80", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n \n fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n     if_chain! {\n-        if let ExprKind::Lit(ref l) = lit.kind;\n+        if let ExprKind::Lit(l) = lit.kind;\n         if consts::lit_to_mir_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n "}, {"sha": "58590df1fedf8d3ffe5831a0b1415b8e1db1df95", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -196,11 +196,9 @@ fn is_value_unfrozen_poly<'tcx>(cx: &LateContext<'tcx>, body_id: BodyId, ty: Ty<\n fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: DefId, ty: Ty<'tcx>) -> bool {\n     let substs = cx.typeck_results().node_substs(hir_id);\n \n-    let result = cx.tcx.const_eval_resolve(\n-        cx.param_env,\n-        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n-        None,\n-    );\n+    let result = cx\n+        .tcx\n+        .const_eval_resolve(cx.param_env, mir::UnevaluatedConst::new(def_id, substs), None);\n     is_value_unfrozen_raw(cx, result, ty)\n }\n "}, {"sha": "f72595987ee2fe1bbec99dc095f71ae8f498411e", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -110,7 +110,7 @@ impl ArithmeticSideEffects {\n     /// like `i32::MAX` or constant references like `N` from `const N: i32 = 1;`,\n     fn literal_integer(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<u128> {\n         let actual = peel_hir_expr_unary(expr).0;\n-        if let hir::ExprKind::Lit(ref lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n+        if let hir::ExprKind::Lit(lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n             return Some(n)\n         }\n         if let Some((Constant::Int(n), _)) = constant(cx, cx.typeck_results(), expr) {"}, {"sha": "b8b32df6cc64b624472fb4f7de88cfad701645ee", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -180,7 +180,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n         .allow_invalid_utf8(!utf8)\n         .build();\n \n-    if let ExprKind::Lit(ref lit) = expr.kind {\n+    if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {\n             let r = r.as_str();\n             let offset = if let StrStyle::Raw(n) = style { 2 + n } else { 1 };"}, {"sha": "e275bfd37b003d3fdb6fe43bf0b2e946e327463f", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -76,7 +76,7 @@ declare_lint_pass!(Unicode => [INVISIBLE_CHARACTERS, NON_ASCII_LITERAL, UNICODE_\n \n impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n-        if let ExprKind::Lit(ref lit) = expr.kind {\n+        if let ExprKind::Lit(lit) = expr.kind {\n             if let LitKind::Str(_, _) | LitKind::Char(_) = lit.node {\n                 check_str(cx, lit.span, expr.hir_id);\n             }"}, {"sha": "1f632916c57010a4648555aa1a2f5f258536d821", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"Unary(UnOp::{op:?}, {inner})\");\n                 self.expr(inner);\n             },\n-            ExprKind::Lit(ref lit) => {\n+            ExprKind::Lit(lit) => {\n                 bind!(self, lit);\n                 kind!(\"Lit(ref {lit})\");\n                 self.lit(lit);\n@@ -558,6 +558,10 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"InlineAsm(_)\");\n                 out!(\"// unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n             },\n+            ExprKind::OffsetOf(container, ref fields) => {\n+                bind!(self, container, fields);\n+                kind!(\"OffsetOf({container}, {fields})\");\n+            },\n             ExprKind::Struct(qpath, fields, base) => {\n                 bind!(self, qpath, fields);\n                 opt_bind!(self, base);"}, {"sha": "66a5079fa85ef2bda7d11d0ebf42b7128176d5de", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "9edaae853734ce842c596b4c0175b5e763e6c72c", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -117,7 +117,7 @@ fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),\n         ExprKind::Unary(UnOp::Not, e) => (Pat::Str(\"!\"), expr_search_pat(tcx, e).1),\n         ExprKind::Unary(UnOp::Neg, e) => (Pat::Str(\"-\"), expr_search_pat(tcx, e).1),\n-        ExprKind::Lit(ref lit) => lit_search_pat(&lit.node),\n+        ExprKind::Lit(lit) => lit_search_pat(&lit.node),\n         ExprKind::Array(_) | ExprKind::Repeat(..) => (Pat::Str(\"[\"), Pat::Str(\"]\")),\n         ExprKind::Call(e, []) | ExprKind::MethodCall(_, e, [], _) => (expr_search_pat(tcx, e).0, Pat::Str(\"(\")),\n         ExprKind::Call(first, [.., last])"}, {"sha": "b52caf6e4056b982c6d23ed056fda43a5e2a1523", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         match e.kind {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id, self.typeck_results.expr_ty(e)),\n             ExprKind::Block(block, _) => self.block(block),\n-            ExprKind::Lit(ref lit) => {\n+            ExprKind::Lit(lit) => {\n                 if is_direct_expn_of(e.span, \"cfg\").is_some() {\n                     None\n                 } else {\n@@ -450,11 +450,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(\n-                        self.param_env,\n-                        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n-                        None,\n-                    )\n+                    .const_eval_resolve(self.param_env, mir::UnevaluatedConst::new(def_id, substs), None)\n                     .ok()\n                     .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty))?;\n                 let result = miri_to_const(self.lcx.tcx, result);"}, {"sha": "3df40942e7b5a5ee3652514342da623f63ae3d8b", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -218,7 +218,8 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::AddrOf(..)\n                 | ExprKind::Struct(..)\n                 | ExprKind::Repeat(..)\n-                | ExprKind::Block(Block { stmts: [], .. }, _) => (),\n+                | ExprKind::Block(Block { stmts: [], .. }, _)\n+                | ExprKind::OffsetOf(..) => (),\n \n                 // Assignment might be to a local defined earlier, so don't eagerly evaluate.\n                 // Blocks with multiple statements might be expensive, so don't eagerly evaluate."}, {"sha": "9b7408d51339290585d6bee88d53657601c0c16d", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -301,6 +301,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::Unary(l_op, le), &ExprKind::Unary(r_op, re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprKind::Array(l), &ExprKind::Array(r)) => self.eq_exprs(l, r),\n             (&ExprKind::DropTemps(le), &ExprKind::DropTemps(re)) => self.eq_expr(le, re),\n+            (&ExprKind::OffsetOf(l_container, l_fields), &ExprKind::OffsetOf(r_container, r_fields)) => {\n+                self.eq_ty(l_container, r_container) && over(l_fields, r_fields, |l, r| l.name == r.name)\n+            },\n             _ => false,\n         };\n         (is_eq && (!self.should_ignore(left) || !self.should_ignore(right)))\n@@ -701,6 +704,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n+            ExprKind::OffsetOf(container, fields) => {\n+                self.hash_ty(container);\n+                for field in fields {\n+                    self.hash_name(field.name);\n+                }\n+            },\n             ExprKind::Let(Let { pat, init, ty, .. }) => {\n                 self.hash_expr(init);\n                 if let Some(ty) = ty {\n@@ -709,7 +718,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_pat(pat);\n             },\n             ExprKind::Err(_) => {},\n-            ExprKind::Lit(ref l) => {\n+            ExprKind::Lit(l) => {\n                 l.node.hash(&mut self.s);\n             },\n             ExprKind::Loop(b, ref i, ..) => {"}, {"sha": "4b9fa0334462e9733305660de4ddc50b96fa00f4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -846,7 +846,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n         },\n         ExprKind::Tup(items) | ExprKind::Array(items) => items.iter().all(|x| is_default_equivalent(cx, x)),\n         ExprKind::Repeat(x, ArrayLen::Body(len)) => if_chain! {\n-            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind;\n+            if let ExprKind::Lit(const_lit) = cx.tcx.hir().body(len.body).value.kind;\n             if let LitKind::Int(v, _) = const_lit.node;\n             if v <= 32 && is_default_equivalent(cx, x);\n             then {\n@@ -875,7 +875,7 @@ fn is_default_equivalent_from(cx: &LateContext<'_>, from_func: &Expr<'_>, arg: &\n             }) => return sym.is_empty() && is_path_lang_item(cx, ty, LangItem::String),\n             ExprKind::Array([]) => return is_path_diagnostic_item(cx, ty, sym::Vec),\n             ExprKind::Repeat(_, ArrayLen::Body(len)) => {\n-                if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind &&\n+                if let ExprKind::Lit(const_lit) = cx.tcx.hir().body(len.body).value.kind &&\n                     let LitKind::Int(v, _) = const_lit.node\n                 {\n                         return v == 0 && is_path_diagnostic_item(cx, ty, sym::Vec);\n@@ -1569,7 +1569,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n /// Checks whether the given expression is a constant literal of the given value.\n pub fn is_integer_literal(expr: &Expr<'_>, value: u128) -> bool {\n     // FIXME: use constant folding\n-    if let ExprKind::Lit(ref spanned) = expr.kind {\n+    if let ExprKind::Lit(spanned) = expr.kind {\n         if let LitKind::Int(v, _) = spanned.node {\n             return v == value;\n         }\n@@ -2165,10 +2165,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .predicates\n         .iter()\n         .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n-    traits::impossible_predicates(\n-        cx.tcx,\n-        traits::elaborate_predicates(cx.tcx, predicates).collect::<Vec<_>>(),\n-    )\n+    traits::impossible_predicates(cx.tcx, traits::elaborate(cx.tcx, predicates).collect::<Vec<_>>())\n }\n \n /// Returns the `DefId` of the callee if the given expression is a function or method call."}, {"sha": "c0d2c835d63d48d85f21f6eb583cb0b99df92a02", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -194,7 +194,9 @@ fn check_rvalue<'tcx>(\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(_), _) | Rvalue::ShallowInitBox(_, _) => {\n+            Ok(())\n+        },\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {\n@@ -301,13 +303,13 @@ fn check_terminator<'tcx>(\n         | TerminatorKind::Goto { .. }\n         | TerminatorKind::Return\n         | TerminatorKind::Resume\n+        | TerminatorKind::Terminate\n         | TerminatorKind::Unreachable => Ok(()),\n \n         TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n \n         TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n \n-        TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n             Err((span, \"const fn generators are unstable\".into()))\n         },\n@@ -318,7 +320,7 @@ fn check_terminator<'tcx>(\n             from_hir_call: _,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n@@ -361,7 +363,7 @@ fn check_terminator<'tcx>(\n             expected: _,\n             msg: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n         } => check_operand(tcx, cond, span, body),\n \n         TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),"}, {"sha": "e81eadceec0aa5ee53dc10bd74fb2d961fbcbe42", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -139,6 +139,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n             | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::OffsetOf(..)\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -197,6 +198,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n             | ast::ExprKind::InlineAsm(..)\n+            | ast::ExprKind::OffsetOf(..)\n             | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::IncludedBytes(..)"}, {"sha": "8b996c188161d1a59cec8a02cfc4512df5a5aa41", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -975,7 +975,7 @@ pub fn approx_ty_size<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> u64 {\n     }\n     match (cx.layout_of(ty).map(|layout| layout.size.bytes()), ty.kind()) {\n         (Ok(size), _) => size,\n-        (Err(_), ty::Tuple(list)) => list.as_substs().types().map(|t| approx_ty_size(cx, t)).sum(),\n+        (Err(_), ty::Tuple(list)) => list.iter().map(|t| approx_ty_size(cx, t)).sum(),\n         (Err(_), ty::Array(t, n)) => {\n             n.try_eval_target_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n         },"}, {"sha": "5dcd71cef127e4b9d0a4a23c54e0f198138862c0", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -662,6 +662,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Path(_)\n             | ExprKind::Continue(_)\n             | ExprKind::InlineAsm(_)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::Err(_) => (),\n         }\n         ControlFlow::Continue(())"}, {"sha": "139102798c42a398fcf338fc2784bbcb20a0c492", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "7a6d85f4147bbb29fe93153622a61b25e0861036", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-04-06\"\n+channel = \"nightly-2023-04-23\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "205905d50913557f721e264dc365d23a464d728a", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -160,6 +160,9 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n         config.opts.unstable_opts.mir_opt_level = Some(0);\n+\n+        // Disable flattening and inlining of format_args!(), so the HIR matches with the AST.\n+        config.opts.unstable_opts.flatten_format_args = false;\n     }\n }\n "}, {"sha": "afde31face11349b87f43582d30d42cbd9e4181a", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -39,7 +39,7 @@ fn dogfood_clippy() {\n     assert!(\n         failed_packages.is_empty(),\n         \"Dogfood failed for packages `{}`\",\n-        failed_packages.iter().format(\", \"),\n+        failed_packages.iter().join(\", \"),\n     );\n }\n "}, {"sha": "893c15f5d731c54f999dda846de8413e384f6ad1", "filename": "tests/ui/crashes/ice-5207.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fcrashes%2Fice-5207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fcrashes%2Fice-5207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5207.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -1,5 +1,8 @@\n-// Regression test for https://github.com/rust-lang/rust-clippy/issues/5207\n+// compile-flags: --cap-lints=warn\n+// ^ for https://github.com/rust-lang/rust-clippy/issues/10645\n \n+// Regression test for https://github.com/rust-lang/rust-clippy/issues/5207\n+#![warn(clippy::future_not_send)]\n pub async fn bar<'a, T: 'a>(_: T) {}\n \n fn main() {}"}, {"sha": "59146c23e0d571522f728ec7485c656e92c5f441", "filename": "tests/ui/crashes/ice-5207.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fcrashes%2Fice-5207.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fcrashes%2Fice-5207.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5207.stderr?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -0,0 +1,16 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/ice-5207.rs:6:35\n+   |\n+LL | pub async fn bar<'a, T: 'a>(_: T) {}\n+   |                                   ^ future returned by `bar` is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/ice-5207.rs:6:29\n+   |\n+LL | pub async fn bar<'a, T: 'a>(_: T) {}\n+   |                             ^ has type `T` which is not `Send`\n+   = note: `T` doesn't implement `std::marker::Send`\n+   = note: `-D clippy::future-not-send` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4787282f504a6c58959a7b9fdcaab60d943fe86a", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -6,11 +6,11 @@ LL |     _n: PhantomData,\n    |\n help: consider importing one of these items\n    |\n-LL | use core::marker::PhantomData;\n+LL + use core::marker::PhantomData;\n    |\n-LL | use serde::__private::PhantomData;\n+LL + use serde::__private::PhantomData;\n    |\n-LL | use std::marker::PhantomData;\n+LL + use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope"}, {"sha": "8089f5ea0fcb2ec15891dc4fdb4b77ffa11074e8", "filename": "tests/ui/derivable_impls.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.stderr?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -14,7 +14,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct FooDefault<'a> {\n    |\n \n error: this `impl` can be derived\n@@ -30,7 +31,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct TupleDefault(bool, i32, u64);\n    |\n \n error: this `impl` can be derived\n@@ -46,7 +48,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct StrDefault<'a>(&'a str);\n    |\n \n error: this `impl` can be derived\n@@ -62,7 +65,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct Y(u32);\n    |\n \n error: this `impl` can be derived\n@@ -78,7 +82,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct WithoutSelfCurly {\n    |\n \n error: this `impl` can be derived\n@@ -94,7 +99,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct WithoutSelfParan(bool);\n    |\n \n error: this `impl` can be derived\n@@ -110,7 +116,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub struct RepeatDefault1 {\n    |\n \n error: this `impl` can be derived\n@@ -126,7 +133,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it...\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub enum SimpleEnum {\n    |\n help: ...and mark the default variant\n    |"}, {"sha": "b4dabe3cae5d39a9f77942fec2e96aa948827362", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -16,7 +16,7 @@ extern crate macro_use_helper as mac;\n extern crate proc_macro_derive as mini_mac;\n \n mod a {\n-    use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};\n+    use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};\n     use mac;\n     use mini_mac::ClippyMiniMacroTest;\n     use mini_mac;"}, {"sha": "6fd338cef8688904d3b981fecfdf43806fdbd5d1", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -22,7 +22,7 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, function_macro, ty_macro, inner_mod_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9aebcf47100e7e677dce13518c5298130e18eceb", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -25,7 +25,7 @@ fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n     let _ = string.map_or(0, |s| s.len());\n     let _ = num.as_ref().map_or(&0, |s| s);\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });\n@@ -34,7 +34,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         s += 1;\n         s\n     });\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });"}, {"sha": "b40b324902aeccc131c547ab530b933656c4e25a", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -33,7 +33,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n     let _ = if let Some(ref s) = num { s } else { &0 };\n     let _ = if let Some(mut s) = num {\n@@ -46,7 +46,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n }\n "}, {"sha": "f5e4affb67229cd8019736e61b54381a76158b5a", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f16bfa478f131b2ec2ad9742f88dc6a9beea52b7/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=f16bfa478f131b2ec2ad9742f88dc6a9beea52b7", "patch": "@@ -30,13 +30,13 @@ LL |       let _ = if let Some(s) = &mut num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });\n@@ -76,13 +76,13 @@ LL |       let _ = if let Some(ref mut s) = num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });"}]}