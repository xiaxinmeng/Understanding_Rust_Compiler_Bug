{"sha": "4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjlkNmViM2YyMGMyYjdhMDViYjljOWMyZjk2NGRhNjA2ZTM5Y2E=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-30T07:22:18Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-30T20:24:47Z"}, "message": "add a closure_exchange_malloc lang item\n\nthis makes the exchange allocation header completely unused, and leaves\nit uninitialized", "tree": {"sha": "050f52b9890f32f8e2836b456b4e042c14e2ef5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/050f52b9890f32f8e2836b456b4e042c14e2ef5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "comment_count": 29, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "html_url": "https://github.com/rust-lang/rust/commit/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e2582e09dd97d01a01e351c47da210bd6803f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e2582e09dd97d01a01e351c47da210bd6803f3", "html_url": "https://github.com/rust-lang/rust/commit/45e2582e09dd97d01a01e351c47da210bd6803f3"}], "stats": {"total": 172, "additions": 101, "deletions": 71}, "files": [{"sha": "5496fd3079996cfd8a2936f2f2aa1831e949cf24", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 71, "deletions": 65, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "patch": "@@ -33,63 +33,64 @@ use syntax::visit::visit_crate;\n use core::hashmap::HashMap;\n \n pub enum LangItem {\n-    FreezeTraitLangItem,        // 0\n-    CopyTraitLangItem,          // 1\n-    SendTraitLangItem,          // 2\n-    SizedTraitLangItem,         // 3\n-\n-    DropTraitLangItem,          // 4\n-\n-    AddTraitLangItem,           // 5\n-    SubTraitLangItem,           // 6\n-    MulTraitLangItem,           // 7\n-    DivTraitLangItem,           // 8\n-    RemTraitLangItem,           // 9\n-    NegTraitLangItem,           // 10\n-    NotTraitLangItem,           // 11\n-    BitXorTraitLangItem,        // 11\n-    BitAndTraitLangItem,        // 13\n-    BitOrTraitLangItem,         // 14\n-    ShlTraitLangItem,           // 15\n-    ShrTraitLangItem,           // 16\n-    IndexTraitLangItem,         // 17\n-\n-    EqTraitLangItem,            // 18\n-    OrdTraitLangItem,           // 19\n-\n-    StrEqFnLangItem,            // 20\n-    UniqStrEqFnLangItem,        // 21\n-    AnnihilateFnLangItem,       // 22\n-    LogTypeFnLangItem,          // 23\n-    FailFnLangItem,             // 24\n-    FailBoundsCheckFnLangItem,  // 25\n-    ExchangeMallocFnLangItem,   // 26\n-    ExchangeFreeFnLangItem,     // 27\n-    MallocFnLangItem,           // 28\n-    FreeFnLangItem,             // 29\n-    BorrowAsImmFnLangItem,      // 30\n-    BorrowAsMutFnLangItem,      // 31\n-    ReturnToMutFnLangItem,      // 32\n-    CheckNotBorrowedFnLangItem, // 33\n-    StrDupUniqFnLangItem,       // 34\n-    RecordBorrowFnLangItem,     // 35\n-    UnrecordBorrowFnLangItem,   // 36\n-\n-    StartFnLangItem,            // 37\n-\n-    TyDescStructLangItem,       // 38\n-    TyVisitorTraitLangItem,     // 39\n-    OpaqueStructLangItem,       // 40\n+    FreezeTraitLangItem,               // 0\n+    CopyTraitLangItem,                 // 1\n+    SendTraitLangItem,                 // 2\n+    SizedTraitLangItem,                // 3\n+\n+    DropTraitLangItem,                 // 4\n+\n+    AddTraitLangItem,                  // 5\n+    SubTraitLangItem,                  // 6\n+    MulTraitLangItem,                  // 7\n+    DivTraitLangItem,                  // 8\n+    RemTraitLangItem,                  // 9\n+    NegTraitLangItem,                  // 10\n+    NotTraitLangItem,                  // 11\n+    BitXorTraitLangItem,               // 11\n+    BitAndTraitLangItem,               // 13\n+    BitOrTraitLangItem,                // 14\n+    ShlTraitLangItem,                  // 15\n+    ShrTraitLangItem,                  // 16\n+    IndexTraitLangItem,                // 17\n+\n+    EqTraitLangItem,                   // 18\n+    OrdTraitLangItem,                  // 19\n+\n+    StrEqFnLangItem,                   // 20\n+    UniqStrEqFnLangItem,               // 21\n+    AnnihilateFnLangItem,              // 22\n+    LogTypeFnLangItem,                 // 23\n+    FailFnLangItem,                    // 24\n+    FailBoundsCheckFnLangItem,         // 25\n+    ExchangeMallocFnLangItem,          // 26\n+    ClosureExchangeMallocFnLangItem,   // 27\n+    ExchangeFreeFnLangItem,            // 28\n+    MallocFnLangItem,                  // 29\n+    FreeFnLangItem,                    // 30\n+    BorrowAsImmFnLangItem,             // 31\n+    BorrowAsMutFnLangItem,             // 32\n+    ReturnToMutFnLangItem,             // 33\n+    CheckNotBorrowedFnLangItem,        // 34\n+    StrDupUniqFnLangItem,              // 35\n+    RecordBorrowFnLangItem,            // 36\n+    UnrecordBorrowFnLangItem,          // 37\n+\n+    StartFnLangItem,                   // 38\n+\n+    TyDescStructLangItem,              // 39\n+    TyVisitorTraitLangItem,            // 40\n+    OpaqueStructLangItem,              // 41\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..41]\n+    items: [Option<def_id>, ..42]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..41 ]\n+            items: [ None, ..42 ]\n         }\n     }\n \n@@ -129,22 +130,23 @@ impl LanguageItems {\n             24 => \"fail_\",\n             25 => \"fail_bounds_check\",\n             26 => \"exchange_malloc\",\n-            27 => \"exchange_free\",\n-            28 => \"malloc\",\n-            29 => \"free\",\n-            30 => \"borrow_as_imm\",\n-            31 => \"borrow_as_mut\",\n-            32 => \"return_to_mut\",\n-            33 => \"check_not_borrowed\",\n-            34 => \"strdup_uniq\",\n-            35 => \"record_borrow\",\n-            36 => \"unrecord_borrow\",\n-\n-            37 => \"start\",\n-\n-            38 => \"ty_desc\",\n-            39 => \"ty_visitor\",\n-            40 => \"opaque\",\n+            27 => \"closure_exchange_malloc\",\n+            28 => \"exchange_free\",\n+            29 => \"malloc\",\n+            30 => \"free\",\n+            31 => \"borrow_as_imm\",\n+            32 => \"borrow_as_mut\",\n+            33 => \"return_to_mut\",\n+            34 => \"check_not_borrowed\",\n+            35 => \"strdup_uniq\",\n+            36 => \"record_borrow\",\n+            37 => \"unrecord_borrow\",\n+\n+            38 => \"start\",\n+\n+            39 => \"ty_desc\",\n+            40 => \"ty_visitor\",\n+            41 => \"opaque\",\n \n             _ => \"???\"\n         }\n@@ -237,6 +239,9 @@ impl LanguageItems {\n     pub fn exchange_malloc_fn(&self) -> def_id {\n         self.items[ExchangeMallocFnLangItem as uint].get()\n     }\n+    pub fn closure_exchange_malloc_fn(&self) -> def_id {\n+        self.items[ClosureExchangeMallocFnLangItem as uint].get()\n+    }\n     pub fn exchange_free_fn(&self) -> def_id {\n         self.items[ExchangeFreeFnLangItem as uint].get()\n     }\n@@ -327,6 +332,7 @@ impl<'self> LanguageItemCollector<'self> {\n         item_refs.insert(@\"fail_bounds_check\",\n                          FailBoundsCheckFnLangItem as uint);\n         item_refs.insert(@\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n+        item_refs.insert(@\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n         item_refs.insert(@\"exchange_free\", ExchangeFreeFnLangItem as uint);\n         item_refs.insert(@\"malloc\", MallocFnLangItem as uint);\n         item_refs.insert(@\"free\", FreeFnLangItem as uint);"}, {"sha": "254cb279d2e3501da07127fa928103e717aeafa2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "patch": "@@ -254,6 +254,9 @@ pub fn malloc_raw_dyn(bcx: block,\n         heap_exchange => {\n             (ty::mk_imm_uniq, bcx.tcx().lang_items.exchange_malloc_fn())\n         }\n+        heap_exchange_closure => {\n+            (ty::mk_imm_uniq, bcx.tcx().lang_items.closure_exchange_malloc_fn())\n+        }\n     };\n \n     // Grab the TypeRef type of box_ptr_ty."}, {"sha": "8405caa10a8233ceb60cd6a89edc181b5e0453a8", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "patch": "@@ -160,6 +160,14 @@ pub fn mk_closure_tys(tcx: ty::ctxt,\n     return cdata_ty;\n }\n \n+fn heap_for_unique_closure(bcx: block, t: ty::t) -> heap {\n+    if ty::type_contents(bcx.tcx(), t).contains_managed() {\n+        heap_managed_unique\n+    } else {\n+        heap_exchange_closure\n+    }\n+}\n+\n pub fn allocate_cbox(bcx: block, sigil: ast::Sigil, cdata_ty: ty::t)\n                   -> Result {\n     let _icx = push_ctxt(\"closure::allocate_cbox\");\n@@ -182,7 +190,7 @@ pub fn allocate_cbox(bcx: block, sigil: ast::Sigil, cdata_ty: ty::t)\n             malloc_raw(bcx, cdata_ty, heap_managed)\n         }\n         ast::OwnedSigil => {\n-            malloc_raw(bcx, cdata_ty, heap_for_unique(bcx, cdata_ty))\n+            malloc_raw(bcx, cdata_ty, heap_for_unique_closure(bcx, cdata_ty))\n         }\n         ast::BorrowedSigil => {\n             let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n@@ -486,9 +494,6 @@ pub fn make_closure_glue(\n     }\n }\n \n-// note: unique pointers no longer copy the type descriptor in the take glue,\n-// so we cannot delegate to the unique box take glue here without copying it\n-// ourselves\n pub fn make_opaque_cbox_take_glue(\n     bcx: block,\n     sigil: ast::Sigil,\n@@ -530,7 +535,7 @@ pub fn make_opaque_cbox_take_glue(\n         let rval = alloca(bcx, Type::i8p());\n         let bcx = callee::trans_lang_call(\n             bcx,\n-            bcx.tcx().lang_items.exchange_malloc_fn(),\n+            bcx.tcx().lang_items.closure_exchange_malloc_fn(),\n             [opaque_tydesc, sz],\n             expr::SaveIn(rval));\n         let cbox_out = PointerCast(bcx, Load(bcx, rval), llopaquecboxty);"}, {"sha": "7638839f95f35bbf8f26fec5387708e096ec64e7", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "patch": "@@ -276,6 +276,7 @@ pub enum heap {\n     heap_managed,\n     heap_managed_unique,\n     heap_exchange,\n+    heap_exchange_closure\n }\n \n #[deriving(Eq)]\n@@ -385,7 +386,7 @@ pub fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n         let f: @fn(block) -> block = |a| glue::trans_free(a, ptr);\n         f\n       }\n-      heap_exchange => {\n+      heap_exchange | heap_exchange_closure => {\n         let f: @fn(block) -> block = |a| glue::trans_exchange_free(a, ptr);\n         f\n       }"}, {"sha": "456ae4195a92cd7c5208ada16677d01dc6bca710", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "patch": "@@ -321,6 +321,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: block, heap: heap, vstore_expr: @ast::e\n                 _ => {}\n             }\n         }\n+        heap_exchange_closure => fail!(\"vectors are not allocated with closure_exchange_alloc\"),\n         heap_managed | heap_managed_unique => {}\n     }\n "}, {"sha": "f669dc753d60df76a95ee22761de449b49678b97", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=4a29d6eb3f20c2b7a05bb9c9c2f964da606e39ca", "patch": "@@ -72,6 +72,20 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n \n     assert!(td.is_not_null());\n \n+    let total_size = get_box_size(size, (*td).align);\n+    malloc_raw(total_size as uint) as *c_char\n+}\n+\n+// FIXME: #7496\n+#[cfg(not(test))]\n+#[lang=\"closure_exchange_malloc\"]\n+#[inline]\n+pub unsafe fn closure_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n+    let td = td as *TyDesc;\n+    let size = size as uint;\n+\n+    assert!(td.is_not_null());\n+\n     let total_size = get_box_size(size, (*td).align);\n     let p = malloc_raw(total_size as uint);\n "}]}