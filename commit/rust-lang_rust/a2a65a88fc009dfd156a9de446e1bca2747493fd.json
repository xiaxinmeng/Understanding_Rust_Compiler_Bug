{"sha": "a2a65a88fc009dfd156a9de446e1bca2747493fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYTY1YTg4ZmMwMDlkZmQxNTZhOWRlNDQ2ZTFiY2EyNzQ3NDkzZmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-04T18:38:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-10T00:46:26Z"}, "message": "Consider methods on fundamental `impl` when method is not found on numeric type\n\nFix #47759.", "tree": {"sha": "b722f33f7335a9cde5ed96520694ea80fb86ae5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b722f33f7335a9cde5ed96520694ea80fb86ae5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a65a88fc009dfd156a9de446e1bca2747493fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a65a88fc009dfd156a9de446e1bca2747493fd", "html_url": "https://github.com/rust-lang/rust/commit/a2a65a88fc009dfd156a9de446e1bca2747493fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a65a88fc009dfd156a9de446e1bca2747493fd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6387b09153939b2a104cd63148598a5f458de2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6387b09153939b2a104cd63148598a5f458de2c2", "html_url": "https://github.com/rust-lang/rust/commit/6387b09153939b2a104cd63148598a5f458de2c2"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "f075d1e74d455df26ab62f9eb7fd81e379a0eef3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a2a65a88fc009dfd156a9de446e1bca2747493fd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a65a88fc009dfd156a9de446e1bca2747493fd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a2a65a88fc009dfd156a9de446e1bca2747493fd", "patch": "@@ -271,11 +271,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut candidates = all_traits(self.tcx).into_iter().filter_map(|info| {\n                         self.associated_item(info.def_id, item_name, Namespace::ValueNS)\n                     });\n-                    if let (true, false, SelfSource::MethodCall(expr), Some(_)) = (\n+                    // There are methods that are defined on the primitive types and won't be\n+                    // found when exploring `all_traits`, but we also need them to be acurate on\n+                    // our suggestions (#47759).\n+                    let fund_assoc = |opt_def_id: Option<DefId>| {\n+                        opt_def_id\n+                            .and_then(|id| self.associated_item(id, item_name, Namespace::ValueNS))\n+                            .is_some()\n+                    };\n+                    let lang_items = tcx.lang_items();\n+                    let found_candidate = candidates.next().is_some()\n+                        || fund_assoc(lang_items.i8_impl())\n+                        || fund_assoc(lang_items.i16_impl())\n+                        || fund_assoc(lang_items.i32_impl())\n+                        || fund_assoc(lang_items.i64_impl())\n+                        || fund_assoc(lang_items.i128_impl())\n+                        || fund_assoc(lang_items.u8_impl())\n+                        || fund_assoc(lang_items.u16_impl())\n+                        || fund_assoc(lang_items.u32_impl())\n+                        || fund_assoc(lang_items.u64_impl())\n+                        || fund_assoc(lang_items.u128_impl())\n+                        || fund_assoc(lang_items.f32_impl())\n+                        || fund_assoc(lang_items.f32_runtime_impl())\n+                        || fund_assoc(lang_items.f64_impl())\n+                        || fund_assoc(lang_items.f64_runtime_impl());\n+                    if let (true, false, SelfSource::MethodCall(expr), true) = (\n                         actual.is_numeric(),\n                         actual.has_concrete_skeleton(),\n                         source,\n-                        candidates.next(),\n+                        found_candidate,\n                     ) {\n                         let mut err = struct_span_err!(\n                             tcx.sess,"}, {"sha": "70e5bc0192086e3ffb8890a47cab7e1e6ff77b00", "filename": "src/test/ui/issues/issue-29181.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2a65a88fc009dfd156a9de446e1bca2747493fd/src%2Ftest%2Fui%2Fissues%2Fissue-29181.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a65a88fc009dfd156a9de446e1bca2747493fd/src%2Ftest%2Fui%2Fissues%2Fissue-29181.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29181.rs?ref=a2a65a88fc009dfd156a9de446e1bca2747493fd", "patch": "@@ -4,4 +4,6 @@ extern crate issue_29181 as foo;\n \n fn main() {\n     0.homura(); //~ ERROR no method named `homura` found\n+    // Issue #47759, detect existing method on the fundamental impl:\n+    let _ = |x: f64| x * 2.0.exp(); //~ ERROR can't call method `exp` on ambiguous numeric type\n }"}, {"sha": "b66dcb88d00625adcb17534f04743d7a578fb3c5", "filename": "src/test/ui/issues/issue-29181.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2a65a88fc009dfd156a9de446e1bca2747493fd/src%2Ftest%2Fui%2Fissues%2Fissue-29181.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2a65a88fc009dfd156a9de446e1bca2747493fd/src%2Ftest%2Fui%2Fissues%2Fissue-29181.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29181.stderr?ref=a2a65a88fc009dfd156a9de446e1bca2747493fd", "patch": "@@ -4,6 +4,18 @@ error[E0599]: no method named `homura` found for type `{integer}` in the current\n LL |     0.homura();\n    |       ^^^^^^ method not found in `{integer}`\n \n-error: aborting due to previous error\n+error[E0689]: can't call method `exp` on ambiguous numeric type `{float}`\n+  --> $DIR/issue-29181.rs:8:30\n+   |\n+LL |     let _ = |x: f64| x * 2.0.exp();\n+   |                              ^^^\n+   |\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+LL |     let _ = |x: f64| x * 2.0_f32.exp();\n+   |                          ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+Some errors have detailed explanations: E0599, E0689.\n+For more information about an error, try `rustc --explain E0599`."}]}