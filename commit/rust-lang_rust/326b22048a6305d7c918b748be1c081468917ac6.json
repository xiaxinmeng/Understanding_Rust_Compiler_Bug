{"sha": "326b22048a6305d7c918b748be1c081468917ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmIyMjA0OGE2MzA1ZDdjOTE4Yjc0OGJlMWMwODE0Njg5MTdhYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-01T18:51:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-01T18:51:38Z"}, "message": "Auto merge of #5400 - flip1995:rustup, r=Manishearth\n\nRustups\n\nr? @Manishearth\n\nchangelog: none", "tree": {"sha": "e65b6f3990c563f9bb6b0a467d477ab8038e558a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65b6f3990c563f9bb6b0a467d477ab8038e558a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326b22048a6305d7c918b748be1c081468917ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326b22048a6305d7c918b748be1c081468917ac6", "html_url": "https://github.com/rust-lang/rust/commit/326b22048a6305d7c918b748be1c081468917ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326b22048a6305d7c918b748be1c081468917ac6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c211cea3e99e04c2980a853b6637de22881b72eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c211cea3e99e04c2980a853b6637de22881b72eb", "html_url": "https://github.com/rust-lang/rust/commit/c211cea3e99e04c2980a853b6637de22881b72eb"}, {"sha": "fcc56fcd1b539ece92a645d664b71b9bf366fb41", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc56fcd1b539ece92a645d664b71b9bf366fb41", "html_url": "https://github.com/rust-lang/rust/commit/fcc56fcd1b539ece92a645d664b71b9bf366fb41"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "2c0a274e969f17f0527fab4c276e7aa18795ec4f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -922,7 +922,7 @@ fn get_indexed_assignments<'a, 'tcx>(\n             .chain(expr.as_ref().into_iter().map(|e| Some(get_assignment(cx, &*e, var))))\n             .filter_map(|op| op)\n             .collect::<Option<Vec<_>>>()\n-            .unwrap_or_else(|| vec![])\n+            .unwrap_or_default()\n     } else {\n         get_assignment(cx, body, var).into_iter().collect()\n     }"}, {"sha": "dc1ff86c0bdcf1f2cbb12f57df3126a39e1aab22", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -437,7 +437,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n         _block: mir::BasicBlock,\n         _func: &mir::Operand<'tcx>,\n         _args: &[mir::Operand<'tcx>],\n-        _return_place: &mir::Place<'tcx>,\n+        _return_place: mir::Place<'tcx>,\n     ) {\n         // Nothing to do when a call returns successfully\n     }"}, {"sha": "33fba7df8d33660c13f03e7d397f586f76b09e63", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -280,6 +280,9 @@ pub fn vec_macro<'e>(cx: &LateContext<'_, '_>, expr: &'e hir::Expr<'_>) -> Optio\n \n                 None\n             }\n+            else if match_def_path(cx, fun_def_id, &paths::VEC_NEW) && args.is_empty() {\n+                Some(VecArgs::Vec(&[]))\n+            }\n             else {\n                 None\n             };"}, {"sha": "d443d63cc18615bfb5d37b22667bb62fcd3af9ce", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -131,5 +131,6 @@ pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n+pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}, {"sha": "8ea03fe42616c3339b09befee410f49e71fcd30a", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -53,9 +53,7 @@ fn or_fun_call() {\n     with_default_type.unwrap_or_default();\n \n     let with_vec = Some(vec![1]);\n-    with_vec.unwrap_or_else(|| vec![]);\n-\n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+    with_vec.unwrap_or_default();\n \n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);"}, {"sha": "7599b945a9137ed63a21cc06ad70aeed0f5f6532", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -55,8 +55,6 @@ fn or_fun_call() {\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n \n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n-\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n "}, {"sha": "96d55771e6cef8c236e26836d2564c0a297a1ca3", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -42,38 +42,38 @@ error: use of `unwrap_or` followed by a call to `default`\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:56:14\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:56:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:61:21\n+  --> $DIR/or_fun_call.rs:59:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:64:19\n+  --> $DIR/or_fun_call.rs:62:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:67:21\n+  --> $DIR/or_fun_call.rs:65:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:70:21\n+  --> $DIR/or_fun_call.rs:68:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:95:35\n+  --> $DIR/or_fun_call.rs:93:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`"}, {"sha": "a739cf7ad814eb8f399734e0acdc8db418244be7", "filename": "tests/ui/unit_arg.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use)]\n+#![allow(unused_braces, clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "d90c49f79de623de06b623664d540e3f2498d4d0", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326b22048a6305d7c918b748be1c081468917ac6/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=326b22048a6305d7c918b748be1c081468917ac6", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use)]\n+#![allow(unused_braces, clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}]}