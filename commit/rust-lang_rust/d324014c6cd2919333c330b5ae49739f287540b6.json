{"sha": "d324014c6cd2919333c330b5ae49739f287540b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMjQwMTRjNmNkMjkxOTMzM2MzMzBiNWFlNDk3MzlmMjg3NTQwYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-01T09:26:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-01T09:26:46Z"}, "message": "auto merge of #7521 : thestinger/rust/vec, r=Aatch\n\ncontinued from #7495", "tree": {"sha": "ffd1b747aa4f278b807b2b6bb5baf8f5773291cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd1b747aa4f278b807b2b6bb5baf8f5773291cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d324014c6cd2919333c330b5ae49739f287540b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d324014c6cd2919333c330b5ae49739f287540b6", "html_url": "https://github.com/rust-lang/rust/commit/d324014c6cd2919333c330b5ae49739f287540b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d324014c6cd2919333c330b5ae49739f287540b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2ad0801ae496f9c16e34724a80f65764fcdd96", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2ad0801ae496f9c16e34724a80f65764fcdd96", "html_url": "https://github.com/rust-lang/rust/commit/6a2ad0801ae496f9c16e34724a80f65764fcdd96"}, {"sha": "5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa", "html_url": "https://github.com/rust-lang/rust/commit/5b40f2ae5b4357a9488bd97da011bd07aebf6aaa"}], "stats": {"total": 117, "additions": 69, "deletions": 48}, "files": [{"sha": "6609a78e0d6e689de0d74ed38333ad39840c7c54", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d324014c6cd2919333c330b5ae49739f287540b6", "patch": "@@ -258,25 +258,43 @@ pub fn malloc_raw_dyn(bcx: block,\n         }\n     };\n \n-    // Grab the TypeRef type of box_ptr_ty.\n-    let box_ptr_ty = mk_fn(bcx.tcx(), t);\n-    let llty = type_of(ccx, box_ptr_ty);\n-\n-    // Get the tydesc for the body:\n-    let static_ti = get_tydesc(ccx, t);\n-    glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n-\n-    // Allocate space:\n-    let tydesc = PointerCast(bcx, static_ti.tydesc, Type::i8p());\n-    let rval = alloca(bcx, Type::i8p());\n-    let bcx = callee::trans_lang_call(\n-        bcx,\n-        langcall,\n-        [tydesc, size],\n-        expr::SaveIn(rval));\n-    let r = rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty));\n-    maybe_set_managed_unique_rc(r.bcx, r.val, heap);\n-    r\n+    if heap == heap_exchange {\n+        // Grab the TypeRef type of box_ptr_ty.\n+        let box_ptr_ty = mk_fn(bcx.tcx(), t);\n+        let llty = type_of(ccx, box_ptr_ty);\n+\n+        let llty_value = type_of::type_of(ccx, t);\n+        let llalign = llalign_of_min(ccx, llty_value);\n+\n+        // Allocate space:\n+        let rval = alloca(bcx, Type::i8p());\n+        let bcx = callee::trans_lang_call(\n+            bcx,\n+            langcall,\n+            [C_i32(llalign as i32), size],\n+            expr::SaveIn(rval));\n+        rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty))\n+    } else {\n+        // Grab the TypeRef type of box_ptr_ty.\n+        let box_ptr_ty = mk_fn(bcx.tcx(), t);\n+        let llty = type_of(ccx, box_ptr_ty);\n+\n+        // Get the tydesc for the body:\n+        let static_ti = get_tydesc(ccx, t);\n+        glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n+\n+        // Allocate space:\n+        let tydesc = PointerCast(bcx, static_ti.tydesc, Type::i8p());\n+        let rval = alloca(bcx, Type::i8p());\n+        let bcx = callee::trans_lang_call(\n+            bcx,\n+            langcall,\n+            [tydesc, size],\n+            expr::SaveIn(rval));\n+        let r = rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty));\n+        maybe_set_managed_unique_rc(r.bcx, r.val, heap);\n+        r\n+    }\n }\n \n // malloc_raw: expects an unboxed type and returns a pointer to"}, {"sha": "f4ea29b5c05e45232c11569e3b622862eee458ac", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=d324014c6cd2919333c330b5ae49739f287540b6", "patch": "@@ -1945,7 +1945,7 @@ pub mod funcs {\n                 #[fast_ffi]\n                 unsafe fn malloc(size: size_t) -> *c_void;\n                 #[fast_ffi]\n-                unsafe fn realloc(p: *c_void, size: size_t) -> *c_void;\n+                unsafe fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n                 #[fast_ffi]\n                 unsafe fn free(p: *c_void);\n                 unsafe fn abort() -> !;"}, {"sha": "1020580d52c008de48056ed273e45fbf93f3517e", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=d324014c6cd2919333c330b5ae49739f287540b6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::{c_char, c_void, size_t, uintptr_t, free, malloc};\n+use libc::{c_char, c_void, size_t, uintptr_t, free, malloc, realloc};\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use unstable::intrinsics::TyDesc;\n use sys::size_of;\n@@ -18,6 +18,7 @@ extern {\n     fn abort();\n }\n \n+#[inline]\n fn get_box_size(body_size: uint, body_align: uint) -> uint {\n     let header_size = size_of::<BoxHeaderRepr>();\n     // FIXME (#2699): This alignment calculation is suspicious. Is it right?\n@@ -27,12 +28,14 @@ fn get_box_size(body_size: uint, body_align: uint) -> uint {\n \n // Rounds |size| to the nearest |alignment|. Invariant: |alignment| is a power\n // of two.\n+#[inline]\n fn align_to(size: uint, align: uint) -> uint {\n     assert!(align != 0);\n     (size + align - 1) & !(align - 1)\n }\n \n /// A wrapper around libc::malloc, aborting on out-of-memory\n+#[inline]\n pub unsafe fn malloc_raw(size: uint) -> *c_void {\n     let p = malloc(size as size_t);\n     if p.is_null() {\n@@ -42,6 +45,17 @@ pub unsafe fn malloc_raw(size: uint) -> *c_void {\n     p\n }\n \n+/// A wrapper around libc::realloc, aborting on out-of-memory\n+#[inline]\n+pub unsafe fn realloc_raw(ptr: *mut c_void, size: uint) -> *mut c_void {\n+    let p = realloc(ptr, size as size_t);\n+    if p.is_null() {\n+        // we need a non-allocating way to print an error here\n+        abort();\n+    }\n+    p\n+}\n+\n // FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n #[cfg(stage0, not(test))]\n #[lang=\"exchange_malloc\"]\n@@ -66,13 +80,8 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n #[cfg(not(stage0), not(test))]\n #[lang=\"exchange_malloc\"]\n #[inline]\n-pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    let td = td as *TyDesc;\n-    let size = size as uint;\n-\n-    assert!(td.is_not_null());\n-\n-    let total_size = get_box_size(size, (*td).align);\n+pub unsafe fn exchange_malloc(align: u32, size: uintptr_t) -> *c_char {\n+    let total_size = get_box_size(size as uint, align as uint);\n     malloc_raw(total_size as uint) as *c_char\n }\n "}, {"sha": "02eadaed5e8937ce3a435eb2baa58cdc50c934c6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d324014c6cd2919333c330b5ae49739f287540b6/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d324014c6cd2919333c330b5ae49739f287540b6", "patch": "@@ -22,12 +22,14 @@ use iterator::{FromIterator, Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n+use libc::c_void;\n use num::Zero;\n use ops::Add;\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n use ptr::RawPtr;\n+use rt::global_heap::realloc_raw;\n use sys;\n use sys::size_of;\n use uint;\n@@ -52,12 +54,6 @@ pub mod rustrt {\n \n     #[abi = \"cdecl\"]\n     pub extern {\n-        // These names are terrible. reserve_shared applies\n-        // to ~[] and reserve_shared_actual applies to @[].\n-        #[fast_ffi]\n-        unsafe fn vec_reserve_shared(t: *TyDesc,\n-                                     v: **raw::VecRepr,\n-                                     n: libc::size_t);\n         #[fast_ffi]\n         unsafe fn vec_reserve_shared_actual(t: *TyDesc,\n                                             v: **raw::VecRepr,\n@@ -1248,13 +1244,16 @@ impl<T> OwnedVector<T> for ~[T] {\n         use managed;\n         if self.capacity() < n {\n             unsafe {\n-                let ptr: **raw::VecRepr = cast::transmute(self);\n+                let ptr: *mut *mut raw::VecRepr = cast::transmute(self);\n                 let td = get_tydesc::<T>();\n                 if ((**ptr).box_header.ref_count ==\n                     managed::raw::RC_MANAGED_UNIQUE) {\n-                    rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);\n+                    rustrt::vec_reserve_shared_actual(td, ptr as **raw::VecRepr, n as libc::size_t);\n                 } else {\n-                    rustrt::vec_reserve_shared(td, ptr, n as libc::size_t);\n+                    let alloc = n * sys::nonzero_size_of::<T>();\n+                    *ptr = realloc_raw(*ptr as *mut c_void, alloc + size_of::<raw::VecRepr>())\n+                           as *mut raw::VecRepr;\n+                    (**ptr).unboxed.alloc = alloc;\n                 }\n             }\n         }\n@@ -1276,12 +1275,15 @@ impl<T> OwnedVector<T> for ~[T] {\n         // Only make the (slow) call into the runtime if we have to\n         if self.capacity() < n {\n             unsafe {\n-                let ptr: **raw::VecRepr = cast::transmute(self);\n+                let ptr: *mut *mut raw::VecRepr = cast::transmute(self);\n                 let td = get_tydesc::<T>();\n                 if contains_managed::<T>() {\n-                    rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);\n+                    rustrt::vec_reserve_shared_actual(td, ptr as **raw::VecRepr, n as libc::size_t);\n                 } else {\n-                    rustrt::vec_reserve_shared(td, ptr, n as libc::size_t);\n+                    let alloc = n * sys::nonzero_size_of::<T>();\n+                    *ptr = realloc_raw(*ptr as *mut c_void, alloc + size_of::<raw::VecRepr>())\n+                           as *mut raw::VecRepr;\n+                    (**ptr).unboxed.alloc = alloc;\n                 }\n             }\n         }"}, {"sha": "17f36e810cd1ab70092ae42eb9066e91840ff448", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d324014c6cd2919333c330b5ae49739f287540b6/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d324014c6cd2919333c330b5ae49739f287540b6/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d324014c6cd2919333c330b5ae49739f287540b6", "patch": "@@ -75,13 +75,6 @@ vec_reserve_shared_actual(type_desc* ty, rust_vec_box** vp,\n     reserve_vec_exact_shared(task, vp, n_elts * ty->size);\n }\n \n-// This is completely misnamed.\n-extern \"C\" CDECL void\n-vec_reserve_shared(type_desc* ty, rust_vec_box** vp,\n-                   size_t n_elts) {\n-    reserve_vec_exact(vp, n_elts * ty->size);\n-}\n-\n extern \"C\" CDECL size_t\n rand_seed_size() {\n     return rng_seed_size();"}, {"sha": "0da04e34f495d9ced6ecbb10efbe33164a19030e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d324014c6cd2919333c330b5ae49739f287540b6/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d324014c6cd2919333c330b5ae49739f287540b6/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d324014c6cd2919333c330b5ae49739f287540b6", "patch": "@@ -55,7 +55,6 @@ rust_get_c_stack\n rust_log_str\n start_task\n vec_reserve_shared_actual\n-vec_reserve_shared\n task_clear_event_reject\n task_wait_event\n task_signal_event"}]}