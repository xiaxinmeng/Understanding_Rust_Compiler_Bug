{"sha": "abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYjE1MTVjNTNkMjA5YmUzZThjMWU5ZTczYzFhOThiYzg2Yjg2OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-17T09:35:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-17T09:35:32Z"}, "message": "Auto merge of #32237 - alexcrichton:rustbuild-make-dist, r=brson\n\nrustbuild: Implement `make dist`\n\nThis commit implements the `make dist` command in the new rustbuild build\nsystem, porting over `dist.mk` and `prepare.mk` into Rust. There's a huge amount\nof complexity between those two files, not all of which is likely justified, so\nthe Rust implementation is *much* smaller.\n\nCurrently the implementation still shells out to rust-installer as well as some\npython scripts, but ideally we'd rewrite it all in the future to not shell out\nand be in Rust proper.", "tree": {"sha": "aef4942e7684b90c0039bd4ef24eedc8d77ff3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef4942e7684b90c0039bd4ef24eedc8d77ff3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "html_url": "https://github.com/rust-lang/rust/commit/abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b765f44a675bb5a5c45efc9e024824aa26700e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b765f44a675bb5a5c45efc9e024824aa26700e0", "html_url": "https://github.com/rust-lang/rust/commit/3b765f44a675bb5a5c45efc9e024824aa26700e0"}, {"sha": "6cc06b36c4da7f21f43d663d6c8a8ee547651cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc06b36c4da7f21f43d663d6c8a8ee547651cde", "html_url": "https://github.com/rust-lang/rust/commit/6cc06b36c4da7f21f43d663d6c8a8ee547651cde"}], "stats": {"total": 360, "additions": 359, "deletions": 1}, "files": [{"sha": "5c39356d214df765081e52a8a565756969b499e0", "filename": "src/bootstrap/build/channel.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fchannel.rs?ref=abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "patch": "@@ -36,19 +36,23 @@ pub fn collect(build: &mut Build) {\n     match &build.config.channel[..] {\n         \"stable\" => {\n             build.release = release_num.to_string();\n+            build.package_vers = build.release.clone();\n             build.unstable_features = false;\n         }\n         \"beta\" => {\n             build.release = format!(\"{}-beta{}\", release_num,\n                                    prerelease_version);\n+            build.package_vers = \"beta\".to_string();\n             build.unstable_features = false;\n         }\n         \"nightly\" => {\n             build.release = format!(\"{}-nightly\", release_num);\n+            build.package_vers = \"nightly\".to_string();\n             build.unstable_features = true;\n         }\n         _ => {\n             build.release = format!(\"{}-dev\", release_num);\n+            build.package_vers = build.release.clone();\n             build.unstable_features = true;\n         }\n     }"}, {"sha": "855528ea4409fe383df5e3b44a20f7db947e9935", "filename": "src/bootstrap/build/dist.rs", "status": "added", "additions": 290, "deletions": 0, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdist.rs?ref=abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "patch": "@@ -0,0 +1,290 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fs::{self, File};\n+use std::io::Write;\n+use std::path::{PathBuf, Path};\n+use std::process::Command;\n+\n+use build::{Build, Compiler};\n+use build::util::{cp_r, libdir, is_dylib};\n+\n+fn package_vers(build: &Build) -> &str {\n+    match &build.config.channel[..] {\n+        \"stable\" => &build.release,\n+        \"beta\" => \"beta\",\n+        \"nightly\" => \"nightly\",\n+        _ => &build.release,\n+    }\n+}\n+\n+fn distdir(build: &Build) -> PathBuf {\n+    build.out.join(\"dist\")\n+}\n+\n+fn tmpdir(build: &Build) -> PathBuf {\n+    build.out.join(\"tmp/dist\")\n+}\n+\n+pub fn docs(build: &Build, stage: u32, host: &str) {\n+    println!(\"Dist docs stage{} ({})\", stage, host);\n+    let name = format!(\"rust-docs-{}\", package_vers(build));\n+    let image = tmpdir(build).join(format!(\"{}-{}-image\", name, name));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"share/doc/rust/html\");\n+    t!(fs::create_dir_all(&dst));\n+    let src = build.out.join(host).join(\"doc\");\n+    cp_r(&src, &dst);\n+\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust-Documentation\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=Rust-documentation-is-installed.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--package-name={}\", name))\n+       .arg(\"--component-name=rust-docs\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+       .arg(\"--bulk-dirs=share/doc/rust/html\");\n+    build.run(&mut cmd);\n+    t!(fs::remove_dir_all(&image));\n+\n+    // As part of this step, *also* copy the docs directory to a directory which\n+    // buildbot typically uploads.\n+    let dst = distdir(build).join(\"doc\").join(&build.package_vers);\n+    t!(fs::create_dir_all(&dst));\n+    cp_r(&src, &dst);\n+}\n+\n+pub fn mingw(build: &Build, host: &str) {\n+    println!(\"Dist mingw ({})\", host);\n+    let name = format!(\"rust-mingw-{}\", package_vers(build));\n+    let image = tmpdir(build).join(format!(\"{}-{}-image\", name, host));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    // The first argument to the script is a \"temporary directory\" which is just\n+    // thrown away (this contains the runtime DLLs included in the rustc package\n+    // above) and the second argument is where to place all the MinGW components\n+    // (which is what we want).\n+    //\n+    // FIXME: this script should be rewritten into Rust\n+    let mut cmd = Command::new(\"python\");\n+    cmd.arg(build.src.join(\"src/etc/make-win-dist.py\"))\n+       .arg(tmpdir(build))\n+       .arg(&image)\n+       .arg(host);\n+    build.run(&mut cmd);\n+\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust-MinGW\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=Rust-MinGW-is-installed.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--package-name={}-{}\", name, host))\n+       .arg(\"--component-name=rust-mingw\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+    t!(fs::remove_dir_all(&image));\n+}\n+\n+pub fn rustc(build: &Build, stage: u32, host: &str) {\n+    println!(\"Dist rustc stage{} ({})\", stage, host);\n+    let name = format!(\"rustc-{}\", package_vers(build));\n+    let image = tmpdir(build).join(format!(\"{}-{}-image\", name, host));\n+    let _ = fs::remove_dir_all(&image);\n+    let overlay = tmpdir(build).join(format!(\"{}-{}-overlay\", name, host));\n+    let _ = fs::remove_dir_all(&overlay);\n+\n+    // Prepare the rustc \"image\", what will actually end up getting installed\n+    prepare_image(build, stage, host, &image);\n+\n+    // Prepare the overlay which is part of the tarball but won't actually be\n+    // installed\n+    t!(fs::create_dir_all(&overlay));\n+    let cp = |file: &str| {\n+        install(&build.src.join(file), &overlay, 0o644);\n+    };\n+    cp(\"COPYRIGHT\");\n+    cp(\"LICENSE-APACHE\");\n+    cp(\"LICENSE-MIT\");\n+    cp(\"README.md\");\n+    // tiny morsel of metadata is used by rust-packaging\n+    let version = &build.version;\n+    t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n+    // On MinGW we've got a few runtime DLL dependencies that we need to\n+    // include. The first argument to this script is where to put these DLLs\n+    // (the image we're creating), and the second argument is a junk directory\n+    // to ignore all other MinGW stuff the script creates.\n+    //\n+    // On 32-bit MinGW we're always including a DLL which needs some extra\n+    // licenses to distribute. On 64-bit MinGW we don't actually distribute\n+    // anything requiring us to distribute a license, but it's likely the\n+    // install will *also* include the rust-mingw package, which also needs\n+    // licenses, so to be safe we just include it here in all MinGW packages.\n+    //\n+    // FIXME: this script should be rewritten into Rust\n+    if host.contains(\"pc-windows-gnu\") {\n+        let mut cmd = Command::new(\"python\");\n+        cmd.arg(build.src.join(\"src/etc/make-win-dist.py\"))\n+           .arg(&image)\n+           .arg(tmpdir(build))\n+           .arg(host);\n+        build.run(&mut cmd);\n+\n+        let dst = image.join(\"share/doc\");\n+        t!(fs::create_dir_all(&dst));\n+        cp_r(&build.src.join(\"src/etc/third-party\"), &dst);\n+    }\n+\n+    // Finally, wrap everything up in a nice tarball!\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=Rust-is-ready-to-roll.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(format!(\"--package-name={}-{}\", name, host))\n+       .arg(\"--component-name=rustc\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+    t!(fs::remove_dir_all(&image));\n+    t!(fs::remove_dir_all(&overlay));\n+\n+    fn prepare_image(build: &Build, stage: u32, host: &str, image: &Path) {\n+        let src = build.sysroot(&Compiler::new(stage, host));\n+        let libdir = libdir(host);\n+\n+        // Copy rustc/rustdoc binaries\n+        t!(fs::create_dir_all(image.join(\"bin\")));\n+        cp_r(&src.join(\"bin\"), &image.join(\"bin\"));\n+\n+        // Copy runtime DLLs needed by the compiler\n+        if libdir != \"bin\" {\n+            t!(fs::create_dir_all(image.join(libdir)));\n+            for entry in t!(src.join(libdir).read_dir()).map(|e| t!(e)) {\n+                let name = entry.file_name();\n+                if let Some(s) = name.to_str() {\n+                    if is_dylib(s) {\n+                        install(&entry.path(), &image.join(libdir), 0o644);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Man pages\n+        t!(fs::create_dir_all(image.join(\"share/man/man1\")));\n+        cp_r(&build.src.join(\"man\"), &image.join(\"share/man/man1\"));\n+\n+        // Debugger scripts\n+        let cp_debugger_script = |file: &str| {\n+            let dst = image.join(\"lib/rustlib/etc\");\n+            t!(fs::create_dir_all(&dst));\n+            install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n+        };\n+        if host.contains(\"windows\") {\n+            // no debugger scripts\n+        } else if host.contains(\"darwin\") {\n+            // lldb debugger scripts\n+            install(&build.src.join(\"src/etc/rust-lldb\"), &image.join(\"bin\"),\n+                    0o755);\n+\n+            cp_debugger_script(\"lldb_rust_formatters.py\");\n+            cp_debugger_script(\"debugger_pretty_printers_common.py\");\n+        } else {\n+            // gdb debugger scripts\n+            install(&build.src.join(\"src/etc/rust-gdb\"), &image.join(\"bin\"),\n+                    0o755);\n+\n+            cp_debugger_script(\"gdb_load_rust_pretty_printers.py\");\n+            cp_debugger_script(\"gdb_rust_pretty_printing.py\");\n+            cp_debugger_script(\"debugger_pretty_printers_common.py\");\n+        }\n+\n+        // Misc license info\n+        let cp = |file: &str| {\n+            install(&build.src.join(file), &image.join(\"share/doc/rust\"), 0o644);\n+        };\n+        t!(fs::create_dir_all(&image.join(\"share/doc/rust\")));\n+        cp(\"COPYRIGHT\");\n+        cp(\"LICENSE-APACHE\");\n+        cp(\"LICENSE-MIT\");\n+        cp(\"README.md\");\n+    }\n+}\n+\n+pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n+    println!(\"Dist std stage{} ({} -> {})\", compiler.stage, compiler.host,\n+             target);\n+    let name = format!(\"rust-std-{}\", package_vers(build));\n+    let image = tmpdir(build).join(format!(\"{}-{}-image\", name, target));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"lib/rustlib\").join(target);\n+    t!(fs::create_dir_all(&dst));\n+    let src = build.sysroot(compiler).join(\"lib/rustlib\");\n+    cp_r(&src.join(target), &dst);\n+\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=std-is-standing-at-the-ready.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(format!(\"--component-name=rust-std-{}\", target))\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+    t!(fs::remove_dir_all(&image));\n+}\n+\n+fn install(src: &Path, dstdir: &Path, perms: u32) {\n+    let dst = dstdir.join(src.file_name().unwrap());\n+    t!(fs::copy(src, &dst));\n+    chmod(&dst, perms);\n+}\n+\n+#[cfg(unix)]\n+fn chmod(path: &Path, perms: u32) {\n+    use std::os::unix::fs::*;\n+    t!(fs::set_permissions(path, fs::Permissions::from_mode(perms)));\n+}\n+#[cfg(windows)]\n+fn chmod(_path: &Path, _perms: u32) {}\n+\n+// We have to run a few shell scripts, which choke quite a bit on both `\\`\n+// characters and on `C:\\` paths, so normalize both of them away.\n+fn sanitize_sh(path: &Path) -> String {\n+    let path = path.to_str().unwrap().replace(\"\\\\\", \"/\");\n+    return change_drive(&path).unwrap_or(path);\n+\n+    fn change_drive(s: &str) -> Option<String> {\n+        let mut ch = s.chars();\n+        let drive = ch.next().unwrap_or('C');\n+        if ch.next() != Some(':') {\n+            return None\n+        }\n+        if ch.next() != Some('/') {\n+            return None\n+        }\n+        Some(format!(\"/{}/{}\", drive, &s[drive.len_utf8() + 2..]))\n+    }\n+}"}, {"sha": "d5b7f0e96aa6fefb9566d8b00be24b81f0578e25", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "patch": "@@ -34,6 +34,7 @@ mod check;\n mod clean;\n mod compile;\n mod config;\n+mod dist;\n mod doc;\n mod flags;\n mod native;\n@@ -76,6 +77,7 @@ pub struct Build {\n     short_ver_hash: Option<String>,\n     ver_date: Option<String>,\n     version: String,\n+    package_vers: String,\n     bootstrap_key: String,\n \n     // Runtime state filled in later on\n@@ -121,6 +123,7 @@ impl Build {\n             ver_date: None,\n             version: String::new(),\n             bootstrap_key: String::new(),\n+            package_vers: String::new(),\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             compiler_rt_built: RefCell::new(HashMap::new()),\n@@ -208,6 +211,12 @@ impl Build {\n                     check::linkcheck(self, stage, target.target);\n                 }\n \n+                DistDocs { stage } => dist::docs(self, stage, target.target),\n+                DistMingw { _dummy } => dist::mingw(self, target.target),\n+                DistRustc { stage } => dist::rustc(self, stage, target.target),\n+                DistStd { compiler } => dist::std(self, &compiler, target.target),\n+\n+                Dist { .. } |\n                 Doc { .. } | // pseudo-steps\n                 Check { .. } => {}\n             }"}, {"sha": "2fd961003a412359e3b1b1627680325351c505ba", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "patch": "@@ -73,6 +73,13 @@ macro_rules! targets {\n             // target to depend on a bunch of others.\n             (check, Check { stage: u32, compiler: Compiler<'a> }),\n             (check_linkcheck, CheckLinkcheck { stage: u32 }),\n+\n+            // Distribution targets, creating tarballs\n+            (dist, Dist { stage: u32 }),\n+            (dist_docs, DistDocs { stage: u32 }),\n+            (dist_mingw, DistMingw { _dummy: () }),\n+            (dist_rustc, DistRustc { stage: u32 }),\n+            (dist_std, DistStd { compiler: Compiler<'a> }),\n         }\n     }\n }\n@@ -279,7 +286,8 @@ impl<'a> Step<'a> {\n                      self.doc_error_index(stage)]\n             }\n             Source::Check { stage, compiler: _ } => {\n-                vec![self.check_linkcheck(stage)]\n+                vec![self.check_linkcheck(stage),\n+                     self.dist(stage)]\n             }\n             Source::CheckLinkcheck { stage } => {\n                 vec![self.tool_linkchecker(stage), self.doc(stage)]\n@@ -292,6 +300,34 @@ impl<'a> Step<'a> {\n             Source::ToolRustbook { stage } => {\n                 vec![self.librustc(self.compiler(stage))]\n             }\n+\n+            Source::DistDocs { stage } => vec![self.doc(stage)],\n+            Source::DistMingw { _dummy: _ } => Vec::new(),\n+            Source::DistRustc { stage } => {\n+                vec![self.rustc(stage)]\n+            }\n+            Source::DistStd { compiler } => {\n+                vec![self.libstd(compiler)]\n+            }\n+\n+            Source::Dist { stage } => {\n+                let mut base = Vec::new();\n+                base.push(self.dist_docs(stage));\n+\n+                for host in build.config.host.iter() {\n+                    let host = self.target(host);\n+                    base.push(host.dist_rustc(stage));\n+                    if host.target.contains(\"windows-gnu\") {\n+                        base.push(host.dist_mingw(()));\n+                    }\n+\n+                    let compiler = self.compiler(stage);\n+                    for target in build.config.target.iter() {\n+                        base.push(self.target(target).dist_std(compiler));\n+                    }\n+                }\n+                return base\n+            }\n         }\n     }\n }"}, {"sha": "36f4269a2602c110088991111ce2bd9f71ed501b", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "patch": "@@ -38,3 +38,7 @@ standalone-docs:\n \t$(Q)$(BOOTSTRAP) --step doc-standalone\n check:\n \t$(Q)$(BOOTSTRAP) --step check\n+dist:\n+\t$(Q)$(BOOTSTRAP) --step dist\n+\n+.PHONY: dist"}, {"sha": "03e7aaca0f78c1d8f80f7fa339543bccb07ed32c", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/abb1515c53d209be3e8c1e9e73c1a98bc86b8692/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=abb1515c53d209be3e8c1e9e73c1a98bc86b8692", "patch": "@@ -78,6 +78,7 @@ dependencies = [\n  \"rbml 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n+ \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_front 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n@@ -111,6 +112,15 @@ dependencies = [\n  \"syntax 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_const_eval\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log 0.0.0\",\n+ \"serialize 0.0.0\",\n+ \"syntax 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n@@ -187,6 +197,7 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n+ \"rustc_const_eval 0.0.0\",\n  \"rustc_front 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -201,6 +212,7 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n+ \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_front 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -230,6 +242,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n+ \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_front 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n@@ -270,6 +283,7 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n+ \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_front 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n@@ -288,6 +302,7 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n+ \"rustc_const_eval 0.0.0\",\n  \"rustc_front 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n  \"syntax 0.0.0\","}]}