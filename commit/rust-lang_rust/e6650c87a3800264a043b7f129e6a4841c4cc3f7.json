{"sha": "e6650c87a3800264a043b7f129e6a4841c4cc3f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NjUwYzg3YTM4MDAyNjRhMDQzYjdmMTI5ZTZhNDg0MWM0Y2MzZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-29T14:41:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-29T14:41:48Z"}, "message": "auto merge of #10142 : pythonesque/rust/issue-8263, r=catamorphism\n\nThis is, I think, the minimal change required.  I would have included a test but as far as I can tell there is currently no way to precisely test that the span for an error underlines the correct word.  I did verify it manually.", "tree": {"sha": "24ae6ffd80bed67e40373a1b0163c5b401e59c20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ae6ffd80bed67e40373a1b0163c5b401e59c20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6650c87a3800264a043b7f129e6a4841c4cc3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6650c87a3800264a043b7f129e6a4841c4cc3f7", "html_url": "https://github.com/rust-lang/rust/commit/e6650c87a3800264a043b7f129e6a4841c4cc3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6650c87a3800264a043b7f129e6a4841c4cc3f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc766efd16231e521365a29a73bca7f2c4178e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc766efd16231e521365a29a73bca7f2c4178e9c", "html_url": "https://github.com/rust-lang/rust/commit/fc766efd16231e521365a29a73bca7f2c4178e9c"}, {"sha": "a71665798bdd629ff8d328ef325723b79a2542a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71665798bdd629ff8d328ef325723b79a2542a7", "html_url": "https://github.com/rust-lang/rust/commit/a71665798bdd629ff8d328ef325723b79a2542a7"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "6317e3a1abc13f74e7a87adde563a1cbddf35374", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -420,7 +420,7 @@ impl VisitContext {\n                     // specified and (2) have a type that\n                     // moves-by-default:\n                     let consume_with = with_fields.iter().any(|tf| {\n-                        !fields.iter().any(|f| f.ident.name == tf.ident.name) &&\n+                        !fields.iter().any(|f| f.ident.node.name == tf.ident.name) &&\n                             ty::type_moves_by_default(self.tcx, tf.mt.ty)\n                     });\n "}, {"sha": "70aa05848f3669207b0e4f336082fc64f0a2f8a7", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -716,15 +716,15 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n                 match ty::get(ty::expr_ty(self.tcx, expr)).sty {\n                     ty::ty_struct(id, _) => {\n                         for field in (*fields).iter() {\n-                            self.check_field(expr.span, id, field.ident);\n+                            self.check_field(expr.span, id, field.ident.node);\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         match self.tcx.def_map.get_copy(&expr.id) {\n                             ast::DefVariant(_, variant_id, _) => {\n                                 for field in fields.iter() {\n                                     self.check_field(expr.span, variant_id,\n-                                                     field.ident);\n+                                                     field.ident.node);\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(expr.span,"}, {"sha": "9f497afb1213f720019fc9366efd0112777f2876", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -508,7 +508,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext,\n                   |discr, field_tys| {\n                   let cs = field_tys.iter().enumerate()\n                       .map(|(ix, &field_ty)| {\n-                      match fs.iter().find(|f| field_ty.ident.name == f.ident.name) {\n+                      match fs.iter().find(|f| field_ty.ident.name == f.ident.node.name) {\n                           Some(f) => const_expr(cx, (*f).expr),\n                           None => {\n                               match base_val {"}, {"sha": "1c856f04b0684c823fe0c7bb4a194113375a6b08", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -1211,7 +1211,7 @@ fn trans_rec_or_struct(bcx: @mut Block,\n         let numbered_fields = do fields.map |field| {\n             let opt_pos =\n                 field_tys.iter().position(|field_ty|\n-                                          field_ty.ident.name == field.ident.name);\n+                                          field_ty.ident.name == field.ident.node.name);\n             match opt_pos {\n                 Some(i) => {\n                     need_base[i] = false;"}, {"sha": "d71aa77668926b7a415dcb194708415cca31a9ce", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -2009,6 +2009,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n     }\n \n     fn check_struct_or_variant_fields(fcx: @mut FnCtxt,\n+                                      struct_ty: ty::t,\n                                       span: Span,\n                                       class_id: ast::DefId,\n                                       node_id: ast::NodeId,\n@@ -2030,28 +2031,30 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         for field in ast_fields.iter() {\n             let mut expected_field_type = ty::mk_err();\n \n-            let pair = class_field_map.find(&field.ident.name).map(|x| *x);\n+            let pair = class_field_map.find(&field.ident.node.name).map(|x| *x);\n             match pair {\n                 None => {\n-                    tcx.sess.span_err(\n-                        field.span,\n-                        format!(\"structure has no field named `{}`\",\n-                             tcx.sess.str_of(field.ident)));\n+                    fcx.type_error_message(\n+                      field.ident.span,\n+                      |actual| {\n+                          format!(\"structure `{}` has no field named `{}`\",\n+                                  actual, tcx.sess.str_of(field.ident.node))\n+                    }, struct_ty, None);\n                     error_happened = true;\n                 }\n                 Some((_, true)) => {\n                     tcx.sess.span_err(\n-                        field.span,\n+                        field.ident.span,\n                         format!(\"field `{}` specified more than once\",\n-                             tcx.sess.str_of(field.ident)));\n+                             tcx.sess.str_of(field.ident.node)));\n                     error_happened = true;\n                 }\n                 Some((field_id, false)) => {\n                     expected_field_type =\n                         ty::lookup_field_type(\n                             tcx, class_id, field_id, &substitutions);\n                     class_field_map.insert(\n-                        field.ident.name, (field_id, true));\n+                        field.ident.node.name, (field_id, true));\n                     fields_found += 1;\n                 }\n             }\n@@ -2161,6 +2164,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         // Look up and check the fields.\n         let class_fields = ty::lookup_struct_fields(tcx, class_id);\n         check_struct_or_variant_fields(fcx,\n+                                           struct_type,\n                                            span,\n                                            class_id,\n                                            id,\n@@ -2248,6 +2252,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         // Look up and check the enum variant fields.\n         let variant_fields = ty::lookup_struct_fields(tcx, variant_id);\n         check_struct_or_variant_fields(fcx,\n+                                       enum_type,\n                                        span,\n                                        variant_id,\n                                        id,"}, {"sha": "3467e1aaadc392f6f900995392cbd339abb97f7b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -471,11 +471,13 @@ pub struct Arm {\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub struct Field {\n-    ident: Ident,\n+    ident: SpannedIdent,\n     expr: @Expr,\n     span: Span,\n }\n \n+pub type SpannedIdent = Spanned<Ident>;\n+\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum BlockCheckMode {\n     DefaultBlock,"}, {"sha": "273ce180a5f1dfccb33caba72a83b1fdbbac134a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -529,7 +529,7 @@ impl AstBuilder for @ExtCtxt {\n         self.expr(b.span, ast::ExprBlock(b))\n     }\n     fn field_imm(&self, span: Span, name: Ident, e: @ast::Expr) -> ast::Field {\n-        ast::Field { ident: name, expr: e, span: span }\n+        ast::Field { ident: respan(span, name), expr: e, span: span }\n     }\n     fn expr_struct(&self, span: Span, path: ast::Path, fields: ~[ast::Field]) -> @ast::Expr {\n         self.expr(span, ast::ExprStruct(path, fields, None))"}, {"sha": "fddf674a846d8336ce30c85a7eb5ad541a12191a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -10,7 +10,7 @@\n \n use ast::*;\n use ast;\n-use codemap::{Span, Spanned};\n+use codemap::{respan, Span, Spanned};\n use parse::token;\n use opt_vec::OptVec;\n \n@@ -551,7 +551,7 @@ fn fold_struct_field<T:ast_fold>(f: @struct_field, fld: &T) -> @struct_field {\n \n fn fold_field_<T:ast_fold>(field: Field, folder: &T) -> Field {\n     ast::Field {\n-        ident: folder.fold_ident(field.ident),\n+        ident: respan(field.ident.span, folder.fold_ident(field.ident.node)),\n         expr: folder.fold_expr(field.expr),\n         span: folder.new_span(field.span),\n     }\n@@ -797,7 +797,8 @@ pub fn noop_fold_expr<T:ast_fold>(e: @ast::Expr, folder: &T) -> @ast::Expr {\n                          folder.fold_expr(er))\n         }\n         ExprField(el, id, ref tys) => {\n-            ExprField(folder.fold_expr(el), folder.fold_ident(id),\n+            ExprField(folder.fold_expr(el),\n+                      folder.fold_ident(id),\n                       tys.map(|x| folder.fold_ty(x)))\n         }\n         ExprIndex(callee_id, el, er) => {"}, {"sha": "8b399266676f6fe30e771028db2dfd9fb17b7497", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -1549,10 +1549,11 @@ impl Parser {\n     pub fn parse_field(&self) -> Field {\n         let lo = self.span.lo;\n         let i = self.parse_ident();\n+        let hi = self.last_span.hi;\n         self.expect(&token::COLON);\n         let e = self.parse_expr();\n         ast::Field {\n-            ident: i,\n+            ident: spanned(lo, hi, i),\n             expr: e,\n             span: mk_sp(lo, e.span.hi),\n         }"}, {"sha": "f3090c7dd1661c6e2782e2925de4807f64092466", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -1111,7 +1111,7 @@ pub fn print_call_post(s: @ps,\n pub fn print_expr(s: @ps, expr: &ast::Expr) {\n     fn print_field(s: @ps, field: &ast::Field) {\n         ibox(s, indent_unit);\n-        print_ident(s, field.ident);\n+        print_ident(s, field.ident.node);\n         word_space(s, \":\");\n         print_expr(s, field.expr);\n         end(s);"}, {"sha": "b63db7c5a30e5cb64b45783b61172cdae68e6d56", "filename": "src/test/compile-fail/issue-4736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -11,5 +11,5 @@\n struct NonCopyable(());\n \n fn main() {\n-    let z = NonCopyable{ p: () }; //~ ERROR structure has no field named `p`\n+    let z = NonCopyable{ p: () }; //~ ERROR structure `NonCopyable` has no field named `p`\n }"}, {"sha": "de58b5d110e5f19f0c80d19be29dcfa852197e65", "filename": "src/test/compile-fail/struct-fields-too-many.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6650c87a3800264a043b7f129e6a4841c4cc3f7/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs?ref=e6650c87a3800264a043b7f129e6a4841c4cc3f7", "patch": "@@ -15,6 +15,6 @@ struct BuildData {\n fn main() {\n     let foo = BuildData {\n         foo: 0,\n-        bar: 0 //~ ERROR structure has no field named `bar`\n+        bar: 0 //~ ERROR structure `BuildData` has no field named `bar`\n     };\n }"}]}