{"sha": "19b84088d76b8ded63cbaf12991213f4f437e689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Yjg0MDg4ZDc2YjhkZWQ2M2NiYWYxMjk5MTIxM2Y0ZjQzN2U2ODk=", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2016-09-09T21:00:23Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2016-09-09T21:28:19Z"}, "message": "Add s390x support\n\nThis adds support for building the Rust compiler and standard\nlibrary for s390x-linux, allowing a full cross-bootstrap sequence\nto complete.  This includes:\n\n- Makefile/configure changes to allow native s390x builds\n- Full Rust compiler support for the s390x C ABI\n  (only the non-vector ABI is supported at this point)\n- Port of the standard library to s390x\n- Update the liblibc submodule to a version including s390x support\n- Testsuite fixes to allow clean \"make check\" on s390x\n\nCaveats:\n\n- Resets base cpu to \"z10\" to bring support in sync with the default\n  behaviour of other compilers on the platforms.  (Usually, upstream\n  supports all older processors; a distribution build may then chose\n  to require a more recent base version.)  (Also, using zEC12 causes\n  failures in the valgrind tests since valgrind doesn't fully support\n  this CPU yet.)\n\n- z13 vector ABI is not yet supported.  To ensure compatible code\n  generation, the -vector feature is passed to LLVM.  Note that this\n  means that even when compiling for z13, no vector instructions\n  will be used.  In the future, support for the vector ABI should be\n  added (this will require common code support for different ABIs\n  that need different data_layout strings on the same platform).\n\n- Two test cases are (temporarily) ignored on s390x to allow passing\n  the test suite.  The underlying issues still need to be fixed:\n  * debuginfo/simd.rs fails because of incorrect debug information.\n    This seems to be a LLVM bug (also seen with C code).\n  * run-pass/union/union-basic.rs simply seems to be incorrect for\n    all big-endian platforms.\n\nSigned-off-by: Ulrich Weigand <ulrich.weigand@de.ibm.com>", "tree": {"sha": "5e43cd51001ccb22cc26076c518fd2fbacad0591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e43cd51001ccb22cc26076c518fd2fbacad0591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b84088d76b8ded63cbaf12991213f4f437e689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b84088d76b8ded63cbaf12991213f4f437e689", "html_url": "https://github.com/rust-lang/rust/commit/19b84088d76b8ded63cbaf12991213f4f437e689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b84088d76b8ded63cbaf12991213f4f437e689/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f40f850e2546c2c187514e3d61d17544ba433f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f40f850e2546c2c187514e3d61d17544ba433f", "html_url": "https://github.com/rust-lang/rust/commit/f1f40f850e2546c2c187514e3d61d17544ba433f"}], "stats": {"total": 267, "additions": 253, "deletions": 14}, "files": [{"sha": "792a1ed9c3cbda614099e063991b08a48fb3016d", "filename": "configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/configure", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -524,6 +524,10 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=powerpc64le\n         ;;\n \n+    s390x)\n+        CFG_CPUTYPE=s390x\n+        ;;\n+\n     x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;"}, {"sha": "eb1cb2329c4f35412029638a3d252ab4b0398c93", "filename": "mk/cfg/s390x-unknown-linux-gnu.mk", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -1 +1,24 @@\n-# rustbuild-only target\n+# s390x-unknown-linux-gnu configuration\n+CROSS_PREFIX_s390x-unknown-linux-gnu=s390x-linux-gnu-\n+CC_s390x-unknown-linux-gnu=$(CC)\n+CXX_s390x-unknown-linux-gnu=$(CXX)\n+CPP_s390x-unknown-linux-gnu=$(CPP)\n+AR_s390x-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_s390x-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_s390x-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_s390x-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_s390x-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_s390x-unknown-linux-gnu := -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_s390x-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_s390x-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_s390x-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_s390x-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_s390x-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_s390x-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_s390x-unknown-linux-gnu =\n+CFG_WINDOWSY_s390x-unknown-linux-gnu :=\n+CFG_UNIXY_s390x-unknown-linux-gnu := 1\n+CFG_LDPATH_s390x-unknown-linux-gnu :=\n+CFG_RUN_s390x-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_s390x-unknown-linux-gnu=$(call CFG_RUN_s390x-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_s390x-unknown-linux-gnu := s390x-unknown-linux-gnu"}, {"sha": "5bbf1c35e0dd41f0b60e6f46d0ec3f0003b050df", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -78,7 +78,8 @@ const MIN_ALIGN: usize = 8;\n               target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n               target_arch = \"powerpc64\",\n-              target_arch = \"mips64\")))]\n+              target_arch = \"mips64\",\n+              target_arch = \"s390x\")))]\n const MIN_ALIGN: usize = 16;\n \n // MALLOCX_ALIGN(a) macro"}, {"sha": "01407d1acd2ecda82db51af61f7f50925cc91a22", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -33,7 +33,8 @@\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n-              target_arch = \"mips64\")))]\n+              target_arch = \"mips64\",\n+              target_arch = \"s390x\")))]\n const MIN_ALIGN: usize = 16;\n \n #[no_mangle]"}, {"sha": "d4f6a19c55a03e3f9f6fb7377911b37ed807eb6c", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -1 +1 @@\n-Subproject commit 49d64cae0699ed9d9ed84810d737a26b0b519da8\n+Subproject commit d4f6a19c55a03e3f9f6fb7377911b37ed807eb6c"}, {"sha": "33b24fbaa26594d5326c66981110c00aa9966208", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -130,6 +130,9 @@ const UNWIND_DATA_REG: (i32, i32) = (4, 5); // A0, A1\n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n const UNWIND_DATA_REG: (i32, i32) = (3, 4); // R3, R4 / X3, X4\n \n+#[cfg(target_arch = \"s390x\")]\n+const UNWIND_DATA_REG: (i32, i32) = (6, 7); // R6, R7\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "79f2d290e3760431396e1946015825a2d860e08b", "filename": "src/librustc_back/target/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -12,8 +12,12 @@ use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n-    // NOTE(zEC12) matches C toolchain\n-    base.cpu = \"zEC12\".to_string();\n+    // z10 is the oldest CPU supported by LLVM\n+    base.cpu = \"z10\".to_string();\n+    // FIXME: The data_layout string below and the ABI implementation in\n+    // cabi_s390x.rs are for now hard-coded to assume the no-vector ABI.\n+    // Pass the -vector feature string to LLVM to respect this assumption.\n+    base.features = \"-vector\".to_string();\n     base.max_atomic_width = 64;\n \n     Ok(Target {"}, {"sha": "1a6c34b55af650b52426d0bd0a6ad0362ad26557", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -20,6 +20,7 @@ use cabi_arm;\n use cabi_aarch64;\n use cabi_powerpc;\n use cabi_powerpc64;\n+use cabi_s390x;\n use cabi_mips;\n use cabi_mips64;\n use cabi_asmjs;\n@@ -301,6 +302,9 @@ impl FnType {\n         let win_x64_gnu = target.target_os == \"windows\"\n                        && target.arch == \"x86_64\"\n                        && target.target_env == \"gnu\";\n+        let linux_s390x = target.target_os == \"linux\"\n+                       && target.arch == \"s390x\"\n+                       && target.target_env == \"gnu\";\n         let rust_abi = match abi {\n             RustIntrinsic | PlatformIntrinsic | Rust | RustCall => true,\n             _ => false\n@@ -326,7 +330,9 @@ impl FnType {\n                 if llsize_of_real(ccx, arg.ty) == 0 {\n                     // For some forsaken reason, x86_64-pc-windows-gnu\n                     // doesn't ignore zero-sized struct arguments.\n-                    if is_return || rust_abi || !win_x64_gnu {\n+                    // The same is true for s390x-unknown-linux-gnu.\n+                    if is_return || rust_abi ||\n+                       (!win_x64_gnu && !linux_s390x) {\n                         arg.ignore();\n                     }\n                 }\n@@ -511,6 +517,7 @@ impl FnType {\n             \"mips64\" => cabi_mips64::compute_abi_info(ccx, self),\n             \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, self),\n             \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, self),\n+            \"s390x\" => cabi_s390x::compute_abi_info(ccx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }"}, {"sha": "19404b667e1fc953c92305327a24892a6af8d3f3", "filename": "src/librustc_trans/cabi_s390x.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_trans%2Fcabi_s390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_trans%2Fcabi_s390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_s390x.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -0,0 +1,150 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: The assumes we're using the non-vector ABI, i.e. compiling\n+// for a pre-z13 machine or using -mno-vx.\n+\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n+use abi::{FnType, ArgType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+use std::cmp;\n+\n+fn align_up_to(off: usize, a: usize) -> usize {\n+    return (off + a - 1) / a * a;\n+}\n+\n+fn align(off: usize, ty: Type) -> usize {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                1\n+            } else {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+            }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        Vector => ty_size(ty),\n+        _ => bug!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => bug!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if is_reg_ty(ret.ty) {\n+        ret.extend_integer_width_to(64);\n+    } else {\n+        ret.make_indirect(ccx);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n+    if arg.ty.kind() == Struct {\n+        fn is_single_fp_element(tys: &[Type]) -> bool {\n+            if tys.len() != 1 {\n+                return false;\n+            }\n+            match tys[0].kind() {\n+                Float | Double => true,\n+                Struct => is_single_fp_element(&tys[0].field_types()),\n+                _ => false\n+            }\n+        }\n+\n+        if is_single_fp_element(&arg.ty.field_types()) {\n+            match ty_size(arg.ty) {\n+                4 => arg.cast = Some(Type::f32(ccx)),\n+                8 => arg.cast = Some(Type::f64(ccx)),\n+                _ => arg.make_indirect(ccx)\n+            }\n+        } else {\n+            match ty_size(arg.ty) {\n+                1 => arg.cast = Some(Type::i8(ccx)),\n+                2 => arg.cast = Some(Type::i16(ccx)),\n+                4 => arg.cast = Some(Type::i32(ccx)),\n+                8 => arg.cast = Some(Type::i64(ccx)),\n+                _ => arg.make_indirect(ccx)\n+            }\n+        }\n+        return;\n+    }\n+\n+    if is_reg_ty(arg.ty) {\n+        arg.extend_integer_width_to(64);\n+    } else {\n+        arg.make_indirect(ccx);\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => ty_size(ty) <= 8,\n+        _ => false\n+    }\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "3e60369acbff3074ab0f51bd033b58e34b48da52", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -102,6 +102,7 @@ mod cabi_mips;\n mod cabi_mips64;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n+mod cabi_s390x;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;"}, {"sha": "63bf051c9bcd06e379e46380c8a7ae02ca9f3149", "filename": "src/libstd/env.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -662,6 +662,7 @@ pub mod consts {\n     /// - mips64\n     /// - powerpc\n     /// - powerpc64\n+    /// - s390x\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n@@ -942,6 +943,11 @@ mod arch {\n     pub const ARCH: &'static str = \"powerpc64\";\n }\n \n+#[cfg(target_arch = \"s390x\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"s390x\";\n+}\n+\n #[cfg(target_arch = \"le32\")]\n mod arch {\n     pub const ARCH: &'static str = \"le32\";"}, {"sha": "1c19e58818d743e5fb67c2da76c45e8c2dbf48e4", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -160,6 +160,11 @@ mod arch {\n     pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n }\n \n+#[cfg(target_arch = \"s390x\")]\n+mod arch {\n+    pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+}\n+\n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n     use os::raw::{c_long, c_int};"}, {"sha": "6c5c1b90a4a9236f3a5b4e165d53639190f1937f", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -17,14 +17,16 @@\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n-                                       target_arch = \"powerpc64\"))))]\n+                                       target_arch = \"powerpc64\",\n+                                       target_arch = \"s390x\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(target_os = \"android\",\n               target_os = \"emscripten\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n-                                           target_arch = \"powerpc64\")))))]\n+                                           target_arch = \"powerpc64\",\n+                                           target_arch = \"s390x\")))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;"}, {"sha": "6b50ca9bcdf6d8ee9e003a95a8c47a2ad50e1bd6", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -45,14 +45,17 @@ mod imp {\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n                   target_arch = \"powerpc\",\n-                  target_arch = \"powerpc64\")))]\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"s390x\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n         #[cfg(target_arch = \"x86_64\")]\n         const NR_GETRANDOM: libc::c_long = 318;\n         #[cfg(target_arch = \"x86\")]\n         const NR_GETRANDOM: libc::c_long = 355;\n         #[cfg(target_arch = \"arm\")]\n         const NR_GETRANDOM: libc::c_long = 384;\n+        #[cfg(target_arch = \"s390x\")]\n+        const NR_GETRANDOM: libc::c_long = 349;\n         #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n         const NR_GETRANDOM: libc::c_long = 359;\n         #[cfg(target_arch = \"aarch64\")]\n@@ -71,7 +74,8 @@ mod imp {\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n                       target_arch = \"powerpc\",\n-                      target_arch = \"powerpc64\"))))]\n+                      target_arch = \"powerpc64\",\n+                      target_arch = \"s390x\"))))]\n     fn getrandom(_buf: &mut [u8]) -> libc::c_long { -1 }\n \n     fn getrandom_fill_bytes(v: &mut [u8]) {\n@@ -110,7 +114,8 @@ mod imp {\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n                   target_arch = \"powerpc\",\n-                  target_arch = \"powerpc64\")))]\n+                  target_arch = \"powerpc64\",\n+                  target_arch = \"s390x\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, Ordering};\n         use sync::Once;\n@@ -139,7 +144,8 @@ mod imp {\n                       target_arch = \"arm\",\n                       target_arch = \"aarch64\",\n                       target_arch = \"powerpc\",\n-                      target_arch = \"powerpc64\"))))]\n+                      target_arch = \"powerpc64\",\n+                      target_arch = \"s390x\"))))]\n     fn is_getrandom_available() -> bool { false }\n \n     pub struct OsRng {"}, {"sha": "3900ba65293c078960c3e2ee5a86ac8a42a95878", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -62,6 +62,9 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(target_arch = \"s390x\")]\n+pub const unwinder_private_data_size: usize = 2;\n+\n #[cfg(target_arch = \"asmjs\")]\n pub const unwinder_private_data_size: usize = 20;\n "}, {"sha": "85832ddefe25fe330e9b4b545f027be853221780", "filename": "src/test/compile-fail/asm-bad-clobber.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -11,6 +11,7 @@\n // ignore-android\n // ignore-arm\n // ignore-aarch64\n+// ignore-s390x\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "a4d076fc90da26097065b25e1472ff3db54d86d6", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-s390x\n+\n #![feature(asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }"}, {"sha": "fbfc20f8d048a999cea86f886c12c6a559181121", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -11,6 +11,7 @@\n // ignore-android\n // ignore-arm\n // ignore-aarch64\n+// ignore-s390x\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "1329959fe49382a854cd89caf236b117d9e5aabc", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-s390x\n+\n #![feature(asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }"}, {"sha": "d610f9e344024de1c7b44146a5b23b17d92685c0", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-s390x\n+\n #![feature(asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }"}, {"sha": "360f89dda9ce3eceb26a53b8f410f785098b5537", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-s390x\n+\n #![feature(asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }"}, {"sha": "80ac901b60fd3963b8ec1f9930c7fc1df9c077dc", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -12,6 +12,11 @@\n // ignore-lldb\n // ignore-tidy-linelength\n \n+// FIXME: LLVM generates invalid debug info for variables requiring\n+// dynamic stack realignment, which is the case on s390x for vector\n+// types with with non-vector ABI.\n+// ignore-s390x\n+\n // compile-flags:-g\n // gdb-command:run\n "}, {"sha": "e2ccbe2ad1473c7aca9eb6685fb6e06dce8b800e", "filename": "src/test/run-make/atomic-lock-free/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -27,4 +27,6 @@ ifeq ($(UNAME),Linux)\n \tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n \t$(RUSTC) --target=powerpc64le-unknown-linux-gnu atomic_lock_free.rs\n \tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\t$(RUSTC) --target=s390x-unknown-linux-gnu atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n endif"}, {"sha": "368ffe6e713f472f90b3d5bf7e450185afc603f5", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -25,5 +25,8 @@ pub fn main() { }\n #[cfg(target_arch = \"powerpc64\")]\n pub fn main() { }\n \n+#[cfg(target_arch = \"s390x\")]\n+pub fn main() { }\n+\n #[cfg(target_arch = \"asmjs\")]\n pub fn main() { }"}, {"sha": "dc14c12b6a22e778aef7caf90fdcabf8b85fae68", "filename": "src/test/run-pass/union/union-basic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -10,6 +10,9 @@\n \n // aux-build:union.rs\n \n+// FIXME: This test case makes little-endian assumptions.\n+// ignore-s390x\n+\n #![feature(untagged_unions)]\n \n extern crate union;"}, {"sha": "2db53947d881d5929b11e311f38ed9708cb67600", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b84088d76b8ded63cbaf12991213f4f437e689/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=19b84088d76b8ded63cbaf12991213f4f437e689", "patch": "@@ -38,7 +38,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[(\"aarch64\", \"aarch\n                                                               (\"msp430\", \"msp430\"),\n                                                               (\"powerpc\", \"powerpc\"),\n                                                               (\"powerpc64\", \"powerpc64\"),\n-                                                              (\"s390x\", \"systemz\"),\n+                                                              (\"s390x\", \"s390x\"),\n                                                               (\"sparc\", \"sparc\"),\n                                                               (\"x86_64\", \"x86_64\"),\n                                                               (\"xcore\", \"xcore\"),"}]}