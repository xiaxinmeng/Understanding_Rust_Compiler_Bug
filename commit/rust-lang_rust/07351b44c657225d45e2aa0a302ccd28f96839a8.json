{"sha": "07351b44c657225d45e2aa0a302ccd28f96839a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MzUxYjQ0YzY1NzIyNWQ0NWUyYWEwYTMwMmNjZDI4Zjk2ODM5YTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-08T12:08:01Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-08T12:08:01Z"}, "message": "syntax: implement labelled breaks for `for`.\n\n`for` desugars to `loop` so it is trivial to just desugar to `loop` while\nretaining any label.", "tree": {"sha": "e61809a471532d32ed51f9d72ea0536b9fef471c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61809a471532d32ed51f9d72ea0536b9fef471c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07351b44c657225d45e2aa0a302ccd28f96839a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07351b44c657225d45e2aa0a302ccd28f96839a8", "html_url": "https://github.com/rust-lang/rust/commit/07351b44c657225d45e2aa0a302ccd28f96839a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07351b44c657225d45e2aa0a302ccd28f96839a8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b609d022c4df307e4d68499b063c81a9ecb1e9cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b609d022c4df307e4d68499b063c81a9ecb1e9cf", "html_url": "https://github.com/rust-lang/rust/commit/b609d022c4df307e4d68499b063c81a9ecb1e9cf"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "b89414a6a53a00407633870400a62cc2a01295ce", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -2064,7 +2064,7 @@ fn populate_scope_map(cx: &mut CrateContext,\n                 }\n             }\n \n-            ast::ExprForLoop(_, _, _) => {\n+            ast::ExprForLoop(_, _, _, _) => {\n                 cx.sess.span_bug(exp.span, \"debuginfo::populate_scope_map() - \\\n                                             Found unexpanded for-loop.\");\n             }"}, {"sha": "6957f9ae3519d20cbdd2f215fc564660e3e6bd7c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -528,7 +528,7 @@ pub enum Expr_ {\n     ExprCast(@Expr, Ty),\n     ExprIf(@Expr, Block, Option<@Expr>),\n     ExprWhile(@Expr, Block),\n-    ExprForLoop(@Pat, @Expr, Block),\n+    ExprForLoop(@Pat, @Expr, Block, Option<Ident>),\n     /* Conditionless loop (can be exited with break, cont, or ret)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */"}, {"sha": "abade04fedf816614024cc0a2c789baea9b14f58", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -113,7 +113,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n \n         // Desugar expr_for_loop\n         // From: `for <src_pat> in <src_expr> <src_loop_block>`\n-        ast::ExprForLoop(src_pat, src_expr, ref src_loop_block) => {\n+        ast::ExprForLoop(src_pat, src_expr, ref src_loop_block, opt_ident) => {\n             let src_pat = src_pat.clone();\n             let src_expr = src_expr.clone();\n \n@@ -257,7 +257,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n             // `loop { ... }`\n             let loop_block = {\n                 let loop_body_block = mk_block(cx, [match_stmt], None, span);\n-                let loop_body_expr = mk_expr(cx, span, ast::ExprLoop(loop_body_block, None));\n+                let loop_body_expr = mk_expr(cx, span, ast::ExprLoop(loop_body_block, opt_ident));\n                 let loop_body_stmt = @spanned(lo, hi, ast::StmtExpr(loop_body_expr, cx.next_id()));\n                 mk_block(cx, [iter_decl_stmt,\n                               loop_body_stmt],"}, {"sha": "11e39163992d86313514899446506e2e40871737", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -557,10 +557,11 @@ pub fn noop_fold_expr(e: &Expr_, fld: @ast_fold) -> Expr_ {\n         ExprWhile(cond, ref body) => {\n             ExprWhile(fld.fold_expr(cond), fld.fold_block(body))\n         }\n-        ExprForLoop(pat, iter, ref body) => {\n+        ExprForLoop(pat, iter, ref body, opt_ident) => {\n             ExprForLoop(fld.fold_pat(pat),\n-                          fld.fold_expr(iter),\n-                          fld.fold_block(body))\n+                        fld.fold_expr(iter),\n+                        fld.fold_block(body),\n+                        opt_ident.map_move(|x| fld.fold_ident(x)))\n         }\n         ExprLoop(ref body, opt_ident) => {\n             ExprLoop("}, {"sha": "850f73096edbb21beedffae02a692718d08651b0", "filename": "src/libsyntax/oldvisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Foldvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Foldvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Foldvisit.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -523,7 +523,7 @@ pub fn visit_expr<E:Clone>(ex: @Expr, (e, v): (E, vt<E>)) {\n             (v.visit_expr)(x, (e.clone(), v));\n             (v.visit_block)(b, (e.clone(), v));\n         }\n-        ExprForLoop(pattern, subexpression, ref block) => {\n+        ExprForLoop(pattern, subexpression, ref block, _) => {\n             (v.visit_pat)(pattern, (e.clone(), v));\n             (v.visit_expr)(subexpression, (e.clone(), v));\n             (v.visit_block)(block, (e.clone(), v))"}, {"sha": "b86153525047e2b8e53a6937629582cfc0390ce1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -1771,7 +1771,7 @@ impl Parser {\n         } else if self.eat_keyword(keywords::If) {\n             return self.parse_if_expr();\n         } else if self.eat_keyword(keywords::For) {\n-            return self.parse_for_expr();\n+            return self.parse_for_expr(None);\n         } else if self.eat_keyword(keywords::Do) {\n             return self.parse_sugary_call_expr(lo, ~\"do\", DoSugar,\n                                                ExprDoBody);\n@@ -1781,8 +1781,13 @@ impl Parser {\n             let lifetime = self.get_lifetime(&*self.token);\n             self.bump();\n             self.expect(&token::COLON);\n-            self.expect_keyword(keywords::Loop);\n-            return self.parse_loop_expr(Some(lifetime));\n+            if self.eat_keyword(keywords::For) {\n+                return self.parse_for_expr(Some(lifetime))\n+            } else if self.eat_keyword(keywords::Loop) {\n+                return self.parse_loop_expr(Some(lifetime))\n+            } else {\n+                self.fatal(\"expected `for` or `loop` after a label\")\n+            }\n         } else if self.eat_keyword(keywords::Loop) {\n             return self.parse_loop_expr(None);\n         } else if self.eat_keyword(keywords::Match) {\n@@ -2467,7 +2472,7 @@ impl Parser {\n     }\n \n     // parse a 'for' .. 'in' expression ('for' token already eaten)\n-    pub fn parse_for_expr(&self) -> @Expr {\n+    pub fn parse_for_expr(&self, opt_ident: Option<ast::Ident>) -> @Expr {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n \n         let lo = self.last_span.lo;\n@@ -2477,7 +2482,7 @@ impl Parser {\n         let loop_block = self.parse_block();\n         let hi = self.span.hi;\n \n-        self.mk_expr(lo, hi, ExprForLoop(pat, expr, loop_block))\n+        self.mk_expr(lo, hi, ExprForLoop(pat, expr, loop_block, opt_ident))\n     }\n \n "}, {"sha": "282b66b2c59ef61cf9671a1c4a71b44261690a08", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -1232,7 +1232,12 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n-      ast::ExprForLoop(pat, iter, ref blk) => {\n+      ast::ExprForLoop(pat, iter, ref blk, opt_ident) => {\n+        for ident in opt_ident.iter() {\n+            word(s.s, \"'\");\n+            print_ident(s, *ident);\n+            word_space(s, \":\");\n+        }\n         head(s, \"for\");\n         print_pat(s, pat);\n         space(s.s);"}, {"sha": "191b4509a80b32881b1d525d9f396616059530f7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -599,7 +599,7 @@ pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @Expr, env:\n             visitor.visit_expr(subexpression, env.clone());\n             visitor.visit_block(block, env.clone())\n         }\n-        ExprForLoop(pattern, subexpression, ref block) => {\n+        ExprForLoop(pattern, subexpression, ref block, _) => {\n             visitor.visit_pat(pattern, env.clone());\n             visitor.visit_expr(subexpression, env.clone());\n             visitor.visit_block(block, env.clone())\n@@ -812,4 +812,3 @@ impl Visitor<()> for SimpleVisitorVisitor {\n         walk_struct_field(self, struct_field, env)\n     }\n }\n-"}, {"sha": "d7d210c7524149834ec341f695940ef9d141a6d5", "filename": "src/test/run-pass/labeled-break.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07351b44c657225d45e2aa0a302ccd28f96839a8/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=07351b44c657225d45e2aa0a302ccd28f96839a8", "patch": "@@ -14,4 +14,10 @@ pub fn main() {\n             break 'foo;\n         }\n     }\n+\n+    'bar: for _ in range(0, 100) {\n+        loop {\n+            break 'bar;\n+        }\n+    }\n }"}]}