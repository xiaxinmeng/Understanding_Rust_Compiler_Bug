{"sha": "371be3c6c4c9be74ee224f74f41006fefa3dda1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWJlM2M2YzRjOWJlNzRlZTIyNGY3NGY0MTAwNmZlZmEzZGRhMWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-18T23:55:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-19T02:09:41Z"}, "message": "Remove unused file_type enum from the parser", "tree": {"sha": "94041ca601657165557c6e8dd362697986947bc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94041ca601657165557c6e8dd362697986947bc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371be3c6c4c9be74ee224f74f41006fefa3dda1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371be3c6c4c9be74ee224f74f41006fefa3dda1b", "html_url": "https://github.com/rust-lang/rust/commit/371be3c6c4c9be74ee224f74f41006fefa3dda1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371be3c6c4c9be74ee224f74f41006fefa3dda1b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74b2e9979738ce413209aa4342fc35afe68c68de", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b2e9979738ce413209aa4342fc35afe68c68de", "html_url": "https://github.com/rust-lang/rust/commit/74b2e9979738ce413209aa4342fc35afe68c68de"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "b4c49b12d5936c3f35ebac8e2a0f0080d8bb16e5", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -37,7 +37,7 @@ use codemap::span;\n use ext::base::ext_ctxt;\n use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};\n-use parse::parser::{Parser, SOURCE_FILE};\n+use parse::parser::Parser;\n use parse::common::parser_common;\n \n use pipes::parse_proto::proto_parser;\n@@ -52,7 +52,7 @@ fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident,\n     let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,\n                                cx.parse_sess().interner, None, tt);\n     let rdr = tt_rdr as reader;\n-    let rust_parser = Parser(sess, cfg, rdr.dup(), SOURCE_FILE);\n+    let rust_parser = Parser(sess, cfg, rdr.dup());\n \n     let proto = rust_parser.parse_proto(cx.str_of(id));\n "}, {"sha": "a105db0c08acb0037bba87e2286f5856a575db46", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -60,8 +60,7 @@ fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     let file = expr_to_str(cx, args[0], ~\"include_str! requires a string\");\n     let p = parse::new_sub_parser_from_file(\n         cx.parse_sess(), cx.cfg(),\n-        &res_rel_file(cx, sp, &Path(file)),\n-        parse::parser::SOURCE_FILE, sp);\n+        &res_rel_file(cx, sp, &Path(file)), sp);\n     return p.parse_expr();\n }\n "}, {"sha": "a4e768aa7dcc3008a8c19bd3babc47d357049f39", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -2,7 +2,7 @@ use codemap::span;\n use ext::base::ext_ctxt;\n use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};\n-use parse::parser::{Parser, SOURCE_FILE};\n+use parse::parser::Parser;\n use parse::common::parser_common;\n \n fn expand_trace_macros(cx: ext_ctxt, sp: span,\n@@ -13,15 +13,15 @@ fn expand_trace_macros(cx: ext_ctxt, sp: span,\n     let tt_rdr = new_tt_reader(cx.parse_sess().span_diagnostic,\n                                cx.parse_sess().interner, None, tt);\n     let rdr = tt_rdr as reader;\n-    let rust_parser = Parser(sess, cfg, rdr.dup(), SOURCE_FILE);\n+    let rust_parser = Parser(sess, cfg, rdr.dup());\n \n     let arg = cx.str_of(rust_parser.parse_ident());\n     match arg {\n       ~\"true\"  => cx.set_trace_macros(true),\n       ~\"false\" => cx.set_trace_macros(false),\n       _ => cx.span_fatal(sp, ~\"trace_macros! only accepts `true` or `false`\")\n     }\n-    let rust_parser = Parser(sess, cfg, rdr.dup(), SOURCE_FILE);\n+    let rust_parser = Parser(sess, cfg, rdr.dup());\n     let result = rust_parser.parse_expr();\n     base::mr_expr(result)\n }"}, {"sha": "86218acb5a19657fa365bbf42004f656fb9a140e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -3,7 +3,7 @@ use parse::token;\n use parse::token::{Token, EOF, to_str, nonterminal};\n use parse::lexer::*; //resolve bug?\n //import parse::lexer::{reader, tt_reader, tt_reader_as_reader};\n-use parse::parser::{Parser, SOURCE_FILE};\n+use parse::parser::Parser;\n //import parse::common::parser_common;\n use parse::common::*; //resolve bug?\n use parse::parse_sess;\n@@ -355,7 +355,7 @@ fn parse(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader, ms: ~[matcher])\n                 }\n                 rdr.next_token();\n             } else /* bb_eis.len() == 1 */ {\n-                let rust_parser = Parser(sess, cfg, rdr.dup(), SOURCE_FILE);\n+                let rust_parser = Parser(sess, cfg, rdr.dup());\n \n                 let ei = bb_eis.pop();\n                 match ei.elts[ei.idx].node {"}, {"sha": "56418989c497a3be5375caf84a16204996311303", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -4,7 +4,7 @@ use ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n use parse::lexer::{new_tt_reader, reader};\n use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n-use parse::parser::{Parser, SOURCE_FILE};\n+use parse::parser::Parser;\n use macro_parser::{parse, parse_or_else, success, failure, named_match,\n                       matched_seq, matched_nonterminal, error};\n use std::map::HashMap;\n@@ -88,7 +88,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                     let trncbr = new_tt_reader(s_d, itr, Some(named_matches),\n                                                ~[rhs]);\n                     let p = Parser(cx.parse_sess(), cx.cfg(),\n-                                   trncbr as reader, SOURCE_FILE);\n+                                   trncbr as reader);\n                     let e = p.parse_expr();\n                     return mr_expr(e);\n                   }"}, {"sha": "2e0b204df8d046909f6bcf1a8bfa4b31261dd04d", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -62,8 +62,7 @@ fn parse_crate_from_file(input: &Path, cfg: ast::crate_cfg,\n \n fn parse_crate_from_crate_file(input: &Path, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n-    let p = new_crate_parser_from_file(sess, cfg, input,\n-                                       parser::CRATE_FILE);\n+    let p = new_crate_parser_from_file(sess, cfg, input);\n     let lo = p.span.lo;\n     let prefix = input.dir_path();\n     let leading_attrs = p.parse_inner_attrs_and_next();\n@@ -85,8 +84,7 @@ fn parse_crate_from_crate_file(input: &Path, cfg: ast::crate_cfg,\n \n fn parse_crate_from_source_file(input: &Path, cfg: ast::crate_cfg,\n                                 sess: parse_sess) -> @ast::crate {\n-    let p = new_crate_parser_from_file(sess, cfg, input,\n-                                       parser::SOURCE_FILE);\n+    let p = new_crate_parser_from_file(sess, cfg, input);\n     let r = p.parse_crate_mod(cfg);\n     return r;\n }\n@@ -156,23 +154,21 @@ fn next_node_id(sess: parse_sess) -> node_id {\n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                               +name: ~str, +ss: codemap::FileSubstr,\n                               source: @~str) -> Parser {\n-    let ftype = parser::SOURCE_FILE;\n     let filemap = sess.cm.new_filemap_w_substr(name, ss, source);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n                                         sess.interner);\n-    return Parser(sess, cfg, srdr as reader, ftype);\n+    return Parser(sess, cfg, srdr as reader);\n }\n \n fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n-                        path: &Path,\n-                        ftype: parser::file_type) -> Result<Parser, ~str> {\n+                        path: &Path) -> Result<Parser, ~str> {\n     match io::read_whole_file_str(path) {\n       result::Ok(move src) => {\n           let filemap = sess.cm.new_filemap(path.to_str(), @move src);\n           let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n                                               sess.interner);\n \n-          Ok(Parser(sess, cfg, srdr as reader, ftype))\n+          Ok(Parser(sess, cfg, srdr as reader))\n \n       }\n       result::Err(move e) => Err(move e)\n@@ -182,9 +178,8 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n /// Create a new parser for an entire crate, handling errors as appropriate\n /// if the file doesn't exist\n fn new_crate_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n-                              path: &Path,\n-                              ftype: parser::file_type) -> Parser {\n-    match new_parser_from_file(sess, cfg, path, ftype) {\n+                              path: &Path) -> Parser {\n+    match new_parser_from_file(sess, cfg, path) {\n         Ok(move parser) => move parser,\n         Err(move e) => {\n             sess.span_diagnostic.handler().fatal(e)\n@@ -195,9 +190,8 @@ fn new_crate_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n /// Create a new parser based on a span from an existing parser. Handles\n /// error messages correctly when the file does not exist.\n fn new_sub_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n-                            path: &Path, ftype: parser::file_type,\n-                            sp: span) -> Parser {\n-    match new_parser_from_file(sess, cfg, path, ftype) {\n+                            path: &Path, sp: span) -> Parser {\n+    match new_parser_from_file(sess, cfg, path) {\n         Ok(move parser) => move parser,\n         Err(move e) => {\n             sess.span_diagnostic.span_fatal(sp, e)\n@@ -209,5 +203,5 @@ fn new_parser_from_tt(sess: parse_sess, cfg: ast::crate_cfg,\n                       tt: ~[ast::token_tree]) -> Parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, sess.interner,\n                                     None, tt);\n-    return Parser(sess, cfg, trdr as reader, parser::SOURCE_FILE)\n+    return Parser(sess, cfg, trdr as reader)\n }"}, {"sha": "78a47ec09c7b93ff4f5f06c111af615329fa83ef", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -1,4 +1,4 @@\n-use parser::{Parser, SOURCE_FILE};\n+use parser::Parser;\n use attr::parser_attr;\n use ast_util::mk_sp;\n use codemap::span;\n@@ -67,7 +67,7 @@ fn parse_companion_mod(cx: ctx, prefix: &Path, suffix: &Option<Path>)\n         debug!(\"found companion mod\");\n         // XXX: Using a dummy span, but this code will go away soon\n         let p0 = new_sub_parser_from_file(cx.sess, cx.cfg,\n-                                          modpath, SOURCE_FILE,\n+                                          modpath,\n                                           ast_util::dummy_sp());\n         let inner_attrs = p0.parse_inner_attrs_and_next();\n         let m0 = p0.parse_mod_items(token::EOF, inner_attrs.next);\n@@ -96,7 +96,7 @@ fn eval_src_mod(cx: ctx, prefix: &Path, id: ast::ident,\n     };\n     let p0 =\n         new_sub_parser_from_file(cx.sess, cx.cfg,\n-                                 &full_path, SOURCE_FILE, sp);\n+                                 &full_path, sp);\n     let inner_attrs = p0.parse_inner_attrs_and_next();\n     let mod_attrs = vec::append(outer_attrs, inner_attrs.inner);\n     let first_item_outer_attrs = inner_attrs.next;"}, {"sha": "f49447215fe3d06629ede175d3ef91e9307ff620", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371be3c6c4c9be74ee224f74f41006fefa3dda1b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=371be3c6c4c9be74ee224f74f41006fefa3dda1b", "patch": "@@ -70,10 +70,7 @@ use ast::{_mod, add, arg, arm, attribute,\n              expr_vstore_fixed, expr_vstore_slice, expr_vstore_box,\n              expr_vstore_uniq, TyFn, Onceness, Once, Many};\n \n-export file_type;\n export Parser;\n-export CRATE_FILE;\n-export SOURCE_FILE;\n \n // FIXME (#3726): #ast expects to find this here but it's actually\n // defined in `parse` Fixing this will be easier when we have export\n@@ -92,8 +89,6 @@ enum restriction {\n     RESTRICT_NO_BAR_OR_DOUBLEBAR_OP,\n }\n \n-enum file_type { CRATE_FILE, SOURCE_FILE, }\n-\n enum class_member {\n     field_member(@struct_field),\n     method_member(@method)\n@@ -180,7 +175,7 @@ pure fn maybe_append(+lhs: ~[attribute], rhs: Option<~[attribute]>)\n /* ident is handled by common.rs */\n \n fn Parser(sess: parse_sess, cfg: ast::crate_cfg,\n-          +rdr: reader, ftype: file_type) -> Parser {\n+          +rdr: reader) -> Parser {\n \n     let tok0 = rdr.next_token();\n     let span0 = tok0.sp;\n@@ -191,7 +186,6 @@ fn Parser(sess: parse_sess, cfg: ast::crate_cfg,\n         interner: move interner,\n         sess: sess,\n         cfg: cfg,\n-        file_type: ftype,\n         token: tok0.tok,\n         span: span0,\n         last_span: span0,\n@@ -210,7 +204,6 @@ fn Parser(sess: parse_sess, cfg: ast::crate_cfg,\n struct Parser {\n     sess: parse_sess,\n     cfg: crate_cfg,\n-    file_type: file_type,\n     mut token: token::Token,\n     mut span: span,\n     mut last_span: span,"}]}