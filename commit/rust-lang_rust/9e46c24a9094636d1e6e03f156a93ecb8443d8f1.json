{"sha": "9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "node_id": "C_kwDOAAsO6NoAKDllNDZjMjRhOTA5NDYzNmQxZTZlMDNmMTU2YTkzZWNiODQ0M2Q4ZjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-18T05:59:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-18T05:59:20Z"}, "message": "Rollup merge of #106873 - BoxyUwU:ty_const_formatting, r=compiler-errors\n\ndont randomly use `_` to print out const generic arguments\n\nconst generics seem to get printed out as `_` for no reason a lot of the time, as someone who spends a lot of time with const generics this has gotten :sparkles: very annoying :sparkles:. Latest example would be #106423 where the ICE messaged formatted a `ty::Const` containing no infer vars, as `_`.\n\nFor some reason printing of the const argument on arrays was custom instead of using the existing logic for printing `ty::Const`. Additionally the existing logic for printing `ty::Const` would print out `_` for anon consts that are in a separate crate leading to weird diagnostics (see second commit). There ought to be less cases of consts randomly getting printed as `_` hiding valuable info now.", "tree": {"sha": "78b63e09db063d78b4fb7e4592e28bf5cef17049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b63e09db063d78b4fb7e4592e28bf5cef17049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjx4q4CRBK7hj4Ov3rIwAAYNkIAKoI7SvNh3LGd+dGP4d+5r6Q\nnqlGUaNR3VOPo+4J8CXHY2JGyDsxzP9JYuKg/SwzKrBZ4i3rc45uhnQyMhwHen/S\no9v6xm7rj5K5d1iSa7rPgaizn0uPWxR1wpvOJRnLKc6MVeChyNT5IA+fk5P8swoo\nG7XNsRHVnSJdHkfXL8at9J4x8CKMdDMbGawMXG1yU/8psTJaYqZMn/i1cK+V38e7\nMa5Fpzy8POqP4EkLqIVLSJEDWOFfPoBFxwwQMEE9OPLDcEuRr6jUfuyA3ViigN3Y\n5JEoZBL3NxJ5hP8h7bBWnh/UVacB2gr+G8anM3iEQ1Ludiysv/bVz6Pjj8VPJaI=\n=LwGd\n-----END PGP SIGNATURE-----\n", "payload": "tree 78b63e09db063d78b4fb7e4592e28bf5cef17049\nparent d26e07b91a48047c0acd1e5527f49e57902eb6e7\nparent 1171fe5c455e63a1617d56f7dba2b7901182a1eb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674021560 +0100\ncommitter GitHub <noreply@github.com> 1674021560 +0100\n\nRollup merge of #106873 - BoxyUwU:ty_const_formatting, r=compiler-errors\n\ndont randomly use `_` to print out const generic arguments\n\nconst generics seem to get printed out as `_` for no reason a lot of the time, as someone who spends a lot of time with const generics this has gotten :sparkles: very annoying :sparkles:. Latest example would be #106423 where the ICE messaged formatted a `ty::Const` containing no infer vars, as `_`.\n\nFor some reason printing of the const argument on arrays was custom instead of using the existing logic for printing `ty::Const`. Additionally the existing logic for printing `ty::Const` would print out `_` for anon consts that are in a separate crate leading to weird diagnostics (see second commit). There ought to be less cases of consts randomly getting printed as `_` hiding valuable info now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "html_url": "https://github.com/rust-lang/rust/commit/9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26e07b91a48047c0acd1e5527f49e57902eb6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26e07b91a48047c0acd1e5527f49e57902eb6e7", "html_url": "https://github.com/rust-lang/rust/commit/d26e07b91a48047c0acd1e5527f49e57902eb6e7"}, {"sha": "1171fe5c455e63a1617d56f7dba2b7901182a1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1171fe5c455e63a1617d56f7dba2b7901182a1eb", "html_url": "https://github.com/rust-lang/rust/commit/1171fe5c455e63a1617d56f7dba2b7901182a1eb"}], "stats": {"total": 192, "additions": 112, "deletions": 80}, "files": [{"sha": "aed7051bb993dc7d6d7a71257cbf6f9b397348d3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -854,24 +854,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n                 p!(\"]\");\n             }\n-            ty::Array(ty, sz) => {\n-                p!(\"[\", print(ty), \"; \");\n-                if self.should_print_verbose() {\n-                    p!(write(\"{:?}\", sz));\n-                } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n-                    // Do not try to evaluate unevaluated constants. If we are const evaluating an\n-                    // array length anon const, rustc will (with debug assertions) print the\n-                    // constant's path. Which will end up here again.\n-                    p!(\"_\");\n-                } else if let Some(n) = sz.kind().try_to_bits(self.tcx().data_layout.pointer_size) {\n-                    p!(write(\"{}\", n));\n-                } else if let ty::ConstKind::Param(param) = sz.kind() {\n-                    p!(print(param));\n-                } else {\n-                    p!(\"_\");\n-                }\n-                p!(\"]\")\n-            }\n+            ty::Array(ty, sz) => p!(\"[\", print(ty), \"; \", print(sz), \"]\"),\n             ty::Slice(ty) => p!(\"[\", print(ty), \"]\"),\n         }\n \n@@ -1303,21 +1286,25 @@ pub trait PrettyPrinter<'tcx>:\n         match ct.kind() {\n             ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n                 match self.tcx().def_kind(def.did) {\n-                    DefKind::Static(..) | DefKind::Const | DefKind::AssocConst => {\n+                    DefKind::Const | DefKind::AssocConst => {\n                         p!(print_value_path(def.did, substs))\n                     }\n-                    _ => {\n-                        if def.is_local() {\n-                            let span = self.tcx().def_span(def.did);\n-                            if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n-                                p!(write(\"{}\", snip))\n-                            } else {\n-                                print_underscore!()\n-                            }\n+                    DefKind::AnonConst => {\n+                        if def.is_local()\n+                            && let span = self.tcx().def_span(def.did)\n+                            && let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span)\n+                        {\n+                            p!(write(\"{}\", snip))\n                         } else {\n-                            print_underscore!()\n+                            // Do not call `print_value_path` as if a parent of this anon const is an impl it will\n+                            // attempt to print out the impl trait ref i.e. `<T as Trait>::{constant#0}`. This would\n+                            // cause printing to enter an infinite recursion if the anon const is in the self type i.e.\n+                            // `impl<T: Default> Default for [T; 32 - 1 - 1 - 1] {`\n+                            // where we would try to print `<[T; /* print `constant#0` again */] as Default>::{constant#0}`\n+                            p!(write(\"{}::{}\", self.tcx().crate_name(def.did.krate), self.tcx().def_path(def.did).to_string_no_crate_verbose()))\n                         }\n                     }\n+                    defkind => bug!(\"`{:?}` has unexpcted defkind {:?}\", ct, defkind),\n                 }\n             }\n             ty::ConstKind::Infer(infer_ct) => {\n@@ -1339,7 +1326,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n-            ty::ConstKind::Expr(_) => p!(\"[Const Expr]\"),\n+            ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n             ty::ConstKind::Error(_) => p!(\"[const error]\"),\n         };\n         Ok(self)"}, {"sha": "798e45df8ca766f8c0bdf0daac9492cbe7b23944", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -22,7 +22,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x00000003)) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let mut _1: [usize; Const(Value(Leaf(0x00000003)): usize)]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n     let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18"}, {"sha": "4767bfc76ed9de92c1632622e26392765d54cb87", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -22,7 +22,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let mut _1: [usize; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n     let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18"}, {"sha": "24aa405211f4cc3f4322b4f5911b56590da6e6a3", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -10,7 +10,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:11:47\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n@@ -19,7 +19,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:35\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;"}, {"sha": "64b2acb03629235f33cad7d2032359eeb4fa1a07", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -10,10 +10,10 @@\n \n pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//[min]~^^ ERROR `[u8; _]` is forbidden\n+//[min]~^^ ERROR `[u8; N]` is forbidden\n \n pub struct SelfDependent<const N: [u8; N]>;\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//[min]~^^ ERROR `[u8; _]` is forbidden\n+//[min]~^^ ERROR `[u8; N]` is forbidden\n \n fn main() {}"}, {"sha": "d8eebeb0d2115c3673a4eb139a5c86703631a4be", "filename": "tests/ui/const-generics/dont-evaluate-array-len-on-err-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `[Adt; _]: Foo` is not satisfied\n+error[E0277]: the trait bound `[Adt; std::mem::size_of::<Self::Assoc>()]: Foo` is not satisfied\n   --> $DIR/dont-evaluate-array-len-on-err-1.rs:15:9\n    |\n LL |         <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; _]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; std::mem::size_of::<Self::Assoc>()]`\n \n error: aborting due to previous error\n "}, {"sha": "97be074933d9b48d2ea7b2a7eb901dd0f75eff4f", "filename": "tests/ui/const-generics/generic_const_exprs/auxiliary/anon_const_non_local.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fanon_const_non_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fanon_const_non_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fanon_const_non_local.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -0,0 +1,8 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub struct Foo<const N: usize>;\n+\n+pub fn foo<const N: usize>() -> Foo<{ N + 1 }> {\n+    Foo\n+}"}, {"sha": "65822856e1d7c100b25ab0e9ce4ab35be19159da", "filename": "tests/ui/const-generics/generic_const_exprs/issue-62504.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -15,7 +15,7 @@ LL |         ArrayHolder([0; Self::SIZE])\n    |         arguments to this struct are incorrect\n    |\n    = note: expected array `[u32; X]`\n-              found array `[u32; _]`\n+              found array `[u32; Self::SIZE]`\n note: tuple struct defined here\n   --> $DIR/issue-62504.rs:14:8\n    |"}, {"sha": "9baf9790e19b321601d2de1af2bd37bf8d08c790", "filename": "tests/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n    |\n LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n-   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); _]`\n+   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); std::mem::size_of::<Self::Assoc>()]`\n    |         |\n    |         expected because this is `<Self as Foo>::Assoc`\n    |\n    = note: expected associated type `<Self as Foo>::Assoc`\n-                        found array `[(); _]`\n-   = help: consider constraining the associated type `<Self as Foo>::Assoc` to `[(); _]` or calling a method that returns `<Self as Foo>::Assoc`\n+                        found array `[(); std::mem::size_of::<Self::Assoc>()]`\n+   = help: consider constraining the associated type `<Self as Foo>::Assoc` to `[(); std::mem::size_of::<Self::Assoc>()]` or calling a method that returns `<Self as Foo>::Assoc`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error"}, {"sha": "1254b4435f738ccdefca9900f90206cf62f4dca2", "filename": "tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:anon_const_non_local.rs\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+extern crate anon_const_non_local;\n+\n+fn bar<const M: usize>()\n+where\n+    [(); M + 1]:,\n+{\n+    let _: anon_const_non_local::Foo<2> = anon_const_non_local::foo::<M>();\n+    //~^ ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "3926c830adb7a2f0762bb21f38ddc65e34913308", "filename": "tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non_local_anon_const_diagnostics.rs:12:43\n+   |\n+LL |     let _: anon_const_non_local::Foo<2> = anon_const_non_local::foo::<M>();\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `anon_const_non_local::::foo::{constant#0}`\n+   |\n+   = note: expected constant `2`\n+              found constant `anon_const_non_local::::foo::{constant#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5a721720d78b5f31c8567f9cea625f31300449c5", "filename": "tests/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -4,7 +4,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-62878.rs:5:33\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}"}, {"sha": "4c08a484ef47b776e6d30a6cb58035df64d7f9ca", "filename": "tests/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -4,7 +4,7 @@\n \n fn foo<const N: usize, const A: [u8; N]>() {}\n //~^ ERROR the type of const parameters must not\n-//[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~| ERROR `[u8; N]` is forbidden as the type of a const generic parameter\n \n fn main() {\n     foo::<_, { [1] }>();"}, {"sha": "998b16a79e63863787d7f6fd7990832f9e032958", "filename": "tests/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -4,7 +4,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; LEN]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71169.rs:5:38\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}"}, {"sha": "e4ec6b073761346d080ee8f9c25589e68f1b84ac", "filename": "tests/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -4,7 +4,7 @@\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n //~^ ERROR the type of const parameters must not\n-//[min]~^^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^^ ERROR `[u8; LEN]` is forbidden as the type of a const generic parameter\n fn main() {\n     const DATA: [u8; 4] = *b\"ABCD\";\n     foo::<4, DATA>();"}, {"sha": "f03354fc472c088a8c3aa6ab1020bf0f03b03ee5", "filename": "tests/ui/const-generics/issues/issue-73491.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: `[u32; _]` is forbidden as the type of a const generic parameter\n+error: `[u32; LEN]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-73491.rs:8:19\n    |\n LL | fn hoge<const IN: [u32; LEN]>() {}"}, {"sha": "482dbb04daae962eb4dbea96d171d0c7138a5f21", "filename": "tests/ui/const-generics/issues/issue-73491.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -6,6 +6,6 @@\n const LEN: usize = 1024;\n \n fn hoge<const IN: [u32; LEN]>() {}\n-//[min]~^ ERROR `[u32; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u32; LEN]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "134c248347d3cd51facc116d257352bf2b5f4aa6", "filename": "tests/ui/const-generics/issues/issue-74101.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:6:18\n    |\n LL | fn test<const N: [u8; 1 + 2]>() {}\n@@ -7,7 +7,7 @@ LL | fn test<const N: [u8; 1 + 2]>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:9:21\n    |\n LL | struct Foo<const N: [u8; 1 + 2]>;"}, {"sha": "4c9b2d3c634dacec0fa68bb4b48d094e430aadce", "filename": "tests/ui/const-generics/issues/issue-74101.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -4,9 +4,9 @@\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn test<const N: [u8; 1 + 2]>() {}\n-//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n \n struct Foo<const N: [u8; 1 + 2]>;\n-//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "46af19ef395400c4908865e855af08d1466dc8d3", "filename": "tests/ui/const-generics/issues/issue-75047.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; Bar::<u32>::value()]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-75047.rs:14:21\n    |\n LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;"}, {"sha": "7b6fb92bca96e04411ee2d41256bf33d9a92b8fd", "filename": "tests/ui/const-generics/issues/issue-75047.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -12,6 +12,6 @@ impl<T> Bar<T> {\n }\n \n struct Foo<const N: [u8; Bar::<u32>::value()]>;\n-//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u8; Bar::<u32>::value()]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "cff02b0d445c81e8d351fec56c4bc1e015d86923", "filename": "tests/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,14 @@\n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; {\n+           struct Foo<const N: usize>;\n+       \n+           impl<const N: usize> Foo<N> {\n+               fn value() -> usize {\n+                   N\n+               }\n+           }\n+       \n+           Foo::<17>::value()\n+       }]` is forbidden as the type of a const generic parameter\n   --> $DIR/nested-type.rs:6:21\n    |\n LL |   struct Foo<const N: [u8; {"}, {"sha": "17088d9995f2d1c65368333ca1f237324c2c73c7", "filename": "tests/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -15,8 +15,8 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`..\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires computing layout of `[u8; _]`...\n-   = note: ...which requires normalizing `[u8; _]`...\n+   = note: ...which requires computing layout of `[u8; std::mem::size_of::<Foo>()]`...\n+   = note: ...which requires normalizing `[u8; std::mem::size_of::<Foo>()]`...\n    = note: ...which again requires evaluating type-level constant, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/const-size_of-cycle.rs:3:1"}, {"sha": "ec64b956dfe2b8f99f33de8ea7daa6a80c216d41", "filename": "tests/ui/consts/issue-44415.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-44415.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -15,8 +15,8 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`..\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires computing layout of `[u8; _]`...\n-   = note: ...which requires normalizing `[u8; _]`...\n+   = note: ...which requires computing layout of `[u8; unsafe { intrinsics::size_of::<Foo>() }]`...\n+   = note: ...which requires normalizing `[u8; unsafe { intrinsics::size_of::<Foo>() }]`...\n    = note: ...which again requires evaluating type-level constant, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/issue-44415.rs:5:1"}, {"sha": "8b3f4b714e1bd33662001b965d3d24a2429cbc6e", "filename": "tests/ui/consts/too_generic_eval_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -7,7 +7,7 @@ impl<A, B> Foo<A, B> {\n         [5; Self::HOST_SIZE] == [6; 0]\n         //~^ ERROR constant expression depends on a generic parameter\n         //~| ERROR constant expression depends on a generic parameter\n-        //~| ERROR can't compare `[{integer}; _]` with `[{integer}; 0]`\n+        //~| ERROR can't compare `[{integer}; Self::HOST_SIZE]` with `[{integer}; 0]`\n     }\n }\n "}, {"sha": "5af82a3e34bf5f3959debe01554ac8da4d833a35", "filename": "tests/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -14,13 +14,13 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error[E0277]: can't compare `[{integer}; _]` with `[{integer}; 0]`\n+error[E0277]: can't compare `[{integer}; Self::HOST_SIZE]` with `[{integer}; 0]`\n   --> $DIR/too_generic_eval_ice.rs:7:30\n    |\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |                              ^^ no implementation for `[{integer}; _] == [{integer}; 0]`\n+   |                              ^^ no implementation for `[{integer}; Self::HOST_SIZE] == [{integer}; 0]`\n    |\n-   = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; _]`\n+   = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; Self::HOST_SIZE]`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n              <&[B] as PartialEq<[A; N]>>\n              <&[T] as PartialEq<Vec<U, A>>>"}, {"sha": "d5991bcf5693df726787ee5cb4f2ed4005fd4cf2", "filename": "tests/ui/debuginfo/debuginfo-type-name-layout-ice-94961-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; SIZE]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "d5991bcf5693df726787ee5cb4f2ed4005fd4cf2", "filename": "tests/ui/debuginfo/debuginfo-type-name-layout-ice-94961-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; SIZE]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "c387046e91008f6ad823e9c233f9b2c038068e35", "filename": "tests/ui/inference/issue-83606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Finference%2Fissue-83606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Finference%2Fissue-83606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-83606.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -6,5 +6,5 @@ fn foo<const N: usize>(_: impl std::fmt::Display) -> [usize; N] {\n \n fn main() {\n     let _ = foo(\"foo\");\n-    //~^ ERROR: type annotations needed for `[usize; _]`\n+    //~^ ERROR: type annotations needed for `[usize; N]`\n }"}, {"sha": "f2ee8692e38a696d111c52ed9659972a7236d3ce", "filename": "tests/ui/inference/issue-83606.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Finference%2Fissue-83606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Finference%2Fissue-83606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-83606.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `[usize; _]`\n+error[E0282]: type annotations needed for `[usize; N]`\n   --> $DIR/issue-83606.rs:8:9\n    |\n LL |     let _ = foo(\"foo\");\n    |         ^\n    |\n help: consider giving this pattern a type, where the the value of const parameter `N` is specified\n    |\n-LL |     let _: [usize; _] = foo(\"foo\");\n+LL |     let _: [usize; N] = foo(\"foo\");\n    |          ++++++++++++\n \n error: aborting due to previous error"}, {"sha": "0d79fc0c770698246470e96fbf2291491cd712bd", "filename": "tests/ui/limits/issue-15919-32.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-15919-32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-15919-32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-15919-32.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[usize; 4294967295]` are too big for the current architecture\n+error: values of the type `[usize; usize::MAX]` are too big for the current architecture\n   --> $DIR/issue-15919-32.rs:9:9\n    |\n LL |     let x = [0usize; 0xffff_ffff];"}, {"sha": "3399d644ede3ae8fe28517d997af8e8368b42b55", "filename": "tests/ui/limits/issue-15919-64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-15919-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-15919-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-15919-64.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[usize; 18446744073709551615]` are too big for the current architecture\n+error: values of the type `[usize; usize::MAX]` are too big for the current architecture\n   --> $DIR/issue-15919-64.rs:9:9\n    |\n LL |     let x = [0usize; 0xffff_ffff_ffff_ffff];"}, {"sha": "56cf5d831bd7e7491d8b75baacd8c05a3b7a5b1e", "filename": "tests/ui/limits/issue-17913.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-17913.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// normalize-stderr-test \"\\[&usize; \\d+\\]\" -> \"[&usize; N]\"\n+// normalize-stderr-test \"\\[&usize; \\d+\\]\" -> \"[&usize; usize::MAX]\"\n // error-pattern: too big for the current architecture\n \n // FIXME https://github.com/rust-lang/rust/issues/59774"}, {"sha": "684db53a9190988b8ab31b73ef7a893fe67ec5ae", "filename": "tests/ui/limits/issue-17913.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-17913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-17913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-17913.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[&usize; N]` are too big for the current architecture\n+error: values of the type `[&usize; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "99f1fdf755aa27c1406e9f48f2f96c90565e6e5e", "filename": "tests/ui/limits/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-55878.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,7 +1,7 @@\n-error[E0080]: values of the type `[u8; SIZE]` are too big for the current architecture\n+error[E0080]: values of the type `[u8; usize::MAX]` are too big for the current architecture\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-note: inside `std::mem::size_of::<[u8; SIZE]>`\n+note: inside `std::mem::size_of::<[u8; usize::MAX]>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n note: inside `main`\n   --> $DIR/issue-55878.rs:7:26"}, {"sha": "44b2be269494aa94a952ee24195d28adda0823f0", "filename": "tests/ui/limits/issue-69485-var-size-diffs-too-large.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-69485-var-size-diffs-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-69485-var-size-diffs-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-69485-var-size-diffs-too-large.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; 18446744073709551615]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n   --> $DIR/issue-69485-var-size-diffs-too-large.rs:6:5\n    |\n LL |     Bug::V([0; !0]);"}, {"sha": "d5991bcf5693df726787ee5cb4f2ed4005fd4cf2", "filename": "tests/ui/limits/issue-75158-64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-75158-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Flimits%2Fissue-75158-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-75158-64.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; 18446744073709551615]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "81aba403d0ba2cecb2bcf17238c207d46bdfd003", "filename": "tests/ui/symbol-names/impl2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fsymbol-names%2Fimpl2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fsymbol-names%2Fimpl2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fimpl2.rs?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -8,9 +8,8 @@ trait Foo {\n }\n \n impl Foo for [u8; 1 + 2] {\n-    #[rustc_def_path] //~ ERROR def-path(<[u8; _] as Foo>::baz)\n-    fn baz() { }\n+    #[rustc_def_path] //~ ERROR def-path(<[u8; 1 + 2] as Foo>::baz)\n+    fn baz() {}\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "0c3205e0108e66e50589e2bab2b702537991b76e", "filename": "tests/ui/symbol-names/impl2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fsymbol-names%2Fimpl2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e46c24a9094636d1e6e03f156a93ecb8443d8f1/tests%2Fui%2Fsymbol-names%2Fimpl2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fimpl2.stderr?ref=9e46c24a9094636d1e6e03f156a93ecb8443d8f1", "patch": "@@ -1,4 +1,4 @@\n-error: def-path(<[u8; _] as Foo>::baz)\n+error: def-path(<[u8; 1 + 2] as Foo>::baz)\n   --> $DIR/impl2.rs:11:5\n    |\n LL |     #[rustc_def_path]"}]}