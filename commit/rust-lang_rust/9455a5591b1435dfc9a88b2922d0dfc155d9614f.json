{"sha": "9455a5591b1435dfc9a88b2922d0dfc155d9614f", "node_id": "C_kwDOAAsO6NoAKDk0NTVhNTU5MWIxNDM1ZGZjOWE4OGIyOTIyZDBkZmMxNTVkOTYxNGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-12T00:49:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-12T00:49:35Z"}, "message": "Auto merge of #108700 - spastorino:new-rpitit-impl-side-2, r=compiler-errors\n\nMake RPITITs simple cases work when using lower_impl_trait_in_trait_to_assoc_ty\n\nr? `@compiler-errors`\n\nIt's probably best reviewed commit by commit.", "tree": {"sha": "790f9be1515148e30ee631d38932c895e5213632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790f9be1515148e30ee631d38932c895e5213632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9455a5591b1435dfc9a88b2922d0dfc155d9614f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9455a5591b1435dfc9a88b2922d0dfc155d9614f", "html_url": "https://github.com/rust-lang/rust/commit/9455a5591b1435dfc9a88b2922d0dfc155d9614f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9455a5591b1435dfc9a88b2922d0dfc155d9614f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542ed2bf72b232b245ece058fc11aebb1ca507d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/542ed2bf72b232b245ece058fc11aebb1ca507d7", "html_url": "https://github.com/rust-lang/rust/commit/542ed2bf72b232b245ece058fc11aebb1ca507d7"}, {"sha": "5daa01e4a62e7ba1ff58ed233983dfa3af3e44b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5daa01e4a62e7ba1ff58ed233983dfa3af3e44b5", "html_url": "https://github.com/rust-lang/rust/commit/5daa01e4a62e7ba1ff58ed233983dfa3af3e44b5"}], "stats": {"total": 199, "additions": 164, "deletions": 35}, "files": [{"sha": "3cd4c4afe866ee8f866ff61664f404ded829e081", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -3048,10 +3048,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             &hir::TyKind::OpaqueDef(item_id, lifetimes, in_trait) => {\n                 let opaque_ty = tcx.hir().item(item_id);\n-                let def_id = item_id.owner_id.to_def_id();\n \n                 match opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n+                        let local_def_id = item_id.owner_id.def_id;\n+                        // If this is an RPITIT and we are using the new RPITIT lowering scheme, we\n+                        // generate the def_id of an associated type for the trait and return as\n+                        // type a projection.\n+                        let def_id = if in_trait && tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n+                            tcx.associated_item_for_impl_trait_in_trait(local_def_id).to_def_id()\n+                        } else {\n+                            local_def_id.to_def_id()\n+                        };\n                         self.impl_trait_ty_to_ty(def_id, lifetimes, origin, in_trait)\n                     }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),"}, {"sha": "6e6f8c1533bfea5a90fa848042d0e344b9353e8f", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -830,7 +830,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && self.interner().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.interner().is_impl_trait_in_trait(proj.def_id)\n         {\n             if let Some((ty, _)) = self.types.get(&proj.def_id) {\n                 return *ty;\n@@ -1995,13 +1995,20 @@ pub(super) fn check_type_bounds<'tcx>(\n     let infcx = tcx.infer_ctxt().build();\n     let ocx = ObligationCtxt::new(&infcx);\n \n-    let impl_ty_span = match tcx.hir().get_by_def_id(impl_ty_def_id) {\n-        hir::Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Type(_, Some(ty)),\n-            ..\n-        }) => ty.span,\n-        hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Type(ty), .. }) => ty.span,\n-        _ => bug!(),\n+    // A synthetic impl Trait for RPITIT desugaring has no HIR, which we currently use to get the\n+    // span for an impl's associated type. Instead, for these, use the def_span for the synthesized\n+    // associated type.\n+    let impl_ty_span = if tcx.opt_rpitit_info(impl_ty.def_id).is_some() {\n+        tcx.def_span(impl_ty_def_id)\n+    } else {\n+        match tcx.hir().get_by_def_id(impl_ty_def_id) {\n+            hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Type(_, Some(ty)),\n+                ..\n+            }) => ty.span,\n+            hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Type(ty), .. }) => ty.span,\n+            _ => bug!(),\n+        }\n     };\n     let assumed_wf_types = ocx.assumed_wf_types(param_env, impl_ty_span, impl_ty_def_id);\n "}, {"sha": "7dce29cc0bbe39b748f60ab0180d9ebcc4917921", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, ImplTraitInTraitData, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -58,17 +58,10 @@ fn opaque_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     opaque_def_id: DefId,\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n+    item_ty: Ty<'tcx>,\n     span: Span,\n-    in_trait: bool,\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n-        let substs = InternalSubsts::identity_for_item(tcx, opaque_def_id);\n-        let item_ty = if in_trait {\n-            tcx.mk_projection(opaque_def_id, substs)\n-        } else {\n-            tcx.mk_opaque(opaque_def_id, substs)\n-        };\n-\n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n         let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n@@ -83,7 +76,18 @@ pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    // If the def_id is about an RPITIT, delegate explicit_item_bounds to the opaque_def_id that\n+    // generated the synthesized associate type.\n+    let rpitit_info = if let Some(ImplTraitInTraitData::Trait { opaque_def_id, .. }) =\n+        tcx.opt_rpitit_info(def_id)\n+    {\n+        Some(opaque_def_id)\n+    } else {\n+        None\n+    };\n+\n+    let bounds_def_id = rpitit_info.unwrap_or(def_id);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(bounds_def_id.expect_local());\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n@@ -94,7 +98,15 @@ pub(super) fn explicit_item_bounds(\n             kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, in_trait, .. }),\n             span,\n             ..\n-        }) => opaque_type_bounds(tcx, def_id, bounds, *span, *in_trait),\n+        }) => {\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+            let item_ty = if *in_trait || rpitit_info.is_some() {\n+                tcx.mk_projection(def_id, substs)\n+            } else {\n+                tcx.mk_opaque(def_id, substs)\n+            };\n+            opaque_type_bounds(tcx, bounds_def_id, bounds, item_ty, *span)\n+        }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }\n }"}, {"sha": "fe44fabf57df9473771de23abc6462117b5e5da9", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -9,7 +9,8 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{\n-    self, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n+    self, ImplTraitInTraitData, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable,\n+    TypeVisitableExt,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n@@ -244,6 +245,24 @@ fn get_path_containing_arg_in_pat<'hir>(\n }\n \n pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>> {\n+    // If we are computing `type_of` the synthesized associated type for an RPITIT in the impl\n+    // side, use `collect_return_position_impl_trait_in_trait_tys` to infer the value of the\n+    // associated type in the impl.\n+    if let Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        match tcx.collect_return_position_impl_trait_in_trait_tys(fn_def_id) {\n+            Ok(map) => {\n+                let assoc_item = tcx.associated_item(def_id);\n+                return ty::EarlyBinder(map[&assoc_item.trait_item_def_id.unwrap()]);\n+            }\n+            Err(_) => {\n+                return ty::EarlyBinder(tcx.ty_error_with_message(\n+                    DUMMY_SP,\n+                    \"Could not collect return position impl trait in trait tys\",\n+                ));\n+            }\n+        }\n+    }\n+\n     let def_id = def_id.expect_local();\n     use rustc_hir::*;\n "}, {"sha": "238142a484527d32f6b58e11c8104f1a9207bc4a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -1104,7 +1104,7 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n // We only encode impl trait in trait when using `lower-impl-trait-in-trait-to-assoc-ty` unstable\n // option.\n fn should_encode_fn_impl_trait_in_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty\n+    if tcx.lower_impl_trait_in_trait_to_assoc_ty()\n         && let Some(assoc_item) = tcx.opt_associated_item(def_id)\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n         && assoc_item.kind == ty::AssocKind::Fn"}, {"sha": "12dc00c322831c1347b10e9720d962f601154fd8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -1333,6 +1333,7 @@ rustc_queries! {\n     /// might want to use `reveal_all()` method to change modes.\n     query param_env(def_id: DefId) -> ty::ParamEnv<'tcx> {\n         desc { |tcx| \"computing normalized predicates of `{}`\", tcx.def_path_str(def_id) }\n+        feedable\n     }\n \n     /// Like `param_env`, but returns the `ParamEnv` in `Reveal::All` mode."}, {"sha": "8dd8f95fcc714985e625f9b4bf34ab41edb54a1d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -2445,6 +2445,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn trait_solver_next(self) -> bool {\n         self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n     }\n+\n+    pub fn lower_impl_trait_in_trait_to_assoc_ty(self) -> bool {\n+        self.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty\n+    }\n+\n+    pub fn is_impl_trait_in_trait(self, def_id: DefId) -> bool {\n+        if self.lower_impl_trait_in_trait_to_assoc_ty() {\n+            self.def_kind(def_id) == DefKind::AssocTy && self.opt_rpitit_info(def_id).is_some()\n+        } else {\n+            self.def_kind(def_id) == DefKind::ImplTraitPlaceholder\n+        }\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {"}, {"sha": "73ee51d5f3af313d025b1690efe051cc37ebadc0", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -243,6 +243,12 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 continue;\n             }\n \n+            // Avoid accessing the HIR for the synthesized associated type generated for RPITITs.\n+            if self.tcx.opt_rpitit_info(id).is_some() {\n+                self.live_symbols.insert(id);\n+                continue;\n+            }\n+\n             // in the case of tuple struct constructors we want to check the item, not the generated\n             // tuple struct constructor function\n             let id = self.struct_constructors.get(&id).copied().unwrap_or(id);"}, {"sha": "209365b70a7fd54cc777f5ac16e2885c50e05a11", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -22,7 +22,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n-            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+            if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 // We collect RPITITs for each trait method's return type and create a\n                 // corresponding associated item using associated_items_for_impl_trait_in_trait\n                 // query.\n@@ -53,7 +53,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n             }\n         }\n         hir::ItemKind::Impl(ref impl_) => {\n-            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+            if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 // We collect RPITITs for each trait method's return type, on the impl side too and\n                 // create a corresponding associated item using\n                 // associated_items_for_impl_trait_in_trait query.\n@@ -301,9 +301,6 @@ fn associated_item_for_impl_trait_in_trait(\n     // There are no inferred outlives for the synthesized associated type.\n     trait_assoc_ty.inferred_outlives_of(&[]);\n \n-    // FIXME implement this.\n-    trait_assoc_ty.explicit_item_bounds(&[]);\n-\n     local_def_id\n }\n \n@@ -315,11 +312,12 @@ fn impl_associated_item_for_impl_trait_in_trait(\n     trait_assoc_def_id: LocalDefId,\n     impl_fn_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let impl_def_id = tcx.local_parent(impl_fn_def_id);\n+    let impl_local_def_id = tcx.local_parent(impl_fn_def_id);\n+    let impl_def_id = impl_local_def_id.to_def_id();\n \n     // FIXME fix the span, we probably want the def_id of the return type of the function\n     let span = tcx.def_span(impl_fn_def_id);\n-    let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n+    let impl_assoc_ty = tcx.at(span).create_def(impl_local_def_id, DefPathData::ImplTraitAssocTy);\n \n     let local_def_id = impl_assoc_ty.def_id();\n     let def_id = local_def_id.to_def_id();\n@@ -344,13 +342,53 @@ fn impl_associated_item_for_impl_trait_in_trait(\n         fn_has_self_parameter: false,\n     });\n \n+    // Copy param_env of the containing function. The synthesized associated type doesn't have\n+    // extra predicates to assume.\n+    impl_assoc_ty.param_env(tcx.param_env(impl_fn_def_id));\n+\n     // Copy impl_defaultness of the containing function.\n     impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n \n-    // Copy generics_of the trait's associated item.\n-    // FIXME: This is not correct, in particular the parent is going to be wrong. So we would need\n-    // to copy from trait_assoc_def_id and adjust things.\n-    impl_assoc_ty.generics_of(tcx.generics_of(trait_assoc_def_id).clone());\n+    // Copy generics_of the trait's associated item but the impl as the parent.\n+    impl_assoc_ty.generics_of({\n+        let trait_assoc_generics = tcx.generics_of(trait_assoc_def_id);\n+        let trait_assoc_parent_count = trait_assoc_generics.parent_count;\n+        let mut params = trait_assoc_generics.params.clone();\n+\n+        let parent_generics = tcx.generics_of(impl_def_id);\n+        let parent_count = parent_generics.parent_count + parent_generics.params.len();\n+\n+        let mut impl_fn_params = tcx.generics_of(impl_fn_def_id).params.clone();\n+\n+        for param in &mut params {\n+            param.index = param.index + parent_count as u32 + impl_fn_params.len() as u32\n+                - trait_assoc_parent_count as u32;\n+        }\n+\n+        impl_fn_params.extend(params);\n+        params = impl_fn_params;\n+\n+        let param_def_id_to_index =\n+            params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+        ty::Generics {\n+            parent: Some(impl_def_id),\n+            parent_count,\n+            params,\n+            param_def_id_to_index,\n+            has_self: false,\n+            has_late_bound_regions: trait_assoc_generics.has_late_bound_regions,\n+        }\n+    });\n+\n+    // There are no predicates for the synthesized associated type.\n+    impl_assoc_ty.explicit_predicates_of(ty::GenericPredicates {\n+        parent: Some(impl_def_id),\n+        predicates: &[],\n+    });\n+\n+    // There are no inferred outlives for the synthesized associated type.\n+    impl_assoc_ty.inferred_outlives_of(&[]);\n \n     local_def_id\n }"}, {"sha": "c8ed1f365f1a8ce216cf48373801f752fe8f8a5c", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -3,8 +3,8 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n-    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, Binder, EarlyBinder, ImplTraitInTraitData, Predicate, PredicateKind, ToPredicate, Ty,\n+    TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -117,6 +117,15 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n+    // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n+    // synthesized associated type doesn't have extra predicates to assume.\n+    let def_id =\n+        if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+            fn_def_id\n+        } else {\n+            def_id\n+        };\n+\n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);"}, {"sha": "ae09d20f6f5b76ae721a5653618b9155abe1d638", "filename": "tests/ui/impl-trait/in-trait/new-lowering-strategy/simple-impl-trait.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9455a5591b1435dfc9a88b2922d0dfc155d9614f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9455a5591b1435dfc9a88b2922d0dfc155d9614f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs?ref=9455a5591b1435dfc9a88b2922d0dfc155d9614f", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn foo() -> impl Sized;\n+}\n+\n+impl Foo for String {\n+    fn foo() -> i32 {\n+        22\n+    }\n+}\n+\n+fn main() {}"}]}