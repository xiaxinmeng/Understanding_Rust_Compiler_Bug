{"sha": "6206c4e927595afcaef0496025512282f847f645", "node_id": "C_kwDOAAsO6NoAKDYyMDZjNGU5Mjc1OTVhZmNhZWYwNDk2MDI1NTEyMjgyZjg0N2Y2NDU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T18:55:39Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T18:57:01Z"}, "message": "Stream object file to disk\n\nThis reduces memory usage and may improve performance slightly.", "tree": {"sha": "baec4420d55d61f9a1aefd0a55f82c657d7db2b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baec4420d55d61f9a1aefd0a55f82c657d7db2b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6206c4e927595afcaef0496025512282f847f645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6206c4e927595afcaef0496025512282f847f645", "html_url": "https://github.com/rust-lang/rust/commit/6206c4e927595afcaef0496025512282f847f645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6206c4e927595afcaef0496025512282f847f645/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7c706306c65527b5b8b9620e34a65d852cd279", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7c706306c65527b5b8b9620e34a65d852cd279", "html_url": "https://github.com/rust-lang/rust/commit/ab7c706306c65527b5b8b9620e34a65d852cd279"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "ff6310bd8af2d46ad6c4f139caceb32281fa25aa", "filename": "src/driver/aot.rs", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6206c4e927595afcaef0496025512282f847f645/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6206c4e927595afcaef0496025512282f847f645/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=6206c4e927595afcaef0496025512282f847f645", "patch": "@@ -1,6 +1,7 @@\n //! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n //! standalone executable.\n \n+use std::fs::File;\n use std::path::PathBuf;\n use std::sync::Arc;\n \n@@ -81,11 +82,10 @@ fn make_module(sess: &Session, backend_config: &BackendConfig, name: String) ->\n     ObjectModule::new(builder)\n }\n \n-fn emit_module(\n+fn emit_cgu(\n     tcx: TyCtxt<'_>,\n     backend_config: &BackendConfig,\n     name: String,\n-    kind: ModuleKind,\n     module: ObjectModule,\n     debug: Option<DebugContext<'_>>,\n     unwind_context: UnwindContext,\n@@ -99,42 +99,29 @@ fn emit_module(\n \n     unwind_context.emit(&mut product);\n \n-    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n-    let obj = product.object.write().unwrap();\n-\n-    tcx.sess.prof.artifact_size(\"object_file\", name.clone(), obj.len().try_into().unwrap());\n-\n-    if let Err(err) = std::fs::write(&tmp_file, obj) {\n-        tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n-    }\n+    let module_regular = emit_module(tcx, product.object, ModuleKind::Regular, name.clone());\n \n     let work_product = if backend_config.disable_incr_cache {\n         None\n     } else if let Some(global_asm_object_file) = &global_asm_object_file {\n         rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n             tcx.sess,\n             &name,\n-            &[(\"o\", &tmp_file), (\"asm.o\", global_asm_object_file)],\n+            &[(\"o\", &module_regular.object.as_ref().unwrap()), (\"asm.o\", global_asm_object_file)],\n         )\n     } else {\n         rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n             tcx.sess,\n             &name,\n-            &[(\"o\", &tmp_file)],\n+            &[(\"o\", &module_regular.object.as_ref().unwrap())],\n         )\n     };\n \n     ModuleCodegenResult {\n-        module_regular: CompiledModule {\n-            name: name.clone(),\n-            kind,\n-            object: Some(tmp_file),\n-            dwarf_object: None,\n-            bytecode: None,\n-        },\n+        module_regular,\n         module_global_asm: global_asm_object_file.map(|global_asm_object_file| CompiledModule {\n             name: format!(\"{name}.asm\"),\n-            kind,\n+            kind: ModuleKind::Regular,\n             object: Some(global_asm_object_file),\n             dwarf_object: None,\n             bytecode: None,\n@@ -143,6 +130,27 @@ fn emit_module(\n     }\n }\n \n+fn emit_module(\n+    tcx: TyCtxt<'_>,\n+    object: cranelift_object::object::write::Object<'_>,\n+    kind: ModuleKind,\n+    name: String,\n+) -> CompiledModule {\n+    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n+    let mut file = match File::create(&tmp_file) {\n+        Ok(file) => file,\n+        Err(err) => tcx.sess.fatal(&format!(\"error creating object file: {}\", err)),\n+    };\n+\n+    if let Err(err) = object.write_stream(&mut file) {\n+        tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n+    }\n+\n+    tcx.sess.prof.artifact_size(\"object_file\", &*name, file.metadata().unwrap().len());\n+\n+    CompiledModule { name, kind, object: Some(tmp_file), dwarf_object: None, bytecode: None }\n+}\n+\n fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCodegenResult {\n     let work_product = cgu.previous_work_product(tcx);\n     let obj_out_regular =\n@@ -261,11 +269,10 @@ fn module_codegen(\n     let debug_context = cx.debug_context;\n     let unwind_context = cx.unwind_context;\n     let codegen_result = tcx.sess.time(\"write object file\", || {\n-        emit_module(\n+        emit_cgu(\n             tcx,\n             &backend_config,\n             cgu.name().as_str().to_string(),\n-            ModuleKind::Regular,\n             module,\n             debug_context,\n             unwind_context,\n@@ -336,27 +343,10 @@ pub(crate) fn run_aot(\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n \n     let allocator_module = if created_alloc_shim {\n-        let name = \"allocator_shim\".to_owned();\n-\n         let mut product = allocator_module.finish();\n         allocator_unwind_context.emit(&mut product);\n \n-        let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n-        let obj = product.object.write().unwrap();\n-\n-        tcx.sess.prof.artifact_size(\"object_file\", &*name, obj.len().try_into().unwrap());\n-\n-        if let Err(err) = std::fs::write(&tmp_file, obj) {\n-            tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n-        }\n-\n-        Some(CompiledModule {\n-            name,\n-            kind: ModuleKind::Allocator,\n-            object: Some(tmp_file),\n-            dwarf_object: None,\n-            bytecode: None,\n-        })\n+        Some(emit_module(tcx, product.object, ModuleKind::Allocator, \"allocator_shim\".to_owned()))\n     } else {\n         None\n     };"}]}