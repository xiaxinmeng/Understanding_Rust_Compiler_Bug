{"sha": "df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "node_id": "C_kwDOAAsO6NoAKGRmNjFmY2FlYzFmZGQzYjk0OWE3NzIxYWJmYWYzN2E4Y2E2ZTE0NGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T07:07:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T07:07:53Z"}, "message": "Auto merge of #108815 - the8472:process-obligations-fast-skip, r=nnethercote\n\nfast path for process_obligations\n\nSpeeds up `keccak` and `cranelift-codegen` in perf.rlo.", "tree": {"sha": "b82eec9041a4bc89771c2f0485dc01169ca390f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b82eec9041a4bc89771c2f0485dc01169ca390f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "html_url": "https://github.com/rust-lang/rust/commit/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85123d2504885e4670d80dab96f4f9629f2be98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/85123d2504885e4670d80dab96f4f9629f2be98b", "html_url": "https://github.com/rust-lang/rust/commit/85123d2504885e4670d80dab96f4f9629f2be98b"}, {"sha": "7cce618d18c8203369d605d1ccedcfda09d58acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cce618d18c8203369d605d1ccedcfda09d58acc", "html_url": "https://github.com/rust-lang/rust/commit/7cce618d18c8203369d605d1ccedcfda09d58acc"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "1d40b8acc666e87f85153f37a7585986d3a84858", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "patch": "@@ -1365,9 +1365,9 @@ dependencies = [\n \n [[package]]\n name = \"ena\"\n-version = \"0.14.1\"\n+version = \"0.14.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b2e5d13ca2353ab7d0230988629def93914a8c4015f621f9b13ed2955614731d\"\n+checksum = \"c533630cf40e9caa44bd91aadc88a75d75a4c3a12b4cfde353cbed41daa1e1f1\"\n dependencies = [\n  \"log\",\n ]"}, {"sha": "f2a904a6654da7bd9fbbb9502973456a6093230a", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "patch": "@@ -9,7 +9,7 @@ edition = \"2021\"\n arrayvec = { version = \"0.7\", default-features = false }\n bitflags = \"1.2.1\"\n cfg-if = \"1.0\"\n-ena = \"0.14.1\"\n+ena = \"0.14.2\"\n indexmap = { version = \"1.9.1\" }\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n libc = \"0.2\""}, {"sha": "27a869eb7cdb013afba153a1e0206df0bfbb6b66", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "patch": "@@ -97,7 +97,17 @@ pub trait ObligationProcessor {\n     type Error: Debug;\n     type OUT: OutcomeTrait<Obligation = Self::Obligation, Error = Error<Self::Obligation, Self::Error>>;\n \n-    fn needs_process_obligation(&self, obligation: &Self::Obligation) -> bool;\n+    /// Implementations can provide a fast-path to obligation-processing\n+    /// by counting the prefix of the passed iterator for which\n+    /// `needs_process_obligation` would return false.\n+    fn skippable_obligations<'a>(\n+        &'a self,\n+        _it: impl Iterator<Item = &'a Self::Obligation>,\n+    ) -> usize {\n+        0\n+    }\n+\n+    fn needs_process_obligation(&self, _obligation: &Self::Obligation) -> bool;\n \n     fn process_obligation(\n         &mut self,\n@@ -416,6 +426,10 @@ impl<O: ForestObligation> ObligationForest<O> {\n         loop {\n             let mut has_changed = false;\n \n+            // This is the super fast path for cheap-to-check conditions.\n+            let mut index =\n+                processor.skippable_obligations(self.nodes.iter().map(|n| &n.obligation));\n+\n             // Note that the loop body can append new nodes, and those new nodes\n             // will then be processed by subsequent iterations of the loop.\n             //\n@@ -424,9 +438,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // `for index in 0..self.nodes.len() { ... }` because the range would\n             // be computed with the initial length, and we would miss the appended\n             // nodes. Therefore we use a `while` loop.\n-            let mut index = 0;\n             while let Some(node) = self.nodes.get_mut(index) {\n-                // This test is extremely hot.\n+                // This is the moderately fast path when the prefix skipping above didn't work out.\n                 if node.state.get() != NodeState::Pending\n                     || !processor.needs_process_obligation(&node.obligation)\n                 {"}, {"sha": "aeb4ddb42125973c12b4bce38f34f967f2c5a3c1", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "patch": "@@ -187,6 +187,16 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.projection_cache.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n+    fn try_type_variables_probe_ref(\n+        &self,\n+        vid: ty::TyVid,\n+    ) -> Option<&type_variable::TypeVariableValue<'tcx>> {\n+        // Uses a read-only view of the unification table, this way we don't\n+        // need an undo log.\n+        self.type_variable_storage.eq_relations_ref().try_probe_value(vid)\n+    }\n+\n     #[inline]\n     fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {\n         self.type_variable_storage.with_log(&mut self.undo_log)\n@@ -1646,6 +1656,28 @@ impl<'tcx> InferCtxt<'tcx> {\n         tcx.const_eval_resolve_for_typeck(param_env_erased, unevaluated, span)\n     }\n \n+    /// The returned function is used in a fast path. If it returns `true` the variable is\n+    /// unchanged, `false` indicates that the status is unknown.\n+    #[inline]\n+    pub fn is_ty_infer_var_definitely_unchanged<'a>(\n+        &'a self,\n+    ) -> (impl Fn(TyOrConstInferVar<'tcx>) -> bool + 'a) {\n+        // This hoists the borrow/release out of the loop body.\n+        let inner = self.inner.try_borrow();\n+\n+        return move |infer_var: TyOrConstInferVar<'tcx>| match (infer_var, &inner) {\n+            (TyOrConstInferVar::Ty(ty_var), Ok(inner)) => {\n+                use self::type_variable::TypeVariableValue;\n+\n+                match inner.try_type_variables_probe_ref(ty_var) {\n+                    Some(TypeVariableValue::Unknown { .. }) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        };\n+    }\n+\n     /// `ty_or_const_infer_var_changed` is equivalent to one of these two:\n     ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)\n     ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)"}, {"sha": "f7ab05b2d498aa3fbbc0b62817a7ab2e2204d5f9", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "patch": "@@ -190,6 +190,11 @@ impl<'tcx> TypeVariableStorage<'tcx> {\n     ) -> TypeVariableTable<'a, 'tcx> {\n         TypeVariableTable { storage: self, undo_log }\n     }\n+\n+    #[inline]\n+    pub(crate) fn eq_relations_ref(&self) -> &ut::UnificationTableStorage<TyVidEqKey<'tcx>> {\n+        &self.eq_relations\n+    }\n }\n \n impl<'tcx> TypeVariableTable<'_, 'tcx> {"}, {"sha": "23754480fcfb0c28793596e34b2e4d77687ea766", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61fcaec1fdd3b949a7721abfaf37a8ca6e144c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=df61fcaec1fdd3b949a7721abfaf37a8ca6e144c", "patch": "@@ -211,6 +211,29 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n     type Error = FulfillmentErrorCode<'tcx>;\n     type OUT = Outcome<Self::Obligation, Self::Error>;\n \n+    /// Compared to `needs_process_obligation` this and its callees\n+    /// contain some optimizations that come at the price of false negatives.\n+    ///\n+    /// They\n+    /// - reduce branching by covering only the most common case\n+    /// - take a read-only view of the unification tables which allows skipping undo_log\n+    ///   construction.\n+    /// - bail out on value-cache misses in ena to avoid pointer chasing\n+    /// - hoist RefCell locking out of the loop\n+    #[inline]\n+    fn skippable_obligations<'b>(\n+        &'b self,\n+        it: impl Iterator<Item = &'b Self::Obligation>,\n+    ) -> usize {\n+        let is_unchanged = self.selcx.infcx.is_ty_infer_var_definitely_unchanged();\n+\n+        it.take_while(|o| match o.stalled_on.as_slice() {\n+            [o] => is_unchanged(*o),\n+            _ => false,\n+        })\n+        .count()\n+    }\n+\n     /// Identifies whether a predicate obligation needs processing.\n     ///\n     /// This is always inlined because it has a single callsite and it is"}]}