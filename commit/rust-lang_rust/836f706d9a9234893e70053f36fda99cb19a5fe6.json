{"sha": "836f706d9a9234893e70053f36fda99cb19a5fe6", "node_id": "C_kwDOAAsO6NoAKDgzNmY3MDZkOWE5MjM0ODkzZTcwMDUzZjM2ZmRhOTljYjE5YTVmZTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-16T04:05:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-16T04:05:55Z"}, "message": "Rollup merge of #100338 - lyming2007:issue-100285-fix, r=petrochenkov\n\nwhen there are 3 or more return statements in the loop\n\nemit the first 3 errors and duplicated diagnostic information\n\tmodified:   compiler/rustc_typeck/src/check/coercion.rs\n\tnew file:   src/test/ui/typeck/issue-100285.rs\n\tnew file:   src/test/ui/typeck/issue-100285.stderr", "tree": {"sha": "e13e0ad77b39bdb9d851ba3bbe51337f708b3c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13e0ad77b39bdb9d851ba3bbe51337f708b3c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/836f706d9a9234893e70053f36fda99cb19a5fe6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+xejCRBK7hj4Ov3rIwAAtAAIADf/1+sVxfA78EnNT4mQ/l9U\n5mH2Bkbbs26RAvMaAIB1E8ZPzZkbhjy5EhccxlzO2L/Iysa0MJ9SQX48aAOxKa/o\nuBjknvpI+IL6tqM+L+UKi1ZttZOtqTXSC0hsELzVVPA3pQD6I2Ah2gsfl2Ne2aPb\nZaEzMVyuTwAnsIcUb5KC02Wc7+Z1cbhVLpLRlKdoM6MI2IbWrLlQcoOwWIS6vvLx\nn9KQDFMbyg7bLL/Jys/ocXINPhu2FRO7Vm4NghUvhKSGP+jXJA8lDIqeIQ/bbogn\n9HHcmdUCb1rlrOrvaX0FD/a4TDsvUtp1LguFLpGVJ/BIcNHKg28pRZQhK9z+x4k=\n=GUXk\n-----END PGP SIGNATURE-----\n", "payload": "tree e13e0ad77b39bdb9d851ba3bbe51337f708b3c10\nparent 3694b7d307b7516757651952b30bb97b6ba5c049\nparent 0471e2780fe528dae8b67ea3448e8ab641e8510e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660622755 +0200\ncommitter GitHub <noreply@github.com> 1660622755 +0200\n\nRollup merge of #100338 - lyming2007:issue-100285-fix, r=petrochenkov\n\nwhen there are 3 or more return statements in the loop\n\nemit the first 3 errors and duplicated diagnostic information\n\tmodified:   compiler/rustc_typeck/src/check/coercion.rs\n\tnew file:   src/test/ui/typeck/issue-100285.rs\n\tnew file:   src/test/ui/typeck/issue-100285.stderr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/836f706d9a9234893e70053f36fda99cb19a5fe6", "html_url": "https://github.com/rust-lang/rust/commit/836f706d9a9234893e70053f36fda99cb19a5fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/836f706d9a9234893e70053f36fda99cb19a5fe6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3694b7d307b7516757651952b30bb97b6ba5c049", "url": "https://api.github.com/repos/rust-lang/rust/commits/3694b7d307b7516757651952b30bb97b6ba5c049", "html_url": "https://github.com/rust-lang/rust/commit/3694b7d307b7516757651952b30bb97b6ba5c049"}, {"sha": "0471e2780fe528dae8b67ea3448e8ab641e8510e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0471e2780fe528dae8b67ea3448e8ab641e8510e", "html_url": "https://github.com/rust-lang/rust/commit/0471e2780fe528dae8b67ea3448e8ab641e8510e"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "da575cb1367b8ea23c164ec96f629275e09db5e9", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/836f706d9a9234893e70053f36fda99cb19a5fe6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836f706d9a9234893e70053f36fda99cb19a5fe6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=836f706d9a9234893e70053f36fda99cb19a5fe6", "patch": "@@ -1594,7 +1594,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let hir::ExprKind::Loop(_, _, _, loop_span) = expr.kind else { return;};\n         let mut span: MultiSpan = vec![loop_span].into();\n         span.push_span_label(loop_span, \"this might have zero elements to iterate on\");\n-        for ret_expr in ret_exprs {\n+        const MAXITER: usize = 3;\n+        let iter = ret_exprs.iter().take(MAXITER);\n+        for ret_expr in iter {\n             span.push_span_label(\n                 ret_expr.span,\n                 \"if the loop doesn't execute, this value would never get returned\",\n@@ -1604,6 +1606,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             span,\n             \"the function expects a value to always be returned, but loops might run zero times\",\n         );\n+        if MAXITER < ret_exprs.len() {\n+            err.note(&format!(\n+                \"if the loop doesn't execute, {} other values would never get returned\",\n+                ret_exprs.len() - MAXITER\n+            ));\n+        }\n         err.help(\n             \"return a value for the case when the loop has zero elements to iterate on, or \\\n            consider changing the return type to account for that possibility\","}, {"sha": "e206469b85f55d54867b43424b70997e3db278d2", "filename": "src/test/ui/typeck/issue-100285.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/836f706d9a9234893e70053f36fda99cb19a5fe6/src%2Ftest%2Fui%2Ftypeck%2Fissue-100285.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836f706d9a9234893e70053f36fda99cb19a5fe6/src%2Ftest%2Fui%2Ftypeck%2Fissue-100285.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100285.rs?ref=836f706d9a9234893e70053f36fda99cb19a5fe6", "patch": "@@ -0,0 +1,22 @@\n+fn foo(n: i32) -> i32 {\n+    for i in 0..0 {\n+    //~^ ERROR: mismatched types [E0308]\n+       if n < 0 {\n+        return i;\n+        } else if n < 10 {\n+          return 1;\n+        } else if n < 20 {\n+          return 2;\n+        } else if n < 30 {\n+          return 3;\n+        } else if n < 40 {\n+          return 4;\n+        } else {\n+          return 5;\n+        }\n+\n+    }\n+    //~| help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n+}\n+\n+fn main() {}"}, {"sha": "42c64b03918c503fe5cfa8952b00405c7e1b615b", "filename": "src/test/ui/typeck/issue-100285.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/836f706d9a9234893e70053f36fda99cb19a5fe6/src%2Ftest%2Fui%2Ftypeck%2Fissue-100285.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/836f706d9a9234893e70053f36fda99cb19a5fe6/src%2Ftest%2Fui%2Ftypeck%2Fissue-100285.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100285.stderr?ref=836f706d9a9234893e70053f36fda99cb19a5fe6", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-100285.rs:2:5\n+   |\n+LL |   fn foo(n: i32) -> i32 {\n+   |                     --- expected `i32` because of return type\n+LL | /     for i in 0..0 {\n+LL | |\n+LL | |        if n < 0 {\n+LL | |         return i;\n+...  |\n+LL | |\n+LL | |     }\n+   | |_____^ expected `i32`, found `()`\n+   |\n+note: the function expects a value to always be returned, but loops might run zero times\n+  --> $DIR/issue-100285.rs:2:5\n+   |\n+LL |     for i in 0..0 {\n+   |     ^^^^^^^^^^^^^ this might have zero elements to iterate on\n+...\n+LL |         return i;\n+   |         -------- if the loop doesn't execute, this value would never get returned\n+LL |         } else if n < 10 {\n+LL |           return 1;\n+   |           -------- if the loop doesn't execute, this value would never get returned\n+LL |         } else if n < 20 {\n+LL |           return 2;\n+   |           -------- if the loop doesn't execute, this value would never get returned\n+   = note: if the loop doesn't execute, 3 other values would never get returned\n+   = help: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}