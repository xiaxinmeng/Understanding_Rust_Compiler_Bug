{"sha": "52ff863abcc8a6cb06689b25590616982504d916", "node_id": "C_kwDOAAsO6NoAKDUyZmY4NjNhYmNjOGE2Y2IwNjY4OWIyNTU5MDYxNjk4MjUwNGQ5MTY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-19T16:53:08Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-19T16:53:08Z"}, "message": "Teach `Callable` about closures properly", "tree": {"sha": "a8fc55e2835bb8f897af746ae1cbcee92973775e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8fc55e2835bb8f897af746ae1cbcee92973775e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ff863abcc8a6cb06689b25590616982504d916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ff863abcc8a6cb06689b25590616982504d916", "html_url": "https://github.com/rust-lang/rust/commit/52ff863abcc8a6cb06689b25590616982504d916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ff863abcc8a6cb06689b25590616982504d916/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba26af9f1af8566755f97259124e0c8d78b6c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba26af9f1af8566755f97259124e0c8d78b6c85", "html_url": "https://github.com/rust-lang/rust/commit/eba26af9f1af8566755f97259124e0c8d78b6c85"}], "stats": {"total": 99, "additions": 77, "deletions": 22}, "files": [{"sha": "3f62a2cd334c30440d321029a325ec76689e282c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/52ff863abcc8a6cb06689b25590616982504d916/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ff863abcc8a6cb06689b25590616982504d916/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=52ff863abcc8a6cb06689b25590616982504d916", "patch": "@@ -62,9 +62,9 @@ use hir_ty::{\n     subst_prefix,\n     traits::FnTrait,\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n-    DebruijnIndex, GenericArgData, InEnvironment, Interner, ParamKind, QuantifiedWhereClause,\n-    Scalar, Solution, Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt,\n-    TyKind, TyVariableKind, WhereClause,\n+    ClosureId, DebruijnIndex, GenericArgData, InEnvironment, Interner, ParamKind,\n+    QuantifiedWhereClause, Scalar, Solution, Substitution, TraitEnvironment, TraitRefExt, Ty,\n+    TyBuilder, TyDefId, TyExt, TyKind, TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use nameres::diagnostics::DefDiagnosticKind;\n@@ -2819,10 +2819,14 @@ impl Type {\n     }\n \n     pub fn as_callable(&self, db: &dyn HirDatabase) -> Option<Callable> {\n-        let def = self.ty.callable_def(db);\n+        let callee = match self.ty.kind(Interner) {\n+            TyKind::Closure(id, _) => Callee::Closure(*id),\n+            TyKind::Function(_) => Callee::FnPtr,\n+            _ => Callee::Def(self.ty.callable_def(db)?),\n+        };\n \n         let sig = self.ty.callable_sig(db)?;\n-        Some(Callable { ty: self.clone(), sig, def, is_bound_method: false })\n+        Some(Callable { ty: self.clone(), sig, callee, is_bound_method: false })\n     }\n \n     pub fn is_closure(&self) -> bool {\n@@ -3265,34 +3269,43 @@ impl Type {\n     }\n }\n \n-// FIXME: closures\n #[derive(Debug)]\n pub struct Callable {\n     ty: Type,\n     sig: CallableSig,\n-    def: Option<CallableDefId>,\n+    callee: Callee,\n     pub(crate) is_bound_method: bool,\n }\n \n+#[derive(Debug)]\n+enum Callee {\n+    Def(CallableDefId),\n+    Closure(ClosureId),\n+    FnPtr,\n+}\n+\n pub enum CallableKind {\n     Function(Function),\n     TupleStruct(Struct),\n     TupleEnumVariant(Variant),\n     Closure,\n+    FnPtr,\n }\n \n impl Callable {\n     pub fn kind(&self) -> CallableKind {\n-        match self.def {\n-            Some(CallableDefId::FunctionId(it)) => CallableKind::Function(it.into()),\n-            Some(CallableDefId::StructId(it)) => CallableKind::TupleStruct(it.into()),\n-            Some(CallableDefId::EnumVariantId(it)) => CallableKind::TupleEnumVariant(it.into()),\n-            None => CallableKind::Closure,\n+        use Callee::*;\n+        match self.callee {\n+            Def(CallableDefId::FunctionId(it)) => CallableKind::Function(it.into()),\n+            Def(CallableDefId::StructId(it)) => CallableKind::TupleStruct(it.into()),\n+            Def(CallableDefId::EnumVariantId(it)) => CallableKind::TupleEnumVariant(it.into()),\n+            Closure(_) => CallableKind::Closure,\n+            FnPtr => CallableKind::FnPtr,\n         }\n     }\n     pub fn receiver_param(&self, db: &dyn HirDatabase) -> Option<ast::SelfParam> {\n-        let func = match self.def {\n-            Some(CallableDefId::FunctionId(it)) if self.is_bound_method => it,\n+        let func = match self.callee {\n+            Callee::Def(CallableDefId::FunctionId(it)) if self.is_bound_method => it,\n             _ => return None,\n         };\n         let src = func.lookup(db.upcast()).source(db.upcast());\n@@ -3312,18 +3325,30 @@ impl Callable {\n             .iter()\n             .skip(if self.is_bound_method { 1 } else { 0 })\n             .map(|ty| self.ty.derived(ty.clone()));\n-        let patterns = match self.def {\n-            Some(CallableDefId::FunctionId(func)) => {\n+        let map_param = |it: ast::Param| it.pat().map(Either::Right);\n+        let patterns = match self.callee {\n+            Callee::Def(CallableDefId::FunctionId(func)) => {\n                 let src = func.lookup(db.upcast()).source(db.upcast());\n                 src.value.param_list().map(|param_list| {\n                     param_list\n                         .self_param()\n                         .map(|it| Some(Either::Left(it)))\n                         .filter(|_| !self.is_bound_method)\n                         .into_iter()\n-                        .chain(param_list.params().map(|it| it.pat().map(Either::Right)))\n+                        .chain(param_list.params().map(map_param))\n                 })\n             }\n+            Callee::Closure(closure_id) => match closure_source(db, closure_id) {\n+                Some(src) => src.param_list().map(|param_list| {\n+                    param_list\n+                        .self_param()\n+                        .map(|it| Some(Either::Left(it)))\n+                        .filter(|_| !self.is_bound_method)\n+                        .into_iter()\n+                        .chain(param_list.params().map(map_param))\n+                }),\n+                None => None,\n+            },\n             _ => None,\n         };\n         patterns.into_iter().flatten().chain(iter::repeat(None)).zip(types).collect()\n@@ -3333,6 +3358,18 @@ impl Callable {\n     }\n }\n \n+fn closure_source(db: &dyn HirDatabase, closure: ClosureId) -> Option<ast::ClosureExpr> {\n+    let (owner, expr_id) = db.lookup_intern_closure(closure.into());\n+    let (_, source_map) = db.body_with_source_map(owner);\n+    let ast = source_map.expr_syntax(expr_id).ok()?;\n+    let root = ast.file_syntax(db.upcast());\n+    let expr = ast.value.to_node(&root);\n+    match expr {\n+        ast::Expr::ClosureExpr(it) => Some(it),\n+        _ => None,\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum BindingMode {\n     Move,"}, {"sha": "47f1a08b6fbb06e3a5b2e0a5df5ab1716c6b8664", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52ff863abcc8a6cb06689b25590616982504d916/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ff863abcc8a6cb06689b25590616982504d916/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=52ff863abcc8a6cb06689b25590616982504d916", "patch": "@@ -1169,6 +1169,23 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn param_hints_on_closure() {\n+        check_params(\n+            r#\"\n+fn main() {\n+    let clo = |a: u8, b: u8| a + b;\n+    clo(\n+        1,\n+      //^ a\n+        2,\n+      //^ b\n+    );\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn param_name_similar_to_fn_name_still_hints() {\n         check_params(\n@@ -2000,7 +2017,8 @@ fn main() {\n \n     ;\n \n-    let _: i32 = multiply(1, 2);\n+    let _: i32 = multiply(1,  2);\n+                        //^ a ^ b\n     let multiply_ref = &multiply;\n       //^^^^^^^^^^^^ &|i32, i32| -> i32\n "}, {"sha": "cb38f48f32a3e427ae0e40ef1e2f3e512af3451f", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ff863abcc8a6cb06689b25590616982504d916/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ff863abcc8a6cb06689b25590616982504d916/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=52ff863abcc8a6cb06689b25590616982504d916", "patch": "@@ -149,7 +149,7 @@ fn signature_help_for_call(\n                 variant.name(db)\n             );\n         }\n-        hir::CallableKind::Closure => (),\n+        hir::CallableKind::Closure | hir::CallableKind::FnPtr => (),\n     }\n \n     res.signature.push('(');\n@@ -189,7 +189,7 @@ fn signature_help_for_call(\n         hir::CallableKind::Function(func) if callable.return_type().contains_unknown() => {\n             render(func.ret_type(db))\n         }\n-        hir::CallableKind::Function(_) | hir::CallableKind::Closure => {\n+        hir::CallableKind::Function(_) | hir::CallableKind::Closure | hir::CallableKind::FnPtr => {\n             render(callable.return_type())\n         }\n         hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => {}\n@@ -914,8 +914,8 @@ fn main() {\n }\n         \"#,\n             expect![[r#\"\n-                (S) -> i32\n-                 ^\n+                (s: S) -> i32\n+                 ^^^^\n             \"#]],\n         )\n     }"}]}