{"sha": "29302a204c1f5a1ac1c114cbdb17c32a24da8367", "node_id": "C_kwDOAAsO6NoAKDI5MzAyYTIwNGMxZjVhMWFjMWMxMTRjYmRiMTdjMzJhMjRkYTgzNjc", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-01T18:01:04Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-01T23:56:23Z"}, "message": "Relax implicit `W: Sized` bound on `LineWriter<W>`", "tree": {"sha": "70e311649a696a4bb481d5de1720a088258330bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e311649a696a4bb481d5de1720a088258330bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29302a204c1f5a1ac1c114cbdb17c32a24da8367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29302a204c1f5a1ac1c114cbdb17c32a24da8367", "html_url": "https://github.com/rust-lang/rust/commit/29302a204c1f5a1ac1c114cbdb17c32a24da8367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29302a204c1f5a1ac1c114cbdb17c32a24da8367/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49753373be6a4c23635d92c5fcebb60379d734f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49753373be6a4c23635d92c5fcebb60379d734f", "html_url": "https://github.com/rust-lang/rust/commit/a49753373be6a4c23635d92c5fcebb60379d734f"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "3d4ae7041932255181e9ed06ca456b50862c5c75", "filename": "library/std/src/io/buffered/linewriter.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/29302a204c1f5a1ac1c114cbdb17c32a24da8367/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29302a204c1f5a1ac1c114cbdb17c32a24da8367/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs?ref=29302a204c1f5a1ac1c114cbdb17c32a24da8367", "patch": "@@ -64,7 +64,7 @@ use crate::io::{self, buffered::LineWriterShim, BufWriter, IntoInnerError, IoSli\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct LineWriter<W: Write> {\n+pub struct LineWriter<W: ?Sized + Write> {\n     inner: BufWriter<W>,\n }\n \n@@ -109,27 +109,6 @@ impl<W: Write> LineWriter<W> {\n         LineWriter { inner: BufWriter::with_capacity(capacity, inner) }\n     }\n \n-    /// Gets a reference to the underlying writer.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// use std::io::LineWriter;\n-    ///\n-    /// fn main() -> std::io::Result<()> {\n-    ///     let file = File::create(\"poem.txt\")?;\n-    ///     let file = LineWriter::new(file);\n-    ///\n-    ///     let reference = file.get_ref();\n-    ///     Ok(())\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get_ref(&self) -> &W {\n-        self.inner.get_ref()\n-    }\n-\n     /// Gets a mutable reference to the underlying writer.\n     ///\n     /// Caution must be taken when calling methods on the mutable reference\n@@ -184,8 +163,31 @@ impl<W: Write> LineWriter<W> {\n     }\n }\n \n+impl<W: ?Sized + Write> LineWriter<W> {\n+    /// Gets a reference to the underlying writer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// use std::io::LineWriter;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let file = File::create(\"poem.txt\")?;\n+    ///     let file = LineWriter::new(file);\n+    ///\n+    ///     let reference = file.get_ref();\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn get_ref(&self) -> &W {\n+        self.inner.get_ref()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W: Write> Write for LineWriter<W> {\n+impl<W: ?Sized + Write> Write for LineWriter<W> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         LineWriterShim::new(&mut self.inner).write(buf)\n     }\n@@ -216,7 +218,7 @@ impl<W: Write> Write for LineWriter<W> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W: Write> fmt::Debug for LineWriter<W>\n+impl<W: ?Sized + Write> fmt::Debug for LineWriter<W>\n where\n     W: fmt::Debug,\n {"}, {"sha": "f2a55da05b22eb5368b33403580c7b81d7242027", "filename": "library/std/src/io/buffered/linewritershim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29302a204c1f5a1ac1c114cbdb17c32a24da8367/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29302a204c1f5a1ac1c114cbdb17c32a24da8367/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs?ref=29302a204c1f5a1ac1c114cbdb17c32a24da8367", "patch": "@@ -11,11 +11,11 @@ use crate::sys_common::memchr;\n /// `BufWriters` to be temporarily given line-buffering logic; this is what\n /// enables Stdout to be alternately in line-buffered or block-buffered mode.\n #[derive(Debug)]\n-pub struct LineWriterShim<'a, W: Write> {\n+pub struct LineWriterShim<'a, W: ?Sized + Write> {\n     buffer: &'a mut BufWriter<W>,\n }\n \n-impl<'a, W: Write> LineWriterShim<'a, W> {\n+impl<'a, W: ?Sized + Write> LineWriterShim<'a, W> {\n     pub fn new(buffer: &'a mut BufWriter<W>) -> Self {\n         Self { buffer }\n     }\n@@ -49,7 +49,7 @@ impl<'a, W: Write> LineWriterShim<'a, W> {\n     }\n }\n \n-impl<'a, W: Write> Write for LineWriterShim<'a, W> {\n+impl<'a, W: ?Sized + Write> Write for LineWriterShim<'a, W> {\n     /// Write some data into this BufReader with line buffering. This means\n     /// that, if any newlines are present in the data, the data up to the last\n     /// newline is sent directly to the underlying writer, and data after it"}]}