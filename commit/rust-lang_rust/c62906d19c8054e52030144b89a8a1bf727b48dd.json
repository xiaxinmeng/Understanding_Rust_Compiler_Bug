{"sha": "c62906d19c8054e52030144b89a8a1bf727b48dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MjkwNmQxOWM4MDU0ZTUyMDMwMTQ0Yjg5YThhMWJmNzI3YjQ4ZGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T16:41:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T16:41:36Z"}, "message": "rollup merge of #21943: hugwijst/extctxt_ufcs\n\nAdd `QPath` construction support to `ExtCtxt`. Allows compiler plugins to generate calls with UFCS.", "tree": {"sha": "3d71c1864a3a1b60bf587a86d1c75cbd75d84632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d71c1864a3a1b60bf587a86d1c75cbd75d84632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62906d19c8054e52030144b89a8a1bf727b48dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62906d19c8054e52030144b89a8a1bf727b48dd", "html_url": "https://github.com/rust-lang/rust/commit/c62906d19c8054e52030144b89a8a1bf727b48dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62906d19c8054e52030144b89a8a1bf727b48dd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c41655b07688c261a95f0e7b957c200d981c9c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41655b07688c261a95f0e7b957c200d981c9c34", "html_url": "https://github.com/rust-lang/rust/commit/c41655b07688c261a95f0e7b957c200d981c9c34"}, {"sha": "6f872113ab05c0a23a8784e54d22b9e0641dde41", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f872113ab05c0a23a8784e54d22b9e0641dde41", "html_url": "https://github.com/rust-lang/rust/commit/6f872113ab05c0a23a8784e54d22b9e0641dde41"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "5bfd4a9f6111c6a48f4564f2d578eac979c1c83d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c62906d19c8054e52030144b89a8a1bf727b48dd/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62906d19c8054e52030144b89a8a1bf727b48dd/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c62906d19c8054e52030144b89a8a1bf727b48dd", "patch": "@@ -40,6 +40,18 @@ pub trait AstBuilder {\n                 bindings: Vec<P<ast::TypeBinding>> )\n         -> ast::Path;\n \n+    fn qpath(&self, self_type: P<ast::Ty>,\n+             trait_ref: P<ast::TraitRef>,\n+             ident: ast::Ident )\n+        -> P<ast::QPath>;\n+    fn qpath_all(&self, self_type: P<ast::Ty>,\n+                trait_ref: P<ast::TraitRef>,\n+                ident: ast::Ident,\n+                lifetimes: Vec<ast::Lifetime>,\n+                types: Vec<P<ast::Ty>>,\n+                bindings: Vec<P<ast::TypeBinding>> )\n+        -> P<ast::QPath>;\n+\n     // types\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n@@ -102,6 +114,7 @@ pub trait AstBuilder {\n     // expressions\n     fn expr(&self, span: Span, node: ast::Expr_) -> P<ast::Expr>;\n     fn expr_path(&self, path: ast::Path) -> P<ast::Expr>;\n+    fn expr_qpath(&self, span: Span, qpath: P<ast::QPath>) -> P<ast::Expr>;\n     fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr>;\n \n     fn expr_self(&self, span: Span) -> P<ast::Expr>;\n@@ -330,6 +343,44 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n+    /// Constructs a qualified path.\n+    ///\n+    /// Constructs a path like `<self_type as trait_ref>::ident`.\n+    fn qpath(&self,\n+             self_type: P<ast::Ty>,\n+             trait_ref: P<ast::TraitRef>,\n+             ident: ast::Ident)\n+             -> P<ast::QPath> {\n+        self.qpath_all(self_type, trait_ref, ident, Vec::new(), Vec::new(), Vec::new())\n+    }\n+\n+    /// Constructs a qualified path.\n+    ///\n+    /// Constructs a path like `<self_type as trait_ref>::ident<a, T, A=Bar>`.\n+    fn qpath_all(&self,\n+                 self_type: P<ast::Ty>,\n+                 trait_ref: P<ast::TraitRef>,\n+                 ident: ast::Ident,\n+                 lifetimes: Vec<ast::Lifetime>,\n+                 types: Vec<P<ast::Ty>>,\n+                 bindings: Vec<P<ast::TypeBinding>> )\n+                 -> P<ast::QPath> {\n+        let segment = ast::PathSegment {\n+            identifier: ident,\n+            parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+                lifetimes: lifetimes,\n+                types: OwnedSlice::from_vec(types),\n+                bindings: OwnedSlice::from_vec(bindings),\n+            })\n+        };\n+\n+        P(ast::QPath {\n+            self_type: self_type,\n+            trait_ref: trait_ref,\n+            item_path: segment,\n+        })\n+    }\n+\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy {\n         ast::MutTy {\n             ty: ty,\n@@ -554,6 +605,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(path.span, ast::ExprPath(path))\n     }\n \n+    /// Constructs a QPath expression.\n+    fn expr_qpath(&self, span: Span, qpath: P<ast::QPath>) -> P<ast::Expr> {\n+        self.expr(span, ast::ExprQPath(qpath))\n+    }\n+\n     fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr> {\n         self.expr_path(self.path_ident(span, id))\n     }"}]}