{"sha": "5b2f6c7302cd81040d77e35aabac376bc33e4512", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMmY2YzczMDJjZDgxMDQwZDc3ZTM1YWFiYWMzNzZiYzMzZTQ1MTI=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-30T19:08:07Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-30T20:01:02Z"}, "message": "Consume MirVisitor changes and use more accurate spans for region renumbering", "tree": {"sha": "e81237e891a344b64dc8e45109c09da6d7914563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81237e891a344b64dc8e45109c09da6d7914563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2f6c7302cd81040d77e35aabac376bc33e4512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2f6c7302cd81040d77e35aabac376bc33e4512", "html_url": "https://github.com/rust-lang/rust/commit/5b2f6c7302cd81040d77e35aabac376bc33e4512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2f6c7302cd81040d77e35aabac376bc33e4512/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "html_url": "https://github.com/rust-lang/rust/commit/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "0793bdabf0ba90d5326b1e56f22b9d2369ad5251", "filename": "src/librustc_mir/transform/nll.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5b2f6c7302cd81040d77e35aabac376bc33e4512/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2f6c7302cd81040d77e35aabac376bc33e4512/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll.rs?ref=5b2f6c7302cd81040d77e35aabac376bc33e4512", "patch": "@@ -12,19 +12,19 @@ use rustc::ty::TypeFoldable;\n use rustc::ty::subst::Substs;\n use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n-use rustc::mir::visit::MutVisitor;\n+use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::infer::{self, InferCtxt};\n use syntax_pos::Span;\n \n #[allow(dead_code)]\n struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: InferCtxt<'a, 'gcx, 'tcx>,\n-    source: Mir<'tcx>\n+    source: &'a Mir<'tcx>\n }\n \n impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n-    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>, source: Mir<'tcx>) -> Self {\n+    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>, source: &'a Mir<'tcx>) -> Self {\n         NLLVisitor {\n             infcx: infcx,\n             source: source,\n@@ -38,28 +38,29 @@ impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn span_from_location<'tcx>(source: Mir<'tcx>, location: Location) -> Span {\n+fn span_from_location<'tcx>(source: &Mir<'tcx>, location: Location) -> Span {\n     source[location.block].statements[location.statement_index].source_info.span\n }\n \n impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, lookup: Lookup) {\n         let old_ty = *ty;\n-        // FIXME: Nashenas88 - span should be narrowed down\n-        *ty = self.renumber_regions(&old_ty, self.source.span);\n+        let span = match lookup {\n+            Lookup::Loc(location) => span_from_location(self.source, location),\n+            Lookup::Src(source_info) => source_info.span,\n+        };\n+        *ty = self.renumber_regions(&old_ty, span);\n     }\n \n-    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) {\n-        // FIXME: Nashenas88 - span should be narrowed down\n-        *substs = self.renumber_regions(&{*substs}, self.source.span);\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n+        *substs = self.renumber_regions(&{*substs}, span_from_location(self.source, location));\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         match *rvalue {\n             Rvalue::Ref(ref mut r, _, _) => {\n-                let span = span_from_location(location);\n                 let old_r = *r;\n-                *r = self.renumber_regions(&old_r, span);\n+                *r = self.renumber_regions(&old_r, span_from_location(self.source, location));\n             }\n             Rvalue::Use(..) |\n             Rvalue::Repeat(..) |\n@@ -78,9 +79,9 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_closure_substs(&mut self,\n-                            substs: &mut ClosureSubsts<'tcx>) {\n-        // FIXME: Nashenas88 - span should be narrowed down\n-        *substs = self.renumber_regions(substs, self.source.span);\n+                            substs: &mut ClosureSubsts<'tcx>,\n+                            location: Location) {\n+        *substs = self.renumber_regions(substs, span_from_location(self.source, location));\n     }\n \n     fn visit_statement(&mut self,\n@@ -107,11 +108,15 @@ impl MirPass for NLL {\n         }\n \n         tcx.infer_ctxt().enter(|infcx| {\n-            let mut visitor = NLLVisitor::new(infcx, mir.clone());\n             // Clone mir so we can mutate it without disturbing the rest\n             // of the compiler\n-            let mut mir = mir.clone();\n-            visitor.visit_mir(&mut mir);\n+            let mut renumbered_mir = mir.clone();\n+\n+            // Note that we're using the passed-in mir for the visitor. This is\n+            // so we can lookup locations during traversal without worrying about\n+            // maintaing both a mutable and immutable reference to the same object\n+            let mut visitor = NLLVisitor::new(infcx, &mir);\n+            visitor.visit_mir(&mut renumbered_mir);\n         })\n     }\n }\n\\ No newline at end of file"}]}