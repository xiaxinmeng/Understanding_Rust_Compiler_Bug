{"sha": "fa14f797f32acbea481989371f6c32739975f160", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMTRmNzk3ZjMyYWNiZWE0ODE5ODkzNzFmNmMzMjczOTk3NWYxNjA=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-10T02:03:23Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-10T07:07:58Z"}, "message": "Reword", "tree": {"sha": "4a7988a7df6cf688d9e725f4ae6e28faffb4938a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7988a7df6cf688d9e725f4ae6e28faffb4938a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa14f797f32acbea481989371f6c32739975f160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa14f797f32acbea481989371f6c32739975f160", "html_url": "https://github.com/rust-lang/rust/commit/fa14f797f32acbea481989371f6c32739975f160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa14f797f32acbea481989371f6c32739975f160/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74bda1075757cd00f72a918e2d7fdaf47f85c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74bda1075757cd00f72a918e2d7fdaf47f85c2d", "html_url": "https://github.com/rust-lang/rust/commit/c74bda1075757cd00f72a918e2d7fdaf47f85c2d"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "a192dc6d6ea9d81e81b110af06680f0b109b8f0e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fa14f797f32acbea481989371f6c32739975f160/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa14f797f32acbea481989371f6c32739975f160/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=fa14f797f32acbea481989371f6c32739975f160", "patch": "@@ -845,33 +845,34 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         let kind = if is_closure { \"closure\" } else { \"function\" };\n \n-        let args_str = |n| format!(\n-                \"{} argument{}\",\n+        let args_str = |n, distinct| format!(\n+                \"{} {}argument{}\",\n                 n,\n-                if n == 1 { \"\" } else { \"s\" }\n+                if distinct && n >= 2 { \"distinct \" } else { \"\" },\n+                if n == 1 { \"\" } else { \"s\" },\n             );\n \n         let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n-            \"{} takes {}, but {} {} required\",\n+            \"{} is expected to take {}, but it takes {}\",\n             kind,\n             if expected_tuple.is_some() {\n-                Cow::from(\"multiple arguments\")\n+                Cow::from(\"a single tuple as argument\")\n             } else {\n-                Cow::from(args_str(found))\n+                Cow::from(args_str(expected, false))\n             },\n             if expected_tuple.is_some() {\n-                Cow::from(\"a tuple argument\")\n+                args_str(found, true)\n             } else {\n-                Cow::from(args_str(expected))\n+                args_str(found, false)\n             },\n-            if expected == 1 { \"is\" } else { \"are\" });\n+        );\n \n         err.span_label(\n             span,\n             format!(\n                 \"expected {} that takes {}{}\",\n                 kind,\n-                args_str(expected),\n+                args_str(expected, false),\n                 if let Some(n) = expected_tuple {\n                     assert!(expected == 1);\n                     Cow::from(format!(\", a {}-tuple\", n))\n@@ -884,7 +885,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(span) = found_span {\n             if let (Some(expected_tuple), Some((pats, tys))) = (expected_tuple, closure_args) {\n                 if expected_tuple != found || pats.len() != found {\n-                    err.span_label(span, format!(\"takes {}\", args_str(found)));\n+                    err.span_label(span, format!(\"takes {}\", args_str(found, true)));\n                 } else {\n                     let sugg = format!(\n                         \"|({}){}|\",\n@@ -908,7 +909,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     err.span_suggestion(span, \"consider changing to\", sugg);\n                 }\n             } else {\n-                err.span_label(span, format!(\"takes {}\", args_str(found)));\n+                err.span_label(span, format!(\"takes {}\", args_str(found, false)));\n             }\n         }\n "}, {"sha": "8f508ade68ca1ad732068885626bc3a439cac842", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa14f797f32acbea481989371f6c32739975f160/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa14f797f32acbea481989371f6c32739975f160/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=fa14f797f32acbea481989371f6c32739975f160", "patch": "@@ -1,12 +1,12 @@\n-error[E0593]: closure takes 0 arguments, but 2 arguments are required\n+error[E0593]: closure is expected to take 2 arguments, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:15:15\n    |\n 15 |     [1, 2, 3].sort_by(|| panic!());\n    |               ^^^^^^^ -- takes 0 arguments\n    |               |\n    |               expected closure that takes 2 arguments\n \n-error[E0593]: closure takes 1 argument, but 2 arguments are required\n+error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:16:15\n    |\n 16 |     [1, 2, 3].sort_by(|tuple| panic!());\n@@ -23,15 +23,15 @@ error[E0308]: mismatched types\n    = note: expected type `&{integer}`\n               found type `(_, _)`\n \n-error[E0593]: closure takes 1 argument, but 2 arguments are required\n+error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:17:15\n    |\n 17 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n    |               ^^^^^^^ ----------------- takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n-error[E0593]: closure takes 0 arguments, but 1 argument is required\n+error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:18:5\n    |\n 18 |     f(|| panic!());\n@@ -41,27 +41,27 @@ error[E0593]: closure takes 0 arguments, but 1 argument is required\n    |\n    = note: required by `f`\n \n-error[E0593]: closure takes multiple arguments, but a tuple argument is required\n+error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:20:53\n    |\n 20 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n    |                                                     ^^^ ------ help: consider changing to: `|(i, x)|`\n    |                                                     |\n    |                                                     expected closure that takes 1 argument, a 2-tuple\n \n-error[E0593]: closure takes multiple arguments, but a tuple argument is required\n+error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:21:53\n    |\n 21 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n    |                                                     ^^^ ------------- help: consider changing to: `|(i, x): (usize, _)|`\n    |                                                     |\n    |                                                     expected closure that takes 1 argument, a 2-tuple\n \n-error[E0593]: closure takes multiple arguments, but a tuple argument is required\n+error[E0593]: closure is expected to take a single tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:22:53\n    |\n 22 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n-   |                                                     ^^^ --------- takes 3 arguments\n+   |                                                     ^^^ --------- takes 3 distinct arguments\n    |                                                     |\n    |                                                     expected closure that takes 1 argument, a 2-tuple\n "}]}