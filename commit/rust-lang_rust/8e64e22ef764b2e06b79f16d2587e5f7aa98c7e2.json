{"sha": "8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjRlMjJlZjc2NGIyZTA2Yjc5ZjE2ZDI1ODdlNWY3YWE5OGM3ZTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-27T15:43:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-27T15:43:24Z"}, "message": "implement calling of `const fn`-methods in true constants", "tree": {"sha": "30538b6c9c114089578488c8eb1929d32af99b74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30538b6c9c114089578488c8eb1929d32af99b74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "html_url": "https://github.com/rust-lang/rust/commit/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5aa92a0df5cd90ed2dc364e0d335c87b23355bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5aa92a0df5cd90ed2dc364e0d335c87b23355bf", "html_url": "https://github.com/rust-lang/rust/commit/e5aa92a0df5cd90ed2dc364e0d335c87b23355bf"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "276eaa36a015121d68e55be4c7effb34c96be67a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "patch": "@@ -395,6 +395,7 @@ pub enum ErrKind {\n     InvalidOpForUintInt(hir::BinOp_),\n     NegateOn(ConstVal),\n     NotOn(ConstVal),\n+    CallOn(ConstVal),\n \n     NegateWithOverflow(i64),\n     AddiWithOverflow(i64, i64),\n@@ -411,6 +412,7 @@ pub enum ErrKind {\n     ShiftRightWithOverflow,\n     MissingStructField,\n     NonConstPath,\n+    UnimplementedConstVal(&'static str),\n     UnresolvedPath,\n     ExpectedConstTuple,\n     ExpectedConstStruct,\n@@ -435,6 +437,7 @@ impl ConstEvalErr {\n             InvalidOpForUintInt(..) => \"can't do this op on a usize and isize\".into_cow(),\n             NegateOn(ref const_val) => format!(\"negate on {}\", const_val.description()).into_cow(),\n             NotOn(ref const_val) => format!(\"not on {}\", const_val.description()).into_cow(),\n+            CallOn(ref const_val) => format!(\"call on {}\", const_val.description()).into_cow(),\n \n             NegateWithOverflow(..) => \"attempted to negate with overflow\".into_cow(),\n             AddiWithOverflow(..) => \"attempted to add with overflow\".into_cow(),\n@@ -451,6 +454,8 @@ impl ConstEvalErr {\n             ShiftRightWithOverflow => \"attempted right shift with overflow\".into_cow(),\n             MissingStructField  => \"nonexistent struct field\".into_cow(),\n             NonConstPath        => \"non-constant path in constant expression\".into_cow(),\n+            UnimplementedConstVal(what) =>\n+                format!(\"unimplemented constant expression: {}\", what).into_cow(),\n             UnresolvedPath => \"unresolved path in constant expression\".into_cow(),\n             ExpectedConstTuple => \"expected constant tuple\".into_cow(),\n             ExpectedConstStruct => \"expected constant struct\".into_cow(),\n@@ -1023,8 +1028,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                       (None, None)\n                   }\n               },\n-              Some(def::DefFn(id, _)) => return Ok(Function(id)),\n-              // FIXME: implement const methods?\n+              Some(def::DefMethod(id)) | Some(def::DefFn(id, _)) => return Ok(Function(id)),\n               _ => (None, None)\n           };\n           let const_expr = match const_expr {\n@@ -1050,31 +1054,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           } else {\n               UncheckedExprNoHint // we cannot reason about UncheckedExprHint here\n           };\n-          let (\n-              decl,\n-              block,\n-              constness,\n-          ) = match try!(eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args)) {\n-              Function(did) => if did.is_local() {\n-                  match tcx.map.find(did.index.as_u32()) {\n-                      Some(ast_map::NodeItem(it)) => match it.node {\n-                          hir::ItemFn(\n-                              ref decl,\n-                              hir::Unsafety::Normal,\n-                              constness,\n-                              abi::Abi::Rust,\n-                              _, // ducktype generics? types are funky in const_eval\n-                              ref block,\n-                          ) => (decl, block, constness),\n-                          _ => signal!(e, NonConstPath),\n-                      },\n-                      _ => signal!(e, NonConstPath),\n-                  }\n-              } else {\n-                  signal!(e, NonConstPath)\n-              },\n-              _ => signal!(e, NonConstPath),\n-          };\n+          let callee_val = try!(eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args));\n+          let (decl, block, constness) = try!(get_fn_def(tcx, e, callee_val));\n           match (ty_hint, constness) {\n               (ExprTypeChecked, _) => {\n                   // no need to check for constness... either check_const\n@@ -1349,3 +1330,46 @@ pub fn compare_lit_exprs<'tcx>(tcx: &ty::ctxt<'tcx>,\n     };\n     compare_const_vals(&a, &b)\n }\n+\n+\n+// returns Err if callee is not `Function`\n+// `e` is only used for error reporting/spans\n+fn get_fn_def<'a>(tcx: &'a ty::ctxt,\n+                  e: &hir::Expr,\n+                  callee: ConstVal)\n+                  -> Result<(&'a hir::FnDecl, &'a hir::Block, hir::Constness), ConstEvalErr> {\n+    let did = match callee {\n+        Function(did) => did,\n+        callee => signal!(e, CallOn(callee)),\n+    };\n+    debug!(\"fn call: {:?}\", tcx.map.get_if_local(did));\n+    match tcx.map.get_if_local(did) {\n+        None => signal!(e, UnimplementedConstVal(\"calling non-local const fn\")), // non-local\n+        Some(ast_map::NodeItem(it)) => match it.node {\n+            hir::ItemFn(\n+                ref decl,\n+                hir::Unsafety::Normal,\n+                constness,\n+                abi::Abi::Rust,\n+                _, // ducktype generics? types are funky in const_eval\n+                ref block,\n+            ) => Ok((&**decl, &**block, constness)),\n+            _ => signal!(e, NonConstPath),\n+        },\n+        Some(ast_map::NodeImplItem(it)) => match it.node {\n+            hir::ImplItemKind::Method(\n+                hir::MethodSig {\n+                    ref decl,\n+                    unsafety: hir::Unsafety::Normal,\n+                    constness,\n+                    abi: abi::Abi::Rust,\n+                    .. // ducktype generics? types are funky in const_eval\n+                },\n+                ref block,\n+            ) => Ok((decl, block, constness)),\n+            _ => signal!(e, NonConstPath),\n+        },\n+        Some(ast_map::NodeTraitItem(..)) => signal!(e, NonConstPath),\n+        Some(_) => unimplemented!(),\n+    }\n+}"}, {"sha": "44ab798f4911b4a17c9cef11952aa577f6f27ced", "filename": "src/test/compile-fail/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs?ref=8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "patch": "@@ -14,7 +14,7 @@\n struct S(i32);\n \n const CONSTANT: S = S(0);\n-//~^ ERROR: constant evaluation error: non-constant path in constant expression [E0080]\n+//~^ ERROR: constant evaluation error: call on struct [E0080]\n \n enum E {\n     V = CONSTANT,"}, {"sha": "592a312d80048a32f2cfb0d5520250c976ef9d58", "filename": "src/test/compile-fail/const-fn-stability-calls-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs?ref=8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "patch": "@@ -17,5 +17,6 @@ extern crate const_fn_lib;\n use const_fn_lib::foo;\n \n fn main() {\n-    let x: [usize; foo()] = []; //~ ERROR non-constant path in constant expr\n+    let x: [usize; foo()] = [];\n+    //~^ ERROR unimplemented constant expression: calling non-local const fn [E0250]\n }"}, {"sha": "7d8d941439cf8c953848bdcd29267c6083cc0c71", "filename": "src/test/run-pass/const-fn-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs?ref=8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "patch": "@@ -22,4 +22,5 @@ const FOO: Foo = Foo::new();\n \n pub fn main() {\n     assert_eq!(FOO.value, 22);\n+    let _: [&'static str; Foo::new().value as usize] = [\"hey\"; 22];\n }"}, {"sha": "38c73febc310843de85447d67ff64ad311e53c21", "filename": "src/test/run-pass/const-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Frun-pass%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2/src%2Ftest%2Frun-pass%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn.rs?ref=8e64e22ef764b2e06b79f16d2587e5f7aa98c7e2", "patch": "@@ -29,4 +29,5 @@ fn main() {\n \n     assert_eq!(DIFF, 22);\n \n+    let _: [&'static str; sub(100, 99) as usize] = [\"hi\"];\n }"}]}