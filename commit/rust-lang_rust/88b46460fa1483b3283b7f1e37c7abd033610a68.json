{"sha": "88b46460fa1483b3283b7f1e37c7abd033610a68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YjQ2NDYwZmExNDgzYjMyODNiN2YxZTM3YzdhYmQwMzM2MTBhNjg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-11T16:21:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-12T18:46:15Z"}, "message": "rustc: Flag all builtins functions as hidden\n\nWhen compiling compiler-rt you typically compile with `-fvisibility=hidden`\nwhich to ensure that all symbols are hidden in shared objects and don't show up\nin symbol tables. This is important for these intrinsics being linked in every\ncrate to ensure that we're not unnecessarily bloating the public ABI of Rust\ncrates.\n\nThis should help allow the compiler-builtins project with Rust-defined builtins\nstart landing in-tree as well.", "tree": {"sha": "794dae835e1a93665395c96897d48f6393f7c577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794dae835e1a93665395c96897d48f6393f7c577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b46460fa1483b3283b7f1e37c7abd033610a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b46460fa1483b3283b7f1e37c7abd033610a68", "html_url": "https://github.com/rust-lang/rust/commit/88b46460fa1483b3283b7f1e37c7abd033610a68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b46460fa1483b3283b7f1e37c7abd033610a68/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da129d98419733bb408141ca53610bb77368cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da129d98419733bb408141ca53610bb77368cf0", "html_url": "https://github.com/rust-lang/rust/commit/4da129d98419733bb408141ca53610bb77368cf0"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "9e91e390a5728b1b121ca35b6672a7158477b295", "filename": "src/libcompiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88b46460fa1483b3283b7f1e37c7abd033610a68/src%2Flibcompiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88b46460fa1483b3283b7f1e37c7abd033610a68/src%2Flibcompiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2FCargo.toml?ref=88b46460fa1483b3283b7f1e37c7abd033610a68", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n [lib]\n name = \"compiler_builtins\"\n path = \"lib.rs\"\n+test = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "8f21bf32c9e4d2949f647d9e0af64127ac6d2296", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88b46460fa1483b3283b7f1e37c7abd033610a68/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b46460fa1483b3283b7f1e37c7abd033610a68/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=88b46460fa1483b3283b7f1e37c7abd033610a68", "patch": "@@ -426,6 +426,14 @@ pub type OperandBundleDefRef = *mut OperandBundleDef_opaque;\n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n \n+/// LLVMVisibility\n+#[repr(C)]\n+pub enum Visibility {\n+    Default,\n+    Hidden,\n+    Protected,\n+}\n+\n pub mod debuginfo {\n     pub use self::DIDescriptorFlags::*;\n     use super::MetadataRef;\n@@ -746,8 +754,8 @@ extern \"C\" {\n     pub fn LLVMRustSetLinkage(Global: ValueRef, RustLinkage: Linkage);\n     pub fn LLVMGetSection(Global: ValueRef) -> *const c_char;\n     pub fn LLVMSetSection(Global: ValueRef, Section: *const c_char);\n-    pub fn LLVMGetVisibility(Global: ValueRef) -> c_uint;\n-    pub fn LLVMSetVisibility(Global: ValueRef, Viz: c_uint);\n+    pub fn LLVMGetVisibility(Global: ValueRef) -> Visibility;\n+    pub fn LLVMSetVisibility(Global: ValueRef, Viz: Visibility);\n     pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;\n     pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);\n     pub fn LLVMSetDLLStorageClass(V: ValueRef, C: DLLStorageClass);"}, {"sha": "9ed3bfa04a8926fc8cc1dfca6c0f7f59327cf02c", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88b46460fa1483b3283b7f1e37c7abd033610a68/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b46460fa1483b3283b7f1e37c7abd033610a68/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=88b46460fa1483b3283b7f1e37c7abd033610a68", "patch": "@@ -19,6 +19,7 @@\n //!   interested in defining the ValueRef they return.\n //! * Use define_* family of methods when you might be defining the ValueRef.\n //! * When in doubt, define.\n+\n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n use rustc::ty;\n@@ -27,6 +28,7 @@ use attributes;\n use context::CrateContext;\n use type_::Type;\n use value::Value;\n+use syntax::attr;\n \n use std::ffi::CString;\n \n@@ -69,6 +71,16 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n+    // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n+    // compiler-rt, then we want to implicitly compile everything with hidden\n+    // visibility as we're going to link this object all over the place but\n+    // don't want the symbols to get exported.\n+    if attr::contains_name(ccx.tcx().map.krate_attrs(), \"compiler_builtins\") {\n+        unsafe {\n+            llvm::LLVMSetVisibility(llfn, llvm::Visibility::Hidden);\n+        }\n+    }\n+\n     match ccx.tcx().sess.opts.cg.opt_level.as_ref().map(String::as_ref) {\n         Some(\"s\") => {\n             llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);"}]}