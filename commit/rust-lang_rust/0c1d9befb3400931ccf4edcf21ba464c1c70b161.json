{"sha": "0c1d9befb3400931ccf4edcf21ba464c1c70b161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMWQ5YmVmYjM0MDA5MzFjY2Y0ZWRjZjIxYmE0NjRjMWM3MGIxNjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-29T06:44:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T06:15:06Z"}, "message": "librustc: Speed up byte copy operations. r=nmatsakis", "tree": {"sha": "34588cd97c5140418c3641f9cb61b7bdc7ef8af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34588cd97c5140418c3641f9cb61b7bdc7ef8af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c1d9befb3400931ccf4edcf21ba464c1c70b161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1d9befb3400931ccf4edcf21ba464c1c70b161", "html_url": "https://github.com/rust-lang/rust/commit/0c1d9befb3400931ccf4edcf21ba464c1c70b161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c1d9befb3400931ccf4edcf21ba464c1c70b161/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97c593a1ced524bf5182a1821946b7a528442da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c593a1ced524bf5182a1821946b7a528442da0", "html_url": "https://github.com/rust-lang/rust/commit/97c593a1ced524bf5182a1821946b7a528442da0"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "a1107d49c0ec17d1b8d7afeff94398106a7e78f0", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -1123,10 +1123,23 @@ pub mod funcs {\n             unsafe fn strerror(n: c_int) -> *c_char;\n             unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n             unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t) -> size_t;\n+\n+            // These are fine to execute on the Rust stack. They must be, in\n+            // fact, because LLVM generates calls to them!\n+            #[rust_stack]\n+            #[inline(always)]\n             unsafe fn memcpy(s: *c_void, ct: *c_void, n: size_t) -> *c_void;\n+            #[rust_stack]\n+            #[inline(always)]\n             unsafe fn memmove(s: *c_void, ct: *c_void, n: size_t) -> *c_void;\n+            #[rust_stack]\n+            #[inline(always)]\n             unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t) -> c_int;\n+            #[rust_stack]\n+            #[inline(always)]\n             unsafe fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n+            #[rust_stack]\n+            #[inline(always)]\n             unsafe fn memset(s: *c_void, c: c_int, n: size_t) -> *c_void;\n         }\n     }"}, {"sha": "dd5c4143b6d7a72836534f402c5c302b37e21ed8", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -116,9 +116,16 @@ pub pure fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n  * and destination may overlap.\n  */\n #[inline(always)]\n+#[cfg(target_word_size = \"32\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     let n = count * sys::size_of::<T>();\n-    libc_::memmove(dst as *mut c_void, src as *c_void, n as size_t);\n+    memmove32(dst as *mut u8, src as *u8, n as u32);\n+}\n+#[inline(always)]\n+#[cfg(target_word_size = \"64\")]\n+pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n+    let n = count * sys::size_of::<T>();\n+    memmove64(dst as *mut u8, src as *u8, n as u64);\n }\n \n #[inline(always)]\n@@ -183,6 +190,23 @@ pub trait Ptr<T> {\n     pure fn offset(count: uint) -> self;\n }\n \n+#[cfg(stage0)]\n+unsafe fn memmove32(dst: *mut u8, src: *const u8, count: u32) {\n+    libc::memmove(dst as *c_void, src as *c_void, count as size_t);\n+}\n+#[cfg(stage0)]\n+unsafe fn memmove64(dst: *mut u8, src: *const u8, count: u64) {\n+    libc::memmove(dst as *c_void, src as *c_void, count as size_t);\n+}\n+\n+#[abi=\"rust-intrinsic\"]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub extern {\n+    fn memmove32(dst: *mut u8, src: *u8, size: u32);\n+    fn memmove64(dst: *mut u8, src: *u8, size: u64);\n+}\n+\n /// Extension methods for immutable pointers\n impl<T> *T: Ptr<T> {\n     /// Returns true if the pointer is equal to the null pointer."}, {"sha": "9707ed8459a40f48a6161b0430c2800c9488dfb3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -266,6 +266,7 @@ pub pure fn slice<T: Copy>(v: &[const T], start: uint, end: uint) -> ~[T] {\n }\n \n /// Return a slice that points into another slice.\n+#[inline(always)]\n pub pure fn view<T>(v: &r/[T], start: uint, end: uint) -> &r/[T] {\n     assert (start <= end);\n     assert (end <= len(v));\n@@ -279,6 +280,7 @@ pub pure fn view<T>(v: &r/[T], start: uint, end: uint) -> &r/[T] {\n }\n \n /// Return a slice that points into another slice.\n+#[inline(always)]\n pub pure fn mut_view<T>(v: &r/[mut T], start: uint, end: uint) -> &r/[mut T] {\n     assert (start <= end);\n     assert (end <= len(v));\n@@ -292,6 +294,7 @@ pub pure fn mut_view<T>(v: &r/[mut T], start: uint, end: uint) -> &r/[mut T] {\n }\n \n /// Return a slice that points into another slice.\n+#[inline(always)]\n pub pure fn const_view<T>(v: &r/[const T], start: uint,\n                       end: uint) -> &r/[const T] {\n     assert (start <= end);\n@@ -305,6 +308,8 @@ pub pure fn const_view<T>(v: &r/[const T], start: uint,\n     }\n }\n \n+/// Copies \n+\n /// Split the vector `v` by applying each element against the predicate `f`.\n pub fn split<T: Copy>(v: &[T], f: fn(t: &T) -> bool) -> ~[~[T]] {\n     let ln = len(v);\n@@ -2127,6 +2132,7 @@ pub mod raw {\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n       * may overlap.\n       */\n+    #[inline(always)]\n     pub unsafe fn copy_memory<T>(dst: &[mut T], src: &[const T],\n                                  count: uint) {\n         assert dst.len() >= count;\n@@ -2193,6 +2199,7 @@ pub mod bytes {\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n       * may overlap.\n       */\n+    #[inline(always)]\n     pub fn copy_memory(dst: &[mut u8], src: &[const u8], count: uint) {\n         // Bound checks are done at vec::raw::copy_memory.\n         unsafe { vec::raw::copy_memory(dst, src, count) }"}, {"sha": "7961350a69ec573eeca8d0e9c8019adfdf6d5e5a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -2589,9 +2589,15 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n                            T_void()));\n     let memcpy32 =\n         decl_cdecl_fn(llmod, ~\"llvm.memcpy.p0i8.p0i8.i32\",\n-                      T_fn(T_memcpy32_args, T_void()));\n+                      T_fn(copy T_memcpy32_args, T_void()));\n     let memcpy64 =\n         decl_cdecl_fn(llmod, ~\"llvm.memcpy.p0i8.p0i8.i64\",\n+                      T_fn(copy T_memcpy64_args, T_void()));\n+    let memmove32 =\n+        decl_cdecl_fn(llmod, ~\"llvm.memmove.p0i8.p0i8.i32\",\n+                      T_fn(T_memcpy32_args, T_void()));\n+    let memmove64 =\n+        decl_cdecl_fn(llmod, ~\"llvm.memmove.p0i8.p0i8.i64\",\n                       T_fn(T_memcpy64_args, T_void()));\n     let memset32 =\n         decl_cdecl_fn(llmod, ~\"llvm.memset.p0i8.i32\",\n@@ -2700,6 +2706,8 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     intrinsics.insert(~\"llvm.gcread\", gcread);\n     intrinsics.insert(~\"llvm.memcpy.p0i8.p0i8.i32\", memcpy32);\n     intrinsics.insert(~\"llvm.memcpy.p0i8.p0i8.i64\", memcpy64);\n+    intrinsics.insert(~\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n+    intrinsics.insert(~\"llvm.memmove.p0i8.p0i8.i64\", memmove64);\n     intrinsics.insert(~\"llvm.memset.p0i8.i32\", memset32);\n     intrinsics.insert(~\"llvm.memset.p0i8.i64\", memset64);\n     intrinsics.insert(~\"llvm.trap\", trap);"}, {"sha": "46ab560e1b67a0a753916b77e17fd9887495f990", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -568,6 +568,24 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                                              T_ptr(T_nil()));\n             Store(bcx, morestack_addr, fcx.llretptr);\n         }\n+        ~\"memmove32\" => {\n+            let dst_ptr = get_param(decl, first_real_arg);\n+            let src_ptr = get_param(decl, first_real_arg + 1);\n+            let size = get_param(decl, first_real_arg + 2);\n+            let align = C_i32(1);\n+            let volatile = C_bool(false);\n+            let llfn = bcx.ccx().intrinsics.get(~\"llvm.memmove.p0i8.p0i8.i32\");\n+            Call(bcx, llfn, ~[dst_ptr, src_ptr, size, align, volatile]);\n+        }\n+        ~\"memmove64\" => {\n+            let dst_ptr = get_param(decl, first_real_arg);\n+            let src_ptr = get_param(decl, first_real_arg + 1);\n+            let size = get_param(decl, first_real_arg + 2);\n+            let align = C_i32(1);\n+            let volatile = C_bool(false);\n+            let llfn = bcx.ccx().intrinsics.get(~\"llvm.memmove.p0i8.p0i8.i64\");\n+            Call(bcx, llfn, ~[dst_ptr, src_ptr, size, align, volatile]);\n+        }\n         ~\"sqrtf32\" => {\n             let x = get_param(decl, first_real_arg);\n             let sqrtf = ccx.intrinsics.get(~\"llvm.sqrt.f32\");"}, {"sha": "b2e6ab05e228d099834a1abf6b6a672b78e1db34", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -129,6 +129,8 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                 ~\"visit_tydesc\"  | ~\"forget\" | ~\"addr_of\" |\n                 ~\"frame_address\" | ~\"morestack_addr\" => 0,\n \n+                ~\"memmove32\" | ~\"memmove64\" => 0,\n+\n                 ~\"sqrtf32\" | ~\"sqrtf64\" | ~\"powif32\" | ~\"powif64\" |\n                 ~\"sinf32\"  | ~\"sinf64\"  | ~\"cosf32\"  | ~\"cosf64\"  |\n                 ~\"powf32\"  | ~\"powf64\"  | ~\"expf32\"  | ~\"expf64\"  |"}, {"sha": "e360d8e7c88a3218a0814f70b44946bdf8c0c6e4", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1d9befb3400931ccf4edcf21ba464c1c70b161/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0c1d9befb3400931ccf4edcf21ba464c1c70b161", "patch": "@@ -3122,6 +3122,28 @@ pub fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       ~\"morestack_addr\" => {\n         (0u, ~[], ty::mk_nil_ptr(tcx))\n       }\n+      ~\"memmove32\" => {\n+        (0, ~[arg(ast::by_copy,\n+                  ty::mk_ptr(tcx,\n+                    ty::mt { ty: ty::mk_u8(tcx), mutbl: ast::m_mutbl })),\n+              arg(ast::by_copy,\n+                  ty::mk_ptr(tcx,\n+                    ty::mt { ty: ty::mk_u8(tcx), mutbl: ast::m_imm })),\n+              arg(ast::by_copy,\n+                  ty::mk_u32(tcx))],\n+         ty::mk_nil(tcx))\n+      }\n+      ~\"memmove64\" => {\n+        (0, ~[arg(ast::by_copy,\n+                  ty::mk_ptr(tcx,\n+                    ty::mt { ty: ty::mk_u8(tcx), mutbl: ast::m_mutbl })),\n+              arg(ast::by_copy,\n+                  ty::mk_ptr(tcx,\n+                    ty::mt { ty: ty::mk_u8(tcx), mutbl: ast::m_imm })),\n+              arg(ast::by_copy,\n+                  ty::mk_u64(tcx))],\n+         ty::mk_nil(tcx))\n+      }\n      ~\"sqrtf32\" => {\n         (0u, ~[arg(ast::by_copy, ty::mk_f32(tcx))],\n          ty::mk_f32(tcx))"}]}