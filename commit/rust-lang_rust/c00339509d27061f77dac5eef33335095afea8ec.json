{"sha": "c00339509d27061f77dac5eef33335095afea8ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDMzOTUwOWQyNzA2MWY3N2RhYzVlZWYzMzMzNTA5NWFmZWE4ZWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-20T19:03:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T19:03:25Z"}, "message": "Merge #6256\n\n6256: Assist: replace string with char r=bnjjj a=bnjjj\n\nclose #6252 \n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Coenen Benjamin <benjamin.coenen@hotmail.com>", "tree": {"sha": "3a2288f9fabe209fdcbe4be3c714983944d22cf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a2288f9fabe209fdcbe4be3c714983944d22cf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00339509d27061f77dac5eef33335095afea8ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjzR9CRBK7hj4Ov3rIwAAdHIIAELJNysXtvLEUan1gc05GRdh\ndLxsMcNC8OFqKArrm/j+rlmOvzMliok2VDsYmihfb3oSehpZrRRCVK5VgoiABA23\ndJiSNVEG0WiQBOHkaz+Lt9EGMFgpAblxJSpIUYq+oGFWnfswUOH6pkzuVymX/4qm\n+0+qdvDGHw/ZQkGyxWEw3sAmQgRVpArA4p7IjjqEcGVQuLhhgpJ1CxZMUjnMgVh9\nX7K/0IXHHEFLgftLG7e1/Zms31SyycobFJWYM83rzkqmjMsUElcpd4JLhVTMIRsk\nJiMEUGoNV4zWubqUKAmy4r2J+KEWlJM1qJea7thJGkAvbtJuYPPjCKPDTS1oEdQ=\n=YVrS\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a2288f9fabe209fdcbe4be3c714983944d22cf5\nparent 989de9e3094f54dba81ae59f4bbaaf3a8c0d67d1\nparent 9883435e4e7f96a3e33ef3e38665189339db71eb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603220605 +0000\ncommitter GitHub <noreply@github.com> 1603220605 +0000\n\nMerge #6256\n\n6256: Assist: replace string with char r=bnjjj a=bnjjj\n\nclose #6252 \n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Coenen Benjamin <benjamin.coenen@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00339509d27061f77dac5eef33335095afea8ec", "html_url": "https://github.com/rust-lang/rust/commit/c00339509d27061f77dac5eef33335095afea8ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00339509d27061f77dac5eef33335095afea8ec/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989de9e3094f54dba81ae59f4bbaaf3a8c0d67d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/989de9e3094f54dba81ae59f4bbaaf3a8c0d67d1", "html_url": "https://github.com/rust-lang/rust/commit/989de9e3094f54dba81ae59f4bbaaf3a8c0d67d1"}, {"sha": "9883435e4e7f96a3e33ef3e38665189339db71eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9883435e4e7f96a3e33ef3e38665189339db71eb", "html_url": "https://github.com/rust-lang/rust/commit/9883435e4e7f96a3e33ef3e38665189339db71eb"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "4ca87a8ecc0e3485145c2e97ac8f8d6bb31f7cd2", "filename": "crates/assists/src/handlers/replace_string_with_char.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=c00339509d27061f77dac5eef33335095afea8ec", "patch": "@@ -0,0 +1,141 @@\n+use syntax::{\n+    ast::{self, HasStringValue},\n+    AstToken,\n+    SyntaxKind::STRING,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: replace_string_with_char\n+//\n+// Replace string with char.\n+//\n+// ```\n+// fn main() {\n+//     find(\"{<|>\");\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     find('{');\n+// }\n+// ```\n+pub(crate) fn replace_string_with_char(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n+    let value = token.value()?;\n+    let target = token.syntax().text_range();\n+\n+    if value.chars().take(2).count() != 1 {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"replace_string_with_char\", AssistKind::RefactorRewrite),\n+        \"Replace string with char\",\n+        target,\n+        |edit| {\n+            edit.replace(token.syntax().text_range(), format!(\"'{}'\", value));\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_string_with_char_target() {\n+        check_assist_target(\n+            replace_string_with_char,\n+            r#\"\n+            fn f() {\n+                let s = \"<|>c\";\n+            }\n+            \"#,\n+            r#\"\"c\"\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_assist() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+    fn f() {\n+        let s = \"<|>c\";\n+    }\n+    \"#,\n+            r##\"\n+    fn f() {\n+        let s = 'c';\n+    }\n+    \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_assist_with_emoji() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+    fn f() {\n+        let s = \"<|>\ud83d\ude00\";\n+    }\n+    \"#,\n+            r##\"\n+    fn f() {\n+        let s = '\ud83d\ude00';\n+    }\n+    \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_assist_not_applicable() {\n+        check_assist_not_applicable(\n+            replace_string_with_char,\n+            r#\"\n+    fn f() {\n+        let s = \"<|>test\";\n+    }\n+    \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_works_inside_macros() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+                fn f() {\n+                    format!(<|>\"x\", 92)\n+                }\n+                \"#,\n+            r##\"\n+                fn f() {\n+                    format!('x', 92)\n+                }\n+                \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_works_func_args() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+                fn f() {\n+                    find(<|>\"x\");\n+                }\n+                \"#,\n+            r##\"\n+                fn f() {\n+                    find('x');\n+                }\n+                \"##,\n+        )\n+    }\n+}"}, {"sha": "8a664f654200f7ca0e15ed94e63f5e42d4bba41a", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=c00339509d27061f77dac5eef33335095afea8ec", "patch": "@@ -160,6 +160,7 @@ mod handlers {\n     mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n+    mod replace_string_with_char;\n     mod replace_unwrap_with_match;\n     mod split_import;\n     mod unwrap_block;\n@@ -210,6 +211,7 @@ mod handlers {\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n+            replace_string_with_char::replace_string_with_char,\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             unwrap_block::unwrap_block,"}, {"sha": "acbf5b65221e321f2d9bade1b1ccc815470ee386", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=c00339509d27061f77dac5eef33335095afea8ec", "patch": "@@ -900,6 +900,23 @@ fn process(map: HashMap<String, String>) {}\n     )\n }\n \n+#[test]\n+fn doctest_replace_string_with_char() {\n+    check_doc_test(\n+        \"replace_string_with_char\",\n+        r#####\"\n+fn main() {\n+    find(\"{<|>\");\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    find('{');\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_unwrap_with_match() {\n     check_doc_test("}]}