{"sha": "ff63336b65691f4fd0e339bb74a1798d1f96e86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNjMzMzZiNjU2OTFmNGZkMGUzMzliYjc0YTE3OThkMWY5NmU4NmU=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-07-14T18:29:20Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-07-15T15:01:03Z"}, "message": "Use more descriptive Compilation enum in rustc interface callbacks", "tree": {"sha": "c9a92f101b6045aa3c7265d5211aae5b97652c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a92f101b6045aa3c7265d5211aae5b97652c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff63336b65691f4fd0e339bb74a1798d1f96e86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff63336b65691f4fd0e339bb74a1798d1f96e86e", "html_url": "https://github.com/rust-lang/rust/commit/ff63336b65691f4fd0e339bb74a1798d1f96e86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff63336b65691f4fd0e339bb74a1798d1f96e86e/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae75311823574fd697f28961cecb0e0f3f3382ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae75311823574fd697f28961cecb0e0f3f3382ce", "html_url": "https://github.com/rust-lang/rust/commit/ae75311823574fd697f28961cecb0e0f3f3382ce"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "2bc79e5080f3aacac588c6320cc5138077d1f15d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff63336b65691f4fd0e339bb74a1798d1f96e86e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff63336b65691f4fd0e339bb74a1798d1f96e86e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ff63336b65691f4fd0e339bb74a1798d1f96e86e", "patch": "@@ -105,17 +105,20 @@ pub fn abort_on_err<T>(result: Result<T, ErrorReported>, sess: &Session) -> T {\n pub trait Callbacks {\n     /// Called before creating the compiler instance\n     fn config(&mut self, _config: &mut interface::Config) {}\n-    /// Called after parsing and returns true to continue execution\n-    fn after_parsing(&mut self, _compiler: &interface::Compiler) -> bool {\n-        true\n+    /// Called after parsing. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_parsing(&mut self, _compiler: &interface::Compiler) -> Compilation {\n+        Compilation::Continue\n     }\n-    /// Called after expansion and returns true to continue execution\n-    fn after_expansion(&mut self, _compiler: &interface::Compiler) -> bool {\n-        true\n+    /// Called after expansion. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_expansion(&mut self, _compiler: &interface::Compiler) -> Compilation {\n+        Compilation::Continue\n     }\n-    /// Called after analysis and returns true to continue execution\n-    fn after_analysis(&mut self, _compiler: &interface::Compiler) -> bool {\n-        true\n+    /// Called after analysis. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_analysis(&mut self, _compiler: &interface::Compiler) -> Compilation {\n+        Compilation::Continue\n     }\n }\n \n@@ -298,7 +301,7 @@ pub fn run_compiler(\n             }\n         }\n \n-        if !callbacks.after_parsing(compiler) {\n+        if callbacks.after_parsing(compiler) == Compilation::Stop {\n             return sess.compile_status();\n         }\n \n@@ -317,7 +320,7 @@ pub fn run_compiler(\n         }\n \n         compiler.expansion()?;\n-        if !callbacks.after_expansion(compiler) {\n+        if callbacks.after_expansion(compiler) == Compilation::Stop {\n             return sess.compile_status();\n         }\n \n@@ -364,7 +367,7 @@ pub fn run_compiler(\n \n         compiler.global_ctxt()?.peek_mut().enter(|tcx| tcx.analysis(LOCAL_CRATE))?;\n \n-        if !callbacks.after_analysis(compiler) {\n+        if callbacks.after_analysis(compiler) == Compilation::Stop {\n             return sess.compile_status();\n         }\n "}]}