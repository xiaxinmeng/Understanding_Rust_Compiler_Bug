{"sha": "c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDFlY2Q0NzQ3ZDczZTBjOGE2MmI4MmI5N2NiNmQ1ZjgzZGI0NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-22T09:38:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-22T09:38:53Z"}, "message": "Auto merge of #4220 - d-dorazio:4182-needless-return-void-functions, r=flip1995\n\nmake needless_return work with void functions\n\nfixes https://github.com/rust-lang/rust-clippy/issues/4181.\n\nchangelog: make needless_return work with void functions.\n\nI don't think the failure is related to my changes, but I'm not sure :thinking:", "tree": {"sha": "cca6d221d9965af95d5d42a70a4d45da2e2b8eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca6d221d9965af95d5d42a70a4d45da2e2b8eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "html_url": "https://github.com/rust-lang/rust/commit/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f82ea53c511d89cde677f41894210552c6f6e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f82ea53c511d89cde677f41894210552c6f6e8b", "html_url": "https://github.com/rust-lang/rust/commit/6f82ea53c511d89cde677f41894210552c6f6e8b"}, {"sha": "316a9f271153830afe928df927bd5cad12a87c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/316a9f271153830afe928df927bd5cad12a87c74", "html_url": "https://github.com/rust-lang/rust/commit/316a9f271153830afe928df927bd5cad12a87c74"}], "stats": {"total": 192, "additions": 143, "deletions": 49}, "files": [{"sha": "8f9ccaea26d2131cd4e1b94a4936fe4301feff1d", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -51,6 +51,5 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n                 span_help_and_lint(cx, INVALID_REF, expr.span, msg, HELP);\n             }\n         }\n-        return;\n     }\n }"}, {"sha": "07eb70a33acf6ce63f7a58b3a3bf1ed5017646f8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -1648,16 +1648,15 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n     );\n \n     // Check if the first argument to .fold is a suitable literal\n-    match fold_args[1].node {\n-        hir::ExprKind::Lit(ref lit) => match lit.node {\n+    if let hir::ExprKind::Lit(ref lit) = fold_args[1].node {\n+        match lit.node {\n             ast::LitKind::Bool(false) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Or, \"any\", true),\n             ast::LitKind::Bool(true) => check_fold_with_op(cx, fold_args, hir::BinOpKind::And, \"all\", true),\n             ast::LitKind::Int(0, _) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Add, \"sum\", false),\n             ast::LitKind::Int(1, _) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Mul, \"product\", false),\n-            _ => return,\n-        },\n-        _ => return,\n-    };\n+            _ => (),\n+        }\n+    }\n }\n \n fn lint_iter_nth<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, iter_args: &'tcx [hir::Expr], is_mut: bool) {"}, {"sha": "a8c45166a8b35de0947944afee8c4c6f0feb2224", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -169,7 +169,9 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             .any(|id| id.name == ident.name)\n         {\n             return;\n-        } else if let Some(scope) = &mut self.0.single_char_names.last_mut() {\n+        }\n+\n+        if let Some(scope) = &mut self.0.single_char_names.last_mut() {\n             scope.push(ident);\n         }\n     }"}, {"sha": "a178db3132300c901a265b3afb148a0150500609", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -95,8 +95,6 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n                 );\n             },\n         );\n-    } else {\n-        return;\n     }\n }\n \n@@ -161,8 +159,6 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, o\n                 },\n             );\n         }\n-    } else {\n-        return;\n     }\n }\n "}, {"sha": "2245b719c23bb0346064dad61cf80e10b3a9ede7", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 65, "deletions": 20, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -83,6 +83,12 @@ declare_clippy_lint! {\n     \"needless unit expression\"\n }\n \n+#[derive(PartialEq, Eq, Copy, Clone)]\n+enum RetReplacement {\n+    Empty,\n+    Unit,\n+}\n+\n declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n \n impl Return {\n@@ -91,21 +97,32 @@ impl Return {\n         if let Some(stmt) = block.stmts.last() {\n             match stmt.node {\n                 ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n-                    self.check_final_expr(cx, expr, Some(stmt.span));\n+                    self.check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n                 },\n                 _ => (),\n             }\n         }\n     }\n \n     // Check a the final expression in a block if it's a return.\n-    fn check_final_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr, span: Option<Span>) {\n+    fn check_final_expr(\n+        &mut self,\n+        cx: &EarlyContext<'_>,\n+        expr: &ast::Expr,\n+        span: Option<Span>,\n+        replacement: RetReplacement,\n+    ) {\n         match expr.node {\n             // simple return is always \"bad\"\n-            ast::ExprKind::Ret(Some(ref inner)) => {\n+            ast::ExprKind::Ret(ref inner) => {\n                 // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n                 if !expr.attrs.iter().any(attr_is_cfg) {\n-                    self.emit_return_lint(cx, span.expect(\"`else return` is not possible\"), inner.span);\n+                    self.emit_return_lint(\n+                        cx,\n+                        span.expect(\"`else return` is not possible\"),\n+                        inner.as_ref().map(|i| i.span),\n+                        replacement,\n+                    );\n                 }\n             },\n             // a whole block? check it!\n@@ -117,32 +134,60 @@ impl Return {\n             // (except for unit type functions) so we don't match it\n             ast::ExprKind::If(_, ref ifblock, Some(ref elsexpr)) => {\n                 self.check_block_return(cx, ifblock);\n-                self.check_final_expr(cx, elsexpr, None);\n+                self.check_final_expr(cx, elsexpr, None, RetReplacement::Empty);\n             },\n             // a match expr, check all arms\n             ast::ExprKind::Match(_, ref arms) => {\n                 for arm in arms {\n-                    self.check_final_expr(cx, &arm.body, Some(arm.body.span));\n+                    self.check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Unit);\n                 }\n             },\n             _ => (),\n         }\n     }\n \n-    fn emit_return_lint(&mut self, cx: &EarlyContext<'_>, ret_span: Span, inner_span: Span) {\n-        if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n-            return;\n+    fn emit_return_lint(\n+        &mut self,\n+        cx: &EarlyContext<'_>,\n+        ret_span: Span,\n+        inner_span: Option<Span>,\n+        replacement: RetReplacement,\n+    ) {\n+        match inner_span {\n+            Some(inner_span) => {\n+                if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n+                    return;\n+                }\n+\n+                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                    if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                        db.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n+                    }\n+                })\n+            },\n+            None => match replacement {\n+                RetReplacement::Empty => {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                        db.span_suggestion(\n+                            ret_span,\n+                            \"remove `return`\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                },\n+                RetReplacement::Unit => {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                        db.span_suggestion(\n+                            ret_span,\n+                            \"replace `return` with the unit type\",\n+                            \"()\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                },\n+            },\n         }\n-        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n-            if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion(\n-                    ret_span,\n-                    \"remove `return` as shown\",\n-                    snippet,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        });\n     }\n \n     // Check for \"let x = EXPR; x\"\n@@ -195,7 +240,7 @@ impl EarlyLintPass for Return {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, kind: FnKind<'_>, decl: &ast::FnDecl, span: Span, _: ast::NodeId) {\n         match kind {\n             FnKind::ItemFn(.., block) | FnKind::Method(.., block) => self.check_block_return(cx, block),\n-            FnKind::Closure(body) => self.check_final_expr(cx, body, Some(body.span)),\n+            FnKind::Closure(body) => self.check_final_expr(cx, body, Some(body.span), RetReplacement::Empty),\n         }\n         if_chain! {\n             if let ast::FunctionRetTy::Ty(ref ty) = decl.output;"}, {"sha": "e9f064ea3efe3de5b8bfbadad6f5edb3e97ea325", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::needless_return)]\n \n+macro_rules! the_answer {\n+    () => {\n+        42\n+    };\n+}\n+\n fn test_end_of_fn() -> bool {\n     if true {\n         // no error!\n@@ -36,6 +42,29 @@ fn test_closure() {\n     let _ = || return true;\n }\n \n+fn test_macro_call() -> i32 {\n+    return the_answer!();\n+}\n+\n+fn test_void_fun() {\n+    return;\n+}\n+\n+fn test_void_if_fun(b: bool) {\n+    if b {\n+        return;\n+    } else {\n+        return;\n+    }\n+}\n+\n+fn test_void_match(x: u32) {\n+    match x {\n+        0 => (),\n+        _ => return,\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "7858ecfba978720cd833472f5051a795fc767566", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "patch": "@@ -1,52 +1,76 @@\n error: unneeded return statement\n-  --> $DIR/needless_return.rs:8:5\n+  --> $DIR/needless_return.rs:14:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:12:5\n+  --> $DIR/needless_return.rs:18:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:17:9\n+  --> $DIR/needless_return.rs:23:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:19:9\n+  --> $DIR/needless_return.rs:25:9\n    |\n LL |         return false;\n-   |         ^^^^^^^^^^^^^ help: remove `return` as shown: `false`\n+   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:25:17\n+  --> $DIR/needless_return.rs:31:17\n    |\n LL |         true => return false,\n-   |                 ^^^^^^^^^^^^ help: remove `return` as shown: `false`\n+   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:27:13\n+  --> $DIR/needless_return.rs:33:13\n    |\n LL |             return true;\n-   |             ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:34:9\n+  --> $DIR/needless_return.rs:40:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:36:16\n+  --> $DIR/needless_return.rs:42:16\n    |\n LL |     let _ = || return true;\n-   |                ^^^^^^^^^^^ help: remove `return` as shown: `true`\n+   |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n-error: aborting due to 8 previous errors\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:50:5\n+   |\n+LL |     return;\n+   |     ^^^^^^^ help: remove `return`\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:55:9\n+   |\n+LL |         return;\n+   |         ^^^^^^^ help: remove `return`\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:57:9\n+   |\n+LL |         return;\n+   |         ^^^^^^^ help: remove `return`\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:64:14\n+   |\n+LL |         _ => return,\n+   |              ^^^^^^ help: replace `return` with the unit type: `()`\n+\n+error: aborting due to 12 previous errors\n "}]}