{"sha": "971b59106a240b63a43fed4775d8cf0a3883f406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MWI1OTEwNmEyNDBiNjNhNDNmZWQ0Nzc1ZDhjZjBhMzg4M2Y0MDY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-07-21T02:20:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-24T00:15:30Z"}, "message": "libcore: add vec memcpy and memmove fns", "tree": {"sha": "5506805514599bd80bbd41e299fbb68d7377a842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5506805514599bd80bbd41e299fbb68d7377a842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971b59106a240b63a43fed4775d8cf0a3883f406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971b59106a240b63a43fed4775d8cf0a3883f406", "html_url": "https://github.com/rust-lang/rust/commit/971b59106a240b63a43fed4775d8cf0a3883f406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971b59106a240b63a43fed4775d8cf0a3883f406/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4aab80a718a84a03c379e98a7a4f812822e347", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4aab80a718a84a03c379e98a7a4f812822e347", "html_url": "https://github.com/rust-lang/rust/commit/9d4aab80a718a84a03c379e98a7a4f812822e347"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "19c03e44501c982830f149ec171b21227f1aff8f", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/971b59106a240b63a43fed4775d8cf0a3883f406/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b59106a240b63a43fed4775d8cf0a3883f406/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=971b59106a240b63a43fed4775d8cf0a3883f406", "patch": "@@ -1598,13 +1598,42 @@ mod unsafe {\n             ::unsafe::reinterpret_cast(ptr::addr_of(pair));\n         f(*v)\n     }\n+\n+    /**\n+      * Copies data from one vector to another.\n+      *\n+      * Copies `count` bytes from `src` to `dst`. The source and destination\n+      * may overlap.\n+      */\n+    unsafe fn memcpy<T>(dst: &[mut T], src: &[const T], count: uint) {\n+        do unpack_slice(dst) |p_dst, _len_dst| {\n+            do unpack_slice(src) |p_src, _len_src| {\n+                ptr::memcpy(p_dst, p_src, count)\n+            }\n+        }\n+    }\n+\n+    /**\n+      * Copies data from one vector to another.\n+      *\n+      * Copies `count` bytes from `src` to `dst`. The source and destination\n+      * may overlap.\n+      */\n+    unsafe fn memmove<T>(dst: &[mut T], src: &[const T], count: uint) {\n+        do unpack_slice(dst) |p_dst, _len_dst| {\n+            do unpack_slice(src) |p_src, _len_src| {\n+                ptr::memmove(p_dst, p_src, count)\n+            }\n+        }\n+    }\n }\n \n /// Operations on `[u8]`\n mod u8 {\n     export cmp;\n     export lt, le, eq, ne, ge, gt;\n     export hash;\n+    export memcpy, memmove;\n \n     /// Bytewise string comparison\n     pure fn cmp(&&a: ~[u8], &&b: ~[u8]) -> int {\n@@ -1655,6 +1684,32 @@ mod u8 {\n         vec::iter(s, |c| {u *= 33u; u += c as uint;});\n         ret u;\n     }\n+\n+    /**\n+      * Copies data from one vector to another.\n+      *\n+      * Copies `count` bytes from `src` to `dst`. The source and destination\n+      * may not overlap.\n+      */\n+    fn memcpy(dst: &[mut u8], src: &[const u8], count: uint) {\n+        assert dst.len() >= count;\n+        assert src.len() >= count;\n+\n+        unsafe { vec::unsafe::memcpy(dst, src, count) }\n+    }\n+\n+    /**\n+      * Copies data from one vector to another.\n+      *\n+      * Copies `count` bytes from `src` to `dst`. The source and destination\n+      * may overlap.\n+      */\n+    fn memmove(dst: &[mut u8], src: &[const u8], count: uint) {\n+        assert dst.len() >= count;\n+        assert src.len() >= count;\n+\n+        unsafe { vec::unsafe::memmove(dst, src, count) }\n+    }\n }\n \n // ___________________________________________________________________________"}]}