{"sha": "e31420fbe2986884783c2baba02b34003cc3b28a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTQyMGZiZTI5ODY4ODQ3ODNjMmJhYmEwMmIzNDAwM2NjM2IyOGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-18T20:10:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-18T20:10:01Z"}, "message": "Remove obsolete RangeInfo usage in references", "tree": {"sha": "4a90342e93e528b9807a1528b263a8e6d5887326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a90342e93e528b9807a1528b263a8e6d5887326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31420fbe2986884783c2baba02b34003cc3b28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31420fbe2986884783c2baba02b34003cc3b28a", "html_url": "https://github.com/rust-lang/rust/commit/e31420fbe2986884783c2baba02b34003cc3b28a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31420fbe2986884783c2baba02b34003cc3b28a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342bf41022fa78856a48560b521ea32aa76f6f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/342bf41022fa78856a48560b521ea32aa76f6f06", "html_url": "https://github.com/rust-lang/rust/commit/342bf41022fa78856a48560b521ea32aa76f6f06"}], "stats": {"total": 58, "additions": 20, "deletions": 38}, "files": [{"sha": "b10a0a78be88772b1434a2359f00e2835a0eac2a", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31420fbe2986884783c2baba02b34003cc3b28a/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31420fbe2986884783c2baba02b34003cc3b28a/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=e31420fbe2986884783c2baba02b34003cc3b28a", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n \n     let mut calls = CallLocations::default();\n \n-    for (&file_id, references) in refs.info.references().iter() {\n+    for (&file_id, references) in refs.references().iter() {\n         let file = sema.parse(file_id);\n         let file = file.syntax();\n         for reference in references {"}, {"sha": "567b8117eb39c1b58b57a3ea7624f444d4a05317", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e31420fbe2986884783c2baba02b34003cc3b28a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31420fbe2986884783c2baba02b34003cc3b28a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=e31420fbe2986884783c2baba02b34003cc3b28a", "patch": "@@ -369,9 +369,7 @@ impl Analysis {\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n     ) -> Cancelable<Option<ReferenceSearchResult>> {\n-        self.with_db(|db| {\n-            references::find_all_refs(&Semantics::new(db), position, search_scope).map(|it| it.info)\n-        })\n+        self.with_db(|db| references::find_all_refs(&Semantics::new(db), position, search_scope))\n     }\n \n     /// Finds all methods and free functions for the file. Does not return tests!"}, {"sha": "3a4f4d80bf84c35cf1e7f94a1c4c60160a95cf37", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e31420fbe2986884783c2baba02b34003cc3b28a/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31420fbe2986884783c2baba02b34003cc3b28a/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=e31420fbe2986884783c2baba02b34003cc3b28a", "patch": "@@ -25,7 +25,7 @@ use syntax::{\n     AstNode, SyntaxNode, TextRange, TokenAtOffset, T,\n };\n \n-use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n+use crate::{display::TryToNav, FilePosition, NavigationTarget};\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n@@ -41,14 +41,6 @@ pub struct Declaration {\n }\n \n impl ReferenceSearchResult {\n-    pub fn declaration(&self) -> &Declaration {\n-        &self.declaration\n-    }\n-\n-    pub fn decl_target(&self) -> &NavigationTarget {\n-        &self.declaration.nav\n-    }\n-\n     pub fn references(&self) -> &UsageSearchResult {\n         &self.references\n     }\n@@ -87,7 +79,7 @@ pub(crate) fn find_all_refs(\n     sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n     search_scope: Option<SearchScope>,\n-) -> Option<RangeInfo<ReferenceSearchResult>> {\n+) -> Option<ReferenceSearchResult> {\n     let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n@@ -105,7 +97,7 @@ pub(crate) fn find_all_refs(\n         )\n     };\n \n-    let RangeInfo { range, info: def } = find_name(&sema, &syntax, position, opt_name)?;\n+    let def = find_name(&sema, &syntax, position, opt_name)?;\n \n     let mut usages = def.usages(sema).set_scope(search_scope).all();\n     usages\n@@ -139,43 +131,35 @@ pub(crate) fn find_all_refs(\n \n     let declaration = Declaration { nav, kind, access: decl_access(&def, &syntax, decl_range) };\n \n-    Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references: usages }))\n+    Some(ReferenceSearchResult { declaration, references: usages })\n }\n \n fn find_name(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n     opt_name: Option<ast::Name>,\n-) -> Option<RangeInfo<Definition>> {\n-    if let Some(name) = opt_name {\n-        let def = NameClass::classify(sema, &name)?.referenced_or_defined(sema.db);\n-        let FileRange { range, .. } = sema.original_range(name.syntax());\n-        return Some(RangeInfo::new(range, def));\n-    }\n-\n-    let (FileRange { range, .. }, def) = if let Some(lifetime) =\n+) -> Option<Definition> {\n+    let def = if let Some(name) = opt_name {\n+        NameClass::classify(sema, &name)?.referenced_or_defined(sema.db)\n+    } else if let Some(lifetime) =\n         sema.find_node_at_offset_with_descend::<ast::Lifetime>(&syntax, position.offset)\n     {\n-        if let Some(def) = NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| NameRefClass::referenced(class, sema.db))\n+        if let Some(def) =\n+            NameRefClass::classify_lifetime(sema, &lifetime).map(|class| class.referenced(sema.db))\n         {\n-            (sema.original_range(lifetime.syntax()), def)\n+            def\n         } else {\n-            (\n-                sema.original_range(lifetime.syntax()),\n-                NameClass::classify_lifetime(sema, &lifetime)?.referenced_or_defined(sema.db),\n-            )\n+            NameClass::classify_lifetime(sema, &lifetime)?.referenced_or_defined(sema.db)\n         }\n+    } else if let Some(name_ref) =\n+        sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)\n+    {\n+        NameRefClass::classify(sema, &name_ref)?.referenced(sema.db)\n     } else {\n-        let name_ref =\n-            sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n-        (\n-            sema.original_range(name_ref.syntax()),\n-            NameRefClass::classify(sema, &name_ref)?.referenced(sema.db),\n-        )\n+        return None;\n     };\n-    Some(RangeInfo::new(range, def))\n+    Some(def)\n }\n \n fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Option<ReferenceAccess> {"}]}