{"sha": "04de8f852c4def51f02eb812f4ecee83d416911b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZGU4Zjg1MmM0ZGVmNTFmMDJlYjgxMmY0ZWNlZTgzZDQxNjkxMWI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-05-09T11:52:07Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-05-14T14:36:24Z"}, "message": "Fix cosmetics for fail!() calls", "tree": {"sha": "bf394aa7ebda0ae70ae70d03f753d6de4388e939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf394aa7ebda0ae70ae70d03f753d6de4388e939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04de8f852c4def51f02eb812f4ecee83d416911b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04de8f852c4def51f02eb812f4ecee83d416911b", "html_url": "https://github.com/rust-lang/rust/commit/04de8f852c4def51f02eb812f4ecee83d416911b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04de8f852c4def51f02eb812f4ecee83d416911b/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdc182cc41c2741edc6fdc4ec09b8522479aab40", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc182cc41c2741edc6fdc4ec09b8522479aab40", "html_url": "https://github.com/rust-lang/rust/commit/bdc182cc41c2741edc6fdc4ec09b8522479aab40"}], "stats": {"total": 110, "additions": 47, "deletions": 63}, "files": [{"sha": "2cbf8b9f05ef8e9f29a6020a39549616b1e02996", "filename": "src/libcore/local_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flocal_data.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -133,13 +133,13 @@ fn test_tls_modify() {\n         local_data_modify(my_key, |data| {\n             match data {\n                 Some(@ref val) => fail!(\"unwelcome value: %s\", *val),\n-                None       => Some(@~\"first data\")\n+                None           => Some(@~\"first data\")\n             }\n         });\n         local_data_modify(my_key, |data| {\n             match data {\n                 Some(@~\"first data\") => Some(@~\"next data\"),\n-                Some(@ref val)           => fail!(\"wrong value: %s\", *val),\n+                Some(@ref val)       => fail!(\"wrong value: %s\", *val),\n                 None                 => fail!(\"missing value\")\n             }\n         });"}, {"sha": "1d65b84b7cec1e4dfa5570af5b853e2a87dbbb7c", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -178,11 +178,9 @@ pub fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n         num: &T, radix: uint, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~[u8], bool) {\n     if (radix as int) < 2 {\n-        fail!(\"to_str_bytes_common: radix %? to low, \\\n-                   must lie in the range [2, 36]\", radix);\n+        fail!(\"to_str_bytes_common: radix %? to low, must lie in the range [2, 36]\", radix);\n     } else if radix as int > 36 {\n-        fail!(\"to_str_bytes_common: radix %? to high, \\\n-                   must lie in the range [2, 36]\", radix);\n+        fail!(\"to_str_bytes_common: radix %? to high, must lie in the range [2, 36]\", radix);\n     }\n \n     let _0: T = Zero::zero();\n@@ -445,19 +443,19 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n     match exponent {\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n           => fail!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        use of 'e' as decimal exponent\", radix),\n+                    use of 'e' as decimal exponent\", radix),\n         ExpBin if radix >= DIGIT_P_RADIX       // binary exponent 'p'\n           => fail!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        use of 'p' as binary exponent\", radix),\n+                    use of 'p' as binary exponent\", radix),\n         _ if special && radix >= DIGIT_I_RADIX // first digit of 'inf'\n           => fail!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        special values 'inf' and 'NaN'\", radix),\n+                    special values 'inf' and 'NaN'\", radix),\n         _ if (radix as int) < 2\n           => fail!(\"from_str_bytes_common: radix %? to low, \\\n-                        must lie in the range [2, 36]\", radix),\n+                    must lie in the range [2, 36]\", radix),\n         _ if (radix as int) > 36\n           => fail!(\"from_str_bytes_common: radix %? to high, \\\n-                        must lie in the range [2, 36]\", radix),\n+                    must lie in the range [2, 36]\", radix),\n         _ => ()\n     }\n "}, {"sha": "9129b33fff54502031a959771ef02be15edaa9f3", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -178,8 +178,7 @@ pub fn env() -> ~[(~str,~str)] {\n             };\n             let ch = GetEnvironmentStringsA();\n             if (ch as uint == 0) {\n-                fail!(\"os::env() failure getting env string from OS: %s\",\n-                           os::last_os_error());\n+                fail!(\"os::env() failure getting env string from OS: %s\", os::last_os_error());\n             }\n             let mut curr_ptr: uint = ch as uint;\n             let mut result = ~[];\n@@ -201,8 +200,7 @@ pub fn env() -> ~[(~str,~str)] {\n             }\n             let environ = rust_env_pairs();\n             if (environ as uint == 0) {\n-                fail!(\"os::env() failure getting env string from OS: %s\",\n-                           os::last_os_error());\n+                fail!(\"os::env() failure getting env string from OS: %s\", os::last_os_error());\n             }\n             let mut result = ~[];\n             ptr::array_each(environ, |e| {"}, {"sha": "c84e920a17202f897c5ec8078e7a13089189b82c", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -646,8 +646,7 @@ pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n                 errs = s;\n             }\n             (n, _) => {\n-                fail!(\"program_output received an unexpected file \\\n-                           number: %u\", n);\n+                fail!(\"program_output received an unexpected file number: %u\", n);\n             }\n         };\n         count -= 1;"}, {"sha": "ce9db796b674d533355a035a3da9240f42aed2db", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -1052,7 +1052,7 @@ pub fn _each_split_within<'a>(ss: &'a str,\n             (B, Cr, UnderLim) => { B }\n             (B, Cr, OverLim)  if (i - last_start + 1) > lim\n                               => fail!(\"word starting with %? longer than limit!\",\n-                                            self::slice(ss, last_start, i + 1)),\n+                                       self::slice(ss, last_start, i + 1)),\n             (B, Cr, OverLim)  => { slice(); slice_start = last_start; B }\n             (B, Ws, UnderLim) => { last_end = i; C }\n             (B, Ws, OverLim)  => { last_end = i; slice(); A }"}, {"sha": "b11aec5b8417688164fa59b16273f08be45e37c5", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -917,8 +917,7 @@ mod test {\n         let matches =\n             &match getopts(~[~\"--test\"], optgroups()) {\n               Ok(copy m) => m,\n-              Err(copy f) => fail!(\"test_switch_implies_cfg_test: %s\",\n-                             getopts::fail_str(f))\n+              Err(copy f) => fail!(\"test_switch_implies_cfg_test: %s\", getopts::fail_str(f))\n             };\n         let sessopts = build_session_options(\n             @~\"rustc\", matches, diagnostic::emit);\n@@ -935,8 +934,7 @@ mod test {\n             &match getopts(~[~\"--test\", ~\"--cfg=test\"], optgroups()) {\n               Ok(copy m) => m,\n               Err(copy f) => {\n-                fail!(\"test_switch_implies_cfg_test_unless_cfg_test: %s\",\n-                    getopts::fail_str(f));\n+                fail!(\"test_switch_implies_cfg_test_unless_cfg_test: %s\", getopts::fail_str(f));\n               }\n             };\n         let sessopts = build_session_options("}, {"sha": "cc9a18ea3a3778e1b3d971d1769d45079d574da1", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -531,13 +531,13 @@ pub fn parse_def_id(buf: &[u8]) -> ast::def_id {\n \n     let crate_num = match uint::parse_bytes(crate_part, 10u) {\n        Some(cn) => cn as int,\n-       None => fail!(\"internal error: parse_def_id: crate number \\\n-                               expected, but found %?\", crate_part)\n+       None => fail!(\"internal error: parse_def_id: crate number expected, but found %?\",\n+                     crate_part)\n     };\n     let def_num = match uint::parse_bytes(def_part, 10u) {\n        Some(dn) => dn as int,\n-       None => fail!(\"internal error: parse_def_id: id expected, but \\\n-                               found %?\", def_part)\n+       None => fail!(\"internal error: parse_def_id: id expected, but found %?\",\n+                     def_part)\n     };\n     ast::def_id { crate: crate_num, node: def_num }\n }"}, {"sha": "b220379e330fa50665ecec78e14c6ae674b01a29", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -276,10 +276,10 @@ pub fn check_expr(e: @expr, cx: Context, v: visit::vt<Context>) {\n         if ts.len() != type_param_defs.len() {\n             // Fail earlier to make debugging easier\n             fail!(\"internal error: in kind::check_expr, length \\\n-                       mismatch between actual and declared bounds: actual = \\\n-                        %s, declared = %s\",\n-                       ts.repr(cx.tcx),\n-                       type_param_defs.repr(cx.tcx));\n+                  mismatch between actual and declared bounds: actual = \\\n+                  %s, declared = %s\",\n+                  ts.repr(cx.tcx),\n+                  type_param_defs.repr(cx.tcx));\n         }\n         for vec::each2(**ts, *type_param_defs) |&ty, type_param_def| {\n             check_bounds(cx, type_parameter_id, e.span, ty, type_param_def)"}, {"sha": "1d24a4dbd4f91a67f8ef3fd58d073ef13d3bcba1", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -154,16 +154,16 @@ pub impl Env {\n     fn assert_subtype(&self, a: ty::t, b: ty::t) {\n         if !self.is_subtype(a, b) {\n             fail!(\"%s is not a subtype of %s, but it should be\",\n-                      self.ty_to_str(a),\n-                      self.ty_to_str(b));\n+                  self.ty_to_str(a),\n+                  self.ty_to_str(b));\n         }\n     }\n \n     fn assert_not_subtype(&self, a: ty::t, b: ty::t) {\n         if self.is_subtype(a, b) {\n             fail!(\"%s is a subtype of %s, but it shouldn't be\",\n-                      self.ty_to_str(a),\n-                      self.ty_to_str(b));\n+                  self.ty_to_str(a),\n+                  self.ty_to_str(b));\n         }\n     }\n "}, {"sha": "5ce3c13656776c142fe458734d45d459ac01e50b", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -140,9 +140,8 @@ fn fold_enum(\n                                 copy ast_variant.node.attrs)\n                         }\n                         _ => {\n-                            fail!(\"Enum variant %s has id that's \\\n-                                        not bound to an enum item\",\n-                                       variant.name)\n+                            fail!(\"Enum variant %s has id that's not bound to an enum item\",\n+                                  variant.name)\n                         }\n                     }\n                 }"}, {"sha": "30a84f56b5c43bd556c3208ccd0bf853d21878f2", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -146,8 +146,7 @@ impl PkgScript {\n                 }\n             }\n             Err(e) => {\n-                fail!(\"Running package script, couldn't find rustpkg sysroot (%s)\",\n-                           e)\n+                fail!(\"Running package script, couldn't find rustpkg sysroot (%s)\", e)\n             }\n         }\n     }"}, {"sha": "b0c6df05038164ec824e8c9a1a4bfe08f798131b", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -21,10 +21,9 @@ pub fn pkg_parent_workspaces(pkgid: PkgId, action: &fn(&Path) -> bool) -> bool {\n         workspace_contains_package_id(pkgid, ws));\n     if workspaces.is_empty() {\n         // tjc: make this a condition\n-        fail!(\"Package %s not found in any of \\\n-                    the following workspaces: %s\",\n-                   pkgid.path.to_str(),\n-                   rust_path().to_str());\n+        fail!(\"Package %s not found in any of the following workspaces: %s\",\n+              pkgid.path.to_str(),\n+              rust_path().to_str());\n     }\n     for workspaces.each |ws| {\n         if action(ws) {"}, {"sha": "062ad403dd6b7dc4d128bf734b06ecddbe7c4e3c", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -319,9 +319,7 @@ pub mod reader {\n                     self.pos = r_doc.end;\n                     let str = doc_as_str(r_doc);\n                     if lbl != str {\n-                        fail!(\"Expected label %s but found %s\",\n-                                   lbl,\n-                                   str);\n+                        fail!(\"Expected label %s but found %s\", lbl, str);\n                     }\n                 }\n             }\n@@ -338,12 +336,11 @@ pub mod reader {\n                    copy self.parent.start, copy self.parent.end,\n                    copy self.pos, r_tag, r_doc.start, r_doc.end);\n             if r_tag != (exp_tag as uint) {\n-                fail!(\"expected EBML doc with tag %? but found tag %?\",\n-                          exp_tag, r_tag);\n+                fail!(\"expected EBML doc with tag %? but found tag %?\", exp_tag, r_tag);\n             }\n             if r_doc.end > self.parent.end {\n-                fail!(\"invalid EBML, child extends to 0x%x, \\\n-                           parent to 0x%x\", r_doc.end, self.parent.end);\n+                fail!(\"invalid EBML, child extends to 0x%x, parent to 0x%x\",\n+                      r_doc.end, self.parent.end);\n             }\n             self.pos = r_doc.end;\n             r_doc"}, {"sha": "9387903d8421bce4edf30b7f31b297db8f43a97c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -1687,7 +1687,7 @@ mod test {\n             assert!(true);\n           }\n           _ => {\n-            fail!(\"expected address_in_use listen error,\\\n+            fail!(\"expected address_in_use listen error, \\\n                    but got a different error varient. check logs.\");\n           }\n         }\n@@ -1706,7 +1706,7 @@ mod test {\n             assert!(true);\n           }\n           _ => {\n-            fail!(\"expected address_in_use listen error,\\\n+            fail!(\"expected address_in_use listen error, \\\n                    but got a different error varient. check logs.\");\n           }\n         }"}, {"sha": "59c6a804408b8e94678905f222150fd88eb0115e", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -329,11 +329,9 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n                         blk: &fn() -> U) -> U {\n     match out_of_bounds {\n         Some(0) =>\n-            fail!(\"%s with illegal ID %u - this lock has no condvars!\",\n-                      act, id),\n+            fail!(\"%s with illegal ID %u - this lock has no condvars!\", act, id),\n         Some(length) =>\n-            fail!(\"%s with illegal ID %u - ID must be less than %u\",\n-                      act, id, length),\n+            fail!(\"%s with illegal ID %u - ID must be less than %u\", act, id, length),\n         None => blk()\n     }\n }"}, {"sha": "e0392b476e458ca8095e18022d3ad03efb1ef38d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -430,8 +430,7 @@ priv impl CodeMap {\n             }\n         }\n         if (a >= len) {\n-            fail!(\"position %u does not resolve to a source location\",\n-                      pos.to_uint())\n+            fail!(\"position %u does not resolve to a source location\", pos.to_uint())\n         }\n \n         return a;"}, {"sha": "55229edfa18331ae9e8fb9ede986d61e0b545cbd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -468,7 +468,7 @@ pub fn core_macros() -> ~str {\n                 let expected_val = $expected;\n                 // check both directions of equality....\n                 if !((given_val == expected_val) && (expected_val == given_val)) {\n-                    fail!(\\\"left: %? != right: %?\\\", given_val, expected_val);\n+                    fail!(\\\"left: %? does not equal right: %?\\\", given_val, expected_val);\n                 }\n             }\n         )"}, {"sha": "599024a781f7f1852892d8801dce3fde5372d54b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -2237,7 +2237,7 @@ mod test {\n \n     fn string_check<T:Eq> (given : &T, expected: &T) {\n         if !(given == expected) {\n-            fail!(\"given %?, expected %?\",given,expected);\n+            fail!(\"given %?, expected %?\", given, expected);\n         }\n     }\n "}, {"sha": "facfb89409c28d7e0cd27452bc6868a7e50d77f5", "filename": "src/test/run-fail/assert-eq-macro-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:left: 14 != right: 15\n+// error-pattern:left: 14 does not equal right: 15\n \n #[deriving(Eq)]\n struct Point { x : int }"}, {"sha": "db04026ed9739288991da3e7c46141706b95df2d", "filename": "src/test/run-fail/while-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:giraffe\n fn main() {\n-    fail!({ while true { fail!(~\"giraffe\")}; \"clandestine\" });\n+    fail!({ while true { fail!(\"giraffe\") }; \"clandestine\" });\n }"}, {"sha": "6ec2054996335a855e88053e24611791cceb350f", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04de8f852c4def51f02eb812f4ecee83d416911b/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=04de8f852c4def51f02eb812f4ecee83d416911b", "patch": "@@ -58,7 +58,7 @@ macro_rules! check_fancy {\n         match t_.get_ref() {\n             (23, $v) => { $chk }\n             _ => fail!(\"Thing::<%s>(23, %s).get_ref() != (23, _)\",\n-                            stringify!($T), stringify!($e))\n+                       stringify!($T), stringify!($e))\n         }\n     }}\n }"}]}