{"sha": "724bcec089b34ede9b09aa72dac78ab554516603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNGJjZWMwODliMzRlZGU5YjA5YWE3MmRhYzc4YWI1NTQ1MTY2MDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T15:26:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T15:26:17Z"}, "message": "rustdoc: Hide impls for #[doc(hidden)] traits\n\nCloses #14585", "tree": {"sha": "41215a4086179544d80e8d246e7a6625f3e23f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41215a4086179544d80e8d246e7a6625f3e23f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/724bcec089b34ede9b09aa72dac78ab554516603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/724bcec089b34ede9b09aa72dac78ab554516603", "html_url": "https://github.com/rust-lang/rust/commit/724bcec089b34ede9b09aa72dac78ab554516603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/724bcec089b34ede9b09aa72dac78ab554516603/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51355478f42c398e41a9b78bfcf93b00a93c7f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51355478f42c398e41a9b78bfcf93b00a93c7f1e", "html_url": "https://github.com/rust-lang/rust/commit/51355478f42c398e41a9b78bfcf93b00a93c7f1e"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "172675a94287ec343b77e88bd12378800e0c6299", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/724bcec089b34ede9b09aa72dac78ab554516603/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724bcec089b34ede9b09aa72dac78ab554516603/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=724bcec089b34ede9b09aa72dac78ab554516603", "patch": "@@ -26,6 +26,7 @@ use iter::Iterator;         // NOTE(stage0): Remove after snapshot.\n use option::{Some, None};   // NOTE(stage0): Remove after snapshot.\n \n /// A type that represents a specific radix\n+#[doc(hidden)]\n trait GenericRadix {\n     /// The number of digits.\n     fn base(&self) -> u8;"}, {"sha": "33e2fd2b893d5fd24563bda8c40bcf3b4d5bbe35", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/724bcec089b34ede9b09aa72dac78ab554516603/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724bcec089b34ede9b09aa72dac78ab554516603/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=724bcec089b34ede9b09aa72dac78ab554516603", "patch": "@@ -278,6 +278,17 @@ fn build_impl(cx: &core::DocContext,\n     }\n \n     let associated_trait = csearch::get_impl_trait(tcx, did);\n+    // If this is an impl for a #[doc(hidden)] trait, be sure to not inline it.\n+    match associated_trait {\n+        Some(ref t) => {\n+            let trait_attrs = load_attrs(tcx, t.def_id);\n+            if trait_attrs.iter().any(|a| is_doc_hidden(a)) {\n+                return None\n+            }\n+        }\n+        None => {}\n+    }\n+\n     let attrs = load_attrs(tcx, did);\n     let ty = ty::lookup_item_type(tcx, did);\n     let methods = csearch::get_impl_methods(&tcx.sess.cstore,\n@@ -302,7 +313,7 @@ fn build_impl(cx: &core::DocContext,\n         };\n         Some(item)\n     }).collect();\n-    Some(clean::Item {\n+    return Some(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n             derived: clean::detect_derived(attrs.as_slice()),\n             trait_: associated_trait.clean().map(|bound| {\n@@ -321,7 +332,21 @@ fn build_impl(cx: &core::DocContext,\n         visibility: Some(ast::Inherited),\n         stability: stability::lookup(tcx, did).clean(),\n         def_id: did,\n-    })\n+    });\n+\n+    fn is_doc_hidden(a: &clean::Attribute) -> bool {\n+        match *a {\n+            clean::List(ref name, ref inner) if name.as_slice() == \"doc\" => {\n+                inner.iter().any(|a| {\n+                    match *a {\n+                        clean::Word(ref s) => s.as_slice() == \"hidden\",\n+                        _ => false,\n+                    }\n+                })\n+            }\n+            _ => false\n+        }\n+    }\n }\n \n fn build_module(cx: &core::DocContext, tcx: &ty::ctxt,"}]}