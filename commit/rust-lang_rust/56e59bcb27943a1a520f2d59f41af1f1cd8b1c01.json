{"sha": "56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "node_id": "C_kwDOAAsO6NoAKDU2ZTU5YmNiMjc5NDNhMWE1MjBmMmQ1OWY0MWFmMWYxY2Q4YjFjMDE", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-08T16:39:40Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-08T16:39:40Z"}, "message": "Test const `Hash`, fix nits", "tree": {"sha": "189a83e7ae6308efd77beae0d56f717a02dffcc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/189a83e7ae6308efd77beae0d56f717a02dffcc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "html_url": "https://github.com/rust-lang/rust/commit/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebce1e616c6d1cd61154eef4928c991e9f7189f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebce1e616c6d1cd61154eef4928c991e9f7189f", "html_url": "https://github.com/rust-lang/rust/commit/cebce1e616c6d1cd61154eef4928c991e9f7189f"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "c755afa39eb608de9ffffd576b0b4d5fa443b0f5", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "patch": "@@ -86,6 +86,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::fmt;\n+use crate::intrinsics::const_eval_select;\n use crate::marker::{self, Destruct};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -239,16 +240,21 @@ pub trait Hash {\n     where\n         Self: Sized,\n     {\n-        //FIXME(const_iter_slice): Revert to for loop\n-        //for piece in data {\n-        //    piece.hash(state);\n-        //}\n-\n-        let mut i = 0;\n-        while i < data.len() {\n-            data[i].hash(state);\n-            i += 1;\n+        //FIXME(const_trait_impl): revert to only a for loop\n+        fn rt<T: Hash, H: Hasher>(data: &[T], state: &mut H) {\n+            for piece in data {\n+                piece.hash(state)\n+            }\n+        }\n+        const fn ct<T: ~const Hash, H: ~const Hasher>(data: &[T], state: &mut H) {\n+            let mut i = 0;\n+            while i < data.len() {\n+                data[i].hash(state);\n+                i += 1;\n+            }\n         }\n+        // SAFETY: same behavior, CT just uses while instead of for\n+        unsafe { const_eval_select((data, state), ct, rt) };\n     }\n }\n "}, {"sha": "7f8287bf56f645d40d4a3f4658641539d55bb765", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "patch": "@@ -138,6 +138,7 @@ const unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n         out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);\n         i += 1;\n     }\n+    //FIXME(fee1-dead): use debug_assert_eq\n     debug_assert!(i == len);\n     out\n }"}, {"sha": "267245f05dcd2203eb7c8d6a77d086c2c81f0720", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "patch": "@@ -9,16 +9,19 @@ struct MyHasher {\n     hash: u64,\n }\n \n-impl Default for MyHasher {\n+impl const Default for MyHasher {\n     fn default() -> MyHasher {\n         MyHasher { hash: 0 }\n     }\n }\n \n-impl Hasher for MyHasher {\n+impl const Hasher for MyHasher {\n     fn write(&mut self, buf: &[u8]) {\n-        for byte in buf {\n-            self.hash += *byte as u64;\n+        // FIXME(const_trait_impl): change to for loop\n+        let mut i = 0;\n+        while i < buf.len() {\n+            self.hash += buf[i] as u64;\n+            i += 1;\n         }\n     }\n     fn write_str(&mut self, s: &str) {\n@@ -32,12 +35,25 @@ impl Hasher for MyHasher {\n \n #[test]\n fn test_writer_hasher() {\n-    fn hash<T: Hash>(t: &T) -> u64 {\n+    const fn hash<T: ~const Hash>(t: &T) -> u64 {\n         let mut s = MyHasher { hash: 0 };\n         t.hash(&mut s);\n         s.finish()\n     }\n \n+    const {\n+        // FIXME(fee1-dead): assert_eq\n+        assert!(hash(&()) == 0);\n+        assert!(hash(&5_u8) == 5);\n+        assert!(hash(&5_u16) == 5);\n+        assert!(hash(&5_u32) == 5);\n+\n+        assert!(hash(&'a') == 97);\n+\n+        let s: &str = \"a\";\n+        assert!(hash(&s) == 97 + 0xFF);\n+    };\n+\n     assert_eq!(hash(&()), 0);\n \n     assert_eq!(hash(&5_u8), 5);\n@@ -97,7 +113,7 @@ struct CustomHasher {\n     output: u64,\n }\n \n-impl Hasher for CustomHasher {\n+impl const Hasher for CustomHasher {\n     fn finish(&self) -> u64 {\n         self.output\n     }\n@@ -109,27 +125,29 @@ impl Hasher for CustomHasher {\n     }\n }\n \n-impl Default for CustomHasher {\n+impl const Default for CustomHasher {\n     fn default() -> CustomHasher {\n         CustomHasher { output: 0 }\n     }\n }\n \n-impl Hash for Custom {\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n+impl const Hash for Custom {\n+    fn hash<H: ~const Hasher>(&self, state: &mut H) {\n         state.write_u64(self.hash);\n     }\n }\n \n #[test]\n fn test_custom_state() {\n-    fn hash<T: Hash>(t: &T) -> u64 {\n+    const fn hash<T: ~const Hash>(t: &T) -> u64 {\n         let mut c = CustomHasher { output: 0 };\n         t.hash(&mut c);\n         c.finish()\n     }\n \n     assert_eq!(hash(&Custom { hash: 5 }), 5);\n+\n+    const { assert!(hash(&Custom { hash: 6 }) == 6) };\n }\n \n // FIXME: Instantiated functions with i128 in the signature is not supported in Emscripten."}, {"sha": "3abf6efcfa9ba842d312f4bc4deb1a29a5b61d9b", "filename": "library/core/tests/hash/sip.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fsip.rs?ref=56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "patch": "@@ -8,7 +8,6 @@ use core::{mem, slice};\n struct Bytes<'a>(&'a [u8]);\n \n impl<'a> Hash for Bytes<'a> {\n-    #[allow(unused_must_use)]\n     fn hash<H: Hasher>(&self, state: &mut H) {\n         let Bytes(v) = *self;\n         state.write(v);\n@@ -24,6 +23,20 @@ fn hash<T: Hash>(x: &T) -> u64 {\n     hash_with(SipHasher::new(), x)\n }\n \n+#[test]\n+const fn test_const_sip() {\n+    let val1 = 0x45;\n+    let val2 = 0xfeed;\n+\n+    const fn const_hash<T: ~const Hash>(x: &T) -> u64 {\n+        let mut st = SipHasher::new();\n+        x.hash(&mut st);\n+        st.finish()\n+    }\n+\n+    assert!(const_hash(&(val1)) != const_hash(&(val2)));\n+}\n+\n #[test]\n #[allow(unused_must_use)]\n fn test_siphash_1_3() {"}, {"sha": "e805e65cf20f20fc3baf14cde036cd3063256ef1", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "patch": "@@ -11,6 +11,7 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_hash)]\n #![feature(const_heap)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init_read)]"}, {"sha": "9334c833bb6509c82e3fb2a4b3cfb55125740f33", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e59bcb27943a1a520f2d59f41af1f1cd8b1c01/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=56e59bcb27943a1a520f2d59f41af1f1cd8b1c01", "patch": "@@ -314,7 +314,6 @@\n #![feature(maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_waker)]\n-#![feature(const_hash)]\n //\n // Library features (alloc):\n #![feature(alloc_layout_extra)]\n@@ -353,6 +352,7 @@\n //\n // Only for const-ness:\n #![feature(const_collections_with_hasher)]\n+#![feature(const_hash)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]\n #![feature(const_ipv4)]"}]}