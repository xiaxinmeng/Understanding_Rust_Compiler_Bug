{"sha": "36a106891a1e410656c8fcbe2109ca53c35759ce", "node_id": "C_kwDOAAsO6NoAKDM2YTEwNjg5MWExZTQxMDY1NmM4ZmNiZTIxMDljYTUzYzM1NzU5Y2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-13T19:53:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-13T19:53:44Z"}, "message": "Make rustc build with new chalk", "tree": {"sha": "33a27b45afc4db995402c86cca173fd87d9322d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a27b45afc4db995402c86cca173fd87d9322d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a106891a1e410656c8fcbe2109ca53c35759ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a106891a1e410656c8fcbe2109ca53c35759ce", "html_url": "https://github.com/rust-lang/rust/commit/36a106891a1e410656c8fcbe2109ca53c35759ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a106891a1e410656c8fcbe2109ca53c35759ce/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de5f6277eb937095639f5f9586b1f4704e2f9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de5f6277eb937095639f5f9586b1f4704e2f9a5", "html_url": "https://github.com/rust-lang/rust/commit/6de5f6277eb937095639f5f9586b1f4704e2f9a5"}], "stats": {"total": 133, "additions": 20, "deletions": 113}, "files": [{"sha": "d15707e5ceddb694b16f2fc4aee5d90bbca99d7d", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a106891a1e410656c8fcbe2109ca53c35759ce/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a106891a1e410656c8fcbe2109ca53c35759ce/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=36a106891a1e410656c8fcbe2109ca53c35759ce", "patch": "@@ -142,6 +142,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Some(CoerceUnsized)\n         } else if lang_items.dispatch_from_dyn_trait() == Some(def_id) {\n             Some(DispatchFromDyn)\n+        } else if lang_items.tuple_trait() == Some(def_id) {\n+            Some(Tuple)\n         } else {\n             None\n         };\n@@ -570,6 +572,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n             DiscriminantKind => lang_items.discriminant_kind_trait(),\n             DispatchFromDyn => lang_items.dispatch_from_dyn_trait(),\n+            Tuple => lang_items.tuple_trait(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }"}, {"sha": "25cedefa26127b70d40f8be46b74877f57d4411c", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a106891a1e410656c8fcbe2109ca53c35759ce/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a106891a1e410656c8fcbe2109ca53c35759ce/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=36a106891a1e410656c8fcbe2109ca53c35759ce", "patch": "@@ -507,9 +507,6 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                 name: ty::BoundRegionKind::BrAnon(p.idx as u32, None),\n             }),\n             chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n-            chalk_ir::LifetimeData::Empty(_) => {\n-                bug!(\"Chalk should not have been passed an empty lifetime.\")\n-            }\n             chalk_ir::LifetimeData::Erased => return interner.tcx.lifetimes.re_erased,\n             chalk_ir::LifetimeData::Phantom(void, _) => match *void {},\n         };"}, {"sha": "568e2e30c418ca7c91ca3b714c1f42717c0712f4", "filename": "src/test/ui/chalkify/closure.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a106891a1e410656c8fcbe2109ca53c35759ce/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a106891a1e410656c8fcbe2109ca53c35759ce/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs?ref=36a106891a1e410656c8fcbe2109ca53c35759ce", "patch": "@@ -1,5 +1,3 @@\n-// known-bug: unknown\n-// FIXME(chalk): Chalk needs support for the Tuple trait\n // compile-flags: -Z chalk\n \n fn main() -> () {\n@@ -26,7 +24,7 @@ fn main() -> () {\n     let mut c = b;\n \n     c();\n-    b(); // FIXME: reenable when this is fixed ~ ERROR\n+    b(); //~ ERROR\n \n     // FIXME(chalk): this doesn't quite work\n     /*"}, {"sha": "a33c0ba0d37c900e57f51169f0015b668bbd1b40", "filename": "src/test/ui/chalkify/closure.stderr", "status": "modified", "additions": 15, "deletions": 73, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/36a106891a1e410656c8fcbe2109ca53c35759ce/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36a106891a1e410656c8fcbe2109ca53c35759ce/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr?ref=36a106891a1e410656c8fcbe2109ca53c35759ce", "patch": "@@ -1,80 +1,22 @@\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:7:5\n-   |\n-LL |     t();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:13:5\n-   |\n-LL |     b();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:17:5\n-   |\n-LL |     c();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:18:5\n+error[E0382]: borrow of moved value: `b`\n+  --> $DIR/closure.rs:27:5\n    |\n+LL |     let mut c = b;\n+   |                 - value moved here\n+...\n LL |     b();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:24:5\n-   |\n-LL |     b();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:28:5\n-   |\n-LL |     c();\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n-\n-error[E0277]: `()` is not a tuple\n-  --> $DIR/closure.rs:29:5\n+   |     ^ value borrowed here after move\n    |\n-LL |     b(); // FIXME: reenable when this is fixed ~ ERROR\n-   |     ^^^ the trait `Tuple` is not implemented for `()`\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment\n+  --> $DIR/closure.rs:20:9\n    |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+LL |         a = 1;\n+   |         ^\n+help: consider mutably borrowing `b`\n    |\n-LL | fn main() -> () where (): Tuple {\n-   |                 +++++++++++++++\n+LL |     let mut c = &mut b;\n+   |                 ++++\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "d56abc42bf540c048951ac55830e97e3c50bf309", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a106891a1e410656c8fcbe2109ca53c35759ce/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a106891a1e410656c8fcbe2109ca53c35759ce/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=36a106891a1e410656c8fcbe2109ca53c35759ce", "patch": "@@ -1,5 +1,4 @@\n-// known-bug: unknown\n-// FIXME(chalk): Chalk needs support for the Tuple trait\n+// check-pass\n // compile-flags: -Z chalk\n \n use std::fmt::Display;"}, {"sha": "422d39742eb552c3be5bb82da23b193fc778a877", "filename": "src/test/ui/chalkify/trait-objects.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6de5f6277eb937095639f5f9586b1f4704e2f9a5/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6de5f6277eb937095639f5f9586b1f4704e2f9a5/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.stderr?ref=6de5f6277eb937095639f5f9586b1f4704e2f9a5", "patch": "@@ -1,32 +0,0 @@\n-error: the type `&dyn Fn(i32) -> _` is not well-formed (chalk)\n-  --> $DIR/trait-objects.rs:11:12\n-   |\n-LL |     let f: &dyn Fn(i32) -> _ = &|x| x + x;\n-   |            ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `(i32,)` is not a tuple\n-  --> $DIR/trait-objects.rs:12:5\n-   |\n-LL |     f(2);\n-   |     ^^^^ the trait `Tuple` is not implemented for `(i32,)`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() where (i32,): Tuple {\n-   |           +++++++++++++++++++\n-\n-error[E0277]: expected a `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n-  --> $DIR/trait-objects.rs:12:5\n-   |\n-LL |     f(2);\n-   |     ^^^^ expected an `Fn<(i32,)>` closure, found `dyn Fn(i32) -> i32`\n-   |\n-   = help: the trait `Fn<(i32,)>` is not implemented for `dyn Fn(i32) -> i32`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() where dyn Fn(i32) -> i32: Fn<(i32,)> {\n-   |           ++++++++++++++++++++++++++++++++++++\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}]}