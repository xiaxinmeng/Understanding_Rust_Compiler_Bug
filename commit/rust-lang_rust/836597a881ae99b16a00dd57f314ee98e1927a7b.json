{"sha": "836597a881ae99b16a00dd57f314ee98e1927a7b", "node_id": "C_kwDOAAsO6NoAKDgzNjU5N2E4ODFhZTk5YjE2YTAwZGQ1N2YzMTRlZTk4ZTE5MjdhN2I", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-10-08T20:30:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-08T20:30:40Z"}, "message": "Rollup merge of #89649 - matthiaskrgr:clippycompl, r=jyn514\n\nclippy::complexity fixes", "tree": {"sha": "9b728113b6ed52f4a34e4b1c9279c200ed268ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b728113b6ed52f4a34e4b1c9279c200ed268ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/836597a881ae99b16a00dd57f314ee98e1927a7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYKpwCRBK7hj4Ov3rIwAA958IAD/fOHBfQaOxNMNikJolOi7x\nHx187eyeWl8QJUHGwBnDdBRXBLYiKC/bQTdJ9ytdP3mr0Y7t/tuRugOtXcEqwtOe\n7zMFt+crXt/IOBruiKfTGan5RcAY5Pkw6LWh4TdSYzdWibW8uLozIJefF34q50eB\n1bBMug7CSmNC2UUlWinsVTI4Cfgfaj5sVQP76W+m5yFOCcVmslgD8ek0XOVeX4/1\nPUujr33dT4rbBNDBBt643W0K7914Gzy1OZ46Z2iFWwII87MF8y62BmUnbQifpWNK\nB/KSjqhKOK7uyloMuIcNl/ERm0n9/NCyWXgfb9pcVcWbrh9PtTojydAIaQ1p6CE=\n=ScfB\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b728113b6ed52f4a34e4b1c9279c200ed268ca4\nparent 0cc123cbb3450649141f8551b9c34f405b25e67f\nparent e6f77a178719215906d881537e789ad1746de83f\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1633725040 +0200\ncommitter GitHub <noreply@github.com> 1633725040 +0200\n\nRollup merge of #89649 - matthiaskrgr:clippycompl, r=jyn514\n\nclippy::complexity fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/836597a881ae99b16a00dd57f314ee98e1927a7b", "html_url": "https://github.com/rust-lang/rust/commit/836597a881ae99b16a00dd57f314ee98e1927a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/836597a881ae99b16a00dd57f314ee98e1927a7b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc123cbb3450649141f8551b9c34f405b25e67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc123cbb3450649141f8551b9c34f405b25e67f", "html_url": "https://github.com/rust-lang/rust/commit/0cc123cbb3450649141f8551b9c34f405b25e67f"}, {"sha": "e6f77a178719215906d881537e789ad1746de83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f77a178719215906d881537e789ad1746de83f", "html_url": "https://github.com/rust-lang/rust/commit/e6f77a178719215906d881537e789ad1746de83f"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "a5a4de81f12f68aaeef6a361df30705fb53365f4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -1345,8 +1345,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         generics\n                             .params\n                             .iter()\n-                            .find(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n-                            .is_some()\n+                            .any(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n                     }\n                     // Either the `bounded_ty` is not a plain type parameter, or\n                     // it's not found in the generic type parameters list."}, {"sha": "7db8d4520d406def6cad28a596f682e62fb70f0d", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -201,7 +201,7 @@ impl<'tcx> OutOfScopePrecomputer<'_, 'tcx> {\n                 let bb_data = &self.body[bb];\n                 debug_assert!(hi == bb_data.statements.len());\n                 for &succ_bb in bb_data.terminator().successors() {\n-                    if self.visited.insert(succ_bb) == false {\n+                    if !self.visited.insert(succ_bb) {\n                         if succ_bb == location.block && first_lo > 0 {\n                             // `succ_bb` has been seen before. If it wasn't\n                             // fully processed, add its first part to `stack`"}, {"sha": "246d2e3208cf232d59c8cf715b96e1208f196523", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -972,8 +972,7 @@ fn suggest_ampmut<'tcx>(\n     if let Some(assignment_rhs_span) = opt_assignment_rhs_span {\n         if let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span) {\n             let is_mutbl = |ty: &str| -> bool {\n-                if ty.starts_with(\"mut\") {\n-                    let rest = &ty[3..];\n+                if let Some(rest) = ty.strip_prefix(\"mut\") {\n                     match rest.chars().next() {\n                         // e.g. `&mut x`\n                         Some(c) if c.is_whitespace() => true,"}, {"sha": "cd78c016caa4f3482612efd4f1c215285e5d48f2", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -594,7 +594,7 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Const { ty, kw_span, .. } => {\n                 let const_nodefault_kind = GenericParamKind::Const {\n                     ty: ty.clone(),\n-                    kw_span: kw_span.clone(),\n+                    kw_span: *kw_span,\n \n                     // We can't have default values inside impl block\n                     default: None,"}, {"sha": "0efe5a56436b5727aa16be01da4fcac05e65946c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -130,8 +130,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(span, &format!(\"`impl` associated type signature for `{}` doesn't match `trait` associated type signature\", item_name));\n-        err.span_label(impl_sp, &format!(\"found\"));\n-        err.span_label(trait_sp, &format!(\"expected\"));\n+        err.span_label(impl_sp, \"found\");\n+        err.span_label(trait_sp, \"expected\");\n \n         err.emit();\n     }"}, {"sha": "f2ad72f97eca77a9a22937a6b4f2e6602ef33106", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -230,8 +230,7 @@ fn check_panic_str<'tcx>(\n         Err(_) => (None, None),\n     };\n \n-    let mut fmt_parser =\n-        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n+    let mut fmt_parser = Parser::new(fmt, style, snippet.clone(), false, ParseMode::Format);\n     let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n     if n_arguments > 0 && fmt_parser.errors.is_empty() {"}, {"sha": "2431b819a3f30e25d3507cd84c735703a2205771", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -363,7 +363,7 @@ impl Collector<'tcx> {\n                 .collect::<Vec<_>>();\n             if existing.is_empty() {\n                 // Add if not found\n-                let new_name = passed_lib.new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n+                let new_name: Option<&str> = passed_lib.new_name.as_deref();\n                 let lib = NativeLib {\n                     name: Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name))),\n                     kind: passed_lib.kind,"}, {"sha": "0bdf70b3ec4888fd6b9e92161a9a57f30fa9eb91", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -986,7 +986,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let niche = if def.repr.hide_niche() {\n                                 None\n                             } else {\n-                                Niche::from_scalar(dl, Size::ZERO, scalar.clone())\n+                                Niche::from_scalar(dl, Size::ZERO, *scalar)\n                             };\n                             if let Some(niche) = niche {\n                                 match st.largest_niche {\n@@ -2273,7 +2273,7 @@ where\n         ) -> TyMaybeWithLayout<'tcx> {\n             let tcx = cx.tcx();\n             let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {\n-                let layout = Layout::scalar(cx, tag.clone());\n+                let layout = Layout::scalar(cx, tag);\n                 TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }\n             };\n "}, {"sha": "9a86d465f98ca7a277d691a3ea5e0b2cb08bde1a", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Call {\n                         func: exchange_malloc,\n                         args: vec![Operand::Move(size), Operand::Move(align)],\n-                        destination: Some((Place::from(storage), success)),\n+                        destination: Some((storage, success)),\n                         cleanup: None,\n                         from_hir_call: false,\n                         fn_span: expr_span,\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n \n                 // Transmute `*mut u8` to the box (thus far, uninitialized):\n-                let box_ = Rvalue::ShallowInitBox(Operand::Move(Place::from(storage)), value.ty);\n+                let box_ = Rvalue::ShallowInitBox(Operand::Move(storage), value.ty);\n                 this.cfg.push_assign(block, source_info, Place::from(result), box_);\n \n                 // initialize the box contents:"}, {"sha": "9e961f7ba5dd00e7a03ac1f3461a94e62925d1d1", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -1068,9 +1068,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n                     Missing {\n                         nonexhaustive_enum_missing_real_variants: self\n                             .iter_missing(pcx)\n-                            .filter(|c| !c.is_non_exhaustive())\n-                            .next()\n-                            .is_some(),\n+                            .any(|c| !c.is_non_exhaustive()),\n                     }\n                 } else {\n                     Missing { nonexhaustive_enum_missing_real_variants: false }"}, {"sha": "f191911a6c7c1d797485aa76b1c862b58daf308d", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n             }\n \n             // check that the value being matched on is the same. The\n-            if this_bb_discr_info.targets_with_values.iter().find(|x| x.0 == value).is_none() {\n+            if !this_bb_discr_info.targets_with_values.iter().any(|x| x.0 == value) {\n                 trace!(\"NO: values being matched on are not the same\");\n                 return None;\n             }"}, {"sha": "76f0e83c8c3d5c8a63c6f65c9d01d8323ac48117", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -111,8 +111,7 @@ impl<'a, 'tcx> Patcher<'a, 'tcx> {\n                         Operand::Copy(place) | Operand::Move(place) => {\n                             // create new local\n                             let ty = operand.ty(self.local_decls, self.tcx);\n-                            let local_decl =\n-                                LocalDecl::with_source_info(ty, statement.source_info.clone());\n+                            let local_decl = LocalDecl::with_source_info(ty, statement.source_info);\n                             let local = self.local_decls.push(local_decl);\n                             // make it live\n                             let mut make_live_statement = statement.clone();"}, {"sha": "e5fbddda74427a8e0d60b8d0c4a5681854e01bb0", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -1767,8 +1767,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_macro_export(&self, hir_id: HirId, attr: &Attribute, target: Target) {\n         if target != Target::MacroDef {\n             self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                lint.build(&format!(\"`#[macro_export]` only has an effect on macro definitions\"))\n-                    .emit();\n+                lint.build(\"`#[macro_export]` only has an effect on macro definitions\").emit();\n             });\n         }\n     }"}, {"sha": "1193d10d6a7d730e8631ecfa1c8bbb826baee67d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -278,14 +278,14 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n                 self.is_poly |= expr.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly == false {\n+                if !self.is_poly {\n                     visit::walk_expr(self, expr)\n                 }\n             }\n \n             fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n                 self.is_poly |= pat.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly == false {\n+                if !self.is_poly {\n                     visit::walk_pat(self, pat);\n                 }\n             }\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body, tcx };\n         visit::walk_expr(&mut is_poly_vis, &body[body_id]);\n         debug!(\"AbstractConstBuilder: is_poly={}\", is_poly_vis.is_poly);\n-        if is_poly_vis.is_poly == false {\n+        if !is_poly_vis.is_poly {\n             return Ok(None);\n         }\n "}, {"sha": "e24f699adf6b398d9ec8ee263fa037f6a532752f", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -892,7 +892,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n                 ty::BoundRegionKind::BrNamed(def_id, _name) => {\n-                    if self.named_parameters.iter().find(|d| **d == def_id).is_none() {\n+                    if !self.named_parameters.iter().any(|d| *d == def_id) {\n                         self.named_parameters.push(def_id);\n                     }\n                 }"}, {"sha": "51bbcbebcdc0b30dbbb1b2ac2e3baccfc488b4b3", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let obligation = Obligation::new(\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n-                            predicate.clone(),\n+                            *predicate,\n                         );\n                         let result = self.infcx.evaluate_obligation(&obligation);\n                         self.tcx"}, {"sha": "79443010fbb3d78bdc14388feb44cb4e38ed2440", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n-                self.link_match(discr, &arms[..]);\n+                self.link_match(discr, arms);\n \n                 intravisit::walk_expr(self, expr);\n             }"}, {"sha": "4e19246314622827b4c611efc0ffd1e2b3eada16", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/836597a881ae99b16a00dd57f314ee98e1927a7b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836597a881ae99b16a00dd57f314ee98e1927a7b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=836597a881ae99b16a00dd57f314ee98e1927a7b", "patch": "@@ -207,7 +207,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         debug!(\"Done with crate\");\n \n         for primitive in Rc::clone(&self.cache).primitive_locations.values() {\n-            self.get_impls(primitive.clone());\n+            self.get_impls(*primitive);\n         }\n \n         let mut index = (*self.index).clone().into_inner();"}]}