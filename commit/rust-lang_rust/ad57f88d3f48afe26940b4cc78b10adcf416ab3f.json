{"sha": "ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "node_id": "C_kwDOAAsO6NoAKGFkNTdmODhkM2Y0OGFmZTI2OTQwYjRjYzc4YjEwYWRjZjQxNmFiM2Y", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T14:39:19Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:35:17Z"}, "message": "Add helper to create the trait ref for a lang item", "tree": {"sha": "9d1be2b4cfb3a1aaad526e9d19480e1eefa5fa2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1be2b4cfb3a1aaad526e9d19480e1eefa5fa2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "html_url": "https://github.com/rust-lang/rust/commit/ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c4760b5db54d55f9512d69edbb214cbca20372", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c4760b5db54d55f9512d69edbb214cbca20372", "html_url": "https://github.com/rust-lang/rust/commit/25c4760b5db54d55f9512d69edbb214cbca20372"}], "stats": {"total": 117, "additions": 51, "deletions": 66}, "files": [{"sha": "5bf371290ba9579aa79d779139e7ec336a39be48", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -547,11 +547,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = tcx.mk_trait_ref(\n-                tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),\n-                place_ty.ty,\n-                [],\n-            );\n+            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, place_ty.ty, []);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1274,11 +1270,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n-                    let trait_ref = tcx.mk_trait_ref(\n-                        tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                        place_ty,\n-                        [],\n-                    );\n+                    let trait_ref =\n+                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, place_ty, []);\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1842,6 +1835,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     #[instrument(skip(self, body), level = \"debug\")]\n     fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n+        let span = body.source_info(location).span;\n \n         match rvalue {\n             Rvalue::Aggregate(ak, ops) => {\n@@ -1865,13 +1859,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         }\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n-                            let span = body.source_info(location).span;\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = tcx.mk_trait_ref(\n-                                tcx.require_lang_item(LangItem::Copy, Some(span)),\n-                                ty,\n-                                [],\n-                            );\n+                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, ty, []);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1884,11 +1873,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = tcx.mk_trait_ref(\n-                    tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                    ty,\n-                    [],\n-                );\n+                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, ty, []);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1900,11 +1885,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = tcx.mk_trait_ref(\n-                    tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                    *ty,\n-                    [],\n-                );\n+                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, *ty, []);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -2001,8 +1982,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = tcx.mk_trait_ref(\n-                            tcx.require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),\n+                        let trait_ref = tcx.at(span).mk_trait_ref(\n+                            LangItem::CoerceUnsized,\n                             op.ty(body, tcx),\n                             [ty.into()],\n                         );"}, {"sha": "6dcada67ca40b851fd1d10126e449ad1b66eaf9a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -153,14 +153,12 @@ impl Qualif for NeedsNonConstDrop {\n             return false;\n         }\n \n-        let destruct = cx.tcx.require_lang_item(LangItem::Destruct, None);\n-\n         let obligation = Obligation::new(\n             cx.tcx,\n-            ObligationCause::dummy(),\n+            ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n-                trait_ref: cx.tcx.mk_trait_ref(destruct, ty, []),\n+                trait_ref: cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, ty, []),\n                 constness: ty::BoundConstness::ConstIfConst,\n                 polarity: ty::ImplPolarity::Positive,\n             }),"}, {"sha": "0f9311f4b7eff7cbf356e32393793776ca64f82d", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -60,10 +60,10 @@ impl<'tcx> Bounds<'tcx> {\n     {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n-            tcx.lang_items().sized_trait().map(move |sized| {\n-                let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, param_ty, []));\n-                (trait_ref.without_const().to_predicate(tcx), span)\n-            })\n+            // FIXME: use tcx.at(span).mk_trait_ref(LangItem::Sized) here? This may make no-core code harder to write.\n+            let sized = tcx.lang_items().sized_trait()?;\n+            let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, param_ty, []));\n+            Some((trait_ref.without_const().to_predicate(tcx), span))\n         });\n \n         let region_preds = self.region_bounds.iter().map(move |&(region_bound, span)| {"}, {"sha": "724e6261365dc2ef1695c74305c828d8156a1238", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -1722,7 +1722,7 @@ fn receiver_is_valid<'tcx>(\n     // The first type is `receiver_ty`, which we know its not equal to `self_ty`; skip it.\n     autoderef.next();\n \n-    let receiver_trait_def_id = tcx.require_lang_item(LangItem::Receiver, None);\n+    let receiver_trait_def_id = tcx.require_lang_item(LangItem::Receiver, Some(span));\n \n     // Keep dereferencing `receiver_ty` until we get to `self_ty`.\n     loop {"}, {"sha": "73e07dcd592dd27fa68532f7f30abc230cdee672", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -2990,6 +2990,16 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {\n         self.tcx.ty_error_with_message(self.span, msg)\n     }\n+\n+    pub fn mk_trait_ref(\n+        self,\n+        trait_lang_item: LangItem,\n+        self_ty: Ty<'tcx>,\n+        rest: impl IntoIterator<Item = ty::GenericArg<'tcx>, IntoIter: ExactSizeIterator>,\n+    ) -> ty::TraitRef<'tcx> {\n+        let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n+        self.tcx.mk_trait_ref(trait_def_id, self_ty, rest)\n+    }\n }\n \n /// Parameter attributes that can only be determined by examining the body of a function instead"}, {"sha": "559ce227454de49684588149fc39baa0f033b62a", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -187,6 +187,7 @@ use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n     self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n@@ -688,7 +689,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let source_ty = operand.ty(self.body, self.tcx);\n                 let source_ty = self.monomorphize(source_ty);\n                 let (source_ty, target_ty) =\n-                    find_vtable_types_for_unsizing(self.tcx, source_ty, target_ty);\n+                    find_vtable_types_for_unsizing(self.tcx.at(span), source_ty, target_ty);\n                 // This could also be a different Unsize instruction, like\n                 // from a fixed sized array to a slice. But we are only\n                 // interested in things that produce a vtable.\n@@ -1053,14 +1054,14 @@ fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) ->\n /// Finally, there is also the case of custom unsizing coercions, e.g., for\n /// smart pointers such as `Rc` and `Arc`.\n fn find_vtable_types_for_unsizing<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxtAt<'tcx>,\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> (Ty<'tcx>, Ty<'tcx>) {\n     let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         let param_env = ty::ParamEnv::reveal_all();\n         let type_has_metadata = |ty: Ty<'tcx>| -> bool {\n-            if ty.is_sized(tcx, param_env) {\n+            if ty.is_sized(tcx.tcx, param_env) {\n                 return false;\n             }\n             let tail = tcx.struct_tail_erasing_lifetimes(ty, param_env);\n@@ -1104,8 +1105,8 @@ fn find_vtable_types_for_unsizing<'tcx>(\n \n             find_vtable_types_for_unsizing(\n                 tcx,\n-                source_fields[coerce_index].ty(tcx, source_substs),\n-                target_fields[coerce_index].ty(tcx, target_substs),\n+                source_fields[coerce_index].ty(*tcx, source_substs),\n+                target_fields[coerce_index].ty(*tcx, target_substs),\n             )\n         }\n         _ => bug!("}, {"sha": "616620edc09fb51a970a45ecbc68176669dc23b7", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -13,8 +13,8 @@ extern crate rustc_middle;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::query::{Providers, TyCtxtAt};\n+use rustc_middle::ty::{self, Ty};\n \n mod collector;\n mod errors;\n@@ -23,13 +23,12 @@ mod polymorphize;\n mod util;\n \n fn custom_coerce_unsize_info<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxtAt<'tcx>,\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let def_id = tcx.require_lang_item(LangItem::CoerceUnsized, None);\n-\n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(def_id, source_ty, [target_ty.into()]));\n+    let trait_ref =\n+        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, source_ty, [target_ty.into()]));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "4b1e8f18e34b1553d68afa4b5ffe037710f64f92", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -1710,8 +1710,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         if selcx.infcx().predicate_must_hold_modulo_regions(\n                             &obligation.with(\n                                 selcx.tcx(),\n-                                ty::Binder::dummy(selcx.tcx().mk_trait_ref(\n-                                    selcx.tcx().require_lang_item(LangItem::Sized, None),\n+                                ty::Binder::dummy(selcx.tcx().at(obligation.cause.span).mk_trait_ref(\n+                                    LangItem::Sized,\n                                     self_ty, [],\n                                 ))\n                                 .without_const(),\n@@ -1966,8 +1966,8 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         )\n     });\n     if check_is_sized {\n-        let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n-            tcx.require_lang_item(LangItem::Sized, None),\n+        let sized_predicate = ty::Binder::dummy(tcx.at(obligation.cause.span).mk_trait_ref(\n+            LangItem::Sized,\n             self_ty,\n             [],\n         ))\n@@ -1976,7 +1976,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n     }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n-    let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);\n+    let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, Some(obligation.cause.span));\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: metadata_def_id },"}, {"sha": "19d69e9dfaa053e48e9664cf39bdb6e39fc814b0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -632,8 +632,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr = ty::Binder::dummy(self.tcx().mk_trait_ref(\n-            self.tcx().require_lang_item(LangItem::Sized, None),\n+        let tr = ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(\n+            LangItem::Sized,\n             output_ty,\n             [],\n         ));\n@@ -997,11 +997,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::Binder::dummy(tcx.mk_trait_ref(\n-                    tcx.require_lang_item(LangItem::Sized, None),\n-                    source,\n-                    [],\n-                ));\n+                let tr =\n+                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, source, []));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n@@ -1255,8 +1252,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: self.tcx().mk_trait_ref(\n-                                self.tcx().require_lang_item(LangItem::Destruct, None),\n+                            trait_ref: self.tcx().at(cause.span).mk_trait_ref(\n+                                LangItem::Destruct,\n                                 nested_ty,\n                                 [],\n                             ),\n@@ -1280,8 +1277,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: self.tcx().mk_trait_ref(\n-                            self.tcx().require_lang_item(LangItem::Destruct, None),\n+                        trait_ref: self.tcx().at(cause.span).mk_trait_ref(\n+                            LangItem::Destruct,\n                             nested_ty,\n                             [],\n                         ),"}, {"sha": "de72c6618d4f5ca1ff710364b1550de150c8be16", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad57f88d3f48afe26940b4cc78b10adcf416ab3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ad57f88d3f48afe26940b4cc78b10adcf416ab3f", "patch": "@@ -421,8 +421,7 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref =\n-                self.tcx.mk_trait_ref(self.tcx.require_lang_item(LangItem::Sized, None), subty, []);\n+            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, subty, []);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}]}