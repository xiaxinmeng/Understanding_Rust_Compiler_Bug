{"sha": "60e8a845cafb9630caa034b886368160a12dcd64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZThhODQ1Y2FmYjk2MzBjYWEwMzRiODg2MzY4MTYwYTEyZGNkNjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T15:02:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T15:02:13Z"}, "message": "simplify codegen", "tree": {"sha": "b72110591d851266ba5cd4b81a72c50021589b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72110591d851266ba5cd4b81a72c50021589b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60e8a845cafb9630caa034b886368160a12dcd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60e8a845cafb9630caa034b886368160a12dcd64", "html_url": "https://github.com/rust-lang/rust/commit/60e8a845cafb9630caa034b886368160a12dcd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60e8a845cafb9630caa034b886368160a12dcd64/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb7cfc2d1cd2781a20e4034b12384566d13c728", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb7cfc2d1cd2781a20e4034b12384566d13c728", "html_url": "https://github.com/rust-lang/rust/commit/7fb7cfc2d1cd2781a20e4034b12384566d13c728"}], "stats": {"total": 123, "additions": 60, "deletions": 63}, "files": [{"sha": "9dcf8992f64482ce896a5e89da41307fd6855ec7", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/60e8a845cafb9630caa034b886368160a12dcd64/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8a845cafb9630caa034b886368160a12dcd64/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=60e8a845cafb9630caa034b886368160a12dcd64", "patch": "@@ -40,22 +40,6 @@ pub enum SyntaxKind {\n     NEQ,\n     MINUS,\n     THIN_ARROW,\n-    ERROR,\n-    IDENT,\n-    UNDERSCORE,\n-    WHITESPACE,\n-    INT_NUMBER,\n-    FLOAT_NUMBER,\n-    LIFETIME,\n-    CHAR,\n-    BYTE,\n-    STRING,\n-    RAW_STRING,\n-    BYTE_STRING,\n-    RAW_BYTE_STRING,\n-    COMMENT,\n-    DOC_COMMENT,\n-    SHEBANG,\n     USE_KW,\n     FN_KW,\n     STRUCT_KW,\n@@ -88,6 +72,22 @@ pub enum SyntaxKind {\n     AUTO_KW,\n     DEFAULT_KW,\n     UNION_KW,\n+    ERROR,\n+    IDENT,\n+    UNDERSCORE,\n+    WHITESPACE,\n+    INT_NUMBER,\n+    FLOAT_NUMBER,\n+    LIFETIME,\n+    CHAR,\n+    BYTE,\n+    STRING,\n+    RAW_STRING,\n+    BYTE_STRING,\n+    RAW_BYTE_STRING,\n+    COMMENT,\n+    DOC_COMMENT,\n+    SHEBANG,\n     FILE,\n     STRUCT_ITEM,\n     ENUM_ITEM,\n@@ -186,22 +186,6 @@ impl SyntaxKind {\n             NEQ => &SyntaxInfo { name: \"NEQ\" },\n             MINUS => &SyntaxInfo { name: \"MINUS\" },\n             THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n-            ERROR => &SyntaxInfo { name: \"ERROR\" },\n-            IDENT => &SyntaxInfo { name: \"IDENT\" },\n-            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n-            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n-            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n-            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n-            LIFETIME => &SyntaxInfo { name: \"LIFETIME\" },\n-            CHAR => &SyntaxInfo { name: \"CHAR\" },\n-            BYTE => &SyntaxInfo { name: \"BYTE\" },\n-            STRING => &SyntaxInfo { name: \"STRING\" },\n-            RAW_STRING => &SyntaxInfo { name: \"RAW_STRING\" },\n-            BYTE_STRING => &SyntaxInfo { name: \"BYTE_STRING\" },\n-            RAW_BYTE_STRING => &SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n-            COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n-            DOC_COMMENT => &SyntaxInfo { name: \"DOC_COMMENT\" },\n-            SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n             USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n             FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n             STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -234,6 +218,22 @@ impl SyntaxKind {\n             AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n             DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n             UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n+            ERROR => &SyntaxInfo { name: \"ERROR\" },\n+            IDENT => &SyntaxInfo { name: \"IDENT\" },\n+            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n+            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n+            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n+            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n+            LIFETIME => &SyntaxInfo { name: \"LIFETIME\" },\n+            CHAR => &SyntaxInfo { name: \"CHAR\" },\n+            BYTE => &SyntaxInfo { name: \"BYTE\" },\n+            STRING => &SyntaxInfo { name: \"STRING\" },\n+            RAW_STRING => &SyntaxInfo { name: \"RAW_STRING\" },\n+            BYTE_STRING => &SyntaxInfo { name: \"BYTE_STRING\" },\n+            RAW_BYTE_STRING => &SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n+            COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n+            DOC_COMMENT => &SyntaxInfo { name: \"DOC_COMMENT\" },\n+            SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n             FILE => &SyntaxInfo { name: \"FILE\" },\n             STRUCT_ITEM => &SyntaxInfo { name: \"STRUCT_ITEM\" },\n             ENUM_ITEM => &SyntaxInfo { name: \"ENUM_ITEM\" },\n@@ -285,7 +285,6 @@ impl SyntaxKind {\n             LIFETIME_PARAM => &SyntaxInfo { name: \"LIFETIME_PARAM\" },\n             TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n             TYPE_ARG_LIST => &SyntaxInfo { name: \"TYPE_ARG_LIST\" },\n-\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n         }"}, {"sha": "2a47c6632de15ad5a5b56711b93cee6447a7fe9c", "filename": "src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/60e8a845cafb9630caa034b886368160a12dcd64/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/60e8a845cafb9630caa034b886368160a12dcd64/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=60e8a845cafb9630caa034b886368160a12dcd64", "patch": "@@ -5,23 +5,14 @@ use super::SyntaxInfo;\n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum SyntaxKind {\n-{%- for t in single_byte_tokens %}\n-    {{t.1}},\n-{%- endfor -%}\n-{% for t in multi_byte_tokens %}\n+{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n     {{t.1}},\n {%- endfor -%}\n-{% for t in tokens %}\n-    {{t}},\n-{%- endfor -%}\n-{% for kw in keywords %}\n+{% for kw in concat(a=keywords, b=contextual_keywords) %}\n     {{kw | upper}}_KW,\n {%- endfor -%}\n-{% for kw in contextual_keywords %}\n-    {{kw | upper}}_KW,\n-{%- endfor -%}\n-{% for node in nodes %}\n-    {{node}},\n+{% for t in concat(a=tokens, b=nodes) %}\n+    {{t}},\n {%- endfor %}\n     // Technical SyntaxKinds: they appear temporally during parsing,\n     // but never end up in the final tree\n@@ -35,25 +26,15 @@ use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n-{%- for t in single_byte_tokens %}\n+{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n             {{t.1}} => &SyntaxInfo { name: \"{{t.1}}\" },\n {%- endfor -%}\n-{% for t in multi_byte_tokens %}\n-            {{t.1}} => &SyntaxInfo { name: \"{{t.1}}\" },\n-{%- endfor -%}\n-{% for t in tokens %}\n-            {{t}} => &SyntaxInfo { name: \"{{t}}\" },\n-{%- endfor -%}\n-{% for kw in keywords %}\n+{% for kw in concat(a=keywords, b=contextual_keywords) %}\n             {{kw | upper}}_KW => &SyntaxInfo { name: \"{{kw | upper}}_KW\" },\n {%- endfor -%}\n-{% for kw in contextual_keywords %}\n-            {{kw | upper}}_KW => &SyntaxInfo { name: \"{{kw | upper}}_KW\" },\n-{%- endfor -%}\n-{% for node in nodes %}\n-            {{node}} => &SyntaxInfo { name: \"{{node}}\" },\n+{% for t in concat(a=tokens, b=nodes) %}\n+            {{t}} => &SyntaxInfo { name: \"{{t}}\" },\n {%- endfor %}\n-\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n         }"}, {"sha": "7d7b2afc0c32b8a2e5c37598607da70bb197e0e2", "filename": "tools/src/main.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60e8a845cafb9630caa034b886368160a12dcd64/tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8a845cafb9630caa034b886368160a12dcd64/tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fmain.rs?ref=60e8a845cafb9630caa034b886368160a12dcd64", "patch": "@@ -6,7 +6,7 @@ extern crate tera;\n extern crate walkdir;\n extern crate tools;\n \n-use std::{collections::HashSet, fs, path::Path};\n+use std::{collections::{HashSet, HashMap}, fs, path::Path};\n use clap::{App, Arg, SubCommand};\n use tools::{collect_tests, Test};\n \n@@ -63,9 +63,26 @@ fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n fn get_kinds() -> Result<String> {\n     let grammar = grammar()?;\n     let template = fs::read_to_string(SYNTAX_KINDS_TEMPLATE)?;\n-    let ret = tera::Tera::one_off(&template, &grammar, false)\n+    let mut tera = tera::Tera::default();\n+    tera.add_raw_template(\"grammar\", &template)\n         .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    Ok(ret)\n+    tera.register_global_function(\"concat\", Box::new(concat));\n+    let ret = tera.render(\"grammar\", &grammar)\n+        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n+    return Ok(ret);\n+\n+    fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n+        let mut elements = Vec::new();\n+        for &key in [\"a\", \"b\", \"c\"].iter() {\n+            let val = match args.get(key) {\n+                Some(val) => val,\n+                None => continue,\n+            };\n+            let val = val.as_array().unwrap();\n+            elements.extend(val.iter().cloned());\n+        }\n+        Ok(tera::Value::Array(elements))\n+    }\n }\n \n fn grammar() -> Result<ron::value::Value> {"}]}