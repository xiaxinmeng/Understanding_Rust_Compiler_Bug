{"sha": "9d8f833e0587b9c3991f94b227369f38ee48613a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOGY4MzNlMDU4N2I5YzM5OTFmOTRiMjI3MzY5ZjM4ZWU0ODYxM2E=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-30T18:31:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-30T18:31:06Z"}, "message": "Remove hir::CrateItem.", "tree": {"sha": "8cccbc6dd7e95bc88496690bc8a52085001a1763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cccbc6dd7e95bc88496690bc8a52085001a1763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d8f833e0587b9c3991f94b227369f38ee48613a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8f833e0587b9c3991f94b227369f38ee48613a", "html_url": "https://github.com/rust-lang/rust/commit/9d8f833e0587b9c3991f94b227369f38ee48613a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d8f833e0587b9c3991f94b227369f38ee48613a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16156fb2787f745e57504197bd7fe38b69c6cbea", "url": "https://api.github.com/repos/rust-lang/rust/commits/16156fb2787f745e57504197bd7fe38b69c6cbea", "html_url": "https://github.com/rust-lang/rust/commit/16156fb2787f745e57504197bd7fe38b69c6cbea"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "4e375e00682b3446b81dc47ca11cbe3cc140bf40", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -569,7 +569,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         hir::Crate {\n-            item: hir::CrateItem { module, span: c.span },\n+            item: module,\n             exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n             non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             items: self.items,"}, {"sha": "03af81ae02a6d1962c88674035dcac1aa162b2a0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -625,13 +625,6 @@ pub struct ModuleItems {\n     pub foreign_items: BTreeSet<ForeignItemId>,\n }\n \n-/// A type representing only the top-level module.\n-#[derive(Encodable, Debug, HashStable_Generic)]\n-pub struct CrateItem<'hir> {\n-    pub module: Mod<'hir>,\n-    pub span: Span,\n-}\n-\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n@@ -640,7 +633,7 @@ pub struct CrateItem<'hir> {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n #[derive(Debug)]\n pub struct Crate<'hir> {\n-    pub item: CrateItem<'hir>,\n+    pub item: Mod<'hir>,\n     pub exported_macros: &'hir [MacroDef<'hir>],\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n     pub non_exported_macro_attrs: &'hir [Attribute],\n@@ -2983,7 +2976,7 @@ pub enum Node<'hir> {\n     GenericParam(&'hir GenericParam<'hir>),\n     Visibility(&'hir Visibility<'hir>),\n \n-    Crate(&'hir CrateItem<'hir>),\n+    Crate(&'hir Mod<'hir>),\n }\n \n impl<'hir> Node<'hir> {"}, {"sha": "d766a68e1945595cb1057ad7dc6cb329a033e090", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -478,7 +478,7 @@ pub trait Visitor<'v>: Sized {\n \n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n-    visitor.visit_mod(&krate.item.module, krate.item.span, CRATE_HIR_ID);\n+    visitor.visit_mod(&krate.item, krate.item.inner, CRATE_HIR_ID);\n     walk_list!(visitor, visit_macro_def, krate.exported_macros);\n     for (&id, attrs) in krate.attrs.iter() {\n         for a in *attrs {"}, {"sha": "2d499e194e199e99beb084d2df81049b7deb0d33", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -170,7 +170,7 @@ pub fn print_crate<'a>(\n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n-    s.print_mod(&krate.item.module, s.attrs(hir::CRATE_HIR_ID));\n+    s.print_mod(&krate.item, s.attrs(hir::CRATE_HIR_ID));\n     s.print_remaining_comments();\n     s.s.eof()\n }"}, {"sha": "3f16bb9f442ee064b671b2f2ec1fe49602da88d8", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -565,7 +565,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, hir::CRATE_HIR_ID, krate.item.span, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, hir::CRATE_HIR_ID, krate.item.inner, \"the\", \"crate\");\n \n         for macro_def in krate.exported_macros {\n             let attrs = cx.tcx.hir().attrs(macro_def.hir_id());"}, {"sha": "a5157854e15c0511749fab3f82903d9b671b73ee", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -427,7 +427,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_info_for_items(&mut self) {\n         let krate = self.tcx.hir().krate();\n-        self.encode_info_for_mod(CRATE_DEF_ID, &krate.item.module);\n+        self.encode_info_for_mod(CRATE_DEF_ID, &krate.item);\n \n         // Proc-macro crates only export proc-macro items, which are looked\n         // up using `proc_macro_data`"}, {"sha": "d155276051e4ab5eb845375ccc8b25eaee379b15", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -459,7 +459,7 @@ impl<'hir> Map<'hir> {\n         let hir_id = self.local_def_id_to_hir_id(module);\n         match self.get_entry(hir_id).node {\n             Node::Item(&Item { span, kind: ItemKind::Mod(ref m), .. }) => (m, span, hir_id),\n-            Node::Crate(item) => (&item.module, item.span, hir_id),\n+            Node::Crate(item) => (&item, item.inner, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -868,7 +868,7 @@ impl<'hir> Map<'hir> {\n             Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n             Node::Local(local) => local.span,\n             Node::MacroDef(macro_def) => macro_def.span,\n-            Node::Crate(item) => item.span,\n+            Node::Crate(item) => item.inner,\n         };\n         Some(span)\n     }"}, {"sha": "e53f821e6daff53d683b12cc5832af23320c0cf5", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -171,7 +171,7 @@ fn configure_main(\n }\n \n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n-    let sp = tcx.hir().krate().item.span;\n+    let sp = tcx.hir().krate().item.inner;\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about\n         // the missing `fn main()` then as it might have been hidden inside an unclosed block."}, {"sha": "9c4f9b1198cf20c66f847902bd288cb8b6907f47", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -686,7 +686,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n \n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n-            krate.item.span,\n+            krate.item.inner,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n@@ -885,7 +885,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.span);\n+        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.inner);\n         intravisit::walk_crate(&mut missing, krate);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }"}, {"sha": "12c77e0c8a60d5a9d98269835f894ab0bc75a6a4", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -151,7 +151,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             },\n             crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),\n-            span: self.span_from_span(krate.item.span),\n+            span: self.span_from_span(krate.item.inner),\n         };\n \n         self.dumper.crate_prelude(data);\n@@ -1097,16 +1097,11 @@ impl<'tcx> DumpVisitor<'tcx> {\n             format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id(id).to_def_id()));\n \n         let sm = self.tcx.sess.source_map();\n-        let filename = sm.span_to_filename(krate.item.span);\n+        let filename = sm.span_to_filename(krate.item.inner);\n         let data_id = id_from_hir_id(id, &self.save_ctxt);\n-        let children = krate\n-            .item\n-            .module\n-            .item_ids\n-            .iter()\n-            .map(|i| id_from_def_id(i.def_id.to_def_id()))\n-            .collect();\n-        let span = self.span_from_span(krate.item.span);\n+        let children =\n+            krate.item.item_ids.iter().map(|i| id_from_def_id(i.def_id.to_def_id())).collect();\n+        let span = self.span_from_span(krate.item.inner);\n         let attrs = self.tcx.hir().attrs(id);\n \n         self.dumper.dump_def("}, {"sha": "4d33a1e69612f7a926920a4bed93d96a6cac562c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -129,7 +129,6 @@ impl Clean<ExternalCrate> for CrateNum {\n             tcx.hir()\n                 .krate()\n                 .item\n-                .module\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {\n@@ -174,7 +173,6 @@ impl Clean<ExternalCrate> for CrateNum {\n             tcx.hir()\n                 .krate()\n                 .item\n-                .module\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {"}, {"sha": "3d0ef028902240cd1b4a1adf2d0675e586426efb", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -141,7 +141,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 hir_collector.visit_testable(\n                     \"\".to_string(),\n                     CRATE_HIR_ID,\n-                    krate.item.span,\n+                    krate.item.inner,\n                     |this| {\n                         intravisit::walk_crate(this, krate);\n                     },"}, {"sha": "ca30d8f0d46239b0a920a3d4e32b98cf427b8efe", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -72,10 +72,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let mut top_level_module = self.visit_mod_contents(\n-            krate.item.span,\n+            krate.item.inner,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n-            &krate.item.module,\n+            &krate.item,\n             self.cx.tcx.crate_name,\n         );\n         top_level_module.is_crate = true;"}, {"sha": "21b4983a1af0270020f62aa12abde52f27a710e5", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, krate.item.span, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, attrs, krate.item.inner, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}, {"sha": "6b235875c203157cc40b6c3ab96bdda15417d5d0", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8f833e0587b9c3991f94b227369f38ee48613a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=9d8f833e0587b9c3991f94b227369f38ee48613a", "patch": "@@ -61,10 +61,10 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    def, Arm, BindingAnnotation, Block, Body, Constness, CrateItem, Expr, ExprKind, FieldDef, FnDecl, ForeignItem,\n-    GenericArgs, GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local,\n-    MacroDef, MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, Variant, Visibility,\n+    def, Arm, BindingAnnotation, Block, Body, Constness, Expr, ExprKind, FieldDef, FnDecl, ForeignItem, GenericArgs,\n+    GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local, MacroDef,\n+    MatchSource, Mod, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, TraitItem, TraitItemKind, TraitRef,\n+    TyKind, Variant, Visibility,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -743,7 +743,7 @@ pub fn get_node_span(node: Node<'_>) -> Option<Span> {\n         | Node::Lifetime(Lifetime { span, .. })\n         | Node::GenericParam(GenericParam { span, .. })\n         | Node::Visibility(Visibility { span, .. })\n-        | Node::Crate(CrateItem { span, .. }) => Some(*span),\n+        | Node::Crate(Mod { inner: span, .. }) => Some(*span),\n         Node::Ctor(_) | Node::AnonConst(_) => None,\n     }\n }"}]}