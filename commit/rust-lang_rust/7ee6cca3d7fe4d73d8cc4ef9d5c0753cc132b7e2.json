{"sha": "7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZTZjY2EzZDdmZTRkNzNkOGNjNGVmOWQ1YzA3NTNjYzEzMmI3ZTI=", "commit": {"author": {"name": "Basti Ortiz", "email": "39114273+Some-Dood@users.noreply.github.com", "date": "2021-08-10T09:51:11Z"}, "committer": {"name": "Basti Ortiz", "email": "39114273+Some-Dood@users.noreply.github.com", "date": "2021-08-10T09:51:11Z"}, "message": "Refactor: use iterator methods over `for` loops", "tree": {"sha": "7bad1c973c9c34294b3a2d6f82f9d7a07604882e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bad1c973c9c34294b3a2d6f82f9d7a07604882e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqA0bdqgj8CYCkkcsFALVyxf0jhsFAmESTMAACgkQFALVyxf0\njhuiDg//e4fzKEwvpvv0lLpib2f+zYsbVw3bdMLL8aSp8xZkF1mFzRH9CW3mhRN0\n8Io8F3NchlmlO1WzwMQNjq031tLaCXWe4OxrUmowEZSDoCxrNopSSnicVGqwOLfT\nT3l10339UUBuk9DpZ6+lS1UHZDO7I8AGlf1U8JPXFnLZsR1fylP8RGpdnnzUSO90\nIxJLuCmyzJ6LFrc4c3pGtAKW3Gzx6JL0cAqcFI9kJSJGn2GTyxZzjraiwxvI3bjw\n/m+6CFGFVmz3MbpPSNMURr87PPixMti0xPY1GDXp7qQM1mUd4AzwjHAjNuSKBpcs\nuUv8Kxzv4Bf8zBTJJo1xaHmQbprTPuQBB67MV/ESecTH7L4FE0jVK1DUK7qFJiAN\ngaCuur4CbgPeK88PU1yzYuVL8VVju00g61E0dIPPfU1HU3WDP9VR2Df33H8GnycE\n5cbcoNAXQnXTSTXPQGuxGiucG7n4kUmEBaKvBmvssRK0xiHMHpy8qDjc14o23UTi\n3Mxd9MzRm0BB7BtLIauClj45sw0kAmdD01guidaJgJncfqMvkGBvXBeAenPcFp+q\nNWO9k+Y5G32MU2ptK4PDl9ky3VenUAw8BTurg0Svl7llKtElYS6+1INm1f8B4hzQ\nitzDU/FqnjWh8PTn9XHVNu3fSXPSoudo4LFMIrlf/zWY+/DPJCA=\n=gnOY\n-----END PGP SIGNATURE-----", "payload": "tree 7bad1c973c9c34294b3a2d6f82f9d7a07604882e\nparent 6d0336b2e41703254b31f5d9a1358eb7e15cee3f\nauthor Basti Ortiz <39114273+Some-Dood@users.noreply.github.com> 1628589071 +0800\ncommitter Basti Ortiz <39114273+Some-Dood@users.noreply.github.com> 1628589071 +0800\n\nRefactor: use iterator methods over `for` loops\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2", "html_url": "https://github.com/rust-lang/rust/commit/7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2/comments", "author": {"login": "BastiDood", "id": 39114273, "node_id": "MDQ6VXNlcjM5MTE0Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/39114273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BastiDood", "html_url": "https://github.com/BastiDood", "followers_url": "https://api.github.com/users/BastiDood/followers", "following_url": "https://api.github.com/users/BastiDood/following{/other_user}", "gists_url": "https://api.github.com/users/BastiDood/gists{/gist_id}", "starred_url": "https://api.github.com/users/BastiDood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BastiDood/subscriptions", "organizations_url": "https://api.github.com/users/BastiDood/orgs", "repos_url": "https://api.github.com/users/BastiDood/repos", "events_url": "https://api.github.com/users/BastiDood/events{/privacy}", "received_events_url": "https://api.github.com/users/BastiDood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BastiDood", "id": 39114273, "node_id": "MDQ6VXNlcjM5MTE0Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/39114273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BastiDood", "html_url": "https://github.com/BastiDood", "followers_url": "https://api.github.com/users/BastiDood/followers", "following_url": "https://api.github.com/users/BastiDood/following{/other_user}", "gists_url": "https://api.github.com/users/BastiDood/gists{/gist_id}", "starred_url": "https://api.github.com/users/BastiDood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BastiDood/subscriptions", "organizations_url": "https://api.github.com/users/BastiDood/orgs", "repos_url": "https://api.github.com/users/BastiDood/repos", "events_url": "https://api.github.com/users/BastiDood/events{/privacy}", "received_events_url": "https://api.github.com/users/BastiDood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0336b2e41703254b31f5d9a1358eb7e15cee3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0336b2e41703254b31f5d9a1358eb7e15cee3f", "html_url": "https://github.com/rust-lang/rust/commit/6d0336b2e41703254b31f5d9a1358eb7e15cee3f"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "b1d3918cb93b64f7aa298dc105f49746551119d7", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=7ee6cca3d7fe4d73d8cc4ef9d5c0753cc132b7e2", "patch": "@@ -155,25 +155,23 @@ impl Directories {\n     ///   - This path is longer than any element in `self.exclude` that is a prefix\n     ///     of `path`. In case of equality, exclusion wins.\n     fn includes_path(&self, path: &AbsPath) -> bool {\n-        let mut include: Option<&AbsPathBuf> = None;\n-        for incl in &self.include {\n-            if path.starts_with(incl) {\n-                include = Some(match include {\n-                    Some(prev) if prev.starts_with(incl) => prev,\n-                    _ => incl,\n-                })\n+        let include = self.include.iter().fold(None::<&AbsPathBuf>, |include, incl| {\n+            if !path.starts_with(incl) {\n+                return include;\n             }\n-        }\n+\n+            Some(match include {\n+                Some(prev) if prev.starts_with(incl) => prev,\n+                _ => incl,\n+            })\n+        });\n+\n         let include = match include {\n             Some(it) => it,\n             None => return false,\n         };\n-        for excl in &self.exclude {\n-            if path.starts_with(excl) && excl.starts_with(include) {\n-                return false;\n-            }\n-        }\n-        true\n+\n+        !self.exclude.iter().any(|excl| path.starts_with(excl) && excl.starts_with(include))\n     }\n }\n "}]}