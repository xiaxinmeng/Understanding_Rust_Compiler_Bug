{"sha": "5ba6102657a892457063d2d6a7cbb9632ce282c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTYxMDI2NTdhODkyNDU3MDYzZDJkNmE3Y2JiOTYzMmNlMjgyYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-25T18:01:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-25T18:01:36Z"}, "message": "auto merge of #20180 : jroesch/rust/clean-where-predicate, r=alexcrichton\n\nAdd support for all variants of ast::WherePredicate in clean/mod.rs. Fixes #20048, but will need modification when EqualityPredicates are fully implemented in #20041.", "tree": {"sha": "28ee5ab6bcf6d7c6493b8e51e50ac852f406c3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ee5ab6bcf6d7c6493b8e51e50ac852f406c3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba6102657a892457063d2d6a7cbb9632ce282c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba6102657a892457063d2d6a7cbb9632ce282c6", "html_url": "https://github.com/rust-lang/rust/commit/5ba6102657a892457063d2d6a7cbb9632ce282c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba6102657a892457063d2d6a7cbb9632ce282c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f673e9841f58a2196efd3b757804efa2575f8b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/f673e9841f58a2196efd3b757804efa2575f8b79", "html_url": "https://github.com/rust-lang/rust/commit/f673e9841f58a2196efd3b757804efa2575f8b79"}, {"sha": "177529267dd12e698435f84557e27307034e211d", "url": "https://api.github.com/repos/rust-lang/rust/commits/177529267dd12e698435f84557e27307034e211d", "html_url": "https://github.com/rust-lang/rust/commit/177529267dd12e698435f84557e27307034e211d"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "2e0affe827b7f993a845b5ff12abb2a902c0cb65", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ba6102657a892457063d2d6a7cbb9632ce282c6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba6102657a892457063d2d6a7cbb9632ce282c6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5ba6102657a892457063d2d6a7cbb9632ce282c6", "patch": "@@ -745,23 +745,32 @@ impl Clean<Option<Lifetime>> for ty::Region {\n }\n \n #[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n-pub struct WherePredicate {\n-    pub ty: Type,\n-    pub bounds: Vec<TyParamBound>\n+pub enum WherePredicate {\n+    BoundPredicate { ty: Type, bounds: Vec<TyParamBound> },\n+    RegionPredicate { lifetime: Lifetime, bounds: Vec<Lifetime>},\n+    // FIXME (#20041)\n+    EqPredicate\n }\n \n impl Clean<WherePredicate> for ast::WherePredicate {\n     fn clean(&self, cx: &DocContext) -> WherePredicate {\n         match *self {\n             ast::WherePredicate::BoundPredicate(ref wbp) => {\n-                WherePredicate {\n+                WherePredicate::BoundPredicate {\n                     ty: wbp.bounded_ty.clean(cx),\n                     bounds: wbp.bounds.clean(cx)\n                 }\n             }\n-            // FIXME(#20048)\n-            _ => {\n-                unimplemented!();\n+\n+            ast::WherePredicate::RegionPredicate(ref wrp) => {\n+                WherePredicate::RegionPredicate {\n+                    lifetime: wrp.lifetime.clean(cx),\n+                    bounds: wrp.bounds.clean(cx)\n+                }\n+            }\n+\n+            ast::WherePredicate::EqPredicate(_) => {\n+                WherePredicate::EqPredicate\n             }\n         }\n     }"}, {"sha": "25c4f4e01b620d0ea61a28554bb7c35ea60a438a", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ba6102657a892457063d2d6a7cbb9632ce282c6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba6102657a892457063d2d6a7cbb9632ce282c6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5ba6102657a892457063d2d6a7cbb9632ce282c6", "patch": "@@ -128,8 +128,26 @@ impl<'a> fmt::Show for WhereClause<'a> {\n             if i > 0 {\n                 try!(f.write(\", \".as_bytes()));\n             }\n-            let bounds = pred.bounds.as_slice();\n-            try!(write!(f, \"{}: {}\", pred.ty, TyParamBounds(bounds)));\n+            match pred {\n+                &clean::WherePredicate::BoundPredicate { ref ty, ref bounds } => {\n+                    let bounds = bounds.as_slice();\n+                    try!(write!(f, \"{}: {}\", ty, TyParamBounds(bounds)));\n+                }\n+                &clean::WherePredicate::RegionPredicate { ref lifetime,\n+                                                          ref bounds } => {\n+                    try!(write!(f, \"{}: \", lifetime));\n+                    for (i, lifetime) in bounds.iter().enumerate() {\n+                        if i > 0 {\n+                            try!(f.write(\" + \".as_bytes()));\n+                        }\n+\n+                        try!(write!(f, \"{}\", lifetime));\n+                    }\n+                }\n+                &clean::WherePredicate::EqPredicate => {\n+                    unimplemented!()\n+                }\n+            }\n         }\n         Ok(())\n     }"}]}