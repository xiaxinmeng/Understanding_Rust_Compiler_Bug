{"sha": "fc17eb482d082135c477c18154179dc6acde810b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTdlYjQ4MmQwODIxMzVjNDc3YzE4MTU0MTc5ZGM2YWNkZTgxMGI=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-11T15:15:12Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-11T15:15:12Z"}, "message": "gen PartialEq for Record enums\n\nCo-Authored-By: Ryan Levick <rylev@users.noreply.github.com>", "tree": {"sha": "4a79a3a243d2de6e7e0a95141bdda144517a7751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a79a3a243d2de6e7e0a95141bdda144517a7751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc17eb482d082135c477c18154179dc6acde810b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc17eb482d082135c477c18154179dc6acde810b", "html_url": "https://github.com/rust-lang/rust/commit/fc17eb482d082135c477c18154179dc6acde810b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc17eb482d082135c477c18154179dc6acde810b/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf7af70326372ed2e11cb94f4ec868f32780193", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf7af70326372ed2e11cb94f4ec868f32780193", "html_url": "https://github.com/rust-lang/rust/commit/1cf7af70326372ed2e11cb94f4ec868f32780193"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "30d291bff9b764c964ac4a86fddf54bef37b08d6", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc17eb482d082135c477c18154179dc6acde810b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc17eb482d082135c477c18154179dc6acde810b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=fc17eb482d082135c477c18154179dc6acde810b", "patch": "@@ -752,9 +752,11 @@ enum Foo {\n         bin: String,\n     },\n     Baz {\n-        quz: String,\n+        qux: String,\n         fez: String,\n     },\n+    Qux {},\n+    Bin,\n }\n \"#,\n             r#\"\n@@ -763,17 +765,19 @@ enum Foo {\n         bin: String,\n     },\n     Baz {\n-        quz: String,\n+        qux: String,\n         fez: String,\n     },\n+    Qux {},\n+    Bin,\n }\n \n impl PartialEq for Foo {\n     $0fn eq(&self, other: &Self) -> bool {\n         if core::mem::discriminant(self) == core::mem::discriminant(other) {\n             match (self, other) {\n                 (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n-                (Self::Baz { qux: l_qux, fez: l_fez }, Self::Bar { qux: r_qux, fez: r_fez }) => l_qux == r_qux && l_fez == r_fez,\n+                (Self::Baz { qux: l_qux, fez: l_fez }, Self::Baz { qux: r_qux, fez: r_fez }) => l_qux == r_qux && l_fez == r_fez,\n                 _ => true,\n             }\n         } else {"}, {"sha": "814a6ab02bf637f4fab37fe691ae77a384126c66", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fc17eb482d082135c477c18154179dc6acde810b/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc17eb482d082135c477c18154179dc6acde810b/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=fc17eb482d082135c477c18154179dc6acde810b", "patch": "@@ -361,26 +361,56 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 match variant.field_list() {\n                     // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n-                        // let mut pats = vec![];\n+                        let mut expr = None;\n+                        let mut l_fields = vec![];\n+                        let mut r_fields = vec![];\n                         // let mut fields = vec![];\n+\n+                        // !! make::record_pat_field{list, etc};\n+\n                         for field in list.fields() {\n-                            // let field_name = field.name()?;\n-                            // let pat = make::record_pat(path, pats);\n-                            // let pat = make::ident_pat(false, false, field_name.clone());\n-                            // pats.push(pat.into());\n-\n-                            // let path = make::ext::ident_path(&field_name.to_string());\n-                            // let method_call = gen_clone_call(make::expr_path(path));\n-                            // let name_ref = make::name_ref(&field_name.to_string());\n-                            // let field = make::record_expr_field(name_ref, Some(method_call));\n-                            // fields.push(field);\n+                            let field_name = field.name()?.to_string();\n+\n+                            let l_name = &format!(\"l_{}\", field_name);\n+                            let pat = make::ext::simple_ident_pat(make::name(&l_name));\n+                            let name_ref = make::name_ref(&field_name);\n+                            let field = make::record_pat_field(name_ref, pat.into());\n+                            l_fields.push(field);\n+\n+                            let r_name = &format!(\"r_{}\", field_name);\n+                            let pat = make::ext::simple_ident_pat(make::name(&r_name));\n+                            let name_ref = make::name_ref(&field_name);\n+                            let field = make::record_pat_field(name_ref, pat.into());\n+                            r_fields.push(field);\n+\n+                            let lhs = make::expr_path(make::ext::ident_path(l_name));\n+                            let rhs = make::expr_path(make::ext::ident_path(r_name));\n+                            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                            expr = match expr {\n+                                Some(expr) => {\n+                                    Some(make::expr_op(ast::BinOp::BooleanAnd, expr, cmp))\n+                                }\n+                                None => Some(cmp),\n+                            };\n+                        }\n+                        let first = make::ext::ident_path(\"Self\");\n+                        let second = make::path_from_text(&variant.name()?.to_string());\n+                        let record_name = make::path_concat(first, second);\n+                        let list = make::record_pat_field_list(l_fields);\n+                        let l_record = make::record_pat_with_fields(record_name, list);\n+\n+                        let first = make::ext::ident_path(\"Self\");\n+                        let second = make::path_from_text(&variant.name()?.to_string());\n+                        let record_name = make::path_concat(first, second);\n+                        let list = make::record_pat_field_list(r_fields);\n+                        let r_record = make::record_pat_with_fields(record_name, list);\n+\n+                        let tuple = make::tuple_pat(vec![l_record.into(), r_record.into()]);\n+                        if let Some(expr) = expr {\n+                            arms.push(make::match_arm(Some(tuple.into()), None, expr));\n                         }\n-                        // let pat = make::record_pat(variant_name.clone(), pats.into_iter());\n-                        // let fields = make::record_expr_field_list(fields);\n-                        // let record_expr = make::record_expr(variant_name, fields).into();\n-                        // arms.push(make::match_arm(Some(pat.into()), None, record_expr));\n-                        todo!(\"implement tuple record iteration\")\n                     }\n+                    // todo!(\"implement tuple record iteration\")\n                     Some(ast::FieldList::TupleFieldList(list)) => {\n                         todo!(\"implement tuple enum iteration\")\n                     }"}]}