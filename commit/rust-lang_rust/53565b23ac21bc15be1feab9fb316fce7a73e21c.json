{"sha": "53565b23ac21bc15be1feab9fb316fce7a73e21c", "node_id": "C_kwDOAAsO6NoAKDUzNTY1YjIzYWMyMWJjMTViZTFmZWFiOWZiMzE2ZmNlN2E3M2UyMWM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-19T09:20:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-23T15:32:37Z"}, "message": "Make use of `[wrapping_]byte_{add,sub}`\n\n...replacing `.cast().wrapping_offset().cast()` & similar code.", "tree": {"sha": "19822e2f90fdc3c26103fc3d386481555855a24d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19822e2f90fdc3c26103fc3d386481555855a24d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53565b23ac21bc15be1feab9fb316fce7a73e21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53565b23ac21bc15be1feab9fb316fce7a73e21c", "html_url": "https://github.com/rust-lang/rust/commit/53565b23ac21bc15be1feab9fb316fce7a73e21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53565b23ac21bc15be1feab9fb316fce7a73e21c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cff5642037b83ce1239a624bbe617a9aa0d59b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cff5642037b83ce1239a624bbe617a9aa0d59b1", "html_url": "https://github.com/rust-lang/rust/commit/1cff5642037b83ce1239a624bbe617a9aa0d59b1"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "46dbbd83d19054e2c2aaf8e4751c68a9aaf974d0", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -16,6 +16,7 @@\n #![feature(maybe_uninit_slice)]\n #![feature(min_specialization)]\n #![feature(decl_macro)]\n+#![feature(pointer_byte_offsets)]\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n #![feature(strict_provenance)]\n@@ -211,7 +212,7 @@ impl<T> TypedArena<T> {\n \n         unsafe {\n             if mem::size_of::<T>() == 0 {\n-                self.ptr.set((self.ptr.get() as *mut u8).wrapping_offset(1) as *mut T);\n+                self.ptr.set(self.ptr.get().wrapping_byte_add(1));\n                 let ptr = ptr::NonNull::<T>::dangling().as_ptr();\n                 // Don't drop the object. This `write` is equivalent to `forget`.\n                 ptr::write(ptr, object);"}, {"sha": "ed049194dd068d584c9f0604cfe09be892617508", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -4,7 +4,6 @@ use crate::alloc::{Allocator, Global};\n use crate::raw_vec::RawVec;\n use core::array;\n use core::fmt;\n-use core::intrinsics::arith_offset;\n use core::iter::{\n     FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccessNoCoerce,\n };\n@@ -154,7 +153,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n             // purposefully don't use 'ptr.offset' because for\n             // vectors with 0-size elements this would return the\n             // same pointer.\n-            self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };\n+            self.ptr = self.ptr.wrapping_byte_add(1);\n \n             // Make up a value of this ZST.\n             Some(unsafe { mem::zeroed() })\n@@ -184,7 +183,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n             // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound\n             // effectively results in unsigned pointers representing positions 0..usize::MAX,\n             // which is valid for ZSTs.\n-            self.ptr = unsafe { arith_offset(self.ptr as *const i8, step_size as isize) as *mut T }\n+            self.ptr = self.ptr.wrapping_byte_add(step_size);\n         } else {\n             // SAFETY: the min() above ensures that step_size is in bounds\n             self.ptr = unsafe { self.ptr.add(step_size) };\n@@ -217,7 +216,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n                 return Err(unsafe { array::IntoIter::new_unchecked(raw_ary, 0..len) });\n             }\n \n-            self.ptr = unsafe { arith_offset(self.ptr as *const i8, N as isize) as *mut T };\n+            self.ptr = self.ptr.wrapping_byte_add(N);\n             // Safety: ditto\n             return Ok(unsafe { MaybeUninit::array_assume_init(raw_ary) });\n         }\n@@ -267,7 +266,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n             None\n         } else if mem::size_of::<T>() == 0 {\n             // See above for why 'ptr.offset' isn't used\n-            self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };\n+            self.end = self.ptr.wrapping_byte_sub(1);\n \n             // Make up a value of this ZST.\n             Some(unsafe { mem::zeroed() })\n@@ -283,9 +282,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n         let step_size = self.len().min(n);\n         if mem::size_of::<T>() == 0 {\n             // SAFETY: same as for advance_by()\n-            self.end = unsafe {\n-                arith_offset(self.end as *const i8, step_size.wrapping_neg() as isize) as *mut T\n-            }\n+            self.end = self.end.wrapping_byte_sub(step_size);\n         } else {\n             // SAFETY: same as for advance_by()\n             self.end = unsafe { self.end.sub(step_size) };"}, {"sha": "1f19b9e594549d534ca82e9c314868ba45082b89", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -59,7 +59,7 @@ use core::cmp::Ordering;\n use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::intrinsics::{arith_offset, assume};\n+use core::intrinsics::assume;\n use core::iter;\n #[cfg(not(no_global_oom_handling))]\n use core::iter::FromIterator;\n@@ -2678,7 +2678,7 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n             let alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n             let begin = me.as_mut_ptr();\n             let end = if mem::size_of::<T>() == 0 {\n-                arith_offset(begin as *const i8, me.len() as isize) as *const T\n+                begin.wrapping_byte_add(me.len())\n             } else {\n                 begin.add(me.len()) as *const T\n             };"}, {"sha": "feba3283e468cd8a50f99a19680b4d900cbbbd48", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -249,7 +249,7 @@ impl<T: ?Sized> *const T {\n         let offset = dest_addr.wrapping_sub(self_addr);\n \n         // This is the canonical desugarring of this operation\n-        self.cast::<u8>().wrapping_offset(offset).cast::<T>()\n+        self.wrapping_byte_offset(offset)\n     }\n \n     /// Creates a new pointer by mapping `self`'s address to a new one."}, {"sha": "a70f8747916c393c0602d87c22078feaba923609", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -255,7 +255,7 @@ impl<T: ?Sized> *mut T {\n         let offset = dest_addr.wrapping_sub(self_addr);\n \n         // This is the canonical desugarring of this operation\n-        self.cast::<u8>().wrapping_offset(offset).cast::<T>()\n+        self.wrapping_byte_offset(offset)\n     }\n \n     /// Creates a new pointer by mapping `self`'s address to a new one."}, {"sha": "47455760a4bd7f9199185a32d3d15bc68ab7b11a", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -64,7 +64,7 @@ macro_rules! iterator {\n         // backwards by `n`. `n` must not exceed `self.len()`.\n         macro_rules! zst_shrink {\n             ($self: ident, $n: ident) => {\n-                $self.end = ($self.end as * $raw_mut u8).wrapping_offset(-$n) as * $raw_mut T;\n+                $self.end = $self.end.wrapping_byte_offset(-$n);\n             }\n         }\n "}, {"sha": "94b0310603bf41ccd7d16675513a544098e7561e", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -155,7 +155,7 @@ fn ptr_add_data() {\n \n     assert_eq!(atom.fetch_ptr_sub(1, SeqCst), n.wrapping_add(1));\n     assert_eq!(atom.load(SeqCst), n);\n-    let bytes_from_n = |b| n.cast::<u8>().wrapping_add(b).cast::<i64>();\n+    let bytes_from_n = |b| n.wrapping_byte_add(b);\n \n     assert_eq!(atom.fetch_byte_add(1, SeqCst), n);\n     assert_eq!(atom.load(SeqCst), bytes_from_n(1));"}, {"sha": "97a369810056dceefcdef14ad542fe4a0e15fd93", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -650,7 +650,7 @@ fn thin_box() {\n                     .unwrap_or_else(|| handle_alloc_error(layout))\n                     .cast::<DynMetadata<T>>();\n                 ptr.as_ptr().write(meta);\n-                ptr.cast::<u8>().as_ptr().add(offset).cast::<Value>().write(value);\n+                ptr.as_ptr().byte_add(offset).cast::<Value>().write(value);\n                 Self { ptr, phantom: PhantomData }\n             }\n         }"}, {"sha": "781ae03ad45dcb865c66d90b45a6109d28c7fad8", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -269,10 +269,10 @@ where\n         }\n         TAG_SIMPLE_MESSAGE => ErrorData::SimpleMessage(&*ptr.cast::<SimpleMessage>().as_ptr()),\n         TAG_CUSTOM => {\n-            // It would be correct for us to use `ptr::sub` here (see the\n+            // It would be correct for us to use `ptr::byte_sub` here (see the\n             // comment above the `wrapping_add` call in `new_custom` for why),\n             // but it isn't clear that it makes a difference, so we don't.\n-            let custom = ptr.as_ptr().cast::<u8>().wrapping_sub(TAG_CUSTOM).cast::<Custom>();\n+            let custom = ptr.as_ptr().wrapping_byte_sub(TAG_CUSTOM).cast::<Custom>();\n             ErrorData::Custom(make_custom(custom))\n         }\n         _ => {"}, {"sha": "ba16a5c68ad9e7209433fecc4f3bb1a8cb2522f8", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53565b23ac21bc15be1feab9fb316fce7a73e21c/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=53565b23ac21bc15be1feab9fb316fce7a73e21c", "patch": "@@ -296,6 +296,7 @@\n #![feature(panic_can_unwind)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n+#![feature(pointer_byte_offsets)]\n #![feature(pointer_is_aligned)]\n #![feature(portable_simd)]\n #![feature(prelude_2024)]"}]}