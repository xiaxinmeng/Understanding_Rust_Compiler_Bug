{"sha": "75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZGE0M2RjODdhOWZlZTNmYzFlZjVjZmZiNGE2NzIxZWY0YmQyYmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-07T23:47:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:39Z"}, "message": "Use new 'p @ ..' syntax in tests.", "tree": {"sha": "3d90c5ef535ada61cc549e97ab56987cc4b502b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d90c5ef535ada61cc549e97ab56987cc4b502b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "html_url": "https://github.com/rust-lang/rust/commit/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891a736b0206f9646803475bed1aeb7ac9efcadd", "url": "https://api.github.com/repos/rust-lang/rust/commits/891a736b0206f9646803475bed1aeb7ac9efcadd", "html_url": "https://github.com/rust-lang/rust/commit/891a736b0206f9646803475bed1aeb7ac9efcadd"}], "stats": {"total": 154, "additions": 69, "deletions": 85}, "files": [{"sha": "c249154c71e23b19e08de5cc599ece1a267d3c6d", "filename": "src/test/mir-opt/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -8,7 +8,7 @@ fn move_out_from_end() {\n \n fn move_out_by_subslice() {\n     let a = [box 1, box 2];\n-    let [_y..] = a;\n+    let [_y @ ..] = a;\n }\n \n fn main() {"}, {"sha": "f416160db242247af496b9fcec2a33b7e61fc6a5", "filename": "src/test/ui/array-slice-vec/vec-matching-fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-fold.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -11,7 +11,7 @@ fn foldl<T, U, F>(values: &[T],\n     U: Clone+Debug, T:Debug,\n     F: FnMut(U, &T) -> U,\n {    match values {\n-        &[ref head, ref tail..] =>\n+        &[ref head, ref tail @ ..] =>\n             foldl(tail, function(initial, head), function),\n         &[] => {\n             // FIXME: call guards\n@@ -28,7 +28,7 @@ fn foldr<T, U, F>(values: &[T],\n     F: FnMut(&T, U) -> U,\n {\n     match values {\n-        &[ref head.., ref tail] =>\n+        &[ref head @ .., ref tail] =>\n             foldr(head, function(tail, initial), function),\n         &[] => {\n             // FIXME: call guards"}, {"sha": "f0602c328b071af010092e6b513c8970b72ede24", "filename": "src/test/ui/array-slice-vec/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -8,7 +8,7 @@ pub fn main() {\n     let x: &[isize] = &[1, 2, 3, 4, 5];\n     if !x.is_empty() {\n         let el = match x {\n-            &[1, ref tail..] => &tail[0],\n+            &[1, ref tail @ ..] => &tail[0],\n             _ => unreachable!()\n         };\n         println!(\"{}\", *el);"}, {"sha": "49c736bd72847377503b7942da89fa5e126d0986", "filename": "src/test/ui/array-slice-vec/vec-matching.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-matching.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -14,23 +14,23 @@ fn a() {\n fn b() {\n     let x = [1, 2, 3];\n     match x {\n-        [a, b, c..] => {\n+        [a, b, c @ ..] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n             let expected: &[_] = &[3];\n             assert_eq!(c, expected);\n         }\n     }\n     match x {\n-        [a.., b, c] => {\n+        [a @ .., b, c] => {\n             let expected: &[_] = &[1];\n             assert_eq!(a, expected);\n             assert_eq!(b, 2);\n             assert_eq!(c, 3);\n         }\n     }\n     match x {\n-        [a, b.., c] => {\n+        [a, b @ .., c] => {\n             assert_eq!(a, 1);\n             let expected: &[_] = &[2];\n             assert_eq!(b, expected);\n@@ -50,7 +50,7 @@ fn b() {\n fn b_slice() {\n     let x : &[_] = &[1, 2, 3];\n     match x {\n-        &[a, b, ref c..] => {\n+        &[a, b, ref c @ ..] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n             let expected: &[_] = &[3];\n@@ -59,7 +59,7 @@ fn b_slice() {\n         _ => unreachable!()\n     }\n     match x {\n-        &[ref a.., b, c] => {\n+        &[ref a @ .., b, c] => {\n             let expected: &[_] = &[1];\n             assert_eq!(a, expected);\n             assert_eq!(b, 2);\n@@ -68,7 +68,7 @@ fn b_slice() {\n         _ => unreachable!()\n     }\n     match x {\n-        &[a, ref b.., c] => {\n+        &[a, ref b @ .., c] => {\n             assert_eq!(a, 1);\n             let expected: &[_] = &[2];\n             assert_eq!(b, expected);\n@@ -134,26 +134,11 @@ fn e() {\n     assert_eq!(c, 1);\n }\n \n-fn f() {\n-    let x = &[1, 2, 3, 4, 5];\n-    let [a, [b, [c, ..].., d].., e] = *x;\n-    assert_eq!((a, b, c, d, e), (1, 2, 3, 4, 5));\n-\n-    let x: &[isize] = x;\n-    let (a, b, c, d, e) = match *x {\n-        [a, [b, [c, ..].., d].., e] => (a, b, c, d, e),\n-        _ => unimplemented!()\n-    };\n-\n-    assert_eq!((a, b, c, d, e), (1, 2, 3, 4, 5));\n-}\n-\n pub fn main() {\n     a();\n     b();\n     b_slice();\n     c();\n     d();\n     e();\n-    f();\n }"}, {"sha": "3c7b160dcc54038a9e218761b84e6c3c86184cac", "filename": "src/test/ui/array-slice-vec/vec-tail-matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-tail-matching.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -13,14 +13,14 @@ pub fn main() {\n         Foo { string: \"baz\" }\n     ];\n     match x {\n-        [ref first, ref tail..] => {\n+        [ref first, ref tail @ ..] => {\n             assert_eq!(first.string, \"foo\");\n             assert_eq!(tail.len(), 2);\n             assert_eq!(tail[0].string, \"bar\");\n             assert_eq!(tail[1].string, \"baz\");\n \n             match *(tail as &[_]) {\n-                [Foo { .. }, _, Foo { .. }, ref _tail..] => {\n+                [Foo { .. }, _, Foo { .. }, ref _tail @ ..] => {\n                     unreachable!();\n                 }\n                 [Foo { string: ref a }, Foo { string: ref b }] => {"}, {"sha": "ac733ef6e9c862c7b96628fefb8ad34ecc26072c", "filename": "src/test/ui/binding/irrefutable-slice-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fbinding%2Firrefutable-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fbinding%2Firrefutable-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Firrefutable-slice-patterns.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -4,7 +4,7 @@\n #![feature(slice_patterns)]\n \n fn foo(s: &[i32]) -> &[i32] {\n-    let &[ref xs..] = s;\n+    let &[ref xs @ ..] = s;\n     xs\n }\n "}, {"sha": "5326fa612a87bed365fa28a763af3d040a1f3391", "filename": "src/test/ui/binding/zero_sized_subslice_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fbinding%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fbinding%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fzero_sized_subslice_match.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     // The subslice used to go out of bounds for zero-sized array items, check that this doesn't\n     // happen anymore\n     match x {\n-        [_, ref y..] => assert_eq!(&x[1] as *const (), &y[0] as *const ())\n+        [_, ref y @ ..] => assert_eq!(&x[1] as *const (), &y[0] as *const ())\n     }\n }"}, {"sha": "c27d9519dc7986f640221273ad467e330e80a21b", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -140,22 +140,22 @@ fn main() {\n         let mut v = &[1, 2, 3, 4, 5];\n         let x = &mut v;\n         match v {\n-            &[x..] => println!(\"{:?}\", x),\n+            &[x @ ..] => println!(\"{:?}\", x),\n                 //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n-            &[_, x..] => println!(\"{:?}\", x),\n+            &[_, x @ ..] => println!(\"{:?}\", x),\n                 //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n-            &[x.., _] => println!(\"{:?}\", x),\n+            &[x @ .., _] => println!(\"{:?}\", x),\n                 //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n-            &[_, x.., _] => println!(\"{:?}\", x),\n+            &[_, x @ .., _] => println!(\"{:?}\", x),\n                 //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }"}, {"sha": "ee6abf407a30490afd7acb14ef766ca885a8bb4c", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -10,7 +10,7 @@ fn move_out_from_begin_and_end() {\n fn move_out_by_const_index_and_subslice() {\n     let a = [box 1, box 2];\n     let [_x, _] = a;\n-    let [_y..] = a; //~ ERROR [E0382]\n+    let [_y @ ..] = a; //~ ERROR [E0382]\n }\n \n fn main() {}"}, {"sha": "fa9a3c217db77ec0eefc88d5128f6e1fcaa2f271", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     ];\n     let x: &[Foo] = &x;\n     match *x {\n-        [_, ref tail..] => {\n+        [_, ref tail @ ..] => {\n             match tail {\n             //~^ ERROR cannot move out of type `[Foo]`\n                 &[Foo { string: a },"}, {"sha": "048813b2b93e6fd6970eabe2df65509f36217369", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-rpass.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -5,7 +5,7 @@\n \n fn mut_head_tail<'a, A>(v: &'a mut [A]) -> Option<(&'a mut A, &'a mut [A])> {\n     match *v {\n-        [ref mut head, ref mut tail..] => {\n+        [ref mut head, ref mut tail @ ..] => {\n             Some((head, tail))\n         }\n         [] => None"}, {"sha": "a6b54f9537ddcf5409240dcc08558a6372682eca", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -70,7 +70,7 @@ fn const_index_mixed(s: &mut [i32]) {\n \n fn const_index_and_subslice_ok(s: &mut [i32]) {\n     if let [ref first, ref second, ..] = *s {\n-        if let [_, _, ref mut tail..] = *s {\n+        if let [_, _, ref mut tail @ ..] = *s {\n             nop(&[first, second]);\n             nop_subslice(tail);\n         }\n@@ -79,7 +79,7 @@ fn const_index_and_subslice_ok(s: &mut [i32]) {\n \n fn const_index_and_subslice_err(s: &mut [i32]) {\n     if let [ref first, ref second, ..] = *s {\n-        if let [_, ref mut tail..] = *s { //~ERROR\n+        if let [_, ref mut tail @ ..] = *s { //~ERROR\n             nop(&[first, second]);\n             nop_subslice(tail);\n         }\n@@ -88,7 +88,7 @@ fn const_index_and_subslice_err(s: &mut [i32]) {\n \n fn const_index_and_subslice_from_end_ok(s: &mut [i32]) {\n     if let [.., ref second, ref first] = *s {\n-        if let [ref mut tail.., _, _] = *s {\n+        if let [ref mut tail @ .., _, _] = *s {\n             nop(&[first, second]);\n             nop_subslice(tail);\n         }\n@@ -97,16 +97,16 @@ fn const_index_and_subslice_from_end_ok(s: &mut [i32]) {\n \n fn const_index_and_subslice_from_end_err(s: &mut [i32]) {\n     if let [.., ref second, ref first] = *s {\n-        if let [ref mut tail.., _] = *s { //~ERROR\n+        if let [ref mut tail @ .., _] = *s { //~ERROR\n             nop(&[first, second]);\n             nop_subslice(tail);\n         }\n     }\n }\n \n fn subslices(s: &mut [i32]) {\n-    if let [_, _, _, ref s1..] = *s {\n-        if let [ref mut s2.., _, _, _] = *s { //~ERROR\n+    if let [_, _, _, ref s1 @ ..] = *s {\n+        if let [ref mut s2 @ .., _, _, _] = *s { //~ERROR\n             nop_subslice(s1);\n             nop_subslice(s2);\n         }"}, {"sha": "53a9bcef74a22beb410ed391a74f3b13a5fbd117", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -4,7 +4,7 @@ fn a<'a>() -> &'a [isize] {\n     let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec;\n     let tail = match vec {\n-        &[_, ref tail..] => tail,\n+        &[_, ref tail @ ..] => tail,\n         _ => panic!(\"a\")\n     };\n     tail //~ ERROR cannot return value referencing local variable `vec`\n@@ -14,7 +14,7 @@ fn b<'a>() -> &'a [isize] {\n     let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec;\n     let init = match vec {\n-        &[ref init.., _] => init,\n+        &[ref init @ .., _] => init,\n         _ => panic!(\"b\")\n     };\n     init //~ ERROR cannot return value referencing local variable `vec`\n@@ -24,7 +24,7 @@ fn c<'a>() -> &'a [isize] {\n     let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec;\n     let slice = match vec {\n-        &[_, ref slice.., _] => slice,\n+        &[_, ref slice @ .., _] => slice,\n         _ => panic!(\"c\")\n     };\n     slice //~ ERROR cannot return value referencing local variable `vec`"}, {"sha": "dd9023f6d9f791846a404f09068cfd0e9d152fa2", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -4,7 +4,7 @@ fn a() {\n     let mut v = vec![1, 2, 3];\n     let vb: &mut [isize] = &mut v;\n     match vb {\n-        &mut [_a, ref tail..] => {\n+        &mut [_a, ref tail @ ..] => {\n             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n         }\n         _ => {}"}, {"sha": "420223009a45b2f0c5624e1ef178921ae4058f96", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     let mut a = [1, 2, 3, 4];\n     let t = match a {\n-        [1, 2, ref tail..] => tail,\n+        [1, 2, ref tail @ ..] => tail,\n         _ => unreachable!()\n     };\n     println!(\"t[0]: {}\", t[0]);"}, {"sha": "a215305f684dd6aa16efafb0acca652a70a1f5f9", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -19,7 +19,7 @@ fn b() {\n     let mut vec = vec![box 1, box 2, box 3];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n-        &mut [ref _b..] => {\n+        &mut [ref _b @ ..] => {\n         //~^ borrow of `vec[_]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n             //~^ NOTE assignment to borrowed `vec[_]` occurs here"}, {"sha": "c35be2f6be62c02f48a9569aa9d02a7085346122", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -4,7 +4,7 @@ fn a<'a>() -> &'a isize {\n     let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec;\n     let tail = match vec {\n-        &[_a, ref tail..] => &tail[0],\n+        &[_a, ref tail @ ..] => &tail[0],\n         _ => panic!(\"foo\")\n     };\n     tail //~ ERROR cannot return value referencing local variable `vec`"}, {"sha": "f3f5c382275fe760bd06901237eb2a77810c3f33", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -217,7 +217,7 @@ async fn subslice_pattern_from_end_with_drop(a: Rc<Allocator>, arg: bool, arg2:\n     if arg {\n         let [.., _x, _] = arr;\n     } else {\n-        let [_, _y..] = arr;\n+        let [_, _y @ ..] = arr;\n     }\n     a.alloc().await;\n }\n@@ -226,7 +226,7 @@ async fn subslice_pattern_reassign(a: Rc<Allocator>) {\n     let mut ar = [a.alloc().await, a.alloc().await, a.alloc().await];\n     let [_, _, _x] = ar;\n     ar = [a.alloc().await, a.alloc().await, a.alloc().await];\n-    let [_, _y..] = ar;\n+    let [_, _y @ ..] = ar;\n     a.alloc().await;\n }\n "}, {"sha": "8516bc3d96424cb452adb6ccd7051d11d21728b0", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -237,7 +237,7 @@ fn subslice_pattern_from_end(a: &Allocator, arg: bool) {\n     if arg {\n         let[.., _x, _] = a;\n     } else {\n-        let[_, _y..] = a;\n+        let[_, _y @ ..] = a;\n     }\n }\n \n@@ -251,7 +251,7 @@ fn subslice_pattern_from_end_with_drop(a: &Allocator, arg: bool, arg2: bool) {\n     if arg {\n         let[.., _x, _] = a;\n     } else {\n-        let[_, _y..] = a;\n+        let[_, _y @ ..] = a;\n     }\n }\n \n@@ -266,7 +266,7 @@ fn subslice_pattern_reassign(a: &Allocator) {\n     let mut ar = [a.alloc(), a.alloc(), a.alloc()];\n     let[_, _, _x] = ar;\n     ar = [a.alloc(), a.alloc(), a.alloc()];\n-    let[_, _y..] = ar;\n+    let[_, _y @ ..] = ar;\n }\n \n fn panic_after_return(a: &Allocator) -> Ptr<'_> {"}, {"sha": "17d03b14fc6e176487c59800b2d0db61de867108", "filename": "src/test/ui/error-codes/E0528.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Ferror-codes%2FE0528.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Ferror-codes%2FE0528.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0528.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let r = &[1, 2];\n     match r {\n-        &[a, b, c, rest..] => {\n+        &[a, b, c, rest @ ..] => {\n         //~^ ERROR E0528\n         }\n     }"}, {"sha": "ad46c6fd3c2e07d291a3320afb24a0c490ae9a87", "filename": "src/test/ui/feature-gates/feature-gate-slice-patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-slice-patterns.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -10,8 +10,8 @@ fn main() {\n \n     let x = [ 1, 2, 3, 4, 5 ];\n     match x {\n-        [ xs.., 4, 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n-        [ 1, xs.., 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n-        [ 1, 2, xs.. ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [ xs @ .., 4, 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [ 1, xs @ .., 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [ 1, 2, xs @ .. ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n     }\n }"}, {"sha": "086613180746362a414dbb7abb33dc348402311c", "filename": "src/test/ui/issues/issue-12369.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12369.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let v: isize = match &*sl {\n         &[] => 0,\n         &[a,b,c] => 3,\n-        &[a, ref rest..] => a,\n-        &[10,a, ref rest..] => 10 //~ ERROR: unreachable pattern\n+        &[a, ref rest @ ..] => a,\n+        &[10,a, ref rest @ ..] => 10 //~ ERROR: unreachable pattern\n     };\n }"}, {"sha": "b11b1cda38ae127d39b64c94f873227064444b9c", "filename": "src/test/ui/issues/issue-15080.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15080.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -7,11 +7,11 @@ fn main() {\n     let mut result = vec![];\n     loop {\n         x = match *x {\n-            [1, n, 3, ref rest..] => {\n+            [1, n, 3, ref rest @ ..] => {\n                 result.push(n);\n                 rest\n             }\n-            [n, ref rest..] => {\n+            [n, ref rest @ ..] => {\n                 result.push(n);\n                 rest\n             }"}, {"sha": "ee977541137db66e351a7a3e7f004873d0e6d8c1", "filename": "src/test/ui/issues/issue-15104.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-15104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-15104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15104.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -9,6 +9,6 @@ fn count_members(v: &[usize]) -> usize {\n     match *v {\n         []         => 0,\n         [_]        => 1,\n-        [_, ref xs..] => 1 + count_members(xs)\n+        [_, ref xs @ ..] => 1 + count_members(xs)\n     }\n }"}, {"sha": "fefa3f2f8730465b7bcb9916a2a96c9adca23041", "filename": "src/test/ui/issues/issue-17877.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17877.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -7,8 +7,8 @@ fn main() {\n     }, 42_usize);\n \n     assert_eq!(match [0u8; 1024] {\n-        [1, _..] => 0_usize,\n-        [0, _..] => 1_usize,\n+        [1, ..] => 0_usize,\n+        [0, ..] => 1_usize,\n         _ => 2_usize\n     }, 1_usize);\n }"}, {"sha": "f21a4766768ee317414c7bf06a94dac789017d1c", "filename": "src/test/ui/issues/issue-26158.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-26158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-26158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26158.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let x: &[u32] = &[];\n-    let &[[ref _a, ref _b..]..] = x; //~ ERROR refutable pattern\n+    let &[[ref _a, ref _b @ ..] @ ..] = x; //~ ERROR refutable pattern\n }"}, {"sha": "31b3aba6bc20422b27433e05eec5d5eb2b3cc020", "filename": "src/test/ui/issues/issue-37598.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37598.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -1,11 +1,10 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-#![allow(dead_code)]\n+// check-pass\n #![feature(slice_patterns)]\n \n fn check(list: &[u8]) {\n     match list {\n         &[] => {},\n-        &[_u1, _u2, ref _next..] => {},\n+        &[_u1, _u2, ref _next @ ..] => {},\n         &[_u1] => {},\n     }\n }"}, {"sha": "5b70bd6e5ff54923a8ed319fc23d84966d305138", "filename": "src/test/ui/issues/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fissues%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7784.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     assert_eq!(d, \"baz\");\n \n     let out = bar(\"baz\", \"foo\");\n-    let [a, xs.., d] = out;\n+    let [a, xs @ .., d] = out;\n     assert_eq!(a, \"baz\");\n     assert_eq!(xs, [\"foo\", \"foo\"]);\n     assert_eq!(d, \"baz\");"}, {"sha": "a0ef92743ac5a775517d94c1a5ba277078da5f61", "filename": "src/test/ui/match/match-vec-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-mismatch.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -19,10 +19,10 @@ fn main() {\n     match [0, 1, 2] {\n         [0] => {}, //~ ERROR pattern requires\n \n-        [0, 1, x..] => {\n+        [0, 1, x @ ..] => {\n             let a: [_; 1] = x;\n         }\n-        [0, 1, 2, 3, x..] => {} //~ ERROR pattern requires\n+        [0, 1, 2, 3, x @ ..] => {} //~ ERROR pattern requires\n     };\n \n     match does_not_exist { //~ ERROR cannot find value `does_not_exist` in this scope"}, {"sha": "78810525bad0f76b4653d3ab4abbf5df382c9f85", "filename": "src/test/ui/match/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-unreachable.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     let x: Vec<char> = vec!['a', 'b', 'c'];\n     let x: &[char] = &x;\n     match *x {\n-        ['a', 'b', 'c', ref _tail..] => {}\n+        ['a', 'b', 'c', ref _tail @ ..] => {}\n         ['a', 'b', 'c'] => {} //~ ERROR unreachable pattern\n         _ => {}\n     }"}, {"sha": "8cc5f4042cccb1f4ab94b7fef19a7d9b0c1dd9b4", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -32,14 +32,14 @@ fn main() {\n     let vec = vec![Some(42), None, Some(21)];\n     let vec: &[Option<isize>] = &vec;\n     match *vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n-        [Some(..), None, ref tail..] => {}\n-        [Some(..), Some(..), ref tail..] => {}\n+        [Some(..), None, ref tail @ ..] => {}\n+        [Some(..), Some(..), ref tail @ ..] => {}\n         [None] => {}\n     }\n     let vec = vec![1];\n     let vec: &[isize] = &vec;\n     match *vec {\n-        [_, ref tail..] => (),\n+        [_, ref tail @ ..] => (),\n         [] => ()\n     }\n     let vec = vec![0.5f32];\n@@ -53,10 +53,10 @@ fn main() {\n     let vec = vec![Some(42), None, Some(21)];\n     let vec: &[Option<isize>] = &vec;\n     match *vec {\n-        [Some(..), None, ref tail..] => {}\n-        [Some(..), Some(..), ref tail..] => {}\n-        [None, None, ref tail..] => {}\n-        [None, Some(..), ref tail..] => {}\n+        [Some(..), None, ref tail @ ..] => {}\n+        [Some(..), Some(..), ref tail @ ..] => {}\n+        [None, None, ref tail @ ..] => {}\n+        [None, Some(..), ref tail @ ..] => {}\n         [Some(_)] => {}\n         [None] => {}\n         [] => {}"}, {"sha": "4ca1cbcebccf51a94b249e9f5d6dc30535b11137", "filename": "src/test/ui/non-exhaustive/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-pattern-witness.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -77,7 +77,7 @@ fn vectors_with_nested_enums() {\n         [Enum::Second(true), Enum::First] => (),\n         [Enum::Second(true), Enum::Second(true)] => (),\n         [Enum::Second(false), _] => (),\n-        [_, _, ref tail.., _] => ()\n+        [_, _, ref tail @ .., _] => ()\n     }\n }\n "}, {"sha": "269f2ce85a349d33c78ecdb3bd4ed9717709c77e", "filename": "src/test/ui/parser/match-vec-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let a = Vec::new();\n     match a {\n-        [1, tail.., tail..] => {}, //~ ERROR: expected one of `,` or `@`, found `..`\n+        [1, tail @ .., tail @ ..] => {}, //~ ERROR: expected one of `,` or `@`, found `..`\n         _ => ()\n     }\n }"}, {"sha": "1484b8c4a1f13e6f519ce65dee4914826b5925bf", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -4,6 +4,6 @@ pub fn main() {\n     let sl: &[u8] = b\"foo\";\n \n     match sl { //~ ERROR non-exhaustive patterns\n-        [first, remainder..] => {},\n+        [first, remainder @ ..] => {},\n     };\n }"}, {"sha": "38b0941aad0a6060a1aea3ee7eb6ab2b68695478", "filename": "src/test/ui/rfcs/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -5,7 +5,7 @@ fn slice_pat() {\n     let sl: &[u8] = b\"foo\";\n \n     match sl {\n-        [first, remainder..] => {\n+        [first, remainder @ ..] => {\n             let _: &u8 = first;\n             assert_eq!(first, &b'f');\n             assert_eq!(remainder, b\"oo\");"}, {"sha": "929c35a9e1122cbac1f1bac170fa9dff0d19d7cd", "filename": "src/test/ui/trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba/src%2Ftest%2Fui%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrailing-comma.rs?ref=75da43dc87a9fee3fc1ef5cffb4a6721ef4bd2ba", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n     let (_, _,) = (1, 1,);\n     let [_, _,] = [1, 1,];\n     let [_, _, .., _,] = [1, 1, 1, 1,];\n-    let [_, _, _.., _,] = [1, 1, 1, 1,];\n+    let [_, _, _, ..,] = [1, 1, 1, 1,];\n \n     let x: Foo<isize,> = Foo::<isize,>(1);\n "}]}