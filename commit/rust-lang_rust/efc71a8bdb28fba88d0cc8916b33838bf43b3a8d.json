{"sha": "efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzcxYThiZGIyOGZiYTg4ZDBjYzg5MTZiMzM4MzhiZjQzYjNhOGQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T03:10:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T02:21:04Z"}, "message": "std: unify the str -> [u8] functions as 3 methods: .as_bytes() and .as_bytes_with_null[_consume]().\n\nThe first acts on &str and is not nul-terminated, the last two act on strings\nthat are always null terminated (&'static str, ~str and @str).", "tree": {"sha": "ad0086d4319facd8da21583e19a952a01250bbbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0086d4319facd8da21583e19a952a01250bbbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "html_url": "https://github.com/rust-lang/rust/commit/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba4a4778cc17c64c33a891a0d2565a1fb04ddffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4a4778cc17c64c33a891a0d2565a1fb04ddffc", "html_url": "https://github.com/rust-lang/rust/commit/ba4a4778cc17c64c33a891a0d2565a1fb04ddffc"}], "stats": {"total": 479, "additions": 258, "deletions": 221}, "files": [{"sha": "f4754b3e4cbe1c7f0bffbbb8549633060c4fe4d6", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -12,7 +12,6 @@\n \n use core::prelude::*;\n \n-use core::str;\n use core::vec;\n \n /// A trait for converting a value to base64 encoding.\n@@ -111,7 +110,7 @@ impl<'self> ToBase64 for &'self str {\n      *\n      */\n     fn to_base64(&self) -> ~str {\n-        str::to_bytes(*self).to_base64()\n+        self.as_bytes().to_base64()\n     }\n }\n \n@@ -224,7 +223,7 @@ impl<'self> FromBase64 for &'self str {\n      * ~~~\n      */\n     fn from_base64(&self) -> ~[u8] {\n-        str::to_bytes(*self).from_base64()\n+        self.as_bytes().from_base64()\n     }\n }\n \n@@ -245,12 +244,12 @@ mod tests {\n \n     #[test]\n     fn test_from_base64() {\n-        assert_eq!(\"\".from_base64(), str::to_bytes(\"\"));\n-        assert_eq!(\"Zg==\".from_base64(), str::to_bytes(\"f\"));\n-        assert_eq!(\"Zm8=\".from_base64(), str::to_bytes(\"fo\"));\n-        assert_eq!(\"Zm9v\".from_base64(), str::to_bytes(\"foo\"));\n-        assert_eq!(\"Zm9vYg==\".from_base64(), str::to_bytes(\"foob\"));\n-        assert_eq!(\"Zm9vYmE=\".from_base64(), str::to_bytes(\"fooba\"))\n-        assert_eq!(\"Zm9vYmFy\".from_base64(), str::to_bytes(\"foobar\"));\n+        assert_eq!(\"\".from_base64(), \"\".as_bytes().to_owned());\n+        assert_eq!(\"Zg==\".from_base64(), \"f\".as_bytes().to_owned());\n+        assert_eq!(\"Zm8=\".from_base64(), \"fo\".as_bytes().to_owned());\n+        assert_eq!(\"Zm9v\".from_base64(), \"foo\".as_bytes().to_owned());\n+        assert_eq!(\"Zm9vYg==\".from_base64(), \"foob\".as_bytes().to_owned());\n+        assert_eq!(\"Zm9vYmE=\".from_base64(), \"fooba\".as_bytes().to_owned());\n+        assert_eq!(\"Zm9vYmFy\".from_base64(), \"foobar\".as_bytes().to_owned());\n     }\n }"}, {"sha": "dd08f23a7a10f69ad47071bf46978ed4a69bf36a", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -607,7 +607,6 @@ pub mod writer {\n \n     use core::cast;\n     use core::io;\n-    use core::str;\n \n     // ebml writing\n     pub struct Encoder {\n@@ -725,7 +724,7 @@ pub mod writer {\n         }\n \n         pub fn wr_tagged_str(&mut self, tag_id: uint, v: &str) {\n-            str::byte_slice(v, |b| self.wr_tagged_bytes(tag_id, b));\n+            self.wr_tagged_bytes(tag_id, v.as_bytes());\n         }\n \n         pub fn wr_bytes(&mut self, b: &[u8]) {\n@@ -735,7 +734,7 @@ pub mod writer {\n \n         pub fn wr_str(&mut self, s: &str) {\n             debug!(\"Write str: %?\", s);\n-            self.writer.write(str::to_bytes(s));\n+            self.writer.write(s.as_bytes());\n         }\n     }\n "}, {"sha": "345b0e8cff769c381425b167020851e3fe7cd2a9", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -487,7 +487,7 @@ mod test {\n         let mut buf : ~[u8] = vec::from_elem(6, 0u8);\n         let count = fi.read(buf, 10);\n         assert_eq!(count, 6);\n-        assert_eq!(buf, \"0\\n1\\n2\\n\".to_bytes());\n+        assert_eq!(buf, \"0\\n1\\n2\\n\".as_bytes().to_owned());\n         assert!(fi.eof())\n         assert_eq!(fi.state().line_num, 3);\n     }"}, {"sha": "94793804bb13839fa29734da11cdf823a6d2426b", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use core::str;\n use core::uint;\n use core::vec;\n \n@@ -129,7 +128,7 @@ pub fn md4_str(msg: &[u8]) -> ~str {\n \n /// Calculates the md4 hash of a string, returning the hex-encoded version of\n /// the hash\n-pub fn md4_text(msg: &str) -> ~str { md4_str(str::to_bytes(msg)) }\n+pub fn md4_text(msg: &str) -> ~str { md4_str(msg.as_bytes()) }\n \n #[test]\n fn test_md4() {"}, {"sha": "d95807f2b91c49f9aa523d32b111977748ee6c09", "filename": "src/libextra/net_tcp.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -1636,7 +1636,7 @@ mod test {\n         assert_eq!(net::ip::get_port(&sock.get_peer_addr()), 8887);\n \n         // Fulfill the protocol the test server expects\n-        let resp_bytes = str::to_bytes(\"ping\");\n+        let resp_bytes = \"ping\".as_bytes().to_owned();\n         tcp_write_single(&sock, resp_bytes);\n         debug!(\"message sent\");\n         sock.read(0u);\n@@ -1756,9 +1756,7 @@ mod test {\n         buf_write(sock_buf, expected_req);\n \n         // so contrived!\n-        let actual_resp = do str::as_bytes(&expected_resp.to_str()) |resp_buf| {\n-            buf_read(sock_buf, resp_buf.len())\n-        };\n+        let actual_resp = buf_read(sock_buf, expected_resp.as_bytes().len());\n \n         let actual_req = server_result_po.recv();\n         debug!(\"REQ: expected: '%s' actual: '%s'\",\n@@ -1810,11 +1808,10 @@ mod test {\n \n     fn buf_write<W:io::Writer>(w: &W, val: &str) {\n         debug!(\"BUF_WRITE: val len %?\", val.len());\n-        do str::byte_slice(val) |b_slice| {\n-            debug!(\"BUF_WRITE: b_slice len %?\",\n-                            b_slice.len());\n-            w.write(b_slice)\n-        }\n+        let b_slice = val.as_bytes();\n+        debug!(\"BUF_WRITE: b_slice len %?\",\n+               b_slice.len());\n+        w.write(b_slice)\n     }\n \n     fn buf_read<R:io::Reader>(r: &R, len: uint) -> ~str {\n@@ -1877,7 +1874,8 @@ mod test {\n                             server_ch.send(\n                                 str::from_bytes(data));\n                             debug!(\"SERVER: before write\");\n-                            tcp_write_single(&sock, str::to_bytes(resp_cell2.take()));\n+                            let s = resp_cell2.take();\n+                            tcp_write_single(&sock, s.as_bytes().to_owned());\n                             debug!(\"SERVER: after write.. die\");\n                             kill_ch.send(None);\n                           }\n@@ -1949,7 +1947,7 @@ mod test {\n         }\n         else {\n             let sock = result::unwrap(connect_result);\n-            let resp_bytes = str::to_bytes(resp);\n+            let resp_bytes = resp.as_bytes().to_owned();\n             tcp_write_single(&sock, resp_bytes);\n             let read_result = sock.read(0u);\n             if read_result.is_err() {"}, {"sha": "31d728f18130bf7f217cfda232e1c933729da8ac", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -1060,7 +1060,7 @@ mod tests {\n         /*\n         assert_eq!(decode_form_urlencoded([]).len(), 0);\n \n-        let s = str::to_bytes(\"a=1&foo+bar=abc&foo+bar=12+%3D+34\");\n+        let s = \"a=1&foo+bar=abc&foo+bar=12+%3D+34\".as_bytes();\n         let form = decode_form_urlencoded(s);\n         assert_eq!(form.len(), 2);\n         assert_eq!(form.get_ref(&~\"a\"), &~[~\"1\"]);"}, {"sha": "18ba4fb9c76ae15948a385ad6ae8bf60e50da018", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -534,7 +534,7 @@ impl FromStrRadix for BigUint {\n \n     pub fn from_str_radix(s: &str, radix: uint)\n         -> Option<BigUint> {\n-        BigUint::parse_bytes(str::to_bytes(s), radix)\n+        BigUint::parse_bytes(s.as_bytes(), radix)\n     }\n }\n \n@@ -1090,7 +1090,7 @@ impl FromStrRadix for BigInt {\n \n     fn from_str_radix(s: &str, radix: uint)\n         -> Option<BigInt> {\n-        BigInt::parse_bytes(str::to_bytes(s), radix)\n+        BigInt::parse_bytes(s.as_bytes(), radix)\n     }\n }\n "}, {"sha": "03ceded0073012c4ac6fdbb5f9798caaa0916ff1", "filename": "src/libextra/sha1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsha1.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -25,7 +25,6 @@\n use core::prelude::*;\n \n use core::iterator::IteratorUtil;\n-use core::str;\n use core::uint;\n use core::vec;\n \n@@ -246,8 +245,7 @@ pub fn sha1() -> @Sha1 {\n         }\n         fn input(&mut self, msg: &const [u8]) { add_input(self, msg); }\n         fn input_str(&mut self, msg: &str) {\n-            let bs = str::to_bytes(msg);\n-            add_input(self, bs);\n+            add_input(self, msg.as_bytes());\n         }\n         fn result(&mut self) -> ~[u8] { return mk_result(self); }\n         fn result_str(&mut self) -> ~str {"}, {"sha": "17bdf6c3a1dd2d22e2f448b3371672e92207ab8e", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -13,7 +13,6 @@\n use core::prelude::*;\n \n use core::iterator::*;\n-use core::vec;\n use core::f64;\n use core::cmp;\n use core::num;"}, {"sha": "40191c8992578007f9e404b8a88beb6e2436f12f", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -85,11 +85,14 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                         _       => return Err(~\"a non-char was used with %c\")\n                     },\n                     's' => match stack.pop() {\n-                        String(s) => output.push_all(s.to_bytes()),\n+                        String(s) => output.push_all(s.as_bytes()),\n                         _         => return Err(~\"a non-str was used with %s\")\n                     },\n                     'd' => match stack.pop() {\n-                        Number(x) => output.push_all(x.to_str().to_bytes()),\n+                        Number(x) => {\n+                            let s = x.to_str();\n+                            output.push_all(s.as_bytes())\n+                        }\n                         _         => return Err(~\"a non-number was used with %d\")\n                     },\n                     'p' => state = PushParam,"}, {"sha": "0918ab8ddadad2013673a45edacdbd3e982a9126", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -769,10 +769,10 @@ mod test_treemap {\n     fn u8_map() {\n         let mut m = TreeMap::new();\n \n-        let k1 = str::to_bytes(\"foo\");\n-        let k2 = str::to_bytes(\"bar\");\n-        let v1 = str::to_bytes(\"baz\");\n-        let v2 = str::to_bytes(\"foobar\");\n+        let k1 = \"foo\".as_bytes();\n+        let k2 = \"bar\".as_bytes();\n+        let v1 = \"baz\".as_bytes();\n+        let v2 = \"foobar\".as_bytes();\n \n         m.insert(copy k1, copy v1);\n         m.insert(copy k2, copy v2);"}, {"sha": "744f4555d5cbd697d3721ab4bec8a63a900286fd", "filename": "src/libextra/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -1368,7 +1368,7 @@ mod test {\n             // In C, this would be a malloc'd or stack-allocated\n             // struct that we'd cast to a void* and store as the\n             // data field in our uv_connect_t struct\n-            let req_str_bytes = str::to_bytes(req_str);\n+            let req_str_bytes = req_str.as_bytes();\n             let req_msg_ptr: *u8 = vec::raw::to_ptr(req_str_bytes);\n             debug!(\"req_msg ptr: %u\", req_msg_ptr as uint);\n             let req_msg = ~[\n@@ -1626,7 +1626,7 @@ mod test {\n             let server_write_req = write_t();\n             let server_write_req_ptr: *uv_write_t = &server_write_req;\n \n-            let resp_str_bytes = str::to_bytes(server_resp_msg);\n+            let resp_str_bytes = server_resp_msg.as_bytes();\n             let resp_msg_ptr: *u8 = vec::raw::to_ptr(resp_str_bytes);\n             debug!(\"resp_msg ptr: %u\", resp_msg_ptr as uint);\n             let resp_msg = ~["}, {"sha": "84fb361adb9827b444ba6b360106ee76444b7a5a", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -50,8 +50,7 @@ pub enum output_type {\n }\n \n fn write_string<W:Writer>(writer: &mut W, string: &str) {\n-    let buffer = str::as_bytes_slice(string);\n-    writer.write(buffer);\n+    writer.write(string.as_bytes());\n }\n \n pub fn llvm_err(sess: Session, msg: ~str) -> ! {"}, {"sha": "b34bdafbeda5a572f8ad6d38147f4f6a20712689", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -202,7 +202,8 @@ fn encode_type_param_bounds(ebml_w: &mut writer::Encoder,\n \n fn encode_variant_id(ebml_w: &mut writer::Encoder, vid: def_id) {\n     ebml_w.start_tag(tag_items_data_item_variant);\n-    ebml_w.writer.write(str::to_bytes(def_to_str(vid)));\n+    let s = def_to_str(vid);\n+    ebml_w.writer.write(s.as_bytes());\n     ebml_w.end_tag();\n }\n \n@@ -271,7 +272,7 @@ fn encode_symbol(ecx: @EncodeContext,\n     match ecx.item_symbols.find(&id) {\n         Some(x) => {\n             debug!(\"encode_symbol(id=%?, str=%s)\", id, *x);\n-            ebml_w.writer.write(str::to_bytes(*x));\n+            ebml_w.writer.write(x.as_bytes());\n         }\n         None => {\n             ecx.diag.handler().bug(\n@@ -285,21 +286,23 @@ fn encode_discriminant(ecx: @EncodeContext,\n                        ebml_w: &mut writer::Encoder,\n                        id: node_id) {\n     ebml_w.start_tag(tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::to_bytes(*ecx.discrim_symbols.get_copy(&id)));\n+    ebml_w.writer.write(ecx.discrim_symbols.get_copy(&id).as_bytes());\n     ebml_w.end_tag();\n }\n \n fn encode_disr_val(_: @EncodeContext,\n                    ebml_w: &mut writer::Encoder,\n                    disr_val: int) {\n     ebml_w.start_tag(tag_disr_val);\n-    ebml_w.writer.write(str::to_bytes(int::to_str(disr_val)));\n+    let s = int::to_str(disr_val);\n+    ebml_w.writer.write(s.as_bytes());\n     ebml_w.end_tag();\n }\n \n fn encode_parent_item(ebml_w: &mut writer::Encoder, id: def_id) {\n     ebml_w.start_tag(tag_items_data_parent_item);\n-    ebml_w.writer.write(str::to_bytes(def_to_str(id)));\n+    let s = def_to_str(id);\n+    ebml_w.writer.write(s.as_bytes());\n     ebml_w.end_tag();\n }\n \n@@ -954,7 +957,8 @@ fn encode_info_for_item(ecx: @EncodeContext,\n         for methods.each |m| {\n             ebml_w.start_tag(tag_item_impl_method);\n             let method_def_id = local_def(m.id);\n-            ebml_w.writer.write(str::to_bytes(def_to_str(method_def_id)));\n+            let s = def_to_str(method_def_id);\n+            ebml_w.writer.write(s.as_bytes());\n             ebml_w.end_tag();\n         }\n         for opt_trait.iter().advance |ast_trait_ref| {\n@@ -1218,7 +1222,7 @@ fn encode_meta_item(ebml_w: &mut writer::Encoder, mi: @meta_item) {\n       meta_word(name) => {\n         ebml_w.start_tag(tag_meta_item_word);\n         ebml_w.start_tag(tag_meta_item_name);\n-        ebml_w.writer.write(str::to_bytes(*name));\n+        ebml_w.writer.write(name.as_bytes());\n         ebml_w.end_tag();\n         ebml_w.end_tag();\n       }\n@@ -1227,10 +1231,10 @@ fn encode_meta_item(ebml_w: &mut writer::Encoder, mi: @meta_item) {\n           lit_str(value) => {\n             ebml_w.start_tag(tag_meta_item_name_value);\n             ebml_w.start_tag(tag_meta_item_name);\n-            ebml_w.writer.write(str::to_bytes(*name));\n+            ebml_w.writer.write(name.as_bytes());\n             ebml_w.end_tag();\n             ebml_w.start_tag(tag_meta_item_value);\n-            ebml_w.writer.write(str::to_bytes(*value));\n+            ebml_w.writer.write(value.as_bytes());\n             ebml_w.end_tag();\n             ebml_w.end_tag();\n           }\n@@ -1240,7 +1244,7 @@ fn encode_meta_item(ebml_w: &mut writer::Encoder, mi: @meta_item) {\n       meta_list(name, ref items) => {\n         ebml_w.start_tag(tag_meta_item_list);\n         ebml_w.start_tag(tag_meta_item_name);\n-        ebml_w.writer.write(str::to_bytes(*name));\n+        ebml_w.writer.write(name.as_bytes());\n         ebml_w.end_tag();\n         for items.each |inner_item| {\n             encode_meta_item(ebml_w, *inner_item);\n@@ -1398,20 +1402,21 @@ fn encode_crate_dep(ecx: @EncodeContext,\n                     dep: decoder::crate_dep) {\n     ebml_w.start_tag(tag_crate_dep);\n     ebml_w.start_tag(tag_crate_dep_name);\n-    ebml_w.writer.write(str::to_bytes(*ecx.tcx.sess.str_of(dep.name)));\n+    let s = ecx.tcx.sess.str_of(dep.name);\n+    ebml_w.writer.write(s.as_bytes());\n     ebml_w.end_tag();\n     ebml_w.start_tag(tag_crate_dep_vers);\n-    ebml_w.writer.write(str::to_bytes(*dep.vers));\n+    ebml_w.writer.write(dep.vers.as_bytes());\n     ebml_w.end_tag();\n     ebml_w.start_tag(tag_crate_dep_hash);\n-    ebml_w.writer.write(str::to_bytes(*dep.hash));\n+    ebml_w.writer.write(dep.hash.as_bytes());\n     ebml_w.end_tag();\n     ebml_w.end_tag();\n }\n \n fn encode_hash(ebml_w: &mut writer::Encoder, hash: &str) {\n     ebml_w.start_tag(tag_crate_hash);\n-    ebml_w.writer.write(str::to_bytes(hash));\n+    ebml_w.writer.write(hash.as_bytes());\n     ebml_w.end_tag();\n }\n "}, {"sha": "d65e7e0ed4fe38ff348b8350200477fe4e4f7509", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -13,7 +13,6 @@ use core::prelude::*;\n use core::option;\n use core::os;\n use core::result;\n-use core::str;\n \n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should"}, {"sha": "3ec86688c3169c5bb6440369ceb68931ce1d8980", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -48,7 +48,6 @@ use core::iterator::IteratorUtil;\n use core::container::Map;\n use core::libc::c_ulonglong;\n use core::option::{Option, Some, None};\n-use core::vec;\n \n use lib::llvm::{ValueRef, TypeRef, True, IntEQ, IntNE};\n use middle::trans::_match;"}, {"sha": "ef65cc8e5a1b88483b8b78204e2907aa942bf1dd", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -262,7 +262,7 @@ mod test {\n             .. default_config(&Path(\"test\"))\n         };\n         let mock_process_output: ~fn(&str, &[~str]) -> ProcessOutput = |_, _| {\n-            ProcessOutput { status: 0, output: \"pandoc 1.8.2.1\".to_bytes(), error: ~[] }\n+            ProcessOutput { status: 0, output: \"pandoc 1.8.2.1\".as_bytes().to_owned(), error: ~[] }\n         };\n         let result = maybe_find_pandoc(&config, None, mock_process_output);\n         assert!(result == result::Ok(Some(~\"pandoc\")));"}, {"sha": "98ff2751545deca60d7e71eeb29ddf08b0746d8f", "filename": "src/librustpkg/package_path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustpkg%2Fpackage_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibrustpkg%2Fpackage_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_path.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -44,8 +44,7 @@ pub fn normalize(p_: RemotePath) -> LocalPath {\n }\n \n pub fn write<W: Writer>(writer: &mut W, string: &str) {\n-    let buffer = str::as_bytes_slice(string);\n-    writer.write(buffer);\n+    writer.write(string.as_bytes());\n }\n \n pub fn hash(data: ~str) -> ~str {"}, {"sha": "07e129e3c289a0e4d288f7ddc83da4dd04fe3443", "filename": "src/libstd/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -1091,7 +1091,7 @@ pub fn with_bytes_reader<T>(bytes: &[u8], f: &fn(@Reader) -> T) -> T {\n }\n \n pub fn with_str_reader<T>(s: &str, f: &fn(@Reader) -> T) -> T {\n-    str::byte_slice(s, |bytes| with_bytes_reader(bytes, f))\n+    with_bytes_reader(s.as_bytes(), f)\n }\n \n // Writing\n@@ -1462,7 +1462,7 @@ impl<T:Writer> WriterUtil for T {\n             self.write_str(str::from_char(ch));\n         }\n     }\n-    fn write_str(&self, s: &str) { str::byte_slice(s, |v| self.write(v)) }\n+    fn write_str(&self, s: &str) { self.write(s.as_bytes()) }\n     fn write_line(&self, s: &str) {\n         self.write_str(s);\n         self.write_str(&\"\\n\");"}, {"sha": "74f74d11b730275f99561c5ab0d522e8da1f35b4", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -793,27 +793,27 @@ mod tests {\n \n     #[test]\n     fn test_parse_bytes() {\n-        use str::to_bytes;\n-        assert_eq!(parse_bytes(to_bytes(\"123\"), 10u), Some(123 as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"1001\"), 2u), Some(9 as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"123\"), 8u), Some(83 as $T));\n-        assert_eq!(i32::parse_bytes(to_bytes(\"123\"), 16u), Some(291 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(\"ffff\"), 16u), Some(65535 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(\"FFFF\"), 16u), Some(65535 as i32));\n-        assert_eq!(parse_bytes(to_bytes(\"z\"), 36u), Some(35 as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"Z\"), 36u), Some(35 as $T));\n-\n-        assert_eq!(parse_bytes(to_bytes(\"-123\"), 10u), Some(-123 as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"-1001\"), 2u), Some(-9 as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"-123\"), 8u), Some(-83 as $T));\n-        assert_eq!(i32::parse_bytes(to_bytes(\"-123\"), 16u), Some(-291 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(\"-ffff\"), 16u), Some(-65535 as i32));\n-        assert_eq!(i32::parse_bytes(to_bytes(\"-FFFF\"), 16u), Some(-65535 as i32));\n-        assert_eq!(parse_bytes(to_bytes(\"-z\"), 36u), Some(-35 as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"-Z\"), 36u), Some(-35 as $T));\n-\n-        assert!(parse_bytes(to_bytes(\"Z\"), 35u).is_none());\n-        assert!(parse_bytes(to_bytes(\"-9\"), 2u).is_none());\n+        use str::StrSlice;\n+        assert_eq!(parse_bytes(\"123\".as_bytes(), 10u), Some(123 as $T));\n+        assert_eq!(parse_bytes(\"1001\".as_bytes(), 2u), Some(9 as $T));\n+        assert_eq!(parse_bytes(\"123\".as_bytes(), 8u), Some(83 as $T));\n+        assert_eq!(i32::parse_bytes(\"123\".as_bytes(), 16u), Some(291 as i32));\n+        assert_eq!(i32::parse_bytes(\"ffff\".as_bytes(), 16u), Some(65535 as i32));\n+        assert_eq!(i32::parse_bytes(\"FFFF\".as_bytes(), 16u), Some(65535 as i32));\n+        assert_eq!(parse_bytes(\"z\".as_bytes(), 36u), Some(35 as $T));\n+        assert_eq!(parse_bytes(\"Z\".as_bytes(), 36u), Some(35 as $T));\n+\n+        assert_eq!(parse_bytes(\"-123\".as_bytes(), 10u), Some(-123 as $T));\n+        assert_eq!(parse_bytes(\"-1001\".as_bytes(), 2u), Some(-9 as $T));\n+        assert_eq!(parse_bytes(\"-123\".as_bytes(), 8u), Some(-83 as $T));\n+        assert_eq!(i32::parse_bytes(\"-123\".as_bytes(), 16u), Some(-291 as i32));\n+        assert_eq!(i32::parse_bytes(\"-ffff\".as_bytes(), 16u), Some(-65535 as i32));\n+        assert_eq!(i32::parse_bytes(\"-FFFF\".as_bytes(), 16u), Some(-65535 as i32));\n+        assert_eq!(parse_bytes(\"-z\".as_bytes(), 36u), Some(-35 as $T));\n+        assert_eq!(parse_bytes(\"-Z\".as_bytes(), 36u), Some(-35 as $T));\n+\n+        assert!(parse_bytes(\"Z\".as_bytes(), 35u).is_none());\n+        assert!(parse_bytes(\"-9\".as_bytes(), 2u).is_none());\n     }\n \n     #[test]"}, {"sha": "3905d82cd0f5caa3c41cbfbe166c1ac583b8ffb7", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -16,6 +16,7 @@ use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n use char;\n use str;\n+use str::{StrSlice};\n use kinds::Copy;\n use vec;\n use vec::{CopyableVector, ImmutableVector};\n@@ -189,18 +190,18 @@ pub fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Copy+\n     let _1: T = One::one();\n \n     if is_NaN(num) {\n-        return (str::to_bytes(\"NaN\"), true);\n+        return (\"NaN\".as_bytes().to_owned(), true);\n     }\n     else if is_inf(num){\n         return match sign {\n-            SignAll => (str::to_bytes(\"+inf\"), true),\n-            _       => (str::to_bytes(\"inf\"), true)\n+            SignAll => (\"+inf\".as_bytes().to_owned(), true),\n+            _       => (\"inf\".as_bytes().to_owned(), true)\n         }\n     }\n     else if is_neg_inf(num) {\n         return match sign {\n-            SignNone => (str::to_bytes(\"inf\"), true),\n-            _        => (str::to_bytes(\"-inf\"), true),\n+            SignNone => (\"inf\".as_bytes().to_owned(), true),\n+            _        => (\"-inf\".as_bytes().to_owned(), true),\n         }\n     }\n \n@@ -638,7 +639,7 @@ pub fn from_str_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+Mul<T,T>+\n         special: bool, exponent: ExponentFormat, empty_zero: bool,\n         ignore_underscores: bool\n         ) -> Option<T> {\n-    from_str_bytes_common(str::to_bytes(buf), radix, negative,\n+    from_str_bytes_common(buf.as_bytes(), radix, negative,\n                           fractional, special, exponent, empty_zero,\n                           ignore_underscores)\n }"}, {"sha": "2bc1ca9c67330c561f879c84caf25c4cbb54461a", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -538,16 +538,16 @@ mod tests {\n \n     #[test]\n     pub fn test_parse_bytes() {\n-        use str::to_bytes;\n-        assert_eq!(parse_bytes(to_bytes(\"123\"), 10u), Some(123u as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"1001\"), 2u), Some(9u as $T));\n-        assert_eq!(parse_bytes(to_bytes(\"123\"), 8u), Some(83u as $T));\n-        assert_eq!(u16::parse_bytes(to_bytes(\"123\"), 16u), Some(291u as u16));\n-        assert_eq!(u16::parse_bytes(to_bytes(\"ffff\"), 16u), Some(65535u as u16));\n-        assert_eq!(parse_bytes(to_bytes(\"z\"), 36u), Some(35u as $T));\n-\n-        assert!(parse_bytes(to_bytes(\"Z\"), 10u).is_none());\n-        assert!(parse_bytes(to_bytes(\"_\"), 2u).is_none());\n+        use str::StrSlice;\n+        assert_eq!(parse_bytes(\"123\".as_bytes(), 10u), Some(123u as $T));\n+        assert_eq!(parse_bytes(\"1001\".as_bytes(), 2u), Some(9u as $T));\n+        assert_eq!(parse_bytes(\"123\".as_bytes(), 8u), Some(83u as $T));\n+        assert_eq!(u16::parse_bytes(\"123\".as_bytes(), 16u), Some(291u as u16));\n+        assert_eq!(u16::parse_bytes(\"ffff\".as_bytes(), 16u), Some(65535u as u16));\n+        assert_eq!(parse_bytes(\"z\".as_bytes(), 36u), Some(35u as $T));\n+\n+        assert!(parse_bytes(\"Z\".as_bytes(), 10u).is_none());\n+        assert!(parse_bytes(\"_\".as_bytes(), 2u).is_none());\n     }\n \n     #[test]"}, {"sha": "044b305a0dd9db393a819d25beb0eeeb9a4eb2b0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -1448,9 +1448,9 @@ mod tests {\n     use rand::RngUtil;\n     use rand;\n     use run;\n-    use str;\n     use str::StrSlice;\n     use vec;\n+    use vec::CopyableVector;\n     use libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n \n \n@@ -1684,7 +1684,7 @@ mod tests {\n           };\n           assert!((ostream as uint != 0u));\n           let s = ~\"hello\";\n-          let mut buf = str::to_bytes(s) + [0 as u8];\n+          let mut buf = s.as_bytes_with_null().to_owned();\n           do vec::as_mut_buf(buf) |b, _len| {\n               assert!((libc::fwrite(b as *c_void, 1u as size_t,\n                                    (s.len() + 1u) as size_t, ostream)"}, {"sha": "02772604e45ca4ac3fa214ca8905c4b56a578db6", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -947,7 +947,6 @@ pub mod windows {\n mod tests {\n     use option::{None, Some};\n     use path::{PosixPath, WindowsPath, windows};\n-    use str;\n \n     #[test]\n     fn test_double_slash_collapsing() {"}, {"sha": "e969c5d4e3a15d3464bc92300add41895e1ed02d", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -64,7 +64,7 @@ pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::RawPtr;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n-pub use str::{StrVector, StrSlice, OwnedStr, StrUtil};\n+pub use str::{StrVector, StrSlice, OwnedStr, StrUtil, NullTerminatedStr};\n pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};"}, {"sha": "a99f5da032c39757bc0ec04b297cae74b46b8a80", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -75,5 +75,5 @@ fn super_simple_smoke_test_lets_go_read_some_files_and_have_a_good_time() {\n     let message = \"it's alright. have a good time\";\n     let filename = &Path(\"test.txt\");\n     let mut outstream = FileStream::open(filename, Create, Read).unwrap();\n-    outstream.write(message.to_bytes());\n+    outstream.write(message.as_bytes());\n }"}, {"sha": "e57b80658eef2ec377a4b561bb06673947a64cbc", "filename": "src/libstd/rt/io/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -108,7 +108,7 @@ mod test {\n         let mem_writer = MemWriter::new();\n         let mut deflate_writer = DeflateWriter::new(mem_writer);\n         let in_msg = \"test\";\n-        let in_bytes = in_msg.to_bytes();\n+        let in_bytes = in_msg.as_bytes();\n         deflate_writer.write(in_bytes);\n         deflate_writer.flush();\n         let buf = deflate_writer.inner().inner();"}, {"sha": "b8e08ea53d415a82b5e2cd2d040cc8a3b07e8054", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -741,8 +741,7 @@ fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*mut c_void) -> T) -> T {\n         let mut blk = ~[];\n         for es.each |&(k, v)| {\n             let kv = fmt!(\"%s=%s\", k, v);\n-            blk.push_all(str::as_bytes_slice(kv));\n-            blk.push(0);\n+            blk.push_all(kv.as_bytes_consume_with_nul());\n         }\n         blk.push(0);\n         vec::as_imm_buf(blk, |p, _len|"}, {"sha": "20d2194de07b277ce5cf4b6d8c8bd6ca4c9995e8", "filename": "src/libstd/str.rs", "status": "modified", "additions": 134, "deletions": 80, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -304,40 +304,6 @@ impl<'self> StrVector for &'self [&'self str] {\n     }\n }\n \n-/*\n-Section: Transforming strings\n-*/\n-\n-/**\n- * Converts a string to a unique vector of bytes\n- *\n- * The result vector is not null-terminated.\n- */\n-pub fn to_bytes(s: &str) -> ~[u8] {\n-    unsafe {\n-        let mut v: ~[u8] = ::cast::transmute(s.to_owned());\n-        vec::raw::set_len(&mut v, s.len());\n-        v\n-    }\n-}\n-\n-/// Work with the string as a byte slice, not including trailing null.\n-#[inline(always)]\n-pub fn byte_slice<T>(s: &str, f: &fn(v: &[u8]) -> T) -> T {\n-    do as_buf(s) |p,n| {\n-        unsafe { vec::raw::buf_as_slice(p, n-1u, f) }\n-    }\n-}\n-\n-/// Work with the string as a byte slice, not including trailing null, without\n-/// a callback.\n-#[inline(always)]\n-pub fn byte_slice_no_callback<'a>(s: &'a str) -> &'a [u8] {\n-    unsafe {\n-        cast::transmute(s)\n-    }\n-}\n-\n /// Something that can be used to compare against a character\n pub trait CharEq {\n     /// Determine if the splitter should split at the given character\n@@ -1081,39 +1047,6 @@ static tag_five_b: uint = 248u;\n static max_five_b: uint = 67108864u;\n static tag_six_b: uint = 252u;\n \n-/**\n- * Work with the byte buffer of a string.\n- *\n- * Allows for unsafe manipulation of strings, which is useful for foreign\n- * interop.\n- *\n- * # Example\n- *\n- * ~~~ {.rust}\n- * let i = str::as_bytes(\"Hello World\") { |bytes| bytes.len() };\n- * ~~~\n- */\n-#[inline]\n-pub fn as_bytes<T>(s: &const ~str, f: &fn(&~[u8]) -> T) -> T {\n-    unsafe {\n-        let v: *~[u8] = cast::transmute(copy s);\n-        f(&*v)\n-    }\n-}\n-\n-/**\n- * Work with the byte buffer of a string as a byte slice.\n- *\n- * The byte slice does not include the null terminator.\n- */\n-pub fn as_bytes_slice<'a>(s: &'a str) -> &'a [u8] {\n-    unsafe {\n-        let (ptr, len): (*u8, uint) = ::cast::transmute(s);\n-        let outgoing_tuple: (*u8, uint) = (ptr, len - 1);\n-        return ::cast::transmute(outgoing_tuple);\n-    }\n-}\n-\n /**\n  * A dummy trait to hold all the utility methods that we implement on strings.\n  */\n@@ -1216,11 +1149,10 @@ pub fn subslice_offset(outer: &str, inner: &str) -> uint {\n  * reallocating\n  */\n pub fn capacity(s: &const ~str) -> uint {\n-    do as_bytes(s) |buf| {\n-        let vcap = vec::capacity(buf);\n-        assert!(vcap > 0u);\n-        vcap - 1u\n-    }\n+    let buf: &const ~[u8] = unsafe { cast::transmute(s) };\n+    let vcap = vec::capacity(buf);\n+    assert!(vcap > 0u);\n+    vcap - 1u\n }\n \n /// Escape each char in `s` with char::escape_default.\n@@ -1482,7 +1414,7 @@ pub trait StrSlice<'self> {\n     fn char_at(&self, i: uint) -> char;\n     fn char_range_at_reverse(&self, start: uint) -> CharRange;\n     fn char_at_reverse(&self, i: uint) -> char;\n-    fn to_bytes(&self) -> ~[u8];\n+    fn as_bytes(&self) -> &'self [u8];\n \n     fn find<C: CharEq>(&self, search: C) -> Option<uint>;\n     fn rfind<C: CharEq>(&self, search: C) -> Option<uint>;\n@@ -1545,12 +1477,12 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// An iterator over the bytes of `self`\n     #[inline]\n     fn bytes_iter(&self) -> StrBytesIterator<'self> {\n-        StrBytesIterator { it: as_bytes_slice(*self).iter() }\n+        StrBytesIterator { it: self.as_bytes().iter() }\n     }\n     /// An iterator over the bytes of `self`, in reverse order\n     #[inline]\n     fn bytes_rev_iter(&self) -> StrBytesRevIterator<'self> {\n-        StrBytesRevIterator { it: as_bytes_slice(*self).rev_iter() }\n+        StrBytesRevIterator { it: self.as_bytes().rev_iter() }\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1936,7 +1868,18 @@ impl<'self> StrSlice<'self> for &'self str {\n         self.char_range_at_reverse(i).ch\n     }\n \n-    fn to_bytes(&self) -> ~[u8] { to_bytes(*self) }\n+    /**\n+     * Work with the byte buffer of a string as a byte slice.\n+     *\n+     * The byte slice does not include the null terminator.\n+     */\n+    fn as_bytes(&self) -> &'self [u8] {\n+        unsafe {\n+            let (ptr, len): (*u8, uint) = ::cast::transmute(*self);\n+            let outgoing_tuple: (*u8, uint) = (ptr, len - 1);\n+            ::cast::transmute(outgoing_tuple)\n+        }\n+    }\n \n     /**\n      * Returns the byte index of the first character of `self` that matches `search`\n@@ -2051,6 +1994,50 @@ impl<'self> StrSlice<'self> for &'self str {\n \n }\n \n+#[allow(missing_doc)]\n+pub trait NullTerminatedStr {\n+    fn as_bytes_with_null<'a>(&'a self) -> &'a [u8];\n+}\n+\n+impl NullTerminatedStr for ~str {\n+    /**\n+     * Work with the byte buffer of a string as a byte slice.\n+     *\n+     * The byte slice does include the null terminator.\n+     */\n+    #[inline]\n+    fn as_bytes_with_null<'a>(&'a self) -> &'a [u8] {\n+        let ptr: &'a ~[u8] = unsafe { ::cast::transmute(self) };\n+        let slice: &'a [u8] = *ptr;\n+        slice\n+    }\n+}\n+impl NullTerminatedStr for @str {\n+    /**\n+     * Work with the byte buffer of a string as a byte slice.\n+     *\n+     * The byte slice does include the null terminator.\n+     */\n+    #[inline]\n+    fn as_bytes_with_null<'a>(&'a self) -> &'a [u8] {\n+        let ptr: &'a ~[u8] = unsafe { ::cast::transmute(self) };\n+        let slice: &'a [u8] = *ptr;\n+        slice\n+    }\n+}\n+// static strings are the only slices guaranteed to a nul-terminator\n+impl NullTerminatedStr for &'static str {\n+    /**\n+     * Work with the byte buffer of a string as a byte slice.\n+     *\n+     * The byte slice does include the null terminator.\n+     */\n+    #[inline]\n+    fn as_bytes_with_null(&self) -> &'static [u8] {\n+        unsafe { ::cast::transmute(*self) }\n+    }\n+}\n+\n #[allow(missing_doc)]\n pub trait OwnedStr {\n     fn push_str_no_overallocate(&mut self, rhs: &str);\n@@ -2062,6 +2049,8 @@ pub trait OwnedStr {\n     fn append(&self, rhs: &str) -> ~str; // FIXME #4850: this should consume self.\n     fn reserve(&mut self, n: uint);\n     fn reserve_at_least(&mut self, n: uint);\n+\n+    fn as_bytes_with_null_consume(self) -> ~[u8];\n }\n \n impl OwnedStr for ~str {\n@@ -2251,6 +2240,13 @@ impl OwnedStr for ~str {\n     fn reserve_at_least(&mut self, n: uint) {\n         self.reserve(uint::next_power_of_two(n + 1u) - 1u)\n     }\n+\n+    /// Convert to a vector of bytes. This does not allocate a new\n+    /// string, and includes the null terminator.\n+    #[inline]\n+    fn as_bytes_with_null_consume(self) -> ~[u8] {\n+        unsafe { ::cast::transmute(self) }\n+    }\n }\n \n impl Clone for ~str {\n@@ -2336,7 +2332,7 @@ mod tests {\n     use ptr;\n     use str::*;\n     use vec;\n-    use vec::ImmutableVector;\n+    use vec::{ImmutableVector, CopyableVector};\n     use cmp::{TotalOrd, Less, Equal, Greater};\n \n     #[test]\n@@ -2952,12 +2948,70 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_as_bytes() {\n+        // no null\n+        let v = [\n+            224, 184, 168, 224, 185, 132, 224, 184, 151, 224, 184, 162, 228,\n+            184, 173, 229, 141, 142, 86, 105, 225, 187, 135, 116, 32, 78, 97,\n+            109\n+        ];\n+        assert_eq!(\"\".as_bytes(), &[]);\n+        assert_eq!(\"abc\".as_bytes(), &['a' as u8, 'b' as u8, 'c' as u8]);\n+        assert_eq!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes(), v);\n+    }\n+\n+    #[test]\n+    fn test_as_bytes_with_null() {\n+        // has null\n+        let v = [\n+            224, 184, 168, 224, 185, 132, 224, 184, 151, 224, 184, 162, 228,\n+            184, 173, 229, 141, 142, 86, 105, 225, 187, 135, 116, 32, 78, 97,\n+            109, 0\n+        ];\n+\n+        assert_eq!(\"\".as_bytes_with_null(), &[0]);\n+        assert_eq!(\"abc\".as_bytes_with_null(), &['a' as u8, 'b' as u8, 'c' as u8, 0]);\n+        assert_eq!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes_with_null(), v);\n+\n+        let s1 = @\"\";\n+        let s2 = @\"abc\";\n+        let s3 = @\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert_eq!(s1.as_bytes_with_null(), &[0]);\n+        assert_eq!(s2.as_bytes_with_null(), &['a' as u8, 'b' as u8, 'c' as u8, 0]);\n+        assert_eq!(s3.as_bytes_with_null(), v);\n+\n+        let s1 = ~\"\";\n+        let s2 = ~\"abc\";\n+        let s3 = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert_eq!(s1.as_bytes_with_null(), &[0]);\n+        assert_eq!(s2.as_bytes_with_null(), &['a' as u8, 'b' as u8, 'c' as u8, 0]);\n+        assert_eq!(s3.as_bytes_with_null(), v);\n+    }\n+\n+    #[test]\n+    fn test_as_bytes_with_null_consume() {\n+        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let v = ~[\n+            224, 184, 168, 224, 185, 132, 224, 184, 151, 224, 184, 162, 228,\n+            184, 173, 229, 141, 142, 86, 105, 225, 187, 135, 116, 32, 78, 97,\n+            109, 0\n+        ];\n+        assert_eq!((~\"\").as_bytes_with_null_consume(), ~[0]);\n+        assert_eq!((~\"abc\").as_bytes_with_null_consume(),\n+                   ~['a' as u8, 'b' as u8, 'c' as u8, 0]);\n+        assert_eq!(s.as_bytes_with_null_consume(), v);\n+    }\n+\n     #[test]\n     #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_bytes_fail() {\n-        // Don't double free\n-        as_bytes::<()>(&~\"\", |_bytes| fail!() );\n+        // Don't double free. (I'm not sure if this exercises the\n+        // original problem code path anymore.)\n+        let s = ~\"\";\n+        let _bytes = s.as_bytes_with_null();\n+        fail!();\n     }\n \n     #[test]\n@@ -3032,7 +3086,7 @@ mod tests {\n     fn vec_str_conversions() {\n         let s1: ~str = ~\"All mimsy were the borogoves\";\n \n-        let v: ~[u8] = to_bytes(s1);\n+        let v: ~[u8] = s1.as_bytes().to_owned();\n         let s2: ~str = from_bytes(v);\n         let mut i: uint = 0u;\n         let n1: uint = s1.len();"}, {"sha": "c0c8b729f9ea656dd1738485c900aabb4ddbd124", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -18,7 +18,7 @@ use io;\n use io::Writer;\n use option::{None, Option, Some};\n use old_iter::BaseIter;\n-use str;\n+use str::StrSlice;\n \n pub type Cb<'self> = &'self fn(buf: &[u8]) -> bool;\n \n@@ -239,27 +239,25 @@ impl<A:IterBytes> IterBytes for @[A] {\n impl<'self> IterBytes for &'self str {\n     #[inline(always)]\n     fn iter_bytes(&self, _lsb0: bool, f: Cb) -> bool {\n-        do str::byte_slice(*self) |bytes| {\n-            f(bytes)\n-        }\n+        f(self.as_bytes())\n     }\n }\n \n impl IterBytes for ~str {\n     #[inline(always)]\n     fn iter_bytes(&self, _lsb0: bool, f: Cb) -> bool {\n-        do str::byte_slice(*self) |bytes| {\n-            f(bytes)\n-        }\n+        // this should possibly include the null terminator, but that\n+        // breaks .find_equiv on hashmaps.\n+        f(self.as_bytes())\n     }\n }\n \n impl IterBytes for @str {\n     #[inline(always)]\n     fn iter_bytes(&self, _lsb0: bool, f: Cb) -> bool {\n-        do str::byte_slice(*self) |bytes| {\n-            f(bytes)\n-        }\n+        // this should possibly include the null terminator, but that\n+        // breaks .find_equiv on hashmaps.\n+        f(self.as_bytes())\n     }\n }\n "}, {"sha": "f9f9f7216a4f6cb1742f0b70fcebc8a454916399", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -21,8 +21,6 @@ use ext::base::*;\n use parse;\n use parse::token;\n \n-use core::vec;\n-\n enum State {\n     Asm,\n     Outputs,"}, {"sha": "73f68735bcd35d9d217d5c4feeb44ca2d07f8bfa", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -22,7 +22,6 @@ use parse::token;\n use parse::token::{ident_to_str, intern, str_to_ident};\n \n use core::hashmap::HashMap;\n-use core::vec;\n \n // new-style macro! tt code:\n //"}, {"sha": "ff8b492c943840ea32338d9f2a7cd7bca025e922", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -18,7 +18,6 @@ use print;\n use parse::token::{get_ident_interner};\n \n use core::io;\n-use core::vec;\n \n pub fn expand_syntax_ext(cx: @ExtCtxt,\n                          sp: codemap::span,"}, {"sha": "92727c73977489f5373b4ec49155cf2612bf3556", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -19,8 +19,6 @@ use parse::token::*;\n use parse::token;\n use parse;\n \n-use core::vec;\n-\n /**\n *\n * Quasiquoting works via token trees."}, {"sha": "09b3fd2343400159b76e84cf171de76116426177", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -18,8 +18,6 @@ use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::keywords;\n \n-use core::vec;\n-\n pub fn expand_trace_macros(cx: @ExtCtxt,\n                            sp: span,\n                            tt: &[ast::token_tree])"}, {"sha": "7805e7364677cacc9b883fbb6628fbc37fee467a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -26,7 +26,6 @@ use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n use core::io;\n-use core::vec;\n \n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: span,"}, {"sha": "3d5fc01afa6a287da2a0d953e26e373f59b687b2", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -93,7 +93,7 @@ impl RepeatFasta {\n             let stdout = self.stdout;\n             let alu_len = self.alu.len();\n             let mut buf = vec::from_elem(alu_len + LINE_LEN, 0u8);\n-            let alu: &[u8] = str::byte_slice_no_callback(self.alu);\n+            let alu: &[u8] = self.alu.as_bytes_with_null();\n \n             copy_memory(buf, alu, alu_len);\n             copy_memory(vec::mut_slice(buf, alu_len, buf.len()),"}, {"sha": "b7969fb0552e3e06818c72ff65f020740283ada2", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -81,7 +81,8 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n    // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n-   match mm.find(&str::to_bytes(key.to_ascii().to_lower().to_str_ascii())) {\n+   let key = key.to_ascii().to_lower().to_str_ascii();\n+   match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }\n    }\n@@ -208,10 +209,10 @@ fn main() {\n \n          // process the sequence for k-mers\n          (_, true) => {\n-            let line_bytes = str::to_bytes(line);\n+            let line_bytes = line.as_bytes();\n \n            for sizes.eachi |ii, _sz| {\n-               let mut lb = copy line_bytes;\n+               let mut lb = line_bytes.to_owned();\n                to_child[ii].send(lb);\n             }\n          }"}, {"sha": "646b9788f706a7aabc5a5efd04ac833fda10c3b7", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -218,8 +218,7 @@ fn read_stdin() -> ~[u8] {\n         fstat(fileno(stdin), &mut st);\n         let mut buf = vec::from_elem(st.st_size as uint, 0);\n \n-        let header = str::byte_slice_no_callback(\">THREE\");\n-        let header = vec::slice(header, 0, 6);\n+        let header = \">THREE\".as_bytes();\n \n         {\n             let mut window: &mut [u8] = buf;"}, {"sha": "b869aa0e342cbfd6e256cae373451021e01eb8df", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -111,8 +111,7 @@ fn main() {\n     if opts.stress {\n         stress(2);\n     } else {\n-        let max = uint::parse_bytes(str::to_bytes(args[1]),\n-                                                10u).get() as int;\n+        let max = uint::parse_bytes(args[1].as_bytes(), 10u).get() as int;\n \n         let num_trials = 10;\n "}, {"sha": "36ac10915c06f3557595fdefc787c361a9c3dab4", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -26,7 +26,7 @@ mod libc {\n fn strlen(str: ~str) -> uint {\n     unsafe {\n         // C string is terminated with a zero\n-        let bytes = str::to_bytes(str) + ~[0u8];\n+        let bytes = str.as_bytes_with_null_consume();\n         return libc::my_strlen(vec::raw::to_ptr(bytes));\n     }\n }"}, {"sha": "eae2f507c51972aa6ffa81072b30cff5c48c7d2f", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -48,7 +48,7 @@ mod map_reduce {\n             }\n             let (pp, cc) = stream();\n             error!(\"sending find_reducer\");\n-            ctrl.send(find_reducer(str::to_bytes(key), cc));\n+            ctrl.send(find_reducer(key.as_bytes().to_owned(), cc));\n             error!(\"receiving\");\n             let c = pp.recv();\n             error!(c);"}, {"sha": "103679a13eff90e8eddf64ec6105017c99772ce0", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -15,6 +15,6 @@ use std::str;\n \n pub fn main() {\n     let mut m = HashMap::new();\n-    m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n+    m.insert(\"foo\".as_bytes().to_owned(), \"bar\".as_bytes().to_owned());\n     error!(m);\n }"}, {"sha": "11f0d59c70021ad658f7b73a38576b6cbd633340", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc71a8bdb28fba88d0cc8916b33838bf43b3a8d/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=efc71a8bdb28fba88d0cc8916b33838bf43b3a8d", "patch": "@@ -27,7 +27,7 @@ pub fn main() {\n     assert!(s.char_at(0u) == 'e');\n     assert!(s.char_at(1u) == '\u00e9');\n \n-    assert!((str::is_utf8(str::to_bytes(s))));\n+    assert!((str::is_utf8(s.as_bytes())));\n     assert!((!str::is_utf8(~[0x80_u8])));\n     assert!((!str::is_utf8(~[0xc0_u8])));\n     assert!((!str::is_utf8(~[0xc0_u8, 0x10_u8])));"}]}