{"sha": "77cdaf018c98c1a89afcf8382c3f3e90907f49a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Y2RhZjAxOGM5OGMxYTg5YWZjZjgzODJjM2YzZTkwOTA3ZjQ5YTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-01T00:24:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:48Z"}, "message": "std: Refactor time module a bit\n\nPut `Duration` in `time::duration`, where the two constants can\nbe called just `MAX` and `MIN`. Reexport from `time`.\nThis provides more room for the time module to expand.", "tree": {"sha": "ff8def4d1ca544d550c94cd4939f7ec57cc70551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8def4d1ca544d550c94cd4939f7ec57cc70551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77cdaf018c98c1a89afcf8382c3f3e90907f49a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77cdaf018c98c1a89afcf8382c3f3e90907f49a7", "html_url": "https://github.com/rust-lang/rust/commit/77cdaf018c98c1a89afcf8382c3f3e90907f49a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77cdaf018c98c1a89afcf8382c3f3e90907f49a7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4475e6a095a8fe4459ac8b854ae2336e47aaafe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4475e6a095a8fe4459ac8b854ae2336e47aaafe5", "html_url": "https://github.com/rust-lang/rust/commit/4475e6a095a8fe4459ac8b854ae2336e47aaafe5"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "7f31df96b0740eb4efd011c8713d2d7158f3c03a", "filename": "src/libstd/time/duration.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/77cdaf018c98c1a89afcf8382c3f3e90907f49a7/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cdaf018c98c1a89afcf8382c3f3e90907f49a7/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=77cdaf018c98c1a89afcf8382c3f3e90907f49a7", "patch": "@@ -44,9 +44,9 @@ pub struct Duration {\n }\n \n /// The minimum possible `Duration`.\n-pub static MIN_DURATION: Duration = Duration { days: MIN_DAYS, secs: 0, nanos: 0 };\n+pub static MIN: Duration = Duration { days: MIN_DAYS, secs: 0, nanos: 0 };\n /// The maximum possible `Duration`.\n-pub static MAX_DURATION: Duration = Duration { days: MAX_DAYS, secs: SECS_PER_DAY as u32 - 1,\n+pub static MAX: Duration = Duration { days: MAX_DAYS, secs: SECS_PER_DAY as u32 - 1,\n                                       nanos: NANOS_PER_SEC as u32 - 1 };\n \n impl Duration {\n@@ -274,8 +274,8 @@ impl Duration {\n }\n \n impl num::Bounded for Duration {\n-    #[inline] fn min_value() -> Duration { MIN_DURATION }\n-    #[inline] fn max_value() -> Duration { MAX_DURATION }\n+    #[inline] fn min_value() -> Duration { MIN }\n+    #[inline] fn max_value() -> Duration { MAX }\n }\n \n impl num::Zero for Duration {\n@@ -496,7 +496,7 @@ fn div_rem_64(this: i64, other: i64) -> (i64, i64) {\n \n #[cfg(test)]\n mod tests {\n-    use super::{Duration, MIN_DAYS, MAX_DAYS, MIN_DURATION, MAX_DURATION};\n+    use super::{Duration, MIN_DAYS, MAX_DAYS, MIN, MAX};\n     use {i32, i64};\n     use num::{Zero, CheckedAdd, CheckedSub};\n     use option::{Some, None};\n@@ -533,8 +533,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_days(), -1);\n         assert_eq!(Duration::days(i32::MAX).num_days(), i32::MAX);\n         assert_eq!(Duration::days(i32::MIN).num_days(), i32::MIN);\n-        assert_eq!(MAX_DURATION.num_days(), MAX_DAYS);\n-        assert_eq!(MIN_DURATION.num_days(), MIN_DAYS);\n+        assert_eq!(MAX.num_days(), MAX_DAYS);\n+        assert_eq!(MIN.num_days(), MIN_DAYS);\n     }\n \n     #[test]\n@@ -551,8 +551,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_seconds(), -86402);\n         assert_eq!(Duration::seconds(i32::MAX).num_seconds(), i32::MAX as i64);\n         assert_eq!(Duration::seconds(i32::MIN).num_seconds(), i32::MIN as i64);\n-        assert_eq!(MAX_DURATION.num_seconds(), (MAX_DAYS as i64 + 1) * 86400 - 1);\n-        assert_eq!(MIN_DURATION.num_seconds(), MIN_DAYS as i64 * 86400);\n+        assert_eq!(MAX.num_seconds(), (MAX_DAYS as i64 + 1) * 86400 - 1);\n+        assert_eq!(MIN.num_seconds(), MIN_DAYS as i64 * 86400);\n     }\n \n     #[test]\n@@ -569,8 +569,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_milliseconds(), -86402_003);\n         assert_eq!(Duration::milliseconds(i32::MAX).num_milliseconds(), i32::MAX as i64);\n         assert_eq!(Duration::milliseconds(i32::MIN).num_milliseconds(), i32::MIN as i64);\n-        assert_eq!(MAX_DURATION.num_milliseconds(), (MAX_DAYS as i64 + 1) * 86400_000 - 1);\n-        assert_eq!(MIN_DURATION.num_milliseconds(), MIN_DAYS as i64 * 86400_000);\n+        assert_eq!(MAX.num_milliseconds(), (MAX_DAYS as i64 + 1) * 86400_000 - 1);\n+        assert_eq!(MIN.num_milliseconds(), MIN_DAYS as i64 * 86400_000);\n     }\n \n     #[test]\n@@ -587,8 +587,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_microseconds(), Some(-86402_003_004));\n         assert_eq!(Duration::microseconds(i32::MAX).num_microseconds(), Some(i32::MAX as i64));\n         assert_eq!(Duration::microseconds(i32::MIN).num_microseconds(), Some(i32::MIN as i64));\n-        assert_eq!(MAX_DURATION.num_microseconds(), None);\n-        assert_eq!(MIN_DURATION.num_microseconds(), None);\n+        assert_eq!(MAX.num_microseconds(), None);\n+        assert_eq!(MIN.num_microseconds(), None);\n \n         // overflow checks\n         static MICROS_PER_DAY: i64 = 86400_000_000;\n@@ -610,8 +610,8 @@ mod tests {\n         assert_eq!(Duration::new(-1, -2, -3_004_005).num_nanoseconds(), Some(-86402_003_004_005));\n         assert_eq!(Duration::nanoseconds(i32::MAX).num_nanoseconds(), Some(i32::MAX as i64));\n         assert_eq!(Duration::nanoseconds(i32::MIN).num_nanoseconds(), Some(i32::MIN as i64));\n-        assert_eq!(MAX_DURATION.num_nanoseconds(), None);\n-        assert_eq!(MIN_DURATION.num_nanoseconds(), None);\n+        assert_eq!(MAX.num_nanoseconds(), None);\n+        assert_eq!(MIN.num_nanoseconds(), None);\n \n         // overflow checks\n         static NANOS_PER_DAY: i64 = 86400_000_000_000;", "previous_filename": "src/libstd/time.rs"}, {"sha": "436fa5ebdea726c0111217c4b56e45eef6effce6", "filename": "src/libstd/time/mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77cdaf018c98c1a89afcf8382c3f3e90907f49a7/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cdaf018c98c1a89afcf8382c3f3e90907f49a7/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=77cdaf018c98c1a89afcf8382c3f3e90907f49a7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Temporal quantification.\n+\n+pub use self::duration::Duration;\n+\n+pub mod duration;"}]}