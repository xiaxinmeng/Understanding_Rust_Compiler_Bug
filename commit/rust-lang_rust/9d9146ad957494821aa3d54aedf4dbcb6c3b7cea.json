{"sha": "9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTE0NmFkOTU3NDk0ODIxYWEzZDU0YWVkZjRkYmNiNmMzYjdjZWE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-07T10:02:05Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-07T13:27:00Z"}, "message": "Rollup merge of #55734 - teresy:shorthand-fields, r=davidtwco\n\nrefactor: use shorthand fields\n\nrefactor: use shorthand for single fields everywhere (excluding tests).", "tree": {"sha": "ca62a9b11c4a34f8ca15040e97fdd144e58d075b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca62a9b11c4a34f8ca15040e97fdd144e58d075b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvi6CkACgkQ/vbIBR0O\nATx4UA//TzupNJFGf5NxbAGSEwWw+E0O4Z6l5Nw4+iGzjMOdLKfG089Ro15aU3Kw\nB5YfD1bwPWo1oJCwj7TS0Uu8lo7hxINnn56ma4motCQTbjsTfSOV2QAu+IGBgoMN\nV/hv4lPkSJdGvLf6qS8/xxjcJuoB804ZomEBz45FATRamT4KwbDu8sy56pL8jWfQ\nTqUekz3V60jmIDr5PjEWktPks9e0gi5pAJUJICFn+Wg7c1TwNq0nXQlJ5qVUVc9z\nSl1fdSqWbTe1W4nvF9ZvpygKr8T0zVb4fTqkKw1gxlZfqS//fZvTf2fTmwKuCHzi\nK4Gt8vlbxYtKwJIZa8vmXqYzjZ3EpPi4cv8W1FgcpE7Y9DpN9JiJeIa7sNyDZCme\nf9cMwIfrWymFd9zvM7agjJw3zjWENK1EHY/kd4NWT7OEr0L2KA+B2oKGYbK9kJTj\noyMsZrZiMq3x0Wj3ytlNgCPHb/eVTYTLQF2226IvBuojsjdo74xV1l93i4TCe9mp\nIQmnUl3mTRE6QnXGmktyjJ09U1kIqHHYa/m9avaJNT7Xsvp3p9I+ugBtDh5xSO07\nUt+BCwKIBYtonS4Y5mqMeejwPhT/GpT3Pv1amemPVv3XjRGIQrgHX4720hLUQ+PJ\n05Z29E0Z5TgwKagNPIrrqEnPvyORGnCHq6GvcZaPn+Eoc/yN5f0=\n=5V+V\n-----END PGP SIGNATURE-----", "payload": "tree ca62a9b11c4a34f8ca15040e97fdd144e58d075b\nparent e222d1db3c0fc437a7e44af7a44d3e8628cc875a\nparent eca11b99a7d25e4e6573472a16537c1aacb5d5e1\nauthor kennytm <kennytm@gmail.com> 1541584925 +0800\ncommitter kennytm <kennytm@gmail.com> 1541597220 +0800\n\nRollup merge of #55734 - teresy:shorthand-fields, r=davidtwco\n\nrefactor: use shorthand fields\n\nrefactor: use shorthand for single fields everywhere (excluding tests).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "html_url": "https://github.com/rust-lang/rust/commit/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e222d1db3c0fc437a7e44af7a44d3e8628cc875a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e222d1db3c0fc437a7e44af7a44d3e8628cc875a", "html_url": "https://github.com/rust-lang/rust/commit/e222d1db3c0fc437a7e44af7a44d3e8628cc875a"}, {"sha": "eca11b99a7d25e4e6573472a16537c1aacb5d5e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca11b99a7d25e4e6573472a16537c1aacb5d5e1", "html_url": "https://github.com/rust-lang/rust/commit/eca11b99a7d25e4e6573472a16537c1aacb5d5e1"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "5c776292f53d7a86a49f0c1dcedf80d4dd261097", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -502,7 +502,7 @@ impl String {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n         match str::from_utf8(&vec) {\n-            Ok(..) => Ok(String { vec: vec }),\n+            Ok(..) => Ok(String { vec }),\n             Err(e) => {\n                 Err(FromUtf8Error {\n                     bytes: vec,"}, {"sha": "3ff250ff6592bdbb717ab98c273b7b20d94e1a48", "filename": "src/libpanic_unwind/dwarf/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -29,7 +29,7 @@ struct Unaligned<T>(T);\n \n impl DwarfReader {\n     pub fn new(ptr: *const u8) -> DwarfReader {\n-        DwarfReader { ptr: ptr }\n+        DwarfReader { ptr }\n     }\n \n     // DWARF streams are packed, so e.g. a u32 would not necessarily be aligned"}, {"sha": "60e9829ef9eaffdef851e06fe30ebace8353b5a5", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -41,7 +41,7 @@ struct PanicData {\n }\n \n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n-    let panic_ctx = Box::new(PanicData { data: data });\n+    let panic_ctx = Box::new(PanicData { data });\n     let params = [Box::into_raw(panic_ctx) as c::ULONG_PTR];\n     c::RaiseException(RUST_PANIC,\n                       c::EXCEPTION_NONCONTINUABLE,"}, {"sha": "a0c310ac2761e1fbf869fc57bb29764d8a2915ff", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -26,7 +26,7 @@ pub struct OpportunisticTypeResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> OpportunisticTypeResolver<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n-        OpportunisticTypeResolver { infcx: infcx }\n+        OpportunisticTypeResolver { infcx }\n     }\n }\n \n@@ -54,7 +54,7 @@ pub struct OpportunisticTypeAndRegionResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n-        OpportunisticTypeAndRegionResolver { infcx: infcx }\n+        OpportunisticTypeAndRegionResolver { infcx }\n     }\n }\n "}, {"sha": "39bf59a7a4ec5d31e5240fd12a4f9eb0c554f403", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -169,7 +169,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         // Hack: we only need this so that `types_escaping_snapshot`\n         // can see what has been unified; see the Delegate impl for\n         // more details.\n-        self.values.record(Instantiate { vid: vid });\n+        self.values.record(Instantiate { vid });\n     }\n \n     /// Creates a new type variable."}, {"sha": "f8001e085c469e4c3b74f62655f434584177e381", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -43,7 +43,7 @@ impl UnifyValue for RegionVidKey {\n             value2.min_vid\n         };\n \n-        Ok(RegionVidKey { min_vid: min_vid })\n+        Ok(RegionVidKey { min_vid })\n     }\n }\n "}, {"sha": "5d456481896b6bdc8596ad624b653c634ab39372", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -469,7 +469,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut checker = Checker { tcx: tcx };\n+    let mut checker = Checker { tcx };\n     tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n "}, {"sha": "c2014a5fdd23a088abb4d599a2df9244c2c7b714", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -2986,7 +2986,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         use mir::TerminatorKind::*;\n \n         let kind = match self.kind {\n-            Goto { target } => Goto { target: target },\n+            Goto { target } => Goto { target },\n             SwitchInt {\n                 ref discr,\n                 switch_ty,"}, {"sha": "4b53235eab4af2aa2f1a420e29b80d5ffc77f6cc", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -32,7 +32,7 @@ pub enum PlaceTy<'tcx> {\n \n impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {\n-        PlaceTy::Ty { ty: ty }\n+        PlaceTy::Ty { ty }\n     }\n \n     pub fn to_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {"}, {"sha": "6b5eb4293e0285311a0316bdf017530058d665e8", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -266,7 +266,7 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n         },\n         Err(err) => {\n             debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n-            Err(MismatchedProjectionTypes { err: err })\n+            Err(MismatchedProjectionTypes { err })\n         }\n     }\n }"}, {"sha": "550c27ca0ab8bc669b4c95396443de56c90e8f0a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -3526,7 +3526,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             _ => bug!(),\n         };\n \n-        Ok(VtableBuiltinData { nested: nested })\n+        Ok(VtableBuiltinData { nested })\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "d20b6d361991b6804630e997bc0cb5c2d3efe72c", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -34,7 +34,7 @@ pub struct Match<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> Match<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Match<'a, 'gcx, 'tcx> {\n-        Match { tcx: tcx }\n+        Match { tcx }\n     }\n }\n "}, {"sha": "ffa4380a5d63c48fcb59687dfdb7af2df841de6f", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -82,7 +82,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags: flags })\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags })\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)"}, {"sha": "fbd5192a63f8e42c1ccc93eec222af882e97c96b", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -190,7 +190,7 @@ impl ObjectFile {\n     pub fn new(llmb: &'static mut MemoryBuffer) -> Option<ObjectFile> {\n         unsafe {\n             let llof = LLVMCreateObjectFile(llmb)?;\n-            Some(ObjectFile { llof: llof })\n+            Some(ObjectFile { llof })\n         }\n     }\n }"}, {"sha": "2af772bd7ce22abaf9f3229c97c56c674324588d", "filename": "src/librustc_codegen_llvm/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -346,7 +346,7 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                        funclet, succ, kind);\n                 match kind {\n                     CleanupKind::NotCleanup => {\n-                        result[succ] = CleanupKind::Internal { funclet: funclet };\n+                        result[succ] = CleanupKind::Internal { funclet };\n                     }\n                     CleanupKind::Funclet => {\n                         if funclet != succ {"}, {"sha": "6eaf0c1c08da126778ef2170931229d764ec5c1c", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -32,7 +32,7 @@ pub fn report_symbol_names<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     tcx.dep_graph.with_ignore(|| {\n-        let mut visitor = SymbolNamesTest { tcx: tcx };\n+        let mut visitor = SymbolNamesTest { tcx };\n         tcx.hir.krate().visit_all_item_likes(&mut visitor);\n     })\n }"}, {"sha": "86e48e21626abd39b4a9546c237de189595464f9", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -214,7 +214,7 @@ cfg_if! {\n                     unsafe { libc::close(fd); }\n                     Err(err)\n                 } else {\n-                    Ok(Lock { fd: fd })\n+                    Ok(Lock { fd })\n                 }\n             }\n         }"}, {"sha": "3d17824608cc81b485a35440e272387b0b7884e3", "filename": "src/librustc_data_structures/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -31,7 +31,7 @@ impl Svh {\n     /// compute the SVH from some HIR, you want the `calculate_svh`\n     /// function found in `librustc_incremental`.\n     pub fn new(hash: u64) -> Svh {\n-        Svh { hash: hash }\n+        Svh { hash }\n     }\n \n     pub fn as_u64(&self) -> u64 {"}, {"sha": "4ce87a9675a80d4f8f76740fc6eb58fc11170ed7", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -795,7 +795,7 @@ impl LintPass for ImproperCTypes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext, it: &hir::ForeignItem) {\n-        let mut vis = ImproperCTypesVisitor { cx: cx };\n+        let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir.get_foreign_abi(it.id);\n         if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n             match it.node {"}, {"sha": "c9df36c5e236aa1dce3d83cc7c7c248d088f5696", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         index.record(DefId::local(CRATE_DEF_INDEX),\n                      IsolatedEncoder::encode_info_for_mod,\n                      FromId(CRATE_NODE_ID, (&krate.module, &krate.attrs, &vis)));\n-        let mut visitor = EncodeVisitor { index: index };\n+        let mut visitor = EncodeVisitor { index };\n         krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n         for macro_def in &krate.exported_macros {\n             visitor.visit_macro_def(macro_def);"}, {"sha": "99badd5a03fe6ee9840bf0f0e9d985b100ed1035", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -453,7 +453,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let scope = &self.scopes[len - scope_count];\n         self.cfg.terminate(block, scope.source_info(span),\n-                           TerminatorKind::Goto { target: target });\n+                           TerminatorKind::Goto { target });\n     }\n \n     /// Creates a path that performs all required cleanup for dropping a generator.\n@@ -1019,7 +1019,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         } else {\n             let block = cfg.start_new_cleanup_block();\n             cfg.push_end_region(tcx, block, source_info(span), scope.region_scope);\n-            cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n+            cfg.terminate(block, source_info(span), TerminatorKind::Goto { target });\n             *cached_block = Some(block);\n             block\n         }"}, {"sha": "1e279d8dd97083295f2d74e9cf94545bd6aad010", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -28,7 +28,7 @@ pub struct HaveBeenBorrowedLocals<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>)\n                -> Self {\n-        HaveBeenBorrowedLocals { mir: mir }\n+        HaveBeenBorrowedLocals { mir }\n     }\n \n     pub fn mir(&self) -> &Mir<'tcx> {"}, {"sha": "c8faa34df8a2bcda20bbf9320f4709834807b373", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -21,7 +21,7 @@ pub struct MaybeStorageLive<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> MaybeStorageLive<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>)\n                -> Self {\n-        MaybeStorageLive { mir: mir }\n+        MaybeStorageLive { mir }\n     }\n \n     pub fn mir(&self) -> &Mir<'tcx> {"}, {"sha": "32f8752c31be7dfe92a27c3328912181fe8bcd28", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "0acb4052fd73e04d2852d66cffbe7042560fc064", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -571,7 +571,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                        })\n                                        .collect();\n \n-                        PatternKind::Leaf { subpatterns: subpatterns }\n+                        PatternKind::Leaf { subpatterns }\n                     }\n                     ty::Error => { // Avoid ICE (#50577)\n                         return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n@@ -778,13 +778,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         subpatterns,\n                     }\n                 } else {\n-                    PatternKind::Leaf { subpatterns: subpatterns }\n+                    PatternKind::Leaf { subpatterns }\n                 }\n             }\n \n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) => {\n-                PatternKind::Leaf { subpatterns: subpatterns }\n+                PatternKind::Leaf { subpatterns }\n             }\n \n             _ => {"}, {"sha": "5de289068b25509db5fd4e49de7e217b763fdde2", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -495,7 +495,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let target = self.patch.new_block(BasicBlockData {\n             statements: vec![assign],\n             terminator: Some(Terminator {\n-                kind: TerminatorKind::Goto { target: target },\n+                kind: TerminatorKind::Goto { target },\n                 ..*terminator\n             }),\n             is_cleanup: false,"}, {"sha": "f643870dec207c6e28bf08ea42460bbf6b735212", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -302,7 +302,7 @@ impl MirPass for SimplifyLocals {\n \n         let map = make_local_map(&mut mir.local_decls, marker.locals);\n         // Update references to all vars and tmps now\n-        LocalUpdater { map: map }.visit_mir(mir);\n+        LocalUpdater { map }.visit_mir(mir);\n         mir.local_decls.shrink_to_fit();\n     }\n }"}, {"sha": "b24898095435b4dc227b3cadd09428c6f8c2c2a2", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -57,7 +57,7 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::Assert {\n                     target, cond: Operand::Constant(ref c), expected, ..\n                 } if (c.literal.assert_bool(tcx) == Some(true)) == expected => {\n-                    TerminatorKind::Goto { target: target }\n+                    TerminatorKind::Goto { target }\n                 },\n                 TerminatorKind::FalseEdges { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }"}, {"sha": "b878a330ab6490b562e54d0eeae0d97c731176dd", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -672,5 +672,5 @@ pub fn check_crate(session: &Session, krate: &Crate) {\n             is_banned: false,\n         }, krate);\n \n-    visit::walk_crate(&mut AstValidator { session: session }, krate)\n+    visit::walk_crate(&mut AstValidator { session }, krate)\n }"}, {"sha": "241db271177b7e543ee00c5492eeeb6657ee9e21", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -4422,7 +4422,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         // declared as public (due to pruning, we don't explore\n                         // outside crate private modules => no need to check this)\n                         if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n-                            candidates.push(ImportSuggestion { path: path });\n+                            candidates.push(ImportSuggestion { path });\n                         }\n                     }\n                 }\n@@ -4519,7 +4519,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             span: name_binding.span,\n                             segments: path_segments,\n                         };\n-                        result = Some((module, ImportSuggestion { path: path }));\n+                        result = Some((module, ImportSuggestion { path }));\n                     } else {\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {"}, {"sha": "ca336ceb381c5f5f61ee474c014b09da25e39970", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -71,7 +71,7 @@ impl<'b> JsonDumper<CallbackOutput<'b>> {\n         config: Config,\n     ) -> JsonDumper<CallbackOutput<'b>> {\n         JsonDumper {\n-            output: CallbackOutput { callback: callback },\n+            output: CallbackOutput { callback },\n             config: config.clone(),\n             result: Analysis::new(config),\n         }"}, {"sha": "266b9e3c0abad33bf63ff5b9f455e98907d1c2dc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -993,7 +993,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             AdtField { ty: field_ty, span: field.span }\n         })\n         .collect();\n-        AdtVariant { fields: fields }\n+        AdtVariant { fields }\n     }\n \n     fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> {"}, {"sha": "14c6864434fcfcbf5cd15c7c59d6c3da64226544", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut orphan = OrphanChecker { tcx: tcx };\n+    let mut orphan = OrphanChecker { tcx };\n     tcx.hir.krate().visit_all_item_likes(&mut orphan);\n }\n "}, {"sha": "0894c1d49e80e7e7e0ae97770063d8af35ba2d90", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut unsafety = UnsafetyChecker { tcx: tcx };\n+    let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir.krate().visit_all_item_likes(&mut unsafety);\n }\n "}, {"sha": "be09cfce8cae6424ad9dc1fbde3ba554e211f3db", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -64,7 +64,7 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut visitor = CollectItemTypesVisitor { tcx: tcx };\n+    let mut visitor = CollectItemTypesVisitor { tcx };\n     tcx.hir\n        .krate()\n        .visit_all_item_likes(&mut visitor.as_deep_visitor());"}, {"sha": "74a53f7fca273fa81146fa2a677fdd6d72f26f3a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -62,7 +62,7 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx: tcx });\n+    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx });\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}, {"sha": "c39b71e33ca0cecfe1491bcead121dd6e4c5f472", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -2966,7 +2966,7 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n             source: cx.tcx.def_span(self.did).clean(cx),\n             visibility: Some(Inherited),\n             def_id: self.did,\n-            inner: VariantItem(Variant { kind: kind }),\n+            inner: VariantItem(Variant { kind }),\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n         }"}, {"sha": "8de415e8aed5cc25ec6577e59f8a461034076098", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -3418,7 +3418,7 @@ mod test_map {\n                 slot.borrow_mut()[k] += 1;\n             });\n \n-            Droppable { k: k }\n+            Droppable { k }\n         }\n     }\n "}, {"sha": "f4703dec187b8cf0843f973e2c80bbf0c4b973f1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -877,7 +877,7 @@ impl OpenOptions {\n \n     fn _open(&self, path: &Path) -> io::Result<File> {\n         let inner = fs_imp::File::open(path, &self.0)?;\n-        Ok(File { inner: inner })\n+        Ok(File { inner })\n     }\n }\n "}, {"sha": "12995d08683450175af2c3fe2b5b1377c70ab320", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -150,7 +150,7 @@ pub struct Repeat { byte: u8 }\n /// assert_eq!(buffer, [0b101, 0b101, 0b101]);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn repeat(byte: u8) -> Repeat { Repeat { byte: byte } }\n+pub fn repeat(byte: u8) -> Repeat { Repeat { byte } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Repeat {"}, {"sha": "81f98a55c117149bd5bfe8aa0e9f3d907853eb81", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -931,7 +931,7 @@ impl<T> fmt::Debug for Sender<T> {\n \n impl<T> SyncSender<T> {\n     fn new(inner: Arc<sync::Packet<T>>) -> SyncSender<T> {\n-        SyncSender { inner: inner }\n+        SyncSender { inner }\n     }\n \n     /// Sends a value on this synchronous channel."}, {"sha": "3d66998b9f549e91108e3dfdd8b7e7b77fcfd5b5", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -32,7 +32,7 @@ impl Instant {\n             let mut t = mem::uninitialized();\n             let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, &mut t);\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            Instant { t: t }\n+            Instant { t }\n         }\n     }\n \n@@ -71,7 +71,7 @@ impl SystemTime {\n             let mut t = mem::uninitialized();\n             let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, &mut t);\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            SystemTime { t: t }\n+            SystemTime { t }\n         }\n     }\n "}, {"sha": "d61103a872f9e6781d2f890cba298ae09ae56622", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -21,7 +21,7 @@ pub struct FileDesc {\n \n impl FileDesc {\n     pub fn new(fd: usize) -> FileDesc {\n-        FileDesc { fd: fd }\n+        FileDesc { fd }\n     }\n \n     pub fn raw(&self) -> usize { self.fd }"}, {"sha": "6059406997dff100f458c1e4c64f180d81f2754c", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -264,7 +264,7 @@ impl File {\n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n         let mut stat = syscall::Stat::default();\n         cvt(syscall::fstat(self.0.raw(), &mut stat))?;\n-        Ok(FileAttr { stat: stat })\n+        Ok(FileAttr { stat })\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {"}, {"sha": "1e3783705537ab274b651a115a723dea7a53f5b3", "filename": "src/libstd/sys/redox/syscall/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -19,7 +19,7 @@ pub type Result<T> = result::Result<T, Error>;\n \n impl Error {\n     pub fn new(errno: i32) -> Error {\n-        Error { errno: errno }\n+        Error { errno }\n     }\n \n     pub fn mux(result: Result<usize>) -> usize {"}, {"sha": "bab91b16e6c0a4f3bdec59a71c14a8570c7a87d8", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -38,7 +38,7 @@ impl Thread {\n             panic!(\"thread failed to exit\");\n         } else {\n             mem::forget(p);\n-            Ok(Thread { id: id })\n+            Ok(Thread { id })\n         }\n     }\n "}, {"sha": "aac6d2704e790cd0519d77e44a27a5c46e4c8ea4", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -187,7 +187,7 @@ impl SystemTime {\n \n impl From<syscall::TimeSpec> for SystemTime {\n     fn from(t: syscall::TimeSpec) -> SystemTime {\n-        SystemTime { t: Timespec { t: t } }\n+        SystemTime { t: Timespec { t } }\n     }\n }\n "}, {"sha": "af33d2636fb1fef1bd8ce5facaade975585e514c", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -41,7 +41,7 @@ fn max_len() -> usize {\n \n impl FileDesc {\n     pub fn new(fd: c_int) -> FileDesc {\n-        FileDesc { fd: fd }\n+        FileDesc { fd }\n     }\n \n     pub fn raw(&self) -> c_int { self.fd }"}, {"sha": "add06aec11b64a294d558f57b9f84383bea0f454", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -317,7 +317,7 @@ impl DirEntry {\n         cvt(unsafe {\n             fstatat64(fd, self.entry.d_name.as_ptr(), &mut stat, libc::AT_SYMLINK_NOFOLLOW)\n         })?;\n-        Ok(FileAttr { stat: stat })\n+        Ok(FileAttr { stat })\n     }\n \n     #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\")))]\n@@ -526,7 +526,7 @@ impl File {\n         cvt(unsafe {\n             fstat64(self.0.raw(), &mut stat)\n         })?;\n-        Ok(FileAttr { stat: stat })\n+        Ok(FileAttr { stat })\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {\n@@ -807,7 +807,7 @@ pub fn stat(p: &Path) -> io::Result<FileAttr> {\n     cvt(unsafe {\n         stat64(p.as_ptr(), &mut stat)\n     })?;\n-    Ok(FileAttr { stat: stat })\n+    Ok(FileAttr { stat })\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n@@ -816,7 +816,7 @@ pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n     cvt(unsafe {\n         lstat64(p.as_ptr(), &mut stat)\n     })?;\n-    Ok(FileAttr { stat: stat })\n+    Ok(FileAttr { stat })\n }\n \n pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {"}, {"sha": "af51f8a8e257a0875f8154ebb298040b6fdf7b88", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -217,7 +217,7 @@ mod inner {\n \n     impl From<libc::timespec> for SystemTime {\n         fn from(t: libc::timespec) -> SystemTime {\n-            SystemTime { t: Timespec { t: t } }\n+            SystemTime { t: Timespec { t } }\n         }\n     }\n \n@@ -332,7 +332,7 @@ mod inner {\n \n     impl From<libc::timespec> for SystemTime {\n         fn from(t: libc::timespec) -> SystemTime {\n-            SystemTime { t: Timespec { t: t } }\n+            SystemTime { t: Timespec { t } }\n         }\n     }\n "}, {"sha": "ff1ee0d26fe5412a944a55a733426e857fed7c73", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -241,7 +241,7 @@ impl<'a> DropGuard<'a> {\n     fn new(lock: &'a Mutex) -> DropGuard<'a> {\n         unsafe {\n             lock.lock();\n-            DropGuard { lock: lock }\n+            DropGuard { lock }\n         }\n     }\n }"}, {"sha": "54bcbc76b1a3c347ba64b23fa03087f61e3ae92d", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -170,7 +170,7 @@ impl fmt::Debug for SystemTime {\n \n impl From<c::FILETIME> for SystemTime {\n     fn from(t: c::FILETIME) -> SystemTime {\n-        SystemTime { t: t }\n+        SystemTime { t }\n     }\n }\n "}, {"sha": "af93571a604828508c7245610601f95b5544f946", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -174,7 +174,7 @@ impl<T> PoisonError<T> {\n     /// [`RwLock::read`]: ../../std/sync/struct.RwLock.html#method.read\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n-        PoisonError { guard: guard }\n+        PoisonError { guard }\n     }\n \n     /// Consumes this error indicating that a lock is poisoned, returning the"}, {"sha": "19ce932aa1233f6985158b03ef75fa05d5d641eb", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -67,7 +67,7 @@ impl CodePoint {\n     /// Only use when `value` is known to be less than or equal to 0x10FFFF.\n     #[inline]\n     pub unsafe fn from_u32_unchecked(value: u32) -> CodePoint {\n-        CodePoint { value: value }\n+        CodePoint { value }\n     }\n \n     /// Creates a new `CodePoint` if the value is a valid code point.\n@@ -76,7 +76,7 @@ impl CodePoint {\n     #[inline]\n     pub fn from_u32(value: u32) -> Option<CodePoint> {\n         match value {\n-            0 ..= 0x10FFFF => Some(CodePoint { value: value }),\n+            0 ..= 0x10FFFF => Some(CodePoint { value }),\n             _ => None\n         }\n     }"}, {"sha": "e1ba8897a47f4d76d6df8cc457167bcddc5d9d3a", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -126,7 +126,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n         }\n     }\n \n-    Box::new(ExpandResult { p: p })\n+    Box::new(ExpandResult { p })\n }\n \n // include_str! : read the given file, insert it as a literal string expr"}, {"sha": "0e6e2f90693cf54861abc1ada9fd6d50a84670d5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -945,7 +945,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         ItemKind::Enum(enum_definition, generics) => {\n             let generics = folder.fold_generics(generics);\n             let variants = enum_definition.variants.move_map(|x| folder.fold_variant(x));\n-            ItemKind::Enum(ast::EnumDef { variants: variants }, generics)\n+            ItemKind::Enum(ast::EnumDef { variants }, generics)\n         }\n         ItemKind::Struct(struct_def, generics) => {\n             let generics = folder.fold_generics(generics);"}, {"sha": "c8a686da179fbbcba51d828313dcced3743ee9fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9146ad957494821aa3d54aedf4dbcb6c3b7cea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9d9146ad957494821aa3d54aedf4dbcb6c3b7cea", "patch": "@@ -6929,7 +6929,7 @@ impl<'a> Parser<'a> {\n             _ => ()\n         }\n \n-        Ok(ast::EnumDef { variants: variants })\n+        Ok(ast::EnumDef { variants })\n     }\n \n     /// Parse an \"enum\" declaration"}]}