{"sha": "1421bedd511c4c12889c2f22ec0b3e1687715372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MjFiZWRkNTExYzRjMTI4ODljMmYyMmVjMGIzZTE2ODc3MTUzNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-04T23:50:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-04T23:50:11Z"}, "message": "Auto merge of #42732 - cengizIO:master, r=Mark-Simulacrum\n\nAdd pager support for `rustc --explain EXXXX`\n\nHello!\n\nFixes #32665.\n\nThanks!\n\n**EDIT:** _I've limited access to a Windows machine so this is taking longer than I've anticipated_. \ud83d\udc22\n\ncc @alexcrichton @nikomatsakis @Mark-Simulacrum @retep998 @ollie27 @afiune", "tree": {"sha": "c44bc8038b7450c167f13e1174de83b7352a29a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c44bc8038b7450c167f13e1174de83b7352a29a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1421bedd511c4c12889c2f22ec0b3e1687715372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1421bedd511c4c12889c2f22ec0b3e1687715372", "html_url": "https://github.com/rust-lang/rust/commit/1421bedd511c4c12889c2f22ec0b3e1687715372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1421bedd511c4c12889c2f22ec0b3e1687715372/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbba5bdbadeef403a64e9e1568cdad225cbcec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbba5bdbadeef403a64e9e1568cdad225cbcec1", "html_url": "https://github.com/rust-lang/rust/commit/2fbba5bdbadeef403a64e9e1568cdad225cbcec1"}, {"sha": "06de114f898f6f92a3c6cfb220dc957611087ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/06de114f898f6f92a3c6cfb220dc957611087ef9", "html_url": "https://github.com/rust-lang/rust/commit/06de114f898f6f92a3c6cfb220dc957611087ef9"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "802ed2a489b100cc87534c323090c8b2d37dd5b6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1421bedd511c4c12889c2f22ec0b3e1687715372/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1421bedd511c4c12889c2f22ec0b3e1687715372/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1421bedd511c4c12889c2f22ec0b3e1687715372", "patch": "@@ -84,10 +84,11 @@ use std::cmp::max;\n use std::cmp::Ordering::Equal;\n use std::default::Default;\n use std::env;\n+use std::ffi::OsString;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n-use std::process;\n+use std::process::{self, Command, Stdio};\n use std::rc::Rc;\n use std::str;\n use std::sync::{Arc, Mutex};\n@@ -343,6 +344,31 @@ pub trait CompilerCalls<'a> {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n+// FIXME remove these and use winapi 0.3 instead\n+// Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs\n+#[cfg(unix)]\n+fn stdout_isatty() -> bool {\n+    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n+}\n+\n+#[cfg(windows)]\n+fn stdout_isatty() -> bool {\n+    type DWORD = u32;\n+    type BOOL = i32;\n+    type HANDLE = *mut u8;\n+    type LPDWORD = *mut u32;\n+    const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n+    extern \"system\" {\n+        fn GetStdHandle(which: DWORD) -> HANDLE;\n+        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n+    }\n+    unsafe {\n+        let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n+        let mut out = 0;\n+        GetConsoleMode(handle, &mut out) != 0\n+    }\n+}\n+\n fn handle_explain(code: &str,\n                   descriptions: &errors::registry::Registry,\n                   output: ErrorOutputType) {\n@@ -354,19 +380,28 @@ fn handle_explain(code: &str,\n     match descriptions.find_description(&normalised) {\n         Some(ref description) => {\n             let mut is_in_code_block = false;\n+            let mut text = String::new();\n+\n             // Slice off the leading newline and print.\n             for line in description[1..].lines() {\n                 let indent_level = line.find(|c: char| !c.is_whitespace())\n                     .unwrap_or_else(|| line.len());\n                 let dedented_line = &line[indent_level..];\n                 if dedented_line.starts_with(\"```\") {\n                     is_in_code_block = !is_in_code_block;\n-                    println!(\"{}\", &line[..(indent_level+3)]);\n+                    text.push_str(&line[..(indent_level+3)]);\n                 } else if is_in_code_block && dedented_line.starts_with(\"# \") {\n                     continue;\n                 } else {\n-                    println!(\"{}\", line);\n+                    text.push_str(line);\n                 }\n+                text.push('\\n');\n+            }\n+\n+            if stdout_isatty() {\n+                show_content_with_pager(&text);\n+            } else {\n+                print!(\"{}\", text);\n             }\n         }\n         None => {\n@@ -375,6 +410,39 @@ fn handle_explain(code: &str,\n     }\n }\n \n+fn show_content_with_pager(content: &String) {\n+    let pager_name = env::var_os(\"PAGER\").unwrap_or_else(|| if cfg!(windows) {\n+        OsString::from(\"more.com\")\n+    } else {\n+        OsString::from(\"less\")\n+    });\n+\n+    let mut fallback_to_println = false;\n+\n+    match Command::new(pager_name).stdin(Stdio::piped()).spawn() {\n+        Ok(mut pager) => {\n+            if let Some(mut pipe) = pager.stdin.as_mut() {\n+                if pipe.write_all(content.as_bytes()).is_err() {\n+                    fallback_to_println = true;\n+                }\n+            }\n+\n+            if pager.wait().is_err() {\n+                fallback_to_println = true;\n+            }\n+        }\n+        Err(_) => {\n+            fallback_to_println = true;\n+        }\n+    }\n+\n+    // If pager fails for whatever reason, we should still print the content\n+    // to standard output\n+    if fallback_to_println {\n+        print!(\"{}\", content);\n+    }\n+}\n+\n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,"}]}