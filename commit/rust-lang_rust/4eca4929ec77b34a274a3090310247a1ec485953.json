{"sha": "4eca4929ec77b34a274a3090310247a1ec485953", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlY2E0OTI5ZWM3N2IzNGEyNzRhMzA5MDMxMDI0N2ExZWM0ODU5NTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-15T15:22:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T15:22:50Z"}, "message": "Rollup merge of #82989 - Smittyvb:other-lang-literal-errors, r=varkor\n\nCustom error on literal names from other languages\n\nThis detects all Java literal types and all single word C data types, and suggests the corresponding Rust literal type.", "tree": {"sha": "db7a2890d32962a18fa40e9da3b3cf2453c11a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7a2890d32962a18fa40e9da3b3cf2453c11a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eca4929ec77b34a274a3090310247a1ec485953", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT3vKCRBK7hj4Ov3rIwAAdHIIAHCK9FMEVXf9kb1nQS7Dakoc\nYIFH+TS/Iun77Pk9/LgCQ2ZboM7NVuY/CnzZUuYq2IuR/NdUVH1bzsQkl4duUtIS\nib04VQJotZQARuba5BXn4gAlLUIJzYenLiUZwhXrLwUsmJFFkfAXua2+l8/V0K62\nvIOnONPPSjRkpXsjjMkkQxaxxwRlxFTJuKQyg/9G1Ld/yrTmKqdVc6XzgCSGFfqE\n7uSTGyAz+MI4GPJnPeidVQXMUnH+5QWpdazhFg/GxIN9Y/ArLP6c/+c1nvp49CoF\nznkfKcZLE7ACRp+cxVUkXjNbwJn2ZQDWvvPGkSMd3mWOtEo3yKShn/9sLEp0/IM=\n=+N0b\n-----END PGP SIGNATURE-----\n", "payload": "tree db7a2890d32962a18fa40e9da3b3cf2453c11a15\nparent 7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67\nparent 5eae9af193efca654a4e20ec0766781c24b7eb87\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615821770 +0100\ncommitter GitHub <noreply@github.com> 1615821770 +0100\n\nRollup merge of #82989 - Smittyvb:other-lang-literal-errors, r=varkor\n\nCustom error on literal names from other languages\n\nThis detects all Java literal types and all single word C data types, and suggests the corresponding Rust literal type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eca4929ec77b34a274a3090310247a1ec485953", "html_url": "https://github.com/rust-lang/rust/commit/4eca4929ec77b34a274a3090310247a1ec485953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eca4929ec77b34a274a3090310247a1ec485953/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67", "html_url": "https://github.com/rust-lang/rust/commit/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67"}, {"sha": "5eae9af193efca654a4e20ec0766781c24b7eb87", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eae9af193efca654a4e20ec0766781c24b7eb87", "html_url": "https://github.com/rust-lang/rust/commit/5eae9af193efca654a4e20ec0766781c24b7eb87"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "e85d78db22c563af4b9d7dd8ae4c405632ae06a8", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4eca4929ec77b34a274a3090310247a1ec485953/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca4929ec77b34a274a3090310247a1ec485953/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4eca4929ec77b34a274a3090310247a1ec485953", "patch": "@@ -563,6 +563,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         }\n                     }\n                 }\n+            } else if err_code == &rustc_errors::error_code!(E0412) {\n+                if let Some(correct) = Self::likely_rust_type(path) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"perhaps you intended to use this type\",\n+                        correct.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         }\n \n@@ -1243,6 +1252,23 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    // Returns the name of the Rust type approximately corresponding to\n+    // a type name in another programming language.\n+    fn likely_rust_type(path: &[Segment]) -> Option<Symbol> {\n+        let name = path[path.len() - 1].ident.as_str();\n+        // Common Java types\n+        Some(match &*name {\n+            \"byte\" => sym::u8, // In Java, bytes are signed, but in practice one almost always wants unsigned bytes.\n+            \"short\" => sym::i16,\n+            \"boolean\" => sym::bool,\n+            \"int\" => sym::i32,\n+            \"long\" => sym::i64,\n+            \"float\" => sym::f32,\n+            \"double\" => sym::f64,\n+            _ => return None,\n+        })\n+    }\n+\n     /// Only used in a specific case of type ascription suggestions\n     fn get_colon_suggestion_span(&self, start: Span) -> Span {\n         let sm = self.r.session.source_map();"}, {"sha": "f60d3d10dce47734fd27eb02d30895c5c783463c", "filename": "src/test/ui/lint/recommend-literal.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4eca4929ec77b34a274a3090310247a1ec485953/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca4929ec77b34a274a3090310247a1ec485953/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs?ref=4eca4929ec77b34a274a3090310247a1ec485953", "patch": "@@ -0,0 +1,35 @@\n+type Real = double;\n+//~^ ERROR cannot find type `double` in this scope\n+//~| HELP perhaps you intended to use this type\n+\n+fn main() {\n+    let x: Real = 3.5;\n+    let y: long = 74802374902374923;\n+    //~^ ERROR cannot find type `long` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+fn z(a: boolean) {\n+    //~^ ERROR cannot find type `boolean` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+fn a() -> byte {\n+//~^ ERROR cannot find type `byte` in this scope\n+//~| HELP perhaps you intended to use this type\n+    3\n+}\n+\n+struct Data { //~ HELP you might be missing a type parameter\n+    width: float,\n+    //~^ ERROR cannot find type `float` in this scope\n+    //~| HELP perhaps you intended to use this type\n+    depth: Option<int>,\n+    //~^ ERROR cannot find type `int` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+trait Stuff {}\n+impl Stuff for short {}\n+//~^ ERROR cannot find type `short` in this scope\n+//~| HELP perhaps you intended to use this type"}, {"sha": "b01073b42b864daf1f6613733dfa00cb896a7ed6", "filename": "src/test/ui/lint/recommend-literal.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4eca4929ec77b34a274a3090310247a1ec485953/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eca4929ec77b34a274a3090310247a1ec485953/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr?ref=4eca4929ec77b34a274a3090310247a1ec485953", "patch": "@@ -0,0 +1,72 @@\n+error[E0412]: cannot find type `double` in this scope\n+  --> $DIR/recommend-literal.rs:1:13\n+   |\n+LL | type Real = double;\n+   |             ^^^^^^\n+   |             |\n+   |             not found in this scope\n+   |             help: perhaps you intended to use this type: `f64`\n+\n+error[E0412]: cannot find type `long` in this scope\n+  --> $DIR/recommend-literal.rs:7:12\n+   |\n+LL |     let y: long = 74802374902374923;\n+   |            ^^^^\n+   |            |\n+   |            not found in this scope\n+   |            help: perhaps you intended to use this type: `i64`\n+\n+error[E0412]: cannot find type `boolean` in this scope\n+  --> $DIR/recommend-literal.rs:12:9\n+   |\n+LL | fn z(a: boolean) {\n+   |         ^^^^^^^\n+   |         |\n+   |         not found in this scope\n+   |         help: perhaps you intended to use this type: `bool`\n+\n+error[E0412]: cannot find type `byte` in this scope\n+  --> $DIR/recommend-literal.rs:17:11\n+   |\n+LL | fn a() -> byte {\n+   |           ^^^^\n+   |           |\n+   |           not found in this scope\n+   |           help: perhaps you intended to use this type: `u8`\n+\n+error[E0412]: cannot find type `float` in this scope\n+  --> $DIR/recommend-literal.rs:24:12\n+   |\n+LL |     width: float,\n+   |            ^^^^^\n+   |            |\n+   |            not found in this scope\n+   |            help: perhaps you intended to use this type: `f32`\n+\n+error[E0412]: cannot find type `int` in this scope\n+  --> $DIR/recommend-literal.rs:27:19\n+   |\n+LL |     depth: Option<int>,\n+   |                   ^^^ not found in this scope\n+   |\n+help: perhaps you intended to use this type\n+   |\n+LL |     depth: Option<i32>,\n+   |                   ^^^\n+help: you might be missing a type parameter\n+   |\n+LL | struct Data<int> {\n+   |            ^^^^^\n+\n+error[E0412]: cannot find type `short` in this scope\n+  --> $DIR/recommend-literal.rs:33:16\n+   |\n+LL | impl Stuff for short {}\n+   |                ^^^^^\n+   |                |\n+   |                not found in this scope\n+   |                help: perhaps you intended to use this type: `i16`\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}]}