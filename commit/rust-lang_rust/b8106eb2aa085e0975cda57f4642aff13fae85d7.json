{"sha": "b8106eb2aa085e0975cda57f4642aff13fae85d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTA2ZWIyYWEwODVlMDk3NWNkYTU3ZjQ2NDJhZmYxM2ZhZTg1ZDc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-29T21:54:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-29T21:54:25Z"}, "message": "Merge pull request #2209 from topecongiro/issue-2207\n\nUse an explicit flag to decide on whether to add brace compensation for block expression", "tree": {"sha": "6cd61b44b975b3fe60fb7d40ce5916eb690bc9a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd61b44b975b3fe60fb7d40ce5916eb690bc9a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8106eb2aa085e0975cda57f4642aff13fae85d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaHyyRCRBK7hj4Ov3rIwAAdHIIACLbC6ggM5tovSVDy1ftYrFz\nd3vbZPTYvEEavlaaSDWBJkZPPjAPCtpsrcnF2j0Dd6JMcsNmeFS9CJ/6LLkuoLef\nI/Je7sWdohGJgTlzT5LipKManBsIF95MQWi4IBuWC4AEZeiUWw5+UtfgpmV1NT23\ne8UaZ3IaC2vMZa7bHyB4o00QVe+9HKTz+MxMMoDYDYIKMUz79xDlrntXEgG7WD9k\nIRk73xmAcmP/5qp1ZmSwM5FUbsggpyptoVVjXKiXw758R2+RiRKJRfAVW/UGXtmt\nWWPQWzeNnH/LB7InoEkNP+rEDNeGT/HdHCiq13LDtIGa6QiVquuZOFsOngxLpAg=\n=cmao\n-----END PGP SIGNATURE-----\n", "payload": "tree 6cd61b44b975b3fe60fb7d40ce5916eb690bc9a7\nparent 54f3c21a2f41c01dc112d81fb9fa80bacf572e30\nparent f99b775de77ff7e138a3eca3d739f80bd797028f\nauthor Nick Cameron <nrc@ncameron.org> 1511992465 +1300\ncommitter GitHub <noreply@github.com> 1511992465 +1300\n\nMerge pull request #2209 from topecongiro/issue-2207\n\nUse an explicit flag to decide on whether to add brace compensation for block expression"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8106eb2aa085e0975cda57f4642aff13fae85d7", "html_url": "https://github.com/rust-lang/rust/commit/b8106eb2aa085e0975cda57f4642aff13fae85d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8106eb2aa085e0975cda57f4642aff13fae85d7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f3c21a2f41c01dc112d81fb9fa80bacf572e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f3c21a2f41c01dc112d81fb9fa80bacf572e30", "html_url": "https://github.com/rust-lang/rust/commit/54f3c21a2f41c01dc112d81fb9fa80bacf572e30"}, {"sha": "f99b775de77ff7e138a3eca3d739f80bd797028f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99b775de77ff7e138a3eca3d739f80bd797028f", "html_url": "https://github.com/rust-lang/rust/commit/f99b775de77ff7e138a3eca3d739f80bd797028f"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "1ea7982ba66fed7c8805019df45ec2e884a949a9", "filename": "src/closures.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8106eb2aa085e0975cda57f4642aff13fae85d7/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8106eb2aa085e0975cda57f4642aff13fae85d7/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=b8106eb2aa085e0975cda57f4642aff13fae85d7", "patch": "@@ -131,7 +131,8 @@ fn rewrite_closure_with_block(\n         rules: ast::BlockCheckMode::Default,\n         span: body.span,\n     };\n-    rewrite_closure_block(&block, prefix, context, shape)\n+    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, shape, false)?;\n+    Some(format!(\"{} {}\", prefix, block))\n }\n \n // Rewrite closure with a single expression without wrapping its body with block."}, {"sha": "d1303d952768152cd10072bc59c5b8cf254990e0", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8106eb2aa085e0975cda57f4642aff13fae85d7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8106eb2aa085e0975cda57f4642aff13fae85d7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b8106eb2aa085e0975cda57f4642aff13fae85d7", "patch": "@@ -116,7 +116,7 @@ pub fn format_expr(\n                         rw\n                     } else {\n                         let prefix = block_prefix(context, block, shape)?;\n-                        rewrite_block_with_visitor(context, &prefix, block, shape)\n+                        rewrite_block_with_visitor(context, &prefix, block, shape, true)\n                     }\n                 }\n                 ExprType::SubExpression => block.rewrite(context, shape),\n@@ -598,11 +598,12 @@ fn rewrite_single_line_block(\n     None\n }\n \n-fn rewrite_block_with_visitor(\n+pub fn rewrite_block_with_visitor(\n     context: &RewriteContext,\n     prefix: &str,\n     block: &ast::Block,\n     shape: Shape,\n+    has_braces: bool,\n ) -> Option<String> {\n     if let rw @ Some(_) = rewrite_empty_block(context, block, shape) {\n         return rw;\n@@ -620,7 +621,7 @@ fn rewrite_block_with_visitor(\n         ast::BlockCheckMode::Default => visitor.last_pos = block.span.lo(),\n     }\n \n-    visitor.visit_block(block, None);\n+    visitor.visit_block(block, None, has_braces);\n     Some(format!(\"{}{}\", prefix, visitor.buffer))\n }\n \n@@ -633,8 +634,9 @@ impl Rewrite for ast::Block {\n         }\n \n         let prefix = block_prefix(context, self, shape)?;\n+        let shape = shape.offset_left(last_line_width(&prefix))?;\n \n-        let result = rewrite_block_with_visitor(context, &prefix, self, shape);\n+        let result = rewrite_block_with_visitor(context, &prefix, self, shape, true);\n         if let Some(ref result_str) = result {\n             if result_str.lines().count() <= 3 {\n                 if let rw @ Some(_) = rewrite_single_line_block(context, &prefix, self, shape) {\n@@ -1064,7 +1066,8 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         };\n         let mut block_context = context.clone();\n         block_context.is_if_else_block = self.else_block.is_some();\n-        let block_str = rewrite_block_with_visitor(&block_context, \"\", self.block, block_shape)?;\n+        let block_str =\n+            rewrite_block_with_visitor(&block_context, \"\", self.block, block_shape, true)?;\n \n         let mut result = format!(\"{}{}\", cond_str, block_str);\n "}, {"sha": "85a8fb38f077dac8233c7e00aaa93e5d9232f1ca", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8106eb2aa085e0975cda57f4642aff13fae85d7/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8106eb2aa085e0975cda57f4642aff13fae85d7/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b8106eb2aa085e0975cda57f4642aff13fae85d7", "patch": "@@ -90,17 +90,20 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn visit_block(&mut self, b: &ast::Block, inner_attrs: Option<&[ast::Attribute]>) {\n+    pub fn visit_block(\n+        &mut self,\n+        b: &ast::Block,\n+        inner_attrs: Option<&[ast::Attribute]>,\n+        has_braces: bool,\n+    ) {\n         debug!(\n             \"visit_block: {:?} {:?}\",\n             self.codemap.lookup_char_pos(b.span.lo()),\n             self.codemap.lookup_char_pos(b.span.hi())\n         );\n \n         // Check if this block has braces.\n-        let snippet = self.snippet(b.span);\n-        let has_braces = snippet.starts_with('{') || snippet.starts_with(\"unsafe\");\n-        let brace_compensation = if has_braces { BytePos(1) } else { BytePos(0) };\n+        let brace_compensation = BytePos(if has_braces { 1 } else { 0 });\n \n         self.last_pos = self.last_pos + brace_compensation;\n         self.block_indent = self.block_indent.block_indent(self.config);\n@@ -272,7 +275,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         self.last_pos = source!(self, block.span).lo();\n-        self.visit_block(block, inner_attrs)\n+        self.visit_block(block, inner_attrs, true)\n     }\n \n     pub fn visit_item(&mut self, item: &ast::Item) {"}, {"sha": "cac3b493bfca7bafacce578fcdd0f85e6e1c9ae4", "filename": "tests/source/closure.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8106eb2aa085e0975cda57f4642aff13fae85d7/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8106eb2aa085e0975cda57f4642aff13fae85d7/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=b8106eb2aa085e0975cda57f4642aff13fae85d7", "patch": "@@ -198,3 +198,9 @@ fn issue2171() {\n         }\n     })\n }\n+\n+fn issue2207() {\n+    a.map(|_| unsafe {\n+        a_very_very_very_very_very_very_very_long_function_name_or_anything_else()\n+    }.to_string())\n+}"}, {"sha": "0a45ad841c609ad8bf251ce4b6340ec7d78afa91", "filename": "tests/target/closure.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8106eb2aa085e0975cda57f4642aff13fae85d7/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8106eb2aa085e0975cda57f4642aff13fae85d7/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=b8106eb2aa085e0975cda57f4642aff13fae85d7", "patch": "@@ -123,7 +123,9 @@ fn foo() {\n \n fn issue1405() {\n     open_raw_fd(fd, b'r').and_then(|file| {\n-        Capture::new_raw(None, |_, err| unsafe { raw::pcap_fopen_offline(file, err) })\n+        Capture::new_raw(None, |_, err| unsafe {\n+            raw::pcap_fopen_offline(file, err)\n+        })\n     });\n }\n \n@@ -174,8 +176,9 @@ fn issue1329() {\n }\n \n fn issue325() {\n-    let f =\n-        || unsafe { xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx };\n+    let f = || unsafe {\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+    };\n }\n \n fn issue1697() {\n@@ -230,3 +233,10 @@ fn issue2171() {\n         }\n     })\n }\n+\n+fn issue2207() {\n+    a.map(|_| {\n+        unsafe { a_very_very_very_very_very_very_very_long_function_name_or_anything_else() }\n+            .to_string()\n+    })\n+}"}]}