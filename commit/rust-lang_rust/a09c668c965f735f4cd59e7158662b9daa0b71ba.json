{"sha": "a09c668c965f735f4cd59e7158662b9daa0b71ba", "node_id": "C_kwDOAAsO6NoAKGEwOWM2NjhjOTY1ZjczNWY0Y2Q1OWU3MTU4NjYyYjlkYWEwYjcxYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T00:28:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T00:28:20Z"}, "message": "Auto merge of #98359 - JohnTitor:rollup-v30vyzr, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #97867 (lub: don't bail out due to empty binders)\n - #98099 (interpret: convert_tag_add_extra: allow tagger to raise errors)\n - #98199 (Move some tests to more reasonable directories)\n - #98334 (Add a full regression test for #73727)\n - #98336 (Remove the unused-`#[doc(hidden)]` logic from the `unused_attributes` lint)\n - #98344 (This comment is out dated and misleading, the arm is about TAITs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1016e36a0dee9923ae8eec146c446b83316e4623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1016e36a0dee9923ae8eec146c446b83316e4623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09c668c965f735f4cd59e7158662b9daa0b71ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09c668c965f735f4cd59e7158662b9daa0b71ba", "html_url": "https://github.com/rust-lang/rust/commit/a09c668c965f735f4cd59e7158662b9daa0b71ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09c668c965f735f4cd59e7158662b9daa0b71ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "html_url": "https://github.com/rust-lang/rust/commit/dc80ca78b6ec2b6bba02560470347433bcd0bb3c"}, {"sha": "cb3322ae3d8a14e37e64e1246778466bca9fd19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3322ae3d8a14e37e64e1246778466bca9fd19e", "html_url": "https://github.com/rust-lang/rust/commit/cb3322ae3d8a14e37e64e1246778466bca9fd19e"}], "stats": {"total": 539, "additions": 248, "deletions": 291}, "files": [{"sha": "c18ac84171d694cb519e9128f453cb79cd69709e", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -334,12 +334,14 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// allocation (because a copy had to be done to add tags or metadata), machine memory will\n     /// cache the result. (This relies on `AllocMap::get_or` being able to add the\n     /// owned allocation to the map even when the map is shared.)\n+    ///\n+    /// This must only fail if `alloc` contains relocations.\n     fn init_allocation_extra<'b>(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKind>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>;\n+    ) -> InterpResult<'tcx, Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>>;\n \n     /// Hook for performing extra checks on a memory read access.\n     ///\n@@ -485,9 +487,9 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<Self::MemoryKind>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag>> {\n+    ) -> InterpResult<$tcx, Cow<'b, Allocation<Self::PointerTag>>> {\n         // We do not use a tag so we can just cheaply forward the allocation\n-        alloc\n+        Ok(alloc)\n     }\n \n     fn extern_static_base_pointer("}, {"sha": "d46f2f38d3a6547034c289b271c716216f8a0d52", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -199,7 +199,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKind>,\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;\n-        Ok(self.allocate_raw_ptr(alloc, kind))\n+        // We can `unwrap` since `alloc` contains no pointers.\n+        Ok(self.allocate_raw_ptr(alloc, kind).unwrap())\n     }\n \n     pub fn allocate_bytes_ptr(\n@@ -210,23 +211,25 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         mutability: Mutability,\n     ) -> Pointer<M::PointerTag> {\n         let alloc = Allocation::from_bytes(bytes, align, mutability);\n-        self.allocate_raw_ptr(alloc, kind)\n+        // We can `unwrap` since `alloc` contains no pointers.\n+        self.allocate_raw_ptr(alloc, kind).unwrap()\n     }\n \n+    /// This can fail only of `alloc` contains relocations.\n     pub fn allocate_raw_ptr(\n         &mut self,\n         alloc: Allocation,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> Pointer<M::PointerTag> {\n+    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         let id = self.tcx.reserve_alloc_id();\n         debug_assert_ne!(\n             Some(kind),\n             M::GLOBAL_KIND.map(MemoryKind::Machine),\n             \"dynamically allocating global memory\"\n         );\n-        let alloc = M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind));\n+        let alloc = M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind))?;\n         self.memory.alloc_map.insert(id, (kind, alloc.into_owned()));\n-        M::tag_alloc_base_pointer(self, Pointer::from(id))\n+        Ok(M::tag_alloc_base_pointer(self, Pointer::from(id)))\n     }\n \n     pub fn reallocate_ptr(\n@@ -510,13 +513,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         M::before_access_global(*self.tcx, &self.machine, id, alloc, def_id, is_write)?;\n         // We got tcx memory. Let the machine initialize its \"extra\" stuff.\n-        let alloc = M::init_allocation_extra(\n+        M::init_allocation_extra(\n             self,\n             id, // always use the ID we got as input, not the \"hidden\" one.\n             Cow::Borrowed(alloc.inner()),\n             M::GLOBAL_KIND.map(MemoryKind::Machine),\n-        );\n-        Ok(alloc)\n+        )\n     }\n \n     /// Gives raw access to the `Allocation`, without bounds or alignment checks."}, {"sha": "1570a08f3ca8bdb0aa11a3e4bbbe9131fc673a64", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -95,12 +95,20 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n-\n-        // When higher-ranked types are involved, computing the LUB is\n-        // very challenging, switch to invariance. This is obviously\n-        // overly conservative but works ok in practice.\n-        self.relate_with_variance(ty::Variance::Invariant, ty::VarianceDiagInfo::default(), a, b)?;\n-        Ok(a)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            // When higher-ranked types are involved, computing the GLB is\n+            // very challenging, switch to invariance. This is obviously\n+            // overly conservative but works ok in practice.\n+            self.relate_with_variance(\n+                ty::Variance::Invariant,\n+                ty::VarianceDiagInfo::default(),\n+                a,\n+                b,\n+            )?;\n+            Ok(a)\n+        } else {\n+            Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+        }\n     }\n }\n "}, {"sha": "9f96d52c85034f36092f4d53f7b6e34339cc630a", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -95,12 +95,20 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n-\n-        // When higher-ranked types are involved, computing the LUB is\n-        // very challenging, switch to invariance. This is obviously\n-        // overly conservative but works ok in practice.\n-        self.relate_with_variance(ty::Variance::Invariant, ty::VarianceDiagInfo::default(), a, b)?;\n-        Ok(a)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            // When higher-ranked types are involved, computing the LUB is\n+            // very challenging, switch to invariance. This is obviously\n+            // overly conservative but works ok in practice.\n+            self.relate_with_variance(\n+                ty::Variance::Invariant,\n+                ty::VarianceDiagInfo::default(),\n+                a,\n+                b,\n+            )?;\n+            Ok(a)\n+        } else {\n+            Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+        }\n     }\n }\n "}, {"sha": "10c4ea63a68b2677158ef47e1015d66329f3bb11", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -244,12 +244,12 @@ impl<Tag> Allocation<Tag> {\n \n impl Allocation {\n     /// Convert Tag and add Extra fields\n-    pub fn convert_tag_add_extra<Tag, Extra>(\n+    pub fn convert_tag_add_extra<Tag, Extra, Err>(\n         self,\n         cx: &impl HasDataLayout,\n         extra: Extra,\n-        mut tagger: impl FnMut(Pointer<AllocId>) -> Pointer<Tag>,\n-    ) -> Allocation<Tag, Extra> {\n+        mut tagger: impl FnMut(Pointer<AllocId>) -> Result<Pointer<Tag>, Err>,\n+    ) -> Result<Allocation<Tag, Extra>, Err> {\n         // Compute new pointer tags, which also adjusts the bytes.\n         let mut bytes = self.bytes;\n         let mut new_relocations = Vec::with_capacity(self.relocations.0.len());\n@@ -260,19 +260,19 @@ impl Allocation {\n             let ptr_bytes = &mut bytes[idx..idx + ptr_size];\n             let bits = read_target_uint(endian, ptr_bytes).unwrap();\n             let (ptr_tag, ptr_offset) =\n-                tagger(Pointer::new(alloc_id, Size::from_bytes(bits))).into_parts();\n+                tagger(Pointer::new(alloc_id, Size::from_bytes(bits)))?.into_parts();\n             write_target_uint(endian, ptr_bytes, ptr_offset.bytes().into()).unwrap();\n             new_relocations.push((offset, ptr_tag));\n         }\n         // Create allocation.\n-        Allocation {\n+        Ok(Allocation {\n             bytes,\n             relocations: Relocations::from_presorted(new_relocations),\n             init_mask: self.init_mask,\n             align: self.align,\n             mutability: self.mutability,\n             extra,\n-        }\n+        })\n     }\n }\n "}, {"sha": "536d45b2399b1e6c554f4126fc34dc15a1512bfe", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -4,8 +4,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use rustc_ast::tokenstream::DelimSpan;\n-use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MacArgs, MetaItemKind, NestedMetaItem};\n+use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_expand::base::resolve_path;\n@@ -899,68 +898,6 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    /// Checks `#[doc(hidden)]` attributes. Returns `true` if valid.\n-    fn check_doc_hidden(\n-        &self,\n-        attr: &Attribute,\n-        meta_index: usize,\n-        meta: &NestedMetaItem,\n-        hir_id: HirId,\n-        target: Target,\n-    ) -> bool {\n-        if let Target::AssocConst\n-        | Target::AssocTy\n-        | Target::Method(MethodKind::Trait { body: true }) = target\n-        {\n-            let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-            let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n-\n-            if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = containing_item.kind {\n-                let meta_items = attr.meta_item_list().unwrap();\n-\n-                let (span, replacement_span) = if meta_items.len() == 1 {\n-                    (attr.span, attr.span)\n-                } else {\n-                    let meta_span = meta.span();\n-                    (\n-                        meta_span,\n-                        meta_span.until(match meta_items.get(meta_index + 1) {\n-                            Some(next_item) => next_item.span(),\n-                            None => match attr.get_normal_item().args {\n-                                MacArgs::Delimited(DelimSpan { close, .. }, ..) => close,\n-                                _ => unreachable!(),\n-                            },\n-                        }),\n-                    )\n-                };\n-\n-                // FIXME: #[doc(hidden)] was previously erroneously allowed on trait impl items,\n-                // so for backward compatibility only emit a warning and do not mark it as invalid.\n-                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, span, |lint| {\n-                    lint.build(\"`#[doc(hidden)]` is ignored on trait impl items\")\n-                        .warn(\n-                            \"this was previously accepted by the compiler but is \\\n-                             being phased out; it will become a hard error in \\\n-                             a future release!\",\n-                        )\n-                        .note(\n-                            \"whether the impl item is `doc(hidden)` or not \\\n-                             entirely depends on the corresponding trait item\",\n-                        )\n-                        .span_suggestion(\n-                            replacement_span,\n-                            \"remove this attribute\",\n-                            \"\",\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n-            }\n-        }\n-\n-        true\n-    }\n-\n     /// Checks that an attribute is *not* used at the crate level. Returns `true` if valid.\n     fn check_attr_not_crate_level(\n         &self,\n@@ -1079,7 +1016,7 @@ impl CheckAttrVisitor<'_> {\n         let mut is_valid = true;\n \n         if let Some(mi) = attr.meta() && let Some(list) = mi.meta_item_list() {\n-            for (meta_index, meta) in list.into_iter().enumerate() {\n+            for meta in list {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n@@ -1127,15 +1064,6 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false;\n                         }\n \n-                        sym::hidden if !self.check_doc_hidden(attr,\n-                            meta_index,\n-                            meta,\n-                            hir_id,\n-                            target,\n-                            ) => {\n-                            is_valid = false;\n-                        }\n-\n                         // no_default_passes: deprecated\n                         // passes: deprecated\n                         // plugins: removed, but rustdoc warns about it itself"}, {"sha": "55574b83607390db97f7152f5a61a56f5859d786", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -846,8 +846,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 //                                      the opaque_ty generics\n                 let opaque_ty = self.tcx.hir().item(item_id);\n                 let (generics, bounds) = match opaque_ty.kind {\n-                    // Named opaque `impl Trait` types are reached via `TyKind::Path`.\n-                    // This arm is for `impl Trait` in the types of statics, constants and locals.\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                         origin: hir::OpaqueTyOrigin::TyAlias,\n                         ..\n@@ -866,7 +864,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n                         return;\n                     }\n-                    // RPIT (return position impl trait)\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                         origin: hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..),\n                         ref generics,"}, {"sha": "d2ef89425304a9ee97290d313c554dacb96958d8", "filename": "src/test/ui/associated-types/issue-47139-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47139-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47139-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47139-2.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-47139-2.rs"}, {"sha": "c36829fdf5b85ecbe404b5aac2ba9bec74ebdb80", "filename": "src/test/ui/cast/issue-10991.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcast%2Fissue-10991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcast%2Fissue-10991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-10991.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-10991.rs"}, {"sha": "5b8a1823386936929c5200ea19a420515be3608e", "filename": "src/test/ui/cast/issue-10991.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcast%2Fissue-10991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcast%2Fissue-10991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-10991.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-10991.stderr"}, {"sha": "8b55f42f3f41bc72782ac35ac69988b094d666bc", "filename": "src/test/ui/codegen/issue-28950.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcodegen%2Fissue-28950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcodegen%2Fissue-28950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-28950.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-28950.rs"}, {"sha": "cba079b2315225d453f813982beb2d1279a26fd1", "filename": "src/test/ui/codegen/issue-63787.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcodegen%2Fissue-63787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fcodegen%2Fissue-63787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-63787.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-63787.rs"}, {"sha": "0a7db62472a9fae5d97636aebfb975849997eba6", "filename": "src/test/ui/const-generics/issues/issue-73727-static-reference-array-const-param.min.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73727-static-reference-array-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73727-static-reference-array-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73727-static-reference-array-const-param.min.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -1,5 +1,5 @@\n error: `&'static [u32]` is forbidden as the type of a const generic parameter\n-  --> $DIR/static-reference-array-const-param.rs:1:15\n+  --> $DIR/issue-73727-static-reference-array-const-param.rs:9:15\n    |\n LL | fn a<const X: &'static [u32]>() {}\n    |               ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr"}, {"sha": "f0d604835cbb6fa3cbf1dc4da8ccbd8a86acc49e", "filename": "src/test/ui/const-generics/issues/issue-73727-static-reference-array-const-param.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73727-static-reference-array-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73727-static-reference-array-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73727-static-reference-array-const-param.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #73727\n+\n+// revisions: full min\n+//[full]check-pass\n+\n+#![cfg_attr(full, feature(adt_const_params))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+\n+fn a<const X: &'static [u32]>() {}\n+//[min]~^ ERROR `&'static [u32]` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    a::<{&[]}>();\n+}"}, {"sha": "7518dc59e599c89ee05a5a4531638f46d7010b94", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs?ref=dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "patch": "@@ -1,6 +0,0 @@\n-fn a<const X: &'static [u32]>() {}\n-//~^ ERROR `&'static [u32]` is forbidden as the type of a const generic parameter\n-\n-fn main() {\n-    a::<{&[]}>();\n-}"}, {"sha": "1be1394dfae98e791a9d43719f0366bebd8ac2a6", "filename": "src/test/ui/deriving/issue-6341.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fderiving%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fderiving%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-6341.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-6341.rs"}, {"sha": "819a20ddbda92a286308b3fbe3a5fe1b6506af4a", "filename": "src/test/ui/imports/issue-24883.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fimports%2Fissue-24883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fimports%2Fissue-24883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-24883.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-24883.rs"}, {"sha": "e775678fc605360e8d06f7ad3b983692884d8632", "filename": "src/test/ui/imports/issue-68103.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fimports%2Fissue-68103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fimports%2Fissue-68103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-68103.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-68103.rs"}, {"sha": "8c0a0f51a2157eeb34f8f17f10ee13af73977b09", "filename": "src/test/ui/inference/issue-72690.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Finference%2Fissue-72690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Finference%2Fissue-72690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-72690.rs"}, {"sha": "9edf14ef291f9e5d3484c9af459574bd9356addd", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-72690.stderr"}, {"sha": "0e54131c24560a6663dd8c7f3c73e27a7c7e818e", "filename": "src/test/ui/lint/issue-35075.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flint%2Fissue-35075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flint%2Fissue-35075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-35075.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-35075.rs"}, {"sha": "08bdaa728583d5ff2435b5063f3f794964678125", "filename": "src/test/ui/lint/issue-35075.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flint%2Fissue-35075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flint%2Fissue-35075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-35075.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-35075.stderr"}, {"sha": "362ad55707a4a37fc2c715880cd6c6f4df191361", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.fixed", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed?ref=dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "patch": "@@ -1,55 +0,0 @@\n-#![feature(inherent_associated_types)]\n-#![allow(dead_code, incomplete_features)]\n-#![crate_type = \"lib\"]\n-#![deny(unused_attributes)]\n-// run-rustfix\n-\n-pub trait Trait {\n-    type It;\n-    const IT: ();\n-    fn it0();\n-    fn it1();\n-    fn it2();\n-}\n-\n-pub struct Implementor;\n-\n-impl Implementor {\n-    #[doc(hidden)] // no error\n-    type Inh = ();\n-\n-    #[doc(hidden)] // no error\n-    const INH: () = ();\n-\n-    #[doc(hidden)] // no error\n-    fn inh() {}\n-}\n-\n-impl Trait for Implementor {\n-    \n-    type It = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    \n-    const IT: () = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(alias = \"aka\")]\n-    fn it0() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(alias = \"this\", )]\n-    fn it1() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc()]\n-    fn it2() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-    //~|  ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-}"}, {"sha": "d493ed6dae2065ba01f36624ac7b70021df6ca7d", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs?ref=dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "patch": "@@ -1,55 +0,0 @@\n-#![feature(inherent_associated_types)]\n-#![allow(dead_code, incomplete_features)]\n-#![crate_type = \"lib\"]\n-#![deny(unused_attributes)]\n-// run-rustfix\n-\n-pub trait Trait {\n-    type It;\n-    const IT: ();\n-    fn it0();\n-    fn it1();\n-    fn it2();\n-}\n-\n-pub struct Implementor;\n-\n-impl Implementor {\n-    #[doc(hidden)] // no error\n-    type Inh = ();\n-\n-    #[doc(hidden)] // no error\n-    const INH: () = ();\n-\n-    #[doc(hidden)] // no error\n-    fn inh() {}\n-}\n-\n-impl Trait for Implementor {\n-    #[doc(hidden)]\n-    type It = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(hidden)]\n-    const IT: () = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(hidden, alias = \"aka\")]\n-    fn it0() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(alias = \"this\", hidden,)]\n-    fn it1() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(hidden, hidden)]\n-    fn it2() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-    //~|  ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-}"}, {"sha": "f167bd460db3edd8ccdb3915eb5dae59a3eee5e3", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.stderr", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc80ca78b6ec2b6bba02560470347433bcd0bb3c/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr?ref=dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "patch": "@@ -1,67 +0,0 @@\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:29:5\n-   |\n-LL |     #[doc(hidden)]\n-   |     ^^^^^^^^^^^^^^ help: remove this attribute\n-   |\n-note: the lint level is defined here\n-  --> $DIR/unused-attr-doc-hidden.rs:4:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:34:5\n-   |\n-LL |     #[doc(hidden)]\n-   |     ^^^^^^^^^^^^^^ help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:39:11\n-   |\n-LL |     #[doc(hidden, alias = \"aka\")]\n-   |           ^^^^^^--\n-   |           |\n-   |           help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:44:27\n-   |\n-LL |     #[doc(alias = \"this\", hidden,)]\n-   |                           ^^^^^^-\n-   |                           |\n-   |                           help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:49:11\n-   |\n-LL |     #[doc(hidden, hidden)]\n-   |           ^^^^^^--\n-   |           |\n-   |           help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:49:19\n-   |\n-LL |     #[doc(hidden, hidden)]\n-   |                   ^^^^^^ help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: aborting due to 6 previous errors\n-"}, {"sha": "8700a88a36ea02908a83ba71ca1067df3ed4b806", "filename": "src/test/ui/lub-glb/empty-binder-future-compat.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binder-future-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binder-future-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binder-future-compat.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+fn lt_in_fn_fn<'a: 'a>() -> fn(fn(&'a ())) {\n+    |_| ()\n+}\n+\n+\n+fn foo<'a, 'b, 'lower>(v: bool)\n+where\n+    'a: 'lower,\n+    'b: 'lower,\n+{\n+        // if we infer `x` to be higher ranked in the future,\n+        // this would cause a type error.\n+        let x = match v {\n+            true => lt_in_fn_fn::<'a>(),\n+            false => lt_in_fn_fn::<'b>(),\n+        };\n+\n+        let _: fn(fn(&'lower())) = x;\n+}\n+\n+fn main() {}"}, {"sha": "557480173ee62478a1c64d6c71a4bca54c5ea8c7", "filename": "src/test/ui/lub-glb/empty-binders-err.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -0,0 +1,55 @@\n+fn lt<'a: 'a>() -> &'a () {\n+    &()\n+}\n+\n+fn lt_in_fn<'a: 'a>() -> fn(&'a ()) {\n+    |_| ()\n+}\n+\n+struct Contra<'a>(fn(&'a ()));\n+fn lt_in_contra<'a: 'a>() -> Contra<'a> {\n+    Contra(|_| ())\n+}\n+\n+fn covariance<'a, 'b, 'upper>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+\n+{\n+    let _: &'upper () = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+        true => lt::<'a>(),\n+        false => lt::<'b>(),\n+    };\n+}\n+\n+fn contra_fn<'a, 'b, 'lower>(v: bool)\n+where\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+\n+    let _: fn(&'lower ()) = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        true => lt_in_fn::<'a>(),\n+        false => lt_in_fn::<'b>(),\n+    };\n+}\n+\n+fn contra_struct<'a, 'b, 'lower>(v: bool)\n+where\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: Contra<'lower> = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        true => lt_in_contra::<'a>(),\n+        false => lt_in_contra::<'b>(),\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "f86f22d5e40bf87a49b1c7b7bc0d6aef6dc74ffd", "filename": "src/test/ui/lub-glb/empty-binders-err.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -0,0 +1,59 @@\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:20:12\n+   |\n+LL | fn covariance<'a, 'b, 'upper>(v: bool)\n+   |               --      ------ lifetime `'upper` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'upper () = match v {\n+   |            ^^^^^^^^^^ type annotation requires that `'a` must outlive `'upper`\n+   |\n+   = help: consider adding the following bound: `'a: 'upper`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:20:12\n+   |\n+LL | fn covariance<'a, 'b, 'upper>(v: bool)\n+   |                   --  ------ lifetime `'upper` defined here\n+   |                   |\n+   |                   lifetime `'b` defined here\n+...\n+LL |     let _: &'upper () = match v {\n+   |            ^^^^^^^^^^ type annotation requires that `'b` must outlive `'upper`\n+   |\n+   = help: consider adding the following bound: `'b: 'upper`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'upper`\n+   = help: add bound `'b: 'upper`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:35:12\n+   |\n+LL | fn contra_fn<'a, 'b, 'lower>(v: bool)\n+   |              --      ------ lifetime `'lower` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |     let _: fn(&'lower ()) = match v {\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'lower` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'lower: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:48:12\n+   |\n+LL | fn contra_struct<'a, 'b, 'lower>(v: bool)\n+   |                  --      ------ lifetime `'lower` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+...\n+LL |     let _: Contra<'lower> = match v {\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'lower` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'lower: 'a`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f9d07e79fdabf6cfae700bc055270fee3cd5bcdc", "filename": "src/test/ui/lub-glb/empty-binders.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -0,0 +1,45 @@\n+// check-pass\n+//\n+// Check that computing the lub works even for empty binders.\n+fn lt<'a: 'a>() -> &'a () {\n+    &()\n+}\n+\n+fn lt_in_fn<'a: 'a>() -> fn(&'a ()) {\n+    |_| ()\n+}\n+\n+struct Contra<'a>(fn(&'a ()));\n+fn lt_in_contra<'a: 'a>() -> Contra<'a> {\n+    Contra(|_| ())\n+}\n+\n+fn ok<'a, 'b, 'upper, 'lower>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: &'lower () = match v {\n+        true => lt::<'a>(),\n+        false => lt::<'b>(),\n+    };\n+\n+    // This errored in the past because LUB and GLB always\n+    // bailed out when encountering binders, even if they were\n+    // empty.\n+    let _: fn(&'upper ()) = match v {\n+        true => lt_in_fn::<'a>(),\n+        false => lt_in_fn::<'b>(),\n+    };\n+\n+    // This was already accepted, as relate didn't encounter any binders.\n+    let _: Contra<'upper> = match v {\n+        true => lt_in_contra::<'a>(),\n+        false => lt_in_contra::<'b>(),\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "faacfe5f8952de82fb24280567f7d08d23896899", "filename": "src/test/ui/macros/issue-8851.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fmacros%2Fissue-8851.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fmacros%2Fissue-8851.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-8851.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-8851.rs"}, {"sha": "2a8b4bb492276f856e8ae2ae1696f5e41a777893", "filename": "src/test/ui/match/issue-46920-byte-array-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fmatch%2Fissue-46920-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fmatch%2Fissue-46920-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-46920-byte-array-patterns.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-46920-byte-array-patterns.rs"}, {"sha": "4109c10e2e46bf6bb9a17a05ca048b65f4b1c641", "filename": "src/test/ui/nll/issue-27282-move-match-input-into-guard.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-move-match-input-into-guard.rs"}, {"sha": "9be1a9279992b813037fe28e38d492df4694d09f", "filename": "src/test/ui/nll/issue-27282-move-match-input-into-guard.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-move-match-input-into-guard.stderr"}, {"sha": "afa0ba780de46e1826d713ab3c981e8ad244d66b", "filename": "src/test/ui/nll/issue-27282-move-ref-mut-into-guard.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.rs"}, {"sha": "a0d32616f83b74f2dad691636171476b1d40cc59", "filename": "src/test/ui/nll/issue-27282-move-ref-mut-into-guard.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.stderr"}, {"sha": "d17d6f07f6870e5835b42d7d3ca3e01b7b141be3", "filename": "src/test/ui/nll/issue-27282-mutate-before-diverging-arm-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-1.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.rs"}, {"sha": "a1f973e0fdf5a292d54ce23bc2b8b52f8d4a71bc", "filename": "src/test/ui/nll/issue-27282-mutate-before-diverging-arm-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-1.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-1.stderr"}, {"sha": "9c3e7e9978ec71100621211e5c95feaf04ceb18c", "filename": "src/test/ui/nll/issue-27282-mutate-before-diverging-arm-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-2.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-mutate-before-diverging-arm-2.rs"}, {"sha": "dd46308d140045cf48328185d283b5d2c4243e6e", "filename": "src/test/ui/nll/issue-27282-mutate-before-diverging-arm-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-2.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-mutate-before-diverging-arm-2.stderr"}, {"sha": "cff9e963e272515a647e995f783dabf842ded4e2", "filename": "src/test/ui/nll/issue-27282-mutate-before-diverging-arm-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-3.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-3.rs"}, {"sha": "4a4a25790b985f516a1a658b86bbb37f31683c77", "filename": "src/test/ui/nll/issue-27282-mutate-before-diverging-arm-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutate-before-diverging-arm-3.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-27282-mutate-before-diverging-arm-3.stderr"}, {"sha": "395c7d214d0ce03b356b6b36b59472ab71e49df6", "filename": "src/test/ui/nll/issue-27282-mutation-in-guard.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-mutation-in-guard.rs"}, {"sha": "c4ce7e62fda82bc24bb45d8b3f90b7afb8f9664b", "filename": "src/test/ui/nll/issue-27282-mutation-in-guard.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-mutation-in-guard.stderr"}, {"sha": "82d8b9e9ed977d9b28f558d4b894a4ecd9bba6aa", "filename": "src/test/ui/nll/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-reborrow-ref-mut-in-guard.rs"}, {"sha": "48433432de1bd7ccccf307f0230a603257778528", "filename": "src/test/ui/nll/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/borrowck/issue-27282-reborrow-ref-mut-in-guard.stderr"}, {"sha": "98f49fe8f5507d8d40a17c635ad4d374d257f825", "filename": "src/test/ui/nll/issue-52057.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-52057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Fnll%2Fissue-52057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52057.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-52057.rs"}, {"sha": "2bdd08575c416e3ff23cb65716f7dec4b395cee7", "filename": "src/test/ui/test-attrs/issue-16597-empty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-16597-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-16597-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-16597-empty.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-16597-empty.rs"}, {"sha": "35769bfc117734ba1de9a55728ae93183ed999a0", "filename": "src/test/ui/test-attrs/issue-16597.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-16597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-16597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Fissue-16597.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-16597.rs"}, {"sha": "16b867ec88f17f8e1d23d991b297060d3752f49c", "filename": "src/test/ui/traits/issue-38033.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftraits%2Fissue-38033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftraits%2Fissue-38033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-38033.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-38033.rs"}, {"sha": "d77ff381e1a09afbb66e56bf8942487403dcff58", "filename": "src/test/ui/typeck/issue-10401.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftypeck%2Fissue-10401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftypeck%2Fissue-10401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-10401.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-10401.rs"}, {"sha": "1f68abcfb43716c2e1d24ff2dd77cd9a94a15ee5", "filename": "src/test/ui/typeck/issue-10401.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftypeck%2Fissue-10401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Ftypeck%2Fissue-10401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-10401.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-10401.stderr"}, {"sha": "f395c30b8155a54554e9d97e871e73c7b6529365", "filename": "src/test/ui/unsafe/issue-3080.mir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.mir.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-3080.mir.stderr"}, {"sha": "2b5269dda8fa6b05ef0b156e46f41bf993f056c7", "filename": "src/test/ui/unsafe/issue-3080.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-3080.rs"}, {"sha": "4d8acac61d9edc4817f5383de8e9ad355da3f388", "filename": "src/test/ui/unsafe/issue-3080.thir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-3080.thir.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-3080.thir.stderr"}, {"sha": "305f482e8c21def2ee306dbe25e310e2bb2d53ad", "filename": "src/test/ui/unsafe/issue-47412.mir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.mir.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-47412.mir.stderr"}, {"sha": "df6d6e4222e8201b4054a4229bafb42281217ab1", "filename": "src/test/ui/unsafe/issue-47412.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-47412.rs"}, {"sha": "305f482e8c21def2ee306dbe25e310e2bb2d53ad", "filename": "src/test/ui/unsafe/issue-47412.thir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-47412.thir.stderr?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "previous_filename": "src/test/ui/issues/issue-47412.thir.stderr"}, {"sha": "8ec5c33249333ba1e2cc755238b1a7d678087bf4", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09c668c965f735f4cd59e7158662b9daa0b71ba/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=a09c668c965f735f4cd59e7158662b9daa0b71ba", "patch": "@@ -8,7 +8,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 968;\n-const ISSUES_ENTRY_LIMIT: usize = 2179;\n+const ISSUES_ENTRY_LIMIT: usize = 2147;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}