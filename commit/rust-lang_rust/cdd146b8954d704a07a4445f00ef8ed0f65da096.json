{"sha": "cdd146b8954d704a07a4445f00ef8ed0f65da096", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDE0NmI4OTU0ZDcwNGEwN2E0NDQ1ZjAwZWY4ZWQwZjY1ZGEwOTY=", "commit": {"author": {"name": "Ben Noordhuis", "email": "info@bnoordhuis.nl", "date": "2014-01-22T21:41:53Z"}, "committer": {"name": "Ben Noordhuis", "email": "info@bnoordhuis.nl", "date": "2014-01-22T22:47:12Z"}, "message": "Add std::os::self_exe_name()", "tree": {"sha": "d91c43bdd22033fb4009c1dd3be4c2d609d53e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91c43bdd22033fb4009c1dd3be4c2d609d53e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd146b8954d704a07a4445f00ef8ed0f65da096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd146b8954d704a07a4445f00ef8ed0f65da096", "html_url": "https://github.com/rust-lang/rust/commit/cdd146b8954d704a07a4445f00ef8ed0f65da096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd146b8954d704a07a4445f00ef8ed0f65da096/comments", "author": {"login": "bnoordhuis", "id": 275871, "node_id": "MDQ6VXNlcjI3NTg3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/275871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnoordhuis", "html_url": "https://github.com/bnoordhuis", "followers_url": "https://api.github.com/users/bnoordhuis/followers", "following_url": "https://api.github.com/users/bnoordhuis/following{/other_user}", "gists_url": "https://api.github.com/users/bnoordhuis/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnoordhuis/subscriptions", "organizations_url": "https://api.github.com/users/bnoordhuis/orgs", "repos_url": "https://api.github.com/users/bnoordhuis/repos", "events_url": "https://api.github.com/users/bnoordhuis/events{/privacy}", "received_events_url": "https://api.github.com/users/bnoordhuis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnoordhuis", "id": 275871, "node_id": "MDQ6VXNlcjI3NTg3MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/275871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnoordhuis", "html_url": "https://github.com/bnoordhuis", "followers_url": "https://api.github.com/users/bnoordhuis/followers", "following_url": "https://api.github.com/users/bnoordhuis/following{/other_user}", "gists_url": "https://api.github.com/users/bnoordhuis/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnoordhuis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnoordhuis/subscriptions", "organizations_url": "https://api.github.com/users/bnoordhuis/orgs", "repos_url": "https://api.github.com/users/bnoordhuis/repos", "events_url": "https://api.github.com/users/bnoordhuis/events{/privacy}", "received_events_url": "https://api.github.com/users/bnoordhuis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fce792249e72a181f2ad52413b25b1db643c371f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fce792249e72a181f2ad52413b25b1db643c371f", "html_url": "https://github.com/rust-lang/rust/commit/fce792249e72a181f2ad52413b25b1db643c371f"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "1b55427fc2dbc57fb5d024fb0b7e0662c73d0996", "filename": "src/libstd/os.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cdd146b8954d704a07a4445f00ef8ed0f65da096/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd146b8954d704a07a4445f00ef8ed0f65da096/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cdd146b8954d704a07a4445f00ef8ed0f65da096", "patch": "@@ -337,9 +337,9 @@ pub fn dll_filename(base: &str) -> ~str {\n     format!(\"{}{}{}\", consts::DLL_PREFIX, base, consts::DLL_SUFFIX)\n }\n \n-/// Optionally returns the filesystem path to the current executable which is\n+/// Optionally returns the filesystem path of the current executable which is\n /// running. If any failure occurs, None is returned.\n-pub fn self_exe_path() -> Option<Path> {\n+pub fn self_exe_name() -> Option<Path> {\n \n     #[cfg(target_os = \"freebsd\")]\n     fn load_self() -> Option<~[u8]> {\n@@ -402,7 +402,14 @@ pub fn self_exe_path() -> Option<Path> {\n         }\n     }\n \n-    load_self().and_then(|path| Path::new_opt(path).map(|mut p| { p.pop(); p }))\n+    load_self().and_then(Path::new_opt)\n+}\n+\n+/// Optionally returns the filesystem path to the current executable which is\n+/// running. Like self_exe_name() but without the binary's name.\n+/// If any failure occurs, None is returned.\n+pub fn self_exe_path() -> Option<Path> {\n+    self_exe_name().map(|mut p| { p.pop(); p })\n }\n \n /**\n@@ -1310,6 +1317,17 @@ mod tests {\n         assert_eq!(getenv(n), option::Some(s));\n     }\n \n+    #[test]\n+    fn test_self_exe_name() {\n+        let path = os::self_exe_name();\n+        assert!(path.is_some());\n+        let path = path.unwrap();\n+        debug!(\"{:?}\", path.clone());\n+\n+        // Hard to test this function\n+        assert!(path.is_absolute());\n+    }\n+\n     #[test]\n     fn test_self_exe_path() {\n         let path = os::self_exe_path();"}]}