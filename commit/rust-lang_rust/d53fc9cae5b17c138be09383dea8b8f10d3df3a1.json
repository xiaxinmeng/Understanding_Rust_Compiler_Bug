{"sha": "d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1M2ZjOWNhZTViMTdjMTM4YmUwOTM4M2RlYThiOGYxMGQzZGYzYTE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-08T18:33:19Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:56Z"}, "message": "Add process_* place hooks to improve code reutilization", "tree": {"sha": "780cfb2de956ea97d599fec8369f42a8b7f8a084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/780cfb2de956ea97d599fec8369f42a8b7f8a084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHkAACgkQiMlBzaHU\nZDJU7Q/9Fg3uKLy50dhepzhSdjQWVF5JQy6dHEFr2Db3KR5oQSdz5ZE9hwRYW6nd\nlxIg1cRxfSy0FZ9Z4+OW5P3BuEn2lvbQddl2TILqVcjoCSEd6NndjyP9nK4DHacJ\nZxdCWlXmgMpKNVcMbqCGayCqii0OdUdQE616QZOREYGrXdmGky6jUygCquGZw4AS\nLhyj7TwvGb069BdL3MxCVQ6kQFaPLTMdBwv9n+r6GcB4SbESQaRN1hk9mQzuDoKy\nvFQsG3wknGJaYWF3pCDGBs5gf4rIuXv8r7LltLx5iC52EVWRiXdVUv0eUXKaJws1\nuX4c5HlzcRoEBW+6dgVHfoAgkzIlTQCiDgnwO9XYQc/+U0vZVQXYIW6dZUBemuWr\nx9jAJWC8a+SvYr4G5JEhGCafjBDsMAuIyXpNwLWQ1ElVHm8njvESgZBKF2RyXcw9\nNYE10FhPQ6UfzoOraqxqpCONHvvWNaAwQMnsKxrPetkwgNwz4DLF5VRK3G+BT7yg\nPBA5x9sckwXb+zG8U4NbnRaGlz6DXdET7u4lfE+yCXC9g+llDx0REuK242CFrbcG\ni13FocbEZvPCKsTHHfoAf5jvFHNpyDKGpSWIuVckMgjX8R6CzXWu6Eq2NVYjaWkd\nL2XOOVlCHxEW2cowXyOvTHuNRvk26SUHEScxdecSWRCEXaLICks=\n=GPvV\n-----END PGP SIGNATURE-----", "payload": "tree 780cfb2de956ea97d599fec8369f42a8b7f8a084\nparent 7fa3425ef675b4bf4177dc2ea232078f4556b4c4\nauthor Santiago Pastorino <spastorino@gmail.com> 1570559599 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364416 -0400\n\nAdd process_* place hooks to improve code reutilization\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "html_url": "https://github.com/rust-lang/rust/commit/d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa3425ef675b4bf4177dc2ea232078f4556b4c4", "html_url": "https://github.com/rust-lang/rust/commit/7fa3425ef675b4bf4177dc2ea232078f4556b4c4"}], "stats": {"total": 179, "additions": 82, "deletions": 97}, "files": [{"sha": "c8a6367899ba90742741e38db74455b1cda2a230", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -786,10 +786,32 @@ macro_rules! visit_place_fns {\n     (mut) => (\n         fn super_place(\n             &mut self,\n-            _place: &mut Place<'tcx>,\n-            _context: PlaceContext,\n-            _location: Location,\n+            place: &mut Place<'tcx>,\n+            context: PlaceContext,\n+            location: Location,\n         ) {\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            place.projection = self.process_projection(&place.projection);\n+        }\n+\n+        fn process_projection(\n+            &mut self,\n+            projection: &Box<[PlaceElem<'tcx>]>,\n+        ) -> Box<[PlaceElem<'tcx>]> {\n+            let new_projection: Vec<_> = projection.iter().map(|elem|\n+                self.process_projection_elem(elem)\n+            ).collect();\n+\n+            new_projection.into_boxed_slice()\n+        }\n+\n+        fn process_projection_elem(\n+            &mut self,\n+            elem: &PlaceElem<'tcx>,\n+        ) -> PlaceElem<'tcx> {\n+            // FIXME: avoid cloning here\n+            elem.clone()\n         }\n     );\n "}, {"sha": "c4a19ce5128b5e2758c8e5cb140985287169f50c", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::mir::{Body, Location, Place, PlaceElem, Promoted};\n-use rustc::mir::visit::{MutVisitor, PlaceContext, TyContext};\n+use rustc::mir::{Body, Location, PlaceElem, Promoted};\n+use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_index::vec::IndexVec;\n \n@@ -62,23 +62,15 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n-    fn visit_place(\n+    fn process_projection_elem(\n         &mut self,\n-        place: &mut Place<'tcx>,\n-        context: PlaceContext,\n-        location: Location,\n-    ) {\n-        self.visit_place_base(&mut place.base, context, location);\n-\n-        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-            if let PlaceElem::Field(field, ty) = elem {\n-                PlaceElem::Field(*field, self.renumber_regions(ty))\n-            } else {\n-                elem.clone()\n-            }\n-        ).collect();\n-\n-        place.projection = new_projection.into_boxed_slice();\n+        elem: &PlaceElem<'tcx>,\n+    ) -> PlaceElem<'tcx> {\n+        if let PlaceElem::Field(field, ty) = elem {\n+            PlaceElem::Field(*field, self.renumber_regions(ty))\n+        } else {\n+            elem.clone()\n+        }\n     }\n \n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {"}, {"sha": "725a8de8fe7d111cf419ad98a87ced88a8963a30", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -7,7 +7,7 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n-use rustc::mir::visit::{MutVisitor, PlaceContext, TyContext};\n+use rustc::mir::visit::{MutVisitor, TyContext};\n use crate::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'tcx> {\n@@ -39,23 +39,15 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n         *substs = self.tcx.erase_regions(substs);\n     }\n \n-    fn visit_place(\n+    fn process_projection_elem(\n         &mut self,\n-        place: &mut Place<'tcx>,\n-        context: PlaceContext,\n-        location: Location,\n-    ) {\n-        self.visit_place_base(&mut place.base, context, location);\n-\n-        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-            if let PlaceElem::Field(field, ty) = elem {\n-                PlaceElem::Field(*field, self.tcx.erase_regions(ty))\n-            } else {\n-                elem.clone()\n-            }\n-        ).collect();\n-\n-        place.projection = new_projection.into_boxed_slice();\n+        elem: &PlaceElem<'tcx>,\n+    ) -> PlaceElem<'tcx> {\n+        if let PlaceElem::Field(field, ty) = elem {\n+            PlaceElem::Field(*field, self.tcx.erase_regions(ty))\n+        } else {\n+            elem.clone()\n+        }\n     }\n }\n "}, {"sha": "dd13d0c96557d62ee0dd9e8756a45cefb273aeec", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -695,21 +695,22 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 *place = self.destination.clone();\n             },\n             _ => {\n-                self.visit_place_base(&mut place.base, context, location);\n-\n-                let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-                    if let PlaceElem::Index(local) = elem {\n-                        PlaceElem::Index(self.make_integrate_local(local))\n-                    } else {\n-                        elem.clone()\n-                    }\n-                ).collect();\n-\n-                place.projection = new_projection.into_boxed_slice();\n+                self.super_place(place, context, location);\n             }\n         }\n     }\n \n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> PlaceElem<'tcx> {\n+        if let PlaceElem::Index(local) = elem {\n+            PlaceElem::Index(self.make_integrate_local(local))\n+        } else {\n+            elem.clone()\n+        }\n+    }\n+\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.in_cleanup_block = data.is_cleanup;\n         self.super_basic_block_data(block, data);"}, {"sha": "565f260546bc73dc43b6edbf3fc8978abb3c6af7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -405,24 +405,16 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_place(\n+    fn process_projection_elem(\n         &mut self,\n-        place: &mut Place<'tcx>,\n-        context: PlaceContext,\n-        location: Location,\n-    ) {\n-        self.visit_place_base(&mut place.base, context, location);\n-\n-        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-            match elem {\n-                PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n-                    PlaceElem::Index(self.promote_temp(*local))\n-                }\n-                _ => elem.clone(),\n+        elem: &PlaceElem<'tcx>,\n+    ) -> PlaceElem<'tcx> {\n+        match elem {\n+            PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n+                PlaceElem::Index(self.promote_temp(*local))\n             }\n-        ).collect();\n-\n-        place.projection = new_projection.into_boxed_slice();\n+            _ => elem.clone(),\n+        }\n     }\n }\n "}, {"sha": "7dca3e357cc94676c61e98bd665d4d852bc28e80", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -371,22 +371,14 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n         *l = self.map[*l].unwrap();\n     }\n \n-    fn visit_place(\n+    fn process_projection_elem(\n         &mut self,\n-        place: &mut Place<'tcx>,\n-        context: PlaceContext,\n-        location: Location,\n-    ) {\n-        self.visit_place_base(&mut place.base, context, location);\n-\n-        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-            if let PlaceElem::Index(local) = elem {\n-                PlaceElem::Index(self.map[*local].unwrap())\n-            } else {\n-                elem.clone()\n-            }\n-        ).collect();\n-\n-        place.projection = new_projection.into_boxed_slice();\n+        elem: &PlaceElem<'tcx>,\n+    ) -> PlaceElem<'tcx> {\n+        if let PlaceElem::Index(local) = elem {\n+            PlaceElem::Index(self.map[*local].unwrap())\n+        } else {\n+            elem.clone()\n+        }\n     }\n }"}, {"sha": "25930df020aa91de54c82bf3e516f53161c45bca", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53fc9cae5b17c138be09383dea8b8f10d3df3a1/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "patch": "@@ -1,6 +1,6 @@\n //! Def-use analysis.\n \n-use rustc::mir::{Body, Local, Location, Place, PlaceElem};\n+use rustc::mir::{Body, Local, Location, PlaceElem};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc_index::vec::IndexVec;\n use std::mem;\n@@ -138,21 +138,15 @@ impl MutVisitor<'_> for MutateUseVisitor {\n         }\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    context: PlaceContext,\n-                    location: Location) {\n-        self.visit_place_base(&mut place.base, context, location);\n-\n-        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-            match elem {\n-                PlaceElem::Index(local) if *local == self.query => {\n-                    PlaceElem::Index(self.new_local)\n-                }\n-                _ => elem.clone(),\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> PlaceElem<'tcx> {\n+        match elem {\n+            PlaceElem::Index(local) if *local == self.query => {\n+                PlaceElem::Index(self.new_local)\n             }\n-        ).collect();\n-\n-        place.projection = new_projection.into_boxed_slice();\n+            _ => elem.clone(),\n+        }\n     }\n }"}]}