{"sha": "4c63a2145c171bdf498c56f0c923baa7c135bb20", "node_id": "C_kwDOAAsO6NoAKDRjNjNhMjE0NWMxNzFiZGY0OThjNTZmMGM5MjNiYWE3YzEzNWJiMjA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-28T09:56:18Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:22Z"}, "message": "lint: port non-shorthand pattern diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "15445e4dc4504326baebcf1d9ed0488225e98011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15445e4dc4504326baebcf1d9ed0488225e98011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c63a2145c171bdf498c56f0c923baa7c135bb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c63a2145c171bdf498c56f0c923baa7c135bb20", "html_url": "https://github.com/rust-lang/rust/commit/4c63a2145c171bdf498c56f0c923baa7c135bb20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c63a2145c171bdf498c56f0c923baa7c135bb20/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d433c9a4464110134d749f22163b1b3f108f2614", "url": "https://api.github.com/repos/rust-lang/rust/commits/d433c9a4464110134d749f22163b1b3f108f2614", "html_url": "https://github.com/rust-lang/rust/commit/d433c9a4464110134d749f22163b1b3f108f2614"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "a549c9fd98af020c4b476d408d9ed36be03c478b", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c63a2145c171bdf498c56f0c923baa7c135bb20/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4c63a2145c171bdf498c56f0c923baa7c135bb20/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=4c63a2145c171bdf498c56f0c923baa7c135bb20", "patch": "@@ -291,3 +291,6 @@ lint-builtin-while-true = denote infinite loops with `loop {\"{\"} ... {\"}\"}`\n     .suggestion = use `loop`\n \n lint-builtin-box-pointers = type uses owned (Box type) pointers: {$ty}\n+\n+lint-builtin-non-shorthand-field-patterns = the `{$ident}:` in this pattern is redundant\n+    .suggestion = use shorthand field pattern"}, {"sha": "ed51a446c5a6439411e53bc420c5f2ab4da3123f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c63a2145c171bdf498c56f0c923baa7c135bb20/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c63a2145c171bdf498c56f0c923baa7c135bb20/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4c63a2145c171bdf498c56f0c923baa7c135bb20", "patch": "@@ -256,26 +256,26 @@ impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {\n                         == Some(cx.tcx.field_index(fieldpat.hir_id, cx.typeck_results()))\n                     {\n                         cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS, fieldpat.span, |lint| {\n-                            let mut err = lint\n-                                .build(&format!(\"the `{}:` in this pattern is redundant\", ident));\n                             let binding = match binding_annot {\n                                 hir::BindingAnnotation::Unannotated => None,\n                                 hir::BindingAnnotation::Mutable => Some(\"mut\"),\n                                 hir::BindingAnnotation::Ref => Some(\"ref\"),\n                                 hir::BindingAnnotation::RefMut => Some(\"ref mut\"),\n                             };\n-                            let ident = if let Some(binding) = binding {\n+                            let suggested_ident = if let Some(binding) = binding {\n                                 format!(\"{} {}\", binding, ident)\n                             } else {\n                                 ident.to_string()\n                             };\n-                            err.span_suggestion(\n-                                fieldpat.span,\n-                                \"use shorthand field pattern\",\n-                                ident,\n-                                Applicability::MachineApplicable,\n-                            );\n-                            err.emit();\n+                            lint.build(fluent::lint::builtin_non_shorthand_field_patterns)\n+                                .set_arg(\"ident\", ident.clone())\n+                                .span_suggestion(\n+                                    fieldpat.span,\n+                                    fluent::lint::suggestion,\n+                                    suggested_ident,\n+                                    Applicability::MachineApplicable,\n+                                )\n+                                .emit();\n                         });\n                     }\n                 }"}]}