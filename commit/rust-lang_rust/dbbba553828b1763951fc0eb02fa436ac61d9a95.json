{"sha": "dbbba553828b1763951fc0eb02fa436ac61d9a95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYmJhNTUzODI4YjE3NjM5NTFmYzBlYjAyZmE0MzZhYzYxZDlhOTU=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-22T23:47:25Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "Rework the exit failure and success declaration for wasm32", "tree": {"sha": "ad72957f2499676126569f300aab23e40fd38c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad72957f2499676126569f300aab23e40fd38c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbbba553828b1763951fc0eb02fa436ac61d9a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbba553828b1763951fc0eb02fa436ac61d9a95", "html_url": "https://github.com/rust-lang/rust/commit/dbbba553828b1763951fc0eb02fa436ac61d9a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbbba553828b1763951fc0eb02fa436ac61d9a95/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f972f529b2e17e7b6b8ed4a4b4a6ad29917acfce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f972f529b2e17e7b6b8ed4a4b4a6ad29917acfce", "html_url": "https://github.com/rust-lang/rust/commit/f972f529b2e17e7b6b8ed4a4b4a6ad29917acfce"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "61137ba4922996ee10880c7dbf8df35c37e1c76a", "filename": "src/libstd/termination.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbbba553828b1763951fc0eb02fa436ac61d9a95/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbba553828b1763951fc0eb02fa436ac61d9a95/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=dbbba553828b1763951fc0eb02fa436ac61d9a95", "patch": "@@ -9,7 +9,17 @@\n // except according to those terms.\n \n use error::Error;\n-use libc;\n+#[cfg(target_arch = \"wasm32\")]\n+mod exit {\n+    pub const SUCCESS: i32 = 0;\n+    pub const FAILURE: i32 = 1;\n+}\n+#[cfg(not(target_arch = \"wasm32\"))]\n+mod exit {\n+    use libc;\n+    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n+    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n+}\n \n /// A trait for implementing arbitrary return types in the `main` function.\n ///\n@@ -31,7 +41,7 @@ pub trait Termination {\n \n #[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl Termination for () {\n-    fn report(self) -> i32 { libc::EXIT_SUCCESS }\n+    fn report(self) -> i32 { exit::SUCCESS }\n }\n \n #[unstable(feature = \"termination_trait\", issue = \"43301\")]\n@@ -41,7 +51,7 @@ impl<T: Termination, E: Error> Termination for Result<T, E> {\n             Ok(val) => val.report(),\n             Err(err) => {\n                 print_error(err);\n-                libc::EXIT_FAILURE\n+                exit::FAILURE\n             }\n         }\n     }\n@@ -64,7 +74,7 @@ impl Termination for ! {\n #[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl Termination for bool {\n     fn report(self) -> i32 {\n-        if self { libc::EXIT_SUCCESS } else { libc::EXIT_FAILURE }\n+        if self { exit::SUCCESS } else { exit::FAILURE }\n     }\n }\n "}]}