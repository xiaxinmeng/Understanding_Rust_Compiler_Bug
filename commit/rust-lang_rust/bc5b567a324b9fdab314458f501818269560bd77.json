{"sha": "bc5b567a324b9fdab314458f501818269560bd77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNWI1NjdhMzI0YjlmZGFiMzE0NDU4ZjUwMTgxODI2OTU2MGJkNzc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-23T14:39:03Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-22T19:01:21Z"}, "message": "move our check to reuse a previous computation", "tree": {"sha": "d606129223dad7697b490f20cab2514312cb17bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d606129223dad7697b490f20cab2514312cb17bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc5b567a324b9fdab314458f501818269560bd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5b567a324b9fdab314458f501818269560bd77", "html_url": "https://github.com/rust-lang/rust/commit/bc5b567a324b9fdab314458f501818269560bd77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc5b567a324b9fdab314458f501818269560bd77/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33c10eae904a69422b47501444fc319185cc5158", "url": "https://api.github.com/repos/rust-lang/rust/commits/33c10eae904a69422b47501444fc319185cc5158", "html_url": "https://github.com/rust-lang/rust/commit/33c10eae904a69422b47501444fc319185cc5158"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "709fceb492509e9c88cddac93057e6d66d32c55c", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bc5b567a324b9fdab314458f501818269560bd77/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5b567a324b9fdab314458f501818269560bd77/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=bc5b567a324b9fdab314458f501818269560bd77", "patch": "@@ -463,8 +463,28 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     return;\n                 }\n \n+                let extra_args = &args[sig.inputs().len()..];\n+                let extra_args = extra_args.iter().map(|op_arg| {\n+                    let op_ty = op_arg.ty(self.mir, bx.tcx());\n+                    self.monomorphize(&op_ty)\n+                }).collect::<Vec<_>>();\n+\n+                let fn_ty = match def {\n+                    Some(ty::InstanceDef::Virtual(..)) => {\n+                        FnType::new_vtable(bx.cx, sig, &extra_args)\n+                    }\n+                    Some(ty::InstanceDef::DropGlue(_, None)) => {\n+                        // empty drop glue - a nop.\n+                        let &(_, target) = destination.as_ref().unwrap();\n+                        funclet_br(self, bx, target);\n+                        return;\n+                    }\n+                    _ => FnType::new(bx.cx, sig, &extra_args)\n+                };\n+\n+                // emit a panic instead of instantiating an uninhabited type\n                 if (intrinsic == Some(\"init\") || intrinsic == Some(\"uninit\")) &&\n-                    bx.cx.layout_of(sig.output()).abi.is_uninhabited()\n+                    fn_ty.ret.layout.abi.is_uninhabited()\n                 {\n                     let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n                     let filename = Symbol::intern(&loc.file.name.to_string()).as_str();\n@@ -510,25 +530,6 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     return;\n                 }\n \n-                let extra_args = &args[sig.inputs().len()..];\n-                let extra_args = extra_args.iter().map(|op_arg| {\n-                    let op_ty = op_arg.ty(self.mir, bx.tcx());\n-                    self.monomorphize(&op_ty)\n-                }).collect::<Vec<_>>();\n-\n-                let fn_ty = match def {\n-                    Some(ty::InstanceDef::Virtual(..)) => {\n-                        FnType::new_vtable(bx.cx, sig, &extra_args)\n-                    }\n-                    Some(ty::InstanceDef::DropGlue(_, None)) => {\n-                        // empty drop glue - a nop.\n-                        let &(_, target) = destination.as_ref().unwrap();\n-                        funclet_br(self, bx, target);\n-                        return;\n-                    }\n-                    _ => FnType::new(bx.cx, sig, &extra_args)\n-                };\n-\n                 // The arguments we'll be passing. Plus one to account for outptr, if used.\n                 let arg_count = fn_ty.args.len() + fn_ty.ret.is_indirect() as usize;\n                 let mut llargs = Vec::with_capacity(arg_count);"}]}