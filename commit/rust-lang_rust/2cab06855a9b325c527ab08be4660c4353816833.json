{"sha": "2cab06855a9b325c527ab08be4660c4353816833", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYWIwNjg1NWE5YjMyNWM1MjdhYjA4YmU0NjYwYzQzNTM4MTY4MzM=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-01-29T23:13:18Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-01-29T23:15:59Z"}, "message": "Reworded to avoid fuzziness, mention ! in c_void docs.", "tree": {"sha": "3d06af1a88eb767d7a518cbf3765072eff150f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d06af1a88eb767d7a518cbf3765072eff150f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cab06855a9b325c527ab08be4660c4353816833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cab06855a9b325c527ab08be4660c4353816833", "html_url": "https://github.com/rust-lang/rust/commit/2cab06855a9b325c527ab08be4660c4353816833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cab06855a9b325c527ab08be4660c4353816833/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/853fa5873c91ad1d01e69e7cbdb758001a31e9c1", "html_url": "https://github.com/rust-lang/rust/commit/853fa5873c91ad1d01e69e7cbdb758001a31e9c1"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "9a55767d965a658108062d721b39718978d4c5f3", "filename": "src/libstd/os/raw/char.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fchar.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `char` type.\n \n-[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. In practice, this type will always be either [`i8`] or [`u8`], but you're technically not supposed to rely on this behaviour, as the standard only defines a char as being at least eight bits long.\n+[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. This type will always be either [`i8`] or [`u8`], as the type is defined as being one byte long.\n \n C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n "}, {"sha": "6818dada317938d121b63059341104f46ccd372d", "filename": "src/libstd/os/raw/double.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fdouble.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,7 @@\n Equivalent to C's `double` type.\n \n-This type will almost always be [`f64`], however, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`].\n+This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n \n+[IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n [`float`]: type.c_float.html\n [`f64`]: ../../primitive.f64.html"}, {"sha": "57d1071d0da1787522b57a635df16ffa35fbe139", "filename": "src/libstd/os/raw/float.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Ffloat.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,5 +1,6 @@\n Equivalent to C's `float` type.\n \n-This type will almost always be [`f32`], however, the standard technically only guarantees that it be a floating-point number.\n+This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n \n+[IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n [`f32`]: ../../primitive.f32.html"}, {"sha": "a0d25fd21d89f490347f7366ec53b330969534ab", "filename": "src/libstd/os/raw/int.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fint.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,7 @@\n Equivalent to C's `signed int` (`int`) type.\n \n-This type will almost always be [`i32`], however, the standard technically only requires that it be at least the size of a [`short`].\n+This type will almost always be [`i32`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a [`short`]; some systems define it as an [`i16`], for example.\n \n [`short`]: type.c_short.html\n [`i32`]: ../../primitive.i32.html\n+[`i16`]: ../../primitive.i16.html"}, {"sha": "c620b402819fddfe2cf31863bebb3bdf28ceff1d", "filename": "src/libstd/os/raw/long.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flong.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `signed long` (`long`) type.\n \n-This type will usually be [`i64`], but is sometimes [`i32`]. Technically, the standard only requires that it be at least 32 bits, or at least the size of an [`int`].\n+This type will always be [`i32`] or [`i64`]. Most notably, many Linux-based systems assume an `i64`, but Windows assumes `i32`. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an [`int`], although in practice, no system would have a `long` that is neither an `i32` nor `i64`.\n \n [`int`]: type.c_int.html\n [`i32`]: ../../primitive.i32.html"}, {"sha": "ab3d6436568dfc20484d1ea935b1e2fbee2519e9", "filename": "src/libstd/os/raw/longlong.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flonglong.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,7 @@\n Equivalent to C's `signed long long` (`long long`) type.\n \n-This type will almost always be [`i64`], however, the standard technically only requires that it be at least 64 bits, or at least the size of an [`long`].\n+This type will almost always be [`i64`], but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a [`long`], although in practice, no system would have a `long long` that is not an `i64`, as most systems do not have a standardised [`i128`] type.\n \n [`long`]: type.c_int.html\n [`i64`]: ../../primitive.i64.html\n+[`i128`]: ../../primitive.i128.html"}, {"sha": "d5eeb5252f0f155a59589fd4c099075d14fda114", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -83,6 +83,10 @@ use fmt;\n /// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n /// *not* the same as C's `void` return type, which is Rust's `()` type.\n ///\n+/// Ideally, this type would be equivalent to [`!`], but currently it may\n+/// be more ideal to use `c_void` for FFI purposes.\n+///\n+/// [`!`]: ../../primitive.never.html\n /// [pointer]: ../../primitive.pointer.html\n // NB: For LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in"}, {"sha": "6aa8b1211d808d82b003cec6194fb8675ab58de6", "filename": "src/libstd/os/raw/schar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fschar.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `signed char` type.\n \n-This type will almost always be [`i8`], but its size is technically equal to the size of a C [`char`], which isn't very clear-cut.\n+This type will always be [`i8`], but is included for completeness. It is defined as being a signed integer the same size as a C [`char`].\n \n [`char`]: type.c_char.html\n [`i8`]: ../../primitive.i8.html"}, {"sha": "be92c6c106d598534a0f8bed771656a2f5aae5ce", "filename": "src/libstd/os/raw/short.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fshort.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `signed short` (`short`) type.\n \n-This type will almost always be [`i16`], however, the standard technically only requires that it be at least 16 bits, or at least the size of a C [`char`].\n+This type will almost always be [`i16`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as `i32`, for example.\n \n [`char`]: type.c_char.html\n [`i16`]: ../../primitive.i16.html"}, {"sha": "b6ca711f869347a2b1ab44f8542c946eaf72db63", "filename": "src/libstd/os/raw/uchar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuchar.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `unsigned char` type.\n \n-This type will almost always be [`u8`], but its size is technically equal to the size of a C [`char`], which isn't very clear-cut.\n+This type will always be [`u8`], but is included for completeness. It is defined as being an unsigned integer the same size as a C [`char`].\n \n [`char`]: type.c_char.html\n [`u8`]: ../../primitive.u8.html"}, {"sha": "1e710f804c4450f233df5454adb23c2809927f0a", "filename": "src/libstd/os/raw/uint.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuint.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,7 @@\n Equivalent to C's `unsigned int` type.\n \n-This type will almost always be [`u32`], however, the standard technically on requires that it be the same size as an [`int`], which isn't very clear-cut.\n+This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an [`int`]; some systems define it as a [`u16`], for example.\n \n [`int`]: type.c_int.html\n [`u32`]: ../../primitive.u32.html\n+[`u16`]: ../../primitive.u16.html"}, {"sha": "c350395080e80f429aa1ec71b42235ef9be87b64", "filename": "src/libstd/os/raw/ulong.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulong.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `unsigned long` type.\n \n-This type will usually be [`u64`], but is sometimes [`u32`]. Technically, the standard only requires that it be the same size as a [`long`], which isn't very clear-cut.\n+This type will always be [`u32`] or [`u64`]. Most notably, many Linux-based systems assume an `u64`, but Windows assumes `u32`. The C standard technically only requires that this type be an unsigned integer with the size of a [`long`], although in practice, no system would have a `ulong` that is neither a `u32` nor `u64`.\n \n [`long`]: type.c_long.html\n [`u32`]: ../../primitive.u32.html"}, {"sha": "c41faf74c5c68243f1d84f220e021b3d231008e5", "filename": "src/libstd/os/raw/ulonglong.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,7 @@\n Equivalent to C's `unsigned long long` type.\n \n-This type will almost always be [`u64`], however, the standard technically only requires that it be the same size as a [`long long`], which isn't very clear-cut.\n+This type will almost always be [`u64`], but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a [`long long`], although in practice, no system would have a `long long` that is not a `u64`, as most systems do not have a standardised [`u128`] type.\n \n [`long long`]: type.c_longlong.html\n [`u64`]: ../../primitive.u64.html\n+[`u128`]: ../../primitive.u128.html"}, {"sha": "d364abb3c8e0c501237e0b5363ee1482653c8992", "filename": "src/libstd/os/raw/ushort.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cab06855a9b325c527ab08be4660c4353816833/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fushort.md?ref=2cab06855a9b325c527ab08be4660c4353816833", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `unsigned short` type.\n \n-This type will almost always be [`u16`], however, the standard technically only requires that it be the same size as a [`short`], which isn't very clear-cut.\n+This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a [`short`].\n \n [`short`]: type.c_short.html\n [`u16`]: ../../primitive.u16.html"}]}