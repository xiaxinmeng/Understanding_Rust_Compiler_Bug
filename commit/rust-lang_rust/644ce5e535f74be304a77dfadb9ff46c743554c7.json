{"sha": "644ce5e535f74be304a77dfadb9ff46c743554c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NGNlNWU1MzVmNzRiZTMwNGE3N2RmYWRiOWZmNDZjNzQzNTU0Yzc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-11T13:26:22Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-11T13:26:22Z"}, "message": "Address PR reviews", "tree": {"sha": "d00077c7ca7462f6162d2d008ba26a6c5721cae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00077c7ca7462f6162d2d008ba26a6c5721cae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644ce5e535f74be304a77dfadb9ff46c743554c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644ce5e535f74be304a77dfadb9ff46c743554c7", "html_url": "https://github.com/rust-lang/rust/commit/644ce5e535f74be304a77dfadb9ff46c743554c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644ce5e535f74be304a77dfadb9ff46c743554c7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f859f2585b0167dfd9ef22d88d992ba6fe55e158", "url": "https://api.github.com/repos/rust-lang/rust/commits/f859f2585b0167dfd9ef22d88d992ba6fe55e158", "html_url": "https://github.com/rust-lang/rust/commit/f859f2585b0167dfd9ef22d88d992ba6fe55e158"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "861880aa265ec140a1072f8b25a12bc211c827e6", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=644ce5e535f74be304a77dfadb9ff46c743554c7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use CodeSuggestion;\n+use Substitution;\n use Level;\n use RenderSpan;\n use std::fmt;\n@@ -205,15 +206,21 @@ impl Diagnostic {\n     /// See `diagnostic::CodeSuggestion` for more information.\n     pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n-            substitutes: vec![(sp, vec![suggestion])],\n+            substitution_parts: vec![Substitution {\n+                span: sp,\n+                substitutions: vec![suggestion],\n+            }],\n             msg: msg.to_owned(),\n         });\n         self\n     }\n \n     pub fn span_suggestions(&mut self, sp: Span, msg: &str, suggestions: Vec<String>) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n-            substitutes: vec![(sp, suggestions)],\n+            substitution_parts: vec![Substitution {\n+                span: sp,\n+                substitutions: suggestions,\n+            }],\n             msg: msg.to_owned(),\n         });\n         self"}, {"sha": "d1ec1be47b8ab85f5459b1fd98441801f3c0d04e", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=644ce5e535f74be304a77dfadb9ff46c743554c7", "patch": "@@ -35,38 +35,32 @@ impl Emitter for EmitterWriter {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n \n-        if db.suggestions.len() == 1 {\n-            let sugg = &db.suggestions[0];\n-            // don't display multispans as labels\n-            if sugg.substitutes.len() == 1 &&\n+        if let Some((sugg, rest)) = db.suggestions.split_first() {\n+            if rest.is_empty() &&\n+               // don't display multipart suggestions as labels\n+               sugg.substitution_parts.len() == 1 &&\n                // don't display multi-suggestions as labels\n-               sugg.substitutes[0].1.len() == 1 &&\n+               sugg.substitutions() == 1 &&\n                // don't display long messages as labels\n                sugg.msg.split_whitespace().count() < 10 &&\n                // don't display multiline suggestions as labels\n-               sugg.substitutes[0].1[0].find('\\n').is_none() {\n-                let msg = format!(\"help: {} `{}`\", sugg.msg, sugg.substitutes[0].1[0]);\n-                primary_span.push_span_label(sugg.substitutes[0].0, msg);\n+               sugg.substitution_parts[0].substitutions[0].find('\\n').is_none() {\n+                let substitution = &sugg.substitution_parts[0].substitutions[0];\n+                let msg = format!(\"help: {} `{}`\", sugg.msg, substitution);\n+                primary_span.push_span_label(sugg.substitution_spans().next().unwrap(), msg);\n             } else {\n-                children.push(SubDiagnostic {\n-                    level: Level::Help,\n-                    message: Vec::new(),\n-                    span: MultiSpan::new(),\n-                    render_span: Some(Suggestion(sugg.clone())),\n-                });\n-            }\n-        } else {\n-            // if there are multiple suggestions, print them all in full\n-            // to be consistent. We could try to figure out if we can\n-            // make one (or the first one) inline, but that would give\n-            // undue importance to a semi-random suggestion\n-            for sugg in &db.suggestions {\n-                children.push(SubDiagnostic {\n-                    level: Level::Help,\n-                    message: Vec::new(),\n-                    span: MultiSpan::new(),\n-                    render_span: Some(Suggestion(sugg.clone())),\n-                });\n+                // if there are multiple suggestions, print them all in full\n+                // to be consistent. We could try to figure out if we can\n+                // make one (or the first one) inline, but that would give\n+                // undue importance to a semi-random suggestion\n+                for sugg in &db.suggestions {\n+                    children.push(SubDiagnostic {\n+                        level: Level::Help,\n+                        message: Vec::new(),\n+                        span: MultiSpan::new(),\n+                        render_span: Some(Suggestion(sugg.clone())),\n+                    });\n+                }\n             }\n         }\n \n@@ -1073,7 +1067,7 @@ impl EmitterWriter {\n                                -> io::Result<()> {\n         use std::borrow::Borrow;\n \n-        let primary_span = suggestion.substitutes[0].0;\n+        let primary_span = suggestion.substitution_spans().next().unwrap();\n         if let Some(ref cm) = self.cm {\n             let mut buffer = StyledBuffer::new();\n "}, {"sha": "e1ec23479ab8a7ef84249db60c626b04a116787c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=644ce5e535f74be304a77dfadb9ff46c743554c7", "patch": "@@ -23,6 +23,7 @@\n #![feature(staged_api)]\n #![feature(range_contains)]\n #![feature(libc)]\n+#![feature(conservative_impl_trait)]\n \n extern crate term;\n extern crate libc;\n@@ -83,10 +84,17 @@ pub struct CodeSuggestion {\n     /// ```\n     /// vec![(0..7, vec![\"a.b\", \"x.y\"])]\n     /// ```\n-    pub substitutes: Vec<(Span, Vec<String>)>,\n+    pub substitution_parts: Vec<Substitution>,\n     pub msg: String,\n }\n \n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+/// See the docs on `CodeSuggestion::substitutions`\n+pub struct Substitution {\n+    pub span: Span,\n+    pub substitutions: Vec<String>,\n+}\n+\n pub trait CodeMapper {\n     fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n     fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n@@ -96,6 +104,16 @@ pub trait CodeMapper {\n }\n \n impl CodeSuggestion {\n+    /// Returns the number of substitutions\n+    fn substitutions(&self) -> usize {\n+        self.substitution_parts[0].substitutions.len()\n+    }\n+\n+    /// Returns the number of substitutions\n+    pub fn substitution_spans<'a>(&'a self) -> impl Iterator<Item = Span> + 'a {\n+        self.substitution_parts.iter().map(|sub| sub.span)\n+    }\n+\n     /// Returns the assembled code suggestions.\n     pub fn splice_lines(&self, cm: &CodeMapper) -> Vec<String> {\n         use syntax_pos::{CharPos, Loc, Pos};\n@@ -119,13 +137,13 @@ impl CodeSuggestion {\n             }\n         }\n \n-        if self.substitutes.is_empty() {\n+        if self.substitution_parts.is_empty() {\n             return vec![String::new()];\n         }\n \n-        let mut primary_spans: Vec<_> = self.substitutes\n+        let mut primary_spans: Vec<_> = self.substitution_parts\n             .iter()\n-            .map(|&(sp, ref sub)| (sp, sub))\n+            .map(|sub| (sub.span, &sub.substitutions))\n             .collect();\n \n         // Assumption: all spans are in the same file, and all spans\n@@ -157,7 +175,7 @@ impl CodeSuggestion {\n         prev_hi.col = CharPos::from_usize(0);\n \n         let mut prev_line = fm.get_line(lines.lines[0].line_index);\n-        let mut bufs = vec![String::new(); self.substitutes[0].1.len()];\n+        let mut bufs = vec![String::new(); self.substitutions()];\n \n         for (sp, substitutes) in primary_spans {\n             let cur_lo = cm.lookup_char_pos(sp.lo);"}, {"sha": "06335584c96108571e0136a1ba84a052270820e9", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644ce5e535f74be304a77dfadb9ff46c743554c7/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=644ce5e535f74be304a77dfadb9ff46c743554c7", "patch": "@@ -279,12 +279,12 @@ impl DiagnosticSpan {\n \n     fn from_suggestion(suggestion: &CodeSuggestion, je: &JsonEmitter)\n                        -> Vec<DiagnosticSpan> {\n-        suggestion.substitutes\n+        suggestion.substitution_parts\n                       .iter()\n-                      .flat_map(|&(span, ref suggestion)| {\n-                          suggestion.iter().map(move |suggestion| {\n+                      .flat_map(|substitution| {\n+                          substitution.substitutions.iter().map(move |suggestion| {\n                               let span_label = SpanLabel {\n-                                  span,\n+                                  span: substitution.span,\n                                   is_primary: true,\n                                   label: None,\n                               };\n@@ -301,7 +301,7 @@ impl DiagnosticSpan {\n             RenderSpan::FullSpan(ref msp) =>\n                 DiagnosticSpan::from_multispan(msp, je),\n             // regular diagnostics don't produce this anymore\n-            // will be removed in a later commit\n+            // FIXME(oli_obk): remove it entirely\n             RenderSpan::Suggestion(_) => unreachable!(),\n         }\n     }"}]}