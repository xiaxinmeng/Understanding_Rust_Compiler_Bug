{"sha": "c1a138cdd923a82866c590c78c9a338844f1405d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTEzOGNkZDkyM2E4Mjg2NmM1OTBjNzhjOWEzMzg4NDRmMTQwNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-15T12:57:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-15T12:57:30Z"}, "message": "Auto merge of #5316 - lzutao:osstr, r=phansch\n\nDon't convert Path to lossy str\n\nchangelog: none", "tree": {"sha": "98799f929bf73d331f77ee47997b0f72b4809fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98799f929bf73d331f77ee47997b0f72b4809fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a138cdd923a82866c590c78c9a338844f1405d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a138cdd923a82866c590c78c9a338844f1405d", "html_url": "https://github.com/rust-lang/rust/commit/c1a138cdd923a82866c590c78c9a338844f1405d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a138cdd923a82866c590c78c9a338844f1405d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd7e31d1b9acfa707ac4e56c07b0276826a8d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd7e31d1b9acfa707ac4e56c07b0276826a8d5b", "html_url": "https://github.com/rust-lang/rust/commit/8fd7e31d1b9acfa707ac4e56c07b0276826a8d5b"}, {"sha": "9febcf5e8d4f29b12e5c5d77da174d0a3d21008b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9febcf5e8d4f29b12e5c5d77da174d0a3d21008b", "html_url": "https://github.com/rust-lang/rust/commit/9febcf5e8d4f29b12e5c5d77da174d0a3d21008b"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "4f373e034bc204d650f367ea90b111887b67cad3", "filename": "tests/integration.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1a138cdd923a82866c590c78c9a338844f1405d/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a138cdd923a82866c590c78c9a338844f1405d/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=c1a138cdd923a82866c590c78c9a338844f1405d", "patch": "@@ -1,6 +1,7 @@\n #![cfg(feature = \"integration\")]\n \n use std::env;\n+use std::ffi::OsStr;\n use std::process::Command;\n \n #[cfg_attr(feature = \"integration\", test)]\n@@ -12,13 +13,16 @@ fn integration_test() {\n         .nth(1)\n         .expect(\"repo name should have format `<org>/<name>`\");\n \n-    let repo_dir = tempfile::tempdir()\n-        .expect(\"couldn't create temp dir\")\n-        .path()\n-        .join(crate_name);\n+    let mut repo_dir = tempfile::tempdir().expect(\"couldn't create temp dir\").into_path();\n+    repo_dir.push(crate_name);\n \n     let st = Command::new(\"git\")\n-        .args(&[\"clone\", \"--depth=1\", &repo_url, repo_dir.to_str().unwrap()])\n+        .args(&[\n+            OsStr::new(\"clone\"),\n+            OsStr::new(\"--depth=1\"),\n+            OsStr::new(&repo_url),\n+            OsStr::new(&repo_dir),\n+        ])\n         .status()\n         .expect(\"unable to run git\");\n     assert!(st.success());\n@@ -68,13 +72,8 @@ fn integration_test() {\n     }\n \n     match output.status.code() {\n-        Some(code) => {\n-            if code == 0 {\n-                println!(\"Compilation successful\");\n-            } else {\n-                eprintln!(\"Compilation failed. Exit code: {}\", code);\n-            }\n-        },\n+        Some(0) => println!(\"Compilation successful\"),\n+        Some(code) => eprintln!(\"Compilation failed. Exit code: {}\", code),\n         None => panic!(\"Process terminated by signal\"),\n     }\n }"}]}