{"sha": "7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYmJhM2QwM2M1ZDNlOWZkYjk2NTU2ZWFjMWJlNDk0NDljNDFlZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-03T03:00:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-03T03:00:16Z"}, "message": "Auto merge of #58464 - jethrogb:jb/std-test-panic-output, r=alexcrichton\n\nUse the correct stderr when testing libstd\n\nWhen compiling the unit tests for libstd, there are two copies of `std` in existence, see [lib.rs](https://github.com/rust-lang/rust/blob/919cf42/src/libstd/lib.rs#L335-L341). This means there are two copies of everything, including thread local variable definitions. Before this PR, it's possible that libtest would configure a stderr sink in one of those copies, whereas the panic logic would inspect the sink in the other copy, resulting in libtest missing the relevant panic message. This PR makes sure that when testing, the panic logic always accesses the stderr sink from \u201crealstd\u201d, using the same logic that libtest uses.", "tree": {"sha": "eda91750cfd2690b78e7198ec5166ec0aa5fb8b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda91750cfd2690b78e7198ec5166ec0aa5fb8b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "html_url": "https://github.com/rust-lang/rust/commit/7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ea22717a1e01fa535534b85a5347a7e49fc79de", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea22717a1e01fa535534b85a5347a7e49fc79de", "html_url": "https://github.com/rust-lang/rust/commit/0ea22717a1e01fa535534b85a5347a7e49fc79de"}, {"sha": "c0e8cf94103289c424c62ca48e1e3f56e352a84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e8cf94103289c424c62ca48e1e3f56e352a84a", "html_url": "https://github.com/rust-lang/rust/commit/c0e8cf94103289c424c62ca48e1e3f56e352a84a"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "b286e4016da7fc58dcd38dfb9a2027d9ecc9f7ba", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "patch": "@@ -165,6 +165,20 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n     }\n }\n \n+// Used by panicking::default_hook\n+#[cfg(test)]\n+/// This impl is only used by printing logic, so any error returned is always\n+/// of kind `Other`, and should be ignored.\n+impl Write for Box<dyn (::realstd::io::Write) + Send> {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        (**self).write(buf).map_err(|_| ErrorKind::Other.into())\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        (**self).flush().map_err(|_| ErrorKind::Other.into())\n+    }\n+}\n+\n // =============================================================================\n // In-memory buffer implementations\n "}, {"sha": "589fb455a191c9c2ddb15a284d5b2eab8e8fe092", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "patch": "@@ -1,3 +1,5 @@\n+#![cfg_attr(test, allow(unused))]\n+\n use crate::io::prelude::*;\n \n use crate::cell::RefCell;\n@@ -16,6 +18,13 @@ thread_local! {\n     }\n }\n \n+/// Stderr used by eprint! and eprintln! macros, and panics\n+thread_local! {\n+    static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {\n+        RefCell::new(None)\n+    }\n+}\n+\n /// A handle to a raw instance of the standard input stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n@@ -668,7 +677,6 @@ impl fmt::Debug for StderrLock<'_> {\n            issue = \"0\")]\n #[doc(hidden)]\n pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n-    use crate::panicking::LOCAL_STDERR;\n     use crate::mem;\n     LOCAL_STDERR.with(move |slot| {\n         mem::replace(&mut *slot.borrow_mut(), sink)\n@@ -740,6 +748,7 @@ where\n            reason = \"implementation detail which may disappear or be replaced at any time\",\n            issue = \"0\")]\n #[doc(hidden)]\n+#[cfg(not(test))]\n pub fn _print(args: fmt::Arguments) {\n     print_to(args, &LOCAL_STDOUT, stdout, \"stdout\");\n }\n@@ -748,11 +757,14 @@ pub fn _print(args: fmt::Arguments) {\n            reason = \"implementation detail which may disappear or be replaced at any time\",\n            issue = \"0\")]\n #[doc(hidden)]\n+#[cfg(not(test))]\n pub fn _eprint(args: fmt::Arguments) {\n-    use crate::panicking::LOCAL_STDERR;\n     print_to(args, &LOCAL_STDERR, stderr, \"stderr\");\n }\n \n+#[cfg(test)]\n+pub use realstd::io::{_eprint, _print};\n+\n #[cfg(test)]\n mod tests {\n     use crate::panic::{UnwindSafe, RefUnwindSafe};"}, {"sha": "e31680f23f1da47bcc37f2c2aeca6ddcbd977ec2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "patch": "@@ -219,7 +219,7 @@\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n \n-#![cfg_attr(test, feature(test, update_panic_count))]\n+#![cfg_attr(test, feature(print_internals, set_stdio, test, update_panic_count))]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n             feature(global_asm, range_contains, slice_index_methods,\n                     decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]"}, {"sha": "eae885602d3e7877b96a0125ac8c5e0df4968f59", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbba3d03c5d3e9fdb96556eac1be49449c41edc/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=7dbba3d03c5d3e9fdb96556eac1be49449c41edc", "patch": "@@ -7,13 +7,9 @@\n //! * Executing a panic up to doing the actual implementation\n //! * Shims around \"try\"\n \n-use core::panic::BoxMeUp;\n-use core::panic::{PanicInfo, Location};\n-\n-use crate::io::prelude::*;\n+use core::panic::{BoxMeUp, PanicInfo, Location};\n \n use crate::any::Any;\n-use crate::cell::RefCell;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n@@ -25,11 +21,12 @@ use crate::sys_common::thread_info;\n use crate::sys_common::util;\n use crate::thread;\n \n-thread_local! {\n-    pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {\n-        RefCell::new(None)\n-    }\n-}\n+#[cfg(not(test))]\n+use crate::io::set_panic;\n+// make sure to use the stderr output configured\n+// by libtest in the real copy of std\n+#[cfg(test)]\n+use realstd::io::set_panic;\n \n // Binary interface to the panic runtime that the standard library depends on.\n //\n@@ -205,12 +202,11 @@ fn default_hook(info: &PanicInfo) {\n         }\n     };\n \n-    if let Some(mut local) = LOCAL_STDERR.with(|s| s.borrow_mut().take()) {\n-       write(&mut *local);\n-       let mut s = Some(local);\n-       LOCAL_STDERR.with(|slot| {\n-           *slot.borrow_mut() = s.take();\n-       });\n+    if let Some(mut local) = set_panic(None) {\n+        // NB. In `cfg(test)` this uses the forwarding impl\n+        // for `Box<dyn (::realstd::io::Write) + Send>`.\n+        write(&mut local);\n+        set_panic(Some(local));\n     } else if let Some(mut out) = panic_output() {\n         write(&mut out);\n     }"}]}