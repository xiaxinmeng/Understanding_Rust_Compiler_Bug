{"sha": "72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDRjMWVkNjc1ODlhYTFhMmQyODUwMmIyZTY0NTNkZDk0NjdlOGM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-03-08T08:42:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-08T08:42:13Z"}, "message": "Rollup merge of #58984 - estebank:multi-treat-err-as-bug, r=oli-obk\n\nTeach `-Z treat-err-as-bug` to take a number of errors to emit\n\n`-Z treat-err-as-bug` will cause `rustc` to panic after the first error is reported, like previously. `-Z treat-err-as-bug=2` will cause `rustc` to panic after 2 errors have been reported.\n\nFix #58983.", "tree": {"sha": "11011114377f17d65af53dec4c52dcccbc586f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11011114377f17d65af53dec4c52dcccbc586f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcgirlCRBK7hj4Ov3rIwAAdHIIAJVPLsmhpgCn3s0h2JWr5m1c\n9VmVCNDYFAQSMV+bgKuq8sBmE9DGCp63qc04/45RzhHjaVjz/AKAAT2UnjoppYAS\nS8opmDXgx8WRebtjErhKrdLzeqVx6WlIivEjiU1VFPGTNBca4GxOwIQXe9g0bkk+\nojNA+q7QLO3CcJOi4gsvdFkatS7SLn0WiVnV+T6J/832GY/xVHIpvjBrnXntFxUt\n4VGppuA1OJkOOW5KvllGOV+ECf5uJ4xoQFdw1i27PAAS3kt5tkqqLS+19o5+TSul\npigVriykDRShQSGEi2mPy2lTEZwO4xmQxi+WsyAq96oDKhyl2n1+6ulo/ECS4YE=\n=ehns\n-----END PGP SIGNATURE-----\n", "payload": "tree 11011114377f17d65af53dec4c52dcccbc586f18\nparent c51c90c8917caf0192ce8d76da72ada03891818b\nparent 29716ef4f75e0d5cb11f788c2e449db4ea3989ef\nauthor Pietro Albini <pietro@pietroalbini.org> 1552034533 +0100\ncommitter GitHub <noreply@github.com> 1552034533 +0100\n\nRollup merge of #58984 - estebank:multi-treat-err-as-bug, r=oli-obk\n\nTeach `-Z treat-err-as-bug` to take a number of errors to emit\n\n`-Z treat-err-as-bug` will cause `rustc` to panic after the first error is reported, like previously. `-Z treat-err-as-bug=2` will cause `rustc` to panic after 2 errors have been reported.\n\nFix #58983.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "html_url": "https://github.com/rust-lang/rust/commit/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51c90c8917caf0192ce8d76da72ada03891818b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51c90c8917caf0192ce8d76da72ada03891818b", "html_url": "https://github.com/rust-lang/rust/commit/c51c90c8917caf0192ce8d76da72ada03891818b"}, {"sha": "29716ef4f75e0d5cb11f788c2e449db4ea3989ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/29716ef4f75e0d5cb11f788c2e449db4ea3989ef", "html_url": "https://github.com/rust-lang/rust/commit/29716ef4f75e0d5cb11f788c2e449db4ea3989ef"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "a44d815025e9250f7daa6cc44e1e2ec698731ccd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -816,6 +816,8 @@ macro_rules! options {\n             Some(\"crate=integer\");\n         pub const parse_unpretty: Option<&str> =\n             Some(\"`string` or `string=string`\");\n+        pub const parse_treat_err_as_bug: Option<&str> =\n+            Some(\"either no value or a number bigger than 0\");\n         pub const parse_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n                   `fat`, or omitted\");\n@@ -1022,6 +1024,13 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_treat_err_as_bug(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { *slot = s.parse().ok().filter(|&x| x != 0); slot.unwrap_or(0) != 0 }\n+                None => { *slot = Some(1); true }\n+            }\n+        }\n+\n         fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n             if v.is_some() {\n                 let mut bool_arg = None;\n@@ -1236,8 +1245,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"load proc macros for both target and host, but only link to the target\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n         \"run all passes except codegen; no output\"),\n-    treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n-        \"treat all errors that occur as bugs\"),\n+    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n+        \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n@@ -3214,7 +3223,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.treat_err_as_bug = true;\n+        opts.debugging_opts.treat_err_as_bug = Some(1);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "751fa7e95e3a835b38339b1f013dcd882fb15183", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -1315,7 +1315,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n     errors::FatalError.raise();\n }\n@@ -1330,7 +1330,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n "}, {"sha": "c84b38cde81853f39aae0869024b6f26e700c361", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -247,7 +247,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n \n impl<B: WriteBackendMethods> CodegenContext<B> {\n     pub fn create_diag_handler(&self) -> Handler {\n-        Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n+        Handler::with_emitter(true, None, Box::new(self.diag_emitter.clone()))\n     }\n \n     pub fn config(&self, kind: ModuleKind) -> &ModuleConfig {"}, {"sha": "656d8e463dbd044806d6f540d42039a536791d13", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -148,7 +148,7 @@ pub fn run<F>(run_compiler: F) -> isize\n                                 true,\n                                 false\n                             );\n-                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                        let handler = errors::Handler::with_emitter(true, None, Box::new(emitter));\n                         handler.emit(&MultiSpan::new(),\n                                      \"aborting due to previous error(s)\",\n                                      errors::Level::Fatal);\n@@ -1327,7 +1327,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) -> Result<(), CompilationFail\n                                                                 None,\n                                                                 false,\n                                                                 false));\n-            let handler = errors::Handler::with_emitter(true, false, emitter);\n+            let handler = errors::Handler::with_emitter(true, None, emitter);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print."}, {"sha": "3d52f1d44ba295e19e2d1ba89f5e1d11407ef5c1", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -113,7 +113,7 @@ fn test_env_with_pool<F>(\n ) where\n     F: FnOnce(Env),\n {\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, None, emitter);\n     let sess = session::build_session_(\n         options,\n         None,"}, {"sha": "c8d47339fb36572432369715402c1a2a1fb7503b", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -103,7 +103,9 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// Buffers the diagnostic for later emission, unless handler\n     /// has disabled such buffering.\n     pub fn buffer(mut self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n-        if self.handler.flags.dont_buffer_diagnostics || self.handler.flags.treat_err_as_bug {\n+        if self.handler.flags.dont_buffer_diagnostics ||\n+            self.handler.flags.treat_err_as_bug.is_some()\n+        {\n             self.emit();\n             return;\n         }"}, {"sha": "7c7698ddd3d7397e98a7978be053af234a8a2604", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -330,7 +330,7 @@ pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     /// If true, error-level diagnostics are upgraded to bug-level.\n     /// (rustc: see `-Z treat-err-as-bug`)\n-    pub treat_err_as_bug: bool,\n+    pub treat_err_as_bug: Option<usize>,\n     /// If true, immediately emit diagnostics that would otherwise be buffered.\n     /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n     pub dont_buffer_diagnostics: bool,\n@@ -360,7 +360,7 @@ impl Drop for Handler {\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n-                            treat_err_as_bug: bool,\n+                            treat_err_as_bug: Option<usize>,\n                             cm: Option<Lrc<SourceMapperDyn>>)\n                             -> Handler {\n         Handler::with_tty_emitter_and_flags(\n@@ -382,7 +382,7 @@ impl Handler {\n     }\n \n     pub fn with_emitter(can_emit_warnings: bool,\n-                        treat_err_as_bug: bool,\n+                        treat_err_as_bug: Option<usize>,\n                         e: Box<dyn Emitter + sync::Send>)\n                         -> Handler {\n         Handler::with_emitter_and_flags(\n@@ -516,8 +516,20 @@ impl Handler {\n     }\n \n     fn panic_if_treat_err_as_bug(&self) {\n-        if self.flags.treat_err_as_bug {\n-            panic!(\"encountered error with `-Z treat_err_as_bug\");\n+        if self.treat_err_as_bug() {\n+            let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n+                (0, _) => return,\n+                (1, 1) => \"aborting due to `-Z treat-err-as-bug=1`\".to_string(),\n+                (1, _) => return,\n+                (count, as_bug) => {\n+                    format!(\n+                        \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n+                        count,\n+                        as_bug,\n+                    )\n+                }\n+            };\n+            panic!(s);\n         }\n     }\n \n@@ -558,7 +570,7 @@ impl Handler {\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n@@ -593,14 +605,14 @@ impl Handler {\n         DiagnosticBuilder::new(self, FailureNote, msg).emit()\n     }\n     pub fn fatal(&self, msg: &str) -> FatalError {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n         DiagnosticBuilder::new(self, Fatal, msg).emit();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Error, msg);\n@@ -610,6 +622,9 @@ impl Handler {\n         let mut db = DiagnosticBuilder::new(self, Warning, msg);\n         db.emit();\n     }\n+    fn treat_err_as_bug(&self) -> bool {\n+        self.flags.treat_err_as_bug.map(|c| self.err_count() >= c).unwrap_or(false)\n+    }\n     pub fn note_without_error(&self, msg: &str) {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.emit();\n@@ -624,8 +639,8 @@ impl Handler {\n     }\n \n     fn bump_err_count(&self) {\n-        self.panic_if_treat_err_as_bug();\n         self.err_count.fetch_add(1, SeqCst);\n+        self.panic_if_treat_err_as_bug();\n     }\n \n     pub fn err_count(&self) -> usize {\n@@ -642,6 +657,9 @@ impl Handler {\n             1 => \"aborting due to previous error\".to_string(),\n             _ => format!(\"aborting due to {} previous errors\", self.err_count())\n         };\n+        if self.treat_err_as_bug() {\n+            return;\n+        }\n \n         let _ = self.fatal(&s);\n "}, {"sha": "a3d1f061a34e27a13bda20bbdb7c77cf36ba3a71", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -269,7 +269,7 @@ impl DocAccessLevels for AccessLevels<DefId> {\n /// will be created for the handler.\n pub fn new_handler(error_format: ErrorOutputType,\n                    source_map: Option<Lrc<source_map::SourceMap>>,\n-                   treat_err_as_bug: bool,\n+                   treat_err_as_bug: Option<usize>,\n                    ui_testing: bool,\n ) -> errors::Handler {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so"}, {"sha": "856365847ae17a0a11ab5ab736793c26cfe4b1d6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -67,7 +67,7 @@ pub fn run(mut options: Options) -> isize {\n         let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let handler =\n             errors::Handler::with_tty_emitter(ColorConfig::Auto,\n-                                            true, false,\n+                                            true, None,\n                                             Some(source_map.clone()));\n \n         let mut sess = session::build_session_(\n@@ -272,7 +272,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n                                                         false);\n \n         // Compile the code\n-        let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n+        let diagnostic_handler = errors::Handler::with_emitter(true, None, box emitter);\n \n         let mut sess = session::build_session_(\n             sessopts, None, diagnostic_handler, source_map, Default::default(),\n@@ -424,7 +424,7 @@ pub fn make_test(s: &str,\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let emitter = EmitterWriter::new(box io::sink(), None, false, false);\n-        let handler = Handler::with_emitter(false, false, box emitter);\n+        let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);\n \n         let mut found_main = false;"}, {"sha": "db5b8dcda4eab7daadddc04514043510a00b683b", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -1920,7 +1920,7 @@ mod tests {\n                                                           false,\n                                                           false);\n         ParseSess {\n-            span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n+            span_diagnostic: errors::Handler::with_emitter(true, None, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n             config: CrateConfig::default(),\n             included_mod_stack: Lock::new(Vec::new()),"}, {"sha": "9cfcfcd6241ad46f9e74b604a6ceb1194afd0254", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -53,7 +53,7 @@ impl ParseSess {\n         let cm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(ColorConfig::Auto,\n                                                 true,\n-                                                false,\n+                                                None,\n                                                 Some(cm.clone()));\n         ParseSess::with_span_handler(handler, cm)\n     }"}, {"sha": "2b3d18835d543bc631dd0e60f511159442ad8fd6", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -58,7 +58,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n                                         Some(source_map.clone()),\n                                         false,\n                                         false);\n-        let handler = Handler::with_emitter(true, false, Box::new(emitter));\n+        let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");\n \n         assert!(expected_output.chars().next() == Some('\\n'),"}, {"sha": "9b3bcef2faf327ca9b25acdf4274634daf553466", "filename": "src/test/run-make-fulldeps/treat-err-as-bug/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72d4c1ed67589aa1a2d28502b2e6453dd9467e8c/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftreat-err-as-bug%2FMakefile?ref=72d4c1ed67589aa1a2d28502b2e6453dd9467e8c", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) err.rs -Z treat-err-as-bug 2>&1 \\\n-\t    | $(CGREP) \"panicked at 'encountered error with \\`-Z treat_err_as_bug'\"\n+\t    | $(CGREP) \"panicked at 'aborting due to \\`-Z treat-err-as-bug=1\\`'\""}]}