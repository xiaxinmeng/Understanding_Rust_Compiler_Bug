{"sha": "126b71f69099df4ee2b0654f56709ab937eceb2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNmI3MWY2OTA5OWRmNGVlMmIwNjU0ZjU2NzA5YWI5MzdlY2ViMmI=", "commit": {"author": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-11-18T18:39:23Z"}, "committer": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-11-18T18:39:23Z"}, "message": "revert", "tree": {"sha": "3df2fc90237f1a9814ffb3cb52161c22b67d91e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df2fc90237f1a9814ffb3cb52161c22b67d91e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/126b71f69099df4ee2b0654f56709ab937eceb2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJb8bHcAAoJEBOpOZ+3fjNcwiwQAMA3IxrwoSqKqv2GnJ4egT8h\naozQJQu7BsCxnB8E61eVvAnzdWtUFh7YY/gPMGOaDNsapDFuVJseEuagKax6+dwg\naQlSXWZ3nFqCJvVSgiBydpNfK628G94XeH8Mm2VtGzCdjXIZAGlSNDBxbVJlzohh\nd/gWHgOBWiUaGR9LO0o55sB5CorkYacWRf06XZBR0NPeUZHf5fR2syQPlSZcmpuV\nhgJpirDPDAdCXLGdCp47HFW6kPNw2dO/tR8keOKuOAbEBnwG+PVCfcVEhOeqIkFc\nwRkosJRsDl+kH/igFA7AwVX/SUi5Jo5XOJN+AisO5VCjRYvdrsLBH4qb2VZeK16m\nkSZ2fDBc8mjY27cdC5RnW+0M1WCEF6LCFyZ5EFurcVENEUVhUJtuEDti7hDI5yNP\n9EcBc/p0J+Te23t+8i9ksXN/Vx1ZAR15U26q/d+R3OFwgCstuYhLfrqgNX2zpIXT\nin1suipSOmCWRN3Si5OJi3TKIRSMjxUW8fwxj0TilHlYeB0kYl2paDN4LJWSNSwc\nOySn4dj1BDuOrfU4Fh9wvSFksQVV6azIEfUOs2uo4+pOiWmA9jmBOWCuYfbmmRuQ\n/t8+kCSMTpM+tnMOeuoCKG5HHqtnAqmbxQMlnGdIztTeXy3UPD20dAmb55bkTwxj\nkq9I7dAZT4Ge9yDopEbh\n=3MEY\n-----END PGP SIGNATURE-----", "payload": "tree 3df2fc90237f1a9814ffb3cb52161c22b67d91e6\nparent d1c2cbf90a12bce0d4214ae27feda4f7d73c0510\nauthor \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1542566363 +0300\ncommitter \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1542566363 +0300\n\nrevert\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/126b71f69099df4ee2b0654f56709ab937eceb2b", "html_url": "https://github.com/rust-lang/rust/commit/126b71f69099df4ee2b0654f56709ab937eceb2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/126b71f69099df4ee2b0654f56709ab937eceb2b/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c2cbf90a12bce0d4214ae27feda4f7d73c0510", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c2cbf90a12bce0d4214ae27feda4f7d73c0510", "html_url": "https://github.com/rust-lang/rust/commit/d1c2cbf90a12bce0d4214ae27feda4f7d73c0510"}], "stats": {"total": 89, "additions": 9, "deletions": 80}, "files": [{"sha": "509068843d193b15cba6e168e8a3fd195baadf72", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 7, "deletions": 75, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/126b71f69099df4ee2b0654f56709ab937eceb2b/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126b71f69099df4ee2b0654f56709ab937eceb2b/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=126b71f69099df4ee2b0654f56709ab937eceb2b", "patch": "@@ -319,10 +319,9 @@\n use cmp;\n use fmt;\n use iter_private::TrustedRandomAccess;\n-use ops::{self, Try};\n+use ops::Try;\n use usize;\n use intrinsics;\n-use mem;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n@@ -673,7 +672,12 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        <Self as StepBySpecIterator>::spec_next(self)\n+        if self.first_take {\n+            self.first_take = false;\n+            self.iter.next()\n+        } else {\n+            self.iter.nth(self.step)\n+        }\n     }\n \n     #[inline]\n@@ -733,78 +737,6 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n     }\n }\n \n-// hidden trait for specializing iterator methods\n-// could be generalized but is currently only used for StepBy\n-trait StepBySpecIterator {\n-    type Item;\n-    fn spec_next(&mut self) -> Option<Self::Item>;\n-}\n-\n-impl<I> StepBySpecIterator for StepBy<I>\n-where\n-    I: Iterator,\n-{\n-    type Item = I::Item;\n-\n-    #[inline]\n-    default fn spec_next(&mut self) -> Option<I::Item> {\n-        if self.first_take {\n-            self.first_take = false;\n-            self.iter.next()\n-        } else {\n-            self.iter.nth(self.step)\n-        }\n-    }\n-}\n-\n-impl<T> StepBySpecIterator for StepBy<ops::Range<T>>\n-where\n-    T: Step,\n-{\n-    #[inline]\n-    fn spec_next(&mut self) -> Option<Self::Item> {\n-        self.first_take = false;\n-        if !(self.iter.start < self.iter.end) {\n-            return None;\n-        }\n-        // add 1 to self.step to get original step size back\n-        // it was decremented for the general case on construction\n-        if let Some(n) = self.iter.start.add_usize(self.step+1) {\n-            let next = mem::replace(&mut self.iter.start, n);\n-            Some(next)\n-        } else {\n-            let last = self.iter.start.clone();\n-            self.iter.start = self.iter.end.clone();\n-            Some(last)\n-        }\n-    }\n-}\n-\n-impl<T> StepBySpecIterator for StepBy<ops::RangeInclusive<T>>\n-where\n-    T: Step,\n-{\n-    #[inline]\n-    fn spec_next(&mut self) -> Option<Self::Item> {\n-        self.first_take = false;\n-        self.iter.compute_is_empty();\n-        if self.iter.is_empty.unwrap_or_default() {\n-            return None;\n-        }\n-        // add 1 to self.step to get original step size back\n-        // it was decremented for the general case on construction\n-        if let Some(n) = self.iter.start.add_usize(self.step+1) {\n-            self.iter.is_empty = Some(!(n <= self.iter.end));\n-            let next = mem::replace(&mut self.iter.start, n);\n-            Some(next)\n-        } else {\n-            let last = self.iter.start.clone();\n-            self.iter.is_empty = Some(true);\n-            Some(last)\n-        }\n-    }\n-}\n-\n // StepBy can only make the iterator shorter, so the len will still fit.\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}"}, {"sha": "fcf7f0cd5d70592d0dd22f750f8ed0d052991895", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/126b71f69099df4ee2b0654f56709ab937eceb2b/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126b71f69099df4ee2b0654f56709ab937eceb2b/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=126b71f69099df4ee2b0654f56709ab937eceb2b", "patch": "@@ -1619,11 +1619,8 @@ fn test_range_step() {\n }\n \n #[test]\n-fn test_range_inclusive_step() {\n-    assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n-    assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);\n-    assert_eq!((200..=255u8).step_by(10).collect::<Vec<_>>(), [200, 210, 220, 230, 240, 250]);\n-    assert_eq!((250..=255u8).step_by(1).collect::<Vec<_>>(), [250, 251, 252, 253, 254, 255]);\n+fn test_step_by_skip() {\n+    assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);\n }\n \n #[test]"}]}