{"sha": "4459a438c282e953bb35afb9e5829fcaeca91bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTlhNDM4YzI4MmU5NTNiYjM1YWZiOWU1ODI5ZmNhZWNhOTFiYWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-01-05T12:26:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-11T12:51:21Z"}, "message": "run-pass tests.\n\nincludes regression tests discovered during bootstrapping and tests of\ncyclic structure that currently pass and are expected to continue\npassing under the dropck rule.\n\n(Note that all the uses of `unsafe_destructor` are just placating the\nsimple analysis used for that feature, which will eventually go away\nonce we have put the dropck through its paces.)", "tree": {"sha": "c996777d102f09ba2d252b6dba5e1e31670a578d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c996777d102f09ba2d252b6dba5e1e31670a578d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4459a438c282e953bb35afb9e5829fcaeca91bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4459a438c282e953bb35afb9e5829fcaeca91bad", "html_url": "https://github.com/rust-lang/rust/commit/4459a438c282e953bb35afb9e5829fcaeca91bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4459a438c282e953bb35afb9e5829fcaeca91bad/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6c158d262e2783018854ac885cb6af0268dab88", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c158d262e2783018854ac885cb6af0268dab88", "html_url": "https://github.com/rust-lang/rust/commit/d6c158d262e2783018854ac885cb6af0268dab88"}], "stats": {"total": 371, "additions": 371, "deletions": 0}, "files": [{"sha": "80434f36b42d53e552c41b9b3b883a9a069af5f6", "filename": "src/test/run-pass/arr_cycle.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Farr_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Farr_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farr_cycle.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+\n+#[derive(Show)]\n+struct B<'a> {\n+    a: [Cell<Option<&'a B<'a>>>; 2]\n+}\n+\n+impl<'a> B<'a> {\n+    fn new() -> B<'a> {\n+        B { a: [Cell::new(None), Cell::new(None)] }\n+    }\n+}\n+\n+fn f() {\n+    let (b1, b2, b3);\n+    b1 = B::new();\n+    b2 = B::new();\n+    b3 = B::new();\n+    b1.a[0].set(Some(&b2));\n+    b1.a[1].set(Some(&b3));\n+    b2.a[0].set(Some(&b2));\n+    b2.a[1].set(Some(&b3));\n+    b3.a[0].set(Some(&b1));\n+    b3.a[1].set(Some(&b2));\n+}\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "ad71f725864f9f9c5ba1a578ee4dc169c125ae68", "filename": "src/test/run-pass/dropck_tarena_sound_drop.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that a arena (TypedArena) can carry elements whose drop\n+// methods might access borrowed data, as long as the borrowed data\n+// has lifetime that strictly outlives the arena itself.\n+//\n+// Compare against compile-fail/dropck_tarena_unsound_drop.rs, which\n+// shows a similar setup, but restricts `f` so that the struct `C<'a>`\n+// is force-fed a lifetime equal to that of the borrowed arena.\n+\n+#![allow(unstable)]\n+#![feature(unsafe_destructor)]\n+\n+extern crate arena;\n+\n+use arena::TypedArena;\n+\n+trait HasId { fn count(&self) -> usize; }\n+\n+struct CheckId<T:HasId> { v: T }\n+\n+// In the code below, the impl of HasId for `&'a usize` does not\n+// actually access the borrowed data, but the point is that the\n+// interface to CheckId does not (and cannot) know that, and therefore\n+// when encountering the a value V of type CheckId<S>, we must\n+// conservatively force the type S to strictly outlive V.\n+#[unsafe_destructor]\n+impl<T:HasId> Drop for CheckId<T> {\n+    fn drop(&mut self) {\n+        assert!(self.v.count() > 0);\n+    }\n+}\n+\n+struct C<'a> { _v: CheckId<&'a usize>, }\n+\n+impl<'a> HasId for &'a usize { fn count(&self) -> usize { 1 } }\n+\n+fn f<'a, 'b>(_arena: &'a TypedArena<C<'b>>) {}\n+\n+fn main() {\n+    let arena: TypedArena<C> = TypedArena::new();\n+    f(&arena);\n+}"}, {"sha": "bbce9a8f4a6ad20db285f21fd2ef7c87ae94fb3b", "filename": "src/test/run-pass/nondrop-cycle.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fnondrop-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fnondrop-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnondrop-cycle.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+\n+struct C<'a> {\n+    p: Cell<Option<&'a C<'a>>>,\n+}\n+\n+impl<'a> C<'a> {\n+    fn new() -> C<'a> { C { p: Cell::new(None) } }\n+}\n+\n+fn f1() {\n+    let (c1, c2) = (C::new(), C::new());\n+    c1.p.set(Some(&c2));\n+    c2.p.set(Some(&c1));\n+}\n+\n+fn f2() {\n+    let (c1, c2);\n+    c1 = C::new();\n+    c2 = C::new();\n+    c1.p.set(Some(&c2));\n+    c2.p.set(Some(&c1));\n+}\n+\n+fn main() {\n+    f1();\n+    f2();\n+}"}, {"sha": "019db2a977e4f07797fbe1b102b8047bdd5688ca", "filename": "src/test/run-pass/regions-refcell.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fregions-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fregions-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-refcell.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is a regression test for something that only came up while\n+// attempting to bootstrap librustc with new destructor lifetime\n+// semantics.\n+\n+use std::collections::HashMap;\n+use std::cell::RefCell;\n+\n+// This version does not yet work (associated type issues)...\n+#[cfg(cannot_use_this_yet)]\n+fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n+    let one = [1u];\n+    assert_eq!(map.borrow().get(\"one\"), Some(&one[]));\n+}\n+\n+#[cfg(cannot_use_this_yet_either)]\n+// ... and this version does not work (the lifetime of `one` is\n+// supposed to match the lifetime `'a`) ...\n+fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n+    let one = [1u];\n+    assert_eq!(map.borrow().get(\"one\"), Some(&one.as_slice()));\n+}\n+\n+#[cfg(all(not(cannot_use_this_yet),not(cannot_use_this_yet_either)))]\n+fn foo<'a>(map: RefCell<HashMap<&'static str, &'a [u8]>>) {\n+    // ...so instead we walk through the trivial slice and make sure\n+    // it contains the element we expect.\n+\n+    for (i, &x) in map.borrow().get(\"one\").unwrap().iter().enumerate() {\n+        assert_eq!((i, x), (0, 1));\n+    }\n+}\n+\n+fn main() {\n+    let zer = [0u8];\n+    let one = [1u8];\n+    let two = [2u8];\n+    let mut map = HashMap::new();\n+    map.insert(\"zero\", &zer[]);\n+    map.insert(\"one\",  &one[]);\n+    map.insert(\"two\",  &two[]);\n+    let map = RefCell::new(map);\n+    foo(map);\n+}"}, {"sha": "eb3bec773266670d241bb68fbbbb6ec4bb43b803", "filename": "src/test/run-pass/regions-trait-object-1.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fregions-trait-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fregions-trait-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait-object-1.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is a regression test for something that only came up while\n+// attempting to bootstrap libsyntax; it is adapted from\n+// `syntax::ext::tt::generic_extension`.\n+\n+pub struct E<'a> {\n+    pub f: &'a u8,\n+}\n+impl<'b> E<'b> {\n+    pub fn m(&self) -> &'b u8 { self.f }\n+}\n+\n+pub struct P<'c> {\n+    pub g: &'c u8,\n+}\n+pub trait M {\n+    fn n(&self) -> u8;\n+}\n+impl<'d> M for P<'d> {\n+    fn n(&self) -> u8 { *self.g }\n+}\n+\n+fn extension<'e>(x: &'e E<'e>) -> Box<M+'e> {\n+    loop {\n+        let p = P { g: x.m() };\n+        return Box::new(p) as Box<M+'e>;\n+    }\n+}\n+\n+fn main() {\n+    let w = E { f: &10u8 };\n+    let o = extension(&w);\n+    assert_eq!(o.n(), 10u8);\n+}"}, {"sha": "4e481910aa98fd215d9657ce77fb28cf6fa0832b", "filename": "src/test/run-pass/trait-object-with-lifetime-bound.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Ftrait-object-with-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Ftrait-object-with-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-with-lifetime-bound.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Uncovered during work on new scoping rules for safe destructors\n+// as an important use case to support properly.\n+\n+pub struct E<'a> {\n+    pub f: &'a u8,\n+}\n+impl<'b> E<'b> {\n+    pub fn m(&self) -> &'b u8 { self.f }\n+}\n+\n+pub struct P<'c> {\n+    pub g: &'c u8,\n+}\n+pub trait M {\n+    fn n(&self) -> u8;\n+}\n+impl<'d> M for P<'d> {\n+    fn n(&self) -> u8 { *self.g }\n+}\n+\n+fn extension<'e>(x: &'e E<'e>) -> Box<M+'e> {\n+    loop {\n+        let p = P { g: x.m() };\n+        return Box::new(p) as Box<M+'e>;\n+    }\n+}\n+\n+fn main() {\n+    let w = E { f: &10u8 };\n+    let o = extension(&w);\n+    assert_eq!(o.n(), 10u8);\n+}"}, {"sha": "65522bd95df7fc0af6d2faa0eed458285bbe06e3", "filename": "src/test/run-pass/vec_cycle.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fvec_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fvec_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec_cycle.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+\n+#[derive(Show)]\n+struct C<'a> {\n+    v: Vec<Cell<Option<&'a C<'a>>>>,\n+}\n+\n+impl<'a> C<'a> {\n+    fn new() -> C<'a> {\n+        C { v: Vec::new() }\n+    }\n+}\n+\n+fn f() {\n+    let (mut c1, mut c2, mut c3);\n+    c1 = C::new();\n+    c2 = C::new();\n+    c3 = C::new();\n+\n+    c1.v.push(Cell::new(None));\n+    c1.v.push(Cell::new(None));\n+    c2.v.push(Cell::new(None));\n+    c2.v.push(Cell::new(None));\n+    c3.v.push(Cell::new(None));\n+    c3.v.push(Cell::new(None));\n+\n+    c1.v[0].set(Some(&c2));\n+    c1.v[1].set(Some(&c3));\n+    c2.v[0].set(Some(&c2));\n+    c2.v[1].set(Some(&c3));\n+    c3.v[0].set(Some(&c1));\n+    c3.v[1].set(Some(&c2));\n+}\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "f179df90b34cabce9deee49e5446a9ec4c9cefaa", "filename": "src/test/run-pass/vec_cycle_wrapped.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fvec_cycle_wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4459a438c282e953bb35afb9e5829fcaeca91bad/src%2Ftest%2Frun-pass%2Fvec_cycle_wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec_cycle_wrapped.rs?ref=4459a438c282e953bb35afb9e5829fcaeca91bad", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+\n+#[derive(Show)]\n+struct Refs<'a> {\n+    v: Vec<Cell<Option<&'a C<'a>>>>,\n+}\n+\n+#[derive(Show)]\n+struct C<'a> {\n+    refs: Refs<'a>,\n+}\n+\n+impl<'a> Refs<'a> {\n+    fn new() -> Refs<'a> {\n+        Refs { v: Vec::new() }\n+    }\n+}\n+\n+impl<'a> C<'a> {\n+    fn new() -> C<'a> {\n+        C { refs: Refs::new() }\n+    }\n+}\n+\n+fn f() {\n+    let (mut c1, mut c2, mut c3);\n+    c1 = C::new();\n+    c2 = C::new();\n+    c3 = C::new();\n+\n+    c1.refs.v.push(Cell::new(None));\n+    c1.refs.v.push(Cell::new(None));\n+    c2.refs.v.push(Cell::new(None));\n+    c2.refs.v.push(Cell::new(None));\n+    c3.refs.v.push(Cell::new(None));\n+    c3.refs.v.push(Cell::new(None));\n+\n+    c1.refs.v[0].set(Some(&c2));\n+    c1.refs.v[1].set(Some(&c3));\n+    c2.refs.v[0].set(Some(&c2));\n+    c2.refs.v[1].set(Some(&c3));\n+    c3.refs.v[0].set(Some(&c1));\n+    c3.refs.v[1].set(Some(&c2));\n+}\n+\n+fn main() {\n+    f();\n+}"}]}