{"sha": "ad4f6b920a47ab112fa249693c819c32988add32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNGY2YjkyMGE0N2FiMTEyZmEyNDk2OTNjODE5YzMyOTg4YWRkMzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T13:24:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-23T13:24:02Z"}, "message": "Fix virtual function calls", "tree": {"sha": "bd89a57137dc164134b710dae0be803376d49b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd89a57137dc164134b710dae0be803376d49b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad4f6b920a47ab112fa249693c819c32988add32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4f6b920a47ab112fa249693c819c32988add32", "html_url": "https://github.com/rust-lang/rust/commit/ad4f6b920a47ab112fa249693c819c32988add32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad4f6b920a47ab112fa249693c819c32988add32/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70b79c778843ef115103156ccbeed8d2ff4d91f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70b79c778843ef115103156ccbeed8d2ff4d91f", "html_url": "https://github.com/rust-lang/rust/commit/d70b79c778843ef115103156ccbeed8d2ff4d91f"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "a6e0e53c2ded976fd8d2965c677fa021064773d3", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f6b920a47ab112fa249693c819c32988add32/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f6b920a47ab112fa249693c819c32988add32/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=ad4f6b920a47ab112fa249693c819c32988add32", "patch": "@@ -174,7 +174,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let dest = self.eval_lvalue(&mir::Lvalue::Local(local).field(mir::Field::new(i), arg_ty))?;\n                             self.write_value(arg_val, dest, arg_ty)?;\n                         }\n-                        \n                     },\n                     _ => bug!(\"bad ABI for ClosureOnceShim: {:?}\", sig.abi),\n                 }\n@@ -286,8 +285,60 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     self.write_value(arg_val, dest, arg_ty)?;\n                 }\n                 Ok(())\n-            }\n-            _ => Err(EvalError::Unimplemented(format!(\"can't handle function with {:?} ABI\", sig.abi))),\n+            },\n+            ty::InstanceDef::Virtual(_, idx) => {\n+                trace!(\"ABI: {:?}\", sig.abi);\n+                let mut args = Vec::new();\n+                for arg in arg_operands {\n+                    let arg_val = self.eval_operand(arg)?;\n+                    let arg_ty = self.operand_ty(arg);\n+                    args.push((arg_val, arg_ty));\n+                }\n+                let ptr_size = self.memory.pointer_size();\n+                let (_, vtable) = args[0].0.expect_ptr_vtable_pair(&self.memory)?;\n+                // FIXME: do we need to rewrite args[0] to be a thin ptr?\n+                let fn_ptr = self.memory.read_ptr(vtable.offset(ptr_size * (idx as u64 + 3)))?;\n+                let instance = self.memory.get_fn(fn_ptr.alloc_id)?;\n+                self.eval_fn_call_inner(\n+                    instance,\n+                    destination,\n+                    span,\n+                )?;\n+                match sig.abi {\n+                    Abi::RustCall => {\n+                        trace!(\"arg_locals: {:?}\", self.frame().mir.args_iter().collect::<Vec<_>>());\n+                        trace!(\"arg_operands: {:?}\", arg_operands);\n+                        trace!(\"args: {:#?}\", args);\n+\n+                        assert_eq!(args.len(), 2);\n+\n+                        {   // write first argument\n+                            let first_local = self.frame().mir.args_iter().next().unwrap();\n+                            let dest = self.eval_lvalue(&mir::Lvalue::Local(first_local))?;\n+                            let (arg_val, arg_ty) = args.remove(0);\n+                            self.write_value(arg_val, dest, arg_ty)?;\n+                        }\n+\n+                        // unpack and write all other args\n+                        let (arg_val, arg_ty) = args.remove(0);\n+                        let layout = self.type_layout(arg_ty)?;\n+                        if let (&ty::TyTuple(fields, _), &Layout::Univariant { ref variant, .. }) = (&arg_ty.sty, layout) {\n+                            let offsets = variant.offsets.iter().map(|s| s.bytes());\n+                            if let Value::ByRef(ptr) = arg_val {\n+                                for ((offset, ty), arg_local) in offsets.zip(fields).zip(self.frame().mir.args_iter().skip(1)) {\n+                                    let arg = Value::ByRef(ptr.offset(offset));\n+                                    let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                                    self.write_value(arg, dest, ty)?;\n+                                }\n+                            }\n+                        } else {\n+                            bug!(\"rust-call ABI tuple argument was {:?}, {:?}\", arg_ty, layout);\n+                        }\n+                    },\n+                    _ => unimplemented!(),\n+                }\n+                Ok(())\n+            },\n         }\n     }\n "}]}