{"sha": "5a68abb0943e687cc6c8165376b4ed6deda17db3", "node_id": "C_kwDOAAsO6NoAKDVhNjhhYmIwOTQzZTY4N2NjNmM4MTY1Mzc2YjRlZDZkZWRhMTdkYjM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-29T08:34:23Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-23T20:35:07Z"}, "message": "Tokenize emoji as if they were valid indentifiers\n\nIn the lexer, consider emojis to be valid identifiers and reject\nthem later to avoid knock down parse errors.", "tree": {"sha": "d3fb75d0d5d4be7be5e4e1cf665c94da12ed647b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3fb75d0d5d4be7be5e4e1cf665c94da12ed647b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a68abb0943e687cc6c8165376b4ed6deda17db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a68abb0943e687cc6c8165376b4ed6deda17db3", "html_url": "https://github.com/rust-lang/rust/commit/5a68abb0943e687cc6c8165376b4ed6deda17db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a68abb0943e687cc6c8165376b4ed6deda17db3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b", "html_url": "https://github.com/rust-lang/rust/commit/311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b"}], "stats": {"total": 182, "additions": 180, "deletions": 2}, "files": [{"sha": "edc227d9db7baee9b5cd3dc306efc73915ea90be", "filename": "Cargo.lock", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -4040,6 +4040,7 @@ name = \"rustc_lexer\"\n version = \"0.1.0\"\n dependencies = [\n  \"expect-test\",\n+ \"unic-emoji-char\",\n  \"unicode-xid\",\n ]\n \n@@ -5510,6 +5511,47 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n+[[package]]\n+name = \"unic-char-property\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221\"\n+dependencies = [\n+ \"unic-char-range\",\n+]\n+\n+[[package]]\n+name = \"unic-char-range\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc\"\n+\n+[[package]]\n+name = \"unic-common\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc\"\n+\n+[[package]]\n+name = \"unic-emoji-char\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b07221e68897210270a38bde4babb655869637af0f69407f96053a34f76494d\"\n+dependencies = [\n+ \"unic-char-property\",\n+ \"unic-char-range\",\n+ \"unic-ucd-version\",\n+]\n+\n+[[package]]\n+name = \"unic-ucd-version\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4\"\n+dependencies = [\n+ \"unic-common\",\n+]\n+\n [[package]]\n name = \"unicase\"\n version = \"2.6.0\""}, {"sha": "7286209040c335b85db07cffdc5f93b7d3d2be33", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -35,7 +35,7 @@ use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::FileName;\n+use rustc_span::{FileName, MultiSpan};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tempfile::Builder as TempFileBuilder;\n@@ -450,6 +450,16 @@ pub fn configure_and_expand(\n         });\n     }\n \n+    // Gate identifiers containing invalid Unicode codepoints that were recovered during lexing.\n+    sess.parse_sess.bad_unicode_identifiers.with_lock(|identifiers| {\n+        for (ident, spans) in identifiers.drain() {\n+            sess.diagnostic().span_err(\n+                MultiSpan::from(spans),\n+                &format!(\"identifiers cannot contain emojis: `{}`\", ident),\n+            );\n+        }\n+    });\n+\n     Ok(krate)\n }\n "}, {"sha": "35af110537d4c3ea859b76fbcf4ad4d9ac8a67c8", "filename": "compiler/rustc_lexer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_lexer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_lexer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2FCargo.toml?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -17,6 +17,7 @@ doctest = false\n # Note that this crate purposefully does not depend on other rustc crates\n [dependencies]\n unicode-xid = \"0.2.0\"\n+unic-emoji-char = \"0.9.0\"\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "a729c0c0bbea37b4cc82fdd183cdb00f851a0dde", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -64,6 +64,8 @@ pub enum TokenKind {\n     /// \"ident\" or \"continue\"\n     /// At this step keywords are also considered identifiers.\n     Ident,\n+    /// Like the above, but containing invalid unicode codepoints.\n+    InvalidIdent,\n     /// \"r#ident\"\n     RawIdent,\n     /// An unknown prefix like `foo#`, `foo'`, `foo\"`. Note that only the\n@@ -411,6 +413,11 @@ impl Cursor<'_> {\n                 let kind = Str { terminated };\n                 Literal { kind, suffix_start }\n             }\n+            // Identifier (this should be checked after other variant that can\n+            // start as identifier).\n+            c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {\n+                self.fake_ident_or_unknown_prefix()\n+            }\n             _ => Unknown,\n         };\n         Token::new(token_kind, self.len_consumed())\n@@ -492,10 +499,28 @@ impl Cursor<'_> {\n         // we see a prefix here, it is definitely an unknown prefix.\n         match self.first() {\n             '#' | '\"' | '\\'' => UnknownPrefix,\n+            c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {\n+                self.fake_ident_or_unknown_prefix()\n+            }\n             _ => Ident,\n         }\n     }\n \n+    fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {\n+        // Start is already eaten, eat the rest of identifier.\n+        self.eat_while(|c| {\n+            unicode_xid::UnicodeXID::is_xid_continue(c)\n+                || (!c.is_ascii() && unic_emoji_char::is_emoji(c))\n+                || c == '\\u{200d}'\n+        });\n+        // Known prefixes must have been handled earlier. So if\n+        // we see a prefix here, it is definitely an unknown prefix.\n+        match self.first() {\n+            '#' | '\"' | '\\'' => UnknownPrefix,\n+            _ => InvalidIdent,\n+        }\n+    }\n+\n     fn number(&mut self, first_digit: char) -> LiteralKind {\n         debug_assert!('0' <= self.prev() && self.prev() <= '9');\n         let mut base = Base::Decimal;"}, {"sha": "c4a3dd9bfda7e3ae8f770e4cdda463ef3677e4a9", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -222,6 +222,12 @@ impl<'a> StringReader<'a> {\n                 }\n                 token::Ident(sym, is_raw_ident)\n             }\n+            rustc_lexer::TokenKind::InvalidIdent => {\n+                let sym = nfc_normalize(self.str_from(start));\n+                let span = self.mk_sp(start, self.pos);\n+                self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);\n+                token::Ident(sym, false)\n+            }\n             rustc_lexer::TokenKind::Literal { kind, suffix_start } => {\n                 let suffix_start = start + BytePos(suffix_start as u32);\n                 let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);"}, {"sha": "4e0f6c32e57b8034486271544340d7683a088c61", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -119,8 +119,13 @@ pub struct ParseSess {\n     pub config: CrateConfig,\n     pub edition: Edition,\n     pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n-    /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n+    /// Places where raw identifiers were used. This is used to avoid complaining about idents\n+    /// clashing with keywords in new editions.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n+    /// Places where identifiers that contain invalid Unicode codepoints but that look like they\n+    /// should be. Useful to avoid bad tokenization when encountering emojis. We group them to\n+    /// provide a single error per unique incorrect identifier.\n+    pub bad_unicode_identifiers: Lock<FxHashMap<Symbol, Vec<Span>>>,\n     source_map: Lrc<SourceMap>,\n     pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n     /// Contains the spans of block expressions that could have been incomplete based on the\n@@ -160,6 +165,7 @@ impl ParseSess {\n             edition: ExpnId::root().expn_data().edition,\n             missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),\n+            bad_unicode_identifiers: Lock::new(Default::default()),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),"}, {"sha": "2f4df4cf216199e5fc5c9f7f42e6fb564a525b08", "filename": "src/test/ui/parser/emoji-identifiers.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -0,0 +1,16 @@\n+struct ABig\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67Family; //~ ERROR identifiers cannot contain emojis\n+struct \ud83d\udc40; //~ ERROR identifiers cannot contain emojis\n+impl \ud83d\udc40 {\n+    fn full_of_\u2728() -> \ud83d\udc40 { //~ ERROR identifiers cannot contain emojis\n+        \ud83d\udc40\n+    }\n+}\n+fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 { //~ ERROR identifiers cannot contain emojis\n+    \ud83d\udc40::full_of\u2728() //~ ERROR no function or associated item named `full_of\u2728` found for struct `\ud83d\udc40`\n+    //~^ ERROR identifiers cannot contain emojis\n+}\n+fn main() {\n+    let _ = i_like_to_\ud83d\ude04_a_lot(); //~ ERROR cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n+    //~^ ERROR identifiers cannot contain emojis\n+}\n+"}, {"sha": "3b17bb01de9539cbebece54b9d58c3e713ef5ab5", "filename": "src/test/ui/parser/emoji-identifiers.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5a68abb0943e687cc6c8165376b4ed6deda17db3/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a68abb0943e687cc6c8165376b4ed6deda17db3/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr?ref=5a68abb0943e687cc6c8165376b4ed6deda17db3", "patch": "@@ -0,0 +1,72 @@\n+error[E0425]: cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n+  --> $DIR/emoji-identifiers.rs:13:13\n+   |\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   | ----------------------------- similarly named function `i_like_to_\ud83d\ude05_a_lot` defined here\n+...\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot();\n+   |             ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `i_like_to_\ud83d\ude05_a_lot`\n+\n+error: identifiers cannot contain emojis: `i_like_to_\ud83d\ude04_a_lot`\n+  --> $DIR/emoji-identifiers.rs:13:13\n+   |\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot();\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: identifiers cannot contain emojis: `full_of_\u2728`\n+  --> $DIR/emoji-identifiers.rs:4:8\n+   |\n+LL |     fn full_of_\u2728() -> \ud83d\udc40 {\n+   |        ^^^^^^^^^^\n+\n+error: identifiers cannot contain emojis: `full_of\u2728`\n+  --> $DIR/emoji-identifiers.rs:9:8\n+   |\n+LL |     \ud83d\udc40::full_of\u2728()\n+   |         ^^^^^^^^^\n+\n+error: identifiers cannot contain emojis: `\ud83d\udc40`\n+  --> $DIR/emoji-identifiers.rs:2:8\n+   |\n+LL | struct \ud83d\udc40;\n+   |        ^^\n+LL | impl \ud83d\udc40 {\n+   |      ^^\n+LL |     fn full_of_\u2728() -> \ud83d\udc40 {\n+   |                        ^^\n+LL |         \ud83d\udc40\n+   |         ^^\n+...\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   |                            ^^\n+LL |     \ud83d\udc40::full_of\u2728()\n+   |     ^^\n+\n+error: identifiers cannot contain emojis: `i_like_to_\ud83d\ude05_a_lot`\n+  --> $DIR/emoji-identifiers.rs:8:4\n+   |\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   |    ^^^^^^^^^^^^^^^^^^\n+\n+error: identifiers cannot contain emojis: `ABig\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67Family`\n+  --> $DIR/emoji-identifiers.rs:1:8\n+   |\n+LL | struct ABig\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67Family;\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no function or associated item named `full_of\u2728` found for struct `\ud83d\udc40` in the current scope\n+  --> $DIR/emoji-identifiers.rs:9:8\n+   |\n+LL | struct \ud83d\udc40;\n+   | ---------- function or associated item `full_of\u2728` not found for this\n+...\n+LL |     \ud83d\udc40::full_of\u2728()\n+   |         ^^^^^^^^^\n+   |         |\n+   |         function or associated item not found in `\ud83d\udc40`\n+   |         help: there is an associated function with a similar name: `full_of_\u2728`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0425, E0599.\n+For more information about an error, try `rustc --explain E0425`."}]}