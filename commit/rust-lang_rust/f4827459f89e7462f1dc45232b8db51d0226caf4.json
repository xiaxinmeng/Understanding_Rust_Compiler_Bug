{"sha": "f4827459f89e7462f1dc45232b8db51d0226caf4", "node_id": "C_kwDOAAsO6NoAKGY0ODI3NDU5Zjg5ZTc0NjJmMWRjNDUyMzJiOGRiNTFkMDIyNmNhZjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-09T21:40:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-09T21:40:05Z"}, "message": "Rollup merge of #110095 - matthewjasper:ty-utils-diagnostics, r=compiler-errors\n\nMigrate remainder of rustc_ty_utils to `SessionDiagnostic`\n\nThis moves the remaining errors in `rust_ty_utils` to `SessionsDiagnostic`.\n\nr? ``@davidtwco``", "tree": {"sha": "9cc5aa0ee6be60bdeee5d64ed44b503da027970a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc5aa0ee6be60bdeee5d64ed44b503da027970a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4827459f89e7462f1dc45232b8db51d0226caf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkMzC1CRBK7hj4Ov3rIwAATXkIAEsiwMwSSHzwa4UVIcaf1uzJ\nLdj/rfXJl+9mf9C0aTSmlZYrivIlbhDpv5P1d3la5GblLmSr0+31MRVGLz5dcvQA\nOdPCn/rNVYnBVp0Tx+18d6Ez0I+InR6Lpy+gFhuj1GrXVlidRo0xrKQrdtroY4R/\n1SgmObp9+VkQQk7N+FlRetzgcCdtSD9x1b/hcqRvOkuybIhw+sWxtCUwKC6ozbBF\ncywSrHMG1UMDIRhFxtn4pVZOu7X3K0JNnQ5toEk/T9dZ9OXVcsIjsDt0fPc1ujM6\nx8g400zFus20ClmTE09H+qYeod0H2+GOm4D0+ITTo5755umld7VdqRsUsesX+tU=\n=JLLP\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cc5aa0ee6be60bdeee5d64ed44b503da027970a\nparent 164d70dc7a09c1835458bb9714e12eab93b1b156\nparent c17a7057580fcd76caec41939f1c4d5534ff790e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681076405 +0200\ncommitter GitHub <noreply@github.com> 1681076405 +0200\n\nRollup merge of #110095 - matthewjasper:ty-utils-diagnostics, r=compiler-errors\n\nMigrate remainder of rustc_ty_utils to `SessionDiagnostic`\n\nThis moves the remaining errors in `rust_ty_utils` to `SessionsDiagnostic`.\n\nr? ``@davidtwco``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4827459f89e7462f1dc45232b8db51d0226caf4", "html_url": "https://github.com/rust-lang/rust/commit/f4827459f89e7462f1dc45232b8db51d0226caf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4827459f89e7462f1dc45232b8db51d0226caf4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "164d70dc7a09c1835458bb9714e12eab93b1b156", "url": "https://api.github.com/repos/rust-lang/rust/commits/164d70dc7a09c1835458bb9714e12eab93b1b156", "html_url": "https://github.com/rust-lang/rust/commit/164d70dc7a09c1835458bb9714e12eab93b1b156"}, {"sha": "c17a7057580fcd76caec41939f1c4d5534ff790e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17a7057580fcd76caec41939f1c4d5534ff790e", "html_url": "https://github.com/rust-lang/rust/commit/c17a7057580fcd76caec41939f1c4d5534ff790e"}], "stats": {"total": 111, "additions": 87, "deletions": 24}, "files": [{"sha": "a1e97bb95bc690bb8346b80d0f5aa7f7b606a285", "filename": "compiler/rustc_ty_utils/messages.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fmessages.ftl?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -45,3 +45,13 @@ ty_utils_control_flow_not_supported = control flow is not supported in generic c\n ty_utils_inline_asm_not_supported = assembly is not supported in generic constants\n \n ty_utils_operation_not_supported = unsupported operation in generic constants\n+\n+ty_utils_unexpected_fnptr_associated_item = `FnPtr` trait with unexpected associated item\n+\n+ty_utils_zero_length_simd_type = monomorphising SIMD type `{$ty}` of zero length\n+\n+ty_utils_multiple_array_fields_simd_type = monomorphising SIMD type `{$ty}` with more than one array field\n+\n+ty_utils_oversized_simd_type = monomorphising SIMD type `{$ty}` of length greater than {$max_lanes}\n+\n+ty_utils_non_primative_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`"}, {"sha": "3db3c98e9e28ed5b483a4fd5a6b562b37d152787", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -67,3 +67,36 @@ pub enum GenericConstantTooComplexSub {\n     #[label(ty_utils_operation_not_supported)]\n     OperationNotSupported(#[primary_span] Span),\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_unexpected_fnptr_associated_item)]\n+pub struct UnexpectedFnPtrAssociatedItem {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_zero_length_simd_type)]\n+pub struct ZeroLengthSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_multiple_array_fields_simd_type)]\n+pub struct MultipleArrayFieldsSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_oversized_simd_type)]\n+pub struct OversizedSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub max_lanes: u64,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ty_utils_non_primative_simd_type)]\n+pub struct NonPrimitiveSimdType<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub e_ty: Ty<'tcx>,\n+}"}, {"sha": "0a6c118093e50657237e62cd9a3a177a67e13657", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -8,6 +8,8 @@ use rustc_span::sym;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n+use crate::errors::UnexpectedFnPtrAssociatedItem;\n+\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n@@ -282,10 +284,9 @@ fn resolve_associated_item<'tcx>(\n                         substs: rcvr_substs,\n                     })\n                 } else {\n-                    tcx.sess.span_fatal(\n-                        tcx.def_span(trait_item_id),\n-                        \"`FnPtrAddr` trait with unexpected assoc item\",\n-                    )\n+                    tcx.sess.emit_fatal(UnexpectedFnPtrAssociatedItem {\n+                        span: tcx.def_span(trait_item_id),\n+                    })\n                 }\n             } else {\n                 None"}, {"sha": "63eb34f7d5529415083358904c166b3774451ead", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -17,6 +17,9 @@ use rustc_target::abi::*;\n use std::fmt::Debug;\n use std::iter;\n \n+use crate::errors::{\n+    MultipleArrayFieldsSimdType, NonPrimitiveSimdType, OversizedSimdType, ZeroLengthSimdType,\n+};\n use crate::layout_sanity_check::sanity_check_layout;\n \n pub fn provide(providers: &mut ty::query::Providers) {\n@@ -294,6 +297,8 @@ fn layout_of_uncached<'tcx>(\n                 return Err(LayoutError::Unknown(ty));\n             }\n \n+            let fields = &def.non_enum_variant().fields;\n+\n             // Supported SIMD vectors are homogeneous ADTs with at least one field:\n             //\n             // * #[repr(simd)] struct S(T, T, T, T);\n@@ -304,18 +309,22 @@ fn layout_of_uncached<'tcx>(\n \n             // SIMD vectors with zero fields are not supported.\n             // (should be caught by typeck)\n-            if def.non_enum_variant().fields.is_empty() {\n-                tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n+            if fields.is_empty() {\n+                tcx.sess.emit_fatal(ZeroLengthSimdType { ty })\n             }\n \n             // Type of the first ADT field:\n-            let f0_ty = def.non_enum_variant().fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n+            let f0_ty = fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n \n             // Heterogeneous SIMD vectors are not supported:\n             // (should be caught by typeck)\n-            for fi in &def.non_enum_variant().fields {\n+            for fi in fields {\n                 if fi.ty(tcx, substs) != f0_ty {\n-                    tcx.sess.fatal(&format!(\"monomorphising heterogeneous SIMD type `{}`\", ty));\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP,\n+                        \"#[repr(simd)] was applied to an ADT with hetrogeneous field type\",\n+                    );\n+                    return Err(LayoutError::Unknown(ty));\n                 }\n             }\n \n@@ -330,12 +339,9 @@ fn layout_of_uncached<'tcx>(\n                 // First ADT field is an array:\n \n                 // SIMD vectors with multiple array fields are not supported:\n-                // (should be caught by typeck)\n+                // Can't be caught by typeck with a generic simd type.\n                 if def.non_enum_variant().fields.len() != 1 {\n-                    tcx.sess.fatal(&format!(\n-                        \"monomorphising SIMD type `{}` with more than one array field\",\n-                        ty\n-                    ));\n+                    tcx.sess.emit_fatal(MultipleArrayFieldsSimdType { ty });\n                 }\n \n                 // Extract the number of elements from the layout of the array field:\n@@ -355,24 +361,17 @@ fn layout_of_uncached<'tcx>(\n             //\n             // Can't be caught in typeck if the array length is generic.\n             if e_len == 0 {\n-                tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n+                tcx.sess.emit_fatal(ZeroLengthSimdType { ty });\n             } else if e_len > MAX_SIMD_LANES {\n-                tcx.sess.fatal(&format!(\n-                    \"monomorphising SIMD type `{}` of length greater than {}\",\n-                    ty, MAX_SIMD_LANES,\n-                ));\n+                tcx.sess.emit_fatal(OversizedSimdType { ty, max_lanes: MAX_SIMD_LANES });\n             }\n \n             // Compute the ABI of the element type:\n             let e_ly = cx.layout_of(e_ty)?;\n             let Abi::Scalar(e_abi) = e_ly.abi else {\n                 // This error isn't caught in typeck, e.g., if\n                 // the element type of the vector is generic.\n-                tcx.sess.fatal(&format!(\n-                    \"monomorphising SIMD type `{}` with a non-primitive-scalar \\\n-                    (integer/float/pointer) element type `{}`\",\n-                    ty, e_ty\n-                ))\n+                tcx.sess.emit_fatal(NonPrimitiveSimdType { ty, e_ty });\n             };\n \n             // Compute the size and alignment of the vector:"}, {"sha": "2613445f39bec0a28040e6609bd50a00afb1342b", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -10,6 +10,8 @@\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "42e380dbb779bb70ec42d5cb28eb3e9871b42ff4", "filename": "tests/ui/simd/monomorphize-heterogeneous.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/tests%2Fui%2Fsimd%2Fmonomorphize-heterogeneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/tests%2Fui%2Fsimd%2Fmonomorphize-heterogeneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fmonomorphize-heterogeneous.rs?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -0,0 +1,9 @@\n+#![feature(repr_simd)]\n+\n+#[repr(simd)]\n+struct I64F64(i64, f64);\n+//~^ ERROR SIMD vector should be homogeneous\n+\n+static X: I64F64 = I64F64(1, 2.0);\n+\n+fn main() {}"}, {"sha": "e7b41cd787cd2de21c25198cb0a174df21624e48", "filename": "tests/ui/simd/monomorphize-heterogeneous.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4827459f89e7462f1dc45232b8db51d0226caf4/tests%2Fui%2Fsimd%2Fmonomorphize-heterogeneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4827459f89e7462f1dc45232b8db51d0226caf4/tests%2Fui%2Fsimd%2Fmonomorphize-heterogeneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fmonomorphize-heterogeneous.stderr?ref=f4827459f89e7462f1dc45232b8db51d0226caf4", "patch": "@@ -0,0 +1,9 @@\n+error[E0076]: SIMD vector should be homogeneous\n+  --> $DIR/monomorphize-heterogeneous.rs:4:1\n+   |\n+LL | struct I64F64(i64, f64);\n+   | ^^^^^^^^^^^^^ SIMD elements must have the same type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0076`."}]}