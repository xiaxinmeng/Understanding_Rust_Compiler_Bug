{"sha": "f4fc43cb20a09e5db76f355596205c48cd8b4615", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZmM0M2NiMjBhMDllNWRiNzZmMzU1NTk2MjA1YzQ4Y2Q4YjQ2MTU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-06-13T17:51:53Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-06-20T00:21:50Z"}, "message": "Suggest that values are dropped in the opposite order they are defined", "tree": {"sha": "58f4f53d1d1380eb4d741d4475bd52a370e1e9dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f4f53d1d1380eb4d741d4475bd52a370e1e9dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4fc43cb20a09e5db76f355596205c48cd8b4615", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlspnh4ACgkQiMlBzaHU\nZDIrwg/+I0AGa4WR1FZ9J2PDk1Z/Kr3Rr3S4LoS7f6cEKcosDIW+TD8N/9egxcu3\nWtTBG+3Hr3ZB13ABprqdpG1dRI3AsdyEDMUAlKd2aRblZYIVvDa2OIttxlQ07dtx\naXgSISt5lRYd6X+qP4KnTXpfNBEkMoOCJN0LGYdntRAmsW8ISy9q80Mg1HCduHoF\n0dZc3bORRN3mE2i+Dj0FI3BeK2Zk52ZWnjX3msZYzGDU6/TBAx9xhDH6xkkH3Yb5\nDh3RXsGf7RI865cewU/vhVReXPis5HAMpbcsFDPTplXVEKsalLgrgU+GcRJ3NtQ4\nm3Hb+c262wA0NgSAZegOpuuxJdHy6LJad0QpS684aN6bZmTFpgMasIrG2S2BPsrb\no3NY3aI+L3Q8Zo5a3lYWrJi1rWpxXESQSwwWsXdJ8zYv6COlRoUsu6czr0vndTaY\no5+LSCiUBA6Ay1CImZ8wqIpK0kqwCU9TOyWqUd07QnwK9WtjYjvWA75TP+WOhIU7\nwvXY887eR1bHVw9bYYVo17nBNhHbdxvF1McE0N+/8UM3S/qFOuPf8ILbxmq+0FjX\n0VCzdAtiGmoVpTMsaEoGo6Hk/Z3P/B5LfC/BON0ctHmFkPeHkl3KrGwvtE3GXrS0\npwF4tyR/ERpkhC9UFoJYXg/z0QfmBIKW4Yw3qle6t85URgwlk2U=\n=nn59\n-----END PGP SIGNATURE-----", "payload": "tree 58f4f53d1d1380eb4d741d4475bd52a370e1e9dc\nparent f28c7aef7fbff1909c2d0257186cd7a5f0c6aa4b\nauthor Santiago Pastorino <spastorino@gmail.com> 1528912313 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1529454110 -0300\n\nSuggest that values are dropped in the opposite order they are defined\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4fc43cb20a09e5db76f355596205c48cd8b4615", "html_url": "https://github.com/rust-lang/rust/commit/f4fc43cb20a09e5db76f355596205c48cd8b4615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4fc43cb20a09e5db76f355596205c48cd8b4615/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28c7aef7fbff1909c2d0257186cd7a5f0c6aa4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28c7aef7fbff1909c2d0257186cd7a5f0c6aa4b", "html_url": "https://github.com/rust-lang/rust/commit/f28c7aef7fbff1909c2d0257186cd7a5f0c6aa4b"}], "stats": {"total": 115, "additions": 102, "deletions": 13}, "files": [{"sha": "b4a4e812e0335164b3842d3419f60529505ae71c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -302,6 +302,19 @@ impl<'tcx> Mir<'tcx> {\n         }\n     }\n \n+    /// Check if `sub` is a sub scope of `sup`\n+    pub fn is_sub_scope(&self, mut sub: SourceScope, sup: SourceScope) -> bool {\n+        loop {\n+            if sub == sup {\n+                return true;\n+            }\n+            match self.source_scopes[sub].parent_scope {\n+                None => return false,\n+                Some(p) => sub = p,\n+            }\n+        }\n+    }\n+\n     /// Return the return type, it always return first element from `local_decls` array\n     pub fn return_ty(&self) -> Ty<'tcx> {\n         self.local_decls[RETURN_PLACE].ty"}, {"sha": "2460c2137590795c50beca04d54ee99ae191cf6e", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use borrow_check::WriteKind;\n use syntax_pos::Span;\n use rustc::middle::region::ScopeTree;\n use rustc::mir::{BorrowKind, Field, Local, LocalKind, Location, Operand};\n@@ -162,7 +163,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             format!(\"borrow of {} occurs here\", borrow_msg),\n         );\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n-        self.explain_why_borrow_contains_point(context, borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n         err.emit();\n     }\n \n@@ -182,7 +183,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Origin::Mir,\n         );\n \n-        self.explain_why_borrow_contains_point(context, borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n \n         err.emit();\n     }\n@@ -380,7 +381,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             );\n         }\n \n-        self.explain_why_borrow_contains_point(context, issued_borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, issued_borrow, None, &mut err);\n \n         err.emit();\n     }\n@@ -389,8 +390,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &mut self,\n         context: Context,\n         borrow: &BorrowData<'tcx>,\n-        drop_span: Span,\n+        place_span: (&Place<'tcx>, Span),\n+        kind: Option<WriteKind>,\n     ) {\n+        let drop_span = place_span.1;\n         let scope_tree = self.tcx.region_scope_tree(self.mir_def_id);\n         let root_place = self.prefixes(&borrow.borrowed_place, PrefixSet::All)\n             .last()\n@@ -450,6 +453,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     drop_span,\n                     borrow_span,\n                     proper_span,\n+                    kind.map(|k| (k, place_span.0)),\n                 );\n             }\n             (RegionKind::ReEarlyBound(_), None)\n@@ -495,7 +499,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             drop_span,\n             format!(\"`{}` dropped here while still borrowed\", name),\n         );\n-        self.explain_why_borrow_contains_point(context, borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n         err.emit();\n     }\n \n@@ -517,7 +521,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"temporary value dropped here while still borrowed\",\n         );\n         err.note(\"consider using a `let` binding to increase its lifetime\");\n-        self.explain_why_borrow_contains_point(context, borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n         err.emit();\n     }\n \n@@ -530,6 +534,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         drop_span: Span,\n         borrow_span: Span,\n         _proper_span: Span,\n+        kind_place: Option<(WriteKind, &Place<'tcx>)>,\n     ) {\n         debug!(\n             \"report_unscoped_local_value_does_not_live_long_enough(\\\n@@ -544,7 +549,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.span_label(borrow_span, \"borrowed value does not live long enough\");\n         err.span_label(drop_span, \"borrowed value only lives until here\");\n \n-        self.explain_why_borrow_contains_point(context, borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, borrow, kind_place, &mut err);\n         err.emit();\n     }\n \n@@ -570,7 +575,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.span_label(proper_span, \"temporary value does not live long enough\");\n         err.span_label(drop_span, \"temporary value only lives until here\");\n \n-        self.explain_why_borrow_contains_point(context, borrow, &mut err);\n+        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n         err.emit();\n     }\n \n@@ -588,7 +593,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Origin::Mir,\n         );\n \n-        self.explain_why_borrow_contains_point(context, loan, &mut err);\n+        self.explain_why_borrow_contains_point(context, loan, None, &mut err);\n \n         err.emit();\n     }"}, {"sha": "3d3275a6b171485ae18cbd47e75ef9a69f16b782", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -1050,7 +1050,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             this.report_borrowed_value_does_not_live_long_enough(\n                                 context,\n                                 borrow,\n-                                place_span.1,\n+                                place_span,\n+                                Some(kind),\n                             );\n                         }\n                         WriteKind::Mutate => {\n@@ -1328,7 +1329,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             self.report_borrowed_value_does_not_live_long_enough(\n                 context,\n                 borrow,\n-                span,\n+                (place, span),\n+                None,\n             )\n         }\n     }"}, {"sha": "d43bc239806ce102d78690d8e9a439cb669c8e58", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n-use borrow_check::{Context, MirBorrowckCtxt};\n+use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n use borrow_check::borrow_set::BorrowData;\n use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Mir};\n+use rustc::mir::{Local, Location, Mir, Place};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::DiagnosticBuilder;\n use util::liveness::{self, DefUse, LivenessMode};\n@@ -22,11 +22,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// point from `context`. This is key for the \"3-point errors\"\n     /// [described in the NLL RFC][d].\n     ///\n+    /// # Parameters\n+    ///\n+    /// - `borrow`: the borrow in question\n+    /// - `context`: where the borrow occurs\n+    /// - `kind_place`: if Some, this describes the statement that triggered the error.\n+    ///   - first half is the kind of write, if any, being performed\n+    ///   - second half is the place being accessed\n+    /// - `err`: where the error annotations are going to be added\n+    ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n     pub(in borrow_check) fn explain_why_borrow_contains_point(\n         &mut self,\n         context: Context,\n         borrow: &BorrowData<'tcx>,\n+        kind_place: Option<(WriteKind, &Place<'tcx>)>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n         let regioncx = &&self.nonlexical_regioncx;\n@@ -64,6 +74,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                         local_name\n                                     ),\n                                 );\n+\n+                                if let Some((WriteKind::StorageDeadOrDrop, place)) = kind_place {\n+                                    if let Place::Local(borrowed_local) = place {\n+                                        let dropped_local_scope = mir.local_decls[local].visibility_scope;\n+                                        let borrowed_local_scope = mir.local_decls[*borrowed_local].visibility_scope;\n+\n+                                        if mir.is_sub_scope(borrowed_local_scope, dropped_local_scope) {\n+                                            err.note(\"values in a scope are dropped in the opposite order they are defined\");\n+                                        }\n+                                    }\n+                                }\n                             }\n                             None => {\n                                 err.span_label("}, {"sha": "730ace7858bd19c572b902e4ad4ee259c1de57e7", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `dt` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "f0df7109ba4b6bce70d48a4c5cd1958c6974a371", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `dt` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "2072bc6a756c9f32f0045e5464172fa3e0a5a218", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `dt` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "172db9ced82f9ef706d3d147f374c0574f4f0cf8", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `x` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "01a53cdd6dd4a21f9f6c696a38bc27addb0e4adc", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `gen` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `ref_` does not live long enough\n   --> $DIR/dropck.rs:22:11\n@@ -26,6 +28,8 @@ LL |   }\n    |   |\n    |   borrowed value only lives until here\n    |   borrow later used here, when `gen` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b268f6e3ab014ea0c6b368b5384e4465d822b56b", "filename": "src/test/ui/span/dropck-object-cycle.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `m` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "86a4f0e13b512b07312eb58c389e10b8d4ce59ee", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `d1` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `d2` does not live long enough\n   --> $DIR/dropck_direct_cycle_with_drop.rs:46:19\n@@ -21,6 +23,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `d1` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0eb84e4a7d0b23394a4106bfcf2760787abc0b86", "filename": "src/test/ui/span/dropck_misc_variants.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -8,6 +8,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `_w` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `v` does not live long enough\n   --> $DIR/dropck_misc_variants.rs:41:27\n@@ -20,6 +22,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `_w` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ec1df8aeca15a312d1b6c4f9f6c90d7e014dd29a", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `_d` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "288c196b27b2df2413bf402aaa644ceacc0722f8", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -8,6 +8,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `_d` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:53:33\n@@ -19,6 +21,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `_d` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `d1` does not live long enough\n   --> $DIR/issue-24805-dropck-trait-has-items.rs:59:20\n@@ -30,6 +34,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `_d` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c89e68bcd0ae06f0ef10d18f705dbcb17b898133", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -8,6 +8,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `d2` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "bea6dc6b3f6a06d4a46af3c71b755bb1eab14301", "filename": "src/test/ui/span/issue-26656.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -8,6 +8,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `zook` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "3ed13f2653ccd769a884f130c206acfe0de6fb32", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `foo` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "ce9e75b44831874efa2cb710545b4d6490ffc134", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `foo1` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "fcdc1c3f9452de27eb491f269f1328bde8f90180", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `foo1` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "6300bb3eacd643821b1c92e8c773964651ac3bdc", "filename": "src/test/ui/span/issue28498-reject-trait-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `foo1` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to previous error\n "}, {"sha": "6ebbf3e1ec4d22017d985637808dbe699648179d", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -63,6 +63,8 @@ LL |     }\n ...\n LL | }\n    | - borrow later used here, when `tx` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to 6 previous errors\n "}, {"sha": "9d89fac08ffe2eb0a8c7c5596065e27897c34470", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4fc43cb20a09e5db76f355596205c48cd8b4615/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=f4fc43cb20a09e5db76f355596205c48cd8b4615", "patch": "@@ -9,6 +9,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `v` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/vec_refs_data_with_early_death.rs:27:12\n@@ -21,6 +23,8 @@ LL | }\n    | |\n    | borrowed value only lives until here\n    | borrow later used here, when `v` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n \n error: aborting due to 2 previous errors\n "}]}