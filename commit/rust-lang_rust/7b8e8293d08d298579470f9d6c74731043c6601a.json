{"sha": "7b8e8293d08d298579470f9d6c74731043c6601a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOGU4MjkzZDA4ZDI5ODU3OTQ3MGY5ZDZjNzQ3MzEwNDNjNjYwMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T23:10:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T23:10:00Z"}, "message": "Auto merge of #4846 - flip1995:rustup, r=Manishearth\n\nRustup to rustc 1.41.0-nightly (e87a205c2 2019-11-27)\n\nRustups:\n\n- rust-lang/rust#66671 (Ast address-of)\n- rust-lang/rust#64856 (Scope format! temporaries)\n - http://github.com/rust-lang/rust/pull/66719\n\nchangelog: none", "tree": {"sha": "c3cbca7f6043a5cbe59154bbd9d5be9be04208e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3cbca7f6043a5cbe59154bbd9d5be9be04208e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b8e8293d08d298579470f9d6c74731043c6601a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8e8293d08d298579470f9d6c74731043c6601a", "html_url": "https://github.com/rust-lang/rust/commit/7b8e8293d08d298579470f9d6c74731043c6601a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b8e8293d08d298579470f9d6c74731043c6601a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29777b5cc5d19a25518058d87d729bd2b538fee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/29777b5cc5d19a25518058d87d729bd2b538fee6", "html_url": "https://github.com/rust-lang/rust/commit/29777b5cc5d19a25518058d87d729bd2b538fee6"}, {"sha": "40c91ec75873700ccf8130b6138debfd5e5f7a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c91ec75873700ccf8130b6138debfd5e5f7a3e", "html_url": "https://github.com/rust-lang/rust/commit/40c91ec75873700ccf8130b6138debfd5e5f7a3e"}], "stats": {"total": 183, "additions": 99, "deletions": 84}, "files": [{"sha": "f53f5f3e90479a799fd94dd511475e2f7f783e8f", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -101,7 +101,9 @@ fn check_arg(name: Name, arg: Name, needle: &Expr) -> bool {\n \n fn get_path_name(expr: &Expr) -> Option<Name> {\n     match expr.kind {\n-        ExprKind::Box(ref e) | ExprKind::AddrOf(_, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => get_path_name(e),\n+        ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => {\n+            get_path_name(e)\n+        },\n         ExprKind::Block(ref b, _) => {\n             if b.stmts.is_empty() {\n                 b.expr.as_ref().and_then(|p| get_path_name(p))"}, {"sha": "1ba539c85b07d7a747e8e189e7737f9eca28b86f", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -105,7 +105,7 @@ fn check_cond<'a, 'tcx, 'b>(\n         if let ExprKind::MethodCall(ref path, _, ref params) = check.kind;\n         if params.len() >= 2;\n         if path.ident.name == sym!(contains_key);\n-        if let ExprKind::AddrOf(_, ref key) = params[1].kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref key) = params[1].kind;\n         then {\n             let map = &params[0];\n             let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(map));"}, {"sha": "a7dd98300061a68dcbcc6a6677da49fa78cf4012", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                     // do not suggest to dereference literals\n                     (&ExprKind::Lit(..), _) | (_, &ExprKind::Lit(..)) => {},\n                     // &foo == &bar\n-                    (&ExprKind::AddrOf(_, ref l), &ExprKind::AddrOf(_, ref r)) => {\n+                    (&ExprKind::AddrOf(BorrowKind::Ref, _, ref l), &ExprKind::AddrOf(BorrowKind::Ref, _, ref r)) => {\n                         let lty = cx.tables.expr_ty(l);\n                         let rty = cx.tables.expr_ty(r);\n                         let lcpy = is_copy(cx, lty);\n@@ -143,7 +143,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         }\n                     },\n                     // &foo == bar\n-                    (&ExprKind::AddrOf(_, ref l), _) => {\n+                    (&ExprKind::AddrOf(BorrowKind::Ref, _, ref l), _) => {\n                         let lty = cx.tables.expr_ty(l);\n                         let lcpy = is_copy(cx, lty);\n                         if (requires_ref || lcpy)\n@@ -161,7 +161,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         }\n                     },\n                     // foo == &bar\n-                    (_, &ExprKind::AddrOf(_, ref r)) => {\n+                    (_, &ExprKind::AddrOf(BorrowKind::Ref, _, ref r)) => {\n                         let rty = cx.tables.expr_ty(r);\n                         let rcpy = is_copy(cx, rty);\n                         if (requires_ref || rcpy)"}, {"sha": "e32e15be0530a344b723243bdcebe984dba6e71b", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             // ```\n             //\n             // TODO: fix this\n-            ExprKind::AddrOf(_, _) => {\n+            ExprKind::AddrOf(_, _, _) => {\n                 return;\n             }\n             _ => {}"}, {"sha": "e89c8fc6c1a8df11022c1c7283438329229e47f2", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -135,7 +135,7 @@ fn write_output_string(write_args: &HirVec<Expr>) -> Option<String> {\n         if write_args.len() > 1;\n         if let ExprKind::Call(_, ref output_args) = write_args[1].kind;\n         if output_args.len() > 0;\n-        if let ExprKind::AddrOf(_, ref output_string_expr) = output_args[0].kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref output_string_expr) = output_args[0].kind;\n         if let ExprKind::Array(ref string_exprs) = output_string_expr.kind;\n         // we only want to provide an automatic suggestion for simple (non-format) strings\n         if string_exprs.len() == 1;"}, {"sha": "33ce4f8ffe74f85482db260d1ca61252e2005e05", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -73,7 +73,7 @@ fn span_useless_format<T: LintContext>(cx: &T, span: Span, help: &str, mut sugg:\n \n fn on_argumentv1_new<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, arms: &'tcx [Arm]) -> Option<String> {\n     if_chain! {\n-        if let ExprKind::AddrOf(_, ref format_args) = expr.kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref format_args) = expr.kind;\n         if let ExprKind::Array(ref elems) = arms[0].body.kind;\n         if elems.len() == 1;\n         if let Some(args) = match_function_call(cx, &elems[0], &paths::FMT_ARGUMENTV1_NEW);\n@@ -115,13 +115,13 @@ fn on_new_v1<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<S\n         if let Some(args) = match_function_call(cx, expr, &paths::FMT_ARGUMENTS_NEW_V1);\n         if args.len() == 2;\n         // Argument 1 in `new_v1()`\n-        if let ExprKind::AddrOf(_, ref arr) = args[0].kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arr) = args[0].kind;\n         if let ExprKind::Array(ref pieces) = arr.kind;\n         if pieces.len() == 1;\n         if let ExprKind::Lit(ref lit) = pieces[0].kind;\n         if let LitKind::Str(ref s, _) = lit.node;\n         // Argument 2 in `new_v1()`\n-        if let ExprKind::AddrOf(_, ref arg1) = args[1].kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg1) = args[1].kind;\n         if let ExprKind::Match(ref matchee, ref arms, MatchSource::Normal) = arg1.kind;\n         if arms.len() == 1;\n         if let ExprKind::Tup(ref tup) = matchee.kind;\n@@ -143,13 +143,13 @@ fn on_new_v1_fmt<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Opti\n         if args.len() == 3;\n         if check_unformatted(&args[2]);\n         // Argument 1 in `new_v1_formatted()`\n-        if let ExprKind::AddrOf(_, ref arr) = args[0].kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arr) = args[0].kind;\n         if let ExprKind::Array(ref pieces) = arr.kind;\n         if pieces.len() == 1;\n         if let ExprKind::Lit(ref lit) = pieces[0].kind;\n         if let LitKind::Str(..) = lit.node;\n         // Argument 2 in `new_v1_formatted()`\n-        if let ExprKind::AddrOf(_, ref arg1) = args[1].kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg1) = args[1].kind;\n         if let ExprKind::Match(ref matchee, ref arms, MatchSource::Normal) = arg1.kind;\n         if arms.len() == 1;\n         if let ExprKind::Tup(ref tup) = matchee.kind;\n@@ -173,7 +173,7 @@ fn on_new_v1_fmt<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Opti\n /// ```\n fn check_unformatted(expr: &Expr) -> bool {\n     if_chain! {\n-        if let ExprKind::AddrOf(_, ref expr) = expr.kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref expr) = expr.kind;\n         if let ExprKind::Array(ref exprs) = expr.kind;\n         if exprs.len() == 1;\n         // struct `core::fmt::rt::v1::Argument`"}, {"sha": "effd2dc58d4992714b7af26246fa349d0f08510e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     tys.clear();\n                 }\n             },\n-            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(hir::Mutability::Mutable, ref target) => {\n+            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mutable, ref target) => {\n                 self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},"}, {"sha": "63eb6187e3e2c672e776207d83dad087ece03e52", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -163,7 +163,7 @@ fn is_infinite(cx: &LateContext<'_, '_>, expr: &Expr) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(ref block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(ref e) | ExprKind::AddrOf(_, ref e) => is_infinite(cx, e),\n+        ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) => is_infinite(cx, e),\n         ExprKind::Call(ref path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 match_qpath(qpath, &paths::REPEAT).into()"}, {"sha": "0f0323c13aa1e3565330494e1aa14e9fe11c53e3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -674,7 +674,7 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Cast(ref e, _)\n         | ExprKind::Type(ref e, _)\n         | ExprKind::Field(ref e, _)\n-        | ExprKind::AddrOf(_, ref e)\n+        | ExprKind::AddrOf(_, _, ref e)\n         | ExprKind::Struct(_, _, Some(ref e))\n         | ExprKind::Repeat(ref e, _)\n         | ExprKind::DropTemps(ref e) => never_loop_expr(e, main_loop_id),\n@@ -1504,7 +1504,9 @@ fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut\n         // (&x).into_iter() ==> x.iter()\n         // (&mut x).into_iter() ==> x.iter_mut()\n         match &arg.kind {\n-            ExprKind::AddrOf(mutability, arg_inner) if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() => {\n+            ExprKind::AddrOf(BorrowKind::Ref, mutability, arg_inner)\n+                if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() =>\n+            {\n                 let meth_name = match mutability {\n                     Mutability::Mutable => \"iter_mut\",\n                     Mutability::Immutable => \"iter\",\n@@ -1514,7 +1516,7 @@ fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut\n                     sugg::Sugg::hir_with_applicability(cx, &arg_inner, \"_\", applic_ref).maybe_par(),\n                     meth_name,\n                 )\n-            },\n+            }\n             _ => format!(\n                 \"{}.into_iter()\",\n                 sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()\n@@ -1549,7 +1551,7 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                 Mutability::Mutable => \"_mut\",\n             };\n             let arg = match arg.kind {\n-                ExprKind::AddrOf(_, ref expr) => &**expr,\n+                ExprKind::AddrOf(BorrowKind::Ref, _, ref expr) => &**expr,\n                 _ => arg,\n             };\n \n@@ -1873,7 +1875,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 self.prefer_mutable = false;\n                 self.visit_expr(rhs);\n             },\n-            ExprKind::AddrOf(mutbl, ref expr) => {\n+            ExprKind::AddrOf(BorrowKind::Ref, mutbl, ref expr) => {\n                 if mutbl == Mutability::Mutable {\n                     self.prefer_mutable = true;\n                 }\n@@ -2090,7 +2092,9 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::Assign(ref lhs, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n-                    ExprKind::AddrOf(mutability, _) if mutability == Mutability::Mutable => *state = VarState::DontWarn,\n+                    ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mutable => {\n+                        *state = VarState::DontWarn\n+                    },\n                     _ => (),\n                 }\n             }\n@@ -2172,7 +2176,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                             VarState::DontWarn\n                         }\n                     },\n-                    ExprKind::AddrOf(mutability, _) if mutability == Mutability::Mutable => {\n+                    ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mutable => {\n                         self.state = VarState::DontWarn\n                     },\n                     _ => (),"}, {"sha": "96daaec7f526158c898787fa3c77c38dc23fb11a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -570,7 +570,7 @@ fn is_panic_block(block: &Block) -> bool {\n fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         let mut suggs = Vec::new();\n-        let (title, msg) = if let ExprKind::AddrOf(Mutability::Immutable, ref inner) = ex.kind {\n+        let (title, msg) = if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Immutable, ref inner) = ex.kind {\n             let span = ex.span.source_callsite();\n             suggs.push((span, Sugg::hir_with_macro_callsite(cx, inner, \"..\").to_string()));\n             ("}, {"sha": "14b9fd84c1fe0202db1311f275d9a58d17825e9e", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{match_def_path, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n-use rustc::hir::{Expr, ExprKind};\n+use rustc::hir::{BorrowKind, Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n                             let mut derefs_needed = ptr_depth;\n                             let mut cur_expr = param;\n                             while derefs_needed > 0  {\n-                                if let ExprKind::AddrOf(_, ref inner_expr) = cur_expr.kind {\n+                                if let ExprKind::AddrOf(BorrowKind::Ref, _, ref inner_expr) = cur_expr.kind {\n                                     derefs_needed -= 1;\n                                     cur_expr = inner_expr;\n                                 } else {"}, {"sha": "6a3fda91e36cb7ad67be97454956ad60315892b1", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{\n     match_def_path, match_qpath, paths, snippet_with_applicability, span_help_and_lint, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc::hir::{Expr, ExprKind, Mutability, QPath};\n+use rustc::hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -90,7 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n                         // argument's type. All that's left is to get\n                         // replacee's path.\n                         let replaced_path = match func_args[0].kind {\n-                            ExprKind::AddrOf(Mutability::Mutable, ref replaced) => {\n+                            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, ref replaced) => {\n                                 if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n                                     replaced_path\n                                 } else {"}, {"sha": "5448eecb90e97617e21822c82d80794f02ba5307", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -1519,7 +1519,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         let mut arg_root = arg;\n         loop {\n             arg_root = match &arg_root.kind {\n-                hir::ExprKind::AddrOf(_, expr) => expr,\n+                hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, expr) => expr,\n                 hir::ExprKind::MethodCall(method_name, _, call_args) => {\n                     if call_args.len() == 1\n                         && (method_name.ident.name == sym!(as_str) || method_name.ident.name == sym!(as_ref))\n@@ -1561,7 +1561,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         applicability: &mut Applicability,\n     ) -> Vec<String> {\n         if_chain! {\n-            if let hir::ExprKind::AddrOf(_, ref format_arg) = a.kind;\n+            if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, ref format_arg) = a.kind;\n             if let hir::ExprKind::Match(ref format_arg_expr, _, _) = format_arg.kind;\n             if let hir::ExprKind::Tup(ref format_arg_expr_tup) = format_arg_expr.kind;\n \n@@ -1578,7 +1578,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n \n     fn is_call(node: &hir::ExprKind) -> bool {\n         match node {\n-            hir::ExprKind::AddrOf(_, expr) => {\n+            hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, expr) => {\n                 is_call(&expr.kind)\n             },\n             hir::ExprKind::Call(..)\n@@ -1610,30 +1610,35 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n     let mut applicability = Applicability::MachineApplicable;\n \n     //Special handling for `format!` as arg_root\n-    if let hir::ExprKind::Call(ref inner_fun, ref inner_args) = arg_root.kind {\n-        if is_expn_of(inner_fun.span, \"format\").is_some() && inner_args.len() == 1 {\n-            if let hir::ExprKind::Call(_, format_args) = &inner_args[0].kind {\n-                let fmt_spec = &format_args[0];\n-                let fmt_args = &format_args[1];\n+    if_chain! {\n+        if let hir::ExprKind::Block(block, None) = &arg_root.kind;\n+        if block.stmts.len() == 1;\n+        if let hir::StmtKind::Local(local) = &block.stmts[0].kind;\n+        if let Some(arg_root) = &local.init;\n+        if let hir::ExprKind::Call(ref inner_fun, ref inner_args) = arg_root.kind;\n+        if is_expn_of(inner_fun.span, \"format\").is_some() && inner_args.len() == 1;\n+        if let hir::ExprKind::Call(_, format_args) = &inner_args[0].kind;\n+        then {\n+            let fmt_spec = &format_args[0];\n+            let fmt_args = &format_args[1];\n \n-                let mut args = vec![snippet(cx, fmt_spec.span, \"..\").into_owned()];\n+            let mut args = vec![snippet(cx, fmt_spec.span, \"..\").into_owned()];\n \n-                args.extend(generate_format_arg_snippet(cx, fmt_args, &mut applicability));\n+            args.extend(generate_format_arg_snippet(cx, fmt_args, &mut applicability));\n \n-                let sugg = args.join(\", \");\n+            let sugg = args.join(\", \");\n \n-                span_lint_and_sugg(\n-                    cx,\n-                    EXPECT_FUN_CALL,\n-                    span_replace_word,\n-                    &format!(\"use of `{}` followed by a function call\", name),\n-                    \"try this\",\n-                    format!(\"unwrap_or_else({} panic!({}))\", closure_args, sugg),\n-                    applicability,\n-                );\n+            span_lint_and_sugg(\n+                cx,\n+                EXPECT_FUN_CALL,\n+                span_replace_word,\n+                &format!(\"use of `{}` followed by a function call\", name),\n+                \"try this\",\n+                format!(\"unwrap_or_else({} panic!({}))\", closure_args, sugg),\n+                applicability,\n+            );\n \n-                return;\n-            }\n+            return;\n         }\n     }\n "}, {"sha": "2b978230cca160c77d87c1df8f3159694240f44c", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -57,8 +57,8 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             // Let's ignore the generated code.\n             intravisit::walk_expr(self, arg);\n             intravisit::walk_expr(self, body);\n-        } else if let hir::ExprKind::AddrOf(hir::Mutability::Mutable, ref e) = expr.kind {\n-            if let hir::ExprKind::AddrOf(hir::Mutability::Mutable, _) = e.kind {\n+        } else if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mutable, ref e) = expr.kind {\n+            if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mutable, _) = e.kind {\n                 span_lint(\n                     self.cx,\n                     MUT_MUT,"}, {"sha": "9788e6cda9151c3f1f9efa45d970d462d06bdb4c", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -60,7 +60,7 @@ fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], typ\n                         mutbl: Mutability::Immutable,\n                         ..\n                     }) => {\n-                        if let ExprKind::AddrOf(Mutability::Mutable, _) = argument.kind {\n+                        if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, _) = argument.kind {\n                             span_lint(\n                                 cx,\n                                 UNNECESSARY_MUT_PASSED,"}, {"sha": "67cb696b402e9047b410b7315f372caa455965fd", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{is_direct_expn_of, span_lint};\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc::hir::{Expr, ExprKind, Mutability, StmtKind, UnOp};\n+use rustc::hir::{BorrowKind, Expr, ExprKind, Mutability, StmtKind, UnOp};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint, ty};\n use syntax_pos::Span;\n@@ -77,14 +77,14 @@ fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr) -> Optio\n                         if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n                         if conditions.len() == 2;\n                         then {\n-                            if let ExprKind::AddrOf(_, ref lhs) = conditions[0].kind {\n+                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n                                 let mut visitor = MutArgVisitor::new(cx);\n                                 visitor.visit_expr(lhs);\n                                 if let Some(span) = visitor.expr_span() {\n                                     return Some(span);\n                                 }\n                             }\n-                            if let ExprKind::AddrOf(_, ref rhs) = conditions[1].kind {\n+                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n                                 let mut visitor = MutArgVisitor::new(cx);\n                                 visitor.visit_expr(rhs);\n                                 if let Some(span) = visitor.expr_span() {\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         match expr.kind {\n-            ExprKind::AddrOf(Mutability::Mutable, _) => {\n+            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, _) => {\n                 self.found = true;\n                 return;\n             },"}, {"sha": "2b4d8d0c7da2615f4970c9b0856beba5c4c36228", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -4,7 +4,7 @@\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n+use rustc::hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         if e.span.from_expansion() || self.derived_item.is_some() {\n             return;\n         }\n-        if let ExprKind::AddrOf(Mutability::Immutable, ref inner) = e.kind {\n+        if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Immutable, ref inner) = e.kind {\n             if let ty::Ref(..) = cx.tables.expr_ty(inner).kind {\n                 for adj3 in cx.tables.expr_adjustments(e).windows(3) {\n                     if let [Adjustment {"}, {"sha": "63cd44fb2a51bedaf2ec4fe564daaae5600029ac", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -58,7 +58,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         | ExprKind::Type(ref inner, _)\n         | ExprKind::Unary(_, ref inner)\n         | ExprKind::Field(ref inner, _)\n-        | ExprKind::AddrOf(_, ref inner)\n+        | ExprKind::AddrOf(_, _, ref inner)\n         | ExprKind::Box(ref inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, ref fields, ref base) => {\n             !has_drop(cx, cx.tables.expr_ty(expr))\n@@ -134,7 +134,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         | ExprKind::Type(ref inner, _)\n         | ExprKind::Unary(_, ref inner)\n         | ExprKind::Field(ref inner, _)\n-        | ExprKind::AddrOf(_, ref inner)\n+        | ExprKind::AddrOf(_, _, ref inner)\n         | ExprKind::Box(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, ref fields, ref base) => {\n             if has_drop(cx, cx.tables.expr_ty(expr)) {"}, {"sha": "28ff690758578929396d0b6a1fdea0f6d1a294e8", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -37,7 +37,7 @@ impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n-            if let ExprKind::AddrOf(_, ref addrof_target) = without_parens(deref_target).kind;\n+            if let ExprKind::AddrOf(_, _, ref addrof_target) = without_parens(deref_target).kind;\n             if !in_macro(addrof_target.span);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -80,7 +80,7 @@ impl EarlyLintPass for RefInDeref {\n         if_chain! {\n             if let ExprKind::Field(ref object, _) = e.kind;\n             if let ExprKind::Paren(ref parened) = object.kind;\n-            if let ExprKind::AddrOf(_, ref inner) = parened.kind;\n+            if let ExprKind::AddrOf(_, _, ref inner) = parened.kind;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 span_lint_and_sugg("}, {"sha": "f9734441d5bade573b205ffa8bf50667fd6f26ac", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -186,7 +186,7 @@ fn is_trivial_regex(s: &regex_syntax::hir::Hir) -> Option<&'static str> {\n \n fn check_set<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: bool) {\n     if_chain! {\n-        if let ExprKind::AddrOf(_, ref expr) = expr.kind;\n+        if let ExprKind::AddrOf(BorrowKind::Ref, _, ref expr) = expr.kind;\n         if let ExprKind::Array(ref exprs) = expr.kind;\n         then {\n             for expr in exprs {"}, {"sha": "f6749a31419edc7ff9e061a026562d27a72d91a1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -313,9 +313,10 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n         return;\n     }\n     match expr.kind {\n-        ExprKind::Unary(_, ref e) | ExprKind::Field(ref e, _) | ExprKind::AddrOf(_, ref e) | ExprKind::Box(ref e) => {\n-            check_expr(cx, e, bindings)\n-        },\n+        ExprKind::Unary(_, ref e)\n+        | ExprKind::Field(ref e, _)\n+        | ExprKind::AddrOf(_, _, ref e)\n+        | ExprKind::Box(ref e) => check_expr(cx, e, bindings),\n         ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, _, _) => check_block(cx, block, bindings),\n         // ExprKind::Call\n         // ExprKind::MethodCall\n@@ -365,7 +366,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n \n fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n     match expr.kind {\n-        ExprKind::Box(ref inner) | ExprKind::AddrOf(_, ref inner) => is_self_shadow(name, inner),\n+        ExprKind::Box(ref inner) | ExprKind::AddrOf(_, _, ref inner) => is_self_shadow(name, inner),\n         ExprKind::Block(ref block, _) => {\n             block.stmts.is_empty() && block.expr.as_ref().map_or(false, |e| is_self_shadow(name, e))\n         },"}, {"sha": "10f36d7fd5b24f84a4b870e6b2c9ba7323b7f64b", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -62,7 +62,7 @@ pub struct TriviallyCopyPassByRef {\n impl<'a, 'tcx> TriviallyCopyPassByRef {\n     pub fn new(limit: Option<u64>, target: &SessionConfig) -> Self {\n         let limit = limit.unwrap_or_else(|| {\n-            let bit_width = target.usize_ty.bit_width().expect(\"usize should have a width\") as u64;\n+            let bit_width = u64::from(target.ptr_width);\n             // Cap the calculated bit width at 32-bits to reduce\n             // portability problems between 32 and 64-bit targets\n             let bit_width = cmp::min(bit_width, 32);"}, {"sha": "c5d0706959f82b84b93d1f82b259d785601f169d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -425,9 +425,12 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = path_pat;\n                 self.print_qpath(path);\n             },\n-            ExprKind::AddrOf(mutability, ref inner) => {\n+            ExprKind::AddrOf(kind, mutability, ref inner) => {\n                 let inner_pat = self.next(\"inner\");\n-                println!(\"AddrOf(Mutability::{:?}, ref {}) = {};\", mutability, inner_pat, current);\n+                println!(\n+                    \"AddrOf(BorrowKind::{:?}, Mutability::{:?}, ref {}) = {};\",\n+                    kind, mutability, inner_pat, current\n+                );\n                 self.current = inner_pat;\n                 self.visit_expr(inner);\n             },"}, {"sha": "c95287f83d17fbe76f6ae99ce65152addc798dd3", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -78,8 +78,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n \n         match (&left.kind, &right.kind) {\n-            (&ExprKind::AddrOf(l_mut, ref le), &ExprKind::AddrOf(r_mut, ref re)) => {\n-                l_mut == r_mut && self.eq_expr(le, re)\n+            (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n+                lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n             (&ExprKind::Continue(li), &ExprKind::Continue(ri)) => {\n                 both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n@@ -398,7 +398,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&e.kind).hash(&mut self.s);\n \n         match e.kind {\n-            ExprKind::AddrOf(m, ref e) => {\n+            ExprKind::AddrOf(kind, m, ref e) => {\n+                match kind {\n+                    BorrowKind::Ref => 0,\n+                    BorrowKind::Raw => 1,\n+                }\n+                .hash(&mut self.s);\n                 m.hash(&mut self.s);\n                 self.hash_expr(e);\n             },"}, {"sha": "285ce1f5fc45a9566c43619981c86d409dae998b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -264,8 +264,9 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n             println!(\"{}Relative Path, {:?}\", ind, ty);\n             println!(\"{}seg: {:?}\", ind, seg);\n         },\n-        hir::ExprKind::AddrOf(ref muta, ref e) => {\n+        hir::ExprKind::AddrOf(kind, ref muta, ref e) => {\n             println!(\"{}AddrOf\", ind);\n+            println!(\"kind: {:?}\", kind);\n             println!(\"mutability: {:?}\", muta);\n             print_expr(cx, e, indent + 1);\n         },"}, {"sha": "9106e6a8122b81bad4ce3c1d99848f41cd44240f", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessVec {\n         if_chain! {\n             if let ty::Ref(_, ty, _) = cx.tables.expr_ty_adjusted(expr).kind;\n             if let ty::Slice(..) = ty.kind;\n-            if let ExprKind::AddrOf(_, ref addressee) = expr.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref addressee) = expr.kind;\n             if let Some(vec_args) = higher::vec_macro(cx, addressee);\n             then {\n                 check_vec_macro(cx, &vec_args, expr.span);"}, {"sha": "b942b23cbcf74f867a2178f952ba70bd44664c70", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -22,7 +22,7 @@ if_chain! {\n     if let ExprKind::Path(ref path2) = func1.kind;\n     if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n     if args1.len() == 1;\n-    if let ExprKind::AddrOf(Mutability::Mutable, ref inner) = args1[0].kind;\n+    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, ref inner) = args1[0].kind;\n     if let ExprKind::Path(ref path3) = inner.kind;\n     if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/missing_const_for_fn/cant_be_const.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.stderr?ref=7b8e8293d08d298579470f9d6c74731043c6601a"}, {"sha": "cf2a42fa485d2670cd59b8b9e84aa2a8fcd7f2f7", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -71,7 +71,7 @@ fn or_fun_call() {\n \n     let opt = Some(1);\n     let hello = \"Hello\";\n-    let _ = opt.ok_or_else(|| format!(\"{} world.\", hello));\n+    let _ = opt.ok_or(format!(\"{} world.\", hello));\n }\n \n struct Foo(u8);"}, {"sha": "cb92892b8e10867143120b3648adc89323f14af5", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8e8293d08d298579470f9d6c74731043c6601a/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=7b8e8293d08d298579470f9d6c74731043c6601a", "patch": "@@ -72,17 +72,11 @@ error: use of `unwrap_or` followed by a function call\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n-error: use of `ok_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:74:17\n-   |\n-LL |     let _ = opt.ok_or(format!(\"{} world.\", hello));\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `ok_or_else(|| format!(\"{} world.\", hello))`\n-\n error: use of `or` followed by a function call\n   --> $DIR/or_fun_call.rs:95:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 13 previous errors\n "}]}