{"sha": "7a1fc9fce5e9d05864567fd3c36502198588a623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMWZjOWZjZTVlOWQwNTg2NDU2N2ZkM2MzNjUwMjE5ODU4OGE2MjM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T19:50:21Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T15:12:48Z"}, "message": "Use `utils::sugg` in `MATCH_BOOL`", "tree": {"sha": "d069d78f9a12c939842e5f08efe90a49c67d9996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d069d78f9a12c939842e5f08efe90a49c67d9996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a1fc9fce5e9d05864567fd3c36502198588a623", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdohwAAoJEF5CfHlMukXoeQYP/2M3QGi97TAQDOz2HcuBtZfd\nb4AHNA66e9IhxEGtn27I4EfTzkmVtNNarJDlvqievqBHzDV9gmuSCHePAiSkC+iZ\niACsBbfzFXUzx1B7nh0qk29rzTZWnlocrCFTWkSJfmqU0Ihkzsc7HcSWM8quPEvH\nokzBDtIpK3uDABj843tCfZ0RVhOAdtc7o1yGEpPkZDgI+zXnmDqcrHoasUQQIXWY\nJotnXwjo5UbQehx/KPXzWC7SneIjdMiQJEZSSDvduSECGJ02aoB/EBLXgOGMs07e\nc+1Dan1lfAbAVzT/rdUaioUd0JV6ul72/QVuF8N+ljHVv1VcTbf0d1NweShxALbi\n5KlIrlOvOTq22DHXve6oJXmiIVpULXDi4glC06giiZ8LRpbz9MJqWeTTb+VBzenX\n9Lq40a1UGJTVqyRa3LfXXklA+dsDMUfKNsj+meNzBHZ5yFzfuV/a2HqNhIh16Y9z\nGcWoQzBnR3wF6N3FgU41aeGI92SsmIXOQ6xKSxcpTCf4fpmG8vb6dfJ44n9jMxgt\nj3NUlA9U0rIY3C8/9ocEJuuBvJAkxA5DESQ/p6ELhwGxAtHAovJpAMP1dtr4Ppkh\n4xN95A8eAj8Vi7wbl+fRcFwujS6ES81S4sXH670OcRAt7uUnyf2BnqoGA9xjAkgv\n7G3pWe53H5YrQI7SX87b\n=2H7P\n-----END PGP SIGNATURE-----", "payload": "tree d069d78f9a12c939842e5f08efe90a49c67d9996\nparent 66808c1e776ca9303cc04abce4b3b95ee5b669fc\nauthor mcarton <cartonmartin+git@gmail.com> 1467229821 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467385968 +0200\n\nUse `utils::sugg` in `MATCH_BOOL`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1fc9fce5e9d05864567fd3c36502198588a623", "html_url": "https://github.com/rust-lang/rust/commit/7a1fc9fce5e9d05864567fd3c36502198588a623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a1fc9fce5e9d05864567fd3c36502198588a623/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66808c1e776ca9303cc04abce4b3b95ee5b669fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/66808c1e776ca9303cc04abce4b3b95ee5b669fc", "html_url": "https://github.com/rust-lang/rust/commit/66808c1e776ca9303cc04abce4b3b95ee5b669fc"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "8fddcb84922be2ae18b13cbeec429dc53b8a0875", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a1fc9fce5e9d05864567fd3c36502198588a623/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1fc9fce5e9d05864567fd3c36502198588a623/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=7a1fc9fce5e9d05864567fd3c36502198588a623", "patch": "@@ -10,6 +10,7 @@ use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n+use utils::sugg::Sugg;\n \n /// **What it does:** This lint checks for matches with a single arm where an `if let` will usually suffice.\n ///\n@@ -262,8 +263,9 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n                         Some(format!(\"if {} {}\", snippet(cx, ex.span, \"b\"), expr_block(cx, true_expr, None, \"..\")))\n                     }\n                     (true, false) => {\n-                        Some(format!(\"try\\nif !{} {}\",\n-                                     snippet(cx, ex.span, \"b\"),\n+                        let test = &Sugg::hir(cx, ex, \"..\");\n+                        Some(format!(\"if {} {}\",\n+                                     !test,\n                                      expr_block(cx, false_expr, None, \"..\")))\n                     }\n                     (true, true) => None,"}, {"sha": "f4b359b35de136fe8ae4530cc192c3f53108ae1b", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a1fc9fce5e9d05864567fd3c36502198588a623/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1fc9fce5e9d05864567fd3c36502198588a623/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=7a1fc9fce5e9d05864567fd3c36502198588a623", "patch": "@@ -123,6 +123,13 @@ impl<'a, 'b> std::ops::Sub<&'b Sugg<'b>> for &'a Sugg<'a> {\n     }\n }\n \n+impl<'a> std::ops::Not for &'a Sugg<'a> {\n+    type Output = Sugg<'static>;\n+    fn not(self) -> Sugg<'static> {\n+        make_unop(\"!\", self)\n+    }\n+}\n+\n struct ParenHelper<T> {\n     paren: bool,\n     wrapped: T,\n@@ -147,6 +154,15 @@ impl<T: std::fmt::Display> std::fmt::Display for ParenHelper<T> {\n     }\n }\n \n+/// Build the string for `<op> <expr>` adding parenthesis when necessary.\n+///\n+/// For convenience, the operator is taken as a string because all unary operators have the same\n+/// precedence.\n+pub fn make_unop(op: &str, expr: &Sugg) -> Sugg<'static> {\n+    let needs_paren = !matches!(*expr, Sugg::NonParen(..));\n+    Sugg::MaybeParen(format!(\"{}{}\", op, ParenHelper::new(needs_paren, expr)).into())\n+}\n+\n /// Build the string for `<lhs> <op> <rhs>` adding parenthesis when necessary.\n ///\n /// Precedence of shift operator relative to other arithmetic operation is often confusing so"}, {"sha": "e49aeaa6ec8622369055511284067dcad152c33d", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a1fc9fce5e9d05864567fd3c36502198588a623/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a1fc9fce5e9d05864567fd3c36502198588a623/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=7a1fc9fce5e9d05864567fd3c36502198588a623", "patch": "@@ -130,15 +130,24 @@ fn match_bool() {\n     match test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n     //~| HELP try\n-    //~^^ SUGGESTION if !test { println!(\"Noooo!\"); };\n+    //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n         true => (),\n         false => { println!(\"Noooo!\"); }\n     };\n \n     match test {\n     //~^ ERROR you seem to be trying to match on a boolean expression\n     //~| HELP try\n-    //~^^ SUGGESTION if !test { println!(\"Noooo!\"); };\n+    //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n+        false => { println!(\"Noooo!\"); }\n+        _ => (),\n+    };\n+\n+    match test && test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if !(test && test) { println!(\"Noooo!\"); };\n+    //~| ERROR equal expressions as operands\n         false => { println!(\"Noooo!\"); }\n         _ => (),\n     };"}]}