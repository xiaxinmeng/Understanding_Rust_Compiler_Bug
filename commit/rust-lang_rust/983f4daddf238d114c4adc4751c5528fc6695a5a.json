{"sha": "983f4daddf238d114c4adc4751c5528fc6695a5a", "node_id": "C_kwDOAAsO6NoAKDk4M2Y0ZGFkZGYyMzhkMTE0YzRhZGM0NzUxYzU1MjhmYzY2OTVhNWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T06:05:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T06:05:06Z"}, "message": "Auto merge of #100705 - compiler-errors:issue-100620, r=oli-obk\n\nAvoid reporting overflow in `is_impossible_method`\n\nFixes #100620\n\nWe're evaluating a new predicate in a different param-env than it was checked during typeck, so be more careful about handling overflow errors. Instead of using `FulfillmentCtxt`, using `InferCtxt::evaluate_obligation` by itself will give us back the overflow error, so we can throw it away properly.\n\nThis may give us more false-positives, but it doesn't regress the `<HashMap as Iterator>::rev` example that originally motivated adding `is_impossible_method` in the first place.", "tree": {"sha": "7d5722e127423873e593571da3211b37165c3b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5722e127423873e593571da3211b37165c3b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/983f4daddf238d114c4adc4751c5528fc6695a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/983f4daddf238d114c4adc4751c5528fc6695a5a", "html_url": "https://github.com/rust-lang/rust/commit/983f4daddf238d114c4adc4751c5528fc6695a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/983f4daddf238d114c4adc4751c5528fc6695a5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13a6aaffdf6bd6f1bce000b09aa390e93d6aca77", "url": "https://api.github.com/repos/rust-lang/rust/commits/13a6aaffdf6bd6f1bce000b09aa390e93d6aca77", "html_url": "https://github.com/rust-lang/rust/commit/13a6aaffdf6bd6f1bce000b09aa390e93d6aca77"}, {"sha": "c4a5b142113ce9d161fcb653fcb3ec11c45680bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a5b142113ce9d161fcb653fcb3ec11c45680bf", "html_url": "https://github.com/rust-lang/rust/commit/c4a5b142113ce9d161fcb653fcb3ec11c45680bf"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "e11ea7751aa731e93417895ba681a7f93a265bd2", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/983f4daddf238d114c4adc4751c5528fc6695a5a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983f4daddf238d114c4adc4751c5528fc6695a5a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=983f4daddf238d114c4adc4751c5528fc6695a5a", "patch": "@@ -579,9 +579,16 @@ fn is_impossible_method<'tcx>(\n     });\n \n     tcx.infer_ctxt().ignoring_regions().enter(|ref infcx| {\n-        let mut fulfill_ctxt = <dyn TraitEngine<'_>>::new(tcx);\n-        fulfill_ctxt.register_predicate_obligations(infcx, predicates_for_trait);\n-        !fulfill_ctxt.select_all_or_error(infcx).is_empty()\n+        for obligation in predicates_for_trait {\n+            // Ignore overflow error, to be conservative.\n+            if let Ok(result) = infcx.evaluate_obligation(&obligation)\n+                && !result.may_apply()\n+            {\n+                return true;\n+            }\n+        }\n+\n+        false\n     })\n }\n "}, {"sha": "097666eb515d1b891357cb25e91fcfa2abeccc01", "filename": "src/test/rustdoc/issue-100620.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/983f4daddf238d114c4adc4751c5528fc6695a5a/src%2Ftest%2Frustdoc%2Fissue-100620.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983f4daddf238d114c4adc4751c5528fc6695a5a/src%2Ftest%2Frustdoc%2Fissue-100620.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-100620.rs?ref=983f4daddf238d114c4adc4751c5528fc6695a5a", "patch": "@@ -0,0 +1,19 @@\n+pub trait Bar<S> {}\n+\n+pub trait Qux<T> {}\n+\n+pub trait Foo<T, S> {\n+    fn bar()\n+    where\n+        T: Bar<S>,\n+    {\n+    }\n+}\n+\n+pub struct Concrete;\n+\n+impl<S> Foo<(), S> for Concrete {}\n+\n+impl<T, S> Bar<S> for T where S: Qux<T> {}\n+\n+impl<T, S> Qux<T> for S where T: Bar<S> {}"}]}