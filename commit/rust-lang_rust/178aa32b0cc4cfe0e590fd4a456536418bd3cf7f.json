{"sha": "178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OGFhMzJiMGNjNGNmZTBlNTkwZmQ0YTQ1NjUzNjQxOGJkM2NmN2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T18:31:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-14T18:31:16Z"}, "message": "Make FunctionCx generic over Backend", "tree": {"sha": "7675fb99f0f565f95604023ef9320e6907b4c772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7675fb99f0f565f95604023ef9320e6907b4c772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "html_url": "https://github.com/rust-lang/rust/commit/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67ad9c120174356d7673238a735bea0d800ea52", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67ad9c120174356d7673238a735bea0d800ea52", "html_url": "https://github.com/rust-lang/rust/commit/f67ad9c120174356d7673238a735bea0d800ea52"}], "stats": {"total": 113, "additions": 66, "deletions": 47}, "files": [{"sha": "84abc5eced8e19b97484679e268389994238475e", "filename": "src/abi.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "patch": "@@ -13,7 +13,7 @@ enum PassMode {\n }\n \n impl PassMode {\n-    fn get_param_ty(self, _fx: &FunctionCx) -> Type {\n+    fn get_param_ty(self, _fx: &FunctionCx<impl Backend>) -> Type {\n         match self {\n             PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n             PassMode::ByVal(cton_type) => cton_type,\n@@ -163,7 +163,7 @@ pub fn get_function_name_and_sig<'a, 'tcx>(\n     (tcx.symbol_name(inst).as_str().to_string(), sig)\n }\n \n-impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     /// Instance must be monomorphized\n     pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n         let (name, sig) = get_function_name_and_sig(self.tcx, inst);\n@@ -243,7 +243,10 @@ impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n     }\n }\n \n-pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb: Ebb) {\n+pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    start_ebb: Ebb,\n+) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n     fx.tcx.sess.warn(&format!(\"ssa {:?}\", ssa_analyzed));\n \n@@ -414,7 +417,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n }\n \n pub fn codegen_call<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n@@ -507,7 +510,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn codegen_return(fx: &mut FunctionCx) {\n+pub fn codegen_return(fx: &mut FunctionCx<impl Backend>) {\n     match get_pass_mode(fx.tcx, fx.self_sig().abi, fx.return_type(), true) {\n         PassMode::NoPass | PassMode::ByRef => {\n             fx.bcx.ins().return_(&[]);\n@@ -521,7 +524,7 @@ pub fn codegen_return(fx: &mut FunctionCx) {\n }\n \n fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     fn_ty: Ty<'tcx>,\n     sig: FnSig<'tcx>,\n     args: &[CValue<'tcx>],"}, {"sha": "048f8812d444b2baf8c2136993fea920deba7adb", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "patch": "@@ -8,7 +8,7 @@ bitflags! {\n     }\n }\n \n-pub fn analyze<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx>) -> HashMap<Local, Flags> {\n+pub fn analyze<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx, impl Backend>) -> HashMap<Local, Flags> {\n     let mut flag_map = HashMap::new();\n \n     for local in fx.mir.local_decls.indices() {"}, {"sha": "4c91db448c7bd82e7888bc4f7c20d1363a56caef", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "patch": "@@ -126,7 +126,7 @@ fn verify_func(tcx: TyCtxt, writer: crate::pretty_clif::CommentWriter, func: &Fu\n     }\n }\n \n-fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>) {\n+fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) {\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n         let ebb = fx.get_ebb(bb);\n         fx.bcx.switch_to_block(ebb);\n@@ -225,7 +225,11 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>) {\n     fx.bcx.finalize();\n }\n \n-fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &Statement<'tcx>) {\n+fn trans_stmt<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    cur_ebb: Ebb,\n+    stmt: &Statement<'tcx>,\n+) {\n     fx.tcx.sess.warn(&format!(\"stmt {:?}\", stmt));\n \n     let inst = fx.bcx.func.layout.last_inst(cur_ebb).unwrap();\n@@ -504,7 +508,7 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n }\n \n pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     value: CValue<'tcx>,\n     dest_layout: TyLayout<'tcx>,\n ) -> CValue<'tcx> {\n@@ -630,7 +634,7 @@ macro_rules! binop_match {\n }\n \n fn trans_bool_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n@@ -663,7 +667,7 @@ fn trans_bool_binop<'a, 'tcx: 'a>(\n }\n \n pub fn trans_int_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n@@ -709,7 +713,7 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n }\n \n pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n@@ -771,7 +775,7 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n }\n \n fn trans_float_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n@@ -812,7 +816,7 @@ fn trans_float_binop<'a, 'tcx: 'a>(\n }\n \n fn trans_char_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n@@ -845,7 +849,7 @@ fn trans_char_binop<'a, 'tcx: 'a>(\n }\n \n fn trans_ptr_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n@@ -884,7 +888,7 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n }\n \n pub fn trans_place<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     place: &Place<'tcx>,\n ) -> CPlace<'tcx> {\n     match place {\n@@ -937,7 +941,7 @@ pub fn trans_place<'a, 'tcx: 'a>(\n }\n \n pub fn trans_operand<'a, 'tcx>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     operand: &Operand<'tcx>,\n ) -> CValue<'tcx> {\n     match operand {"}, {"sha": "e0c66218ba2645cbbe7df70386b99cee7f039a9f", "filename": "src/common.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "patch": "@@ -62,7 +62,7 @@ pub fn cton_type_from_ty<'a, 'tcx: 'a>(\n }\n \n fn codegen_field<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     base: Value,\n     layout: TyLayout<'tcx>,\n     field: mir::Field,\n@@ -92,7 +92,7 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'a, 'tcx>) -> Value\n+    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value\n     where\n         'tcx: 'a,\n     {\n@@ -114,7 +114,7 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn load_value<'a>(self, fx: &mut FunctionCx<'a, 'tcx>) -> Value\n+    pub fn load_value<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value\n     where\n         'tcx: 'a,\n     {\n@@ -138,7 +138,11 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub fn value_field<'a>(self, fx: &mut FunctionCx<'a, 'tcx>, field: mir::Field) -> CValue<'tcx>\n+    pub fn value_field<'a>(\n+        self,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        field: mir::Field,\n+    ) -> CValue<'tcx>\n     where\n         'tcx: 'a,\n     {\n@@ -152,7 +156,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     pub fn const_val<'a>(\n-        fx: &mut FunctionCx<'a, 'tcx>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         ty: Ty<'tcx>,\n         const_val: i64,\n     ) -> CValue<'tcx>\n@@ -187,7 +191,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn temp(fx: &mut FunctionCx<'a, 'tcx>, ty: Ty<'tcx>) -> CPlace<'tcx> {\n+    pub fn temp(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, ty: Ty<'tcx>) -> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n@@ -198,15 +202,15 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     }\n \n     pub fn from_stack_slot(\n-        fx: &mut FunctionCx<'a, 'tcx>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         stack_slot: StackSlot,\n         ty: Ty<'tcx>,\n     ) -> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n         CPlace::Addr(fx.bcx.ins().stack_addr(types::I64, stack_slot, 0), layout)\n     }\n \n-    pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx>) -> CValue<'tcx> {\n+    pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CValue<'tcx> {\n         match self {\n             CPlace::Var(var, layout) => CValue::ByVal(fx.bcx.use_var(var), layout),\n             CPlace::Addr(addr, layout) => CValue::ByRef(addr, layout),\n@@ -220,7 +224,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn write_cvalue(self, fx: &mut FunctionCx<'a, 'tcx>, from: CValue<'tcx>) {\n+    pub fn write_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, from: CValue<'tcx>) {\n         match (&self.layout().ty.sty, &from.layout().ty.sty) {\n             (TypeVariants::TyRef(_, t, dest_mut), TypeVariants::TyRef(_, u, src_mut))\n                 if (if *dest_mut != ::rustc::hir::Mutability::MutImmutable && src_mut != dest_mut {\n@@ -289,15 +293,23 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn place_field(self, fx: &mut FunctionCx<'a, 'tcx>, field: mir::Field) -> CPlace<'tcx> {\n+    pub fn place_field(\n+        self,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        field: mir::Field,\n+    ) -> CPlace<'tcx> {\n         let base = self.expect_addr();\n         let layout = self.layout();\n \n         let (field_ptr, field_layout) = codegen_field(fx, base, layout, field);\n         CPlace::Addr(field_ptr, field_layout)\n     }\n \n-    pub fn place_index(self, fx: &mut FunctionCx<'a, 'tcx>, index: Value) -> CPlace<'tcx> {\n+    pub fn place_index(\n+        self,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        index: Value,\n+    ) -> CPlace<'tcx> {\n         let addr = self.expect_addr();\n         let layout = self.layout();\n         match layout.ty.sty {\n@@ -322,14 +334,14 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn downcast_variant(self, fx: &FunctionCx<'a, 'tcx>, variant: usize) -> Self {\n+    pub fn downcast_variant(self, fx: &FunctionCx<'a, 'tcx, impl Backend>, variant: usize) -> Self {\n         let layout = self.layout().for_variant(fx, variant);\n         self.unchecked_cast_to(layout)\n     }\n }\n \n pub fn cton_intcast<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     val: Value,\n     to: Type,\n     signed: bool,\n@@ -349,9 +361,9 @@ pub fn cton_intcast<'a, 'tcx: 'a>(\n     }\n }\n \n-pub struct FunctionCx<'a, 'tcx: 'a> {\n+pub struct FunctionCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub module: &'a mut Module<CurrentBackend>,\n+    pub module: &'a mut Module<B>,\n     pub instance: Instance<'tcx>,\n     pub mir: &'tcx Mir<'tcx>,\n     pub param_substs: &'tcx Substs<'tcx>,\n@@ -362,7 +374,7 @@ pub struct FunctionCx<'a, 'tcx: 'a> {\n     pub constants: &'a mut crate::constant::ConstantCx,\n }\n \n-impl<'a, 'tcx: 'a> fmt::Debug for FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         writeln!(f, \"{:?}\", self.param_substs)?;\n         writeln!(f, \"{:?}\", self.local_map)?;\n@@ -379,7 +391,7 @@ impl<'a, 'tcx: 'a> fmt::Debug for FunctionCx<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a> LayoutOf for &'a FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx: 'a, B: Backend> LayoutOf for &'a FunctionCx<'a, 'tcx, B> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = TyLayout<'tcx>;\n \n@@ -389,25 +401,25 @@ impl<'a, 'tcx: 'a> LayoutOf for &'a FunctionCx<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> layout::HasTyCtxt<'tcx> for &'a FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx, B: Backend + 'a> layout::HasTyCtxt<'tcx> for &'a FunctionCx<'a, 'tcx, B> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'a, 'tcx> layout::HasDataLayout for &'a FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx, B: Backend + 'a> layout::HasDataLayout for &'a FunctionCx<'a, 'tcx, B> {\n     fn data_layout(&self) -> &layout::TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'a, 'tcx> HasTargetSpec for &'a FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx, B: Backend + 'a> HasTargetSpec for &'a FunctionCx<'a, 'tcx, B> {\n     fn target_spec(&self) -> &Target {\n         &self.tcx.sess.target.target\n     }\n }\n \n-impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "d745386e758b91cf51249b21fda46318ae0710fb", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "patch": "@@ -37,15 +37,15 @@ pub fn codegen_static<'a, 'tcx: 'a>(ccx: &mut ConstantCx, def_id: DefId) {\n }\n \n pub fn codegen_static_ref<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     static_: &Static<'tcx>,\n ) -> CPlace<'tcx> {\n     let data_id = data_id_for_static(fx.tcx, fx.module, static_.def_id);\n     cplace_for_dataid(fx, static_.ty, data_id)\n }\n \n pub fn trans_promoted<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     promoted: Promoted,\n ) -> CPlace<'tcx> {\n     let const_ = fx\n@@ -60,7 +60,7 @@ pub fn trans_promoted<'a, 'tcx: 'a>(\n }\n \n pub fn trans_constant<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n     let const_ = fx.monomorphize(&constant.literal);\n@@ -69,7 +69,7 @@ pub fn trans_constant<'a, 'tcx: 'a>(\n }\n \n fn force_eval_const<'a, 'tcx: 'a>(\n-    fx: &FunctionCx<'a, 'tcx>,\n+    fx: &FunctionCx<'a, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> &'tcx Const<'tcx> {\n     match const_.val {\n@@ -87,7 +87,7 @@ fn force_eval_const<'a, 'tcx: 'a>(\n }\n \n fn trans_const_value<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> CValue<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n@@ -114,7 +114,7 @@ fn trans_const_value<'a, 'tcx: 'a>(\n }\n \n fn trans_const_place<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> CPlace<'tcx> {\n     let alloc = fx.tcx.const_value_to_allocation(const_);\n@@ -139,7 +139,7 @@ fn data_id_for_static<B: Backend>(tcx: TyCtxt, module: &mut Module<B>, def_id: D\n }\n \n fn cplace_for_dataid<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n     data_id: DataId,\n ) -> CPlace<'tcx> {"}, {"sha": "d872a70b0fe5d6b9d26823a9fddcb828f7b2f497", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178aa32b0cc4cfe0e590fd4a456536418bd3cf7f/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=178aa32b0cc4cfe0e590fd4a456536418bd3cf7f", "patch": "@@ -34,7 +34,7 @@ impl FuncWriter for CommentWriter {\n     }\n }\n \n-impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n+impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     pub fn add_comment<'s, S: Into<Cow<'s, str>>>(&mut self, inst: Inst, comment: S) {\n         use std::collections::hash_map::Entry;\n         match self.comments.entry(inst) {"}]}