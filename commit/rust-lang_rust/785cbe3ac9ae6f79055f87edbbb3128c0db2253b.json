{"sha": "785cbe3ac9ae6f79055f87edbbb3128c0db2253b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NWNiZTNhYzlhZTZmNzkwNTVmODdlZGJiYjMxMjhjMGRiMjI1M2I=", "commit": {"author": {"name": "Paul Faria", "email": "paul_faria@ultimatesoftware.com", "date": "2015-05-14T17:43:11Z"}, "committer": {"name": "Paul Faria", "email": "paul_faria@ultimatesoftware.com", "date": "2015-05-14T17:43:11Z"}, "message": "I fixed the typo of the value of e in the memory tables. It is a reference to d, and so it should contain the memory location of d. I also fixed the incorrectly formatted tables.", "tree": {"sha": "e7e98fc4a21df689e6a24745abe2ab3857c2a552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e98fc4a21df689e6a24745abe2ab3857c2a552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/785cbe3ac9ae6f79055f87edbbb3128c0db2253b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/785cbe3ac9ae6f79055f87edbbb3128c0db2253b", "html_url": "https://github.com/rust-lang/rust/commit/785cbe3ac9ae6f79055f87edbbb3128c0db2253b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/785cbe3ac9ae6f79055f87edbbb3128c0db2253b/comments", "author": null, "committer": null, "parents": [{"sha": "af522079a2e13046cbf5f426874d7f6b672c501e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af522079a2e13046cbf5f426874d7f6b672c501e", "html_url": "https://github.com/rust-lang/rust/commit/af522079a2e13046cbf5f426874d7f6b672c501e"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "c47dbd9789354ec60cc2886ec150cda60ef331bc", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/785cbe3ac9ae6f79055f87edbbb3128c0db2253b/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/785cbe3ac9ae6f79055f87edbbb3128c0db2253b/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=785cbe3ac9ae6f79055f87edbbb3128c0db2253b", "patch": "@@ -80,15 +80,15 @@ This memory is kind of like a giant array: addresses start at zero and go\n up to the final number. So here\u2019s a diagram of our first stack frame:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 0       | x    | 42    |\n \n We\u2019ve got `x` located at address `0`, with the value `42`.\n \n When `foo()` is called, a new stack frame is allocated:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 2       | z    | 100   |\n | 1       | y    | 5     |\n | 0       | x    | 42    |\n@@ -107,7 +107,7 @@ value being stored.\n After `foo()` is over, its frame is deallocated:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 0       | x    | 42    |\n \n And then, after `main()`, even this last value goes away. Easy!\n@@ -142,13 +142,13 @@ fn main() {\n Okay, first, we call `main()`:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 0       | x    | 42    |\n \n Next up, `main()` calls `foo()`:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 3       | c    | 1     |\n | 2       | b    | 100   |\n | 1       | a    | 5     |\n@@ -157,7 +157,7 @@ Next up, `main()` calls `foo()`:\n And then `foo()` calls `bar()`:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 4       | i    | 6     |\n | 3       | c    | 1     |\n | 2       | b    | 100   |\n@@ -170,7 +170,7 @@ After `bar()` is over, its frame is deallocated, leaving just `foo()` and\n `main()`:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 3       | c    | 1     |\n | 2       | b    | 100   |\n | 1       | a    | 5     |\n@@ -179,7 +179,7 @@ After `bar()` is over, its frame is deallocated, leaving just `foo()` and\n And then `foo()` ends, leaving just `main()`\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 0       | x    | 42    |\n \n And then we\u2019re done. Getting the hang of it? It\u2019s like piling up dishes: you\n@@ -206,7 +206,7 @@ fn main() {\n Here\u2019s what happens in memory when `main()` is called:\n \n | Address | Name | Value  |\n-+---------+------+--------+\n+|---------|------|--------|\n | 1       | y    | 42     |\n | 0       | x    | ?????? |\n \n@@ -218,7 +218,7 @@ it allocates some memory for the heap, and puts `5` there. The memory now looks\n like this:\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n | 2<sup>30</sup>  |      | 5              |\n | ...             | ...  | ...            |\n | 1               | y    | 42             |\n@@ -243,7 +243,7 @@ layout of a program which has been running for a while now:\n \n \n | Address              | Name | Value                |\n-+----------------------+------+----------------------+\n+|----------------------|------|----------------------|\n | 2<sup>30</sup>       |      | 5                    |\n | (2<sup>30</sup>) - 1 |      |                      |\n | (2<sup>30</sup>) - 2 |      |                      |\n@@ -272,7 +272,7 @@ when it was created. Great! So when `x` goes away, it first frees the memory\n allocated on the heap:\n \n | Address | Name | Value  |\n-+---------+------+--------+\n+|---------|------|--------|\n | 1       | y    | 42     |\n | 0       | x    | ?????? |\n \n@@ -305,7 +305,7 @@ fn main() {\n When we enter `main()`, memory looks like this:\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 1       | y    | 0     |\n | 0       | x    | 5     |\n \n@@ -315,7 +315,7 @@ memory location that `x` lives at, which in this case is `0`.\n What about when we call `foo()`, passing `y` as an argument?\n \n | Address | Name | Value |\n-+---------+------+-------+\n+|---------|------|-------|\n | 3       | z    | 42    |\n | 2       | i    | 0     |\n | 1       | y    | 0     |\n@@ -367,7 +367,7 @@ fn main() {\n First, we call `main()`:\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n | 2<sup>30</sup>  |      | 20             |\n | ...             | ...  | ...            |\n | 2               | j    | 0              |\n@@ -380,7 +380,7 @@ value pointing there.\n Next, at the end of `main()`, `foo()` gets called:\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n | 2<sup>30</sup>  |      | 20             |\n | ...             | ...  | ...            |\n | 5               | z    | 4              |\n@@ -397,7 +397,7 @@ since `j` points at `h`.\n Next, `foo()` calls `baz()`, passing `z`:\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n | 2<sup>30</sup>  |      | 20             |\n | ...             | ...  | ...            |\n | 7               | g    | 100            |\n@@ -413,7 +413,7 @@ We\u2019ve allocated memory for `f` and `g`. `baz()` is very short, so when it\u2019s\n over, we get rid of its stack frame:\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n | 2<sup>30</sup>  |      | 20             |\n | ...             | ...  | ...            |\n | 5               | z    | 4              |\n@@ -426,11 +426,11 @@ over, we get rid of its stack frame:\n Next, `foo()` calls `bar()` with `x` and `z`:\n \n | Address              | Name | Value                |\n-+----------------------+------+----------------------+\n+|----------------------|------|----------------------|\n |  2<sup>30</sup>      |      | 20                   |\n | (2<sup>30</sup>) - 1 |      | 5                    |\n | ...                  | ...  | ...                  |\n-| 10                   | e    | 4                    |\n+| 10                   | e    | 9                    |\n | 9                    | d    | (2<sup>30</sup>) - 1 |\n | 8                    | c    | 5                    |\n | 7                    | b    | 4                    |\n@@ -449,13 +449,13 @@ case, we set up the variables as usual.\n At the end of `bar()`, it calls `baz()`:\n \n | Address              | Name | Value                |\n-+----------------------+------+----------------------+\n+|----------------------|------|----------------------|\n |  2<sup>30</sup>      |      | 20                   |\n | (2<sup>30</sup>) - 1 |      | 5                    |\n | ...                  | ...  | ...                  |\n | 12                   | g    | 100                  |\n | 11                   | f    | 4                    |\n-| 10                   | e    | 4                    |\n+| 10                   | e    | 9                    |\n | 9                    | d    | (2<sup>30</sup>) - 1 |\n | 8                    | c    | 5                    |\n | 7                    | b    | 4                    |\n@@ -473,11 +473,11 @@ far.\n After `baz()` is over, we get rid of `f` and `g`:\n \n | Address              | Name | Value                |\n-+----------------------+------+----------------------+\n+|----------------------|------|----------------------|\n |  2<sup>30</sup>      |      | 20                   |\n | (2<sup>30</sup>) - 1 |      | 5                    |\n | ...                  | ...  | ...                  |\n-| 10                   | e    | 4                    |\n+| 10                   | e    | 9                    |\n | 9                    | d    | (2<sup>30</sup>) - 1 |\n | 8                    | c    | 5                    |\n | 7                    | b    | 4                    |\n@@ -493,7 +493,7 @@ Next, we return from `bar()`. `d` in this case is a `Box<T>`, so it also frees\n what it points to: (2<sup>30</sup>) - 1.\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n |  2<sup>30</sup> |      | 20             |\n | ...             | ...  | ...            |\n | 5               | z    | 4              |\n@@ -506,7 +506,7 @@ what it points to: (2<sup>30</sup>) - 1.\n And after that, `foo()` returns:\n \n | Address         | Name | Value          |\n-+-----------------+------+----------------+\n+|-----------------|------|----------------|\n |  2<sup>30</sup> |      | 20             |\n | ...             | ...  | ...            |\n | 2               | j    | 0              |"}]}