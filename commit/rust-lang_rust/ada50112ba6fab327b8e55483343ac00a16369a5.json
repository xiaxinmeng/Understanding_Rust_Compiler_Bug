{"sha": "ada50112ba6fab327b8e55483343ac00a16369a5", "node_id": "C_kwDOAAsO6NoAKGFkYTUwMTEyYmE2ZmFiMzI3YjhlNTU0ODMzNDNhYzAwYTE2MzY5YTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-22T10:58:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-22T10:58:08Z"}, "message": "Rollup merge of #103224 - compiler-errors:semi-after-closure-in-macro, r=fee1-dead\n\nAllow semicolon after closure within parentheses in macros\n\n#88546 added some parsing logic that if we're parsing a closure, and we're within parentheses, and a semicolon follows, then we must be parsing something erroneous like: `f(|| a; b)`, so it replaces the closure body with an error expression. However, it's valid to parse those tokens if we're within a macro, as in #103222.\n\nThis is a bit unsatisfying fix. Is there a more robust way of checking that we're within a macro?\n\nI would also be open to removing this \"_It is likely that the closure body is a block but where the braces have been removed_\" check altogether at the expense of more verbose errors, since it seems very suspicious in the first place...\n\nFixes #103222.", "tree": {"sha": "ba1e8b155230bd22f6f19130e8ce03e18d338f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1e8b155230bd22f6f19130e8ce03e18d338f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada50112ba6fab327b8e55483343ac00a16369a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjU8zACRBK7hj4Ov3rIwAAeCsIAK54C5LPajo6wMQyu/uPn0qj\n47TKc1EFlmYRP2XWOKmNYA4mF8/r5p9DW0grMVQNdoZLdv7l1qBAW0hp5sB/v0Ph\nwXDZv/JJSONas7VB/BzxdNxx1mOyRdkPmCTChQTeV95/Qqrcqt1Ms+Q/aRfX+h0x\nGwfSHsBKPiY3R0HNyGQxBvuWEMqQw4PZ+9Il9D01TtVyUGT+ikHLShcTojmCSYeF\nlr/MH34LIPjIvTj6iDgAroFsOYY/q/1AhL/EAhZC7xRI0V+54zttw2dEqZO3dn/H\nzxPeAwLyUgxMigsjLcciOwG3QmXhvnD9X1o6jUNZghzP++SdIpkd7wjSgwLKKmE=\n=rhOW\n-----END PGP SIGNATURE-----\n", "payload": "tree ba1e8b155230bd22f6f19130e8ce03e18d338f41\nparent 988153cc2662eae41a6f779484ec65f0edba3716\nparent 3d7b1f0d18a4bdb667c6244b1748136c312cc9cf\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666436288 +0530\ncommitter GitHub <noreply@github.com> 1666436288 +0530\n\nRollup merge of #103224 - compiler-errors:semi-after-closure-in-macro, r=fee1-dead\n\nAllow semicolon after closure within parentheses in macros\n\n#88546 added some parsing logic that if we're parsing a closure, and we're within parentheses, and a semicolon follows, then we must be parsing something erroneous like: `f(|| a; b)`, so it replaces the closure body with an error expression. However, it's valid to parse those tokens if we're within a macro, as in #103222.\n\nThis is a bit unsatisfying fix. Is there a more robust way of checking that we're within a macro?\n\nI would also be open to removing this \"_It is likely that the closure body is a block but where the braces have been removed_\" check altogether at the expense of more verbose errors, since it seems very suspicious in the first place...\n\nFixes #103222.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada50112ba6fab327b8e55483343ac00a16369a5", "html_url": "https://github.com/rust-lang/rust/commit/ada50112ba6fab327b8e55483343ac00a16369a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada50112ba6fab327b8e55483343ac00a16369a5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "988153cc2662eae41a6f779484ec65f0edba3716", "url": "https://api.github.com/repos/rust-lang/rust/commits/988153cc2662eae41a6f779484ec65f0edba3716", "html_url": "https://github.com/rust-lang/rust/commit/988153cc2662eae41a6f779484ec65f0edba3716"}, {"sha": "3d7b1f0d18a4bdb667c6244b1748136c312cc9cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7b1f0d18a4bdb667c6244b1748136c312cc9cf", "html_url": "https://github.com/rust-lang/rust/commit/3d7b1f0d18a4bdb667c6244b1748136c312cc9cf"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "5b466cec8e15b089298bf245c4ab7976ae3c0c4e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada50112ba6fab327b8e55483343ac00a16369a5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada50112ba6fab327b8e55483343ac00a16369a5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ada50112ba6fab327b8e55483343ac00a16369a5", "patch": "@@ -2051,6 +2051,10 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == TokenKind::Semi\n             && matches!(self.token_cursor.frame.delim_sp, Some((Delimiter::Parenthesis, _)))\n+            // HACK: This is needed so we can detect whether we're inside a macro,\n+            // where regular assumptions about what tokens can follow other tokens\n+            // don't necessarily apply.\n+            && self.subparser_name.is_none()\n         {\n             // It is likely that the closure body is a block but where the\n             // braces have been removed. We will recover and eat the next"}, {"sha": "14efb6100b0a568a1ce4be674a56044e227ac1f5", "filename": "src/test/ui/parser/semi-after-closure-in-macro.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ada50112ba6fab327b8e55483343ac00a16369a5/src%2Ftest%2Fui%2Fparser%2Fsemi-after-closure-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada50112ba6fab327b8e55483343ac00a16369a5/src%2Ftest%2Fui%2Fparser%2Fsemi-after-closure-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsemi-after-closure-in-macro.rs?ref=ada50112ba6fab327b8e55483343ac00a16369a5", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+// Checks that the fix in #103222 doesn't also disqualify semicolons after\n+// closures within parentheses *in macros*, where they're totally allowed.\n+\n+macro_rules! m {\n+    (($expr:expr ; )) => {\n+        $expr\n+    };\n+}\n+\n+fn main() {\n+    let x = m!(( ||() ; ));\n+}"}]}