{"sha": "7f8f569c58583915a6e6ccae8292fa078d6bed70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOGY1NjljNTg1ODM5MTVhNmU2Y2NhZTgyOTJmYTA3OGQ2YmVkNzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-18T19:26:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-18T19:26:08Z"}, "message": "Merge #9330\n\n9330: minor: use minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4f03ef4a9b684ba96da926ee2ffabcf7398b4f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f03ef4a9b684ba96da926ee2ffabcf7398b4f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8f569c58583915a6e6ccae8292fa078d6bed70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzPNQCRBK7hj4Ov3rIwAA/qQIAEYB212W1ONS1ULc6g2eMhVz\nVOQyxJT19TWD/Pz/cU7qsshqWa+d5JsVhPaADbEOseAnkStd1NvKScangznYDBzw\nycx+/YTWhFjeRNyncIpOCU5DknbhJTeHgKcVWA1JnhIIz9A4jZHoV1/CuzfJScvQ\nUTkZG7DLUQfd9fpa7wcWHcHnI0nZ+aPYga4IXw+CjpUaAl2DmzCQigc9endlTTa1\n88Wal1ZuLAUXM1vHyCnxuJPlMPutSwJz+4aStHwq2ZFfNfItxba8o8oz8qDm/4Y8\nLJMWTQ98YlxKXg0oK+77xHophkkTEDjHaGII1Ggz7PRutUez8iqi84KdxUCKCb0=\n=J/gu\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f03ef4a9b684ba96da926ee2ffabcf7398b4f6f\nparent c2f15270ee207ae787b08abdac2c8944b96306c9\nparent 73b3ee664ecc938b943b5a08a23ef29104fc390f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624044368 +0000\ncommitter GitHub <noreply@github.com> 1624044368 +0000\n\nMerge #9330\n\n9330: minor: use minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8f569c58583915a6e6ccae8292fa078d6bed70", "html_url": "https://github.com/rust-lang/rust/commit/7f8f569c58583915a6e6ccae8292fa078d6bed70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8f569c58583915a6e6ccae8292fa078d6bed70/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f15270ee207ae787b08abdac2c8944b96306c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f15270ee207ae787b08abdac2c8944b96306c9", "html_url": "https://github.com/rust-lang/rust/commit/c2f15270ee207ae787b08abdac2c8944b96306c9"}, {"sha": "73b3ee664ecc938b943b5a08a23ef29104fc390f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ee664ecc938b943b5a08a23ef29104fc390f", "html_url": "https://github.com/rust-lang/rust/commit/73b3ee664ecc938b943b5a08a23ef29104fc390f"}], "stats": {"total": 176, "additions": 72, "deletions": 104}, "files": [{"sha": "94b628fb8d2504a027b0458ca1daa651cc4bd988", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=7f8f569c58583915a6e6ccae8292fa078d6bed70", "patch": "@@ -705,12 +705,8 @@ fn issue_4931() {\n fn issue_4885() {\n     check_infer(\n         r#\"\n-        #[lang = \"coerce_unsized\"]\n-        pub trait CoerceUnsized<T> {}\n-\n-        trait Future {\n-            type Output;\n-        }\n+        //- minicore: coerce_unsized, future\n+        use core::future::Future;\n         trait Foo<R> {\n             type Bar;\n         }\n@@ -727,13 +723,13 @@ fn issue_4885() {\n         }\n         \"#,\n         expect![[r#\"\n-            136..139 'key': &K\n-            198..214 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n-            204..207 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n-            204..212 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n-            208..211 'key': &K\n-            228..231 'key': &K\n-            290..293 '{ }': ()\n+            70..73 'key': &K\n+            132..148 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n+            138..141 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n+            138..146 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n+            142..145 'key': &K\n+            162..165 'key': &K\n+            224..227 '{ }': ()\n         \"#]],\n     );\n }"}, {"sha": "108ff3179488f348192ef14158328b1907332c65", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=7f8f569c58583915a6e6ccae8292fa078d6bed70", "patch": "@@ -1917,20 +1917,14 @@ fn fn_pointer_return() {\n fn effects_smoke_test() {\n     check_infer(\n         r#\"\n+        //- minicore: future\n         async fn main() {\n             let x = unsafe { 92 };\n             let y = async { async { () }.await };\n             let z = try { () };\n             let w = const { 92 };\n             let t = 'a: { 92 };\n         }\n-\n-        #[prelude_import] use future::*;\n-\n-        mod future {\n-            #[lang = \"future_trait\"]\n-            pub trait Future { type Output; }\n-        }\n         \"#,\n         expect![[r#\"\n             16..162 '{     ...2 }; }': ()"}, {"sha": "dd1ea817f3538c7f2618aa6f829002c388517e23", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 59, "deletions": 67, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=7f8f569c58583915a6e6ccae8292fa078d6bed70", "patch": "@@ -2731,9 +2731,7 @@ fn test(x: &dyn Foo) {\n fn builtin_copy() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n+//- minicore: copy\n struct IsCopy;\n impl Copy for IsCopy {}\n struct NotCopy;\n@@ -2748,20 +2746,20 @@ fn test() {\n     (IsCopy, NotCopy).test();\n }\"#,\n         expect![[r#\"\n-            110..114 'self': &Self\n-            166..267 '{     ...t(); }': ()\n-            172..178 'IsCopy': IsCopy\n-            172..185 'IsCopy.test()': bool\n-            191..198 'NotCopy': NotCopy\n-            191..205 'NotCopy.test()': {unknown}\n-            211..227 '(IsCop...sCopy)': (IsCopy, IsCopy)\n-            211..234 '(IsCop...test()': bool\n-            212..218 'IsCopy': IsCopy\n-            220..226 'IsCopy': IsCopy\n-            240..257 '(IsCop...tCopy)': (IsCopy, NotCopy)\n-            240..264 '(IsCop...test()': {unknown}\n-            241..247 'IsCopy': IsCopy\n-            249..256 'NotCopy': NotCopy\n+            78..82 'self': &Self\n+            134..235 '{     ...t(); }': ()\n+            140..146 'IsCopy': IsCopy\n+            140..153 'IsCopy.test()': bool\n+            159..166 'NotCopy': NotCopy\n+            159..173 'NotCopy.test()': {unknown}\n+            179..195 '(IsCop...sCopy)': (IsCopy, IsCopy)\n+            179..202 '(IsCop...test()': bool\n+            180..186 'IsCopy': IsCopy\n+            188..194 'IsCopy': IsCopy\n+            208..225 '(IsCop...tCopy)': (IsCopy, NotCopy)\n+            208..232 '(IsCop...test()': {unknown}\n+            209..215 'IsCopy': IsCopy\n+            217..224 'NotCopy': NotCopy\n         \"#]],\n     );\n }\n@@ -2770,9 +2768,7 @@ fn test() {\n fn builtin_fn_def_copy() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n+//- minicore: copy\n fn foo() {}\n fn bar<T: Copy>(T) -> T {}\n struct Struct(usize);\n@@ -2788,20 +2784,20 @@ fn test() {\n     Enum::Variant.test();\n }\"#,\n         expect![[r#\"\n-            41..43 '{}': ()\n-            60..61 'T': {unknown}\n-            68..70 '{}': ()\n-            68..70: expected T, got ()\n-            145..149 'self': &Self\n-            201..281 '{     ...t(); }': ()\n-            207..210 'foo': fn foo()\n-            207..217 'foo.test()': bool\n-            223..226 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n-            223..233 'bar.test()': bool\n-            239..245 'Struct': Struct(usize) -> Struct\n-            239..252 'Struct.test()': bool\n-            258..271 'Enum::Variant': Variant(usize) -> Enum\n-            258..278 'Enum::...test()': bool\n+            9..11 '{}': ()\n+            28..29 'T': {unknown}\n+            36..38 '{}': ()\n+            36..38: expected T, got ()\n+            113..117 'self': &Self\n+            169..249 '{     ...t(); }': ()\n+            175..178 'foo': fn foo()\n+            175..185 'foo.test()': bool\n+            191..194 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n+            191..201 'bar.test()': bool\n+            207..213 'Struct': Struct(usize) -> Struct\n+            207..220 'Struct.test()': bool\n+            226..239 'Enum::Variant': Variant(usize) -> Enum\n+            226..246 'Enum::...test()': bool\n         \"#]],\n     );\n }\n@@ -2810,9 +2806,7 @@ fn test() {\n fn builtin_fn_ptr_copy() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"copy\"]\n-trait Copy {}\n-\n+//- minicore: copy\n trait Test { fn test(&self) -> bool; }\n impl<T: Copy> Test for T {}\n \n@@ -2822,17 +2816,17 @@ fn test(f1: fn(), f2: fn(usize) -> u8, f3: fn(u8, u8) -> &u8) {\n     f3.test();\n }\"#,\n         expect![[r#\"\n-            54..58 'self': &Self\n-            108..110 'f1': fn()\n-            118..120 'f2': fn(usize) -> u8\n-            139..141 'f3': fn(u8, u8) -> &u8\n-            162..210 '{     ...t(); }': ()\n-            168..170 'f1': fn()\n-            168..177 'f1.test()': bool\n-            183..185 'f2': fn(usize) -> u8\n-            183..192 'f2.test()': bool\n-            198..200 'f3': fn(u8, u8) -> &u8\n-            198..207 'f3.test()': bool\n+            22..26 'self': &Self\n+            76..78 'f1': fn()\n+            86..88 'f2': fn(usize) -> u8\n+            107..109 'f3': fn(u8, u8) -> &u8\n+            130..178 '{     ...t(); }': ()\n+            136..138 'f1': fn()\n+            136..145 'f1.test()': bool\n+            151..153 'f2': fn(usize) -> u8\n+            151..160 'f2.test()': bool\n+            166..168 'f3': fn(u8, u8) -> &u8\n+            166..175 'f3.test()': bool\n         \"#]],\n     );\n }\n@@ -2841,9 +2835,7 @@ fn test(f1: fn(), f2: fn(usize) -> u8, f3: fn(u8, u8) -> &u8) {\n fn builtin_sized() {\n     check_infer_with_mismatches(\n         r#\"\n-#[lang = \"sized\"]\n-trait Sized {}\n-\n+//- minicore: sized\n trait Test { fn test(&self) -> bool; }\n impl<T: Sized> Test for T {}\n \n@@ -2854,22 +2846,22 @@ fn test() {\n     (1u8, *\"foo\").test(); // not Sized\n }\"#,\n         expect![[r#\"\n-            56..60 'self': &Self\n-            113..228 '{     ...ized }': ()\n-            119..122 '1u8': u8\n-            119..129 '1u8.test()': bool\n-            135..150 '(*\"foo\").test()': {unknown}\n-            136..142 '*\"foo\"': str\n-            137..142 '\"foo\"': &str\n-            169..179 '(1u8, 1u8)': (u8, u8)\n-            169..186 '(1u8, ...test()': bool\n-            170..173 '1u8': u8\n-            175..178 '1u8': u8\n-            192..205 '(1u8, *\"foo\")': (u8, str)\n-            192..212 '(1u8, ...test()': {unknown}\n-            193..196 '1u8': u8\n-            198..204 '*\"foo\"': str\n-            199..204 '\"foo\"': &str\n+            22..26 'self': &Self\n+            79..194 '{     ...ized }': ()\n+            85..88 '1u8': u8\n+            85..95 '1u8.test()': bool\n+            101..116 '(*\"foo\").test()': {unknown}\n+            102..108 '*\"foo\"': str\n+            103..108 '\"foo\"': &str\n+            135..145 '(1u8, 1u8)': (u8, u8)\n+            135..152 '(1u8, ...test()': bool\n+            136..139 '1u8': u8\n+            141..144 '1u8': u8\n+            158..171 '(1u8, *\"foo\")': (u8, str)\n+            158..178 '(1u8, ...test()': {unknown}\n+            159..162 '1u8': u8\n+            164..170 '*\"foo\"': str\n+            165..170 '\"foo\"': &str\n         \"#]],\n     );\n }"}, {"sha": "ac7f0959b08e5eb0978a0037a6ed69d3879eec81", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=7f8f569c58583915a6e6ccae8292fa078d6bed70", "patch": "@@ -831,7 +831,6 @@ fn path_element_of_reference(\n     })?;\n     stdx::always!(\n         matches!(path, ast::Expr::PathExpr(_) | ast::Expr::MacroCall(_)),\n-\n         \"unexpected expression type for variable usage: {:?}\",\n         path\n     );\n@@ -2991,11 +2990,7 @@ mod bar {\n         check_assist(\n             extract_function,\n             r#\"\n-enum Option<T> {\n-    #[lang = \"None\"] None,\n-    #[lang = \"Some\"] Some(T),\n-}\n-use Option::*;\n+//- minicore: option\n fn foo() {\n     loop {\n         let n = 1;\n@@ -3007,11 +3002,6 @@ fn foo() {\n }\n \"#,\n             r#\"\n-enum Option<T> {\n-    #[lang = \"None\"] None,\n-    #[lang = \"Some\"] Some(T),\n-}\n-use Option::*;\n fn foo() {\n     loop {\n         let n = 1;"}, {"sha": "286d7cb67caff1e816b6997093762cba975d0334", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=7f8f569c58583915a6e6ccae8292fa078d6bed70", "patch": "@@ -498,10 +498,7 @@ mod foo {\n     fn issue_8931() {\n         check(\n             r#\"\n-#[lang = \"fn_once\"]\n-trait FnOnce<Args> {\n-    type Output;\n-}\n+//- minicore: fn\n struct S;\n \n struct Foo;"}, {"sha": "e49e434fa39ab9764c695e55240c551c718de2eb", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8f569c58583915a6e6ccae8292fa078d6bed70/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=7f8f569c58583915a6e6ccae8292fa078d6bed70", "patch": "@@ -942,13 +942,12 @@ fn foo() -> u32 {\n         // FIXME: make this work with `|| $0`\n         check_expected_type_and_name(\n             r#\"\n+//- minicore: fn\n fn foo() {\n     bar(|| a$0);\n }\n \n fn bar(f: impl FnOnce() -> u32) {}\n-#[lang = \"fn_once\"]\n-trait FnOnce { type Output; }\n \"#,\n             expect![[r#\"ty: u32, name: ?\"#]],\n         );"}]}