{"sha": "ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZTM5YWViMzMxYmY2ZWZiMzczOWQyMmE2MGMxODQ0ZTljMmMzZDY=", "commit": {"author": {"name": "Evgeny Safronov", "email": "division494@gmail.com", "date": "2016-06-29T07:40:25Z"}, "committer": {"name": "Evgeny Safronov", "email": "division494@gmail.com", "date": "2016-07-05T21:01:14Z"}, "message": "feat: reinterpret `precision` field for strings\n\nThis commit changes the behavior of formatting string arguments\nwith both width and precision fields set.\n\nDocumentation says that the `width` field is the \"minimum width\"\nthat the format should take up. If the value's string does not\nfill up this many characters, then the padding specified by\nfill/alignment will be used to take up the required space.\n\nThis is true for all formatted types except string, which is truncated\ndown to `precision` number of chars and then all of `fill`, `align` and\n`width` fields are completely ignored.\n\nFor example: `format!(\"{:/^10.8}\", \"1234567890);` emits \"12345678\".\nIn the contrast Python version works as the expected:\n```python\n>>> '{:/^10.8}'.format('1234567890')\n'/12345678/'\n```\n\nThis commit gives back the `Python` behavior by changing the `precision`\nfield meaning to the truncation and nothing more. The result string *will*\nbe prepended/appended up to the `width` field with the proper `fill` char.\n\nHowever, this is the breaking change.\n\nAlso updated `std::fmt` docs about string precision.\n\nSigned-off-by: Evgeny Safronov <division494@gmail.com>", "tree": {"sha": "bcd62c0edd6afb3fbd803e28c5f1cf627d97ede4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcd62c0edd6afb3fbd803e28c5f1cf627d97ede4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABAgAGBQJXfCAuAAoJEMci501dINxpseIQAIgGEFpIkZ1CJKcnm+ihxJnK\nPcmnS7vi40nYJctajrg7AAPFai0d+3jfj5FN8UeEoqFpJVlty4p0VLDSAXBeOjpe\ncXYWXlYJJKG6LyAsdc4JC0mBZQpJgLGExAWOUiV4CBbyhvd9pl4SK/IKgYcpk0VT\n9DyiwwFny16P9+THdjqj7MhcmPS/cvGZVNWhLxdpZWhWyoAISxTAeMp2SklnJS3x\nq3aVnPePkvYW7Z3l4BtpPN36t2W50zCNs1XlmGifwHntnPIg7QXm5Mk3SErL9Dk6\nfsIeIahMoOqC50NZVFSj7w9Mq2ipdGRSgxbP8Zq8NoFiRZobcBBxFgo5enNcOtaa\ngU9G5D5nlBrwQfj/IER5O8bNQ/6XPKuxTg1HwupXizaSi2RPf5Dme+l6X9iKt+lq\nHjLclh2fcAyovg+L2e/+YxHwxxBzlOtCQcnq6YUE+Ta3fifAt3YRz6sjEtvi2Gdm\nGfpz62wg0dk/uGhbzFMSUH1wAOY6L9tKxDpgpRcw6L9768hcwqO+zbdE9uNLHhL2\ntzmfnamRQA0lWYuqy1Q2IHaUzfYqLxA+9DViohYzKYhXpz0QcYX+qZlkJmgfn/SL\nD+Tc0hn6A4iBSHH9USnhSlRKoc9jnt43aquGqxOp8AYN3RPO1hMqYXz0832rNhrq\njHKjeaBVDftO9qReYBat\n=FG6p\n-----END PGP SIGNATURE-----", "payload": "tree bcd62c0edd6afb3fbd803e28c5f1cf627d97ede4\nparent ea0dc9297283daff6486807f43e190b4eb561412\nauthor Evgeny Safronov <division494@gmail.com> 1467186025 +0300\ncommitter Evgeny Safronov <division494@gmail.com> 1467752474 +0300\n\nfeat: reinterpret `precision` field for strings\n\nThis commit changes the behavior of formatting string arguments\nwith both width and precision fields set.\n\nDocumentation says that the `width` field is the \"minimum width\"\nthat the format should take up. If the value's string does not\nfill up this many characters, then the padding specified by\nfill/alignment will be used to take up the required space.\n\nThis is true for all formatted types except string, which is truncated\ndown to `precision` number of chars and then all of `fill`, `align` and\n`width` fields are completely ignored.\n\nFor example: `format!(\"{:/^10.8}\", \"1234567890);` emits \"12345678\".\nIn the contrast Python version works as the expected:\n```python\n>>> '{:/^10.8}'.format('1234567890')\n'/12345678/'\n```\n\nThis commit gives back the `Python` behavior by changing the `precision`\nfield meaning to the truncation and nothing more. The result string *will*\nbe prepended/appended up to the `width` field with the proper `fill` char.\n\nHowever, this is the breaking change.\n\nAlso updated `std::fmt` docs about string precision.\n\nSigned-off-by: Evgeny Safronov <division494@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "html_url": "https://github.com/rust-lang/rust/commit/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/comments", "author": {"login": "3Hren", "id": 969900, "node_id": "MDQ6VXNlcjk2OTkwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/969900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3Hren", "html_url": "https://github.com/3Hren", "followers_url": "https://api.github.com/users/3Hren/followers", "following_url": "https://api.github.com/users/3Hren/following{/other_user}", "gists_url": "https://api.github.com/users/3Hren/gists{/gist_id}", "starred_url": "https://api.github.com/users/3Hren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3Hren/subscriptions", "organizations_url": "https://api.github.com/users/3Hren/orgs", "repos_url": "https://api.github.com/users/3Hren/repos", "events_url": "https://api.github.com/users/3Hren/events{/privacy}", "received_events_url": "https://api.github.com/users/3Hren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "3Hren", "id": 969900, "node_id": "MDQ6VXNlcjk2OTkwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/969900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3Hren", "html_url": "https://github.com/3Hren", "followers_url": "https://api.github.com/users/3Hren/followers", "following_url": "https://api.github.com/users/3Hren/following{/other_user}", "gists_url": "https://api.github.com/users/3Hren/gists{/gist_id}", "starred_url": "https://api.github.com/users/3Hren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3Hren/subscriptions", "organizations_url": "https://api.github.com/users/3Hren/orgs", "repos_url": "https://api.github.com/users/3Hren/repos", "events_url": "https://api.github.com/users/3Hren/events{/privacy}", "received_events_url": "https://api.github.com/users/3Hren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0dc9297283daff6486807f43e190b4eb561412", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0dc9297283daff6486807f43e190b4eb561412", "html_url": "https://github.com/rust-lang/rust/commit/ea0dc9297283daff6486807f43e190b4eb561412"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "356bb96741e4fba1a158dfa2adafffc8ae7f6401", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "patch": "@@ -408,8 +408,8 @@\n //! ## Precision\n //!\n //! For non-numeric types, this can be considered a \"maximum width\". If the resulting string is\n-//! longer than this width, then it is truncated down to this many characters and only those are\n-//! emitted.\n+//! longer than this width, then it is truncated down to this many characters and that truncated\n+//! value is emitted with proper `fill`, `alignment` and `width` if those parameters are set.\n //!\n //! For integral types, this is ignored.\n //!\n@@ -469,13 +469,15 @@\n //! ```\n //! println!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);\n //! println!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");\n+//! println!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n //! ```\n //!\n //! print two significantly different things:\n //!\n //! ```text\n //! Hello, `1234.560` has 3 fractional digits\n //! Hello, `123` has 3 characters\n+//! Hello, `     123` has 3 right-aligned characters\n //! ```\n //!\n //! # Escaping"}, {"sha": "a36f7e42c9c471c98080bbb6c3c30c0e23db58bb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "patch": "@@ -983,15 +983,19 @@ impl<'a> Formatter<'a> {\n             return self.buf.write_str(s);\n         }\n         // The `precision` field can be interpreted as a `max-width` for the\n-        // string being formatted\n-        if let Some(max) = self.precision {\n-            // If there's a maximum width and our string is longer than\n-            // that, then we must always have truncation. This is the only\n-            // case where the maximum length will matter.\n+        // string being formatted.\n+        let s = if let Some(max) = self.precision {\n+            // If our string is longer that the precision, then we must have\n+            // truncation. However other flags like `fill`, `width` and `align`\n+            // must act as always.\n             if let Some((i, _)) = s.char_indices().skip(max).next() {\n-                return self.buf.write_str(&s[..i])\n+                &s[..i]\n+            } else {\n+                &s\n             }\n-        }\n+        } else {\n+            &s\n+        };\n         // The `width` field is more of a `min-width` parameter at this point.\n         match self.width {\n             // If we're under the maximum length, and there's no minimum length"}, {"sha": "1cc52c930344ce7a75f69c58a1dcec71240fcccb", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "patch": "@@ -125,7 +125,7 @@ pub fn main() {\n     t!(format!(\"{:<4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:>4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:^4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"      aaaa\");\n     t!(format!(\"{:2.4}\", \"aaaaa\"), \"aaaa\");\n     t!(format!(\"{:2.4}\", \"aaaa\"), \"aaaa\");\n     t!(format!(\"{:2.4}\", \"aaa\"), \"aaa\");\n@@ -140,6 +140,7 @@ pub fn main() {\n     t!(format!(\"{:a$}\", \"a\", a=4), \"a   \");\n     t!(format!(\"{:-#}\", \"a\"), \"a\");\n     t!(format!(\"{:+#}\", \"a\"), \"a\");\n+    t!(format!(\"{:/^10.8}\", \"1234567890\"), \"/12345678/\");\n \n     // Some float stuff\n     t!(format!(\"{:}\", 1.0f32), \"1\");"}]}