{"sha": "8657fb1140165f770a928b04095fc025308a4fb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTdmYjExNDAxNjVmNzcwYTkyOGIwNDA5NWZjMDI1MzA4YTRmYjI=", "commit": {"author": {"name": "Dante-Broggi", "email": "34220985+Dante-Broggi@users.noreply.github.com", "date": "2019-08-29T18:24:50Z"}, "committer": {"name": "Dante-Broggi", "email": "34220985+Dante-Broggi@users.noreply.github.com", "date": "2019-08-29T18:24:50Z"}, "message": "`new_sized` is mostly used without align\n\nso rename it `new_sized_aligned`.\n6/11 use `align` = `layout.align.abi`.\n`from_const_alloc` uses `alloc.align`, but that is `assert_eq!` to `layout.align.abi`.\nonly 4/11 use something interesting for `align`.", "tree": {"sha": "16edd4cb4d4901b5d58375145eabc3e327fcf38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16edd4cb4d4901b5d58375145eabc3e327fcf38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8657fb1140165f770a928b04095fc025308a4fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8657fb1140165f770a928b04095fc025308a4fb2", "html_url": "https://github.com/rust-lang/rust/commit/8657fb1140165f770a928b04095fc025308a4fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8657fb1140165f770a928b04095fc025308a4fb2/comments", "author": {"login": "Dante-Broggi", "id": 34220985, "node_id": "MDQ6VXNlcjM0MjIwOTg1", "avatar_url": "https://avatars.githubusercontent.com/u/34220985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dante-Broggi", "html_url": "https://github.com/Dante-Broggi", "followers_url": "https://api.github.com/users/Dante-Broggi/followers", "following_url": "https://api.github.com/users/Dante-Broggi/following{/other_user}", "gists_url": "https://api.github.com/users/Dante-Broggi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dante-Broggi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dante-Broggi/subscriptions", "organizations_url": "https://api.github.com/users/Dante-Broggi/orgs", "repos_url": "https://api.github.com/users/Dante-Broggi/repos", "events_url": "https://api.github.com/users/Dante-Broggi/events{/privacy}", "received_events_url": "https://api.github.com/users/Dante-Broggi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dante-Broggi", "id": 34220985, "node_id": "MDQ6VXNlcjM0MjIwOTg1", "avatar_url": "https://avatars.githubusercontent.com/u/34220985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dante-Broggi", "html_url": "https://github.com/Dante-Broggi", "followers_url": "https://api.github.com/users/Dante-Broggi/followers", "following_url": "https://api.github.com/users/Dante-Broggi/following{/other_user}", "gists_url": "https://api.github.com/users/Dante-Broggi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dante-Broggi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dante-Broggi/subscriptions", "organizations_url": "https://api.github.com/users/Dante-Broggi/orgs", "repos_url": "https://api.github.com/users/Dante-Broggi/repos", "events_url": "https://api.github.com/users/Dante-Broggi/events{/privacy}", "received_events_url": "https://api.github.com/users/Dante-Broggi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc1c8d2e71f798ca28813e5dca3adb0e791684d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc1c8d2e71f798ca28813e5dca3adb0e791684d", "html_url": "https://github.com/rust-lang/rust/commit/0cc1c8d2e71f798ca28813e5dca3adb0e791684d"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "1f9b3523fbd94a39dce197b6531e18b6710c7171", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -561,7 +561,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n         cg_elem.val.store(&mut body_bx,\n-            PlaceRef::new_sized(current, cg_elem.layout, align));\n+            PlaceRef::new_sized_aligned(current, cg_elem.layout, align));\n \n         let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n         body_bx.br(header_bx.llbb());"}, {"sha": "6ce1d4b18693c1fbff36e4ebbebee8a666df5045", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -348,7 +348,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             )};\n             self.const_bitcast(llval, llty)\n         };\n-        PlaceRef::new_sized(llval, layout, alloc.align)\n+        PlaceRef::new_sized(llval, layout)\n     }\n \n     fn const_ptrcast(&self, val: &'ll Value, ty: &'ll Type) -> &'ll Value {"}, {"sha": "fc0b9ffd11d8389a1a4394c654af7bf1d14d93cb", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -101,7 +101,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let name = &*tcx.item_name(def_id).as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n-        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align.abi);\n+        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout);\n \n         let simple = get_simple_intrinsic(self, name);\n         let llval = match name {"}, {"sha": "30a79f9f1afbad4684ce946caf23048d3cfb0093", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -989,7 +989,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Handle both by-ref and immediate tuples.\n         if let Ref(llval, None, align) = tuple.val {\n-            let tuple_ptr = PlaceRef::new_sized(llval, tuple.layout, align);\n+            let tuple_ptr = PlaceRef::new_sized_aligned(llval, tuple.layout, align);\n             for i in 0..tuple.layout.fields.count() {\n                 let field_ptr = tuple_ptr.project_field(bx, i);\n                 let field = bx.load_operand(field_ptr);\n@@ -1203,7 +1203,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let llty = bx.backend_type(src.layout);\n         let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n         let align = src.layout.align.abi.min(dst.align);\n-        src.val.store(bx, PlaceRef::new_sized(cast_ptr, src.layout, align));\n+        src.val.store(bx, PlaceRef::new_sized_aligned(cast_ptr, src.layout, align));\n     }\n \n "}, {"sha": "8acb3ba06267e96b04b51e3c4268bfb8a8bc1106", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -289,7 +289,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 if local == mir::RETURN_PLACE && fx.fn_ty.ret.is_indirect() {\n                     debug!(\"alloc: {:?} (return place) -> place\", local);\n                     let llretptr = bx.get_param(0);\n-                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align.abi))\n+                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout))\n                 } else if memory_locals.contains(local) {\n                     debug!(\"alloc: {:?} -> place\", local);\n                     if layout.is_unsized() {\n@@ -548,7 +548,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let llarg = bx.get_param(llarg_idx);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n-            PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n+            PlaceRef::new_sized(llarg, arg.layout)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer."}, {"sha": "a8ab3ea10ed166b363ff1c200e5c834f1e9f1f53", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -485,7 +485,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),\n                             layout,\n-                            layout.align.abi,\n                         ))\n                     })\n             }"}, {"sha": "b8e10d34302920bf146d76469c3d97827e91da80", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -30,6 +30,19 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     pub fn new_sized(\n         llval: V,\n         layout: TyLayout<'tcx>,\n+    ) -> PlaceRef<'tcx, V> {\n+        assert!(!layout.is_unsized());\n+        PlaceRef {\n+            llval,\n+            llextra: None,\n+            layout,\n+            align: layout.align.abi\n+        }\n+    }\n+\n+    pub fn new_sized_aligned(\n+        llval: V,\n+        layout: TyLayout<'tcx>,\n         align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!layout.is_unsized());\n@@ -63,7 +76,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         debug!(\"alloca({:?}: {:?})\", name, layout);\n         assert!(!layout.is_unsized(), \"tried to statically allocate unsized place\");\n         let tmp = bx.alloca(bx.cx().backend_type(layout), name, layout.align.abi);\n-        Self::new_sized(tmp, layout, layout.align.abi)\n+        Self::new_sized(tmp, layout)\n     }\n \n     /// Returns a place for an indirect reference to an unsized place.\n@@ -481,7 +494,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let llval = bx.cx().const_undef(\n                             bx.cx().type_ptr_to(bx.cx().backend_type(layout))\n                         );\n-                        PlaceRef::new_sized(llval, layout, layout.align.abi)\n+                        PlaceRef::new_sized(llval, layout)\n                     }\n                 }\n             }"}, {"sha": "e0ad2527229badb3eaa4df852f26db1084c07e11", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8657fb1140165f770a928b04095fc025308a4fb2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=8657fb1140165f770a928b04095fc025308a4fb2", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         scratch.storage_dead(&mut bx);\n                     }\n                     OperandValue::Ref(llref, None, align) => {\n-                        let source = PlaceRef::new_sized(llref, operand.layout, align);\n+                        let source = PlaceRef::new_sized_aligned(llref, operand.layout, align);\n                         base::coerce_unsized_into(&mut bx, source, dest);\n                     }\n                     OperandValue::Ref(_, Some(_), _) => {"}]}