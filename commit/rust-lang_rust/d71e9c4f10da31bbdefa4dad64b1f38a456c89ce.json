{"sha": "d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MWU5YzRmMTBkYTMxYmJkZWZhNGRhZDY0YjFmMzhhNDU2Yzg5Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-23T09:52:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-23T09:52:18Z"}, "message": "Auto merge of #4266 - uHOOCCOOHu:fix/async_fn_lifetime, r=flip1995\n\nIgnore generated fresh lifetimes in elision check\n\n<!--\nThank you for making Clippy better!\n\nWe're collecting our changelog from pull request descriptions.\nIf your PR only updates to the latest nightly, you can leave the\n`changelog` entry as `none`. Otherwise, please write a short comment\nexplaining your change.\n\nIf your PR fixes an issue, you can add \"fixes #issue_number\" into this\nPR description. This way the issue will be automatically closed when\nyour PR is merged.\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- [ ] Followed [lint naming conventions][lint_naming]\n- [ ] Added passing UI tests (including committed `.stderr` file)\n- [ ] `cargo test` passes locally\n- [ ] Executed `util/dev update_lints`\n- [ ] Added lint documentation\n- [ ] Run `cargo fmt`\n\nNote that you can skip the above if you are just opening a WIP PR in\norder to get feedback.\n\nDelete this line and everything above before opening your PR -->\n\nfixes #3988\n\nchangelog: Ignore generated fresh lifetimes in elision check.\n\n**HELP**: It seems `tests/ui` are compiled under edition 2015, and I don't know how to add tests for this properly.\n\nHere is the test input it had already passed:\n```rust\n#![feature(async_await)]\n#![allow(dead_code)]\n\nasync fn sink1<'a>(_: &'a str) {} // lint\nasync fn sink1_elided(_: &str) {} // ok\n\nasync fn one_to_one<'a>(s: &'a str) -> &'a str { s } // lint\nasync fn one_to_one_elided(s: &str) -> &str { s } // ok\nasync fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str { a } // ok\n// async fn unrelated(_: &str, _: &str) {} // Not allowed in async fn\n\n// #3988\nstruct Foo;\nimpl Foo {\n    pub async fn foo(&mut self) {} // ok\n}\n\n// rust-lang/rust#61115\nasync fn print(s: &str) { // ok\n    println!(\"{}\", s);\n}\n\nfn main() {}\n\n```", "tree": {"sha": "5ca78048fdd61cccceaffc01f73c66f908c0b2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca78048fdd61cccceaffc01f73c66f908c0b2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "html_url": "https://github.com/rust-lang/rust/commit/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "html_url": "https://github.com/rust-lang/rust/commit/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd"}, {"sha": "5265ab8723d675262fe065bbb2bd0ff3225b5255", "url": "https://api.github.com/repos/rust-lang/rust/commits/5265ab8723d675262fe065bbb2bd0ff3225b5255", "html_url": "https://github.com/rust-lang/rust/commit/5265ab8723d675262fe065bbb2bd0ff3225b5255"}], "stats": {"total": 114, "additions": 86, "deletions": 28}, "files": [{"sha": "47cced9d9a42a8a50a5394ead5e07ec7fc43e8b3", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -283,6 +283,8 @@ impl<'v, 't> RefVisitor<'v, 't> {\n         if let Some(ref lt) = *lifetime {\n             if lt.name == LifetimeName::Static {\n                 self.lts.push(RefLt::Static);\n+            } else if let LifetimeName::Param(ParamName::Fresh(_)) = lt.name {\n+                // Fresh lifetimes generated should be ignored.\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n             } else {"}, {"sha": "f1241e74b0a3d40e4bfb64912b27fec9711efb2f", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -2,5 +2,5 @@ max_width = 120\n comment_width = 100\n match_block_trailing_comma = true\n wrap_comments = true\n-\n+edition = \"2018\"\n error_on_line_overflow = true"}, {"sha": "a1f1c586eb0bfafaeb7a6e530cc5819e13ef7c0e", "filename": "tests/ui/cognitive_complexity.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.rs?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -313,7 +313,7 @@ fn mcarton_sees_all() {\n }\n \n #[clippy::cognitive_complexity = \"0\"]\n-fn try() -> Result<i32, &'static str> {\n+fn try_() -> Result<i32, &'static str> {\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),\n@@ -322,14 +322,14 @@ fn try() -> Result<i32, &'static str> {\n \n #[clippy::cognitive_complexity = \"0\"]\n fn try_again() -> Result<i32, &'static str> {\n-    let _ = try!(Ok(42));\n-    let _ = try!(Ok(43));\n-    let _ = try!(Ok(44));\n-    let _ = try!(Ok(45));\n-    let _ = try!(Ok(46));\n-    let _ = try!(Ok(47));\n-    let _ = try!(Ok(48));\n-    let _ = try!(Ok(49));\n+    let _ = r#try!(Ok(42));\n+    let _ = r#try!(Ok(43));\n+    let _ = r#try!(Ok(44));\n+    let _ = r#try!(Ok(45));\n+    let _ = r#try!(Ok(46));\n+    let _ = r#try!(Ok(47));\n+    let _ = r#try!(Ok(48));\n+    let _ = r#try!(Ok(49));\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),"}, {"sha": "e1c5863f494283b07b2ca2bfdcd3f6c6f28e3068", "filename": "tests/ui/cognitive_complexity.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -216,7 +216,7 @@ LL | | }\n error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:316:1\n    |\n-LL | / fn try() -> Result<i32, &'static str> {\n+LL | / fn try_() -> Result<i32, &'static str> {\n LL | |     match 5 {\n LL | |         5 => Ok(5),\n LL | |         _ => return Err(\"bla\"),\n@@ -230,9 +230,9 @@ error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:324:1\n    |\n LL | / fn try_again() -> Result<i32, &'static str> {\n-LL | |     let _ = try!(Ok(42));\n-LL | |     let _ = try!(Ok(43));\n-LL | |     let _ = try!(Ok(44));\n+LL | |     let _ = r#try!(Ok(42));\n+LL | |     let _ = r#try!(Ok(43));\n+LL | |     let _ = r#try!(Ok(44));\n ...  |\n LL | |     }\n LL | | }"}, {"sha": "2940d2d29011006641b553fe38fed49047d7dffd", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -7,7 +7,7 @@ use alloc::collections::linked_list::LinkedList;\n \n trait Foo {\n     type Baz = LinkedList<u8>;\n-    fn foo(LinkedList<u8>);\n+    fn foo(_: LinkedList<u8>);\n     const BAR: Option<LinkedList<u8>>;\n }\n "}, {"sha": "1f6646ec9adeb4b8fe888e459b094d80b810df97", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -8,10 +8,10 @@ LL |     type Baz = LinkedList<u8>;\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:10:12\n+  --> $DIR/dlist.rs:10:15\n    |\n-LL |     fn foo(LinkedList<u8>);\n-   |            ^^^^^^^^^^^^^^\n+LL |     fn foo(_: LinkedList<u8>);\n+   |               ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n "}, {"sha": "f9923c9bb480ea926bf29700b5885b18d9ddc08e", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -215,10 +215,10 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     };\n \n     if true {\n-        try!(Ok(\"foo\"));\n+        r#try!(Ok(\"foo\"));\n     } else {\n         //~ ERROR same body as `if` block\n-        try!(Ok(\"foo\"));\n+        r#try!(Ok(\"foo\"));\n     }\n \n     if true {"}, {"sha": "9649c223293242fabd25b4d45f95b20ec7cea3af", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -197,7 +197,7 @@ error: this `if` has identical blocks\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         try!(Ok(\"foo\"));\n+LL | |         r#try!(Ok(\"foo\"));\n LL | |     }\n    | |_____^\n    |\n@@ -206,7 +206,7 @@ note: same as this\n    |\n LL |       if true {\n    |  _____________^\n-LL | |         try!(Ok(\"foo\"));\n+LL | |         r#try!(Ok(\"foo\"));\n LL | |     } else {\n    | |_____^\n "}, {"sha": "953879f7bed09f712cc833e79563b3154454afce", "filename": "tests/ui/issue_4266.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fissue_4266.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fissue_4266.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.rs?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: --edition 2018\n+#![feature(async_await)]\n+#![allow(dead_code)]\n+\n+async fn sink1<'a>(_: &'a str) {} // lint\n+async fn sink1_elided(_: &str) {} // ok\n+\n+// lint\n+async fn one_to_one<'a>(s: &'a str) -> &'a str {\n+    s\n+}\n+\n+// ok\n+async fn one_to_one_elided(s: &str) -> &str {\n+    s\n+}\n+\n+// ok\n+async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {\n+    a\n+}\n+\n+// async fn unrelated(_: &str, _: &str) {} // Not allowed in async fn\n+\n+// #3988\n+struct Foo;\n+impl Foo {\n+    // ok\n+    pub async fn foo(&mut self) {}\n+}\n+\n+// rust-lang/rust#61115\n+// ok\n+async fn print(s: &str) {\n+    println!(\"{}\", s);\n+}\n+\n+fn main() {}"}, {"sha": "8b4e70eb9c2271bb9d27324f4ea3254b5b09112e", "filename": "tests/ui/issue_4266.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -0,0 +1,18 @@\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/issue_4266.rs:5:1\n+   |\n+LL | async fn sink1<'a>(_: &'a str) {} // lint\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/issue_4266.rs:9:1\n+   |\n+LL | / async fn one_to_one<'a>(s: &'a str) -> &'a str {\n+LL | |     s\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "40968822493ff9c03421d62b38588b1b83be6554", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -4,9 +4,9 @@\n use std::io;\n \n fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n-    try!(s.write(b\"test\"));\n+    r#try!(s.write(b\"test\"));\n     let mut buf = [0u8; 4];\n-    try!(s.read(&mut buf));\n+    r#try!(s.read(&mut buf));\n     Ok(())\n }\n "}, {"sha": "dbf701e06f9a3c3795478881709983b4a5e2be34", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d71e9c4f10da31bbdefa4dad64b1f38a456c89ce/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=d71e9c4f10da31bbdefa4dad64b1f38a456c89ce", "patch": "@@ -1,17 +1,17 @@\n error: handle written amount returned or use `Write::write_all` instead\n   --> $DIR/unused_io_amount.rs:7:5\n    |\n-LL |     try!(s.write(b\"test\"));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     r#try!(s.write(b\"test\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: handle read amount returned or use `Read::read_exact` instead\n   --> $DIR/unused_io_amount.rs:9:5\n    |\n-LL |     try!(s.read(&mut buf));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     r#try!(s.read(&mut buf));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}]}