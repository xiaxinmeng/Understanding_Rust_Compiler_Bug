{"sha": "19318e625bad52a512d8dcf600c79fc2ee8437b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MzE4ZTYyNWJhZDUyYTUxMmQ4ZGNmNjAwYzc5ZmMyZWU4NDM3YjI=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-07-08T14:14:13Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-07-23T18:37:12Z"}, "message": "Add `#[unstable]` on new functions", "tree": {"sha": "72ab0a33101893dcdf0d659e83b65d5d50bcc4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ab0a33101893dcdf0d659e83b65d5d50bcc4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19318e625bad52a512d8dcf600c79fc2ee8437b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19318e625bad52a512d8dcf600c79fc2ee8437b2", "html_url": "https://github.com/rust-lang/rust/commit/19318e625bad52a512d8dcf600c79fc2ee8437b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19318e625bad52a512d8dcf600c79fc2ee8437b2/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcc62b3ac446e4fc36a360b7207c29bef40b26c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcc62b3ac446e4fc36a360b7207c29bef40b26c", "html_url": "https://github.com/rust-lang/rust/commit/6fcc62b3ac446e4fc36a360b7207c29bef40b26c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "677c27b815005a5770ecd6d7bb309e0be0110d74", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19318e625bad52a512d8dcf600c79fc2ee8437b2/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19318e625bad52a512d8dcf600c79fc2ee8437b2/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=19318e625bad52a512d8dcf600c79fc2ee8437b2", "patch": "@@ -496,7 +496,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// let vector: VecDeque<u32> = VecDeque::new();\n     /// ```\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub fn new_in(alloc: A) -> VecDeque<T, A> {\n         VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)\n     }\n@@ -510,7 +510,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {\n         // +1 since the ringbuffer always leaves one space empty\n         let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();"}]}