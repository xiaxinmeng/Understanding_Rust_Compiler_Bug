{"sha": "ba5a5cf2199ab55e9b47820c32e11a27d93df519", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNWE1Y2YyMTk5YWI1NWU5YjQ3ODIwYzMyZTExYTI3ZDkzZGY1MTk=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-03-27T11:25:31Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-04-03T13:04:56Z"}, "message": "Remove single use helper function.", "tree": {"sha": "32ec6ecc454e51769a70a35a83b226258b50f9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ec6ecc454e51769a70a35a83b226258b50f9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba5a5cf2199ab55e9b47820c32e11a27d93df519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5a5cf2199ab55e9b47820c32e11a27d93df519", "html_url": "https://github.com/rust-lang/rust/commit/ba5a5cf2199ab55e9b47820c32e11a27d93df519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba5a5cf2199ab55e9b47820c32e11a27d93df519/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21641d6d2ce6e7f8c81817c1848499ddc635440b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21641d6d2ce6e7f8c81817c1848499ddc635440b", "html_url": "https://github.com/rust-lang/rust/commit/21641d6d2ce6e7f8c81817c1848499ddc635440b"}], "stats": {"total": 20, "additions": 4, "deletions": 16}, "files": [{"sha": "bfe92fc5be802eb30dbd03882bc1dbf739b4f3b0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba5a5cf2199ab55e9b47820c32e11a27d93df519/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5a5cf2199ab55e9b47820c32e11a27d93df519/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ba5a5cf2199ab55e9b47820c32e11a27d93df519", "patch": "@@ -2833,19 +2833,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn check_expr_coercable_to_type(&self,\n                                     expr: &'gcx hir::Expr,\n                                     expected: Ty<'tcx>) -> Ty<'tcx> {\n-        self.check_expr_coercable_to_type_with_needs(expr, expected, Needs::None)\n-    }\n-\n-    fn check_expr_coercable_to_type_with_needs(&self,\n-                                               expr: &'gcx hir::Expr,\n-                                               expected: Ty<'tcx>,\n-                                               needs: Needs)\n-                                               -> Ty<'tcx> {\n-        let ty = self.check_expr_with_expectation_and_needs(\n-            expr,\n-            ExpectHasType(expected),\n-            needs);\n-        // checks don't need two phase\n+        let ty = self.check_expr_with_hint(expr, expected);\n         self.demand_coerce(expr, ty, expected, AllowTwoPhase::No)\n     }\n "}, {"sha": "4a175248d74a317533d17bbf39cc0cfbac62659c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba5a5cf2199ab55e9b47820c32e11a27d93df519/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba5a5cf2199ab55e9b47820c32e11a27d93df519/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=ba5a5cf2199ab55e9b47820c32e11a27d93df519", "patch": "@@ -174,9 +174,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // trait matching creating lifetime constraints that are too strict.\n         // E.g. adding `&'a T` and `&'b T`, given `&'x T: Add<&'x T>`, will result\n         // in `&'a T <: &'x T` and `&'b T <: &'x T`, instead of `'a = 'b = 'x`.\n-        let lhs_ty = self.check_expr_coercable_to_type_with_needs(lhs_expr,\n-            self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span)),\n-            lhs_needs);\n+        let lhs_ty = self.check_expr_with_needs(lhs_expr, lhs_needs);\n+        let fresh_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span));\n+        let lhs_ty = self.demand_coerce(lhs_expr, lhs_ty, fresh_var,  AllowTwoPhase::No);\n         let lhs_ty = self.resolve_type_vars_with_obligations(lhs_ty);\n \n         // NB: As we have not yet type-checked the RHS, we don't have the"}]}