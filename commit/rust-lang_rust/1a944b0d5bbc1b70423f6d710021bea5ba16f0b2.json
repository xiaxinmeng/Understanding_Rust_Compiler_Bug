{"sha": "1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOTQ0YjBkNWJiYzFiNzA0MjNmNmQ3MTAwMjFiZWE1YmExNmYwYjI=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-02-23T11:11:10Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-02-23T11:11:10Z"}, "message": "Remove pub(crate) from stderr_raw", "tree": {"sha": "0c5c07548bee7c44891587afd868831163e3dec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5c07548bee7c44891587afd868831163e3dec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "html_url": "https://github.com/rust-lang/rust/commit/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6464e32ea97fe0b18f75becc82cba9b19dfe453c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6464e32ea97fe0b18f75becc82cba9b19dfe453c", "html_url": "https://github.com/rust-lang/rust/commit/6464e32ea97fe0b18f75becc82cba9b19dfe453c"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "c0570ae60a19c0575ec12ba2fbab0d6afd9e7015", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "patch": "@@ -286,9 +286,6 @@ pub use self::stdio::{_print, _eprint};\n #[doc(no_inline, hidden)]\n pub use self::stdio::{set_panic, set_print};\n \n-// Used inside the standard library for panic output.\n-pub(crate) use self::stdio::stderr_raw;\n-\n pub mod prelude;\n mod buffered;\n mod cursor;"}, {"sha": "4068c0f9c7de5ca698f1056a004c4be31efaf9dd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "patch": "@@ -32,9 +32,7 @@ struct StdoutRaw(stdio::Stdout);\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n /// the `std::io::stdio::stderr_raw` function.\n-///\n-/// Not exposed, but used inside the standard library for panic output.\n-pub(crate) struct StderrRaw(stdio::Stderr);\n+struct StderrRaw(stdio::Stderr);\n \n /// Constructs a new raw handle to the standard input of this process.\n ///\n@@ -63,9 +61,7 @@ fn stdout_raw() -> io::Result<StdoutRaw> { stdio::Stdout::new().map(StdoutRaw) }\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-///\n-/// Not exposed, but used inside the standard library for panic output.\n-pub(crate) fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n+fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }"}, {"sha": "8571b38cefa1c53acb86b2149d283309b1dab59e", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "patch": "@@ -60,5 +60,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    io::stderr_raw().ok()\n+    Stderr::new().ok()\n }"}, {"sha": "56b75bf9f7931954cd1c9d0e0c52f0485a7a3f30", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "patch": "@@ -60,5 +60,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    io::stderr_raw().ok()\n+    Stderr::new().ok()\n }"}, {"sha": "d7540fd815c98b01b3bd1590e02d0ee3ea27ce62", "filename": "src/libstd/sys/wasm/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs?ref=1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "patch": "@@ -59,7 +59,7 @@ pub fn is_ebadf(_err: &io::Error) -> bool {\n \n pub fn panic_output() -> Option<impl io::Write> {\n     if cfg!(feature = \"wasm_syscall\") {\n-        io::stderr_raw().ok()\n+        Stderr::new().ok()\n     } else {\n         None\n     }"}, {"sha": "99445f4e0d45de75f363258927b791b5d316b0d6", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a944b0d5bbc1b70423f6d710021bea5ba16f0b2/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=1a944b0d5bbc1b70423f6d710021bea5ba16f0b2", "patch": "@@ -279,5 +279,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    io::stderr_raw().ok()\n+    Stderr::new().ok()\n }"}]}