{"sha": "bc79f01a581c9340cd869ba36579ee80d9606298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzlmMDFhNTgxYzkzNDBjZDg2OWJhMzY1NzllZTgwZDk2MDYyOTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T16:46:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:33:09Z"}, "message": "create `ModuleTranslation` all in one big loop", "tree": {"sha": "6d2d9fbeea6d824f3097a63a2cd982d698533f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2d9fbeea6d824f3097a63a2cd982d698533f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc79f01a581c9340cd869ba36579ee80d9606298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc79f01a581c9340cd869ba36579ee80d9606298", "html_url": "https://github.com/rust-lang/rust/commit/bc79f01a581c9340cd869ba36579ee80d9606298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc79f01a581c9340cd869ba36579ee80d9606298/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cb516ad7b6e058be547e7ee5dc78762cc9b809b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb516ad7b6e058be547e7ee5dc78762cc9b809b", "html_url": "https://github.com/rust-lang/rust/commit/6cb516ad7b6e058be547e7ee5dc78762cc9b809b"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "c822cc5f4b9a78293c6ab9602ddd22d3d1521dbe", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bc79f01a581c9340cd869ba36579ee80d9606298/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc79f01a581c9340cd869ba36579ee80d9606298/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=bc79f01a581c9340cd869ba36579ee80d9606298", "patch": "@@ -1120,41 +1120,31 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                    codegen_units,\n                                                    previous_work_products,\n                                                    symbol_map.clone());\n-    let modules: Vec<_> = crate_context_list.iter_all()\n-        .map(|ccx| {\n-            let source = match ccx.previous_work_product() {\n-                Some(buf) => ModuleSource::Preexisting(buf.clone()),\n-                None => ModuleSource::Translated(ModuleLlvm {\n-                    llcx: ccx.llcx(),\n-                    llmod: ccx.llmod(),\n-                }),\n-            };\n \n-            ModuleTranslation {\n-                name: String::from(ccx.codegen_unit().name()),\n-                symbol_name_hash: ccx.codegen_unit()\n-                                     .compute_symbol_name_hash(&shared_ccx,\n-                                                               &symbol_map),\n-                source: source,\n-            }\n+    let modules: Vec<ModuleTranslation> = crate_context_list\n+        .iter_all()\n+        .map(|ccx| {\n+            let dep_node = ccx.codegen_unit().work_product_dep_node();\n+            tcx.dep_graph.with_task(dep_node,\n+                                    ccx,\n+                                    AssertDepGraphSafe(symbol_map.clone()),\n+                                    module_translation)\n         })\n         .collect();\n \n-    for ccx in crate_context_list.iter_need_trans() {\n-        let dep_node = ccx.codegen_unit().work_product_dep_node();\n-        tcx.dep_graph.with_task(dep_node,\n-                                ccx,\n-                                AssertDepGraphSafe(symbol_map.clone()),\n-                                trans_decl_task);\n-\n+    fn module_translation<'a, 'tcx>(ccx: CrateContext<'a, 'tcx>,\n+                                    symbol_map: AssertDepGraphSafe<Rc<SymbolMap<'tcx>>>)\n+                                    -> ModuleTranslation {\n+        // FIXME(#40304): Instead of this, the symbol-map should be an\n+        // on-demand thing that we compute.\n+        let AssertDepGraphSafe(symbol_map) = symbol_map;\n \n-        fn trans_decl_task<'a, 'tcx>(ccx: CrateContext<'a, 'tcx>,\n-                                     symbol_map: AssertDepGraphSafe<Rc<SymbolMap<'tcx>>>) {\n+        let source = if let Some(buf) = ccx.previous_work_product() {\n+            // Don't need to translate this module.\n+            ModuleSource::Preexisting(buf.clone())\n+        } else {\n             // Instantiate translation items without filling out definitions yet...\n \n-            // FIXME(#40304): Instead of this, the symbol-map should be an\n-            // on-demand thing that we compute.\n-            let AssertDepGraphSafe(symbol_map) = symbol_map;\n             let cgu = ccx.codegen_unit();\n             let trans_items = cgu.items_in_deterministic_order(ccx.tcx(), &symbol_map);\n             for &(trans_item, linkage) in &trans_items {\n@@ -1200,6 +1190,19 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if ccx.sess().opts.debuginfo != NoDebugInfo {\n                 debuginfo::finalize(&ccx);\n             }\n+\n+            ModuleSource::Translated(ModuleLlvm {\n+                llcx: ccx.llcx(),\n+                llmod: ccx.llmod(),\n+            })\n+        };\n+\n+        ModuleTranslation {\n+            name: String::from(ccx.codegen_unit().name()),\n+            symbol_name_hash: ccx.codegen_unit()\n+                                 .compute_symbol_name_hash(ccx.shared(),\n+                                                           &symbol_map),\n+            source: source,\n         }\n     }\n "}]}