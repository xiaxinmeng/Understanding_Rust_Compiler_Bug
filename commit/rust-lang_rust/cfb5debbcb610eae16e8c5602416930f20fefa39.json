{"sha": "cfb5debbcb610eae16e8c5602416930f20fefa39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjVkZWJiY2I2MTBlYWUxNmU4YzU2MDI0MTY5MzBmMjBmZWZhMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-12T16:40:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-12T16:40:04Z"}, "message": "Auto merge of #42605 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 4 pull requests\n\n- Successful merges: #42579, #42586, #42592, #42594\n- Failed merges:", "tree": {"sha": "18eab1956b21730646dab44a840603fe9ecc366b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18eab1956b21730646dab44a840603fe9ecc366b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb5debbcb610eae16e8c5602416930f20fefa39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb5debbcb610eae16e8c5602416930f20fefa39", "html_url": "https://github.com/rust-lang/rust/commit/cfb5debbcb610eae16e8c5602416930f20fefa39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb5debbcb610eae16e8c5602416930f20fefa39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa34038ffd8c30ebdce5518a312a187385d3216", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa34038ffd8c30ebdce5518a312a187385d3216", "html_url": "https://github.com/rust-lang/rust/commit/5aa34038ffd8c30ebdce5518a312a187385d3216"}, {"sha": "3023cc49c8ee30d63fc999202ac022ace25be2df", "url": "https://api.github.com/repos/rust-lang/rust/commits/3023cc49c8ee30d63fc999202ac022ace25be2df", "html_url": "https://github.com/rust-lang/rust/commit/3023cc49c8ee30d63fc999202ac022ace25be2df"}], "stats": {"total": 161, "additions": 99, "deletions": 62}, "files": [{"sha": "fdb6ee42127b9163357ca879087cb38f135f59b9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -1320,7 +1320,7 @@ impl str {\n         core_str::StrExt::rsplitn(self, n, pat)\n     }\n \n-    /// An iterator over the matches of a pattern within the given string\n+    /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///\n     /// The pattern can be a `&str`, [`char`], or a closure that\n@@ -1359,7 +1359,7 @@ impl str {\n         core_str::StrExt::matches(self, pat)\n     }\n \n-    /// An iterator over the matches of a pattern within this string slice,\n+    /// An iterator over the disjoint matches of a pattern within this string slice,\n     /// yielded in reverse order.\n     ///\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if"}, {"sha": "635691dd3458db84e4ada7a21222f33c4ce24486", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -459,22 +459,10 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n /// rendering function with the necessary arguments for linking to a local path.\n fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                  print_all: bool, use_absolute: bool) -> fmt::Result {\n-    let empty = clean::PathSegment {\n-                    name: String::new(),\n-                    params: clean::PathParameters::Parenthesized {\n-                        inputs: Vec::new(),\n-                        output: None,\n-                    }\n-                };\n-    let last = path.segments.last()\n-                            .unwrap_or(&empty);\n-    let rel_root = if path.segments.is_empty() {\n-        None\n-    } else {\n-        match &*path.segments[0].name {\n-            \"self\" => Some(\"./\".to_string()),\n-            _ => None,\n-        }\n+    let last = path.segments.last().unwrap();\n+    let rel_root = match &*path.segments[0].name {\n+        \"self\" => Some(\"./\".to_string()),\n+        _ => None,\n     };\n \n     if print_all {\n@@ -508,7 +496,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                 Some((_, _, fqp)) => {\n                     format!(\"{}::{}\",\n                             fqp[..fqp.len() - 1].join(\"::\"),\n-                            HRef::new(did, fqp.last().unwrap_or(&String::new())))\n+                            HRef::new(did, fqp.last().unwrap()))\n                 }\n                 None => format!(\"{}\", HRef::new(did, &last.name)),\n             }\n@@ -740,10 +728,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {\n-                box clean::ResolvedPath { .. } => {\n-                    let path = clean::Path::singleton(name.clone());\n-                    !path.segments.is_empty() && &format!(\"{:#}\", trait_) != \"()\" &&\n-                    &format!(\"{:#}\", self_type) != \"Self\"\n+                box clean::ResolvedPath { ref path, .. } => {\n+                    !path.segments.is_empty() && !self_type.is_self_type()\n                 }\n                 _ => true,\n             };\n@@ -772,8 +758,18 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n                 box clean::ResolvedPath { did, ref typarams, .. } => {\n-                    let path = clean::Path::singleton(name.clone());\n-                    resolved_path(f, did, &path, true, use_absolute)?;\n+                    match href(did) {\n+                        Some((ref url, _, ref path)) if !f.alternate() => {\n+                            write!(f,\n+                                   \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+                                   title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                                   url = url,\n+                                   shortty = ItemType::AssociatedType,\n+                                   name = name,\n+                                   path = path.join(\"::\"))?;\n+                        }\n+                        _ => write!(f, \"{}\", name)?,\n+                    }\n \n                     // FIXME: `typarams` are not rendered, and this seems bad?\n                     drop(typarams);"}, {"sha": "0299e45599b80560837efb7254b7e1e86a273abd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -1334,7 +1334,7 @@ impl Context {\n         // these modules are recursed into, but not rendered normally\n         // (a flag on the context).\n         if !self.render_redirect_pages {\n-            self.render_redirect_pages = maybe_ignore_item(&item);\n+            self.render_redirect_pages = item.is_stripped();\n         }\n \n         if item.is_mod() {\n@@ -1417,7 +1417,7 @@ impl Context {\n         // BTreeMap instead of HashMap to get a sorted output\n         let mut map = BTreeMap::new();\n         for item in &m.items {\n-            if maybe_ignore_item(item) { continue }\n+            if item.is_stripped() { continue }\n \n             let short = item.type_().css_class();\n             let myname = match item.name {\n@@ -1718,7 +1718,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n         if let clean::DefaultImplItem(..) = items[*i].inner {\n             return false;\n         }\n-        !maybe_ignore_item(&items[*i])\n+        !items[*i].is_stripped()\n     }).collect::<Vec<usize>>();\n \n     // the order of item types in the listing\n@@ -1887,17 +1887,6 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     Ok(())\n }\n \n-fn maybe_ignore_item(it: &clean::Item) -> bool {\n-    match it.inner {\n-        clean::StrippedItem(..) => true,\n-        clean::ModuleItem(ref m) => {\n-            it.doc_value().is_none() && m.items.is_empty()\n-                                     && it.visibility != Some(clean::Public)\n-        },\n-        _ => false,\n-    }\n-}\n-\n fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<String> {\n     let mut stability = vec![];\n \n@@ -3317,7 +3306,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n             if let clean::DefaultImplItem(..) = it.inner {\n                 false\n             } else {\n-                !maybe_ignore_item(it) && !it.is_stripped() && it.type_() == myty\n+                !it.is_stripped() && it.type_() == myty\n             }\n         }) {\n             let (short, name) = match myty {"}, {"sha": "8f6faabd157d6738c0623ebbae04cb4c64fac587", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -145,20 +145,12 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             self.fold_item_recur(i)\n         };\n \n-        i.and_then(|i| {\n-            match i.inner {\n-                // emptied modules have no need to exist\n-                clean::ModuleItem(ref m)\n-                    if m.items.is_empty() &&\n-                       i.doc_value().is_none() => None,\n-                _ => {\n-                    if self.update_retained {\n-                        self.retained.insert(i.def_id);\n-                    }\n-                    Some(i)\n-                }\n+        if let Some(ref i) = i {\n+            if self.update_retained {\n+                self.retained.insert(i.def_id);\n             }\n-        })\n+        }\n+        i\n     }\n }\n "}, {"sha": "889ba81e77812dd9c2a268951cad1c83b0394a20", "filename": "src/libstd/env.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -367,7 +367,7 @@ fn _remove_var(k: &OsStr) {\n /// An iterator that splits an environment variable into paths according to\n /// platform-specific conventions.\n ///\n-/// This structure is created by the [`std::env::split_paths`] function See its\n+/// This structure is created by the [`std::env::split_paths`] function. See its\n /// documentation for more.\n ///\n /// [`std::env::split_paths`]: fn.split_paths.html\n@@ -605,14 +605,15 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     os_imp::current_exe()\n }\n \n-/// An iterator over the arguments of a process, yielding a [`String`] value\n-/// for each argument.\n+/// An iterator over the arguments of a process, yielding a [`String`] value for\n+/// each argument.\n ///\n-/// This structure is created through the [`std::env::args`] function.\n+/// This struct is created by the [`std::env::args`] function. See its\n+/// documentation for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and may not even exist. This means this property should\n-/// not be relied upon for security purposes.\n+/// set to arbitrary text, and may not even exist. This means this property\n+/// should not be relied upon for security purposes.\n ///\n /// [`String`]: ../string/struct.String.html\n /// [`std::env::args`]: ./fn.args.html\n@@ -622,11 +623,12 @@ pub struct Args { inner: ArgsOs }\n /// An iterator over the arguments of a process, yielding an [`OsString`] value\n /// for each argument.\n ///\n-/// This structure is created through the [`std::env::args_os`] function.\n+/// This struct is created by the [`std::env::args_os`] function. See its\n+/// documentation for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and may not even exist. This means this property should\n-/// not be relied upon for security purposes.\n+/// set to arbitrary text, and may not even exist. This means this property\n+/// should not be relied upon for security purposes.\n ///\n /// [`OsString`]: ../ffi/struct.OsString.html\n /// [`std::env::args_os`]: ./fn.args_os.html"}, {"sha": "d152be33f4c7426e272c19978b31438cbc98ad68", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![crate_type=\"lib\"]\n \n // @has assoc_types/trait.Index.html\n@@ -18,11 +20,14 @@ pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"index.v\"]//code' 'fn index'\n     // @has - '//*[@id=\"tymethod.index\"]//code' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n+    // @has - '//*[@id=\"tymethod.index\"]//code//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' \\\n+    //      \"Output\"\n     fn index<'a>(&'a self, index: I) -> &'a Self::Output;\n }\n \n // @has assoc_types/fn.use_output.html\n // @has - '//*[@class=\"rust fn\"]' '-> &T::Output'\n+// @has - '//*[@class=\"rust fn\"]//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' 'Output'\n pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n     obj.index(index)\n }\n@@ -33,10 +38,12 @@ pub trait Feed {\n \n // @has assoc_types/fn.use_input.html\n // @has - '//*[@class=\"rust fn\"]' 'T::Input'\n+// @has - '//*[@class=\"rust fn\"]//a[@href=\"../assoc_types/trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n \n // @has assoc_types/fn.cmp_input.html\n // @has - '//*[@class=\"rust fn\"]' 'where T::Input: PartialEq<U::Input>'\n+// @has - '//*[@class=\"rust fn\"]//a[@href=\"../assoc_types/trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n     where T::Input: PartialEq<U::Input>\n {"}, {"sha": "6b86af62a663a7ac3bf6cba329a6b5a3770011cb", "filename": "src/test/rustdoc/empty-mod-private.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: --no-defaults --passes collapse-docs --passes unindent-comments --passes strip-priv-imports\n+\n+// @has 'empty_mod_private/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n+// @has 'empty_mod_private/sidebar-items.js' 'foo'\n+// @matches 'empty_mod_private/foo/index.html' '//h1' 'Module empty_mod_private::foo'\n+mod foo {}\n+\n+// @has 'empty_mod_private/index.html' '//a[@href=\"bar/index.html\"]' 'bar'\n+// @has 'empty_mod_private/sidebar-items.js' 'bar'\n+// @matches 'empty_mod_private/bar/index.html' '//h1' 'Module empty_mod_private::bar'\n+mod bar {\n+    // @has 'empty_mod_private/bar/index.html' '//a[@href=\"baz/index.html\"]' 'baz'\n+    // @has 'empty_mod_private/bar/sidebar-items.js' 'baz'\n+    // @matches 'empty_mod_private/bar/baz/index.html' '//h1' 'Module empty_mod_private::bar::baz'\n+    mod baz {}\n+}"}, {"sha": "413fe161424053435b08bb098fdaa967910f12fb", "filename": "src/test/rustdoc/empty-mod-public.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb5debbcb610eae16e8c5602416930f20fefa39/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs?ref=cfb5debbcb610eae16e8c5602416930f20fefa39", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has 'empty_mod_public/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n+// @has 'empty_mod_public/sidebar-items.js' 'foo'\n+// @matches 'empty_mod_public/foo/index.html' '//h1' 'Module empty_mod_public::foo'\n+pub mod foo {}\n+\n+// @has 'empty_mod_public/index.html' '//a[@href=\"bar/index.html\"]' 'bar'\n+// @has 'empty_mod_public/sidebar-items.js' 'bar'\n+// @matches 'empty_mod_public/bar/index.html' '//h1' 'Module empty_mod_public::bar'\n+pub mod bar {\n+    // @has 'empty_mod_public/bar/index.html' '//a[@href=\"baz/index.html\"]' 'baz'\n+    // @has 'empty_mod_public/bar/sidebar-items.js' 'baz'\n+    // @matches 'empty_mod_public/bar/baz/index.html' '//h1' 'Module empty_mod_public::bar::baz'\n+    pub mod baz {}\n+}"}]}