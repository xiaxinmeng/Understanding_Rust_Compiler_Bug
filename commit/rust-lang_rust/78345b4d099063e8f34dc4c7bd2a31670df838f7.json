{"sha": "78345b4d099063e8f34dc4c7bd2a31670df838f7", "node_id": "C_kwDOAAsO6NoAKDc4MzQ1YjRkMDk5MDYzZThmMzRkYzRjN2JkMmEzMTY3MGRmODM4Zjc", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T20:41:46Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T20:41:46Z"}, "message": "Clarify `cfg` detection process in `matches.rs`", "tree": {"sha": "c1b9e22c899d9fdf75b38f3f5759d2e657fa89cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1b9e22c899d9fdf75b38f3f5759d2e657fa89cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78345b4d099063e8f34dc4c7bd2a31670df838f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78345b4d099063e8f34dc4c7bd2a31670df838f7", "html_url": "https://github.com/rust-lang/rust/commit/78345b4d099063e8f34dc4c7bd2a31670df838f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78345b4d099063e8f34dc4c7bd2a31670df838f7/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8912d659cdc9e1fd787136fe1b52a285f2fc2106", "url": "https://api.github.com/repos/rust-lang/rust/commits/8912d659cdc9e1fd787136fe1b52a285f2fc2106", "html_url": "https://github.com/rust-lang/rust/commit/8912d659cdc9e1fd787136fe1b52a285f2fc2106"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "92179eb6f0e60e5f7c8a90bdd1e6daa7b54d742c", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78345b4d099063e8f34dc4c7bd2a31670df838f7/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78345b4d099063e8f34dc4c7bd2a31670df838f7/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=78345b4d099063e8f34dc4c7bd2a31670df838f7", "patch": "@@ -668,9 +668,27 @@ fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, ar\n     });\n     let end = e.span.hi();\n \n+    // Walk through all the non-code space before each match arm. The space trailing the final arm is\n+    // handled after the `try_fold` e.g.\n+    //\n+    // match foo {\n+    // _________^-                      everything between the scrutinee and arm1\n+    //|    arm1 => (),\n+    //|---^___________^                 everything before arm2\n+    //|    #[cfg(feature = \"enabled\")]\n+    //|    arm2 => some_code(),\n+    //|---^____________________^        everything before arm3\n+    //|    // some comment about arm3\n+    //|    arm3 => some_code(),\n+    //|---^____________________^        everything after arm3\n+    //|    #[cfg(feature = \"disabled\")]\n+    //|    arm4 = some_code(),\n+    //|};\n+    //|^\n     let found = arm_spans.try_fold(start, |start, range| {\n         let Some((end, next_start)) = range else {\n-            // Shouldn't happen, but treat this as though a `cfg` attribute were found\n+            // Shouldn't happen as macros can't expand to match arms, but treat this as though a `cfg` attribute were\n+            // found.\n             return Err(());\n         };\n         let span = SpanData {\n@@ -697,6 +715,7 @@ fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, ar\n     }\n }\n \n+/// Checks if the given span contains a `#[cfg(..)]` attribute\n fn span_contains_cfg(cx: &LateContext<'_>, s: Span) -> bool {\n     let Some(snip) = snippet_opt(cx, s) else {\n         // Assume true. This would require either an invalid span, or one which crosses file boundaries.\n@@ -708,6 +727,8 @@ fn span_contains_cfg(cx: &LateContext<'_>, s: Span) -> bool {\n         pos += t.len;\n         (t.kind, start..pos)\n     });\n+\n+    // Search for the token sequence [`#`, `[`, `cfg`]\n     while iter.any(|(t, _)| matches!(t, TokenKind::Pound)) {\n         let mut iter = iter.by_ref().skip_while(|(t, _)| {\n             matches!("}]}