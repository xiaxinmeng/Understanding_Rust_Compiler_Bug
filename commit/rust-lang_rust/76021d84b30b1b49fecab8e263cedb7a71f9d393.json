{"sha": "76021d84b30b1b49fecab8e263cedb7a71f9d393", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDIxZDg0YjMwYjFiNDlmZWNhYjhlMjYzY2VkYjdhNzFmOWQzOTM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2015-12-18T10:07:06Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-07T00:42:12Z"}, "message": "Refactor away extension traits RegionEscape and HasTypeFlags", "tree": {"sha": "c9fe1fa9e235813d1b2ba196e361dc9379a25030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9fe1fa9e235813d1b2ba196e361dc9379a25030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76021d84b30b1b49fecab8e263cedb7a71f9d393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76021d84b30b1b49fecab8e263cedb7a71f9d393", "html_url": "https://github.com/rust-lang/rust/commit/76021d84b30b1b49fecab8e263cedb7a71f9d393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76021d84b30b1b49fecab8e263cedb7a71f9d393/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9808ea4b463a9e7905576dc222af0851c4e6e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9808ea4b463a9e7905576dc222af0851c4e6e77", "html_url": "https://github.com/rust-lang/rust/commit/f9808ea4b463a9e7905576dc222af0851c4e6e77"}], "stats": {"total": 345, "additions": 159, "deletions": 186}, "files": [{"sha": "d25084bbdffb5e5794cc0840f0c4cf9d7b4750e9", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -14,7 +14,7 @@ use middle::def_id::DefId;\n use middle::infer::{InferCtxt, GenericKind};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n+use middle::ty::{self, ToPredicate, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use syntax::ast;"}, {"sha": "f390d85a28d66370e29dc8c124ea59b23bb4416d", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -82,7 +82,7 @@ use middle::def_id::DefId;\n use middle::infer::{self, TypeOrigin};\n use middle::region;\n use middle::subst;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::{Region, ReFree};\n use middle::ty::error::TypeError;\n \n@@ -250,7 +250,7 @@ pub trait ErrorReporting<'tcx> {\n \n     fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String>;\n \n-    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + HasTypeFlags>(\n+    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: &ty::error::ExpectedFound<T>)\n         -> Option<String>;\n@@ -575,7 +575,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + HasTypeFlags>(\n+    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(\n         &self,\n         exp_found: &ty::error::ExpectedFound<T>)\n         -> Option<String>"}, {"sha": "8b53a1520b316dd528a56bece4f50ffc341c4369", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -30,8 +30,7 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty::fold::TypeFoldable;\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::fold::TypeFolder;\n use std::collections::hash_map::{self, Entry};\n "}, {"sha": "e8f542db933cbf0c309aac04961aa8641cfd36ec", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -14,9 +14,8 @@\n use super::{CombinedSnapshot, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::CombineFields;\n \n-use middle::ty::{self, Binder};\n+use middle::ty::{self, Binder, TypeFoldable};\n use middle::ty::error::TypeError;\n-use middle::ty::fold::TypeFoldable;\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use syntax::codemap::Span;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n@@ -557,7 +556,7 @@ pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                              snapshot: &CombinedSnapshot,\n                              value: &T)\n                              -> T\n-    where T : TypeFoldable<'tcx> + ty::HasTypeFlags\n+    where T : TypeFoldable<'tcx>\n {\n     debug_assert!(leak_check(infcx, &skol_map, snapshot).is_ok());\n "}, {"sha": "922d4c251bb64a08402b9df9d026826205a72419", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -30,7 +30,7 @@ use middle::subst::Subst;\n use middle::traits;\n use middle::ty::adjustment;\n use middle::ty::{TyVid, IntVid, FloatVid};\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty};\n use middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use middle::ty::relate::{Relate, RelateResult, TypeRelation};"}, {"sha": "04c0cc2245db6b97c0ac628899aaec076194dcc7", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use super::{InferCtxt, FixupError, FixupResult};\n-use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty::fold::{TypeFoldable};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n ///////////////////////////////////////////////////////////////////////////\n // OPPORTUNISTIC TYPE RESOLVER"}, {"sha": "69b952ca1f3fcf3ae42320e8d02d3c294cdb46cf", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -13,7 +13,7 @@ use middle::def::DefFn;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n use middle::ty::{TransmuteRestriction, ctxt, TyBareFn};\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n "}, {"sha": "52a528f07a3b2c681b58446c34d8686706156693", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -14,7 +14,7 @@ pub use self::ParamSpace::*;\n pub use self::RegionSubsts::*;\n \n use middle::cstore;\n-use middle::ty::{self, Ty, HasTypeFlags, RegionEscape};\n+use middle::ty::{self, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n \n use serialize::{Encodable, Encoder, Decodable, Decoder};"}, {"sha": "883c5e7bb40eb2713f37ea37fb5afc5d3761e9fe", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -26,9 +26,8 @@ use super::{\n use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n-use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef, Ty};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TypeFoldable};\n use middle::ty::fast_reject;\n-use middle::ty::fold::TypeFoldable;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n use std::cmp;"}, {"sha": "4f8f6b846a6f419d272526b7ea20719c608fa8a5", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::infer::InferCtxt;\n-use middle::ty::{self, RegionEscape, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use syntax::ast;\n use util::common::ErrorReported;"}, {"sha": "6cf841cc47756557c91f67111dd2bf8686d212dc", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -19,9 +19,8 @@ use dep_graph::DepNode;\n use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use middle::subst;\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::fast_reject;\n-use middle::ty::fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n \n use std::rc::Rc;"}, {"sha": "0e4a42bd15134050e47e9b39bcffe3b9e272e96e", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -23,7 +23,7 @@ use super::elaborate_predicates;\n use middle::def_id::DefId;\n use middle::subst::{self, SelfSpace, TypeSpace};\n use middle::traits;\n-use middle::ty::{self, HasTypeFlags, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPolyTraitRef, Ty, TypeFoldable};\n use std::rc::Rc;\n use syntax::ast;\n "}, {"sha": "5e7db57b4318164c78549e5847602b2d6039b9f0", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -23,7 +23,7 @@ use super::util;\n \n use middle::infer::{self, TypeOrigin};\n use middle::subst::Subst;\n-use middle::ty::{self, ToPredicate, RegionEscape, HasTypeFlags, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder};\n use syntax::parse::token;\n use util::common::FN_OUTPUT_NAME;"}, {"sha": "f544f8ce362341f1c4ef71f3e5f088a1b0b8348f", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -39,9 +39,8 @@ use middle::def_id::DefId;\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener, TypeOrigin};\n use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, ToPredicate, RegionEscape, ToPolyTraitRef, Ty, HasTypeFlags};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TypeFoldable};\n use middle::ty::fast_reject;\n-use middle::ty::fold::TypeFoldable;\n use middle::ty::relate::TypeRelation;\n \n use std::cell::RefCell;"}, {"sha": "6cab0baa55325ecebc5adf11ced7205208edbabb", "filename": "src/librustc/middle/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fadjustment.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -11,8 +11,7 @@\n pub use self::AutoAdjustment::*;\n pub use self::AutoRef::*;\n \n-use middle::ty::{self, Ty, TypeAndMut};\n-use middle::ty::HasTypeFlags;\n+use middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use middle::ty::LvaluePreference::{NoPreference};\n \n use syntax::ast;"}, {"sha": "a0b03fe8126dd18aabbff7dca7cab7be8a5450a4", "filename": "src/librustc/middle/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fflags.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::subst;\n-use middle::ty::{self, HasTypeFlags, Ty, TypeFlags};\n+use middle::ty::{self, Ty, TypeFlags, TypeFoldable};\n \n pub struct FlagComputation {\n     pub flags: TypeFlags,"}, {"sha": "4701ed61937632cdff617c6a6fd864d96a77abd1", "filename": "src/librustc/middle/ty/fold.rs", "status": "modified", "additions": 106, "deletions": 49, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ffold.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -42,7 +42,7 @@\n use middle::region;\n use middle::subst;\n use middle::ty::adjustment;\n-use middle::ty::{self, Binder, Ty, RegionEscape, HasTypeFlags};\n+use middle::ty::{self, Binder, Ty, TypeFlags};\n \n use std::fmt;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n@@ -59,6 +59,53 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn visit_subitems_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.visit_with(visitor)\n     }\n+\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n+        self.visit_with(&mut HasEscapingRegionsVisitor { depth: depth })\n+    }\n+    fn has_escaping_regions(&self) -> bool {\n+        self.has_regions_escaping_depth(0)\n+    }\n+\n+    fn has_type_flags(&self, flags: TypeFlags) -> bool {\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags: flags })\n+    }\n+    fn has_projection_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_PROJECTION)\n+    }\n+    fn references_error(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_ERR)\n+    }\n+    fn has_param_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_PARAMS)\n+    }\n+    fn has_self_ty(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_SELF)\n+    }\n+    fn has_infer_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_INFER)\n+    }\n+    fn needs_infer(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n+    }\n+    fn needs_subst(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n+    }\n+    fn has_closure_types(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n+    }\n+    fn has_erasable_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n+                            TypeFlags::HAS_RE_INFER |\n+                            TypeFlags::HAS_FREE_REGIONS)\n+    }\n+    /// Indicates whether this value references only 'global'\n+    /// types/lifetimes that are the same regardless of what fn we are\n+    /// in. This is used for caching. Errs on the side of returning\n+    /// false.\n+    fn is_global(&self) -> bool {\n+        !self.has_type_flags(TypeFlags::HAS_LOCAL_NAMES)\n+    }\n }\n \n /// The TypeFolder trait defines the actual *folding*. There is a\n@@ -518,64 +565,74 @@ pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>>(tcx: &ty::ctxt<'tcx>,\n     }))\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> RegionEscape for T {\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        struct RegionEscapeVisitor {\n-            depth: u32,\n-        }\n-\n-        impl<'tcx> TypeVisitor<'tcx> for RegionEscapeVisitor {\n-            fn enter_region_binder(&mut self) {\n-                self.depth += 1;\n-            }\n+/// An \"escaping region\" is a bound region whose binder is not part of `t`.\n+///\n+/// So, for example, consider a type like the following, which has two binders:\n+///\n+///    for<'a> fn(x: for<'b> fn(&'a isize, &'b isize))\n+///    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ outer scope\n+///                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~  inner scope\n+///\n+/// This type has *bound regions* (`'a`, `'b`), but it does not have escaping regions, because the\n+/// binders of both `'a` and `'b` are part of the type itself. However, if we consider the *inner\n+/// fn type*, that type has an escaping region: `'a`.\n+///\n+/// Note that what I'm calling an \"escaping region\" is often just called a \"free region\". However,\n+/// we already use the term \"free region\". It refers to the regions that we use to represent bound\n+/// regions on a fn definition while we are typechecking its body.\n+///\n+/// To clarify, conceptually there is no particular difference between an \"escaping\" region and a\n+/// \"free\" region. However, there is a big difference in practice. Basically, when \"entering\" a\n+/// binding level, one is generally required to do some sort of processing to a bound region, such\n+/// as replacing it with a fresh/skolemized region, or making an entry in the environment to\n+/// represent the scope to which it is attached, etc. An escaping region represents a bound region\n+/// for which this processing has not yet been done.\n+struct HasEscapingRegionsVisitor {\n+    depth: u32,\n+}\n \n-            fn exit_region_binder(&mut self) {\n-                self.depth -= 1;\n-            }\n+impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor {\n+    fn enter_region_binder(&mut self) {\n+        self.depth += 1;\n+    }\n \n-            fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                t.region_depth > self.depth\n-            }\n+    fn exit_region_binder(&mut self) {\n+        self.depth -= 1;\n+    }\n \n-            fn visit_region(&mut self, r: ty::Region) -> bool {\n-                r.escapes_depth(self.depth)\n-            }\n-        }\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+        t.region_depth > self.depth\n+    }\n \n-        self.visit_with(&mut RegionEscapeVisitor { depth: depth })\n+    fn visit_region(&mut self, r: ty::Region) -> bool {\n+        r.escapes_depth(self.depth)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> HasTypeFlags for T {\n-    fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {\n-        struct HasTypeFlagsVisitor {\n-            flags: ty::TypeFlags,\n-        }\n+struct HasTypeFlagsVisitor {\n+    flags: ty::TypeFlags,\n+}\n \n-        impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-            fn visit_ty(&mut self, t: Ty) -> bool {\n-                t.flags.get().intersects(self.flags)\n-            }\n+impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+    fn visit_ty(&mut self, t: Ty) -> bool {\n+        t.flags.get().intersects(self.flags)\n+    }\n \n-            fn visit_region(&mut self, r: ty::Region) -> bool {\n-                if self.flags.intersects(ty::TypeFlags::HAS_LOCAL_NAMES) {\n-                    // does this represent a region that cannot be named\n-                    // in a global way? used in fulfillment caching.\n-                    match r {\n-                        ty::ReStatic | ty::ReEmpty => {}\n-                        _ => return true,\n-                    }\n-                }\n-                if self.flags.intersects(ty::TypeFlags::HAS_RE_INFER) {\n-                    match r {\n-                        ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n-                        _ => {}\n-                    }\n-                }\n-                false\n+    fn visit_region(&mut self, r: ty::Region) -> bool {\n+        if self.flags.intersects(ty::TypeFlags::HAS_LOCAL_NAMES) {\n+            // does this represent a region that cannot be named\n+            // in a global way? used in fulfillment caching.\n+            match r {\n+                ty::ReStatic | ty::ReEmpty => {}\n+                _ => return true,\n             }\n         }\n-\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags: flags })\n+        if self.flags.intersects(ty::TypeFlags::HAS_RE_INFER) {\n+            match r {\n+                ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n+                _ => {}\n+            }\n+        }\n+        false\n     }\n }"}, {"sha": "852d9d80a9148ff46df750b1d24c184952e98eea", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 70, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -17,6 +17,7 @@ pub use self::BorrowKind::*;\n pub use self::ImplOrTraitItem::*;\n pub use self::IntVarValue::*;\n pub use self::LvaluePreference::*;\n+pub use self::fold::TypeFoldable;\n \n use dep_graph::{self, DepNode};\n use front::map as ast_map;\n@@ -2667,73 +2668,3 @@ impl<'tcx> ctxt<'tcx> {\n         trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n     }\n }\n-\n-/// An \"escaping region\" is a bound region whose binder is not part of `t`.\n-///\n-/// So, for example, consider a type like the following, which has two binders:\n-///\n-///    for<'a> fn(x: for<'b> fn(&'a isize, &'b isize))\n-///    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ outer scope\n-///                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~  inner scope\n-///\n-/// This type has *bound regions* (`'a`, `'b`), but it does not have escaping regions, because the\n-/// binders of both `'a` and `'b` are part of the type itself. However, if we consider the *inner\n-/// fn type*, that type has an escaping region: `'a`.\n-///\n-/// Note that what I'm calling an \"escaping region\" is often just called a \"free region\". However,\n-/// we already use the term \"free region\". It refers to the regions that we use to represent bound\n-/// regions on a fn definition while we are typechecking its body.\n-///\n-/// To clarify, conceptually there is no particular difference between an \"escaping\" region and a\n-/// \"free\" region. However, there is a big difference in practice. Basically, when \"entering\" a\n-/// binding level, one is generally required to do some sort of processing to a bound region, such\n-/// as replacing it with a fresh/skolemized region, or making an entry in the environment to\n-/// represent the scope to which it is attached, etc. An escaping region represents a bound region\n-/// for which this processing has not yet been done.\n-pub trait RegionEscape {\n-    fn has_escaping_regions(&self) -> bool {\n-        self.has_regions_escaping_depth(0)\n-    }\n-\n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool;\n-}\n-\n-pub trait HasTypeFlags {\n-    fn has_type_flags(&self, flags: TypeFlags) -> bool;\n-    fn has_projection_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_PROJECTION)\n-    }\n-    fn references_error(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_ERR)\n-    }\n-    fn has_param_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_PARAMS)\n-    }\n-    fn has_self_ty(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_SELF)\n-    }\n-    fn has_infer_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER)\n-    }\n-    fn needs_infer(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n-    }\n-    fn needs_subst(&self) -> bool {\n-        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n-    }\n-    fn has_closure_types(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n-    }\n-    fn has_erasable_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n-                            TypeFlags::HAS_RE_INFER |\n-                            TypeFlags::HAS_FREE_REGIONS)\n-    }\n-    /// Indicates whether this value references only 'global'\n-    /// types/lifetimes that are the same regardless of what fn we are\n-    /// in. This is used for caching. Errs on the side of returning\n-    /// false.\n-    fn is_global(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_LOCAL_NAMES)\n-    }\n-}"}, {"sha": "fc20c1bcb85feec89e73ba01e7100ce15a6f56a2", "filename": "src/librustc/middle/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -13,7 +13,7 @@\n // RFC for reference.\n \n use middle::infer::InferCtxt;\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {"}, {"sha": "46bc13bd5988be5e27302c6207b0492c8b6dd371", "filename": "src/librustc/middle/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -15,9 +15,8 @@\n \n use middle::def_id::DefId;\n use middle::subst::{ErasedRegions, NonerasedRegions, ParamSpace, Substs};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::error::{ExpectedFound, TypeError};\n-use middle::ty::fold::TypeFoldable;\n use std::rc::Rc;\n use syntax::abi;\n use rustc_front::hir as ast;"}, {"sha": "df2f3568754afbab9bc4bf5c0d110cee013b7bab", "filename": "src/librustc/middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fstructural_impls.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -10,8 +10,7 @@\n \n use middle::subst::{self, VecPerParamSpace};\n use middle::traits;\n-use middle::ty::{self, TraitRef, Ty, TypeAndMut};\n-use middle::ty::Lift;\n+use middle::ty::{self, Lift, TraitRef, Ty};\n use middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use std::rc::Rc;"}, {"sha": "7e8d38ae8e79708700b7eb7cde7e53e9b4b4c71e", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -15,8 +15,7 @@ use middle::def_id::DefId;\n use middle::region;\n use middle::subst::{self, Substs};\n use middle::traits;\n-use middle::ty::{self, AdtDef, TypeFlags, Ty, TyS};\n-use middle::ty::{RegionEscape, ToPredicate};\n+use middle::ty::{self, AdtDef, ToPredicate, TypeFlags, Ty, TyS, TypeFoldable};\n use util::common::ErrorReported;\n \n use collections::enum_set::{self, EnumSet, CLike};"}, {"sha": "af23efe2bf4bad052e40b32a8e1992768d03883c", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -18,9 +18,8 @@ use middle::subst::{self, Subst, Substs};\n use middle::infer;\n use middle::pat_util;\n use middle::traits;\n-use middle::ty::{self, Ty, TypeAndMut, TypeFlags};\n+use middle::ty::{self, Ty, TypeAndMut, TypeFlags, TypeFoldable};\n use middle::ty::{Disr, ParameterEnvironment};\n-use middle::ty::{HasTypeFlags, RegionEscape};\n use middle::ty::TypeVariants::*;\n use util::num::ToPrimitive;\n "}, {"sha": "5f0fc306c24f8897da6299f2b563962bbacc3949", "filename": "src/librustc/middle/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fwf.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -13,7 +13,7 @@ use middle::infer::InferCtxt;\n use middle::ty::outlives::{self, Component};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPredicate, Ty};\n+use middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "9b644e7eba014d72aac31b7cdf1a8f6ee01322ee", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -17,8 +17,7 @@ use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n-use middle::ty::{self, Ty, HasTypeFlags};\n-use middle::ty::fold::TypeFoldable;\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use std::fmt;\n use syntax::{abi};"}, {"sha": "8f3366eacb3645ceade26085e26160d1da174f03", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -21,7 +21,7 @@ use rustc_typeck::middle::resolve_lifetime;\n use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;\n use rustc_typeck::middle::subst::Subst;\n-use rustc_typeck::middle::ty::{self, Ty, RegionEscape};\n+use rustc_typeck::middle::ty::{self, Ty, TypeFoldable};\n use rustc_typeck::middle::ty::relate::TypeRelation;\n use rustc_typeck::middle::infer::{self, TypeOrigin};\n use rustc_typeck::middle::infer::lub::Lub;"}, {"sha": "b8dfb9f74c6a42b55f85c266a467394fad6056ed", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -33,7 +33,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use rustc::mir;\n use rustc::mir::visit::MutVisitor;"}, {"sha": "5a48d6019d69937b455ea860d760ed43e10e048f", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -22,7 +22,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{self, ToPredicate, Ty, HasTypeFlags};\n+use middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n \n use rbml;\n use rbml::leb128;"}, {"sha": "daafdc0b8d7f626a10a29dca12858a6a8d4356f3", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -42,7 +42,7 @@ use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n use middle::pat_util::simple_name;\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc::util::common::time;"}, {"sha": "e3b7502b69c0e164423bf7e34f18ed271934da4c", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -50,7 +50,7 @@ use trans::meth;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{self, Ty, HasTypeFlags, RegionEscape};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::MethodCall;\n use rustc_front::hir;\n "}, {"sha": "5046c2e29207cef7dea60f92cc0e65d69d0b0f5f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -37,7 +37,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use middle::traits;\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::fold::{TypeFolder, TypeFoldable};\n use rustc_front::hir;\n use rustc::mir::repr::Mir;"}, {"sha": "07cc6ec8fbd1133c68640b5628946d46ef6dede1", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -35,7 +35,7 @@ use trans::glue;\n use trans::type_of;\n use trans::machine;\n use trans::type_::Type;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::subst::Substs;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;"}, {"sha": "bd12dd8c3effcc9ad49ad5185daa835fd8e555c1", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -34,7 +34,7 @@ use trans::machine;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of::*;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::MethodCall;\n \n use syntax::ast;"}, {"sha": "e461a1c05bcf39323b44687915094870bd57e8fa", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -11,7 +11,7 @@\n use back::abi;\n use llvm::ValueRef;\n use middle::subst::Substs;\n-use middle::ty::{Ty, HasTypeFlags};\n+use middle::ty::{Ty, TypeFoldable};\n use rustc::middle::const_eval::ConstVal;\n use rustc::mir::repr as mir;\n use trans::common::{self, Block, C_bool, C_bytes, C_floating_f64, C_integral, C_str_slice};"}, {"sha": "0e2387e3e349e3839725964fb9d8ced5c8e529a8", "filename": "src/librustc_trans/trans/mir/did.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fdid.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -12,7 +12,7 @@\n \n use syntax::codemap::DUMMY_SP;\n use rustc::front::map;\n-use rustc::middle::ty::{self, Ty, HasTypeFlags};\n+use rustc::middle::ty::{self, Ty, TypeFoldable};\n use rustc::middle::subst::Substs;\n use rustc::middle::const_eval;\n use rustc::middle::def_id::DefId;"}, {"sha": "ba0427ec3d6862918a4ea8cd83563f3d19f629b0", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::middle::ty::{self, Ty, HasTypeFlags};\n+use rustc::middle::ty::{self, Ty, TypeFoldable};\n use rustc::mir::repr as mir;\n use rustc::mir::tcx::LvalueTy;\n use trans::adt;"}, {"sha": "6240473b78ec3ecd4875414961ebb4b2c36e6946", "filename": "src/librustc_trans/trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::middle::ty::{Ty, HasTypeFlags};\n+use rustc::middle::ty::{Ty, TypeFoldable};\n use rustc::mir::repr as mir;\n use trans::base;\n use trans::common::{self, Block};"}, {"sha": "416c1908c973ec5bd5285a0951d7742cfa3e23db", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -23,7 +23,7 @@ use trans::base;\n use trans::common::*;\n use trans::declare;\n use trans::foreign;\n-use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::{self, Ty};\n use rustc::front::map as hir_map;\n \n use rustc_front::hir;"}, {"sha": "8696bdd60e2915df6e664b0c866ea7c01324f513", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -17,7 +17,7 @@ use trans::adt;\n use trans::common::*;\n use trans::foreign;\n use trans::machine;\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, Ty, TypeFoldable};\n \n use trans::type_::Type;\n "}, {"sha": "98effeefad2a74fa9aaba4cc421683248c295368", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -57,7 +57,7 @@ use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use middle::traits;\n-use middle::ty::{self, Ty, ToPredicate, HasTypeFlags};\n+use middle::ty::{self, Ty, ToPredicate, TypeFoldable};\n use middle::ty::wf::object_region_bounds;\n use require_c_abi_if_variadic;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,"}, {"sha": "926d7fd6e25eb10ccffb4ff385b755651dfc17da", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -14,7 +14,7 @@ use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding};\n use middle::pat_util::pat_is_resolved_const;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, HasTypeFlags, LvaluePreference};\n+use middle::ty::{self, Ty, TypeFoldable, LvaluePreference};\n use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n use check::{check_expr_with_lvalue_pref};"}, {"sha": "fd6c4f44ba42809d9ffb62e056b49b5f1dae95b3", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -45,7 +45,7 @@ use super::structurally_resolved_type;\n \n use lint;\n use middle::def_id::DefId;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use middle::ty::cast::{CastKind, CastTy};\n use syntax::codemap::Span;\n use rustc_front::hir;"}, {"sha": "44b36294cb480d56867c65231661c9d9ecb784b1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -17,7 +17,7 @@ use middle::def_id::DefId;\n use middle::privacy::{AllPublic, DependsOn, LastPrivate, LastMod};\n use middle::subst;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPredicate, ToPolyTraitRef, TraitRef};\n+use middle::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use middle::ty::adjustment::{AdjustDerefRef, AutoDerefRef, AutoPtr};\n use middle::infer;\n "}, {"sha": "44dd0ef7b17d836e055127ba664ee6aa1733316e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -19,9 +19,7 @@ use middle::def_id::DefId;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n-use middle::ty::{self, NoPreference, RegionEscape, Ty, ToPolyTraitRef, TraitRef};\n-use middle::ty::HasTypeFlags;\n-use middle::ty::fold::TypeFoldable;\n+use middle::ty::{self, NoPreference, Ty, ToPolyTraitRef, TraitRef, TypeFoldable};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeOrigin};\n use syntax::ast;"}, {"sha": "560e84b52d1d6966a8e2ee9fd70ff9703ce0632a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -16,7 +16,7 @@ use CrateCtxt;\n use astconv::AstConv;\n use check::{self, FnCtxt};\n use front::map as hir_map;\n-use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate, HasTypeFlags};\n+use middle::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use middle::cstore::{self, CrateStore, DefLike};\n use middle::def;\n use middle::def_id::DefId;"}, {"sha": "3cf75483fea0f28bb17c466556fb79e2b9549dbb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -97,7 +97,7 @@ use middle::traits::{self, report_fulfillment_errors};\n use middle::ty::{GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n-use middle::ty::{self, HasTypeFlags, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPolyTraitRef, Ty};\n use middle::ty::{MethodCall, MethodCallee};\n use middle::ty::adjustment;\n use middle::ty::error::TypeError;"}, {"sha": "f4841b75d13d55e8da0b3beb3efa8d158e3d60cd", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -19,7 +19,7 @@ use super::{\n     FnCtxt,\n };\n use middle::def_id::DefId;\n-use middle::ty::{Ty, HasTypeFlags, PreferMutLvalue};\n+use middle::ty::{Ty, TypeFoldable, PreferMutLvalue};\n use syntax::ast;\n use syntax::parse::token;\n use rustc_front::hir;"}, {"sha": "9852af3de995608735dfc6cacdb4ec6a77d6d8fe", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -92,7 +92,7 @@ use middle::mem_categorization::Categorization;\n use middle::region::{self, CodeExtent};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, Ty, MethodCall, HasTypeFlags};\n+use middle::ty::{self, Ty, MethodCall, TypeFoldable};\n use middle::infer::{self, GenericKind, InferCtxt, SubregionOrigin, TypeOrigin, VerifyBound};\n use middle::pat_util;\n use middle::ty::adjustment;"}, {"sha": "c2abb074efa136690a25fca2cf752e37f0dbe5ca", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -17,7 +17,7 @@ use astconv::AstConv;\n use check::FnCtxt;\n use middle::def_id::DefId;\n use middle::pat_util;\n-use middle::ty::{self, Ty, MethodCall, MethodCallee, HasTypeFlags};\n+use middle::ty::{self, Ty, MethodCall, MethodCallee};\n use middle::ty::adjustment;\n use middle::ty::fold::{TypeFolder,TypeFoldable};\n use middle::infer;"}, {"sha": "2c8fedb46a7b7b52e770f9194875b1c8854a2be9", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -20,8 +20,7 @@ use middle::def_id::DefId;\n use middle::lang_items::UnsizeTraitLangItem;\n use middle::subst::{self, Subst};\n use middle::traits;\n-use middle::ty;\n-use middle::ty::RegionEscape;\n+use middle::ty::{self, TypeFoldable};\n use middle::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use middle::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use middle::ty::{Ty, TyBool, TyChar, TyEnum, TyError};"}, {"sha": "867d12a1def92eeef016d512918a40263ae3d30b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76021d84b30b1b49fecab8e263cedb7a71f9d393/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=76021d84b30b1b49fecab8e263cedb7a71f9d393", "patch": "@@ -103,7 +103,7 @@ use front::map as hir_map;\n use middle::def;\n use middle::infer::{self, TypeOrigin};\n use middle::subst;\n-use middle::ty::{self, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, TypeFoldable};\n use session::config;\n use util::common::time;\n use rustc_front::hir;"}]}