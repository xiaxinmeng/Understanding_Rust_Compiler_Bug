{"sha": "d1338354ca7afae7088f84756ed103ea94ce82f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzM4MzU0Y2E3YWZhZTcwODhmODQ3NTZlZDEwM2VhOTRjZTgyZjk=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-11T03:14:53Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-11T03:14:53Z"}, "message": "fix match arm false positive", "tree": {"sha": "750a1e7323380d9112ba0a64c9f8a5fff3cf3a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/750a1e7323380d9112ba0a64c9f8a5fff3cf3a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1338354ca7afae7088f84756ed103ea94ce82f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1338354ca7afae7088f84756ed103ea94ce82f9", "html_url": "https://github.com/rust-lang/rust/commit/d1338354ca7afae7088f84756ed103ea94ce82f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1338354ca7afae7088f84756ed103ea94ce82f9/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb755caa2b1d7265da7d3367af3b49039dfe00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb755caa2b1d7265da7d3367af3b49039dfe00e", "html_url": "https://github.com/rust-lang/rust/commit/beb755caa2b1d7265da7d3367af3b49039dfe00e"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "342a78b4514a7ee143d0c690c790b15611e08c4d", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d1338354ca7afae7088f84756ed103ea94ce82f9/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1338354ca7afae7088f84756ed103ea94ce82f9/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=d1338354ca7afae7088f84756ed103ea94ce82f9", "patch": "@@ -1315,8 +1315,9 @@ mod tests {\n             }\n         \";\n \n-        // Match arms with the incorrect type are filtered out.\n-        check_diagnostic(content);\n+        // Match statements with arms that don't match the\n+        // expression pattern do not fire this diagnostic.\n+        check_no_diagnostic(content);\n     }\n \n     #[test]\n@@ -1330,8 +1331,9 @@ mod tests {\n             }\n         \";\n \n-        // Match arms with the incorrect type are filtered out.\n-        check_diagnostic(content);\n+        // Match statements with arms that don't match the\n+        // expression pattern do not fire this diagnostic.\n+        check_no_diagnostic(content);\n     }\n \n     #[test]\n@@ -1344,8 +1346,9 @@ mod tests {\n             }\n         \";\n \n-        // Match arms with the incorrect type are filtered out.\n-        check_diagnostic(content);\n+        // Match statements with arms that don't match the\n+        // expression pattern do not fire this diagnostic.\n+        check_no_diagnostic(content);\n     }\n \n     #[test]"}, {"sha": "03ef488b9df3644ae49d6b12b0f9f6d8ecb71589", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1338354ca7afae7088f84756ed103ea94ce82f9/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1338354ca7afae7088f84756ed103ea94ce82f9/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=d1338354ca7afae7088f84756ed103ea94ce82f9", "patch": "@@ -163,12 +163,6 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         let mut seen = Matrix::empty();\n         for pat in pats {\n-            // We skip any patterns whose type we cannot resolve.\n-            //\n-            // This could lead to false positives in this diagnostic, so\n-            // it might be better to skip the entire diagnostic if we either\n-            // cannot resolve a match arm or determine that the match arm has\n-            // the wrong type.\n             if let Some(pat_ty) = infer.type_of_pat.get(pat) {\n                 // We only include patterns whose type matches the type\n                 // of the match expression. If we had a InvalidMatchArmPattern\n@@ -191,8 +185,15 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                     // to the matrix here.\n                     let v = PatStack::from_pattern(pat);\n                     seen.push(&cx, v);\n+                    continue;\n                 }\n             }\n+\n+            // If we can't resolve the type of a pattern, or the pattern type doesn't\n+            // fit the match expression, we skip this diagnostic. Skipping the entire\n+            // diagnostic rather than just not including this match arm is preferred\n+            // to avoid the chance of false positives.\n+            return;\n         }\n \n         match is_useful(&cx, &seen, &PatStack::from_wild()) {"}]}