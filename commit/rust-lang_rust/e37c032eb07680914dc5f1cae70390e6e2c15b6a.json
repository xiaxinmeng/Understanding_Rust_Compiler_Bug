{"sha": "e37c032eb07680914dc5f1cae70390e6e2c15b6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzN2MwMzJlYjA3NjgwOTE0ZGM1ZjFjYWU3MDM5MGU2ZTJjMTViNmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-11T00:13:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-11T00:14:06Z"}, "message": "rustc: Move refcount incrementing out of line too", "tree": {"sha": "7d8d7f1af42c45947f4391842ed041d9f8e6bbd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8d7f1af42c45947f4391842ed041d9f8e6bbd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37c032eb07680914dc5f1cae70390e6e2c15b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37c032eb07680914dc5f1cae70390e6e2c15b6a", "html_url": "https://github.com/rust-lang/rust/commit/e37c032eb07680914dc5f1cae70390e6e2c15b6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37c032eb07680914dc5f1cae70390e6e2c15b6a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865c06c1f9766495dafc519c0d4b8160f0b12df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/865c06c1f9766495dafc519c0d4b8160f0b12df8", "html_url": "https://github.com/rust-lang/rust/commit/865c06c1f9766495dafc519c0d4b8160f0b12df8"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "483ba7f382fa22e9ee35a41f2289f17d0440f0e6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e37c032eb07680914dc5f1cae70390e6e2c15b6a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c032eb07680914dc5f1cae70390e6e2c15b6a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e37c032eb07680914dc5f1cae70390e6e2c15b6a", "patch": "@@ -54,7 +54,7 @@ type tag_info = rec(type_handle th,\n                     mutable vec[tup(ast.def_id,arity)] variants,\n                     mutable uint size);\n \n-type ty_info = rec(ValueRef drop_glue);\n+type ty_info = rec(ValueRef take_glue, ValueRef drop_glue);\n \n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n@@ -520,25 +520,6 @@ fn trans_malloc(@block_ctxt cx, @typeck.ty t) -> result {\n }\n \n \n-fn incr_refcnt(@block_ctxt cx, ValueRef box_ptr) -> result {\n-    auto rc_ptr = cx.build.GEP(box_ptr, vec(C_int(0),\n-                                            C_int(abi.box_rc_field_refcnt)));\n-    auto rc = cx.build.Load(rc_ptr);\n-\n-    auto rc_adj_cx = new_sub_block_ctxt(cx, \"rc++\");\n-    auto next_cx = new_sub_block_ctxt(cx, \"next\");\n-\n-    auto const_test = cx.build.ICmp(lib.llvm.LLVMIntEQ,\n-                                    C_int(abi.const_refcount as int), rc);\n-    cx.build.CondBr(const_test, next_cx.llbb, rc_adj_cx.llbb);\n-\n-    rc = rc_adj_cx.build.Add(rc, C_int(1));\n-    rc_adj_cx.build.Store(rc, rc_ptr);\n-    rc_adj_cx.build.Br(next_cx.llbb);\n-\n-    ret res(next_cx, C_nil());\n-}\n-\n // Glue and referent count twiddling\n \n fn get_ty_info(@crate_ctxt cx, @typeck.ty ty) -> @ty_info {\n@@ -549,10 +530,15 @@ fn get_ty_info(@crate_ctxt cx, @typeck.ty ty) -> @ty_info {\n }\n \n fn make_ty_info(@crate_ctxt cx, @typeck.ty ty) {\n-    cx.types.insert(ty, @rec(drop_glue=make_drop_glue(cx, ty)));\n+    auto tg = make_take_glue;\n+    auto take_glue = make_generic_glue(cx, ty, \"take\", tg);\n+    auto dg = make_drop_glue;\n+    auto drop_glue = make_generic_glue(cx, ty, \"drop\", dg);\n+    cx.types.insert(ty, @rec(take_glue=take_glue, drop_glue=drop_glue));\n }\n \n-fn make_drop_glue(@crate_ctxt cx, @typeck.ty t) -> ValueRef {\n+fn make_generic_glue(@crate_ctxt cx, @typeck.ty t, str name,\n+                     val_and_ty_fn helper) -> ValueRef {\n     auto arg_t;\n     if (typeck.type_is_structural(t)) {\n         arg_t = T_ptr(type_of(cx, t));\n@@ -561,22 +547,55 @@ fn make_drop_glue(@crate_ctxt cx, @typeck.ty t) -> ValueRef {\n     }\n     auto llfnty = T_fn(vec(T_taskptr(), arg_t), T_void());\n \n-    auto fn_name = cx.names.next(\"_rust_drop\") + \".\" + typeck.ty_to_str(t);\n+    auto fn_name = cx.names.next(\"_rust_\" + name) + \".\" + typeck.ty_to_str(t);\n     fn_name = sanitize(fn_name);\n     auto llfn = decl_fastcall_fn(cx.llmod, fn_name, llfnty);\n \n     auto fcx = new_fn_ctxt(cx, fn_name, llfn);\n     auto bcx = new_top_block_ctxt(fcx);\n \n     auto llval = llvm.LLVMGetParam(llfn, 1u);\n-    auto res = make_drop_glue_inner(bcx, llval, t);\n \n-    res.bcx.build.RetVoid();\n+    auto res = helper(bcx, llval, t);\n \n+    res.bcx.build.RetVoid();\n     ret llfn;\n }\n \n-fn make_drop_glue_inner(@block_ctxt cx, ValueRef v, @typeck.ty t) -> result {\n+fn make_take_glue(@block_ctxt cx, ValueRef v, @typeck.ty t) -> result {\n+    if (typeck.type_is_boxed(t)) {\n+        ret incr_refcnt_of_boxed(cx, v);\n+\n+    } else if (typeck.type_is_binding(t)) {\n+        cx.fcx.ccx.sess.unimpl(\"binding type in trans.incr_all_refcnts\");\n+\n+    } else if (typeck.type_is_structural(t)) {\n+        ret iter_structural_ty(cx, v, t,\n+                               bind incr_all_refcnts(_, _, _));\n+    }\n+    ret res(cx, C_nil());\n+}\n+\n+fn incr_refcnt_of_boxed(@block_ctxt cx, ValueRef box_ptr) -> result {\n+    auto rc_ptr = cx.build.GEP(box_ptr, vec(C_int(0),\n+                                            C_int(abi.box_rc_field_refcnt)));\n+    auto rc = cx.build.Load(rc_ptr);\n+\n+    auto rc_adj_cx = new_sub_block_ctxt(cx, \"rc++\");\n+    auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+\n+    auto const_test = cx.build.ICmp(lib.llvm.LLVMIntEQ,\n+                                    C_int(abi.const_refcount as int), rc);\n+    cx.build.CondBr(const_test, next_cx.llbb, rc_adj_cx.llbb);\n+\n+    rc = rc_adj_cx.build.Add(rc, C_int(1));\n+    rc_adj_cx.build.Store(rc, rc_ptr);\n+    rc_adj_cx.build.Br(next_cx.llbb);\n+\n+    ret res(next_cx, C_nil());\n+}\n+\n+fn make_drop_glue(@block_ctxt cx, ValueRef v, @typeck.ty t) -> result {\n     alt (t.struct) {\n         case (typeck.ty_str) {\n             ret decr_refcnt_and_if_zero(cx, v,\n@@ -870,17 +889,8 @@ fn iter_sequence(@block_ctxt cx,\n fn incr_all_refcnts(@block_ctxt cx,\n                     ValueRef v,\n                     @typeck.ty t) -> result {\n-\n-    if (typeck.type_is_boxed(t)) {\n-        ret incr_refcnt(cx, v);\n-\n-    } else if (typeck.type_is_binding(t)) {\n-        cx.fcx.ccx.sess.unimpl(\"binding type in trans.incr_all_refcnts\");\n-\n-    } else if (typeck.type_is_structural(t)) {\n-        ret iter_structural_ty(cx, v, t,\n-                               bind incr_all_refcnts(_, _, _));\n-    }\n+    cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).take_glue,\n+                      vec(cx.fcx.lltaskptr, v));\n     ret res(cx, C_nil());\n }\n \n@@ -936,7 +946,7 @@ fn copy_ty(@block_ctxt cx,\n         cx.fcx.ccx.sess.unimpl(\"binding type in trans.copy_ty\");\n \n     } else if (typeck.type_is_boxed(t)) {\n-        auto r = incr_refcnt(cx, src);\n+        auto r = incr_all_refcnts(cx, src, t);\n         if (! is_init) {\n             r = drop_ty(r.bcx, r.bcx.build.Load(dst), t);\n         }"}]}