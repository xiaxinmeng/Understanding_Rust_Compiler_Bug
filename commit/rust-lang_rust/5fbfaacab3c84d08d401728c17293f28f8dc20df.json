{"sha": "5fbfaacab3c84d08d401728c17293f28f8dc20df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYmZhYWNhYjNjODRkMDhkNDAxNzI4YzE3MjkzZjI4ZjhkYzIwZGY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-12T09:55:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T09:55:48Z"}, "message": "Rollup merge of #69058 - TimDiekmann:box, r=Amanieu\n\nPreparation for allocator aware `Box`\n\nThis cleans up the `Box` code a bit, and uses `Box::from_raw(ptr)` instead of `Box(ptr)`.\nAdditionally, `box_free` and `exchange_malloc` now uses the `AllocRef` trait and a comment was added on how `box_free` is tied to `Box`.\n\nThis a preparation for an upcoming PR, which makes `Box` aware of an allocator.\n\nr? @Amanieu", "tree": {"sha": "bcc6f0fa8c52cb4d36f7bdaa3cd21c9a0926be9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcc6f0fa8c52cb4d36f7bdaa3cd21c9a0926be9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fbfaacab3c84d08d401728c17293f28f8dc20df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQ8ukCRBK7hj4Ov3rIwAAdHIIAAkI2RDGMNPz4tEKWIIP7UC7\nGHzr74ttnqCbNYgtfOs3KTNfLwrfXP4p90EBcTtjowabyypCLbSWVB5S8+eA85Xr\nEXVSU3RMkerpafJLEVPO+gjuCkVbWkUhnXc23nOfqc/uIJdl74IAMC6p0FQUnrUp\nV63T+vFfQO9xyLK8dyu7B9nunFaTfQeoT2NorEs+arL9v49u3YHYmN7zpsNSc6c5\nP4sEjesIHj4q7eNJB495hO7kIE5u9MbA+5fSu9N7By4PUQo5Wgce6QVzxdZp6E+/\nw7Iqs17DjHFxWbQ58t0cnQgcfJO14Vpg1ZsWAhPsPzCvIKIM6S/WLnWqS9zYGFE=\n=kzrD\n-----END PGP SIGNATURE-----\n", "payload": "tree bcc6f0fa8c52cb4d36f7bdaa3cd21c9a0926be9d\nparent a50ccd980a9f9038e83918fe936c2640044d1ab5\nparent 76aa29ff5e5a6bb355b017da4f6e476049b8dd76\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581501348 +0900\ncommitter GitHub <noreply@github.com> 1581501348 +0900\n\nRollup merge of #69058 - TimDiekmann:box, r=Amanieu\n\nPreparation for allocator aware `Box`\n\nThis cleans up the `Box` code a bit, and uses `Box::from_raw(ptr)` instead of `Box(ptr)`.\nAdditionally, `box_free` and `exchange_malloc` now uses the `AllocRef` trait and a comment was added on how `box_free` is tied to `Box`.\n\nThis a preparation for an upcoming PR, which makes `Box` aware of an allocator.\n\nr? @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbfaacab3c84d08d401728c17293f28f8dc20df", "html_url": "https://github.com/rust-lang/rust/commit/5fbfaacab3c84d08d401728c17293f28f8dc20df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fbfaacab3c84d08d401728c17293f28f8dc20df/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50ccd980a9f9038e83918fe936c2640044d1ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50ccd980a9f9038e83918fe936c2640044d1ab5", "html_url": "https://github.com/rust-lang/rust/commit/a50ccd980a9f9038e83918fe936c2640044d1ab5"}, {"sha": "76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "url": "https://api.github.com/repos/rust-lang/rust/commits/76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "html_url": "https://github.com/rust-lang/rust/commit/76aa29ff5e5a6bb355b017da4f6e476049b8dd76"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "f41404bf8cab97ff5eb94a1084393e9297e90fad", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfaacab3c84d08d401728c17293f28f8dc20df/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfaacab3c84d08d401728c17293f28f8dc20df/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=5fbfaacab3c84d08d401728c17293f28f8dc20df", "patch": "@@ -200,21 +200,27 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         align as *mut u8\n     } else {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        let ptr = alloc(layout);\n-        if !ptr.is_null() { ptr } else { handle_alloc_error(layout) }\n+        match Global.alloc(layout) {\n+            Ok(ptr) => ptr.as_ptr(),\n+            Err(_) => handle_alloc_error(layout),\n+        }\n     }\n }\n \n #[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n+// This signature has to be the same as `Box`, otherwise an ICE will happen.\n+// When an additional parameter to `Box` is added (like `A: AllocRef`), this has to be added here as\n+// well.\n+// For example if `Box` is changed to  `struct Box<T: ?Sized, A: AllocRef>(Unique<T>, A)`,\n+// this function has to be changed to `fn box_free<T: ?Sized, A: AllocRef>(Unique<T>, A)` as well.\n pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n-    let ptr = ptr.as_ptr();\n-    let size = size_of_val(&*ptr);\n-    let align = min_align_of_val(&*ptr);\n+    let size = size_of_val(ptr.as_ref());\n+    let align = min_align_of_val(ptr.as_ref());\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary.\n     if size != 0 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        dealloc(ptr as *mut u8, layout);\n+        Global.dealloc(ptr.cast().into(), layout);\n     }\n }\n "}, {"sha": "3ac4bd82a3a10fa4919d078b9dcefc53d88bd1b9", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfaacab3c84d08d401728c17293f28f8dc20df/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfaacab3c84d08d401728c17293f28f8dc20df/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5fbfaacab3c84d08d401728c17293f28f8dc20df", "patch": "@@ -196,12 +196,14 @@ impl<T> Box<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n-        if layout.size() == 0 {\n-            return Box(NonNull::dangling().into());\n+        unsafe {\n+            let ptr = if layout.size() == 0 {\n+                NonNull::dangling()\n+            } else {\n+                Global.alloc(layout).unwrap_or_else(|_| alloc::handle_alloc_error(layout)).cast()\n+            };\n+            Box::from_raw(ptr.as_ptr())\n         }\n-        let ptr =\n-            unsafe { Global.alloc(layout).unwrap_or_else(|_| alloc::handle_alloc_error(layout)) };\n-        Box(ptr.cast().into())\n     }\n \n     /// Constructs a new `Box` with uninitialized contents, with the memory\n@@ -264,15 +266,14 @@ impl<T> Box<[T]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        let ptr = if layout.size() == 0 {\n-            NonNull::dangling()\n-        } else {\n-            unsafe {\n+        unsafe {\n+            let ptr = if layout.size() == 0 {\n+                NonNull::dangling()\n+            } else {\n                 Global.alloc(layout).unwrap_or_else(|_| alloc::handle_alloc_error(layout)).cast()\n-            }\n-        };\n-        let slice = unsafe { slice::from_raw_parts_mut(ptr.as_ptr(), len) };\n-        Box(Unique::from(slice))\n+            };\n+            Box::from_raw(slice::from_raw_parts_mut(ptr.as_ptr(), len))\n+        }\n     }\n }\n \n@@ -308,7 +309,7 @@ impl<T> Box<mem::MaybeUninit<T>> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Box<T> {\n-        Box(Box::into_unique(self).cast())\n+        Box::from_raw(Box::into_raw(self) as *mut T)\n     }\n }\n \n@@ -346,7 +347,7 @@ impl<T> Box<[mem::MaybeUninit<T>]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Box<[T]> {\n-        Box(Unique::new_unchecked(Box::into_raw(self) as _))\n+        Box::from_raw(Box::into_raw(self) as *mut [T])\n     }\n }\n "}]}