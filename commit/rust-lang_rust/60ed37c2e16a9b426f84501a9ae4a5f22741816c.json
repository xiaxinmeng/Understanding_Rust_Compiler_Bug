{"sha": "60ed37c2e16a9b426f84501a9ae4a5f22741816c", "node_id": "C_kwDOAAsO6NoAKDYwZWQzN2MyZTE2YTliNDI2Zjg0NTAxYTlhZTRhNWYyMjc0MTgxNmM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-23T23:48:50Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-09T05:14:34Z"}, "message": "Move dep graph methods to DepGraphData to avoid branches and `unwrap`s", "tree": {"sha": "23febb7ca1de014260bb6a1b9f26a1e748040ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23febb7ca1de014260bb6a1b9f26a1e748040ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ed37c2e16a9b426f84501a9ae4a5f22741816c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ed37c2e16a9b426f84501a9ae4a5f22741816c", "html_url": "https://github.com/rust-lang/rust/commit/60ed37c2e16a9b426f84501a9ae4a5f22741816c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ed37c2e16a9b426f84501a9ae4a5f22741816c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a179026decb823e6ad8ba1c81729528bc5d695f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a179026decb823e6ad8ba1c81729528bc5d695f", "html_url": "https://github.com/rust-lang/rust/commit/6a179026decb823e6ad8ba1c81729528bc5d695f"}], "stats": {"total": 388, "additions": 224, "deletions": 164}, "files": [{"sha": "2c5f84b2c5c6640818fe621e3ad08edbb1cf6675", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 166, "deletions": 123, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/60ed37c2e16a9b426f84501a9ae4a5f22741816c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ed37c2e16a9b426f84501a9ae4a5f22741816c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=60ed37c2e16a9b426f84501a9ae4a5f22741816c", "patch": "@@ -70,7 +70,7 @@ impl DepNodeColor {\n     }\n }\n \n-struct DepGraphData<K: DepKind> {\n+pub struct DepGraphData<K: DepKind> {\n     /// The new encoding of the dependency graph, optimized for red/green\n     /// tracking. The `current` field is the dependency graph of only the\n     /// current compilation session: We don't merge the previous dep-graph into\n@@ -168,6 +168,11 @@ impl<K: DepKind> DepGraph<K> {\n         DepGraph { data: None, virtual_dep_node_index: Lrc::new(AtomicU32::new(0)) }\n     }\n \n+    #[inline]\n+    pub fn data(&self) -> Option<&DepGraphData<K>> {\n+        self.data.as_deref()\n+    }\n+\n     /// Returns `true` if we are actually building the full dep-graph, and `false` otherwise.\n     #[inline]\n     pub fn is_fully_enabled(&self) -> bool {\n@@ -245,13 +250,45 @@ impl<K: DepKind> DepGraph<K> {\n     /// in the query infrastructure, and is not currently needed by the\n     /// decoding of any query results. Should the need arise in the future,\n     /// we should consider extending the query system with this functionality.\n-    pub fn with_query_deserialization<OP, R>(&self, op: OP) -> R\n+    pub fn with_query_deserialization<OP, R>(op: OP) -> R\n     where\n         OP: FnOnce() -> R,\n     {\n         K::with_deps(TaskDepsRef::Forbid, op)\n     }\n \n+    #[inline(always)]\n+    pub fn with_task<Ctxt: HasDepContext<DepKind = K>, A: Debug, R>(\n+        &self,\n+        key: DepNode<K>,\n+        cx: Ctxt,\n+        arg: A,\n+        task: fn(Ctxt, A) -> R,\n+        hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n+    ) -> (R, DepNodeIndex) {\n+        match self.data() {\n+            Some(data) => data.with_task(key, cx, arg, task, hash_result),\n+            None => (task(cx, arg), self.next_virtual_depnode_index()),\n+        }\n+    }\n+\n+    pub fn with_anon_task<Tcx: DepContext<DepKind = K>, OP, R>(\n+        &self,\n+        cx: Tcx,\n+        dep_kind: K,\n+        op: OP,\n+    ) -> (R, DepNodeIndex)\n+    where\n+        OP: FnOnce() -> R,\n+    {\n+        match self.data() {\n+            Some(data) => data.with_anon_task(cx, dep_kind, op),\n+            None => (op(), self.next_virtual_depnode_index()),\n+        }\n+    }\n+}\n+\n+impl<K: DepKind> DepGraphData<K> {\n     /// Starts a new dep-graph task. Dep-graph tasks are specified\n     /// using a free function (`task`) and **not** a closure -- this\n     /// is intentional because we want to exercise tight control over\n@@ -288,29 +325,6 @@ impl<K: DepKind> DepGraph<K> {\n         task: fn(Ctxt, A) -> R,\n         hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n-        if self.is_fully_enabled() {\n-            self.with_task_impl(key, cx, arg, task, hash_result)\n-        } else {\n-            // Incremental compilation is turned off. We just execute the task\n-            // without tracking. We still provide a dep-node index that uniquely\n-            // identifies the task so that we have a cheap way of referring to\n-            // the query for self-profiling.\n-            (task(cx, arg), self.next_virtual_depnode_index())\n-        }\n-    }\n-\n-    #[inline(always)]\n-    fn with_task_impl<Ctxt: HasDepContext<DepKind = K>, A: Debug, R>(\n-        &self,\n-        key: DepNode<K>,\n-        cx: Ctxt,\n-        arg: A,\n-        task: fn(Ctxt, A) -> R,\n-        hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n-    ) -> (R, DepNodeIndex) {\n-        // This function is only called when the graph is enabled.\n-        let data = self.data.as_ref().unwrap();\n-\n         // If the following assertion triggers, it can have two reasons:\n         // 1. Something is wrong with DepNode creation, either here or\n         //    in `DepGraph::try_mark_green()`.\n@@ -351,9 +365,9 @@ impl<K: DepKind> DepGraph<K> {\n         let print_status = cfg!(debug_assertions) && dcx.sess().opts.unstable_opts.dep_tasks;\n \n         // Intern the new `DepNode`.\n-        let (dep_node_index, prev_and_color) = data.current.intern_node(\n+        let (dep_node_index, prev_and_color) = self.current.intern_node(\n             dcx.profiler(),\n-            &data.previous,\n+            &self.previous,\n             key,\n             edges,\n             current_fingerprint,\n@@ -364,12 +378,12 @@ impl<K: DepKind> DepGraph<K> {\n \n         if let Some((prev_index, color)) = prev_and_color {\n             debug_assert!(\n-                data.colors.get(prev_index).is_none(),\n+                self.colors.get(prev_index).is_none(),\n                 \"DepGraph::with_task() - Duplicate DepNodeColor \\\n                             insertion for {key:?}\"\n             );\n \n-            data.colors.insert(prev_index, color);\n+            self.colors.insert(prev_index, color);\n         }\n \n         (result, dep_node_index)\n@@ -388,57 +402,55 @@ impl<K: DepKind> DepGraph<K> {\n     {\n         debug_assert!(!cx.is_eval_always(dep_kind));\n \n-        if let Some(ref data) = self.data {\n-            let task_deps = Lock::new(TaskDeps::default());\n-            let result = K::with_deps(TaskDepsRef::Allow(&task_deps), op);\n-            let task_deps = task_deps.into_inner();\n-            let task_deps = task_deps.reads;\n-\n-            let dep_node_index = match task_deps.len() {\n-                0 => {\n-                    // Because the dep-node id of anon nodes is computed from the sets of its\n-                    // dependencies we already know what the ID of this dependency-less node is\n-                    // going to be (i.e. equal to the precomputed\n-                    // `SINGLETON_DEPENDENCYLESS_ANON_NODE`). As a consequence we can skip creating\n-                    // a `StableHasher` and sending the node through interning.\n-                    DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE\n-                }\n-                1 => {\n-                    // When there is only one dependency, don't bother creating a node.\n-                    task_deps[0]\n-                }\n-                _ => {\n-                    // The dep node indices are hashed here instead of hashing the dep nodes of the\n-                    // dependencies. These indices may refer to different nodes per session, but this isn't\n-                    // a problem here because we that ensure the final dep node hash is per session only by\n-                    // combining it with the per session random number `anon_id_seed`. This hash only need\n-                    // to map the dependencies to a single value on a per session basis.\n-                    let mut hasher = StableHasher::new();\n-                    task_deps.hash(&mut hasher);\n-\n-                    let target_dep_node = DepNode {\n-                        kind: dep_kind,\n-                        // Fingerprint::combine() is faster than sending Fingerprint\n-                        // through the StableHasher (at least as long as StableHasher\n-                        // is so slow).\n-                        hash: data.current.anon_id_seed.combine(hasher.finish()).into(),\n-                    };\n+        let task_deps = Lock::new(TaskDeps::default());\n+        let result = K::with_deps(TaskDepsRef::Allow(&task_deps), op);\n+        let task_deps = task_deps.into_inner();\n+        let task_deps = task_deps.reads;\n+\n+        let dep_node_index = match task_deps.len() {\n+            0 => {\n+                // Because the dep-node id of anon nodes is computed from the sets of its\n+                // dependencies we already know what the ID of this dependency-less node is\n+                // going to be (i.e. equal to the precomputed\n+                // `SINGLETON_DEPENDENCYLESS_ANON_NODE`). As a consequence we can skip creating\n+                // a `StableHasher` and sending the node through interning.\n+                DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE\n+            }\n+            1 => {\n+                // When there is only one dependency, don't bother creating a node.\n+                task_deps[0]\n+            }\n+            _ => {\n+                // The dep node indices are hashed here instead of hashing the dep nodes of the\n+                // dependencies. These indices may refer to different nodes per session, but this isn't\n+                // a problem here because we that ensure the final dep node hash is per session only by\n+                // combining it with the per session random number `anon_id_seed`. This hash only need\n+                // to map the dependencies to a single value on a per session basis.\n+                let mut hasher = StableHasher::new();\n+                task_deps.hash(&mut hasher);\n+\n+                let target_dep_node = DepNode {\n+                    kind: dep_kind,\n+                    // Fingerprint::combine() is faster than sending Fingerprint\n+                    // through the StableHasher (at least as long as StableHasher\n+                    // is so slow).\n+                    hash: self.current.anon_id_seed.combine(hasher.finish()).into(),\n+                };\n \n-                    data.current.intern_new_node(\n-                        cx.profiler(),\n-                        target_dep_node,\n-                        task_deps,\n-                        Fingerprint::ZERO,\n-                    )\n-                }\n-            };\n+                self.current.intern_new_node(\n+                    cx.profiler(),\n+                    target_dep_node,\n+                    task_deps,\n+                    Fingerprint::ZERO,\n+                )\n+            }\n+        };\n \n-            (result, dep_node_index)\n-        } else {\n-            (op(), self.next_virtual_depnode_index())\n-        }\n+        (result, dep_node_index)\n     }\n+}\n \n+impl<K: DepKind> DepGraph<K> {\n     #[inline]\n     pub fn read_index(&self, dep_node_index: DepNodeIndex) {\n         if let Some(ref data) = self.data {\n@@ -521,7 +533,7 @@ impl<K: DepKind> DepGraph<K> {\n             // For sanity, we still check that the loaded stable hash and the new one match.\n             if let Some(dep_node_index) = self.dep_node_index_of_opt(&node) {\n                 let _current_fingerprint =\n-                    crate::query::incremental_verify_ich(cx, result, &node, hash_result);\n+                    crate::query::incremental_verify_ich(cx, data, result, &node, hash_result);\n \n                 #[cfg(debug_assertions)]\n                 if hash_result.is_some() {\n@@ -585,24 +597,59 @@ impl<K: DepKind> DepGraph<K> {\n \n     #[inline]\n     pub fn dep_node_index_of_opt(&self, dep_node: &DepNode<K>) -> Option<DepNodeIndex> {\n-        let data = self.data.as_ref().unwrap();\n-        let current = &data.current;\n+        self.data.as_ref().unwrap().dep_node_index_of_opt(dep_node)\n+    }\n+}\n \n-        if let Some(prev_index) = data.previous.node_to_index_opt(dep_node) {\n-            current.prev_index_to_index.lock()[prev_index]\n+impl<K: DepKind> DepGraphData<K> {\n+    #[inline]\n+    pub fn dep_node_index_of_opt(&self, dep_node: &DepNode<K>) -> Option<DepNodeIndex> {\n+        if let Some(prev_index) = self.previous.node_to_index_opt(dep_node) {\n+            self.current.prev_index_to_index.lock()[prev_index]\n         } else {\n-            current.new_node_to_index.get_shard_by_value(dep_node).lock().get(dep_node).copied()\n+            self.current\n+                .new_node_to_index\n+                .get_shard_by_value(dep_node)\n+                .lock()\n+                .get(dep_node)\n+                .copied()\n         }\n     }\n \n     #[inline]\n     pub fn dep_node_exists(&self, dep_node: &DepNode<K>) -> bool {\n-        self.data.is_some() && self.dep_node_index_of_opt(dep_node).is_some()\n+        self.dep_node_index_of_opt(dep_node).is_some()\n+    }\n+\n+    fn node_color(&self, dep_node: &DepNode<K>) -> Option<DepNodeColor> {\n+        if let Some(prev_index) = self.previous.node_to_index_opt(dep_node) {\n+            self.colors.get(prev_index)\n+        } else {\n+            // This is a node that did not exist in the previous compilation session.\n+            None\n+        }\n+    }\n+\n+    /// Returns true if the given node has been marked as green during the\n+    /// current compilation session. Used in various assertions\n+    pub fn is_green(&self, dep_node: &DepNode<K>) -> bool {\n+        self.node_color(dep_node).map_or(false, |c| c.is_green())\n     }\n \n     #[inline]\n     pub fn prev_fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n-        self.data.as_ref().unwrap().previous.fingerprint_of(dep_node)\n+        self.previous.fingerprint_of(dep_node)\n+    }\n+\n+    pub fn mark_debug_loaded_from_disk(&self, dep_node: DepNode<K>) {\n+        self.debug_loaded_from_disk.lock().insert(dep_node);\n+    }\n+}\n+\n+impl<K: DepKind> DepGraph<K> {\n+    #[inline]\n+    pub fn dep_node_exists(&self, dep_node: &DepNode<K>) -> bool {\n+        self.data.is_some() && self.dep_node_index_of_opt(dep_node).is_some()\n     }\n \n     /// Checks whether a previous work product exists for `v` and, if\n@@ -617,10 +664,6 @@ impl<K: DepKind> DepGraph<K> {\n         &self.data.as_ref().unwrap().previous_work_products\n     }\n \n-    pub fn mark_debug_loaded_from_disk(&self, dep_node: DepNode<K>) {\n-        self.data.as_ref().unwrap().debug_loaded_from_disk.lock().insert(dep_node);\n-    }\n-\n     pub fn debug_was_loaded_from_disk(&self, dep_node: DepNode<K>) -> bool {\n         self.data.as_ref().unwrap().debug_loaded_from_disk.lock().contains(&dep_node)\n     }\n@@ -645,17 +688,22 @@ impl<K: DepKind> DepGraph<K> {\n \n     fn node_color(&self, dep_node: &DepNode<K>) -> Option<DepNodeColor> {\n         if let Some(ref data) = self.data {\n-            if let Some(prev_index) = data.previous.node_to_index_opt(dep_node) {\n-                return data.colors.get(prev_index);\n-            } else {\n-                // This is a node that did not exist in the previous compilation session.\n-                return None;\n-            }\n+            return data.node_color(dep_node);\n         }\n \n         None\n     }\n \n+    pub fn try_mark_green<Qcx: QueryContext<DepKind = K>>(\n+        &self,\n+        qcx: Qcx,\n+        dep_node: &DepNode<K>,\n+    ) -> Option<(SerializedDepNodeIndex, DepNodeIndex)> {\n+        self.data().and_then(|data| data.try_mark_green(qcx, dep_node))\n+    }\n+}\n+\n+impl<K: DepKind> DepGraphData<K> {\n     /// Try to mark a node index for the node dep_node.\n     ///\n     /// A node will have an index, when it's already been marked green, or when we can mark it\n@@ -668,43 +716,39 @@ impl<K: DepKind> DepGraph<K> {\n     ) -> Option<(SerializedDepNodeIndex, DepNodeIndex)> {\n         debug_assert!(!qcx.dep_context().is_eval_always(dep_node.kind));\n \n-        // Return None if the dep graph is disabled\n-        let data = self.data.as_ref()?;\n-\n         // Return None if the dep node didn't exist in the previous session\n-        let prev_index = data.previous.node_to_index_opt(dep_node)?;\n+        let prev_index = self.previous.node_to_index_opt(dep_node)?;\n \n-        match data.colors.get(prev_index) {\n+        match self.colors.get(prev_index) {\n             Some(DepNodeColor::Green(dep_node_index)) => return Some((prev_index, dep_node_index)),\n             Some(DepNodeColor::Red) => return None,\n             None => {}\n         }\n \n-        let backtrace = backtrace_printer(qcx.dep_context().sess(), data, prev_index);\n+        let backtrace = backtrace_printer(qcx.dep_context().sess(), self, prev_index);\n \n         // This DepNode and the corresponding query invocation existed\n         // in the previous compilation session too, so we can try to\n         // mark it as green by recursively marking all of its\n         // dependencies green.\n         let ret = self\n-            .try_mark_previous_green(qcx, data, prev_index, &dep_node)\n+            .try_mark_previous_green(qcx, prev_index, &dep_node)\n             .map(|dep_node_index| (prev_index, dep_node_index));\n \n         // We succeeded, no backtrace.\n         backtrace.disable();\n         return ret;\n     }\n \n-    #[instrument(skip(self, qcx, data, parent_dep_node_index), level = \"debug\")]\n+    #[instrument(skip(self, qcx, parent_dep_node_index), level = \"debug\")]\n     fn try_mark_parent_green<Qcx: QueryContext<DepKind = K>>(\n         &self,\n         qcx: Qcx,\n-        data: &DepGraphData<K>,\n         parent_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n     ) -> Option<()> {\n-        let dep_dep_node_color = data.colors.get(parent_dep_node_index);\n-        let dep_dep_node = &data.previous.index_to_node(parent_dep_node_index);\n+        let dep_dep_node_color = self.colors.get(parent_dep_node_index);\n+        let dep_dep_node = &self.previous.index_to_node(parent_dep_node_index);\n \n         match dep_dep_node_color {\n             Some(DepNodeColor::Green(_)) => {\n@@ -733,8 +777,7 @@ impl<K: DepKind> DepGraph<K> {\n                 dep_dep_node, dep_dep_node.hash,\n             );\n \n-            let node_index =\n-                self.try_mark_previous_green(qcx, data, parent_dep_node_index, dep_dep_node);\n+            let node_index = self.try_mark_previous_green(qcx, parent_dep_node_index, dep_dep_node);\n \n             if node_index.is_some() {\n                 debug!(\"managed to MARK dependency {dep_dep_node:?} as green\",);\n@@ -750,7 +793,7 @@ impl<K: DepKind> DepGraph<K> {\n             return None;\n         }\n \n-        let dep_dep_node_color = data.colors.get(parent_dep_node_index);\n+        let dep_dep_node_color = self.colors.get(parent_dep_node_index);\n \n         match dep_dep_node_color {\n             Some(DepNodeColor::Green(_)) => {\n@@ -783,30 +826,29 @@ impl<K: DepKind> DepGraph<K> {\n     }\n \n     /// Try to mark a dep-node which existed in the previous compilation session as green.\n-    #[instrument(skip(self, qcx, data, prev_dep_node_index), level = \"debug\")]\n+    #[instrument(skip(self, qcx, prev_dep_node_index), level = \"debug\")]\n     fn try_mark_previous_green<Qcx: QueryContext<DepKind = K>>(\n         &self,\n         qcx: Qcx,\n-        data: &DepGraphData<K>,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n     ) -> Option<DepNodeIndex> {\n         #[cfg(not(parallel_compiler))]\n         {\n             debug_assert!(!self.dep_node_exists(dep_node));\n-            debug_assert!(data.colors.get(prev_dep_node_index).is_none());\n+            debug_assert!(self.colors.get(prev_dep_node_index).is_none());\n         }\n \n         // We never try to mark eval_always nodes as green\n         debug_assert!(!qcx.dep_context().is_eval_always(dep_node.kind));\n \n-        debug_assert_eq!(data.previous.index_to_node(prev_dep_node_index), *dep_node);\n+        debug_assert_eq!(self.previous.index_to_node(prev_dep_node_index), *dep_node);\n \n-        let prev_deps = data.previous.edge_targets_from(prev_dep_node_index);\n+        let prev_deps = self.previous.edge_targets_from(prev_dep_node_index);\n \n         for &dep_dep_node_index in prev_deps {\n-            let backtrace = backtrace_printer(qcx.dep_context().sess(), data, dep_dep_node_index);\n-            let success = self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node);\n+            let backtrace = backtrace_printer(qcx.dep_context().sess(), self, dep_dep_node_index);\n+            let success = self.try_mark_parent_green(qcx, dep_dep_node_index, dep_node);\n             backtrace.disable();\n             success?;\n         }\n@@ -819,9 +861,9 @@ impl<K: DepKind> DepGraph<K> {\n \n         // We allocating an entry for the node in the current dependency graph and\n         // adding all the appropriate edges imported from the previous graph\n-        let dep_node_index = data.current.promote_node_and_deps_to_current(\n+        let dep_node_index = self.current.promote_node_and_deps_to_current(\n             qcx.dep_context().profiler(),\n-            &data.previous,\n+            &self.previous,\n             prev_dep_node_index,\n         );\n \n@@ -833,20 +875,20 @@ impl<K: DepKind> DepGraph<K> {\n \n         #[cfg(not(parallel_compiler))]\n         debug_assert!(\n-            data.colors.get(prev_dep_node_index).is_none(),\n+            self.colors.get(prev_dep_node_index).is_none(),\n             \"DepGraph::try_mark_previous_green() - Duplicate DepNodeColor \\\n                       insertion for {dep_node:?}\"\n         );\n \n         if !side_effects.is_empty() {\n-            self.with_query_deserialization(|| {\n-                self.emit_side_effects(qcx, data, dep_node_index, side_effects)\n+            DepGraph::<K>::with_query_deserialization(|| {\n+                self.emit_side_effects(qcx, dep_node_index, side_effects)\n             });\n         }\n \n         // ... and finally storing a \"Green\" entry in the color map.\n         // Multiple threads can all write the same color here\n-        data.colors.insert(prev_dep_node_index, DepNodeColor::Green(dep_node_index));\n+        self.colors.insert(prev_dep_node_index, DepNodeColor::Green(dep_node_index));\n \n         debug!(\"successfully marked {dep_node:?} as green\");\n         Some(dep_node_index)\n@@ -859,11 +901,10 @@ impl<K: DepKind> DepGraph<K> {\n     fn emit_side_effects<Qcx: QueryContext<DepKind = K>>(\n         &self,\n         qcx: Qcx,\n-        data: &DepGraphData<K>,\n         dep_node_index: DepNodeIndex,\n         side_effects: QuerySideEffects,\n     ) {\n-        let mut processed = data.processed_side_effects.lock();\n+        let mut processed = self.processed_side_effects.lock();\n \n         if processed.insert(dep_node_index) {\n             // We were the first to insert the node in the set so this thread\n@@ -879,7 +920,9 @@ impl<K: DepKind> DepGraph<K> {\n             }\n         }\n     }\n+}\n \n+impl<K: DepKind> DepGraph<K> {\n     /// Returns true if the given node has been marked as red during the\n     /// current compilation session. Used in various assertions\n     pub fn is_red(&self, dep_node: &DepNode<K>) -> bool {"}, {"sha": "5a7b9ae2ab436cb6054219324993252c8f5f6997", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60ed37c2e16a9b426f84501a9ae4a5f22741816c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ed37c2e16a9b426f84501a9ae4a5f22741816c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=60ed37c2e16a9b426f84501a9ae4a5f22741816c", "patch": "@@ -6,7 +6,8 @@ mod serialized;\n \n pub use dep_node::{DepKindStruct, DepNode, DepNodeParams, WorkProductId};\n pub use graph::{\n-    hash_result, DepGraph, DepNodeColor, DepNodeIndex, TaskDeps, TaskDepsRef, WorkProduct,\n+    hash_result, DepGraph, DepGraphData, DepNodeColor, DepNodeIndex, TaskDeps, TaskDepsRef,\n+    WorkProduct,\n };\n pub use query::DepGraphQuery;\n pub use serialized::{SerializedDepGraph, SerializedDepNodeIndex};"}, {"sha": "87648180690f0476f88a8c40986b4a52cdadf486", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 56, "deletions": 40, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/60ed37c2e16a9b426f84501a9ae4a5f22741816c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ed37c2e16a9b426f84501a9ae4a5f22741816c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=60ed37c2e16a9b426f84501a9ae4a5f22741816c", "patch": "@@ -2,8 +2,10 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::HasDepContext;\n-use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex, DepNodeParams};\n+use crate::dep_graph::{\n+    DepContext, DepGraph, DepKind, DepNode, DepNodeIndex, DepNodeParams, TaskDepsRef,\n+};\n+use crate::dep_graph::{DepGraphData, HasDepContext};\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n@@ -411,32 +413,35 @@ where\n     Qcx: QueryContext,\n {\n     let dep_graph = qcx.dep_context().dep_graph();\n+    let dep_graph_data = match dep_graph.data() {\n+        // Fast path for when incr. comp. is off.\n+        None => {\n+            // Fingerprint the key, just to assert that it doesn't\n+            // have anything we don't consider hashable\n+            if cfg!(debug_assertions) {\n+                let _ = key.to_fingerprint(*qcx.dep_context());\n+            }\n \n-    // Fast path for when incr. comp. is off.\n-    if !dep_graph.is_fully_enabled() {\n-        // Fingerprint the key, just to assert that it doesn't\n-        // have anything we don't consider hashable\n-        if cfg!(debug_assertions) {\n-            let _ = key.to_fingerprint(*qcx.dep_context());\n-        }\n-\n-        let prof_timer = qcx.dep_context().profiler().query_provider();\n-        let result = qcx.start_query(job_id, query.depth_limit(), None, || query.compute(qcx, key));\n-        let dep_node_index = dep_graph.next_virtual_depnode_index();\n-        prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n+            let prof_timer = qcx.dep_context().profiler().query_provider();\n+            let result =\n+                qcx.start_query(job_id, query.depth_limit(), None, || query.compute(qcx, key));\n+            let dep_node_index = dep_graph.next_virtual_depnode_index();\n+            prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n-        // Similarly, fingerprint the result to assert that\n-        // it doesn't have anything not considered hashable.\n-        if cfg!(debug_assertions)\n+            // Similarly, fingerprint the result to assert that\n+            // it doesn't have anything not considered hashable.\n+            if cfg!(debug_assertions)\n             && let Some(hash_result) = query.hash_result()\n-        {\n+          {\n             qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n                 hash_result(&mut hcx, &result);\n             });\n         }\n \n-        return (result, dep_node_index);\n-    }\n+            return (result, dep_node_index);\n+        }\n+        Some(data) => data,\n+    };\n \n     if !query.anon() && !query.eval_always() {\n         // `to_dep_node` is expensive for some `DepKind`s.\n@@ -446,7 +451,7 @@ where\n         // The diagnostics for this query will be promoted to the current session during\n         // `try_mark_green()`, so we can ignore them here.\n         if let Some(ret) = qcx.start_query(job_id, false, None, || {\n-            try_load_from_disk_and_cache_in_memory(query, qcx, &key, &dep_node)\n+            try_load_from_disk_and_cache_in_memory(query, dep_graph_data, qcx, &key, &dep_node)\n         }) {\n             return ret;\n         }\n@@ -458,7 +463,7 @@ where\n     let (result, dep_node_index) =\n         qcx.start_query(job_id, query.depth_limit(), Some(&diagnostics), || {\n             if query.anon() {\n-                return dep_graph.with_anon_task(*qcx.dep_context(), query.dep_kind(), || {\n+                return dep_graph_data.with_anon_task(*qcx.dep_context(), query.dep_kind(), || {\n                     query.compute(qcx, key)\n                 });\n             }\n@@ -467,7 +472,7 @@ where\n             let dep_node =\n                 dep_node_opt.unwrap_or_else(|| query.construct_dep_node(*qcx.dep_context(), &key));\n \n-            dep_graph.with_task(\n+            dep_graph_data.with_task(\n                 dep_node,\n                 (qcx, query),\n                 key,\n@@ -495,6 +500,7 @@ where\n #[inline(always)]\n fn try_load_from_disk_and_cache_in_memory<Q, Qcx>(\n     query: Q,\n+    dep_graph_data: &DepGraphData<Qcx::DepKind>,\n     qcx: Qcx,\n     key: &Q::Key,\n     dep_node: &DepNode<Qcx::DepKind>,\n@@ -506,10 +512,9 @@ where\n     // Note this function can be called concurrently from the same query\n     // We must ensure that this is handled correctly.\n \n-    let dep_graph = qcx.dep_context().dep_graph();\n-    let (prev_dep_node_index, dep_node_index) = dep_graph.try_mark_green(qcx, &dep_node)?;\n+    let (prev_dep_node_index, dep_node_index) = dep_graph_data.try_mark_green(qcx, &dep_node)?;\n \n-    debug_assert!(dep_graph.is_green(dep_node));\n+    debug_assert!(dep_graph_data.is_green(dep_node));\n \n     // First we try to load the result from the on-disk cache.\n     // Some things are never cached on disk.\n@@ -519,23 +524,21 @@ where\n         // The call to `with_query_deserialization` enforces that no new `DepNodes`\n         // are created during deserialization. See the docs of that method for more\n         // details.\n-        let result =\n-            dep_graph.with_query_deserialization(|| try_load_from_disk(qcx, prev_dep_node_index));\n+        let result = DepGraph::<Qcx::DepKind>::with_query_deserialization(|| {\n+            try_load_from_disk(qcx, prev_dep_node_index)\n+        });\n \n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         if let Some(result) = result {\n             if std::intrinsics::unlikely(\n                 qcx.dep_context().sess().opts.unstable_opts.query_dep_graph,\n             ) {\n-                dep_graph.mark_debug_loaded_from_disk(*dep_node)\n+                dep_graph_data.mark_debug_loaded_from_disk(*dep_node)\n             }\n \n-            let prev_fingerprint = qcx\n-                .dep_context()\n-                .dep_graph()\n-                .prev_fingerprint_of(dep_node)\n-                .unwrap_or(Fingerprint::ZERO);\n+            let prev_fingerprint =\n+                dep_graph_data.prev_fingerprint_of(dep_node).unwrap_or(Fingerprint::ZERO);\n             // If `-Zincremental-verify-ich` is specified, re-hash results from\n             // the cache and make sure that they have the expected fingerprint.\n             //\n@@ -547,7 +550,13 @@ where\n             if std::intrinsics::unlikely(\n                 try_verify || qcx.dep_context().sess().opts.unstable_opts.incremental_verify_ich,\n             ) {\n-                incremental_verify_ich(*qcx.dep_context(), &result, dep_node, query.hash_result());\n+                incremental_verify_ich(\n+                    *qcx.dep_context(),\n+                    dep_graph_data,\n+                    &result,\n+                    dep_node,\n+                    query.hash_result(),\n+                );\n             }\n \n             return Some((result, dep_node_index));\n@@ -566,7 +575,7 @@ where\n     let prof_timer = qcx.dep_context().profiler().query_provider();\n \n     // The dep-graph for this computation is already in-place.\n-    let result = dep_graph.with_ignore(|| query.compute(qcx, *key));\n+    let result = Qcx::DepKind::with_deps(TaskDepsRef::Ignore, || query.compute(qcx, *key));\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n@@ -579,15 +588,22 @@ where\n     //\n     // See issue #82920 for an example of a miscompilation that would get turned into\n     // an ICE by this check\n-    incremental_verify_ich(*qcx.dep_context(), &result, dep_node, query.hash_result());\n+    incremental_verify_ich(\n+        *qcx.dep_context(),\n+        dep_graph_data,\n+        &result,\n+        dep_node,\n+        query.hash_result(),\n+    );\n \n     Some((result, dep_node_index))\n }\n \n #[inline]\n-#[instrument(skip(tcx, result, hash_result), level = \"debug\")]\n+#[instrument(skip(tcx, dep_graph_data, result, hash_result), level = \"debug\")]\n pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n     tcx: Tcx,\n+    dep_graph_data: &DepGraphData<Tcx::DepKind>,\n     result: &V,\n     dep_node: &DepNode<Tcx::DepKind>,\n     hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n@@ -596,15 +612,15 @@ where\n     Tcx: DepContext,\n {\n     assert!(\n-        tcx.dep_graph().is_green(dep_node),\n+        dep_graph_data.is_green(dep_node),\n         \"fingerprint for green query instance not loaded from cache: {dep_node:?}\",\n     );\n \n     let new_hash = hash_result.map_or(Fingerprint::ZERO, |f| {\n         tcx.with_stable_hashing_context(|mut hcx| f(&mut hcx, result))\n     });\n \n-    let old_hash = tcx.dep_graph().prev_fingerprint_of(dep_node);\n+    let old_hash = dep_graph_data.prev_fingerprint_of(dep_node);\n \n     if Some(new_hash) != old_hash {\n         incremental_verify_ich_failed("}]}