{"sha": "19d8617330a481dc2a0cea149f5d75c7ed3d3203", "node_id": "C_kwDOAAsO6NoAKDE5ZDg2MTczMzBhNDgxZGMyYTBjZWExNDlmNWQ3NWM3ZWQzZDMyMDM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-03T19:24:14Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-03T19:24:14Z"}, "message": "Generate intrinsics translations from llvmint as well", "tree": {"sha": "e8fe8da02023a6cc27e691086830f763372ef2ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fe8da02023a6cc27e691086830f763372ef2ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d8617330a481dc2a0cea149f5d75c7ed3d3203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d8617330a481dc2a0cea149f5d75c7ed3d3203", "html_url": "https://github.com/rust-lang/rust/commit/19d8617330a481dc2a0cea149f5d75c7ed3d3203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d8617330a481dc2a0cea149f5d75c7ed3d3203/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed0ba311c5da68edfd132c2e4f40d25f0ec24768", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0ba311c5da68edfd132c2e4f40d25f0ec24768", "html_url": "https://github.com/rust-lang/rust/commit/ed0ba311c5da68edfd132c2e4f40d25f0ec24768"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "ffd36ddb7db0e80baba481a90435cc24868d13ce", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19d8617330a481dc2a0cea149f5d75c7ed3d3203/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/19d8617330a481dc2a0cea149f5d75c7ed3d3203/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=19d8617330a481dc2a0cea149f5d75c7ed3d3203", "patch": "@@ -21,3 +21,4 @@ test-backend\n gcc_path\n benchmarks\n tools/llvm-project\n+tools/llvmint"}, {"sha": "88b8b54b6baa2e54664e4f00da898caa98ea6714", "filename": "tools/generate_intrinsics.py", "status": "modified", "additions": 90, "deletions": 7, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/19d8617330a481dc2a0cea149f5d75c7ed3d3203/tools%2Fgenerate_intrinsics.py", "raw_url": "https://github.com/rust-lang/rust/raw/19d8617330a481dc2a0cea149f5d75c7ed3d3203/tools%2Fgenerate_intrinsics.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fgenerate_intrinsics.py?ref=19d8617330a481dc2a0cea149f5d75c7ed3d3203", "patch": "@@ -1,3 +1,4 @@\n+import json\n import os\n import re\n import sys\n@@ -35,6 +36,10 @@ def clone_repository(repo_name, path, repo_url, sub_path=None):\n         run_command([\"git\", \"checkout\"], cwd=path)\n \n \n+def append_intrinsic(array, intrinsic_name, translation):\n+    array.append((intrinsic_name, translation))\n+\n+\n def extract_instrinsics(intrinsics, file):\n     print(\"Extracting intrinsics from `{}`...\".format(file))\n     with open(file, \"r\", encoding=\"utf8\") as f:\n@@ -70,25 +75,85 @@ def extract_instrinsics(intrinsics, file):\n                 if current_arch not in intrinsics:\n                     intrinsics[current_arch] = []\n                 for entry in entries:\n-                    intrinsics[current_arch].append('\"{}\" => \"{}\",'.format(intrinsic, entry))\n+                    append_intrinsic(intrinsics[current_arch], intrinsic, entry)\n             continue\n         pos += 1\n         continue\n     print(\"Done!\")\n \n \n-def update_intrinsics(llvm_path):\n+def extract_instrinsics_from_llvm(llvm_path, intrinsics):\n     files = []\n     intrinsics_path = os.path.join(llvm_path, \"llvm/include/llvm/IR\")\n     for (dirpath, dirnames, filenames) in walk(intrinsics_path):\n         files.extend([os.path.join(intrinsics_path, f) for f in filenames if f.endswith(\".td\")])\n \n-    intrinsics = {}\n     for file in files:\n         extract_instrinsics(intrinsics, file)\n \n+\n+def append_translation(json_data, p, array):\n+    it = json_data[\"index\"][p]\n+    content = it[\"docs\"].split('`')\n+    if len(content) != 5:\n+        return\n+    append_intrinsic(array, content[1], content[3])\n+\n+\n+def extract_instrinsics_from_llvmint(llvmint, intrinsics):\n+    archs = [\n+        \"AMDGPU\",\n+        \"aarch64\",\n+        \"arm\",\n+        \"cuda\",\n+        \"hexagon\",\n+        \"mips\",\n+        \"nvvm\",\n+        \"ppc\",\n+        \"ptx\",\n+        \"x86\",\n+        \"xcore\",\n+    ]\n+\n+    json_file = os.path.join(llvmint, \"target/doc/llvmint.json\")\n+    if not os.path.exists(json_file):\n+        # We need to regenerate the documentation!\n+        run_command(\n+            [\"cargo\", \"rustdoc\", \"--\", \"-Zunstable-options\", \"--output-format\", \"json\"],\n+            cwd=llvmint,\n+        )\n+    with open(json_file, \"r\", encoding=\"utf8\") as f:\n+        json_data = json.loads(f.read())\n+    for p in json_data[\"paths\"]:\n+        it = json_data[\"paths\"][p]\n+        if it[\"crate_id\"] != 0:\n+            # This is from an external crate.\n+            continue\n+        if it[\"kind\"] != \"function\":\n+            # We're only looking for functions.\n+            continue\n+        # if len(it[\"path\"]) == 2:\n+        #   # This is a \"general\" intrinsic, not bound to a specific arch.\n+        #   append_translation(json_data, p, general)\n+        #   continue\n+        if len(it[\"path\"]) != 3 or it[\"path\"][1] not in archs:\n+            continue\n+        arch = it[\"path\"][1]\n+        if arch not in intrinsics:\n+            intrinsics[arch] = []\n+        append_translation(json_data, p, intrinsics[arch])\n+\n+\n+def update_intrinsics(llvm_path, llvmint):\n+    intrinsics = {}\n+    all_intrinsics = {}\n+\n+    extract_instrinsics_from_llvm(llvm_path, intrinsics)\n+    extract_instrinsics_from_llvmint(llvmint, intrinsics)\n+\n     archs = [arch for arch in intrinsics]\n     archs.sort()\n+\n     output_file = os.path.join(\n         os.path.dirname(os.path.abspath(__file__)),\n         \"../src/intrinsic/archs.rs\",\n@@ -103,8 +168,16 @@ def update_intrinsics(llvm_path):\n                 continue\n             intrinsics[arch].sort()\n             out.write('    // {}\\n'.format(arch))\n-            out.write('\\n'.join(['    {}'.format(x) for x in intrinsics[arch]]))\n-            out.write('\\n')\n+            for entry in intrinsics[arch]:\n+                if entry[0] in all_intrinsics:\n+                    if all_intrinsics[entry[0]] == entry[1]:\n+                        # This is a \"full\" duplicate, both the LLVM instruction and the GCC\n+                        # translation are the same.\n+                        continue\n+                    out.write('    // [DUPLICATE]: \"{}\" => \"{}\",\\n'.format(entry[0], entry[1]))\n+                else:\n+                    out.write('    \"{}\" => \"{}\",\\n'.format(entry[0], entry[1]))\n+                    all_intrinsics[entry[0]] = entry[1]\n         out.write('    _ => unimplemented!(\"***** unsupported LLVM intrinsic {}\", name),\\n')\n         out.write(\"}\\n\")\n     print(\"Done!\")\n@@ -115,14 +188,24 @@ def main():\n         os.path.dirname(os.path.abspath(__file__)),\n         \"llvm-project\",\n     )\n+    llvmint_path = os.path.join(\n+        os.path.dirname(os.path.abspath(__file__)),\n+        \"llvmint\",\n+    )\n \n     # First, we clone the LLVM repository if it's not already here.\n     clone_repository(\n         \"llvm-project\",\n         llvm_path,\n         \"https://github.com/llvm/llvm-project\",\n-        sub_path=\"llvm/include/llvm/IR\")\n-    update_intrinsics(llvm_path)\n+        sub_path=\"llvm/include/llvm/IR\",\n+    )\n+    clone_repository(\n+        \"llvmint\",\n+        llvmint_path,\n+        \"https://github.com/GuillaumeGomez/llvmint\",\n+    )\n+    update_intrinsics(llvm_path, llvmint_path)\n \n \n if __name__ == \"__main__\":"}]}