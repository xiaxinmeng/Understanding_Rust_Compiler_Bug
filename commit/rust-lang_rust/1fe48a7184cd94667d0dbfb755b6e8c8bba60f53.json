{"sha": "1fe48a7184cd94667d0dbfb755b6e8c8bba60f53", "node_id": "C_kwDOAAsO6NoAKDFmZTQ4YTcxODRjZDk0NjY3ZDBkYmZiNzU1YjZlOGM4YmJhNjBmNTM", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-11-07T08:00:58Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-11-07T08:00:58Z"}, "message": "Avoid deprecated methods in client-side tests", "tree": {"sha": "7f3580f521b4c2093a5a6562f536fc2bc81c33bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f3580f521b4c2093a5a6562f536fc2bc81c33bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53", "html_url": "https://github.com/rust-lang/rust/commit/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c29bd738be862efe9e6c07a0b6ef95cbe37de15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c29bd738be862efe9e6c07a0b6ef95cbe37de15", "html_url": "https://github.com/rust-lang/rust/commit/2c29bd738be862efe9e6c07a0b6ef95cbe37de15"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "e53ae5ce9ec4e99ee1efd9df96baf44735e1cb02", "filename": "editors/code/tests/unit/launch_config.test.ts", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts?ref=1fe48a7184cd94667d0dbfb755b6e8c8bba60f53", "patch": "@@ -7,46 +7,46 @@ suite('Launch configuration', () => {\n         test('A binary', async () => {\n             const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n-            assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n-            assert.deepEqual(args.filter, undefined);\n+            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.filter, undefined);\n         });\n \n         test('One of Multiple Binaries', async () => {\n             const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\"]);\n \n-            assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\", \"--message-format=json\"]);\n-            assert.deepEqual(args.filter, undefined);\n+            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.filter, undefined);\n         });\n \n         test('A test', async () => {\n             const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\"]);\n \n-            assert.deepEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\", \"--message-format=json\"]);\n-            assert.notDeepEqual(args.filter, undefined);\n+            assert.deepStrictEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\", \"--message-format=json\"]);\n+            assert.notDeepStrictEqual(args.filter, undefined);\n         });\n     });\n \n     suite('QuickPick', () => {\n         test('A binary', async () => {\n             const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n-            assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n-            assert.deepEqual(args.filter, undefined);\n+            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.filter, undefined);\n         });\n \n \n         test('One of Multiple Binaries', async () => {\n             const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\"]);\n \n-            assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\", \"--message-format=json\"]);\n-            assert.deepEqual(args.filter, undefined);\n+            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.filter, undefined);\n         });\n \n         test('A test', async () => {\n             const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\"]);\n \n-            assert.deepEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--message-format=json\", \"--no-run\"]);\n-            assert.notDeepEqual(args.filter, undefined);\n+            assert.deepStrictEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--message-format=json\", \"--no-run\"]);\n+            assert.notDeepStrictEqual(args.filter, undefined);\n         });\n     });\n });"}, {"sha": "d5f522dd11c1ae17d4f3045d652be76d2bb909fd", "filename": "editors/code/tests/unit/runnable_env.test.ts", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1fe48a7184cd94667d0dbfb755b6e8c8bba60f53/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts?ref=1fe48a7184cd94667d0dbfb755b6e8c8bba60f53", "patch": "@@ -23,10 +23,10 @@ function fakePrepareEnv(runnableName: string, config: RunnableEnvCfg): Record<st\n suite('Runnable env', () => {\n     test('Global config works', () => {\n         const binEnv = fakePrepareEnv(\"run project_name\", { \"GLOBAL\": \"g\" });\n-        assert.equal(binEnv[\"GLOBAL\"], \"g\");\n+        assert.strictEqual(binEnv[\"GLOBAL\"], \"g\");\n \n         const testEnv = fakePrepareEnv(\"test some::mod::test_name\", { \"GLOBAL\": \"g\" });\n-        assert.equal(testEnv[\"GLOBAL\"], \"g\");\n+        assert.strictEqual(testEnv[\"GLOBAL\"], \"g\");\n     });\n \n     test('null mask works', () => {\n@@ -36,10 +36,10 @@ suite('Runnable env', () => {\n             }\n         ];\n         const binEnv = fakePrepareEnv(\"run project_name\", config);\n-        assert.equal(binEnv[\"DATA\"], \"data\");\n+        assert.strictEqual(binEnv[\"DATA\"], \"data\");\n \n         const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(testEnv[\"DATA\"], \"data\");\n+        assert.strictEqual(testEnv[\"DATA\"], \"data\");\n     });\n \n     test('order works', () => {\n@@ -52,10 +52,10 @@ suite('Runnable env', () => {\n             }\n         ];\n         const binEnv = fakePrepareEnv(\"run project_name\", config);\n-        assert.equal(binEnv[\"DATA\"], \"newdata\");\n+        assert.strictEqual(binEnv[\"DATA\"], \"newdata\");\n \n         const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(testEnv[\"DATA\"], \"newdata\");\n+        assert.strictEqual(testEnv[\"DATA\"], \"newdata\");\n     });\n \n     test('mask works', () => {\n@@ -73,13 +73,13 @@ suite('Runnable env', () => {\n             }\n         ];\n         const binEnv = fakePrepareEnv(\"run project_name\", config);\n-        assert.equal(binEnv[\"DATA\"], \"rundata\");\n+        assert.strictEqual(binEnv[\"DATA\"], \"rundata\");\n \n         const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(testEnv[\"DATA\"], \"data\");\n+        assert.strictEqual(testEnv[\"DATA\"], \"data\");\n \n         const specialTestEnv = fakePrepareEnv(\"test some::mod::special_test\", config);\n-        assert.equal(specialTestEnv[\"DATA\"], \"special_test\");\n+        assert.strictEqual(specialTestEnv[\"DATA\"], \"special_test\");\n     });\n \n     test('exact test name works', () => {\n@@ -93,10 +93,10 @@ suite('Runnable env', () => {\n             }\n         ];\n         const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(testEnv[\"DATA\"], \"test special\");\n+        assert.strictEqual(testEnv[\"DATA\"], \"test special\");\n \n         const specialTestEnv = fakePrepareEnv(\"test some::mod::another_test\", config);\n-        assert.equal(specialTestEnv[\"DATA\"], \"data\");\n+        assert.strictEqual(specialTestEnv[\"DATA\"], \"data\");\n     });\n \n     test('test mod name works', () => {\n@@ -110,10 +110,10 @@ suite('Runnable env', () => {\n             }\n         ];\n         const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(testEnv[\"DATA\"], \"mod special\");\n+        assert.strictEqual(testEnv[\"DATA\"], \"mod special\");\n \n         const specialTestEnv = fakePrepareEnv(\"test some::mod::another_test\", config);\n-        assert.equal(specialTestEnv[\"DATA\"], \"mod special\");\n+        assert.strictEqual(specialTestEnv[\"DATA\"], \"mod special\");\n     });\n \n });"}]}