{"sha": "69289c93666cad424627c0d696841c8f78e96448", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Mjg5YzkzNjY2Y2FkNDI0NjI3YzBkNjk2ODQxYzhmNzhlOTY0NDg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-04-07T23:56:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-04-07T23:56:45Z"}, "message": "Add doc example for Iter and IterMut", "tree": {"sha": "9e2eed49d8e8b11ea584734fba5fd035dc72d9be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2eed49d8e8b11ea584734fba5fd035dc72d9be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69289c93666cad424627c0d696841c8f78e96448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69289c93666cad424627c0d696841c8f78e96448", "html_url": "https://github.com/rust-lang/rust/commit/69289c93666cad424627c0d696841c8f78e96448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69289c93666cad424627c0d696841c8f78e96448/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12b4e4e3266644d519647afc2943cefa2026e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12b4e4e3266644d519647afc2943cefa2026e07", "html_url": "https://github.com/rust-lang/rust/commit/b12b4e4e3266644d519647afc2943cefa2026e07"}], "stats": {"total": 166, "additions": 162, "deletions": 4}, "files": [{"sha": "39ef22071870f7e13e80ac27539bcac0016869b1", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 162, "deletions": 4, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/69289c93666cad424627c0d696841c8f78e96448/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69289c93666cad424627c0d696841c8f78e96448/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=69289c93666cad424627c0d696841c8f78e96448", "patch": "@@ -38,6 +38,7 @@ use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord};\n use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n+use fmt;\n use intrinsics::assume;\n use iter::*;\n use ops::{FnMut, self, Index};\n@@ -632,8 +633,7 @@ impl<T> ops::Index<ops::RangeToInclusive<usize>> for [T] {\n \n     #[inline]\n     fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] {\n-        // SNAP 4d3eebf change this to `0...index.end`\n-        self.index(ops::RangeInclusive::NonEmpty { start: 0, end: index.end })\n+        self.index(0...index.end)\n     }\n }\n \n@@ -723,8 +723,7 @@ impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for [T] {\n impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {\n-        // SNAP 4d3eebf change this to `0...index.end`\n-        self.index_mut(ops::RangeInclusive::NonEmpty { start: 0, end: index.end })\n+        self.index_mut(0...index.end)\n     }\n }\n \n@@ -872,13 +871,36 @@ macro_rules! make_mut_slice {\n }\n \n /// Immutable slice iterator\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // First, we declare a type which has `iter` method to get the `Iter` struct (&[usize here]):\n+/// let slice = &[1, 2, 3];\n+///\n+/// // Then, we iterate over it:\n+/// for element in slice.iter() {\n+///     println!(\"{}\", element);\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ptr: *const T,\n     end: *const T,\n     _marker: marker::PhantomData<&'a T>,\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+            .field(&self.as_slice())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -889,6 +911,26 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // First, we declare a type which has the `iter` method to get the `Iter`\n+    /// // struct (&[usize here]):\n+    /// let slice = &[1, 2, 3];\n+    ///\n+    /// // Then, we get the iterator:\n+    /// let mut iter = slice.iter();\n+    /// // So if we print what `as_slice` method returns here, we have \"[1, 2, 3]\":\n+    /// println!(\"{:?}\", iter.as_slice());\n+    ///\n+    /// // Next, we move to the second element of the slice:\n+    /// iter.next();\n+    /// // Now `as_slice` returns \"[2, 3]\":\n+    /// println!(\"{:?}\", iter.as_slice());\n+    /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         make_slice!(self.ptr, self.end)\n@@ -920,13 +962,40 @@ impl<'a, T> Clone for Iter<'a, T> {\n }\n \n /// Mutable slice iterator.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n+/// // struct (&[usize here]):\n+/// let mut slice = &mut [1, 2, 3];\n+///\n+/// // Then, we iterate over it and increment each element value:\n+/// for element in slice.iter_mut() {\n+///     *element += 1;\n+/// }\n+///\n+/// // We now have \"[2, 3, 4]\":\n+/// println!(\"{:?}\", slice);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ptr: *mut T,\n     end: *mut T,\n     _marker: marker::PhantomData<&'a mut T>,\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IterMut\")\n+            .field(&make_slice!(self.ptr, self.end))\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -939,6 +1008,35 @@ impl<'a, T> IterMut<'a, T> {\n     /// to consume the iterator. Consider using the `Slice` and\n     /// `SliceMut` implementations for obtaining slices with more\n     /// restricted lifetimes that do not consume the iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n+    /// // struct (&[usize here]):\n+    /// let mut slice = &mut [1, 2, 3];\n+    ///\n+    /// {\n+    ///     // Then, we get the iterator:\n+    ///     let mut iter = slice.iter_mut();\n+    ///     // We move to next element:\n+    ///     iter.next();\n+    ///     // So if we print what `into_slice` method returns here, we have \"[2, 3]\":\n+    ///     println!(\"{:?}\", iter.into_slice());\n+    /// }\n+    ///\n+    /// // Now let's modify a value of the slice:\n+    /// {\n+    ///     // First we get back the iterator:\n+    ///     let mut iter = slice.iter_mut();\n+    ///     // We change the value of the first element of the slice returned by the `next` method:\n+    ///     *iter.next().unwrap() += 1;\n+    /// }\n+    /// // Now slice is \"[2, 2, 3]\":\n+    /// println!(\"{:?}\", slice);\n+    /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         make_mut_slice!(self.ptr, self.end)\n@@ -982,6 +1080,16 @@ pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     finished: bool\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for Split<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Split\")\n+            .field(\"v\", &self.v)\n+            .field(\"finished\", &self.finished)\n+            .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, P> Clone for Split<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n@@ -1055,6 +1163,16 @@ pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     finished: bool\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"SplitMut\")\n+            .field(\"v\", &self.v)\n+            .field(\"finished\", &self.finished)\n+            .finish()\n+    }\n+}\n+\n impl<'a, T, P> SplitIter for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn finish(&mut self) -> Option<&'a mut [T]> {\n@@ -1129,6 +1247,7 @@ impl<'a, T, P> DoubleEndedIterator for SplitMut<'a, T, P> where\n /// An private iterator over subslices separated by elements that\n /// match a predicate function, splitting at most a fixed number of\n /// times.\n+#[derive(Debug)]\n struct GenericSplitN<I> {\n     iter: I,\n     count: usize,\n@@ -1164,6 +1283,15 @@ pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitN<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"SplitN\")\n+            .field(\"inner\", &self.inner)\n+            .finish()\n+    }\n+}\n+\n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n@@ -1172,13 +1300,31 @@ pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<Split<'a, T, P>>\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitN<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"RSplitN\")\n+            .field(\"inner\", &self.inner)\n+            .finish()\n+    }\n+}\n+\n /// An iterator over subslices separated by elements that match a predicate\n /// function, limited to a given number of splits.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for SplitNMut<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"SplitNMut\")\n+            .field(\"inner\", &self.inner)\n+            .finish()\n+    }\n+}\n+\n /// An iterator over subslices separated by elements that match a\n /// predicate function, limited to a given number of splits, starting\n /// from the end of the slice.\n@@ -1187,6 +1333,15 @@ pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n     inner: GenericSplitN<SplitMut<'a, T, P>>\n }\n \n+#[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n+impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitNMut<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"RSplitNMut\")\n+            .field(\"inner\", &self.inner)\n+            .finish()\n+    }\n+}\n+\n macro_rules! forward_iterator {\n     ($name:ident: $elem:ident, $iter_of:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1214,6 +1369,7 @@ forward_iterator! { SplitNMut: T, &'a mut [T] }\n forward_iterator! { RSplitNMut: T, &'a mut [T] }\n \n /// An iterator over overlapping subslices of length `size`.\n+#[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Windows<'a, T:'a> {\n     v: &'a [T],\n@@ -1307,6 +1463,7 @@ impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n ///\n /// When the slice len is not evenly divided by the chunk size, the last slice\n /// of the iteration will be the remainder.\n+#[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T:'a> {\n     v: &'a [T],\n@@ -1407,6 +1564,7 @@ impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n /// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n+#[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ChunksMut<'a, T:'a> {\n     v: &'a mut [T],"}]}