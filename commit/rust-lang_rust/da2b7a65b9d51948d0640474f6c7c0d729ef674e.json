{"sha": "da2b7a65b9d51948d0640474f6c7c0d729ef674e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMmI3YTY1YjlkNTE5NDhkMDY0MDQ3NGY2YzdjMGQ3MjllZjY3NGU=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-08-04T00:22:43Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-08-05T21:52:37Z"}, "message": "Clean up `std::raw` docs\n\nThere is no longer a `Repr` trait, so mentioning a missing impl of it\nwas potentially confusing.", "tree": {"sha": "901298e4845c902962ce419a8748afb06827e796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901298e4845c902962ce419a8748afb06827e796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da2b7a65b9d51948d0640474f6c7c0d729ef674e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXpQqlAAoJENpc3BX5vtsr8RQP/35hyBhzqYdgGSnxre6Em+VY\nHtVNayY4YxvsbN35AxA+YkYnWDMokwZq5mQTYDdWwreJP41SzJYJXLhjfxm/1o4p\nydgVEnSmaLr1ka3bpuGIIAB5DiYKRlP+2q87Cj9xupTVLWTsnDFgpF/NJdLRKKIs\nSBL3DAKYUSki49WMh1/bK/Y0qIZLW0IOWIQheietMiXp7Gf65eaGN60d4GB8ApXg\n2B8Vbg9KkmcaA2TldV7uWNfWuaITz3Q5E3MIc8vMa9mdtWpS29nIEhMeUODqfRz/\n4dJX/55kbIFwlXpfKT8Bp6aX64fOUUCJ46xbvfb7igOoo+HNJLGLpBEnSaHFi6QD\nAeXOP8HPhqfpv3ABydXjklF4iaj4ppj9/CXqmmeu98S7Za+fetDMdXsP8Z0OIOB8\nPMLQodEEZGsHA47m5yFQ6d2VNf/nXUk4pVFlMt8kVgqh9mea1KnZBJTVmb/EyklV\n+OIvX6NVNhVF0OPo80M/JCl+NzYolj+EZqXXjTkcPATqss7dyHWfHBKELsxAqebE\n/b2A+qg5Xfzvh0wbtZzdZ/eTMrW19URvc/jNJCgbwacFVTB5L+qZPFvdU8Q5MdbS\nh9qmeWAnmyjRZywhYxdLPXkdv+45GDPlT84iaHGr8qEVVIlKwskba7uuALR7C5vx\nOSXGeHfYnQfNIkAeOI7a\n=bPt+\n-----END PGP SIGNATURE-----", "payload": "tree 901298e4845c902962ce419a8748afb06827e796\nparent 9316ae515e2f8f3f497fb4f1559910c1eef2433d\nauthor Andrew Paseltiner <apaseltiner@gmail.com> 1470270163 -0400\ncommitter Andrew Paseltiner <apaseltiner@gmail.com> 1470433957 -0400\n\nClean up `std::raw` docs\n\nThere is no longer a `Repr` trait, so mentioning a missing impl of it\nwas potentially confusing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da2b7a65b9d51948d0640474f6c7c0d729ef674e", "html_url": "https://github.com/rust-lang/rust/commit/da2b7a65b9d51948d0640474f6c7c0d729ef674e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da2b7a65b9d51948d0640474f6c7c0d729ef674e/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9316ae515e2f8f3f497fb4f1559910c1eef2433d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9316ae515e2f8f3f497fb4f1559910c1eef2433d", "html_url": "https://github.com/rust-lang/rust/commit/9316ae515e2f8f3f497fb4f1559910c1eef2433d"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a7d0d3899b181d2dd3add95f7bbb46c2bb83ced3", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da2b7a65b9d51948d0640474f6c7c0d729ef674e/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2b7a65b9d51948d0640474f6c7c0d729ef674e/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=da2b7a65b9d51948d0640474f6c7c0d729ef674e", "patch": "@@ -34,12 +34,13 @@\n /// only designed to be used by unsafe code that needs to manipulate\n /// the low-level details.\n ///\n-/// There is no `Repr` implementation for `TraitObject` because there\n-/// is no way to refer to all trait objects generically, so the only\n+/// There is no way to refer to all trait objects generically, so the only\n /// way to create values of this type is with functions like\n-/// `std::mem::transmute`. Similarly, the only way to create a true\n+/// [`std::mem::transmute`][transmute]. Similarly, the only way to create a true\n /// trait object from a `TraitObject` value is with `transmute`.\n ///\n+/// [transmute]: ../intrinsics/fn.transmute.html\n+///\n /// Synthesizing a trait object with mismatched types\u2014one where the\n /// vtable does not correspond to the type of the value to which the\n /// data pointer points\u2014is highly likely to lead to undefined\n@@ -50,13 +51,13 @@\n /// ```\n /// #![feature(raw)]\n ///\n-/// use std::mem;\n-/// use std::raw;\n+/// use std::{mem, raw};\n ///\n /// // an example trait\n /// trait Foo {\n ///     fn bar(&self) -> i32;\n /// }\n+///\n /// impl Foo for i32 {\n ///     fn bar(&self) -> i32 {\n ///          *self + 1\n@@ -74,19 +75,18 @@\n /// // the data pointer is the address of `value`\n /// assert_eq!(raw_object.data as *const i32, &value as *const _);\n ///\n-///\n /// let other_value: i32 = 456;\n ///\n /// // construct a new object, pointing to a different `i32`, being\n /// // careful to use the `i32` vtable from `object`\n /// let synthesized: &Foo = unsafe {\n ///      mem::transmute(raw::TraitObject {\n ///          data: &other_value as *const _ as *mut (),\n-///          vtable: raw_object.vtable\n+///          vtable: raw_object.vtable,\n ///      })\n /// };\n ///\n-/// // it should work just like we constructed a trait object out of\n+/// // it should work just as if we had constructed a trait object out of\n /// // `other_value` directly\n /// assert_eq!(synthesized.bar(), 457);\n /// ```"}]}