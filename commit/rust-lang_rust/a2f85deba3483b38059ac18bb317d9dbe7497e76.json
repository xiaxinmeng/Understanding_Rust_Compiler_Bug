{"sha": "a2f85deba3483b38059ac18bb317d9dbe7497e76", "node_id": "C_kwDOAAsO6NoAKGEyZjg1ZGViYTM0ODNiMzgwNTlhYzE4YmIzMTdkOWRiZTc0OTdlNzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T20:01:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T20:01:56Z"}, "message": "Auto merge of #10250 - tylerjw:issue_7419, r=xFrednet\n\nwildcard_enum_match_arm lint takes the enum origin into account\n\nfixes #7419\n\n---\n\nchangelog: Enhancement: [`wildcard_enum_match_arm`]: Now lints missing private variants, for local enums\n[#10250](https://github.com/rust-lang/rust-clippy/pull/10250)\n<!-- changelog_checked -->", "tree": {"sha": "c179ff1a61eae3325a485ce88d3883ec7de56d13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c179ff1a61eae3325a485ce88d3883ec7de56d13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f85deba3483b38059ac18bb317d9dbe7497e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f85deba3483b38059ac18bb317d9dbe7497e76", "html_url": "https://github.com/rust-lang/rust/commit/a2f85deba3483b38059ac18bb317d9dbe7497e76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f85deba3483b38059ac18bb317d9dbe7497e76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588c1ba3ff758223f71ccadefc79bdb4cf362fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/588c1ba3ff758223f71ccadefc79bdb4cf362fe7", "html_url": "https://github.com/rust-lang/rust/commit/588c1ba3ff758223f71ccadefc79bdb4cf362fe7"}, {"sha": "df7cdf732d3679f21c4a36808fb43b832f0a6725", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7cdf732d3679f21c4a36808fb43b832f0a6725", "html_url": "https://github.com/rust-lang/rust/commit/df7cdf732d3679f21c4a36808fb43b832f0a6725"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "3126b590180e67621371c3dc30088c40dba31c3e", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2f85deba3483b38059ac18bb317d9dbe7497e76/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f85deba3483b38059ac18bb317d9dbe7497e76/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=a2f85deba3483b38059ac18bb317d9dbe7497e76", "patch": "@@ -45,8 +45,13 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n \n     // Accumulate the variants which should be put in place of the wildcard because they're not\n     // already covered.\n-    let has_hidden = adt_def.variants().iter().any(|x| is_hidden(cx, x));\n-    let mut missing_variants: Vec<_> = adt_def.variants().iter().filter(|x| !is_hidden(cx, x)).collect();\n+    let is_external = adt_def.did().as_local().is_none();\n+    let has_external_hidden = is_external && adt_def.variants().iter().any(|x| is_hidden(cx, x));\n+    let mut missing_variants: Vec<_> = adt_def\n+        .variants()\n+        .iter()\n+        .filter(|x| !(is_external && is_hidden(cx, x)))\n+        .collect();\n \n     let mut path_prefix = CommonPrefixSearcher::None;\n     for arm in arms {\n@@ -133,7 +138,7 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n \n     match missing_variants.as_slice() {\n         [] => (),\n-        [x] if !adt_def.is_variant_list_non_exhaustive() && !has_hidden => span_lint_and_sugg(\n+        [x] if !adt_def.is_variant_list_non_exhaustive() && !has_external_hidden => span_lint_and_sugg(\n             cx,\n             MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n             wildcard_span,\n@@ -144,7 +149,7 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n         ),\n         variants => {\n             let mut suggestions: Vec<_> = variants.iter().copied().map(format_suggestion).collect();\n-            let message = if adt_def.is_variant_list_non_exhaustive() || has_hidden {\n+            let message = if adt_def.is_variant_list_non_exhaustive() || has_external_hidden {\n                 suggestions.push(\"_\".into());\n                 \"wildcard matches known variants and will also match future added variants\"\n             } else {"}, {"sha": "9fd3739b69c2cd7720da4cee815a39980e7915b4", "filename": "tests/ui/match_wildcard_for_single_variants.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed?ref=a2f85deba3483b38059ac18bb317d9dbe7497e76", "patch": "@@ -123,7 +123,7 @@ fn main() {\n             Enum::A => (),\n             Enum::B => (),\n             Enum::C => (),\n-            _ => (),\n+            Enum::__Private => (),\n         }\n         match Enum::A {\n             Enum::A => (),"}, {"sha": "105b4c4b41d1e9ca107906e2cc3a638c0508e307", "filename": "tests/ui/match_wildcard_for_single_variants.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr?ref=a2f85deba3483b38059ac18bb317d9dbe7497e76", "patch": "@@ -48,11 +48,17 @@ error: wildcard matches only a single variant and will also match any future add\n LL |         _ => (),\n    |         ^ help: try this: `Color::Blue`\n \n+error: wildcard matches only a single variant and will also match any future added variants\n+  --> $DIR/match_wildcard_for_single_variants.rs:126:13\n+   |\n+LL |             _ => (),\n+   |             ^ help: try this: `Enum::__Private`\n+\n error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:153:13\n    |\n LL |             _ => 2,\n    |             ^ help: try this: `Foo::B`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "293bf75a717627b9b48b949ba925b38ae51f74c0", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=a2f85deba3483b38059ac18bb317d9dbe7497e76", "patch": "@@ -96,7 +96,7 @@ fn main() {\n         }\n         match Enum::A {\n             Enum::A => (),\n-            Enum::B | _ => (),\n+            Enum::B | Enum::__Private => (),\n         }\n     }\n }"}, {"sha": "30d29aa4e77a1cccde389f57fa0dac1cad717993", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2f85deba3483b38059ac18bb317d9dbe7497e76/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=a2f85deba3483b38059ac18bb317d9dbe7497e76", "patch": "@@ -34,11 +34,11 @@ error: wildcard matches known variants and will also match future added variants\n LL |         _ => {},\n    |         ^ help: try this: `ErrorKind::PermissionDenied | _`\n \n-error: wildcard matches known variants and will also match future added variants\n+error: wildcard match will also match any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:99:13\n    |\n LL |             _ => (),\n-   |             ^ help: try this: `Enum::B | _`\n+   |             ^ help: try this: `Enum::B | Enum::__Private`\n \n error: aborting due to 6 previous errors\n "}]}