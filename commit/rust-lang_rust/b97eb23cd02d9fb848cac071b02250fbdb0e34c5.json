{"sha": "b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5N2ViMjNjZDAyZDlmYjg0OGNhYzA3MWIwMjI1MGZiZGIwZTM0YzU=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-17T12:27:05Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-03-01T07:32:49Z"}, "message": "Box generator-related Body fields", "tree": {"sha": "1fe95d9e771c5691704748ae79333c27b998ad4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fe95d9e771c5691704748ae79333c27b998ad4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "html_url": "https://github.com/rust-lang/rust/commit/b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b150b7a8f77874f26c617666f5608fe4a3e58df", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b150b7a8f77874f26c617666f5608fe4a3e58df", "html_url": "https://github.com/rust-lang/rust/commit/3b150b7a8f77874f26c617666f5608fe4a3e58df"}], "stats": {"total": 143, "additions": 89, "deletions": 54}, "files": [{"sha": "b2e0a4311a73dd83a77af50d55d32fe43cf6f8a8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -1417,7 +1417,7 @@ fn generator_layout_and_saved_local_names(\n     def_id: DefId,\n ) -> (&'tcx GeneratorLayout<'tcx>, IndexVec<mir::GeneratorSavedLocal, Option<Symbol>>) {\n     let body = tcx.optimized_mir(def_id);\n-    let generator_layout = body.generator_layout.as_ref().unwrap();\n+    let generator_layout = body.generator_layout().unwrap();\n     let mut generator_saved_local_names = IndexVec::from_elem(None, &generator_layout.field_tys);\n \n     let state_arg = mir::Local::new(1);"}, {"sha": "4d8615a215fc0659835bed9dcfc3cc8dae1ea254", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -146,6 +146,22 @@ impl<'tcx> MirSource<'tcx> {\n     }\n }\n \n+#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]\n+pub struct GeneratorInfo<'tcx> {\n+    /// The yield type of the function, if it is a generator.\n+    pub yield_ty: Option<Ty<'tcx>>,\n+\n+    /// Generator drop glue.\n+    pub generator_drop: Option<Body<'tcx>>,\n+\n+    /// The layout of a generator. Produced by the state transformation.\n+    pub generator_layout: Option<GeneratorLayout<'tcx>>,\n+\n+    /// If this is a generator then record the type of source expression that caused this generator\n+    /// to be created.\n+    pub generator_kind: GeneratorKind,\n+}\n+\n /// The lowered representation of a single function.\n #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]\n pub struct Body<'tcx> {\n@@ -166,18 +182,7 @@ pub struct Body<'tcx> {\n     /// and used for debuginfo. Indexed by a `SourceScope`.\n     pub source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n \n-    /// The yield type of the function, if it is a generator.\n-    pub yield_ty: Option<Ty<'tcx>>,\n-\n-    /// Generator drop glue.\n-    pub generator_drop: Option<Box<Body<'tcx>>>,\n-\n-    /// The layout of a generator. Produced by the state transformation.\n-    pub generator_layout: Option<GeneratorLayout<'tcx>>,\n-\n-    /// If this is a generator then record the type of source expression that caused this generator\n-    /// to be created.\n-    pub generator_kind: Option<GeneratorKind>,\n+    pub generator: Option<Box<GeneratorInfo<'tcx>>>,\n \n     /// Declarations of locals.\n     ///\n@@ -259,10 +264,14 @@ impl<'tcx> Body<'tcx> {\n             source,\n             basic_blocks,\n             source_scopes,\n-            yield_ty: None,\n-            generator_drop: None,\n-            generator_layout: None,\n-            generator_kind,\n+            generator: generator_kind.map(|generator_kind| {\n+                Box::new(GeneratorInfo {\n+                    yield_ty: None,\n+                    generator_drop: None,\n+                    generator_layout: None,\n+                    generator_kind,\n+                })\n+            }),\n             local_decls,\n             user_type_annotations,\n             arg_count,\n@@ -289,16 +298,13 @@ impl<'tcx> Body<'tcx> {\n             source: MirSource::item(DefId::local(CRATE_DEF_INDEX)),\n             basic_blocks,\n             source_scopes: IndexVec::new(),\n-            yield_ty: None,\n-            generator_drop: None,\n-            generator_layout: None,\n+            generator: None,\n             local_decls: IndexVec::new(),\n             user_type_annotations: IndexVec::new(),\n             arg_count: 0,\n             spread_arg: None,\n             span: DUMMY_SP,\n             required_consts: Vec::new(),\n-            generator_kind: None,\n             var_debug_info: Vec::new(),\n             is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n@@ -480,6 +486,26 @@ impl<'tcx> Body<'tcx> {\n     pub fn dominators(&self) -> Dominators<BasicBlock> {\n         dominators(self)\n     }\n+\n+    #[inline]\n+    pub fn yield_ty(&self) -> Option<Ty<'tcx>> {\n+        self.generator.as_ref().and_then(|generator| generator.yield_ty)\n+    }\n+\n+    #[inline]\n+    pub fn generator_layout(&self) -> Option<&GeneratorLayout<'tcx>> {\n+        self.generator.as_ref().and_then(|generator| generator.generator_layout.as_ref())\n+    }\n+\n+    #[inline]\n+    pub fn generator_drop(&self) -> Option<&Body<'tcx>> {\n+        self.generator.as_ref().and_then(|generator| generator.generator_drop.as_ref())\n+    }\n+\n+    #[inline]\n+    pub fn generator_kind(&self) -> Option<GeneratorKind> {\n+        self.generator.as_ref().map(|generator| generator.generator_kind)\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "3e92844c4f94bcf66e12ba473e7a6dd3387554a3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -241,11 +241,13 @@ macro_rules! make_mir_visitor {\n                 body: &$($mutability)? Body<'tcx>,\n             ) {\n                 let span = body.span;\n-                if let Some(yield_ty) = &$($mutability)? body.yield_ty {\n-                    self.visit_ty(\n-                        yield_ty,\n-                        TyContext::YieldTy(SourceInfo::outermost(span))\n-                    );\n+                if let Some(gen) = &$($mutability)? body.generator {\n+                    if let Some(yield_ty) = &$($mutability)? gen.yield_ty {\n+                        self.visit_ty(\n+                            yield_ty,\n+                            TyContext::YieldTy(SourceInfo::outermost(span))\n+                        );\n+                    }\n                 }\n \n                 // for best performance, we want to use an iterator rather"}, {"sha": "2e077827873d1c2b4182369b7796d656e594e1d8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -2998,7 +2998,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns layout of a generator. Layout might be unavailable if the\n     /// generator is tainted by errors.\n     pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {\n-        self.optimized_mir(def_id).generator_layout.as_ref()\n+        self.optimized_mir(def_id).generator_layout()\n     }\n \n     /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements."}, {"sha": "77d9136622458ca33fc28207ef60d76da4ceeed1", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -103,11 +103,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n         }\n \n-        assert!(\n-            body.yield_ty.is_some() && universal_regions.yield_ty.is_some()\n-                || body.yield_ty.is_none() && universal_regions.yield_ty.is_none()\n-        );\n-        if let Some(mir_yield_ty) = body.yield_ty {\n+        assert!(body.yield_ty().is_some() == universal_regions.yield_ty.is_some());\n+        if let Some(mir_yield_ty) = body.yield_ty() {\n             let ur_yield_ty = universal_regions.yield_ty.unwrap();\n             let yield_span = body.local_decls[RETURN_PLACE].source_info.span;\n             self.equate_normalized_input_or_output(ur_yield_ty, mir_yield_ty, yield_span);"}, {"sha": "fa5b342c6e250eda3a0b191505f50f4830af1868", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -1651,7 +1651,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Yield { ref value, .. } => {\n                 let value_ty = value.ty(body, tcx);\n-                match body.yield_ty {\n+                match body.yield_ty() {\n                     None => span_mirbug!(self, term, \"yield in non-generator\"),\n                     Some(ty) => {\n                         if let Err(terr) = self.sub_types("}, {"sha": "b246ec5c8146b1963b11e06b32892f14f607b9d1", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -134,7 +134,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n     // Check if this is a generator, if so, return the drop glue for it\n     if let Some(&ty::Generator(gen_def_id, substs, _)) = ty.map(|ty| ty.kind()) {\n-        let body = &**tcx.optimized_mir(gen_def_id).generator_drop.as_ref().unwrap();\n+        let body = tcx.optimized_mir(gen_def_id).generator_drop().unwrap();\n         return body.clone().subst(tcx, substs);\n     }\n "}, {"sha": "a8569eb4f48f229b1ea3cfa653fd944eb9f2bd60", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -222,7 +222,7 @@ impl Validator<'mir, 'tcx> {\n \n         // `async` functions cannot be `const fn`. This is checked during AST lowering, so there's\n         // no need to emit duplicate errors here.\n-        if is_async_fn(self.ccx) || body.generator_kind.is_some() {\n+        if is_async_fn(self.ccx) || body.generator.is_some() {\n             tcx.sess.delay_span_bug(body.span, \"`async` functions cannot be `const fn`\");\n             return;\n         }"}, {"sha": "2a0e5e2c9c5d29e9cf5c14b8a8b0d44470aef5bc", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             body.arg_count,\n             Default::default(),\n             body.span,\n-            body.generator_kind,\n+            body.generator_kind(),\n         );\n \n         // FIXME(oli-obk, eddyb) Optimize locals (or even local paths) to hold"}, {"sha": "7a1f3d44a5e9719ae0e621a6d6ad3e4f23bc4c5f", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -1111,7 +1111,7 @@ fn create_generator_resume_function<'tcx>(\n     cases.insert(0, (UNRESUMED, BasicBlock::new(0)));\n \n     // Panic when resumed on the returned or poisoned state\n-    let generator_kind = body.generator_kind.unwrap();\n+    let generator_kind = body.generator_kind().unwrap();\n \n     if can_unwind {\n         cases.insert(\n@@ -1236,14 +1236,14 @@ fn create_cases<'tcx>(\n \n impl<'tcx> MirPass<'tcx> for StateTransform {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let yield_ty = if let Some(yield_ty) = body.yield_ty {\n+        let yield_ty = if let Some(yield_ty) = body.yield_ty() {\n             yield_ty\n         } else {\n             // This only applies to generators\n             return;\n         };\n \n-        assert!(body.generator_drop.is_none());\n+        assert!(body.generator_drop().is_none());\n \n         // The first argument is the generator type passed by value\n         let gen_ty = body.local_decls.raw[1].ty;\n@@ -1340,10 +1340,11 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         transform.visit_body(body);\n \n         // Update our MIR struct to reflect the changes we've made\n-        body.yield_ty = None;\n         body.arg_count = 2; // self, resume arg\n         body.spread_arg = None;\n-        body.generator_layout = Some(layout);\n+\n+        body.generator.as_mut().unwrap().yield_ty = None;\n+        body.generator.as_mut().unwrap().generator_layout = Some(layout);\n \n         // Insert `drop(generator_struct)` which is used to drop upvars for generators in\n         // the unresumed state.\n@@ -1362,7 +1363,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // Create a copy of our MIR and use it to create the drop shim for the generator\n         let drop_shim = create_generator_drop_shim(tcx, &transform, gen_ty, body, drop_clean);\n \n-        body.generator_drop = Some(box drop_shim);\n+        body.generator.as_mut().unwrap().generator_drop = Some(drop_shim);\n \n         // Create the Generator::resume function\n         create_generator_resume_function(tcx, transform, body, can_return);"}, {"sha": "518f7b41ed8552010eaf6e44d9f1590e656715e6", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -214,7 +214,7 @@ impl Inliner<'tcx> {\n             // since their `optimized_mir` is used for layout computation, which can\n             // create a cycle, even when no attempt is made to inline the function\n             // in the other direction.\n-            if caller_body.generator_kind.is_some() {\n+            if caller_body.generator.is_some() {\n                 return Err(\"local generator (query cycle avoidance)\");\n             }\n "}, {"sha": "47d976281a4470023aed6bc9bb5f2b2d51f11e99", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -1177,7 +1177,7 @@ pub fn promote_candidates<'tcx>(\n             0,\n             vec![],\n             body.span,\n-            body.generator_kind,\n+            body.generator_kind(),\n         );\n \n         let promoter = Promoter {"}, {"sha": "247a0beccaf0ff60107992e2dea90be22401f858", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -131,7 +131,7 @@ fn dump_matched_mir_node<'tcx, F>(\n             Some(promoted) => write!(file, \"::{:?}`\", promoted)?,\n         }\n         writeln!(file, \" {} {}\", disambiguator, pass_name)?;\n-        if let Some(ref layout) = body.generator_layout {\n+        if let Some(ref layout) = body.generator_layout() {\n             writeln!(file, \"/* generator_layout = {:#?} */\", layout)?;\n         }\n         writeln!(file)?;\n@@ -956,7 +956,7 @@ fn write_mir_sig(tcx: TyCtxt<'_>, body: &Body<'_>, w: &mut dyn Write) -> io::Res\n         write!(w, \": {} =\", body.return_ty())?;\n     }\n \n-    if let Some(yield_ty) = body.yield_ty {\n+    if let Some(yield_ty) = body.yield_ty() {\n         writeln!(w)?;\n         writeln!(w, \"yields {}\", yield_ty)?;\n     }"}, {"sha": "b928458df8ee41c809e2dc42fa997c1b72ae78e1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97eb23cd02d9fb848cac071b02250fbdb0e34c5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=b97eb23cd02d9fb848cac071b02250fbdb0e34c5", "patch": "@@ -188,7 +188,9 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 body,\n                 span_with_body,\n             );\n-            mir.yield_ty = yield_ty;\n+            if yield_ty.is_some() {\n+                mir.generator.as_mut().unwrap().yield_ty = yield_ty;\n+            }\n             mir\n         } else {\n             // Get the revealed type of this const. This is *not* the adjusted\n@@ -218,7 +220,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n             !(body.local_decls.has_free_regions()\n                 || body.basic_blocks().has_free_regions()\n                 || body.var_debug_info.has_free_regions()\n-                || body.yield_ty.has_free_regions()),\n+                || body.yield_ty().has_free_regions()),\n             \"Unexpected free regions in MIR: {:?}\",\n             body,\n         );\n@@ -686,10 +688,11 @@ fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'t\n     let def_id = tcx.hir().local_def_id(owner_id);\n     let span = tcx.hir().span(owner_id);\n     let ty = tcx.ty_error();\n+    let generator_kind = tcx.hir().body(body_id).generator_kind;\n     let num_params = match hir.body_owner_kind {\n         hir::BodyOwnerKind::Fn => tcx.hir().fn_decl_by_hir_id(owner_id).unwrap().inputs.len(),\n         hir::BodyOwnerKind::Closure => {\n-            if tcx.hir().body(body_id).generator_kind().is_some() {\n+            if generator_kind.is_some() {\n                 // Generators have an implicit `self` parameter *and* a possibly\n                 // implicit resume parameter.\n                 2\n@@ -701,8 +704,16 @@ fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'t\n         hir::BodyOwnerKind::Const => 0,\n         hir::BodyOwnerKind::Static(_) => 0,\n     };\n-    let mut builder =\n-        Builder::new(hir, def_id.to_def_id(), span, num_params, Safety::Safe, ty, span, None);\n+    let mut builder = Builder::new(\n+        hir,\n+        def_id.to_def_id(),\n+        span,\n+        num_params,\n+        Safety::Safe,\n+        ty,\n+        span,\n+        generator_kind,\n+    );\n     let source_info = builder.source_info(span);\n     // Some MIR passes will expect the number of parameters to match the\n     // function declaration.\n@@ -711,9 +722,7 @@ fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'t\n     }\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n     let mut body = builder.finish();\n-    if tcx.hir().body(body_id).generator_kind.is_some() {\n-        body.yield_ty = Some(ty);\n-    }\n+    body.generator.as_mut().map(|gen| gen.yield_ty = Some(ty));\n     body\n }\n "}]}