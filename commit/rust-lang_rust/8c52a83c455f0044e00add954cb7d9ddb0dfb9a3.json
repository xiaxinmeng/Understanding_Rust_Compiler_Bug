{"sha": "8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "node_id": "C_kwDOAAsO6NoAKDhjNTJhODNjNDU1ZjAwNDRlMDBhZGQ5NTRjYjdkOWRkYjBkZmI5YTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T02:05:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T02:05:14Z"}, "message": "Auto merge of #98570 - SparrowLii:deadlock, r=cjgillot\n\nget rid of `tcx` in deadlock handler when parallel compilation\n\nThis is a very obscure and hard-to-trace problem that affects thread scheduling. If we copy `tcx` to the deadlock handler thread, it will perform unpredictable behavior and cause very weird problems when executing `try_collect_active_jobs`(For example, the deadlock handler thread suddenly preempts the content of the blocked worker thread and executes the unknown judgment branch, like #94654).\nFortunately we can avoid this behavior by precomputing `query_map`. This change fixes the following ui tests failure on my environment when set `parallel-compiler = true`:\n```\n    [ui] src/test\\ui\\async-await\\no-const-async.rs\n    [ui] src/test\\ui\\infinite\\infinite-struct.rs\n    [ui] src/test\\ui\\infinite\\infinite-tag-type-recursion.rs\n    [ui] src/test\\ui\\issues\\issue-3008-1.rs\n    [ui] src/test\\ui\\issues\\issue-3008-2.rs\n    [ui] src/test\\ui\\issues\\issue-32326.rs\n    [ui] src/test\\ui\\issues\\issue-57271.rs\n    [ui] src/test\\ui\\issues\\issue-72554.rs\n    [ui] src/test\\ui\\parser\\fn-header-semantic-fail.rs\n    [ui] src/test\\ui\\union\\union-nonrepresentable.rs\n```\n\nUpdates #75760\nFixes #94654", "tree": {"sha": "318494c16d8cfd0672da2db195f746395bbb5133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318494c16d8cfd0672da2db195f746395bbb5133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "html_url": "https://github.com/rust-lang/rust/commit/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f98537eb7b5f42c246a52c550813c3cff336069", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f98537eb7b5f42c246a52c550813c3cff336069", "html_url": "https://github.com/rust-lang/rust/commit/5f98537eb7b5f42c246a52c550813c3cff336069"}, {"sha": "fbca21edd27dcd6e49a8020ed77a133ffa357c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbca21edd27dcd6e49a8020ed77a133ffa357c63", "html_url": "https://github.com/rust-lang/rust/commit/fbca21edd27dcd6e49a8020ed77a133ffa357c63"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "8796ad5a33cff0b4013dca3e9ee168fb24cc972a", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::registry::Registry;\n use rustc_middle::ty::tls;\n use rustc_parse::validate_attr;\n #[cfg(parallel_compiler)]\n-use rustc_query_impl::QueryCtxt;\n+use rustc_query_impl::{QueryContext, QueryCtxt};\n use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n@@ -166,20 +166,12 @@ pub fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n unsafe fn handle_deadlock() {\n     let registry = rustc_rayon_core::Registry::current();\n \n-    let context = tls::get_tlv();\n-    assert!(context != 0);\n-    rustc_data_structures::sync::assert_sync::<tls::ImplicitCtxt<'_, '_>>();\n-    let icx: &tls::ImplicitCtxt<'_, '_> = &*(context as *const tls::ImplicitCtxt<'_, '_>);\n-\n-    let session_globals = rustc_span::with_session_globals(|sg| sg as *const _);\n-    let session_globals = &*session_globals;\n-    thread::spawn(move || {\n-        tls::enter_context(icx, |_| {\n-            rustc_span::set_session_globals_then(session_globals, || {\n-                tls::with(|tcx| QueryCtxt::from_tcx(tcx).deadlock(&registry))\n-            })\n-        });\n+    let query_map = tls::with(|tcx| {\n+        QueryCtxt::from_tcx(tcx)\n+            .try_collect_active_jobs()\n+            .expect(\"active jobs shouldn't be locked in deadlock handler\")\n     });\n+    thread::spawn(move || rustc_query_impl::deadlock(query_map, &registry));\n }\n \n #[cfg(parallel_compiler)]"}, {"sha": "7c1fdc4e306a4ea159091e56f1059753522caf28", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "patch": "@@ -27,6 +27,8 @@ use rustc_span::Span;\n mod plumbing;\n pub use plumbing::QueryCtxt;\n use rustc_query_system::query::*;\n+#[cfg(parallel_compiler)]\n+pub use rustc_query_system::query::{deadlock, QueryContext};\n \n mod keys;\n use keys::Key;"}, {"sha": "307ad4e844b35e9ebdbbcebd9b505fe07663fe4f", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "patch": "@@ -132,11 +132,6 @@ impl<'tcx> QueryCtxt<'tcx> {\n         self.queries.on_disk_cache.as_ref()\n     }\n \n-    #[cfg(parallel_compiler)]\n-    pub unsafe fn deadlock(self, registry: &rustc_rayon_core::Registry) {\n-        rustc_query_system::query::deadlock(self, registry)\n-    }\n-\n     pub(super) fn encode_query_results(\n         self,\n         encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx>,"}, {"sha": "f1316557c2985f206745ce1cd640c6d41a269832", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "patch": "@@ -492,14 +492,13 @@ fn remove_cycle(\n /// There may be multiple cycles involved in a deadlock, so this searches\n /// all active queries for cycles before finally resuming all the waiters at once.\n #[cfg(parallel_compiler)]\n-pub fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n+pub fn deadlock(query_map: QueryMap, registry: &rayon_core::Registry) {\n     let on_panic = OnDrop(|| {\n         eprintln!(\"deadlock handler panicked, aborting process\");\n         process::abort();\n     });\n \n     let mut wakelist = Vec::new();\n-    let query_map = tcx.try_collect_active_jobs().unwrap();\n     let mut jobs: Vec<QueryJobId> = query_map.keys().cloned().collect();\n \n     let mut found_cycle = false;"}]}