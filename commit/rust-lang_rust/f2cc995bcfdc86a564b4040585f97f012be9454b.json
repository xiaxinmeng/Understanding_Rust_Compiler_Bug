{"sha": "f2cc995bcfdc86a564b4040585f97f012be9454b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyY2M5OTViY2ZkYzg2YTU2NGI0MDQwNTg1Zjk3ZjAxMmJlOTQ1NGI=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-13T06:11:39Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-31T15:05:42Z"}, "message": "Remove method_calls", "tree": {"sha": "92d84976a6c5efb45c2526b5fe3bedfe61989f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92d84976a6c5efb45c2526b5fe3bedfe61989f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2cc995bcfdc86a564b4040585f97f012be9454b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cc995bcfdc86a564b4040585f97f012be9454b", "html_url": "https://github.com/rust-lang/rust/commit/f2cc995bcfdc86a564b4040585f97f012be9454b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2cc995bcfdc86a564b4040585f97f012be9454b/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527fbbef486bab32a95209b638b097a14ff41db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/527fbbef486bab32a95209b638b097a14ff41db0", "html_url": "https://github.com/rust-lang/rust/commit/527fbbef486bab32a95209b638b097a14ff41db0"}], "stats": {"total": 147, "additions": 92, "deletions": 55}, "files": [{"sha": "11716afe11cdc2c3b219e6923efd288816ba2d3e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2cc995bcfdc86a564b4040585f97f012be9454b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cc995bcfdc86a564b4040585f97f012be9454b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f2cc995bcfdc86a564b4040585f97f012be9454b", "patch": "@@ -1326,7 +1326,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n         LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n-        LintId::of(&needless_for_each::NEEDLESS_FOR_EACH),\n         LintId::of(&panic_in_result_fn::PANIC_IN_RESULT_FN),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n@@ -1409,6 +1408,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc_early::UNSEPARATED_LITERAL_SUFFIX),\n         LintId::of(&mut_mut::MUT_MUT),\n         LintId::of(&needless_continue::NEEDLESS_CONTINUE),\n+        LintId::of(&needless_for_each::NEEDLESS_FOR_EACH),\n         LintId::of(&needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n         LintId::of(&non_expressive_names::SIMILAR_NAMES),\n         LintId::of(&option_if_let_else::OPTION_IF_LET_ELSE),"}, {"sha": "f60b09898abcef413f98f0aeb6bfeb4c715e7a1d", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f2cc995bcfdc86a564b4040585f97f012be9454b/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cc995bcfdc86a564b4040585f97f012be9454b/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=f2cc995bcfdc86a564b4040585f97f012be9454b", "patch": "@@ -10,9 +10,7 @@ use rustc_span::{source_map::Span, sym, Symbol};\n \n use if_chain::if_chain;\n \n-use crate::utils::{\n-    has_iter_method, is_diagnostic_assoc_item, method_calls, snippet_with_applicability, span_lint_and_then,\n-};\n+use crate::utils::{has_iter_method, is_trait_method, snippet_with_applicability, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `for_each` that would be more simply written as a\n@@ -41,7 +39,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub NEEDLESS_FOR_EACH,\n-    restriction,\n+    pedantic,\n     \"using `for_each` where a `for` loop would be simpler\"\n }\n \n@@ -55,22 +53,28 @@ impl LateLintPass<'_> for NeedlessForEach {\n             _ => return,\n         };\n \n-        // Max depth is set to 3 because we need to check the method chain length is just two.\n-        let (method_names, arg_lists, _) = method_calls(expr, 3);\n-\n         if_chain! {\n-            // This assures the length of this method chain is two.\n-            if let [for_each_args, iter_args] = arg_lists.as_slice();\n-            if let Some(for_each_sym) = method_names.first();\n-            if *for_each_sym == Symbol::intern(\"for_each\");\n-            if let Some(did) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if is_diagnostic_assoc_item(cx, did, sym::Iterator);\n-            // Checks the type of the first method receiver is NOT a user defined type.\n-            if has_iter_method(cx, cx.typeck_results().expr_ty(&iter_args[0])).is_some();\n-            if let ExprKind::Closure(_, _, body_id, ..) = for_each_args[1].kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            // Check the method name is `for_each`.\n+            if let ExprKind::MethodCall(method_name, _, for_each_args, _) = expr.kind;\n+            if method_name.ident.name == Symbol::intern(\"for_each\");\n+            // Check `for_each` is an associated function of `Iterator`.\n+            if is_trait_method(cx, expr, sym::Iterator);\n+            // Checks the receiver of `for_each` is also a method call.\n+            if let Some(for_each_receiver) = for_each_args.get(0);\n+            if let ExprKind::MethodCall(_, _, iter_args, _) = for_each_receiver.kind;\n+            // Skip the lint if the call chain is too long. e.g. `v.field.iter().for_each()` or\n+            // `v.foo().iter().for_each()` must be skipped.\n+            if let Some(iter_receiver) = iter_args.get(0);\n+            if matches!(\n+                iter_receiver.kind,\n+                ExprKind::Array(..) | ExprKind::Call(..) | ExprKind::Path(..)\n+            );\n+            // Checks the type of the `iter` method receiver is NOT a user defined type.\n+            if has_iter_method(cx, cx.typeck_results().expr_ty(&iter_receiver)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n+            if let ExprKind::Closure(_, _, body_id, ..) = for_each_args[1].kind;\n+            let body = cx.tcx.hir().body(body_id);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {\n                 let mut ret_collector = RetCollector::default();\n@@ -99,7 +103,7 @@ impl LateLintPass<'_> for NeedlessForEach {\n                 )));\n \n                 for span in &ret_collector.spans {\n-                    suggs.push((*span, \"return\".to_string()));\n+                    suggs.push((*span, \"continue\".to_string()));\n                 }\n \n                 span_lint_and_then("}, {"sha": "a4d4937a19a1ef9c4f511ad982fa8c2e4931174e", "filename": "tests/ui/needless_for_each_fixable.fixed", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f2cc995bcfdc86a564b4040585f97f012be9454b/tests%2Fui%2Fneedless_for_each_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2cc995bcfdc86a564b4040585f97f012be9454b/tests%2Fui%2Fneedless_for_each_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.fixed?ref=f2cc995bcfdc86a564b4040585f97f012be9454b", "patch": "@@ -14,6 +14,10 @@ fn should_lint() {\n         acc += elem;\n     }\n \n+    for elem in [1, 2, 3].iter() {\n+        acc += elem;\n+    }\n+\n     let mut hash_map: HashMap<i32, i32> = HashMap::new();\n     for (k, v) in hash_map.iter() {\n         acc += k + v;\n@@ -46,11 +50,30 @@ fn should_not_lint() {\n     }\n     v.iter().for_each(print);\n \n+    // User defined type.\n+    struct MyStruct {\n+        v: Vec<i32>,\n+    }\n+    impl MyStruct {\n+        fn iter(&self) -> impl Iterator<Item = &i32> {\n+            self.v.iter()\n+        }\n+    }\n+    let s = MyStruct { v: Vec::new() };\n+    s.iter().for_each(|elem| {\n+        acc += elem;\n+    });\n+\n     // `for_each` follows long iterator chain.\n-    v.iter().chain(v.iter()).for_each(|v| println!(\"{}\", v));\n+    v.iter().chain(v.iter()).for_each(|v| {\n+        acc += v;\n+    });\n     v.as_slice().iter().for_each(|v| {\n         acc += v;\n     });\n+    s.v.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // `return` is used in `Loop` of the closure.\n     v.iter().for_each(|v| {\n@@ -68,20 +91,6 @@ fn should_not_lint() {\n         }\n     });\n \n-    // User defined type.\n-    struct MyStruct {\n-        v: Vec<i32>,\n-    }\n-    impl MyStruct {\n-        fn iter(&self) -> impl Iterator<Item = &i32> {\n-            self.v.iter()\n-        }\n-    }\n-    let s = MyStruct { v: Vec::new() };\n-    s.iter().for_each(|elem| {\n-        acc += elem;\n-    });\n-\n     // Previously transformed iterator variable.\n     let it = v.iter();\n     it.chain(v.iter()).for_each(|elem| {"}, {"sha": "b374128f253237ddc08b235a8e486f6a91f833c4", "filename": "tests/ui/needless_for_each_fixable.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f2cc995bcfdc86a564b4040585f97f012be9454b/tests%2Fui%2Fneedless_for_each_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cc995bcfdc86a564b4040585f97f012be9454b/tests%2Fui%2Fneedless_for_each_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.rs?ref=f2cc995bcfdc86a564b4040585f97f012be9454b", "patch": "@@ -14,6 +14,10 @@ fn should_lint() {\n         acc += elem;\n     });\n \n+    [1, 2, 3].iter().for_each(|elem| {\n+        acc += elem;\n+    });\n+\n     let mut hash_map: HashMap<i32, i32> = HashMap::new();\n     hash_map.iter().for_each(|(k, v)| {\n         acc += k + v;\n@@ -46,11 +50,30 @@ fn should_not_lint() {\n     }\n     v.iter().for_each(print);\n \n+    // User defined type.\n+    struct MyStruct {\n+        v: Vec<i32>,\n+    }\n+    impl MyStruct {\n+        fn iter(&self) -> impl Iterator<Item = &i32> {\n+            self.v.iter()\n+        }\n+    }\n+    let s = MyStruct { v: Vec::new() };\n+    s.iter().for_each(|elem| {\n+        acc += elem;\n+    });\n+\n     // `for_each` follows long iterator chain.\n-    v.iter().chain(v.iter()).for_each(|v| println!(\"{}\", v));\n+    v.iter().chain(v.iter()).for_each(|v| {\n+        acc += v;\n+    });\n     v.as_slice().iter().for_each(|v| {\n         acc += v;\n     });\n+    s.v.iter().for_each(|v| {\n+        acc += v;\n+    });\n \n     // `return` is used in `Loop` of the closure.\n     v.iter().for_each(|v| {\n@@ -68,20 +91,6 @@ fn should_not_lint() {\n         }\n     });\n \n-    // User defined type.\n-    struct MyStruct {\n-        v: Vec<i32>,\n-    }\n-    impl MyStruct {\n-        fn iter(&self) -> impl Iterator<Item = &i32> {\n-            self.v.iter()\n-        }\n-    }\n-    let s = MyStruct { v: Vec::new() };\n-    s.iter().for_each(|elem| {\n-        acc += elem;\n-    });\n-\n     // Previously transformed iterator variable.\n     let it = v.iter();\n     it.chain(v.iter()).for_each(|elem| {"}, {"sha": "483a5e6d61d7291cb4a7d6f637bf5b1dfa42beb6", "filename": "tests/ui/needless_for_each_fixable.stderr", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f2cc995bcfdc86a564b4040585f97f012be9454b/tests%2Fui%2Fneedless_for_each_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2cc995bcfdc86a564b4040585f97f012be9454b/tests%2Fui%2Fneedless_for_each_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.stderr?ref=f2cc995bcfdc86a564b4040585f97f012be9454b", "patch": "@@ -30,7 +30,22 @@ LL |     }\n    |\n \n error: needless use of `for_each`\n-  --> $DIR/needless_for_each_fixable.rs:18:5\n+  --> $DIR/needless_for_each_fixable.rs:17:5\n+   |\n+LL | /     [1, 2, 3].iter().for_each(|elem| {\n+LL | |         acc += elem;\n+LL | |     });\n+   | |_______^\n+   |\n+help: try\n+   |\n+LL |     for elem in [1, 2, 3].iter() {\n+LL |         acc += elem;\n+LL |     }\n+   |\n+\n+error: needless use of `for_each`\n+  --> $DIR/needless_for_each_fixable.rs:22:5\n    |\n LL | /     hash_map.iter().for_each(|(k, v)| {\n LL | |         acc += k + v;\n@@ -45,7 +60,7 @@ LL |     }\n    |\n \n error: needless use of `for_each`\n-  --> $DIR/needless_for_each_fixable.rs:21:5\n+  --> $DIR/needless_for_each_fixable.rs:25:5\n    |\n LL | /     hash_map.iter_mut().for_each(|(k, v)| {\n LL | |         acc += *k + *v;\n@@ -60,7 +75,7 @@ LL |     }\n    |\n \n error: needless use of `for_each`\n-  --> $DIR/needless_for_each_fixable.rs:24:5\n+  --> $DIR/needless_for_each_fixable.rs:28:5\n    |\n LL | /     hash_map.keys().for_each(|k| {\n LL | |         acc += k;\n@@ -75,7 +90,7 @@ LL |     }\n    |\n \n error: needless use of `for_each`\n-  --> $DIR/needless_for_each_fixable.rs:27:5\n+  --> $DIR/needless_for_each_fixable.rs:31:5\n    |\n LL | /     hash_map.values().for_each(|v| {\n LL | |         acc += v;\n@@ -90,7 +105,7 @@ LL |     }\n    |\n \n error: needless use of `for_each`\n-  --> $DIR/needless_for_each_fixable.rs:34:5\n+  --> $DIR/needless_for_each_fixable.rs:38:5\n    |\n LL | /     my_vec().iter().for_each(|elem| {\n LL | |         acc += elem;\n@@ -104,5 +119,5 @@ LL |         acc += elem;\n LL |     }\n    |\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}