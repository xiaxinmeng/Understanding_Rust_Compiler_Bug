{"sha": "3fd0e3a77be624f41647bb930843de27bc1cc985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDBlM2E3N2JlNjI0ZjQxNjQ3YmI5MzA4NDNkZTI3YmMxY2M5ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T20:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T20:56:23Z"}, "message": "auto merge of #9902 : thestinger/rust/immediate, r=nikomatsakis\n\nThe code generation previously assumed a reference could not alter the\r\nvalue in a way the destructor would notice. This is an incorrect\r\nassumption for `&mut`, and is also incorrect for an `&` pointer to a\r\nnon-`Freeze` type.\r\n\r\nCloses #7972", "tree": {"sha": "f8067ecde729ef6fcaee88563e096b60d6af7bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8067ecde729ef6fcaee88563e096b60d6af7bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd0e3a77be624f41647bb930843de27bc1cc985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd0e3a77be624f41647bb930843de27bc1cc985", "html_url": "https://github.com/rust-lang/rust/commit/3fd0e3a77be624f41647bb930843de27bc1cc985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd0e3a77be624f41647bb930843de27bc1cc985/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d773a024a2976f2759235551a52101cd08b37cce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d773a024a2976f2759235551a52101cd08b37cce", "html_url": "https://github.com/rust-lang/rust/commit/d773a024a2976f2759235551a52101cd08b37cce"}, {"sha": "34ae5d70ac459be9cef362eb684e17f3e490b869", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ae5d70ac459be9cef362eb684e17f3e490b869", "html_url": "https://github.com/rust-lang/rust/commit/34ae5d70ac459be9cef362eb684e17f3e490b869"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "89dfa64511f824cab4f94fda39943d772e6d9108", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fd0e3a77be624f41647bb930843de27bc1cc985/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd0e3a77be624f41647bb930843de27bc1cc985/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3fd0e3a77be624f41647bb930843de27bc1cc985", "patch": "@@ -1917,7 +1917,7 @@ fn trans_match_inner(scope_cx: @mut Block,\n             Infallible\n         }\n     };\n-    let lldiscr = discr_datum.to_zeroable_ref_llval(bcx);\n+    let lldiscr = discr_datum.to_ref_llval(bcx);\n     compile_submatch(bcx, matches, [lldiscr], chk);\n \n     let mut arm_cxs = ~[];\n@@ -1996,7 +1996,7 @@ pub fn store_local(bcx: @mut Block,\n                 if bcx.sess().asm_comments() {\n                     add_comment(bcx, \"creating zeroable ref llval\");\n                 }\n-                let llptr = init_datum.to_zeroable_ref_llval(bcx);\n+                let llptr = init_datum.to_ref_llval(bcx);\n                 return bind_irrefutable_pat(bcx, pat, llptr, BindLocal);\n             }\n         }"}, {"sha": "294f3379f84f63f7c199aa5de50307479524f8bb", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3fd0e3a77be624f41647bb930843de27bc1cc985/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd0e3a77be624f41647bb930843de27bc1cc985/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=3fd0e3a77be624f41647bb930843de27bc1cc985", "patch": "@@ -473,38 +473,25 @@ impl Datum {\n                     C_null(type_of::type_of(bcx.ccx(), self.ty).ptr_to())\n                 } else {\n                     let slot = alloc_ty(bcx, self.ty, \"\");\n+                    // The store created here can be modified through a reference, for example:\n+                    //\n+                    //     // free the old allocation, and change the pointer to a new allocation\n+                    //     fn foo(x: &mut ~u8) {\n+                    //         *x = ~5;\n+                    //     }\n+                    //\n+                    //     foo(&mut ~5);\n                     Store(bcx, self.val, slot);\n+                    // The old cleanup needs to be cancelled, in order for the destructor to observe\n+                    // any changes made through the reference.\n+                    self.cancel_clean(bcx);\n+                    add_clean_temp_mem(bcx, slot, self.ty);\n                     slot\n                 }\n             }\n         }\n     }\n \n-    pub fn to_zeroable_ref_llval(&self, bcx: @mut Block) -> ValueRef {\n-        /*!\n-         * Returns a by-ref llvalue that can be zeroed in order to\n-         * cancel cleanup. This is a kind of hokey bridge used\n-         * to adapt to the match code. Please don't use it for new code.\n-         */\n-\n-        match self.mode {\n-            // All by-ref datums are zeroable, even if we *could* just\n-            // cancel the cleanup.\n-            ByRef(_) => self.val,\n-\n-            // By value datums can't be zeroed (where would you store\n-            // the zero?) so we have to spill them. Add a temp cleanup\n-            // for this spilled value and cancel the cleanup on this\n-            // current value.\n-            ByValue => {\n-                let slot = self.to_ref_llval(bcx);\n-                self.cancel_clean(bcx);\n-                add_clean_temp_mem(bcx, slot, self.ty);\n-                slot\n-            }\n-        }\n-    }\n-\n     pub fn appropriate_mode(&self, ccx: &mut CrateContext) -> DatumMode {\n         /*! See the `appropriate_mode()` function */\n "}, {"sha": "2b9e97be2c7efe22a14dcf306a97ae2b8623bcf3", "filename": "src/test/run-pass/cancel-clean-via-immediate-rvalue-ref.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fd0e3a77be624f41647bb930843de27bc1cc985/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd0e3a77be624f41647bb930843de27bc1cc985/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs?ref=3fd0e3a77be624f41647bb930843de27bc1cc985", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(x: &mut ~u8) {\n+    *x = ~5;\n+}\n+\n+pub fn main() {\n+    foo(&mut ~4);\n+}"}]}