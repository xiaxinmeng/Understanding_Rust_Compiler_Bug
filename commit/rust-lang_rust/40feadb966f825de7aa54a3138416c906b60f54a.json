{"sha": "40feadb966f825de7aa54a3138416c906b60f54a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZmVhZGI5NjZmODI1ZGU3YWE1NGEzMTM4NDE2YzkwNmI2MGY1NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-31T16:04:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-31T16:04:18Z"}, "message": "Auto merge of #40950 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 10 pull requests\n\n- Successful merges: #40694, #40842, #40869, #40888, #40898, #40904, #40925, #40928, #40929, #40934\n- Failed merges:", "tree": {"sha": "782773130a3e3273426a8ef3380f5802a333d458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782773130a3e3273426a8ef3380f5802a333d458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40feadb966f825de7aa54a3138416c906b60f54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40feadb966f825de7aa54a3138416c906b60f54a", "html_url": "https://github.com/rust-lang/rust/commit/40feadb966f825de7aa54a3138416c906b60f54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40feadb966f825de7aa54a3138416c906b60f54a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9329d3aa3974cfe7fda57a67b3898434f410131", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9329d3aa3974cfe7fda57a67b3898434f410131", "html_url": "https://github.com/rust-lang/rust/commit/a9329d3aa3974cfe7fda57a67b3898434f410131"}, {"sha": "c34f533a85529b483083c9082b5cb9ae0b711bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34f533a85529b483083c9082b5cb9ae0b711bcf", "html_url": "https://github.com/rust-lang/rust/commit/c34f533a85529b483083c9082b5cb9ae0b711bcf"}], "stats": {"total": 459, "additions": 330, "deletions": 129}, "files": [{"sha": "1fa256197ce528a537269316cc7e2c873b2b9ef0", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -926,6 +926,9 @@ dependencies = [\n [[package]]\n name = \"tidy\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"toml\""}, {"sha": "292f5a1ec816af92e6569d03e0084ee4b0c957b5", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -146,7 +146,6 @@\n - [proc_macro](proc-macro.md)\n - [proc_macro_internals](proc-macro-internals.md)\n - [process_try_wait](process-try-wait.md)\n-- [pub_restricted](pub-restricted.md)\n - [question_mark_carrier](question-mark-carrier.md)\n - [quote](quote.md)\n - [rand](rand.md)\n@@ -156,11 +155,11 @@\n - [relaxed_adts](relaxed-adts.md)\n - [repr_simd](repr-simd.md)\n - [retain_hash_collection](retain-hash-collection.md)\n+- [reverse_cmp_key](reverse-cmp-key.md)\n - [rt](rt.md)\n - [rustc_attrs](rustc-attrs.md)\n - [rustc_diagnostic_macros](rustc-diagnostic-macros.md)\n - [rustc_private](rustc-private.md)\n-- [rustdoc](rustdoc.md)\n - [rvalue_static_promotion](rvalue-static-promotion.md)\n - [sanitizer_runtime](sanitizer-runtime.md)\n - [sanitizer_runtime_lib](sanitizer-runtime-lib.md)\n@@ -181,6 +180,7 @@\n - [step_by](step-by.md)\n - [step_trait](step-trait.md)\n - [stmt_expr_attributes](stmt-expr-attributes.md)\n+- [str_checked_slicing](str-checked-slicing.md)\n - [str_escape](str-escape.md)\n - [str_internals](str-internals.md)\n - [struct_field_attributes](struct-field-attributes.md)"}, {"sha": "6b1e88b8603014a9c5bceb76c3d0088ce46098fd", "filename": "src/doc/unstable-book/src/pub-restricted.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9329d3aa3974cfe7fda57a67b3898434f410131/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9329d3aa3974cfe7fda57a67b3898434f410131/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md?ref=a9329d3aa3974cfe7fda57a67b3898434f410131", "patch": "@@ -1,7 +0,0 @@\n-# `pub_restricted`\n-\n-The tracking issue for this feature is: [#32409]\n-\n-[#38356]: https://github.com/rust-lang/rust/issues/32409\n-\n-------------------------"}, {"sha": "a1a851d6ed6328847bcc9c9a130df9ebe4ff74f1", "filename": "src/doc/unstable-book/src/reverse-cmp-key.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2Freverse-cmp-key.md", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2Freverse-cmp-key.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Freverse-cmp-key.md?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -0,0 +1,7 @@\n+# `reverse_cmp_key`\n+\n+The tracking issue for this feature is: [#40893]\n+\n+[#40893]: https://github.com/rust-lang/rust/issues/40893\n+\n+------------------------"}, {"sha": "c7491ab034bffd9e7aaf0d6689a9fa1bd1817e7f", "filename": "src/doc/unstable-book/src/rustdoc.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9329d3aa3974cfe7fda57a67b3898434f410131/src%2Fdoc%2Funstable-book%2Fsrc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9329d3aa3974cfe7fda57a67b3898434f410131/src%2Fdoc%2Funstable-book%2Fsrc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustdoc.md?ref=a9329d3aa3974cfe7fda57a67b3898434f410131", "patch": "@@ -1,7 +0,0 @@\n-# `rustdoc`\n-\n-The tracking issue for this feature is: [#27812]\n-\n-[#27812]: https://github.com/rust-lang/rust/issues/27812\n-\n-------------------------"}, {"sha": "efc380df6e1194e1de0fa7183b81b39b604a6968", "filename": "src/doc/unstable-book/src/specialization.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -2,6 +2,8 @@\n \n The tracking issue for this feature is: [#31844]\n \n+[#31844]: https://github.com/rust-lang/rust/issues/31844\n+\n ------------------------\n \n "}, {"sha": "d390139a6befaef8024cbac2fe7fefa32417264f", "filename": "src/doc/unstable-book/src/str-checked-slicing.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-checked-slicing.md", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-checked-slicing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstr-checked-slicing.md?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -0,0 +1,7 @@\n+# `str_checked_slicing`\n+\n+The tracking issue for this feature is: [#39932]\n+\n+[#39932]: https://github.com/rust-lang/rust/issues/39932\n+\n+------------------------"}, {"sha": "74ded948b18e74a8dad5126880f24bea19585372", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -347,6 +347,15 @@ impl<T: PartialOrd> PartialOrd for Reverse<T> {\n     fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n         other.0.partial_cmp(&self.0)\n     }\n+\n+    #[inline]\n+    fn lt(&self, other: &Self) -> bool { other.0 < self.0 }\n+    #[inline]\n+    fn le(&self, other: &Self) -> bool { other.0 <= self.0 }\n+    #[inline]\n+    fn ge(&self, other: &Self) -> bool { other.0 >= self.0 }\n+    #[inline]\n+    fn gt(&self, other: &Self) -> bool { other.0 > self.0 }\n }\n \n #[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]"}, {"sha": "2a28d108df77d168332424977fe3328b73d0fdd2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -337,27 +337,20 @@ macro_rules! try {\n \n /// Write formatted data into a buffer\n ///\n-/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n-/// list of arguments to format.\n+/// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n+/// formatted according to the specified format string and the result will be passed to the writer.\n+/// The writer may be any value with a `write_fmt` method; generally this comes from an\n+/// implementation of either the [`std::fmt::Write`] or the [`std::io::Write`] trait. The macro\n+/// returns whatever the 'write_fmt' method returns; commonly a [`std::fmt::Result`], or an\n+/// [`io::Result`].\n ///\n-/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n-/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n-/// these two traits.\n+/// See [`std::fmt`] for more information on the format string syntax.\n ///\n-/// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer.\n-///\n-/// See [`std::fmt`][fmt] for more information on format syntax.\n-///\n-/// `write!` returns whatever the 'write_fmt' method returns.\n-///\n-/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n-///\n-/// [fmt]: ../std/fmt/index.html\n-/// [fmt_write]: ../std/fmt/trait.Write.html\n-/// [io_write]: ../std/io/trait.Write.html\n-/// [fmt_result]: ../std/fmt/type.Result.html\n-/// [io_result]: ../std/io/type.Result.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n+/// [`std::fmt::Write`]: ../std/fmt/trait.Write.html\n+/// [`std::io::Write`]: ../std/io/trait.Write.html\n+/// [`std::fmt::Result`]: ../std/fmt/type.Result.html\n+/// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -396,27 +389,12 @@ macro_rules! write {\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro accepts a 'writer' (any value with a `write_fmt` method), a format string, and a\n-/// list of arguments to format.\n-///\n-/// The `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write]\n-/// or [`std::io::Write`][io_write] traits. The term 'writer' refers to an implementation of one of\n-/// these two traits.\n-///\n-/// Passed arguments will be formatted according to the specified format string and the resulting\n-/// string will be passed to the writer, along with the appended newline.\n-///\n-/// See [`std::fmt`][fmt] for more information on format syntax.\n-///\n-/// `write!` returns whatever the 'write_fmt' method returns.\n+/// For more information, see [`write!`]. For information on the format string syntax, see\n+/// [`std::fmt`].\n ///\n-/// Common return values include: [`fmt::Result`][fmt_result], [`io::Result`][io_result]\n+/// [`write!`]: macro.write.html\n+/// [`std::fmt`]: ../std/fmt/index.html\n ///\n-/// [fmt]: ../std/fmt/index.html\n-/// [fmt_write]: ../std/fmt/trait.Write.html\n-/// [io_write]: ../std/io/trait.Write.html\n-/// [fmt_result]: ../std/fmt/type.Result.html\n-/// [io_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}, {"sha": "a10f52e2d4cc06457553dbb5d59a2a15f7dad5bc", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -288,6 +288,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn consume_body(&mut self, body: &hir::Body) {\n+        debug!(\"consume_body(body={:?})\", body);\n+\n         for arg in &body.arguments {\n             let arg_ty = return_if_err!(self.mc.infcx.node_ty(arg.pat.id));\n "}, {"sha": "d6033a69da78649401f815bfd9e903b4d58ace03", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -54,7 +54,7 @@ r##\"<!DOCTYPE html>\n     {favicon}\n     {in_header}\n </head>\n-<body class=\"rustdoc\">\n+<body class=\"rustdoc {css_class}\">\n     <!--[if lte IE 8]>\n     <div class=\"warning\">\n         This old browser is unsupported and will most likely display funky\n@@ -80,7 +80,7 @@ r##\"<!DOCTYPE html>\n         </form>\n     </nav>\n \n-    <section id='main' class=\"content {css_class}\">{content}</section>\n+    <section id='main' class=\"content\">{content}</section>\n     <section id='search' class=\"content hidden\"></section>\n \n     <section class=\"footer\"></section>"}, {"sha": "4edf6309346ac129e5870f7ccbbc21a9ce2235ec", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -141,15 +141,15 @@ pre {\n \tpadding: 14px;\n }\n \n-.source pre {\n+.source .content pre {\n \tpadding: 20px;\n }\n \n img {\n \tmax-width: 100%;\n }\n \n-.content.source {\n+.source .content {\n \tmargin-top: 50px;\n \tmax-width: none;\n \toverflow: visible;\n@@ -231,7 +231,7 @@ nav.sub {\n \tpadding: 15px 0;\n }\n \n-.content.source pre.rust {\n+.source .content pre.rust {\n \twhite-space: pre;\n \toverflow: auto;\n \tpadding-left: 0;"}, {"sha": "c03101990885a4cb1752064077e307a815324f93", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -45,6 +45,10 @@ pre {\n \tbackground-color: #fff;\n }\n \n+.source .sidebar {\n+\tbackground-color: #fff;\n+}\n+\n .sidebar .location {\n \tborder-color: #000;\n \tbackground-color: #fff;"}, {"sha": "7ebda5ed744fdd49763c821218dcee916ed6c5f5", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -34,36 +34,55 @@ pub trait MetadataExt {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n \n+    /// Returns the device ID on which this file resides.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_dev(&self) -> u64;\n+    /// Returns the inode number.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ino(&self) -> u64;\n+    /// Returns the file type and mode.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mode(&self) -> u32;\n+    /// Returns the number of hard links to file.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_nlink(&self) -> u64;\n+    /// Returns the user ID of the file owner.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_uid(&self) -> u32;\n+    /// Returns the group ID of the file owner.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_gid(&self) -> u32;\n+    /// Returns the device ID that this file represents. Only relevant for special file.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_rdev(&self) -> u64;\n+    /// Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n+    ///\n+    /// The size of a symbolic link is the length of the pathname it contains,\n+    /// without a terminating null byte.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_size(&self) -> u64;\n+    /// Returns the last access time.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime(&self) -> i64;\n+    /// Returns the last access time, nano seconds part.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime_nsec(&self) -> i64;\n+    /// Returns the last modification time.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime(&self) -> i64;\n+    /// Returns the last modification time, nano seconds part.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime_nsec(&self) -> i64;\n+    /// Returns the last status change time.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime(&self) -> i64;\n+    /// Returns the last status change time, nano seconds part.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime_nsec(&self) -> i64;\n+    /// Returns the \"preferred\" blocksize for efficient filesystem I/O.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blksize(&self) -> u64;\n+    /// Returns the number of blocks allocated to the file, 512-byte units.\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blocks(&self) -> u64;\n }"}, {"sha": "7f1a00c707c20f8ca22ad141ae902cbb55df70e4", "filename": "src/libstd/process.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -1056,6 +1056,20 @@ pub fn exit(code: i32) -> ! {\n /// will be run. If a clean shutdown is needed it is recommended to only call\n /// this function at a known point where there are no more destructors left\n /// to run.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::process;\n+///\n+/// fn main() {\n+///     println!(\"aborting\");\n+///\n+///     process::abort();\n+///\n+///     // execution never gets here\n+/// }\n+/// ```\n #[stable(feature = \"process_abort\", since = \"1.17.0\")]\n pub fn abort() -> ! {\n     unsafe { ::sys::abort_internal() };"}, {"sha": "75aa72e3cff8c5cddc85c5cd47dcad13c0d44436", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -72,6 +72,13 @@ pub trait IntoRawFd {\n     fn into_raw_fd(self) -> RawFd;\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRawFd for RawFd {\n+    fn as_raw_fd(&self) -> RawFd {\n+        *self\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for fs::File {\n     fn as_raw_fd(&self) -> RawFd {\n@@ -84,6 +91,14 @@ impl FromRawFd for fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n+\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+impl IntoRawFd for RawFd {\n+    fn into_raw_fd(self) -> RawFd {\n+        self\n+    }\n+}\n+\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for fs::File {\n     fn into_raw_fd(self) -> RawFd {"}, {"sha": "5db2ad83a0a7a50c512ec617dab95e2da8fe42ac", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private, rustdoc)]\n+#![feature(rustc_private)]\n \n extern crate syntax;\n extern crate rustdoc;"}, {"sha": "371922c9e6bb22ddd4e05389a7bb6a435b825112", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -4,3 +4,4 @@ version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n \n [dependencies]\n+regex = \"0.2\"\n\\ No newline at end of file"}, {"sha": "e1fdc19c27d2585a902cd19bfcd203707fd809de", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 81, "deletions": 69, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -24,8 +24,8 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;\n \n-#[derive(PartialEq)]\n-enum Status {\n+#[derive(Debug, PartialEq)]\n+pub enum Status {\n     Stable,\n     Removed,\n     Unstable,\n@@ -42,78 +42,21 @@ impl fmt::Display for Status {\n     }\n }\n \n-struct Feature {\n-    level: Status,\n-    since: String,\n-    has_gate_test: bool,\n+#[derive(Debug)]\n+pub struct Feature {\n+    pub level: Status,\n+    pub since: String,\n+    pub has_gate_test: bool,\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    let mut features = collect_lang_features(&path.join(\"libsyntax/feature_gate.rs\"));\n+    let mut features = collect_lang_features(path);\n     assert!(!features.is_empty());\n-    let mut lib_features = HashMap::<String, Feature>::new();\n-\n-    let mut contents = String::new();\n-    super::walk(path,\n-                &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n-                &mut |file| {\n-        let filename = file.file_name().unwrap().to_string_lossy();\n-        if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n-           filename == \"diagnostic_list.rs\" {\n-            return;\n-        }\n-\n-        contents.truncate(0);\n-        t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n \n-        for (i, line) in contents.lines().enumerate() {\n-            let mut err = |msg: &str| {\n-                println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n-                *bad = true;\n-            };\n-            let level = if line.contains(\"[unstable(\") {\n-                Status::Unstable\n-            } else if line.contains(\"[stable(\") {\n-                Status::Stable\n-            } else {\n-                continue;\n-            };\n-            let feature_name = match find_attr_val(line, \"feature\") {\n-                Some(name) => name,\n-                None => {\n-                    err(\"malformed stability attribute\");\n-                    continue;\n-                }\n-            };\n-            let since = match find_attr_val(line, \"since\") {\n-                Some(name) => name,\n-                None if level == Status::Stable => {\n-                    err(\"malformed stability attribute\");\n-                    continue;\n-                }\n-                None => \"None\",\n-            };\n+    let lib_features = collect_lib_features(path, bad, &features);\n+    assert!(!lib_features.is_empty());\n \n-            if features.contains_key(feature_name) {\n-                err(\"duplicating a lang feature\");\n-            }\n-            if let Some(ref s) = lib_features.get(feature_name) {\n-                if s.level != level {\n-                    err(\"different stability level than before\");\n-                }\n-                if s.since != since {\n-                    err(\"different `since` than before\");\n-                }\n-                continue;\n-            }\n-            lib_features.insert(feature_name.to_owned(),\n-                                Feature {\n-                                    level: level,\n-                                    since: since.to_owned(),\n-                                    has_gate_test: false,\n-                                });\n-        }\n-    });\n+    let mut contents = String::new();\n \n     super::walk_many(&[&path.join(\"test/compile-fail\"),\n                        &path.join(\"test/compile-fail-fulldeps\"),\n@@ -233,8 +176,9 @@ fn test_filen_gate(filen_underscore: &str,\n     return false;\n }\n \n-fn collect_lang_features(path: &Path) -> HashMap<String, Feature> {\n+pub fn collect_lang_features(base_src_path: &Path) -> HashMap<String, Feature> {\n     let mut contents = String::new();\n+    let path = base_src_path.join(\"libsyntax/feature_gate.rs\");\n     t!(t!(File::open(path)).read_to_string(&mut contents));\n \n     contents.lines()\n@@ -257,3 +201,71 @@ fn collect_lang_features(path: &Path) -> HashMap<String, Feature> {\n         })\n         .collect()\n }\n+\n+pub fn collect_lib_features(base_src_path: &Path,\n+                            bad: &mut bool,\n+                            features: &HashMap<String, Feature>) -> HashMap<String, Feature> {\n+    let mut lib_features = HashMap::<String, Feature>::new();\n+    let mut contents = String::new();\n+    super::walk(base_src_path,\n+                &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+                &mut |file| {\n+        let filename = file.file_name().unwrap().to_string_lossy();\n+        if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n+           filename == \"diagnostic_list.rs\" {\n+            return;\n+        }\n+\n+        contents.truncate(0);\n+        t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n+\n+        for (i, line) in contents.lines().enumerate() {\n+            let mut err = |msg: &str| {\n+                println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n+                *bad = true;\n+            };\n+            let level = if line.contains(\"[unstable(\") {\n+                Status::Unstable\n+            } else if line.contains(\"[stable(\") {\n+                Status::Stable\n+            } else {\n+                continue;\n+            };\n+            let feature_name = match find_attr_val(line, \"feature\") {\n+                Some(name) => name,\n+                None => {\n+                    err(\"malformed stability attribute\");\n+                    continue;\n+                }\n+            };\n+            let since = match find_attr_val(line, \"since\") {\n+                Some(name) => name,\n+                None if level == Status::Stable => {\n+                    err(\"malformed stability attribute\");\n+                    continue;\n+                }\n+                None => \"None\",\n+            };\n+\n+            if features.contains_key(feature_name) {\n+                err(\"duplicating a lang feature\");\n+            }\n+            if let Some(ref s) = lib_features.get(feature_name) {\n+                if s.level != level {\n+                    err(\"different stability level than before\");\n+                }\n+                if s.since != since {\n+                    err(\"different `since` than before\");\n+                }\n+                continue;\n+            }\n+            lib_features.insert(feature_name.to_owned(),\n+                                Feature {\n+                                    level: level,\n+                                    since: since.to_owned(),\n+                                    has_gate_test: false,\n+                                });\n+        }\n+    });\n+    lib_features\n+}\n\\ No newline at end of file"}, {"sha": "501e35e03e8a70e971fb827c2155304e54045911", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -14,6 +14,8 @@\n //! etc. This is run by default on `make check` and as part of the auto\n //! builders.\n \n+extern crate regex;\n+\n use std::fs;\n use std::path::{PathBuf, Path};\n use std::env;\n@@ -37,6 +39,7 @@ mod features;\n mod cargo;\n mod pal;\n mod deps;\n+mod unstable_book;\n \n fn main() {\n     let path = env::args_os().skip(1).next().expect(\"need an argument\");\n@@ -51,6 +54,7 @@ fn main() {\n     cargo::check(&path, &mut bad);\n     features::check(&path, &mut bad);\n     pal::check(&path, &mut bad);\n+    unstable_book::check(&path, &mut bad);\n     if !args.iter().any(|s| *s == \"--no-vendor\") {\n         deps::check(&path, &mut bad);\n     }"}, {"sha": "c10e31077944f0950e496115e7a5864444573832", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40feadb966f825de7aa54a3138416c906b60f54a/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=40feadb966f825de7aa54a3138416c906b60f54a", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::HashSet;\n+use std::fs;\n+use std::io::{self, BufRead, Write};\n+use std::path;\n+use features::{collect_lang_features, collect_lib_features, Status};\n+\n+const PATH_STR: &'static str = \"doc/unstable-book/src\";\n+\n+const SUMMARY_FILE_NAME: &'static str = \"SUMMARY.md\";\n+\n+static EXCLUDE: &'static [&'static str; 2] = &[SUMMARY_FILE_NAME, \"the-unstable-book.md\"];\n+\n+/// Build the path to the Unstable Book source directory from the Rust 'src' directory\n+fn unstable_book_path(base_src_path: &path::Path) -> path::PathBuf {\n+    base_src_path.join(PATH_STR)\n+}\n+\n+/// Build the path to the Unstable Book SUMMARY file from the Rust 'src' directory\n+fn unstable_book_summary_path(base_src_path: &path::Path) -> path::PathBuf {\n+    unstable_book_path(base_src_path).join(SUMMARY_FILE_NAME)\n+}\n+\n+/// Open the Unstable Book SUMMARY file\n+fn open_unstable_book_summary_file(base_src_path: &path::Path) -> fs::File {\n+    fs::File::open(unstable_book_summary_path(base_src_path))\n+        .expect(\"could not open Unstable Book SUMMARY.md\")\n+}\n+\n+/// Test to determine if DirEntry is a file\n+fn dir_entry_is_file(dir_entry: &fs::DirEntry) -> bool {\n+    dir_entry.file_type().expect(\"could not determine file type of directory entry\").is_file()\n+}\n+\n+/// Retrieve names of all lang-related unstable features\n+fn collect_unstable_lang_feature_names(base_src_path: &path::Path) -> HashSet<String> {\n+    collect_lang_features(base_src_path)\n+        .into_iter()\n+        .filter(|&(_, ref f)| f.level == Status::Unstable)\n+        .map(|(ref name, _)| name.to_owned())\n+        .collect()\n+}\n+\n+/// Retrieve names of all lib-related unstable features\n+fn collect_unstable_lib_feature_names(base_src_path: &path::Path) -> HashSet<String> {\n+    let mut bad = true;\n+    let lang_features = collect_lang_features(base_src_path);\n+    collect_lib_features(base_src_path, &mut bad, &lang_features)\n+        .into_iter()\n+        .filter(|&(_, ref f)| f.level == Status::Unstable)\n+        .map(|(ref name, _)| name.to_owned())\n+        .collect()\n+}\n+\n+/// Retrieve names of all unstable features\n+fn collect_unstable_feature_names(base_src_path: &path::Path) -> HashSet<String> {\n+    collect_unstable_lib_feature_names(base_src_path)\n+        .union(&collect_unstable_lang_feature_names(base_src_path))\n+        .map(|n| n.to_owned())\n+        .collect::<HashSet<_, _>>()\n+}\n+\n+/// Retrieve file names of all sections in the Unstable Book with:\n+///\n+/// * hyphens replaced by underscores\n+/// * the markdown suffix ('.md') removed\n+fn collect_unstable_book_section_file_names(base_src_path: &path::Path) -> HashSet<String> {\n+    fs::read_dir(unstable_book_path(base_src_path))\n+        .expect(\"could not read directory\")\n+        .into_iter()\n+        .map(|entry| entry.expect(\"could not read directory entry\"))\n+        .filter(dir_entry_is_file)\n+        .map(|entry| entry.file_name().into_string().unwrap())\n+        .filter(|n| EXCLUDE.iter().all(|e| n != e))\n+        .map(|n| n.trim_right_matches(\".md\").replace('-', \"_\"))\n+        .collect()\n+}\n+\n+/// Retrieve unstable feature names that are in the Unstable Book SUMMARY file\n+fn collect_unstable_book_summary_links(base_src_path: &path::Path) -> HashSet<String> {\n+    let summary_link_regex =\n+        ::regex::Regex::new(r\"^- \\[(\\S+)\\]\\(\\S+\\.md\\)\").expect(\"invalid regex\");\n+    io::BufReader::new(open_unstable_book_summary_file(base_src_path))\n+        .lines()\n+        .map(|l| l.expect(\"could not read line from file\"))\n+        .filter_map(|line| {\n+            summary_link_regex.captures(&line).map(|c| {\n+                                                       c.get(1)\n+                                                           .unwrap()\n+                                                           .as_str()\n+                                                           .to_owned()\n+                                                   })\n+        })\n+        .collect()\n+}\n+\n+pub fn check(path: &path::Path, bad: &mut bool) {\n+    let unstable_feature_names = collect_unstable_feature_names(path);\n+    let unstable_book_section_file_names = collect_unstable_book_section_file_names(path);\n+    let unstable_book_links = collect_unstable_book_summary_links(path);\n+\n+    // Check for Unstable Book section names with no corresponding SUMMARY.md link\n+    for feature_name in &unstable_book_section_file_names - &unstable_book_links {\n+        *bad = true;\n+        writeln!(io::stderr(),\n+                 \"The Unstable Book section '{}' needs to have a link in SUMMARY.md\",\n+                 feature_name)\n+                .expect(\"could not write to stderr\")\n+    }\n+\n+    // Check for unstable features that don't have Unstable Book sections\n+    for feature_name in &unstable_feature_names - &unstable_book_section_file_names {\n+        *bad = true;\n+        writeln!(io::stderr(),\n+                 \"Unstable feature '{}' needs to have a section in The Unstable Book\",\n+                 feature_name)\n+                .expect(\"could not write to stderr\")\n+    }\n+\n+    // Check for Unstable Book sections that don't have a corresponding unstable feature\n+    for feature_name in &unstable_book_section_file_names - &unstable_feature_names {\n+        *bad = true;\n+        writeln!(io::stderr(),\n+                 \"The Unstable Book has a section '{}' which doesn't correspond \\\n+                  to an unstable feature\",\n+                 feature_name)\n+                .expect(\"could not write to stderr\")\n+    }\n+}"}]}