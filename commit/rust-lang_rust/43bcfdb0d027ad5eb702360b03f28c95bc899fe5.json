{"sha": "43bcfdb0d027ad5eb702360b03f28c95bc899fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYmNmZGIwZDAyN2FkNWViNzAyMzYwYjAzZjI4Yzk1YmM4OTlmZTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-02T12:23:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T12:23:19Z"}, "message": "Rollup merge of #82597 - noslaver:fix-82137, r=nagisa\n\nGet TyCtxt from self instead of passing as argument in AutoTraitFinder\n\nFirst contribution :crab:, let me know if anything is amiss.\n\nFix #82137.", "tree": {"sha": "e6c681a8d675badf6f90fe7ada147957650b0d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6c681a8d675badf6f90fe7ada147957650b0d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43bcfdb0d027ad5eb702360b03f28c95bc899fe5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPi43CRBK7hj4Ov3rIwAAdHIIAKs0K7xYKpoJo3Vub8ZgNhOs\n4c5YND1cXLsKMX3qFxLfzbtMuuV20Ze4RxboMG+3GRiQdyE+vkbNU4n03+Ih4zOi\nCHjTYmGt5dGOknSs3tVU3kQp+Hhpj2A+RUsbhE5Xbw0mNzp9stGvZNRvlXPTSHOc\nkJ/a9OXBrhY4slK1XIdnGoW9la3M0fXh/1yCTFj6e54wm7xAlWcQOGp02SBC8Wdi\njwJYmLqMxpu+p6JL3z4ykTMkd5fUWOc/gcA81eva2M11BBU7wW5EECLi4R/0Xfz+\n2LZALVXarSvzAFDMSc5JaxKTUa8VAMYgXpRlxaGRWhpqHYoWFDAWm2vG/3g5p7A=\n=EbSB\n-----END PGP SIGNATURE-----\n", "payload": "tree e6c681a8d675badf6f90fe7ada147957650b0d5e\nparent 543ef7f13c03c495d31b42dde32c7ddce0d2fb15\nparent 854fffde5d491e5a6faddcda99b2a2f36801c71f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614687799 +0900\ncommitter GitHub <noreply@github.com> 1614687799 +0900\n\nRollup merge of #82597 - noslaver:fix-82137, r=nagisa\n\nGet TyCtxt from self instead of passing as argument in AutoTraitFinder\n\nFirst contribution :crab:, let me know if anything is amiss.\n\nFix #82137.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43bcfdb0d027ad5eb702360b03f28c95bc899fe5", "html_url": "https://github.com/rust-lang/rust/commit/43bcfdb0d027ad5eb702360b03f28c95bc899fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43bcfdb0d027ad5eb702360b03f28c95bc899fe5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543ef7f13c03c495d31b42dde32c7ddce0d2fb15", "url": "https://api.github.com/repos/rust-lang/rust/commits/543ef7f13c03c495d31b42dde32c7ddce0d2fb15", "html_url": "https://github.com/rust-lang/rust/commit/543ef7f13c03c495d31b42dde32c7ddce0d2fb15"}, {"sha": "854fffde5d491e5a6faddcda99b2a2f36801c71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/854fffde5d491e5a6faddcda99b2a2f36801c71f", "html_url": "https://github.com/rust-lang/rust/commit/854fffde5d491e5a6faddcda99b2a2f36801c71f"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "6510c9464e145d189544b0ae00b6ce1f8faadb3d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43bcfdb0d027ad5eb702360b03f28c95bc899fe5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bcfdb0d027ad5eb702360b03f28c95bc899fe5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=43bcfdb0d027ad5eb702360b03f28c95bc899fe5", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         ty: Ty<'tcx>,\n         orig_env: ty::ParamEnv<'tcx>,\n         trait_did: DefId,\n-        mut auto_trait_callback: impl FnMut(&InferCtxt<'_, 'tcx>, AutoTraitInfo<'tcx>) -> A,\n+        mut auto_trait_callback: impl FnMut(AutoTraitInfo<'tcx>) -> A,\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n@@ -211,7 +211,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             let info = AutoTraitInfo { full_user_env, region_data, vid_to_region };\n \n-            AutoTraitResult::PositiveImpl(auto_trait_callback(&infcx, info))\n+            AutoTraitResult::PositiveImpl(auto_trait_callback(info))\n         })\n     }\n }"}, {"sha": "d0e058c7dda7556d746e7a85815b7d5442c8c379", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/43bcfdb0d027ad5eb702360b03f28c95bc899fe5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bcfdb0d027ad5eb702360b03f28c95bc899fe5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=43bcfdb0d027ad5eb702360b03f28c95bc899fe5", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             return None;\n         }\n \n-        let result = f.find_auto_trait_generics(ty, param_env, trait_def_id, |infcx, info| {\n+        let result = f.find_auto_trait_generics(ty, param_env, trait_def_id, |info| {\n             let region_data = info.region_data;\n \n             let names_map = tcx\n@@ -61,7 +61,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .collect();\n             let lifetime_predicates = Self::handle_lifetimes(&region_data, &names_map);\n             let new_generics = self.param_env_to_generics(\n-                infcx.tcx,\n                 item_def_id,\n                 info.full_user_env,\n                 lifetime_predicates,\n@@ -313,12 +312,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         lifetime_predicates\n     }\n \n-    fn extract_for_generics(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        pred: ty::Predicate<'tcx>,\n-    ) -> FxHashSet<GenericParamDef> {\n+    fn extract_for_generics(&self, pred: ty::Predicate<'tcx>) -> FxHashSet<GenericParamDef> {\n         let bound_predicate = pred.kind();\n+        let tcx = self.cx.tcx;\n         let regions = match bound_predicate.skip_binder() {\n             ty::PredicateKind::Trait(poly_trait_pred, _) => {\n                 tcx.collect_referenced_late_bound_regions(&bound_predicate.rebind(poly_trait_pred))\n@@ -443,7 +439,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // * We explicitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n     fn param_env_to_generics(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n         item_def_id: DefId,\n         param_env: ty::ParamEnv<'tcx>,\n         mut existing_predicates: Vec<WherePredicate>,\n@@ -455,14 +450,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             item_def_id, param_env, existing_predicates\n         );\n \n+        let tcx = self.cx.tcx;\n+\n         // The `Sized` trait must be handled specially, since we only display it when\n         // it is *not* required (i.e., '?Sized')\n-        let sized_trait = self.cx.tcx.require_lang_item(LangItem::Sized, None);\n+        let sized_trait = tcx.require_lang_item(LangItem::Sized, None);\n \n         let mut replacer = RegionReplacer { vid_to_region: &vid_to_region, tcx };\n \n-        let orig_bounds: FxHashSet<_> =\n-            self.cx.tcx.param_env(item_def_id).caller_bounds().iter().collect();\n+        let orig_bounds: FxHashSet<_> = tcx.param_env(item_def_id).caller_bounds().iter().collect();\n         let clean_where_predicates = param_env\n             .caller_bounds()\n             .iter()\n@@ -512,7 +508,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    let mut for_generics = self.extract_for_generics(tcx, orig_p);\n+                    let mut for_generics = self.extract_for_generics(orig_p);\n \n                     assert!(bounds.len() == 1);\n                     let mut b = bounds.pop().expect(\"bounds were empty\");\n@@ -541,7 +537,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 // that we don't end up with duplicate bounds (e.g., for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n                                 p.generic_params = for_generics.into_iter().collect();\n-                                self.is_fn_ty(tcx, &p.trait_)\n+                                self.is_fn_ty(&p.trait_)\n                             }\n                             _ => false,\n                         };\n@@ -576,7 +572,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 } => {\n                                     let mut new_trait_path = trait_path.clone();\n \n-                                    if self.is_fn_ty(tcx, trait_) && left_name == sym::Output {\n+                                    if self.is_fn_ty(trait_) && left_name == sym::Output {\n                                         ty_to_fn\n                                             .entry(*ty.clone())\n                                             .and_modify(|e| *e = (e.0.clone(), Some(rhs.clone())))\n@@ -734,7 +730,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n-    fn is_fn_ty(&self, tcx: TyCtxt<'_>, ty: &Type) -> bool {\n+    fn is_fn_ty(&self, ty: &Type) -> bool {\n+        let tcx = self.cx.tcx;\n         match ty {\n             &Type::ResolvedPath { did, .. } => {\n                 did == tcx.require_lang_item(LangItem::Fn, None)"}]}