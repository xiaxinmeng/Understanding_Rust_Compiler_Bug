{"sha": "9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2MwN2M5YjJkZjNjZjg4MjIzZDk3ZGRlYTk1YTYxYTU0OGUwOWU=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-18T13:20:32Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-18T13:20:32Z"}, "message": "Add handling for `nullptr` and `size == 0`", "tree": {"sha": "03dc77830b58f3e9ab43f9956d46d3bef68f5e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03dc77830b58f3e9ab43f9956d46d3bef68f5e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEELQoiL21itfwzY62qWM12+I31Y+AFAly4eaAACgkQWM12+I31\nY+BxUwf/TA8JNCmB3RJ+Su+iwqJVsp2yP3I9gr7VXLnGupL68ATbvWz/mao5ZA/Q\njXQi69PNlQsVKPgFoOKNA2sn9lTtF5gUvJEOoIuIBQTEBH+zFp7a3uTMCWMxybW/\nfH/miVU7RlOZV2cZ/wJR2kSaYz0agOcgm5NJor6DQF6vCGvQ/krzgg89zaoZ5rq9\nNsYj+vHk8gAPYiRC9Fwdy7OPpUY7XhR5E2+XytA+1ouImE68eKq+8w4CRjheXUhV\nd9mj/UwFpzBLNxNsE6e6nBqjDvtPYVHL5CCye+LEAelPkGtyYo1bke0APaSrj0hU\nnHDGlhKwmDbXYNsipCIHfJMyURRAbg==\n=v1Hx\n-----END PGP SIGNATURE-----", "payload": "tree 03dc77830b58f3e9ab43f9956d46d3bef68f5e57\nparent afb64232dbc30047e001c1a24abc9de485b78d04\nauthor Tim Diekmann <tim.diekmann@3dvision.de> 1555593632 +0200\ncommitter Tim Diekmann <tim.diekmann@3dvision.de> 1555593632 +0200\n\nAdd handling for `nullptr` and `size == 0`\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "html_url": "https://github.com/rust-lang/rust/commit/9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecc07c9b2df3cf88223d97ddea95a61a548e09e/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb64232dbc30047e001c1a24abc9de485b78d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb64232dbc30047e001c1a24abc9de485b78d04", "html_url": "https://github.com/rust-lang/rust/commit/afb64232dbc30047e001c1a24abc9de485b78d04"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "ae6aff10ac209728a85fb244e787fd19cf757709", "filename": "src/fn_call.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc07c9b2df3cf88223d97ddea95a61a548e09e/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc07c9b2df3cf88223d97ddea95a61a548e09e/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "patch": "@@ -147,22 +147,44 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                     )?;\n                 }\n             }\n-\n             \"realloc\" => {\n-                let ptr = this.read_scalar(args[0])?.to_ptr()?;\n+                let old_ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let new_size = this.read_scalar(args[1])?.to_usize(this)?;\n                 let align = this.tcx.data_layout.pointer_align.abi;\n-                let memory = this.memory_mut();\n-                let old_size = memory.get(ptr.alloc_id)?.bytes.len();\n-                let new_ptr = memory.reallocate(\n-                    ptr,\n-                    Size::from_bytes(old_size as u64),\n-                    align,\n-                    Size::from_bytes(new_size),\n-                    align,\n-                    MiriMemoryKind::C.into(),\n-                )?;\n-                this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                if old_ptr.is_null_ptr(this) {\n+                    if new_size == 0 {\n+                        this.write_null(dest)?;\n+                    } else {\n+                        let new_ptr = this.memory_mut().allocate(\n+                            Size::from_bytes(new_size),\n+                            align,\n+                            MiriMemoryKind::C.into()\n+                        );\n+                        this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                    }\n+                } else {\n+                    let old_ptr = old_ptr.to_ptr()?;\n+                    let memory = this.memory_mut();\n+                    let old_size = Size::from_bytes(memory.get(old_ptr.alloc_id)?.bytes.len() as u64);\n+                    if new_size == 0 {\n+                        memory.deallocate(\n+                            old_ptr,\n+                            Some((old_size, align)),\n+                            MiriMemoryKind::C.into(),\n+                        )?;\n+                        this.write_null(dest)?;\n+                    } else {\n+                        let new_ptr = memory.reallocate(\n+                            old_ptr,\n+                            old_size,\n+                            align,\n+                            Size::from_bytes(new_size),\n+                            align,\n+                            MiriMemoryKind::C.into(),\n+                        )?;\n+                        this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                    }\n+                }\n             }\n \n             \"__rust_alloc\" => {"}, {"sha": "c23b3e645c70350913de10b72ba54d5602526f8a", "filename": "tests/run-pass/realloc.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc07c9b2df3cf88223d97ddea95a61a548e09e/tests%2Frun-pass%2Frealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc07c9b2df3cf88223d97ddea95a61a548e09e/tests%2Frun-pass%2Frealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frealloc.rs?ref=9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(rustc_private)]\n \n-use core::slice;\n+use core::{slice, ptr};\n \n extern crate libc;\n \n@@ -28,4 +28,18 @@ fn main() {\n \n         libc::free(p4);\n     }\n+\n+    unsafe {\n+        let p1 = libc::malloc(20);\n+\n+        let p2 = libc::realloc(p1, 0);\n+        assert!(p2.is_null());\n+    }\n+\n+    unsafe {\n+        let p1 = libc::realloc(ptr::null_mut(), 20);\n+        assert!(!p1.is_null());\n+\n+        libc::free(p1);\n+    }\n }"}]}