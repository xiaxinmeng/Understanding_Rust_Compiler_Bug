{"sha": "ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "node_id": "C_kwDOAAsO6NoAKGVmNzdkZDIzMmQ3ZWVkOWQ4MmIwNzE5ZDdmYzY4MzkyNGEzZGMyZGU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-27T15:34:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-05-02T14:21:08Z"}, "message": "resolve: One more attempt to simplify `module_children`", "tree": {"sha": "354d62df9952adc6d14207510c14c13d234224ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/354d62df9952adc6d14207510c14c13d234224ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "html_url": "https://github.com/rust-lang/rust/commit/ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c33e47a495fbd7b22bce9ce32f2815991bc414", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c33e47a495fbd7b22bce9ce32f2815991bc414", "html_url": "https://github.com/rust-lang/rust/commit/98c33e47a495fbd7b22bce9ce32f2815991bc414"}], "stats": {"total": 98, "additions": 45, "deletions": 53}, "files": [{"sha": "3253d0a90574455512b9d61b7e99847057d1a1b9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -1364,9 +1364,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         record!(self.tables.params_in_repr[def_id] <- params_in_repr);\n \n         if adt_def.is_enum() {\n-            let module_children = tcx.module_children_non_reexports(local_def_id);\n+            let module_children = tcx.module_children_local(local_def_id);\n             record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                module_children.iter().map(|def_id| def_id.local_def_index));\n+                module_children.iter().map(|child| child.res.def_id().index));\n         } else {\n             // For non-enum, there is only one variant, and its def_id is the adt's.\n             debug_assert_eq!(adt_def.variants().len(), 1);\n@@ -1412,12 +1412,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n-            let non_reexports = tcx.module_children_non_reexports(local_def_id);\n+            let module_children = tcx.module_children_local(local_def_id);\n+\n             record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                non_reexports.iter().map(|def_id| def_id.local_def_index));\n+                module_children.iter().filter(|child| child.reexport_chain.is_empty())\n+                    .map(|child| child.res.def_id().index));\n \n             record_defaulted_array!(self.tables.module_children_reexports[def_id] <-\n-                tcx.module_children_reexports(local_def_id));\n+                module_children.iter().filter(|child| !child.reexport_chain.is_empty()));\n         }\n     }\n \n@@ -1676,9 +1678,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Trait(..) => {\n                 record!(self.tables.trait_def[def_id] <- self.tcx.trait_def(def_id));\n \n-                let module_children = tcx.module_children_non_reexports(item.owner_id.def_id);\n+                let module_children = tcx.module_children_local(item.owner_id.def_id);\n                 record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                    module_children.iter().map(|def_id| def_id.local_def_index));\n+                    module_children.iter().map(|child| child.res.def_id().index));\n \n                 let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);\n                 record_associated_item_def_ids(self, associated_item_def_ids);"}, {"sha": "84f6b7f934dc325bf3101c8a8bef35a8e7dea6c3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -357,10 +357,16 @@ define_tables! {\n     associated_types_for_impl_traits_in_associated_fn: Table<DefIndex, LazyArray<DefId>>,\n     opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n     unused_generic_params: Table<DefIndex, UnusedGenericParams>,\n+    // Reexported names are not associated with individual `DefId`s,\n+    // e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n+    // That's why the encoded list needs to contain `ModChild` structures describing all the names\n+    // individually instead of `DefId`s.\n     module_children_reexports: Table<DefIndex, LazyArray<ModChild>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n+    // For non-reexported names in a module every name is associated with a separate `DefId`,\n+    // so we can take their names, visibilities etc from other encoded tables.\n     module_children_non_reexports: Table<DefIndex, LazyArray<DefIndex>>,\n     associated_item_or_field_def_ids: Table<DefIndex, LazyArray<DefIndex>>,\n     opt_def_kind: Table<DefIndex, DefKind>,"}, {"sha": "bf78b379986d8768f3eeb67795b9365bcc41221a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -2414,26 +2414,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Named module children from all items except `use` and `extern crate` imports.\n-    ///\n-    /// In addition to regular items this list also includes struct or variant constructors, and\n+    /// Named module children from all kinds of items, including imports.\n+    /// In addition to regular items this list also includes struct and variant constructors, and\n     /// items inside `extern {}` blocks because all of them introduce names into parent module.\n-    /// For non-reexported children every such name is associated with a separate `DefId`.\n     ///\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n     /// or a crate root, or an enum, or a trait.\n-    pub fn module_children_non_reexports(self, def_id: LocalDefId) -> &'tcx [LocalDefId] {\n-        self.resolutions(()).module_children_non_reexports.get(&def_id).map_or(&[], |v| &v[..])\n-    }\n-\n-    /// Named module children from `use` and `extern crate` imports.\n     ///\n-    /// Reexported names are not associated with individual `DefId`s,\n-    /// e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n-    /// That's why the list needs to contain `ModChild` structures describing all the names\n-    /// individually instead of `DefId`s.\n-    pub fn module_children_reexports(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n-        self.resolutions(()).module_children_reexports.get(&def_id).map_or(&[], |v| &v[..])\n+    /// This is not a query, making it a query causes perf regressions\n+    /// (probably due to hashing spans in `ModChild`ren).\n+    pub fn module_children_local(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n+        self.resolutions(()).module_children.get(&def_id).map_or(&[], |v| &v[..])\n     }\n }\n "}, {"sha": "8986defacc7ba30699b8e55d44616ac262f26883", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -165,8 +165,7 @@ pub struct ResolverGlobalCtxt {\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    pub module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n-    pub module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n+    pub module_children: LocalDefIdMap<Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     pub main_def: Option<MainDefinition>,\n     pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,"}, {"sha": "7e60870fef0ffb5bbc3c2a45408db2cdbacdf1cf", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -515,9 +515,11 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.local_visibility(item_id.owner_id.def_id);\n             self.update_macro_reachable_def(item_id.owner_id.def_id, def_kind, vis, defining_mod);\n         }\n-        for export in self.tcx.module_children_reexports(module_def_id) {\n-            if export.vis.is_accessible_from(defining_mod, self.tcx)\n-                && let Res::Def(def_kind, def_id) = export.res\n+        for child in self.tcx.module_children_local(module_def_id) {\n+            // FIXME: Use module children for the logic above too.\n+            if !child.reexport_chain.is_empty()\n+                && child.vis.is_accessible_from(defining_mod, self.tcx)\n+                && let Res::Def(def_kind, def_id) = child.res\n                 && let Some(def_id) = def_id.as_local() {\n                 let vis = self.tcx.local_visibility(def_id);\n                 self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);"}, {"sha": "1685468715f158d31272a76c0116497ba07e52ec", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -1261,32 +1261,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         if let Some(def_id) = module.opt_def_id() {\n-            let mut non_reexports = Vec::new();\n-            let mut reexports = Vec::new();\n+            let mut children = Vec::new();\n \n             module.for_each_child(self, |this, ident, _, binding| {\n                 let res = binding.res().expect_non_local();\n-                if !binding.is_import() {\n-                    non_reexports.push(res.def_id().expect_local());\n-                } else if res != def::Res::Err && !binding.is_ambiguity() {\n+                if res != def::Res::Err && !binding.is_ambiguity() {\n                     let mut reexport_chain = SmallVec::new();\n                     let mut next_binding = binding;\n                     while let NameBindingKind::Import { binding, import, .. } = next_binding.kind {\n                         reexport_chain.push(import.simplify(this));\n                         next_binding = binding;\n                     }\n \n-                    reexports.push(ModChild { ident, res, vis: binding.vis, reexport_chain });\n+                    children.push(ModChild { ident, res, vis: binding.vis, reexport_chain });\n                 }\n             });\n \n-            // Should be fine because this code is only called for local modules.\n-            let def_id = def_id.expect_local();\n-            if !non_reexports.is_empty() {\n-                self.module_children_non_reexports.insert(def_id, non_reexports);\n-            }\n-            if !reexports.is_empty() {\n-                self.module_children_reexports.insert(def_id, reexports);\n+            if !children.is_empty() {\n+                // Should be fine because this code is only called for local modules.\n+                self.module_children.insert(def_id.expect_local(), children);\n             }\n         }\n     }"}, {"sha": "e46463579fe4500e83969b53b59bf0e98688e92c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -909,8 +909,7 @@ pub struct Resolver<'a, 'tcx> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n-    module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n+    module_children: LocalDefIdMap<Vec<ModChild>>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1260,8 +1259,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             lifetimes_res_map: Default::default(),\n             extra_lifetime_params_map: Default::default(),\n             extern_crate_map: Default::default(),\n-            module_children_non_reexports: Default::default(),\n-            module_children_reexports: Default::default(),\n+            module_children: Default::default(),\n             trait_map: NodeMap::default(),\n             underscore_disambiguator: 0,\n             empty_module,\n@@ -1399,8 +1397,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             has_pub_restricted,\n             effective_visibilities,\n             extern_crate_map,\n-            module_children_non_reexports: self.module_children_non_reexports,\n-            module_children_reexports: self.module_children_reexports,\n+            module_children: self.module_children,\n             glob_map,\n             maybe_unused_trait_imports,\n             main_def,"}, {"sha": "951f54e93663cc2b2dc13f037e2eeebfdb32664b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -152,8 +152,9 @@ pub(crate) fn try_inline_glob(\n             // reexported by the glob, e.g. because they are shadowed by something else.\n             let reexports = cx\n                 .tcx\n-                .module_children_reexports(current_mod)\n+                .module_children_local(current_mod)\n                 .iter()\n+                .filter(|child| !child.reexport_chain.is_empty())\n                 .filter_map(|child| child.res.opt_def_id())\n                 .collect();\n             let mut items = build_module_items(cx, did, visited, inlined_names, Some(&reexports));"}, {"sha": "f9a46e33f9a8c86fce5b7a69e5cc11336d5cafd6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -2089,9 +2089,9 @@ pub(crate) fn reexport_chain<'tcx>(\n     import_def_id: LocalDefId,\n     target_def_id: LocalDefId,\n ) -> &'tcx [Reexport] {\n-    for child in tcx.module_children_reexports(tcx.local_parent(import_def_id)) {\n+    for child in tcx.module_children_local(tcx.local_parent(import_def_id)) {\n         if child.res.opt_def_id() == Some(target_def_id.to_def_id())\n-            && child.reexport_chain[0].id() == Some(import_def_id.to_def_id())\n+            && child.reexport_chain.first().and_then(|r| r.id()) == Some(import_def_id.to_def_id())\n         {\n             return &child.reexport_chain;\n         }"}, {"sha": "841c7a78b2d4f22b1cc898f0de42af403413017f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef77dd232d7eed9d82b0719d7fc683924a3dc2de/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ef77dd232d7eed9d82b0719d7fc683924a3dc2de", "patch": "@@ -136,14 +136,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_children_reexports(CRATE_DEF_ID) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n+        for child in self.cx.tcx.module_children_local(CRATE_DEF_ID) {\n+            if !child.reexport_chain.is_empty() &&\n+                let Res::Def(DefKind::Macro(_), def_id) = child.res &&\n                 let Some(local_def_id) = def_id.as_local() &&\n                 self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n                 inserted.insert(def_id)\n             {\n-                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n+                let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n             }\n         }\n "}]}