{"sha": "436a90e3d78a81379e36c8acec49e170bb1cd0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNmE5MGUzZDc4YTgxMzc5ZTM2YzhhY2VjNDllMTcwYmIxY2QwZTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-08T22:34:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-09T01:19:26Z"}, "message": "syntax: Stop supporting old impl syntax", "tree": {"sha": "3bb193ca356b02aee650007ac17728c0553bd71b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bb193ca356b02aee650007ac17728c0553bd71b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/436a90e3d78a81379e36c8acec49e170bb1cd0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/436a90e3d78a81379e36c8acec49e170bb1cd0e6", "html_url": "https://github.com/rust-lang/rust/commit/436a90e3d78a81379e36c8acec49e170bb1cd0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/436a90e3d78a81379e36c8acec49e170bb1cd0e6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c9c637d345ca75ffec7583806ebd8b0520e31b", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c9c637d345ca75ffec7583806ebd8b0520e31b", "html_url": "https://github.com/rust-lang/rust/commit/43c9c637d345ca75ffec7583806ebd8b0520e31b"}], "stats": {"total": 71, "additions": 12, "deletions": 59}, "files": [{"sha": "5141c842335be98c5a78e5ef0c7783bf6ca96e26", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 59, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/436a90e3d78a81379e36c8acec49e170bb1cd0e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436a90e3d78a81379e36c8acec49e170bb1cd0e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=436a90e3d78a81379e36c8acec49e170bb1cd0e6", "patch": "@@ -2440,66 +2440,19 @@ class parser {\n             tps = ~[];\n         }\n \n-        let mut ident;\n-        let ty, traits;\n-        if !self.is_keyword(~\"of\") &&\n-                !self.token_is_keyword(~\"of\", self.look_ahead(1)) &&\n-                !self.token_is_keyword(~\"for\", self.look_ahead(1)) &&\n-                self.look_ahead(1) != token::BINOP(token::SLASH) &&\n-                (self.look_ahead(1) != token::LT\n-                 || (self.look_ahead(1) == token::LT && tps.is_not_empty())) {\n-\n-            // This is a new-style impl declaration.\n-            ident = @~\"__extensions__\";     // XXX: clownshoes\n-\n-            // Parse the type.\n-            ty = self.parse_ty(false);\n-\n-            // Parse traits, if necessary.\n-            if self.token == token::COLON {\n-                self.bump();\n-                traits = self.parse_trait_ref_list(token::LBRACE);\n-            } else {\n-                traits = ~[];\n-            }\n-        } else {\n-            self.warn(~\"old-style named impl?\");\n-            let mut ident_old;\n-            if self.token == token::BINOP(token::SLASH) {\n-                self.parse_region_param();\n-                ident_old = none;\n-                tps = self.parse_ty_params();\n-            } else if self.is_keyword(~\"of\") {\n-                ident_old = none;\n-            } else {\n-                ident_old = some(self.parse_ident());\n-                self.parse_region_param();\n-                tps = self.parse_ty_params();\n-            }\n+        // This is a new-style impl declaration.\n+        let ident = @~\"__extensions__\";     // XXX: clownshoes\n \n-            if self.eat_keyword(~\"of\") {\n-                let for_atom = (*self.reader.interner()).intern(@~\"for\");\n-                traits = self.parse_trait_ref_list\n-                    (token::IDENT(for_atom, false));\n-                if traits.len() >= 1 && option::is_none(ident_old) {\n-                    ident_old = some(vec::last(traits[0].path.idents));\n-                }\n-                if traits.len() == 0 {\n-                    self.fatal(~\"BUG: 'of' but no trait\");\n-                }\n-                if traits.len() > 1 {\n-                    self.fatal(~\"BUG: multiple traits\");\n-                }\n-            } else {\n-                traits = ~[];\n-            };\n-            ident = match ident_old {\n-              some(name) => name,\n-              none => { self.expect_keyword(~\"of\"); fail; }\n-            };\n-            self.expect_keyword(~\"for\");\n-            ty = self.parse_ty(false);\n-        }\n+        // Parse the type.\n+        let ty = self.parse_ty(false);\n+\n+        // Parse traits, if necessary.\n+        let traits = if self.token == token::COLON {\n+            self.bump();\n+            self.parse_trait_ref_list(token::LBRACE)\n+        } else {\n+            ~[]\n+        };\n \n         let mut meths = ~[];\n         self.expect(token::LBRACE);"}]}