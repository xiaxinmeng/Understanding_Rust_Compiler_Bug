{"sha": "93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzAxYjM5OWIyZDNjYmIwNTZjMWVhYWYxZmJhNDIxNTg1YmIyYmQ=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-19T01:33:17Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-19T01:33:17Z"}, "message": "collections: Clean up feature flags doc examples", "tree": {"sha": "1c12f9068af45e45e27c73dca069e90ab982c41d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c12f9068af45e45e27c73dca069e90ab982c41d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "html_url": "https://github.com/rust-lang/rust/commit/93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a53456628a90ac5c3a4c0be306ec8119a52483e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a53456628a90ac5c3a4c0be306ec8119a52483e", "html_url": "https://github.com/rust-lang/rust/commit/4a53456628a90ac5c3a4c0be306ec8119a52483e"}], "stats": {"total": 40, "additions": 7, "deletions": 33}, "files": [{"sha": "c5de4d3572c0c62c18fd03a76c19f88cc4853a9a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "patch": "@@ -1291,14 +1291,13 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n     /// a.insert(1, \"a\");\n     /// a.insert(2, \"b\");\n     ///\n-    /// let keys: Vec<usize> = a.keys().cloned().collect();\n+    /// let keys: Vec<_> = a.keys().cloned().collect();\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1314,7 +1313,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1555,7 +1553,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut count: BTreeMap<&str, usize> = BTreeMap::new();"}, {"sha": "e9878b96653e4148cdbfeefdf00e47941c571be9", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "patch": "@@ -115,7 +115,6 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n@@ -124,7 +123,7 @@ impl<T> BTreeSet<T> {\n     ///     println!(\"{}\", x);\n     /// }\n     ///\n-    /// let v: Vec<usize> = set.iter().cloned().collect();\n+    /// let v: Vec<_> = set.iter().cloned().collect();\n     /// assert_eq!(v, [1, 2, 3, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -171,7 +170,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -182,7 +180,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// b.insert(2);\n     /// b.insert(3);\n     ///\n-    /// let diff: Vec<usize> = a.difference(&b).cloned().collect();\n+    /// let diff: Vec<_> = a.difference(&b).cloned().collect();\n     /// assert_eq!(diff, [1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -195,7 +193,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -206,7 +203,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// b.insert(2);\n     /// b.insert(3);\n     ///\n-    /// let sym_diff: Vec<usize> = a.symmetric_difference(&b).cloned().collect();\n+    /// let sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();\n     /// assert_eq!(sym_diff, [1, 3]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -220,7 +217,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -231,7 +227,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// b.insert(2);\n     /// b.insert(3);\n     ///\n-    /// let intersection: Vec<usize> = a.intersection(&b).cloned().collect();\n+    /// let intersection: Vec<_> = a.intersection(&b).cloned().collect();\n     /// assert_eq!(intersection, [2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -245,7 +241,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -254,7 +249,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// let mut b = BTreeSet::new();\n     /// b.insert(2);\n     ///\n-    /// let union: Vec<usize> = a.union(&b).cloned().collect();\n+    /// let union: Vec<_> = a.union(&b).cloned().collect();\n     /// assert_eq!(union, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -318,7 +313,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -336,7 +330,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -358,7 +351,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -401,7 +393,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();\n@@ -483,12 +474,11 @@ impl<T> IntoIterator for BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n     ///\n-    /// let v: Vec<usize> = set.into_iter().collect();\n+    /// let v: Vec<_> = set.into_iter().collect();\n     /// assert_eq!(v, [1, 2, 3, 4]);\n     /// ```\n     fn into_iter(self) -> IntoIter<T> {"}, {"sha": "669f05b33ca6c6cd595c6ae379e67eebd935b942", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "patch": "@@ -230,7 +230,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut a = LinkedList::new();\n@@ -473,7 +472,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut dl = LinkedList::new();\n@@ -521,7 +519,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -540,7 +537,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -566,7 +562,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();"}, {"sha": "c0da6331b22115e0bdf98c96d7bca18d331cdd6a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "patch": "@@ -529,7 +529,6 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     ///\n     /// let seek = 13;\n@@ -865,7 +864,6 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n-    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     ///\n     /// assert_eq!(s.binary_search(&13),  Ok(9));"}, {"sha": "80bbe4681e72822356ab3e19d3b48fb0f9d960c8", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93701b399b2d3cbb056c1eaaf1fba421585bb2bd/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=93701b399b2d3cbb056c1eaaf1fba421585bb2bd", "patch": "@@ -247,7 +247,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -275,7 +274,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let buf: VecDeque<i32> = VecDeque::with_capacity(10);\n@@ -299,7 +297,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -321,7 +318,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -508,7 +504,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -533,7 +528,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}]}