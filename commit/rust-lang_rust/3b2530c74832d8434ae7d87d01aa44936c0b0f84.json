{"sha": "3b2530c74832d8434ae7d87d01aa44936c0b0f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMjUzMGM3NDgzMmQ4NDM0YWU3ZDg3ZDAxYWE0NDkzNmMwYjBmODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-17T18:29:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-17T18:29:48Z"}, "message": "Auto merge of #24524 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "ac8d65163d7e0a58b8be2f61a1bc7b41b31abbbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac8d65163d7e0a58b8be2f61a1bc7b41b31abbbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b2530c74832d8434ae7d87d01aa44936c0b0f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2530c74832d8434ae7d87d01aa44936c0b0f84", "html_url": "https://github.com/rust-lang/rust/commit/3b2530c74832d8434ae7d87d01aa44936c0b0f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b2530c74832d8434ae7d87d01aa44936c0b0f84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d2ac9b1e15f2a2c0963060f476d0478be1acdc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2ac9b1e15f2a2c0963060f476d0478be1acdc3", "html_url": "https://github.com/rust-lang/rust/commit/9d2ac9b1e15f2a2c0963060f476d0478be1acdc3"}, {"sha": "c98115cefb1e10b582569404f6142a918f3ccbe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c98115cefb1e10b582569404f6142a918f3ccbe5", "html_url": "https://github.com/rust-lang/rust/commit/c98115cefb1e10b582569404f6142a918f3ccbe5"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "6967532a44735199cbd29c9d532de914ce51b8b4", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -89,7 +89,7 @@ we hadn\u2019t changed the source file, and so it just ran the binary. If we had\n made a modification, we would have seen it do both:\n \n ```bash\n-$ cargo build\n+$ cargo run\n    Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n      Running `target/debug/hello_world`\n Hello, world!"}, {"sha": "6fa5917ea99ba9a01c720357348f618570f90a30", "filename": "src/doc/trpl/vectors.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Fdoc%2Ftrpl%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Fdoc%2Ftrpl%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvectors.md?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -1,13 +1,18 @@\n % Vectors\n \n A *vector* is a dynamic or \"growable\" array, implemented as the standard\n-library type [`Vec<T>`](../std/vec/) (Where `<T>` is a [Generic](./generics.md) statement). Vectors always allocate their data on the heap. Vectors are to slices\n-what `String` is to `&str`. You can create them with the `vec!` macro:\n+library type [`Vec<T>`](../std/vec/) (Where `<T>` is a [Generic](./generics.md)\n+statement). Vectors always allocate their data on the heap. Vectors are to\n+[slices][slices] what [`String`][string] is to `&str`. You can\n+create them with the `vec!` macro:\n \n ```{rust}\n let v = vec![1, 2, 3]; // v: Vec<i32>\n ```\n \n+[slices]: primitive-types.html#slices\n+[string]: strings.html\n+\n (Notice that unlike the `println!` macro we've used in the past, we use square\n brackets `[]` with `vec!`. Rust allows you to use either in either situation,\n this is just convention.)"}, {"sha": "adfbd14121f586270155d387fe4d2ea6c3f59975", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -969,7 +969,7 @@ pub struct RangeFull;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for RangeFull {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(\"..\", fmt)\n+        write!(fmt, \"..\")\n     }\n }\n "}, {"sha": "f7ff8b9e6061a3f6fe5c25250f1079853d30bd89", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -606,6 +606,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"Force overflow checks on or off\"),\n     force_dropflag_checks: Option<bool> = (None, parse_opt_bool,\n           \"Force drop flag checks on or off\"),\n+    trace_macros: bool = (false, parse_bool,\n+          \"For every macro invocation, print its name and arguments\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -667,7 +669,7 @@ pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config {\n         Ok(t) => t,\n         Err(e) => {\n             sp.handler().fatal(&format!(\"Error loading target specification: {}\", e));\n-    }\n+        }\n     };\n \n     let (int_type, uint_type) = match &target.target_pointer_width[..] {"}, {"sha": "a7515293146844f696976b5ec34a7e2a838ee7b1", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -483,6 +483,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 crate_name: crate_name.to_string(),\n                 features: Some(&features),\n                 recursion_limit: sess.recursion_limit.get(),\n+                trace_mac: sess.opts.debugging_opts.trace_macros,\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,"}, {"sha": "3f3f8201b001954522144fbf331590b604589e55", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -1178,7 +1178,6 @@ impl Context {\n     {\n         fn render(w: File, cx: &Context, it: &clean::Item,\n                   pushname: bool) -> io::Result<()> {\n-            info!(\"Rendering an item to {}\", w.path().unwrap().display());\n             // A little unfortunate that this is done like this, but it sure\n             // does make formatting *a lot* nicer.\n             CURRENT_LOCATION_KEY.with(|slot| {"}, {"sha": "e3b429a37d3ee78648383c566b7cf8bed1e26b9e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -32,7 +32,6 @@\n #![feature(test)]\n #![feature(unicode)]\n #![feature(str_words)]\n-#![feature(file_path)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]\n #![feature(slice_patterns)]"}, {"sha": "8af3311c42623fec29c616d3042cf896c5487de5", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -51,7 +51,6 @@ use vec::Vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,\n-    path: Option<PathBuf>,\n }\n \n /// Metadata information about a file.\n@@ -193,12 +192,12 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path)\n     }\n \n-    /// Returns the original path that was used to open this file.\n+    /// Returns `None`.\n     #[unstable(feature = \"file_path\",\n-               reason = \"this abstraction is imposed by this library instead \\\n-                         of the underlying OS and may be removed\")]\n+               reason = \"this abstraction was imposed by this library and was removed\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"abstraction was removed\")]\n     pub fn path(&self) -> Option<&Path> {\n-        self.path.as_ref().map(|p| &**p)\n+        None\n     }\n \n     /// Attempts to sync all OS-internal metadata to disk.\n@@ -302,7 +301,7 @@ impl AsInner<fs_imp::File> for File {\n }\n impl FromInner<fs_imp::File> for File {\n     fn from_inner(f: fs_imp::File) -> File {\n-        File { inner: f, path: None }\n+        File { inner: f }\n     }\n }\n \n@@ -470,7 +469,7 @@ impl OpenOptions {\n     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n         let path = path.as_ref();\n         let inner = try!(fs_imp::File::open(path, &self.0));\n-        Ok(File { path: Some(path.to_path_buf()), inner: inner })\n+        Ok(File { inner: inner })\n     }\n }\n "}, {"sha": "e9af6c00995a65b2095b1548c5ddba0f1583a864", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -13,17 +13,14 @@ pub use self::RenderSpan::*;\n pub use self::ColorConfig::*;\n use self::Destination::*;\n \n-use codemap::{COMMAND_LINE_SP, COMMAND_LINE_EXPN, Pos, Span};\n-use codemap;\n+use codemap::{self, COMMAND_LINE_SP, COMMAND_LINE_EXPN, Pos, Span};\n use diagnostics;\n \n use std::cell::{RefCell, Cell};\n-use std::cmp;\n-use std::fmt;\n+use std::{cmp, error, fmt};\n use std::io::prelude::*;\n use std::io;\n-use term::WriterWrapper;\n-use term;\n+use term::{self, WriterWrapper};\n use libc;\n \n /// maximum number of lines we will print for each error; arbitrary.\n@@ -83,15 +80,39 @@ pub trait Emitter {\n /// Used as a return value to signify a fatal error occurred. (It is also\n /// used as the argument to panic at the moment, but that will eventually\n /// not be true.)\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n #[must_use]\n pub struct FatalError;\n \n+impl fmt::Display for FatalError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+        write!(f, \"parser fatal error\")\n+    }\n+}\n+\n+impl error::Error for FatalError {\n+    fn description(&self) -> &str {\n+        \"The parser has encountered a fatal error\"\n+    }\n+}\n+\n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub struct ExplicitBug;\n \n+impl fmt::Display for ExplicitBug {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+        write!(f, \"parser internal bug\")\n+    }\n+}\n+\n+impl error::Error for ExplicitBug {\n+    fn description(&self) -> &str {\n+        \"The parser has encountered an internal bug\"\n+    }\n+}\n+\n /// A span-handler is like a handler but also\n /// accepts span information for source-location\n /// reporting."}, {"sha": "55afac1a1de43da428d6c9c18ddbedaab577d659", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -554,7 +554,6 @@ pub struct ExtCtxt<'a> {\n     pub use_std: bool,\n \n     pub mod_path: Vec<ast::Ident> ,\n-    pub trace_mac: bool,\n     pub exported_macros: Vec<ast::MacroDef>,\n \n     pub syntax_env: SyntaxEnv,\n@@ -572,7 +571,6 @@ impl<'a> ExtCtxt<'a> {\n             mod_path: Vec::new(),\n             ecfg: ecfg,\n             use_std: true,\n-            trace_mac: false,\n             exported_macros: Vec::new(),\n             syntax_env: env,\n             recursion_count: 0,\n@@ -732,10 +730,10 @@ impl<'a> ExtCtxt<'a> {\n         self.parse_sess.span_diagnostic.handler().bug(msg);\n     }\n     pub fn trace_macros(&self) -> bool {\n-        self.trace_mac\n+        self.ecfg.trace_mac\n     }\n     pub fn set_trace_macros(&mut self, x: bool) {\n-        self.trace_mac = x\n+        self.ecfg.trace_mac = x\n     }\n     pub fn ident_of(&self, st: &str) -> ast::Ident {\n         str_to_ident(st)"}, {"sha": "0945f8dd02103ac026565878beb0df6f24995a08", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -1406,6 +1406,7 @@ pub struct ExpansionConfig<'feat> {\n     pub crate_name: String,\n     pub features: Option<&'feat Features>,\n     pub recursion_limit: usize,\n+    pub trace_mac: bool,\n }\n \n macro_rules! feature_tests {\n@@ -1427,6 +1428,7 @@ impl<'feat> ExpansionConfig<'feat> {\n             crate_name: crate_name,\n             features: None,\n             recursion_limit: 64,\n+            trace_mac: false,\n         }\n     }\n "}, {"sha": "3338e394e0ef9005687b3a785cb9b0c95077dfd8", "filename": "src/test/run-make/trace-macros-flag/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -0,0 +1,9 @@\n+# This test verifies that \"-Z trace-macros\"  works as it should. The traditional\n+# \"hello world\" program provides a small example of this as not only println! is\n+# listed, but also print! (since println! expands to this)\n+\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -Z trace-macros hello.rs > $(TMPDIR)/hello.out\n+\tdiff -u $(TMPDIR)/hello.out hello.trace"}, {"sha": "42d3d4c799df89a3cb816a84f6d814351c2863bf", "filename": "src/test/run-make/trace-macros-flag/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.rs?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hello, World!\");\n+}"}, {"sha": "cf733339eadf63ace80afc5d60b768188bf265ed", "filename": "src/test/run-make/trace-macros-flag/hello.trace", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace", "raw_url": "https://github.com/rust-lang/rust/raw/3b2530c74832d8434ae7d87d01aa44936c0b0f84/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace?ref=3b2530c74832d8434ae7d87d01aa44936c0b0f84", "patch": "@@ -0,0 +1,2 @@\n+println! { \"Hello, World!\" }\n+print! { concat ! ( \"Hello, World!\" , \"\\n\" ) }"}]}