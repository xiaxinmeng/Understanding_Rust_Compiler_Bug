{"sha": "56959e5fe33d7e6846aaef544fca8ab548ae733e", "node_id": "C_kwDOAAsO6NoAKDU2OTU5ZTVmZTMzZDdlNjg0NmFhZWY1NDRmY2E4YWI1NDhhZTczM2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-22T19:08:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T19:08:00Z"}, "message": "Rollup merge of #109373 - ids1024:llvm-unreachable-optimize, r=ozkanonur\n\nSet LLVM `LLVM_UNREACHABLE_OPTIMIZE` to `OFF`\n\nThis option was added to LLVM in https://reviews.llvm.org/D121750?id=416339. It makes `llvm_unreachable` in builds without assertions compile to an `LLVM_BUILTIN_TRAP` instead of `LLVM_BUILTIN_UNREACHABLE` (which causes undefined behavior and is equivalent to `std::hint::unreachable_unchecked`).\n\nHaving compiler bugs triggering undefined behavior generally seems undesirable and inconsistent with Rust's goals. There is a check in `src/tools/tidy/src/style.rs` to reject code using `llvm_unreachable`. But it is used a lot within LLVM itself.\n\nFor instance, this changes a failure I get compiling `libcore` for m68k from a `SIGSEGV` to `SIGILL`, which seems better though it still doesn't provide a useful message without switching to an LLVM build with asserts.\n\nIt may be best not to do this if it noticeably degrades compiler performance, but worthwhile if it doesn't do so in any significant way. I haven't looked into what benchmarks there are for Rustc. That should be considered before merging.", "tree": {"sha": "67215a20308f00d8cf4432eda81db9f9cfa6a922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67215a20308f00d8cf4432eda81db9f9cfa6a922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56959e5fe33d7e6846aaef544fca8ab548ae733e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG1IQCRBK7hj4Ov3rIwAADYoIAKD6s7CPFFONy8m6F+9J50CK\n4X0AyjYoI2/bKH6coaAb3tncO0tVfj/Lonwy10G+qdbMxyFHOmNFFiDD+Z1/x6V8\n+3f7fK5WeORm/i/KppNt45a127ZzL+DWbG/56dZJgrCER1AM/omJISa9BcNz0/a/\naB3XgOaptFUJSQZn+28kiYD1PtoknCyOJKmQEJb4wfXXFVxDX2soNgg97BiNq2Pv\ndeXQEre48sHvpEe92vXS+ys0PFHcdunWY4wJk+aJLyec+P3mmUvlHI4YWjVWM26c\nNy/gAgg8XMyOb90vZnZc/8AeNJandVy1ZXldebMM+LhycFvFmFevm2OLMZjx04c=\n=3dOZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 67215a20308f00d8cf4432eda81db9f9cfa6a922\nparent 439292bc7913399e406d9bb7e8da0f70c6317c6e\nparent dfbf61029fec121026eb7a77731cfd52e88a3f4c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679512080 +0100\ncommitter GitHub <noreply@github.com> 1679512080 +0100\n\nRollup merge of #109373 - ids1024:llvm-unreachable-optimize, r=ozkanonur\n\nSet LLVM `LLVM_UNREACHABLE_OPTIMIZE` to `OFF`\n\nThis option was added to LLVM in https://reviews.llvm.org/D121750?id=416339. It makes `llvm_unreachable` in builds without assertions compile to an `LLVM_BUILTIN_TRAP` instead of `LLVM_BUILTIN_UNREACHABLE` (which causes undefined behavior and is equivalent to `std::hint::unreachable_unchecked`).\n\nHaving compiler bugs triggering undefined behavior generally seems undesirable and inconsistent with Rust's goals. There is a check in `src/tools/tidy/src/style.rs` to reject code using `llvm_unreachable`. But it is used a lot within LLVM itself.\n\nFor instance, this changes a failure I get compiling `libcore` for m68k from a `SIGSEGV` to `SIGILL`, which seems better though it still doesn't provide a useful message without switching to an LLVM build with asserts.\n\nIt may be best not to do this if it noticeably degrades compiler performance, but worthwhile if it doesn't do so in any significant way. I haven't looked into what benchmarks there are for Rustc. That should be considered before merging.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56959e5fe33d7e6846aaef544fca8ab548ae733e", "html_url": "https://github.com/rust-lang/rust/commit/56959e5fe33d7e6846aaef544fca8ab548ae733e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56959e5fe33d7e6846aaef544fca8ab548ae733e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439292bc7913399e406d9bb7e8da0f70c6317c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/439292bc7913399e406d9bb7e8da0f70c6317c6e", "html_url": "https://github.com/rust-lang/rust/commit/439292bc7913399e406d9bb7e8da0f70c6317c6e"}, {"sha": "dfbf61029fec121026eb7a77731cfd52e88a3f4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbf61029fec121026eb7a77731cfd52e88a3f4c", "html_url": "https://github.com/rust-lang/rust/commit/dfbf61029fec121026eb7a77731cfd52e88a3f4c"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "36f9aaa595d0ff0632efefcf46177695bfcfc773", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56959e5fe33d7e6846aaef544fca8ab548ae733e/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/56959e5fe33d7e6846aaef544fca8ab548ae733e/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=56959e5fe33d7e6846aaef544fca8ab548ae733e", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/104748\n+Last change is for: https://github.com/rust-lang/rust/pull/109373"}, {"sha": "f27db5c91e221f8adcd07bda6bd71243b627155f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56959e5fe33d7e6846aaef544fca8ab548ae733e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56959e5fe33d7e6846aaef544fca8ab548ae733e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=56959e5fe33d7e6846aaef544fca8ab548ae733e", "patch": "@@ -309,6 +309,7 @@ impl Step for Llvm {\n         cfg.out_dir(&out_dir)\n             .profile(profile)\n             .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n+            .define(\"LLVM_UNREACHABLE_OPTIMIZE\", \"OFF\")\n             .define(\"LLVM_ENABLE_PLUGINS\", plugins)\n             .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n             .define(\"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD\", llvm_exp_targets)"}]}