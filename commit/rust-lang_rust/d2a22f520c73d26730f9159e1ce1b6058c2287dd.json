{"sha": "d2a22f520c73d26730f9159e1ce1b6058c2287dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYTIyZjUyMGM3M2QyNjczMGY5MTU5ZTFjZTFiNjA1OGMyMjg3ZGQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-05T19:43:47Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-06T20:12:00Z"}, "message": "Remove remainders from when booleans were i8", "tree": {"sha": "476a864fa530fb722fff767d4a999941f44ccc5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/476a864fa530fb722fff767d4a999941f44ccc5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a22f520c73d26730f9159e1ce1b6058c2287dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a22f520c73d26730f9159e1ce1b6058c2287dd", "html_url": "https://github.com/rust-lang/rust/commit/d2a22f520c73d26730f9159e1ce1b6058c2287dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a22f520c73d26730f9159e1ce1b6058c2287dd/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ef5cf1310a7b1e31d0993885d867a6804597ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ef5cf1310a7b1e31d0993885d867a6804597ad", "html_url": "https://github.com/rust-lang/rust/commit/b8ef5cf1310a7b1e31d0993885d867a6804597ad"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "33ad05977edb42a30a934342dba12c88cc4348bc", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=d2a22f520c73d26730f9159e1ce1b6058c2287dd", "patch": "@@ -618,7 +618,7 @@ pub fn trans_case<'a>(bcx: &'a Block<'a>, r: &Repr, discr: Disr)\n         RawNullablePointer { .. } |\n         StructWrappedNullablePointer { .. } => {\n             assert!(discr == 0 || discr == 1);\n-            _match::single_result(Result::new(bcx, C_i1(bcx.ccx(), discr != 0)))\n+            _match::single_result(Result::new(bcx, C_bool(bcx.ccx(), discr != 0)))\n         }\n     }\n }"}, {"sha": "b2558cdd364c8329e73c842b5f54708e6add211c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d2a22f520c73d26730f9159e1ce1b6058c2287dd", "patch": "@@ -539,8 +539,8 @@ pub fn compare_scalar_values<'a>(\n         // We don't need to do actual comparisons for nil.\n         // () == () holds but () < () does not.\n         match op {\n-          ast::BiEq | ast::BiLe | ast::BiGe => return C_i1(cx.ccx(), true),\n-          ast::BiNe | ast::BiLt | ast::BiGt => return C_i1(cx.ccx(), false),\n+          ast::BiEq | ast::BiLe | ast::BiGe => return C_bool(cx.ccx(), true),\n+          ast::BiNe | ast::BiLt | ast::BiGt => return C_bool(cx.ccx(), false),\n           // refinements would be nice\n           _ => die(cx)\n         }\n@@ -1014,7 +1014,7 @@ pub fn call_memcpy(cx: &Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef,\n     let dst_ptr = PointerCast(cx, dst, Type::i8p(ccx));\n     let size = IntCast(cx, n_bytes, ccx.int_type);\n     let align = C_i32(ccx, align as i32);\n-    let volatile = C_i1(ccx, false);\n+    let volatile = C_bool(ccx, false);\n     Call(cx, memcpy, [dst_ptr, src_ptr, size, align, volatile], []);\n }\n \n@@ -1059,7 +1059,7 @@ fn memzero(b: &Builder, llptr: ValueRef, ty: Type) {\n     let llzeroval = C_u8(ccx, 0);\n     let size = machine::llsize_of(ccx, ty);\n     let align = C_i32(ccx, llalign_of_min(ccx, ty) as i32);\n-    let volatile = C_i1(ccx, false);\n+    let volatile = C_bool(ccx, false);\n     b.call(llintrinsicfn, [llptr, llzeroval, size, align, volatile], []);\n }\n "}, {"sha": "b1d98656740719018741e5b1753978920ae6beca", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=d2a22f520c73d26730f9159e1ce1b6058c2287dd", "patch": "@@ -526,10 +526,6 @@ pub fn C_nil(ccx: &CrateContext) -> ValueRef {\n }\n \n pub fn C_bool(ccx: &CrateContext, val: bool) -> ValueRef {\n-    C_integral(Type::bool(ccx), val as u64, false)\n-}\n-\n-pub fn C_i1(ccx: &CrateContext, val: bool) -> ValueRef {\n     C_integral(Type::i1(ccx), val as u64, false)\n }\n "}, {"sha": "aad82f3702896c6f1f4c879dd0d19d296e3fc846", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d2a22f520c73d26730f9159e1ce1b6058c2287dd", "patch": "@@ -505,7 +505,7 @@ fn trans_index<'a>(bcx: &'a Block<'a>,\n \n     let bounds_check = ICmp(bcx, lib::llvm::IntUGE, ix_val, len);\n     let expect = ccx.get_intrinsic(&(\"llvm.expect.i1\"));\n-    let expected = Call(bcx, expect, [bounds_check, C_i1(ccx, false)], []);\n+    let expected = Call(bcx, expect, [bounds_check, C_bool(ccx, false)], []);\n     let bcx = with_cond(bcx, expected, |bcx| {\n             controlflow::trans_fail_bounds_check(bcx, index_expr.span, ix_val, len)\n         });\n@@ -1149,13 +1149,7 @@ fn trans_unary<'a>(bcx: &'a Block<'a>,\n     match op {\n         ast::UnNot => {\n             let datum = unpack_datum!(bcx, trans(bcx, sub_expr));\n-            let llresult = if ty::type_is_bool(un_ty) {\n-                let val = datum.to_llscalarish(bcx);\n-                Xor(bcx, val, C_bool(ccx, true))\n-            } else {\n-                // Note: `Not` is bitwise, not suitable for logical not.\n-                Not(bcx, datum.to_llscalarish(bcx))\n-            };\n+            let llresult = Not(bcx, datum.to_llscalarish(bcx));\n             immediate_rvalue_bcx(bcx, llresult, un_ty).to_expr_datumblock()\n         }\n         ast::UnNeg => {"}, {"sha": "e5e61f38175f59a5d9c147f530ee9968576790d5", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=d2a22f520c73d26730f9159e1ce1b6058c2287dd", "patch": "@@ -234,7 +234,7 @@ fn trans_struct_drop_flag<'a>(bcx: &'a Block<'a>,\n                               -> &'a Block<'a> {\n     let repr = adt::represent_type(bcx.ccx(), t);\n     let drop_flag = adt::trans_drop_flag_ptr(bcx, &*repr, v0);\n-    with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag)), |cx| {\n+    with_cond(bcx, Load(bcx, drop_flag), |cx| {\n         trans_struct_drop(cx, t, v0, dtor_did, class_did, substs)\n     })\n }"}, {"sha": "8e64df8c7d4685308378f29e31af6aa05db33020", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a22f520c73d26730f9159e1ce1b6058c2287dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=d2a22f520c73d26730f9159e1ce1b6058c2287dd", "patch": "@@ -150,7 +150,8 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         let src_ptr = PointerCast(bcx, get_param(decl, first_real_arg + 1), Type::i8p(ccx));\n         let count = get_param(decl, first_real_arg + 2);\n         let llfn = ccx.get_intrinsic(&name);\n-        Call(bcx, llfn, [dst_ptr, src_ptr, Mul(bcx, size, count), align, C_i1(ccx, volatile)], []);\n+        Call(bcx, llfn,\n+             [dst_ptr, src_ptr, Mul(bcx, size, count), align, C_bool(ccx, volatile)], []);\n         RetVoid(bcx);\n     }\n \n@@ -171,13 +172,13 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         let val = get_param(decl, first_real_arg + 1);\n         let count = get_param(decl, first_real_arg + 2);\n         let llfn = ccx.get_intrinsic(&name);\n-        Call(bcx, llfn, [dst_ptr, val, Mul(bcx, size, count), align, C_i1(ccx, volatile)], []);\n+        Call(bcx, llfn, [dst_ptr, val, Mul(bcx, size, count), align, C_bool(ccx, volatile)], []);\n         RetVoid(bcx);\n     }\n \n     fn count_zeros_intrinsic(bcx: &Block, name: &'static str) {\n         let x = get_param(bcx.fcx.llfn, bcx.fcx.arg_pos(0u));\n-        let y = C_i1(bcx.ccx(), false);\n+        let y = C_bool(bcx.ccx(), false);\n         let llfn = bcx.ccx().get_intrinsic(&name);\n         let llcall = Call(bcx, llfn, [x, y], []);\n         Ret(bcx, llcall);"}]}