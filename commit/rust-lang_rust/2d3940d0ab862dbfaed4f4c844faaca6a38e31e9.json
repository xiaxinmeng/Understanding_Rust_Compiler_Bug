{"sha": "2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzk0MGQwYWI4NjJkYmZhZWQ0ZjRjODQ0ZmFhY2E2YTM4ZTMxZTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T16:59:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T16:59:06Z"}, "message": "rename TreePtr -> TreeArc\n\nThis is much clearer about the semantics", "tree": {"sha": "0d8412f73a0fa6f9c1e6913e6133d3daf25dcb91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8412f73a0fa6f9c1e6913e6133d3daf25dcb91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "html_url": "https://github.com/rust-lang/rust/commit/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad1bf877e4ba5ce9e28e8bde14f790ef8d1551b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad1bf877e4ba5ce9e28e8bde14f790ef8d1551b", "html_url": "https://github.com/rust-lang/rust/commit/aad1bf877e4ba5ce9e28e8bde14f790ef8d1551b"}], "stats": {"total": 394, "additions": 197, "deletions": 197}, "files": [{"sha": "cfb081e187c6ac2633c7730ce01a916c1e069f09", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -760,7 +760,7 @@ dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_text_edit 0.1.0\",\n- \"rowan 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rowan 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -975,7 +975,7 @@ dependencies = [\n \n [[package]]\n name = \"rowan\"\n-version = \"0.2.0\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1573,7 +1573,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7790c7f1cc73d831d28dc5a7deb316a006e7848e6a7f467cdb10a0a9e0fb1c\"\n \"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n \"checksum ron 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9cb28ade964585205aaca1f3d41a6297f72e1ad097b49c4bbde033ef86b38d7\"\n-\"checksum rowan 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9ae7dba5e703f423ceb8646d636c73e6d858a2f8c834808b4565e42ccda9e2\"\n+\"checksum rowan 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4df666a130f870e6ac76fa525b0b6d984cfeee8f4cd675f2a125f0aced79c5f7\"\n \"checksum rustc-demangle 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"adacaae16d02b6ec37fdc7acfcddf365978de76d1983d3ee22afc260e1ca9619\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\""}, {"sha": "6b5be27be82521f1c32a12556fb16fada3eab5e7", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -3,7 +3,7 @@ use std::{fs, io::Read, path::Path, time::Instant};\n use clap::{App, Arg, SubCommand};\n use join_to_string::join;\n use ra_ide_api_light::{extend_selection, file_structure, syntax_tree};\n-use ra_syntax::{SourceFile, TextRange, TreePtr, AstNode};\n+use ra_syntax::{SourceFile, TextRange, TreeArc, AstNode};\n use tools::collect_tests;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n@@ -71,7 +71,7 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn file() -> Result<TreePtr<SourceFile>> {\n+fn file() -> Result<TreeArc<SourceFile>> {\n     let text = read_stdin()?;\n     Ok(SourceFile::parse(&text))\n }"}, {"sha": "0c4dfc8c683501eca9ebf5343f7ebd3125b5b9f5", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -7,7 +7,7 @@ pub mod mock;\n \n use std::panic;\n \n-use ra_syntax::{TextUnit, TextRange, SourceFile, TreePtr};\n+use ra_syntax::{TextUnit, TextRange, SourceFile, TreeArc};\n \n pub use crate::{\n     cancellation::{Canceled, Cancelable},\n@@ -40,13 +40,13 @@ pub trait BaseDatabase: salsa::Database + panic::RefUnwindSafe {\n \n salsa::query_group! {\n     pub trait SyntaxDatabase: crate::input::FilesDatabase + BaseDatabase {\n-        fn source_file(file_id: FileId) -> TreePtr<SourceFile> {\n+        fn source_file(file_id: FileId) -> TreeArc<SourceFile> {\n             type SourceFileQuery;\n         }\n     }\n }\n \n-fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> TreePtr<SourceFile> {\n+fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)\n }"}, {"sha": "5270826da363619768d951c9da4deabfe9879817", "filename": "crates/ra_db/src/syntax_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -1,4 +1,4 @@\n-use ra_syntax::{AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TreePtr};\n+use ra_syntax::{AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TreeArc};\n \n /// A pointer to a syntax node inside a file.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -15,7 +15,7 @@ impl LocalSyntaxPtr {\n         }\n     }\n \n-    pub fn resolve(self, file: &SourceFile) -> TreePtr<SyntaxNode> {\n+    pub fn resolve(self, file: &SourceFile) -> TreeArc<SyntaxNode> {\n         let mut curr = file.syntax();\n         loop {\n             if curr.range() == self.range && curr.kind() == self.kind {"}, {"sha": "098c7f40b4204b9d5b3e54983fd68c64365d91f4", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n use ra_db::{CrateId, Cancelable, FileId};\n-use ra_syntax::{ast, TreePtr, SyntaxNode, AstNode};\n+use ra_syntax::{ast, TreeArc, SyntaxNode, AstNode};\n \n use crate::{\n     Name, DefId, Path, PerNs, ScopesWithSyntaxMapping, Ty, HirFileId,\n@@ -55,8 +55,8 @@ pub struct Module {\n }\n \n pub enum ModuleSource {\n-    SourceFile(TreePtr<ast::SourceFile>),\n-    Module(TreePtr<ast::Module>),\n+    SourceFile(TreeArc<ast::SourceFile>),\n+    Module(TreeArc<ast::Module>),\n }\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n@@ -86,7 +86,7 @@ impl Module {\n     pub fn declaration_source(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Option<(FileId, TreePtr<ast::Module>)>> {\n+    ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n         self.declaration_source_impl(db)\n     }\n \n@@ -134,7 +134,7 @@ impl Module {\n     pub fn problems(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Vec<(TreePtr<SyntaxNode>, Problem)>> {\n+    ) -> Cancelable<Vec<(TreeArc<SyntaxNode>, Problem)>> {\n         self.problems_impl(db)\n     }\n }\n@@ -185,7 +185,7 @@ impl Struct {\n     pub fn source(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<(HirFileId, TreePtr<ast::StructDef>)> {\n+    ) -> Cancelable<(HirFileId, TreeArc<ast::StructDef>)> {\n         let (file_id, syntax) = self.def_id.source(db);\n         Ok((\n             file_id,\n@@ -218,7 +218,7 @@ impl Enum {\n         Ok(db.enum_data(self.def_id)?.variants.clone())\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreePtr<ast::EnumDef>)> {\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::EnumDef>)> {\n         let (file_id, syntax) = self.def_id.source(db);\n         Ok((\n             file_id,\n@@ -258,7 +258,7 @@ impl EnumVariant {\n     pub fn source(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<(HirFileId, TreePtr<ast::EnumVariant>)> {\n+    ) -> Cancelable<(HirFileId, TreeArc<ast::EnumVariant>)> {\n         let (file_id, syntax) = self.def_id.source(db);\n         Ok((\n             file_id,\n@@ -303,7 +303,7 @@ impl Function {\n         self.def_id\n     }\n \n-    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreePtr<ast::FnDef>)> {\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::FnDef>)> {\n         Ok(self.source_impl(db))\n     }\n "}, {"sha": "daf49e7915279c14acd405e782dc316487f2d64e", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -4,7 +4,7 @@ use std::sync::Arc;\n \n use ra_db::Cancelable;\n use ra_syntax::{\n-    TreePtr,\n+    TreeArc,\n     ast::{self, AstNode, NameOwner},\n };\n \n@@ -22,7 +22,7 @@ impl Function {\n         Function { def_id }\n     }\n \n-    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, TreePtr<ast::FnDef>) {\n+    pub(crate) fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n         let def_loc = self.def_id.loc(db);\n         assert!(def_loc.kind == DefKind::Function);\n         let syntax = db.file_item(def_loc.source_item_id);"}, {"sha": "e9ff06dc86b2dabfbb5b837c63849bb4c32eda7d", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -1,5 +1,5 @@\n use ra_db::{Cancelable, SourceRootId, FileId};\n-use ra_syntax::{ast, SyntaxNode, AstNode, TreePtr};\n+use ra_syntax::{ast, SyntaxNode, AstNode, TreeArc};\n \n use crate::{\n     Module, ModuleSource, Problem,\n@@ -57,7 +57,7 @@ impl Module {\n     pub fn declaration_source_impl(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Option<(FileId, TreePtr<ast::Module>)>> {\n+    ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id)?;\n         let link = ctry!(loc.module_id.parent_link(&module_tree));\n@@ -173,7 +173,7 @@ impl Module {\n     pub fn problems_impl(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Vec<(TreePtr<SyntaxNode>, Problem)>> {\n+    ) -> Cancelable<Vec<(TreeArc<SyntaxNode>, Problem)>> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id)?;\n         Ok(loc.module_id.problems(&module_tree, db))"}, {"sha": "a11c73db0c34d8dac2a2abfbd2f4a107a953d3e0", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_syntax::{SyntaxNode, TreePtr, SourceFile};\n+use ra_syntax::{SyntaxNode, TreeArc, SourceFile};\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, Cancelable};\n \n use crate::{\n@@ -22,7 +22,7 @@ pub trait HirDatabase: SyntaxDatabase\n     + AsRef<LocationIntener<DefLoc, DefId>>\n     + AsRef<LocationIntener<MacroCallLoc, MacroCallId>>\n {\n-    fn hir_source_file(file_id: HirFileId) -> TreePtr<SourceFile> {\n+    fn hir_source_file(file_id: HirFileId) -> TreeArc<SourceFile> {\n         type HirSourceFileQuery;\n         use fn HirFileId::hir_source_file;\n     }\n@@ -72,7 +72,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn query_definitions::file_items;\n     }\n \n-    fn file_item(source_item_id: SourceItemId) -> TreePtr<SyntaxNode> {\n+    fn file_item(source_item_id: SourceItemId) -> TreeArc<SyntaxNode> {\n         type FileItemQuery;\n         use fn query_definitions::file_item;\n     }"}, {"sha": "0805fd3db5393557b68d9b109ab171497d2d0c15", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -1,5 +1,5 @@\n use ra_db::{SourceRootId, LocationIntener, Cancelable, FileId};\n-use ra_syntax::{TreePtr, SyntaxKind, SyntaxNode, SourceFile, AstNode, ast};\n+use ra_syntax::{TreeArc, SyntaxKind, SyntaxNode, SourceFile, AstNode, ast};\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n@@ -61,7 +61,7 @@ impl HirFileId {\n     pub(crate) fn hir_source_file(\n         db: &impl HirDatabase,\n         file_id: HirFileId,\n-    ) -> TreePtr<SourceFile> {\n+    ) -> TreeArc<SourceFile> {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.source_file(file_id),\n             HirFileIdRepr::Macro(m) => {\n@@ -179,7 +179,7 @@ impl DefId {\n         Ok(res)\n     }\n \n-    pub(crate) fn source(self, db: &impl HirDatabase) -> (HirFileId, TreePtr<SyntaxNode>) {\n+    pub(crate) fn source(self, db: &impl HirDatabase) -> (HirFileId, TreeArc<SyntaxNode>) {\n         let loc = self.loc(db);\n         let syntax = db.file_item(loc.source_item_id);\n         (loc.source_item_id.file_id, syntax)\n@@ -244,7 +244,7 @@ pub struct SourceItemId {\n #[derive(Debug, PartialEq, Eq)]\n pub struct SourceFileItems {\n     file_id: HirFileId,\n-    arena: Arena<SourceFileItemId, TreePtr<SyntaxNode>>,\n+    arena: Arena<SourceFileItemId, TreeArc<SyntaxNode>>,\n }\n \n impl SourceFileItems {\n@@ -273,7 +273,7 @@ impl SourceFileItems {\n         })\n     }\n \n-    fn alloc(&mut self, item: TreePtr<SyntaxNode>) -> SourceFileItemId {\n+    fn alloc(&mut self, item: TreeArc<SyntaxNode>) -> SourceFileItemId {\n         self.arena.alloc(item)\n     }\n     pub(crate) fn id_of(&self, file_id: HirFileId, item: &SyntaxNode) -> SourceFileItemId {"}, {"sha": "220bee94e0a1944c46af427504ce810ebef1a494", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -11,7 +11,7 @@ use std::sync::Arc;\n \n use ra_db::LocalSyntaxPtr;\n use ra_syntax::{\n-    TextRange, TextUnit, SourceFile, AstNode, SyntaxNode, TreePtr,\n+    TextRange, TextUnit, SourceFile, AstNode, SyntaxNode, TreeArc,\n     ast::{self, NameOwner},\n };\n \n@@ -152,11 +152,11 @@ pub struct MacroExpansion {\n impl MacroExpansion {\n     // FIXME: does not really make sense, macro expansion is not neccessary a\n     // whole file. See `MacroExpansion::ptr` as well.\n-    pub(crate) fn file(&self) -> TreePtr<SourceFile> {\n+    pub(crate) fn file(&self) -> TreeArc<SourceFile> {\n         SourceFile::parse(&self.text)\n     }\n \n-    pub fn syntax(&self) -> TreePtr<SyntaxNode> {\n+    pub fn syntax(&self) -> TreeArc<SyntaxNode> {\n         self.ptr.resolve(&self.file())\n     }\n     /// Maps range in the source code to the range in the expanded code."}, {"sha": "67823e97053506a8190bc4fa5353a9162e6dbffc", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -5,7 +5,7 @@ use arrayvec::ArrayVec;\n use relative_path::RelativePathBuf;\n use ra_db::{FileId, SourceRootId, Cancelable, SourceRoot};\n use ra_syntax::{\n-    SyntaxNode, TreePtr,\n+    SyntaxNode, TreeArc,\n     algo::generate,\n     ast::{self, AstNode, NameOwner},\n };\n@@ -170,7 +170,7 @@ impl ModuleId {\n         self,\n         tree: &ModuleTree,\n         db: &impl HirDatabase,\n-    ) -> Vec<(TreePtr<SyntaxNode>, Problem)> {\n+    ) -> Vec<(TreeArc<SyntaxNode>, Problem)> {\n         tree.mods[self]\n             .children\n             .iter()\n@@ -191,7 +191,7 @@ impl LinkId {\n     pub(crate) fn name(self, tree: &ModuleTree) -> &Name {\n         &tree.links[self].name\n     }\n-    pub(crate) fn source(self, tree: &ModuleTree, db: &impl HirDatabase) -> TreePtr<ast::Module> {\n+    pub(crate) fn source(self, tree: &ModuleTree, db: &impl HirDatabase) -> TreeArc<ast::Module> {\n         let syntax_node = db.file_item(tree.links[self].source);\n         ast::Module::cast(&syntax_node).unwrap().to_owned()\n     }"}, {"sha": "214a9d68b8a5110ab7843e61a6d5a41c02380c35", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use rustc_hash::FxHashMap;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreePtr,\n+    AstNode, SyntaxNode, TreeArc,\n     ast::{self, ModuleItemOwner}\n };\n use ra_db::{SourceRootId, Cancelable,};\n@@ -33,7 +33,7 @@ pub(super) fn file_items(db: &impl HirDatabase, file_id: HirFileId) -> Arc<Sourc\n pub(super) fn file_item(\n     db: &impl HirDatabase,\n     source_item_id: SourceItemId,\n-) -> TreePtr<SyntaxNode> {\n+) -> TreeArc<SyntaxNode> {\n     match source_item_id.item_id {\n         Some(id) => db.file_items(source_item_id.file_id)[id].to_owned(),\n         None => db"}, {"sha": "b66774cdfa4d28af32b4026a316e3cdb1a1f3c14", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{Cancelable, SyntaxDatabase};\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreePtr,\n+    AstNode, SyntaxNode, TreeArc,\n     ast::{self, NameOwner},\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n@@ -87,7 +87,7 @@ fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Cancelable<Option<S\n }\n \n impl NavigationTarget {\n-    fn node(&self, db: &RootDatabase) -> Option<TreePtr<SyntaxNode>> {\n+    fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n         let source_file = db.source_file(self.file_id());\n         let source_file = source_file.syntax();\n         let node = source_file"}, {"sha": "abb50ff95435a28bad7191e36ce3c0821a9a1a1b", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -35,7 +35,7 @@ mod parent_module;\n \n use std::{fmt, sync::Arc};\n \n-use ra_syntax::{SourceFile, TreePtr, TextRange, TextUnit};\n+use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n use ra_db::{SyntaxDatabase, FilesDatabase, BaseDatabase};\n use rayon::prelude::*;\n@@ -303,7 +303,7 @@ impl Analysis {\n     }\n \n     /// Gets the syntax tree of the file.\n-    pub fn file_syntax(&self, file_id: FileId) -> TreePtr<SourceFile> {\n+    pub fn file_syntax(&self, file_id: FileId) -> TreeArc<SourceFile> {\n         self.db.source_file(file_id).clone()\n     }\n "}, {"sha": "fdda570223ba1e33387b60bbd5298b4e6a5203b2", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -27,7 +27,7 @@ use std::{\n \n use fst::{self, Streamer};\n use ra_syntax::{\n-    SyntaxNode, SourceFile, SmolStr, TreePtr, AstNode,\n+    SyntaxNode, SourceFile, SmolStr, TreeArc, AstNode,\n     algo::{visit::{visitor, Visitor}, find_covering_node},\n     SyntaxKind::{self, *},\n     ast::{self, NameOwner},\n@@ -141,7 +141,7 @@ impl SymbolIndex {\n     }\n \n     pub(crate) fn for_files(\n-        files: impl ParallelIterator<Item = (FileId, TreePtr<SourceFile>)>,\n+        files: impl ParallelIterator<Item = (FileId, TreeArc<SourceFile>)>,\n     ) -> SymbolIndex {\n         let symbols = files\n             .flat_map(|(file_id, file)| {"}, {"sha": "77cd6c8045567e60a4b5618297ae63e06e926a8b", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -13,7 +13,7 @@ unicode-xid = \"0.1.0\"\n itertools = \"0.8.0\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.7.0\"\n-rowan = \"0.2.0\"\n+rowan = \"0.3.0\"\n \n # ideally, `serde` should be enabled by `ra_lsp_serder`, but we enable it here\n # to reduce number of compilations"}, {"sha": "123a7a6b9a43f456f4b8e467cefc9eaaafbaacac", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -6,7 +6,7 @@ use itertools::Itertools;\n \n pub use self::generated::*;\n use crate::{\n-    yellow::{SyntaxNode, SyntaxNodeChildren, TreePtr, RaTypes},\n+    yellow::{SyntaxNode, SyntaxNodeChildren, TreeArc, RaTypes},\n     SmolStr,\n     SyntaxKind::*,\n };\n@@ -20,7 +20,7 @@ pub trait AstNode: rowan::TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>\n     where\n         Self: Sized;\n     fn syntax(&self) -> &SyntaxNode;\n-    fn to_owned(&self) -> TreePtr<Self>;\n+    fn to_owned(&self) -> TreeArc<Self>;\n }\n \n pub trait AstToken: AstNode {"}, {"sha": "1f6055115463fd2ad0d4c62e5bcee5d76842a70c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 113, "deletions": 113, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -13,7 +13,7 @@ use rowan::TransparentNewType;\n \n use crate::{\n     SyntaxNode, SyntaxKind::*,\n-    yellow::{RaTypes, TreePtr},\n+    yellow::{RaTypes, TreeArc},\n     ast::{self, AstNode},\n };\n \n@@ -35,7 +35,7 @@ impl AstNode for ArgList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ArgList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ArgList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -63,7 +63,7 @@ impl AstNode for ArrayExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ArrayExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ArrayExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -87,7 +87,7 @@ impl AstNode for ArrayType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ArrayType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ArrayType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -119,7 +119,7 @@ impl AstNode for Attr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Attr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Attr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -147,7 +147,7 @@ impl AstNode for BinExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<BinExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<BinExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -171,7 +171,7 @@ impl AstNode for BindPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<BindPat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<BindPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -196,7 +196,7 @@ impl AstNode for Block {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Block> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Block> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -228,7 +228,7 @@ impl AstNode for BlockExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<BlockExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<BlockExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -256,7 +256,7 @@ impl AstNode for BreakExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<BreakExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<BreakExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -284,7 +284,7 @@ impl AstNode for Byte {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Byte> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Byte> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -309,7 +309,7 @@ impl AstNode for ByteString {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ByteString> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ByteString> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -334,7 +334,7 @@ impl AstNode for CallExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<CallExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<CallExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -363,7 +363,7 @@ impl AstNode for CastExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<CastExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<CastExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -395,7 +395,7 @@ impl AstNode for Char {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Char> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Char> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -420,7 +420,7 @@ impl AstNode for Comment {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Comment> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Comment> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -445,7 +445,7 @@ impl AstNode for Condition {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Condition> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Condition> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -477,7 +477,7 @@ impl AstNode for ConstDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ConstDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ConstDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -506,7 +506,7 @@ impl AstNode for ContinueExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ContinueExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ContinueExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -530,7 +530,7 @@ impl AstNode for DynTraitType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<DynTraitType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<DynTraitType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -554,7 +554,7 @@ impl AstNode for EnumDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<EnumDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<EnumDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -587,7 +587,7 @@ impl AstNode for EnumVariant {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<EnumVariant> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<EnumVariant> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -616,7 +616,7 @@ impl AstNode for EnumVariantList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<EnumVariantList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<EnumVariantList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -701,7 +701,7 @@ impl AstNode for Expr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Expr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Expr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl Expr {\n@@ -759,7 +759,7 @@ impl AstNode for ExprStmt {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ExprStmt> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ExprStmt> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -787,7 +787,7 @@ impl AstNode for ExternCrateItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ExternCrateItem> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ExternCrateItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -811,7 +811,7 @@ impl AstNode for FieldExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<FieldExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<FieldExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -843,7 +843,7 @@ impl AstNode for FieldPatList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<FieldPatList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<FieldPatList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -867,7 +867,7 @@ impl AstNode for FnDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<FnDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<FnDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -908,7 +908,7 @@ impl AstNode for FnPointerType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<FnPointerType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<FnPointerType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -940,7 +940,7 @@ impl AstNode for ForExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ForExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ForExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -973,7 +973,7 @@ impl AstNode for ForType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ForType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ForType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1001,7 +1001,7 @@ impl AstNode for IfExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<IfExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<IfExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1029,7 +1029,7 @@ impl AstNode for ImplBlock {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ImplBlock> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ImplBlock> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1066,7 +1066,7 @@ impl AstNode for ImplItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ImplItem> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ImplItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl ImplItem {\n@@ -1100,7 +1100,7 @@ impl AstNode for ImplTraitType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ImplTraitType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ImplTraitType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1124,7 +1124,7 @@ impl AstNode for IndexExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<IndexExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<IndexExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1148,7 +1148,7 @@ impl AstNode for ItemList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ItemList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ItemList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1178,7 +1178,7 @@ impl AstNode for Label {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Label> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Label> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1202,7 +1202,7 @@ impl AstNode for LambdaExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<LambdaExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<LambdaExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1234,7 +1234,7 @@ impl AstNode for LetStmt {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<LetStmt> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<LetStmt> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1270,7 +1270,7 @@ impl AstNode for Lifetime {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Lifetime> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Lifetime> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1295,7 +1295,7 @@ impl AstNode for LifetimeParam {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<LifetimeParam> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<LifetimeParam> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1323,7 +1323,7 @@ impl AstNode for Literal {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Literal> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Literal> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1347,7 +1347,7 @@ impl AstNode for LoopExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<LoopExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<LoopExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1372,7 +1372,7 @@ impl AstNode for MacroCall {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<MacroCall> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<MacroCall> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1404,7 +1404,7 @@ impl AstNode for MatchArm {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<MatchArm> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<MatchArm> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1440,7 +1440,7 @@ impl AstNode for MatchArmList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<MatchArmList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<MatchArmList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1468,7 +1468,7 @@ impl AstNode for MatchExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<MatchExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<MatchExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1500,7 +1500,7 @@ impl AstNode for MatchGuard {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<MatchGuard> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<MatchGuard> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1524,7 +1524,7 @@ impl AstNode for MethodCallExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<MethodCallExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<MethodCallExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1557,7 +1557,7 @@ impl AstNode for Module {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Module> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Module> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1614,7 +1614,7 @@ impl AstNode for ModuleItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ModuleItem> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ModuleItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl ModuleItem {\n@@ -1656,7 +1656,7 @@ impl AstNode for Name {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Name> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Name> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1680,7 +1680,7 @@ impl AstNode for NameRef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NameRef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NameRef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1704,7 +1704,7 @@ impl AstNode for NamedField {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NamedField> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NamedField> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1736,7 +1736,7 @@ impl AstNode for NamedFieldDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NamedFieldDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NamedFieldDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1767,7 +1767,7 @@ impl AstNode for NamedFieldDefList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NamedFieldDefList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NamedFieldDefList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1795,7 +1795,7 @@ impl AstNode for NamedFieldList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NamedFieldList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NamedFieldList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1823,7 +1823,7 @@ impl AstNode for NeverType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NeverType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NeverType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1854,7 +1854,7 @@ impl AstNode for NominalDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<NominalDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<NominalDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl NominalDef {\n@@ -1890,7 +1890,7 @@ impl AstNode for Param {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Param> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Param> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1922,7 +1922,7 @@ impl AstNode for ParamList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ParamList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ParamList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1954,7 +1954,7 @@ impl AstNode for ParenExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ParenExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ParenExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -1982,7 +1982,7 @@ impl AstNode for ParenType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ParenType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ParenType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2033,7 +2033,7 @@ impl AstNode for Pat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Pat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Pat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl Pat {\n@@ -2074,7 +2074,7 @@ impl AstNode for Path {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Path> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Path> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2106,7 +2106,7 @@ impl AstNode for PathExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PathExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PathExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2134,7 +2134,7 @@ impl AstNode for PathPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PathPat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PathPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2158,7 +2158,7 @@ impl AstNode for PathSegment {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PathSegment> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PathSegment> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2186,7 +2186,7 @@ impl AstNode for PathType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PathType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PathType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2214,7 +2214,7 @@ impl AstNode for PlaceholderPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PlaceholderPat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PlaceholderPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2238,7 +2238,7 @@ impl AstNode for PlaceholderType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PlaceholderType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PlaceholderType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2262,7 +2262,7 @@ impl AstNode for PointerType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PointerType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PointerType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2290,7 +2290,7 @@ impl AstNode for PosField {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PosField> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PosField> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2320,7 +2320,7 @@ impl AstNode for PosFieldList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PosFieldList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PosFieldList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2348,7 +2348,7 @@ impl AstNode for PrefixExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<PrefixExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<PrefixExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2376,7 +2376,7 @@ impl AstNode for RangeExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<RangeExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<RangeExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2400,7 +2400,7 @@ impl AstNode for RangePat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<RangePat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<RangePat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2424,7 +2424,7 @@ impl AstNode for RefExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<RefExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<RefExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2452,7 +2452,7 @@ impl AstNode for RefPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<RefPat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<RefPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2476,7 +2476,7 @@ impl AstNode for ReferenceType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ReferenceType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ReferenceType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2504,7 +2504,7 @@ impl AstNode for RetType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<RetType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<RetType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2532,7 +2532,7 @@ impl AstNode for ReturnExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<ReturnExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<ReturnExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2560,7 +2560,7 @@ impl AstNode for SelfKw {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<SelfKw> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<SelfKw> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2584,7 +2584,7 @@ impl AstNode for SelfParam {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<SelfParam> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<SelfParam> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2616,7 +2616,7 @@ impl AstNode for SlicePat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<SlicePat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<SlicePat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2640,7 +2640,7 @@ impl AstNode for SliceType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<SliceType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<SliceType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2668,7 +2668,7 @@ impl AstNode for SourceFile {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<SourceFile> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<SourceFile> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2698,7 +2698,7 @@ impl AstNode for StaticDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<StaticDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<StaticDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2734,7 +2734,7 @@ impl AstNode for Stmt {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Stmt> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Stmt> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl Stmt {\n@@ -2767,7 +2767,7 @@ impl AstNode for String {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<String> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<String> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2792,7 +2792,7 @@ impl AstNode for StructDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<StructDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<StructDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2821,7 +2821,7 @@ impl AstNode for StructLit {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<StructLit> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<StructLit> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2857,7 +2857,7 @@ impl AstNode for StructPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<StructPat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<StructPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2881,7 +2881,7 @@ impl AstNode for TokenTree {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TokenTree> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TokenTree> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2905,7 +2905,7 @@ impl AstNode for TraitDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TraitDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TraitDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2933,7 +2933,7 @@ impl AstNode for TryExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TryExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TryExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2961,7 +2961,7 @@ impl AstNode for TupleExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TupleExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TupleExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -2985,7 +2985,7 @@ impl AstNode for TuplePat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TuplePat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TuplePat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3009,7 +3009,7 @@ impl AstNode for TupleStructPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TupleStructPat> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TupleStructPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3041,7 +3041,7 @@ impl AstNode for TupleType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TupleType> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TupleType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3069,7 +3069,7 @@ impl AstNode for TypeDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TypeDef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TypeDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3098,7 +3098,7 @@ impl AstNode for TypeParam {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TypeParam> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TypeParam> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3123,7 +3123,7 @@ impl AstNode for TypeParamList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TypeParamList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TypeParamList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3184,7 +3184,7 @@ impl AstNode for TypeRef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<TypeRef> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<TypeRef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl TypeRef {\n@@ -3228,7 +3228,7 @@ impl AstNode for UseItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<UseItem> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<UseItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3256,7 +3256,7 @@ impl AstNode for UseTree {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<UseTree> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<UseTree> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3288,7 +3288,7 @@ impl AstNode for UseTreeList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<UseTreeList> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<UseTreeList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3316,7 +3316,7 @@ impl AstNode for Visibility {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Visibility> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Visibility> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3340,7 +3340,7 @@ impl AstNode for WhereClause {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<WhereClause> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<WhereClause> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3364,7 +3364,7 @@ impl AstNode for WhileExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<WhileExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<WhileExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n \n@@ -3393,7 +3393,7 @@ impl AstNode for Whitespace {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<Whitespace> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<Whitespace> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n "}, {"sha": "bf9db4ee87f61fec1a380358008fb17c54c51497", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -15,7 +15,7 @@ use rowan::TransparentNewType;\n \n use crate::{\n     SyntaxNode, SyntaxKind::*,\n-    yellow::{RaTypes, TreePtr},\n+    yellow::{RaTypes, TreeArc},\n     ast::{self, AstNode},\n };\n {% for node, methods in ast %}\n@@ -48,7 +48,7 @@ impl AstNode for {{ node }} {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<{{ node }}> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<{{ node }}> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n impl {{ node }} {\n@@ -79,7 +79,7 @@ impl AstNode for {{ node }} {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-    fn to_owned(&self) -> TreePtr<{{ node }}> { TreePtr::cast(self.syntax.to_owned()) }\n+    fn to_owned(&self) -> TreeArc<{{ node }}> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n {% endif %}"}, {"sha": "2a095817a34788f6ffec172f06647cff105c656b", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -41,7 +41,7 @@ pub use crate::{\n     ast::AstNode,\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n-    yellow::{Direction, SyntaxError, SyntaxNode, WalkEvent, Location, TreePtr},\n+    yellow::{Direction, SyntaxError, SyntaxNode, WalkEvent, Location, TreeArc},\n };\n \n use ra_text_edit::AtomTextEdit;\n@@ -51,29 +51,29 @@ use crate::yellow::GreenNode;\n pub use crate::ast::SourceFile;\n \n impl SourceFile {\n-    fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreePtr<SourceFile> {\n+    fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SourceFile> {\n         let root = SyntaxNode::new(green, errors);\n         if cfg!(debug_assertions) {\n             utils::validate_block_structure(&root);\n         }\n         assert_eq!(root.kind(), SyntaxKind::SOURCE_FILE);\n-        TreePtr::cast(root)\n+        TreeArc::cast(root)\n     }\n-    pub fn parse(text: &str) -> TreePtr<SourceFile> {\n+    pub fn parse(text: &str) -> TreeArc<SourceFile> {\n         let tokens = tokenize(&text);\n         let (green, errors) =\n             parser_impl::parse_with(yellow::GreenBuilder::new(), text, &tokens, grammar::root);\n         SourceFile::new(green, errors)\n     }\n-    pub fn reparse(&self, edit: &AtomTextEdit) -> TreePtr<SourceFile> {\n+    pub fn reparse(&self, edit: &AtomTextEdit) -> TreeArc<SourceFile> {\n         self.incremental_reparse(edit)\n             .unwrap_or_else(|| self.full_reparse(edit))\n     }\n-    pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<TreePtr<SourceFile>> {\n+    pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<TreeArc<SourceFile>> {\n         reparsing::incremental_reparse(self.syntax(), edit, self.errors())\n             .map(|(green_node, errors)| SourceFile::new(green_node, errors))\n     }\n-    fn full_reparse(&self, edit: &AtomTextEdit) -> TreePtr<SourceFile> {\n+    fn full_reparse(&self, edit: &AtomTextEdit) -> TreeArc<SourceFile> {\n         let text = edit.apply(self.syntax().text().to_string());\n         SourceFile::parse(&text)\n     }"}, {"sha": "9bddabc801057d4057110219f5b2afd94362de24", "filename": "crates/ra_syntax/src/validation/byte.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -106,9 +106,9 @@ fn validate_byte_code_escape(text: &str, range: TextRange, errors: &mut Vec<Synt\n \n #[cfg(test)]\n mod test {\n-    use crate::{SourceFile, TreePtr};\n+    use crate::{SourceFile, TreeArc};\n \n-    fn build_file(literal: &str) -> TreePtr<SourceFile> {\n+    fn build_file(literal: &str) -> TreeArc<SourceFile> {\n         let src = format!(\"const C: u8 = b'{}';\", literal);\n         SourceFile::parse(&src)\n     }"}, {"sha": "bdb1475454e4b0b72ce1b1c8aec3317a38f7e5fe", "filename": "crates/ra_syntax/src/validation/byte_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -43,9 +43,9 @@ pub(crate) fn validate_byte_string_node(node: &ast::ByteString, errors: &mut Vec\n \n #[cfg(test)]\n mod test {\n-    use crate::{SourceFile, TreePtr};\n+    use crate::{SourceFile, TreeArc};\n \n-    fn build_file(literal: &str) -> TreePtr<SourceFile> {\n+    fn build_file(literal: &str) -> TreeArc<SourceFile> {\n         let src = format!(r#\"const S: &'static [u8] = b\"{}\";\"#, literal);\n         println!(\"Source: {}\", src);\n         SourceFile::parse(&src)"}, {"sha": "e3ac5836b43d329ad01e3da60cc20dadbb133b00", "filename": "crates/ra_syntax/src/validation/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -175,9 +175,9 @@ fn validate_unicode_escape(text: &str, range: TextRange, errors: &mut Vec<Syntax\n \n #[cfg(test)]\n mod test {\n-    use crate::{SourceFile, TreePtr};\n+    use crate::{SourceFile, TreeArc};\n \n-    fn build_file(literal: &str) -> TreePtr<SourceFile> {\n+    fn build_file(literal: &str) -> TreeArc<SourceFile> {\n         let src = format!(\"const C: char = '{}';\", literal);\n         SourceFile::parse(&src)\n     }"}, {"sha": "365fe8d2ddeec28bcd1087863b4c559ce5c781d6", "filename": "crates/ra_syntax/src/validation/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -38,9 +38,9 @@ pub(crate) fn validate_string_node(node: &ast::String, errors: &mut Vec<SyntaxEr\n \n #[cfg(test)]\n mod test {\n-    use crate::{SourceFile, TreePtr};\n+    use crate::{SourceFile, TreeArc};\n \n-    fn build_file(literal: &str) -> TreePtr<SourceFile> {\n+    fn build_file(literal: &str) -> TreeArc<SourceFile> {\n         let src = format!(r#\"const S: &'static str = \"{}\";\"#, literal);\n         println!(\"Source: {}\", src);\n         SourceFile::parse(&src)"}, {"sha": "93621d08abf9df03cab59d208f68f14da533cbea", "filename": "crates/ra_syntax/src/yellow.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3940d0ab862dbfaed4f4c844faaca6a38e31e9/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow.rs?ref=2d3940d0ab862dbfaed4f4c844faaca6a38e31e9", "patch": "@@ -21,23 +21,23 @@ impl Types for RaTypes {\n pub type GreenNode = rowan::GreenNode<RaTypes>;\n \n #[derive(PartialEq, Eq, Hash)]\n-pub struct TreePtr<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>>(\n-    pub(crate) rowan::TreePtr<RaTypes, T>,\n+pub struct TreeArc<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>>(\n+    pub(crate) rowan::TreeArc<RaTypes, T>,\n );\n \n-impl<T> TreePtr<T>\n+impl<T> TreeArc<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n {\n-    pub(crate) fn cast<U>(this: TreePtr<T>) -> TreePtr<U>\n+    pub(crate) fn cast<U>(this: TreeArc<T>) -> TreeArc<U>\n     where\n         U: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n     {\n-        TreePtr(rowan::TreePtr::cast(this.0))\n+        TreeArc(rowan::TreeArc::cast(this.0))\n     }\n }\n \n-impl<T> std::ops::Deref for TreePtr<T>\n+impl<T> std::ops::Deref for TreeArc<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n {\n@@ -47,7 +47,7 @@ where\n     }\n }\n \n-impl<T> PartialEq<T> for TreePtr<T>\n+impl<T> PartialEq<T> for TreeArc<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n     T: PartialEq<T>,\n@@ -58,16 +58,16 @@ where\n     }\n }\n \n-impl<T> Clone for TreePtr<T>\n+impl<T> Clone for TreeArc<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n {\n-    fn clone(&self) -> TreePtr<T> {\n-        TreePtr(self.0.clone())\n+    fn clone(&self) -> TreeArc<T> {\n+        TreeArc(self.0.clone())\n     }\n }\n \n-impl<T> fmt::Debug for TreePtr<T>\n+impl<T> fmt::Debug for TreeArc<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n     T: fmt::Debug,\n@@ -85,9 +85,9 @@ unsafe impl TransparentNewType for SyntaxNode {\n }\n \n impl SyntaxNode {\n-    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreePtr<SyntaxNode> {\n-        let ptr = TreePtr(rowan::SyntaxNode::new(green, errors));\n-        TreePtr::cast(ptr)\n+    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> TreeArc<SyntaxNode> {\n+        let ptr = TreeArc(rowan::SyntaxNode::new(green, errors));\n+        TreeArc::cast(ptr)\n     }\n }\n \n@@ -131,9 +131,9 @@ impl SyntaxNode {\n     pub(crate) fn replace_with(&self, replacement: GreenNode) -> GreenNode {\n         self.0.replace_self(replacement)\n     }\n-    pub fn to_owned(&self) -> TreePtr<SyntaxNode> {\n-        let ptr = TreePtr(self.0.to_owned());\n-        TreePtr::cast(ptr)\n+    pub fn to_owned(&self) -> TreeArc<SyntaxNode> {\n+        let ptr = TreeArc(self.0.to_owned());\n+        TreeArc::cast(ptr)\n     }\n     pub fn kind(&self) -> SyntaxKind {\n         self.0.kind()"}]}