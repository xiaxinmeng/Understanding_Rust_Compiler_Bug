{"sha": "a0e756bc79ea6482606a75dfdb300fe2fcafa95f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTc1NmJjNzllYTY0ODI2MDZhNzVkZmRiMzAwZmUyZmNhZmE5NWY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-26T23:56:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-26T23:56:08Z"}, "message": "Rollup merge of #66663 - RalfJung:miri-leaks, r=oli-obk\n\nMiri: print leak report even without tracing\n\nCurrently, the rustup-installed Miri has no way to actually print a leak report (as `trace!` is compiled out). Make it print that per default instead when there is a leak.\n\nr? @oli-obk", "tree": {"sha": "d64ad57cd8b03b65d629c246bb15f08dfbc8bd9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64ad57cd8b03b65d629c246bb15f08dfbc8bd9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e756bc79ea6482606a75dfdb300fe2fcafa95f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3buZCRBK7hj4Ov3rIwAAdHIIAFvtJuXZUsGgASUrES9SNwHQ\n1PudpaFsQouNPNq9e0AJFHDxUc64Uy8qkSuEp+8omgrucwq6XBdBpe71jfS4cgO5\n9wKEx3zTcOsl0nV5vwljUgeE3I3B2Aguy7QXixw1Dm3Tnr6PikuE4v4pX1F2EPNE\nle/AvASi9nQdOEOgO0SILJo1R8bBwdCHsfn4PAQbLTbtrI7KVU5W323y6cbuUHHE\nES1H31C79Xs8U3F+yYGa+yDoLugEFsYK5xWvi+cEi9Hu7i8DmGs5zW8EEmVr1jP4\nYwteExANTaGkAjEV9nL5vSQjc490UzhVtsEi+sw+fCbW+IKkloy6B+ujyGqW4BA=\n=OuA8\n-----END PGP SIGNATURE-----\n", "payload": "tree d64ad57cd8b03b65d629c246bb15f08dfbc8bd9e\nparent a49f23e05d8f9510ddc707285fdb72cea4832839\nparent 9233a54176441b9d63b3da33814794adb8bf0e5d\nauthor Tyler Mandry <tmandry@gmail.com> 1574812568 -0600\ncommitter GitHub <noreply@github.com> 1574812568 -0600\n\nRollup merge of #66663 - RalfJung:miri-leaks, r=oli-obk\n\nMiri: print leak report even without tracing\n\nCurrently, the rustup-installed Miri has no way to actually print a leak report (as `trace!` is compiled out). Make it print that per default instead when there is a leak.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e756bc79ea6482606a75dfdb300fe2fcafa95f", "html_url": "https://github.com/rust-lang/rust/commit/a0e756bc79ea6482606a75dfdb300fe2fcafa95f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e756bc79ea6482606a75dfdb300fe2fcafa95f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49f23e05d8f9510ddc707285fdb72cea4832839", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49f23e05d8f9510ddc707285fdb72cea4832839", "html_url": "https://github.com/rust-lang/rust/commit/a49f23e05d8f9510ddc707285fdb72cea4832839"}, {"sha": "9233a54176441b9d63b3da33814794adb8bf0e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9233a54176441b9d63b3da33814794adb8bf0e5d", "html_url": "https://github.com/rust-lang/rust/commit/9233a54176441b9d63b3da33814794adb8bf0e5d"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "78e03a555eec2cec54919ab75575c7d9cd802fa3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0e756bc79ea6482606a75dfdb300fe2fcafa95f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e756bc79ea6482606a75dfdb300fe2fcafa95f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a0e756bc79ea6482606a75dfdb300fe2fcafa95f", "patch": "@@ -705,7 +705,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {\n             trace!(\"deallocating local\");\n             let ptr = ptr.to_ptr()?;\n-            self.memory.dump_alloc(ptr.alloc_id);\n+            if log_enabled!(::log::Level::Trace) {\n+                self.memory.dump_alloc(ptr.alloc_id);\n+            }\n             self.memory.deallocate_local(ptr)?;\n         };\n         Ok(())"}, {"sha": "eccdc5b03261b8dbbe8f47ba040d1b434e2cb09c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0e756bc79ea6482606a75dfdb300fe2fcafa95f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e756bc79ea6482606a75dfdb300fe2fcafa95f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=a0e756bc79ea6482606a75dfdb300fe2fcafa95f", "patch": "@@ -635,7 +635,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    /// For debugging, print an allocation and all allocations it points to, recursively.\n+    /// Print an allocation and all allocations it points to, recursively.\n+    /// This prints directly to stderr, ignoring RUSTC_LOG! It is up to the caller to\n+    /// control for this.\n     pub fn dump_alloc(&self, id: AllocId) {\n         self.dump_allocs(vec![id]);\n     }\n@@ -674,7 +676,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         }\n \n-        trace!(\n+        eprintln!(\n             \"{}({} bytes, alignment {}){}\",\n             msg,\n             alloc.size.bytes(),\n@@ -695,15 +697,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 write!(msg, \"\u2514{0:\u2500^1$}\u2518 \", target, relocation_width as usize).unwrap();\n                 pos = i + self.pointer_size();\n             }\n-            trace!(\"{}\", msg);\n+            eprintln!(\"{}\", msg);\n         }\n     }\n \n-    /// For debugging, print a list of allocations and all allocations they point to, recursively.\n+    /// Print a list of allocations and all allocations they point to, recursively.\n+    /// This prints directly to stderr, ignoring RUSTC_LOG! It is up to the caller to\n+    /// control for this.\n     pub fn dump_allocs(&self, mut allocs: Vec<AllocId>) {\n-        if !log_enabled!(::log::Level::Trace) {\n-            return;\n-        }\n         allocs.sort();\n         allocs.dedup();\n         let mut allocs_to_print = VecDeque::from(allocs);\n@@ -735,13 +736,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                             );\n                         }\n                         Some(GlobalAlloc::Function(func)) => {\n-                            trace!(\"{} {}\", msg, func);\n+                            eprintln!(\"{} {}\", msg, func);\n                         }\n                         Some(GlobalAlloc::Static(did)) => {\n-                            trace!(\"{} {:?}\", msg, did);\n+                            eprintln!(\"{} {:?}\", msg, did);\n                         }\n                         None => {\n-                            trace!(\"{} (deallocated)\", msg);\n+                            eprintln!(\"{} (deallocated)\", msg);\n                         }\n                     }\n                 },\n@@ -751,12 +752,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     }\n \n     pub fn leak_report(&self) -> usize {\n-        trace!(\"### LEAK REPORT ###\");\n         let leaks: Vec<_> = self.alloc_map.filter_map_collect(|&id, &(kind, _)| {\n             if kind.may_leak() { None } else { Some(id) }\n         });\n         let n = leaks.len();\n-        self.dump_allocs(leaks);\n+        if n > 0 {\n+            eprintln!(\"### LEAK REPORT ###\");\n+            self.dump_allocs(leaks);\n+        }\n         n\n     }\n "}]}