{"sha": "7a3c7b2097961138a92a771145dba7012f5c70f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhM2M3YjIwOTc5NjExMzhhOTJhNzcxMTQ1ZGJhNzAxMmY1YzcwZjg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-27T20:59:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-28T13:18:38Z"}, "message": "Don't display full blanket implementation and put it into its own section", "tree": {"sha": "0cc09c3ff65844352b06dd6e653136f6026b2117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc09c3ff65844352b06dd6e653136f6026b2117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3c7b2097961138a92a771145dba7012f5c70f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3c7b2097961138a92a771145dba7012f5c70f8", "html_url": "https://github.com/rust-lang/rust/commit/7a3c7b2097961138a92a771145dba7012f5c70f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3c7b2097961138a92a771145dba7012f5c70f8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "html_url": "https://github.com/rust-lang/rust/commit/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf"}], "stats": {"total": 83, "additions": 59, "deletions": 24}, "files": [{"sha": "d0d5713ec0a3fc7b2010d7f7b49e20622fc66f9b", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                          .collect();\n \n                             let ty = self.get_real_ty(def_id, def_ctor, &real_name, generics);\n-                            let predicates = infcx.tcx.predicates_of(def_id);\n+                            let predicates = infcx.tcx.predicates_of(impl_def_id);\n \n                             traits.push(Item {\n                                 source: infcx.tcx.def_span(impl_def_id).clean(self.cx),\n@@ -218,7 +218,9 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                                     .collect::<Vec<_>>()\n                                                     .clean(self.cx),\n                                     polarity: None,\n-                                    synthetic: true,\n+                                    synthetic: false,\n+                                    blanket_impl: Some(infcx.tcx.type_of(impl_def_id)\n+                                                                .clean(self.cx)),\n                                 }),\n                             });\n                             debug!(\"{:?} => {}\", trait_ref, may_apply);\n@@ -345,6 +347,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     items: Vec::new(),\n                     polarity,\n                     synthetic: true,\n+                    blanket_impl: None,\n                 }),\n             });\n         }"}, {"sha": "9245ef3cf507bd89cbcce6c3ff643de81bdbaf51", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -414,6 +414,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n             items: trait_items,\n             polarity: Some(polarity.clean(cx)),\n             synthetic: false,\n+            blanket_impl: None,\n         }),\n         source: tcx.def_span(did).clean(cx),\n         name: None,"}, {"sha": "89f328016ec54299372893f66f85104394039d43", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -3881,6 +3881,7 @@ pub struct Impl {\n     pub items: Vec<Item>,\n     pub polarity: Option<ImplPolarity>,\n     pub synthetic: bool,\n+    pub blanket_impl: Option<Type>,\n }\n \n pub fn get_auto_traits_with_node_id(cx: &DocContext, id: ast::NodeId, name: String) -> Vec<Item> {\n@@ -3948,6 +3949,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                 items,\n                 polarity: Some(self.polarity.clean(cx)),\n                 synthetic: false,\n+                blanket_impl: None,\n             })\n         });\n         ret"}, {"sha": "9c7354a7c63fc196593b4b1c609e0d94ad19150c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -769,7 +769,11 @@ fn fmt_impl(i: &clean::Impl,\n         write!(f, \" for \")?;\n     }\n \n-    fmt_type(&i.for_, f, use_absolute)?;\n+    if let Some(ref ty) = i.blanket_impl {\n+        fmt_type(ty, f, use_absolute)?;\n+    } else {\n+        fmt_type(&i.for_, f, use_absolute)?;\n+    }\n \n     fmt::Display::fmt(&WhereClause { gens: &i.generics, indent: 0, end_newline: true }, f)?;\n     Ok(())"}, {"sha": "200c961cf5dc2c4711bd7f2e38419c774558529b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -177,7 +177,7 @@ pub enum ExternalLocation {\n }\n \n /// Metadata about implementations for a type or trait.\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct Impl {\n     pub impl_item: clean::Item,\n }\n@@ -2900,18 +2900,18 @@ fn item_trait(\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)?;\n \n     let cache = cache();\n-    let impl_header = \"\n-        <h2 id='implementors' class='small-section-header'>\n-          Implementors<a href='#implementors' class='anchor'></a>\n-        </h2>\n-        <ul class='item-list' id='implementors-list'>\n+    let impl_header = \"\\\n+        <h2 id='implementors' class='small-section-header'>\\\n+          Implementors<a href='#implementors' class='anchor'></a>\\\n+        </h2>\\\n+        <ul class='item-list' id='implementors-list'>\\\n     \";\n \n-    let synthetic_impl_header = \"\n-        <h2 id='synthetic-implementors' class='small-section-header'>\n-          Auto implementors<a href='#synthetic-implementors' class='anchor'></a>\n-        </h2>\n-        <ul class='item-list' id='synthetic-implementors-list'>\n+    let synthetic_impl_header = \"\\\n+        <h2 id='synthetic-implementors' class='small-section-header'>\\\n+          Auto implementors<a href='#synthetic-implementors' class='anchor'></a>\\\n+        </h2>\\\n+        <ul class='item-list' id='synthetic-implementors-list'>\\\n     \";\n \n     let mut synthetic_types = Vec::new();\n@@ -2942,9 +2942,9 @@ fn item_trait(\n                                          .map_or(true, |d| cache.paths.contains_key(&d)));\n \n \n-        let (synthetic, concrete) = local.iter()\n-            .partition::<Vec<_>, _>(|i| i.inner_impl().synthetic);\n-\n+        let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n+            .filter(|i| i.inner_impl().blanket_impl.is_none())\n+            .partition(|i| i.inner_impl().synthetic);\n \n         if !foreign.is_empty() {\n             write!(w, \"\n@@ -3626,9 +3626,12 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut)?;\n         }\n \n-        let (synthetic, concrete) = traits\n+        let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = traits\n             .iter()\n-            .partition::<Vec<_>, _>(|t| t.inner_impl().synthetic);\n+            .partition(|t| t.inner_impl().synthetic);\n+        let (blanket_impl, concrete) = concrete\n+            .into_iter()\n+            .partition(|t| t.inner_impl().blanket_impl.is_some());\n \n         struct RendererStruct<'a, 'b, 'c>(&'a Context, Vec<&'b &'b Impl>, &'c clean::Item);\n \n@@ -3658,6 +3661,18 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             render_impls(cx, w, &synthetic, containing_item)?;\n             write!(w, \"</div>\")?;\n         }\n+\n+        if !blanket_impl.is_empty() {\n+            write!(w, \"\\\n+                <h2 id='blanket-implementations' class='small-section-header'>\\\n+                  Blanket Implementations\\\n+                  <a href='#blanket-implementations' class='anchor'></a>\\\n+                </h2>\\\n+                <div id='blanket-implementations-list'>\\\n+            \")?;\n+            render_impls(cx, w, &blanket_impl, containing_item)?;\n+            write!(w, \"</div>\")?;\n+        }\n     }\n     Ok(())\n }\n@@ -4203,12 +4218,16 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                            .collect::<String>()\n             };\n \n-            let (synthetic, concrete) = v\n+            let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) = v\n                 .iter()\n                 .partition::<Vec<_>, _>(|i| i.inner_impl().synthetic);\n+            let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) = concrete\n+                .into_iter()\n+                .partition::<Vec<_>, _>(|i| i.inner_impl().blanket_impl.is_some());\n \n             let concrete_format = format_impls(concrete);\n             let synthetic_format = format_impls(synthetic);\n+            let blanket_format = format_impls(blanket_impl);\n \n             if !concrete_format.is_empty() {\n                 out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#implementations\\\">\\\n@@ -4221,6 +4240,12 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                               Auto Trait Implementations</a>\");\n                 out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", synthetic_format));\n             }\n+\n+            if !blanket_format.is_empty() {\n+                out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#blanket-implementations\\\">\\\n+                              Blanket Implementations</a>\");\n+                out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", blanket_format));\n+            }\n         }\n     }\n "}, {"sha": "e2665fd8f375b5bc136c3142a3927b209946d16d", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -12,10 +12,10 @@\n \n use std::fmt;\n \n-// @!has foo/struct.Bar.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for Bar'\n+// @!has foo/struct.Bar.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n pub struct Bar;\n \n-// @has foo/struct.Foo.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for Foo'\n+// @has foo/struct.Foo.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n pub struct Foo;\n \n impl fmt::Display for Foo {"}, {"sha": "8ff84d11a5009874ced4f941da3ce7777e42a839", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -12,7 +12,7 @@\n // @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n // @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 9\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 2\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "ef6797ecf3c54277ce872fd01541907a3e46d171", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3c7b2097961138a92a771145dba7012f5c70f8/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=7a3c7b2097961138a92a771145dba7012f5c70f8", "patch": "@@ -16,7 +16,7 @@\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 8\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 1\n pub struct Foo<T> {\n     field: T,\n }"}]}