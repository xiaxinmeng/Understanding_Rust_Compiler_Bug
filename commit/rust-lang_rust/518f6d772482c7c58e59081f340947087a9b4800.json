{"sha": "518f6d772482c7c58e59081f340947087a9b4800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOGY2ZDc3MjQ4MmM3YzU4ZTU5MDgxZjM0MDk0NzA4N2E5YjQ4MDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-12T07:38:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T07:38:24Z"}, "message": "Merge #5917\n\n5917: Add a command to open docs for the symbol under the cursor r=matklad a=zacps\n\n#### Todo\r\n\r\n- [ ] Decide if there should be a default keybind or context menu entry\r\n- [x] Figure out how to get the documentation path for methods and other non-top-level defs\r\n- [x] Design the protocol extension. In future we'll probably want parameters for local/remote documentation URLs, so that should maybe be done in this PR?\r\n- [x] Code organisation\r\n- [x] Tests\r\n\n\nCo-authored-by: Zac Pullar-Strecker <zacmps@gmail.com>", "tree": {"sha": "d904f1b98cad63944b4c405238d8b3938a9debb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d904f1b98cad63944b4c405238d8b3938a9debb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/518f6d772482c7c58e59081f340947087a9b4800", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhAfwCRBK7hj4Ov3rIwAAdHIIAET14YjkckjkYVVYajqmmMRG\nUU1eINyaqemGKpxReiKD6PN5TL56DVA02c1XKjnSFRlzVgwwHn2n2d3yzkQjKfRH\nxFoQiKc+nFxWlm+m2LLyCLIYf9Pn7aUkFbUr8ct2TiM1EJlTFjDewE5+jmQV+K5o\nGlYXfYTP54ZDzGjw6yqxKyxleLVcpAw2VAAyZ0HMbcKVe6niBViCioyn6P8g8RmX\nKf4XeezrY1udH2D3llr4sp7OZq3QA/Uu8JXB5f7YPLSF58if2EZsktJddlrQpWic\nhR0ZrJz+DjLZPRHlKuH8d3z0kz4rsGPSzMlv3mw1yQRwFhnZ8KH3nA1V4lk/gUQ=\n=6+cz\n-----END PGP SIGNATURE-----\n", "payload": "tree d904f1b98cad63944b4c405238d8b3938a9debb9\nparent d5fcedb38eec33e2eb12ed550a9b90f6950855fe\nparent 3bd4fe96dce17eb2bff380389b24ea325bf54803\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602488304 +0000\ncommitter GitHub <noreply@github.com> 1602488304 +0000\n\nMerge #5917\n\n5917: Add a command to open docs for the symbol under the cursor r=matklad a=zacps\n\n#### Todo\r\n\r\n- [ ] Decide if there should be a default keybind or context menu entry\r\n- [x] Figure out how to get the documentation path for methods and other non-top-level defs\r\n- [x] Design the protocol extension. In future we'll probably want parameters for local/remote documentation URLs, so that should maybe be done in this PR?\r\n- [x] Code organisation\r\n- [x] Tests\r\n\n\nCo-authored-by: Zac Pullar-Strecker <zacmps@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/518f6d772482c7c58e59081f340947087a9b4800", "html_url": "https://github.com/rust-lang/rust/commit/518f6d772482c7c58e59081f340947087a9b4800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/518f6d772482c7c58e59081f340947087a9b4800/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5fcedb38eec33e2eb12ed550a9b90f6950855fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fcedb38eec33e2eb12ed550a9b90f6950855fe", "html_url": "https://github.com/rust-lang/rust/commit/d5fcedb38eec33e2eb12ed550a9b90f6950855fe"}, {"sha": "3bd4fe96dce17eb2bff380389b24ea325bf54803", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd4fe96dce17eb2bff380389b24ea325bf54803", "html_url": "https://github.com/rust-lang/rust/commit/3bd4fe96dce17eb2bff380389b24ea325bf54803"}], "stats": {"total": 435, "additions": 403, "deletions": 32}, "files": [{"sha": "650b4fa40cec48995c67f53551a5bcacfe965412", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -186,6 +186,16 @@ impl_from!(\n     for ModuleDef\n );\n \n+impl From<VariantDef> for ModuleDef {\n+    fn from(var: VariantDef) -> Self {\n+        match var {\n+            VariantDef::Struct(t) => Adt::from(t).into(),\n+            VariantDef::Union(t) => Adt::from(t).into(),\n+            VariantDef::EnumVariant(t) => t.into(),\n+        }\n+    }\n+}\n+\n impl ModuleDef {\n     pub fn module(self, db: &dyn HirDatabase) -> Option<Module> {\n         match self {\n@@ -752,6 +762,13 @@ impl Function {\n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n         hir_ty::diagnostics::validate_body(db, self.id.into(), sink)\n     }\n+\n+    /// Whether this function declaration has a definition.\n+    ///\n+    /// This is false in the case of required (not provided) trait methods.\n+    pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).has_body\n+    }\n }\n \n // Note: logically, this belongs to `hir_ty`, but we are not using it there yet."}, {"sha": "ff1ef0df64e597e0473d16304d2571c8b231a828", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -25,6 +25,7 @@ pub struct FunctionData {\n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n     pub has_self_param: bool,\n+    pub has_body: bool,\n     pub is_unsafe: bool,\n     pub is_varargs: bool,\n     pub visibility: RawVisibility,\n@@ -42,6 +43,7 @@ impl FunctionData {\n             ret_type: func.ret_type.clone(),\n             attrs: item_tree.attrs(ModItem::from(loc.id.value).into()).clone(),\n             has_self_param: func.has_self_param,\n+            has_body: func.has_body,\n             is_unsafe: func.is_unsafe,\n             is_varargs: func.is_varargs,\n             visibility: item_tree[func.visibility].clone(),"}, {"sha": "8a1121bbdfbc3a9bd46b9422aeb939dfed53d349", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -505,6 +505,7 @@ pub struct Function {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub has_self_param: bool,\n+    pub has_body: bool,\n     pub is_unsafe: bool,\n     pub params: Box<[TypeRef]>,\n     pub is_varargs: bool,"}, {"sha": "3328639cfe3f1fba288308c32b887fd3e382ecc1", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -330,12 +330,15 @@ impl Ctx {\n             ret_type\n         };\n \n+        let has_body = func.body().is_some();\n+\n         let ast_id = self.source_ast_id_map.ast_id(func);\n         let mut res = Function {\n             name,\n             visibility,\n             generic_params: GenericParamsId::EMPTY,\n             has_self_param,\n+            has_body,\n             is_unsafe: func.unsafe_token().is_some(),\n             params: params.into_boxed_slice(),\n             is_varargs,"}, {"sha": "4b354c4c145e53948d65d6e6cad28324f16f2115", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -240,9 +240,9 @@ fn smoke() {\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n             > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<syntax::ast::generated::nodes::Const>(9) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(10) }\n+            > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, has_body: false, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(10) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(11) }\n+            > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, has_body: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(11) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n             Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<syntax::ast::generated::nodes::Struct>(3), kind: Unit }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n@@ -275,12 +275,12 @@ fn simple_inner_items() {\n \n             top-level items:\n             Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<syntax::ast::generated::nodes::Impl>(0) }\n-            > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n+            > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n \n             inner items:\n \n             for AST FileAstId::<syntax::ast::generated::nodes::Item>(2):\n-            Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n+            Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n \n         \"#]],\n     );\n@@ -303,9 +303,9 @@ fn extern_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n+            Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n+            Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n         \"##]],\n     );\n }\n@@ -329,9 +329,9 @@ fn trait_attrs() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n             Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<syntax::ast::generated::nodes::Trait>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n+            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n+            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n         \"##]],\n     );\n }\n@@ -355,9 +355,9 @@ fn impl_attrs() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n             Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<syntax::ast::generated::nodes::Impl>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n+            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n+            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(2) }\n         \"##]],\n     );\n }\n@@ -408,13 +408,13 @@ fn inner_item_attrs() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(0) }\n+            Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(0) }\n \n             inner items:\n \n             for AST FileAstId::<syntax::ast::generated::nodes::Item>(1):\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_inner\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n+            Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, has_body: true, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<syntax::ast::generated::nodes::Fn>(1) }\n \n         \"##]],\n     );"}, {"sha": "06af36b73e1cd33a451801baf7f384e252b90eac", "filename": "crates/ide/src/doc_links.rs", "status": "renamed", "additions": 277, "deletions": 8, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -1,13 +1,27 @@\n //! Resolves and rewrites links in markdown documentation.\n-//!\n-//! Most of the implementation can be found in [`hir::doc_links`].\n \n-use hir::{Adt, Crate, HasAttrs, ModuleDef};\n-use ide_db::{defs::Definition, RootDatabase};\n+use std::iter::once;\n+\n+use itertools::Itertools;\n use pulldown_cmark::{CowStr, Event, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use url::Url;\n \n+use hir::{\n+    db::{DefDatabase, HirDatabase},\n+    Adt, AsAssocItem, AsName, AssocItem, AssocItemContainer, Crate, Field, HasAttrs, ItemInNs,\n+    ModuleDef,\n+};\n+use ide_db::{\n+    defs::{classify_name, classify_name_ref, Definition},\n+    RootDatabase,\n+};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+\n+use crate::{FilePosition, Semantics};\n+\n+pub type DocumentationLink = String;\n+\n /// Rewrite documentation links in markdown to point to an online host (e.g. docs.rs)\n pub fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition) -> String {\n     let doc = Parser::new_with_broken_link_callback(\n@@ -80,6 +94,70 @@ pub fn remove_links(markdown: &str) -> String {\n     out\n }\n \n+// FIXME:\n+// BUG: For Option::Some\n+// Returns https://doc.rust-lang.org/nightly/core/prelude/v1/enum.Option.html#variant.Some\n+// Instead of https://doc.rust-lang.org/nightly/core/option/enum.Option.html\n+//\n+// This should cease to be a problem if RFC2988 (Stable Rustdoc URLs) is implemented\n+// https://github.com/rust-lang/rfcs/pull/2988\n+fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n+    // Get the outermost definition for the moduledef. This is used to resolve the public path to the type,\n+    // then we can join the method, field, etc onto it if required.\n+    let target_def: ModuleDef = match definition {\n+        Definition::ModuleDef(moddef) => match moddef {\n+            ModuleDef::Function(f) => f\n+                .as_assoc_item(db)\n+                .and_then(|assoc| match assoc.container(db) {\n+                    AssocItemContainer::Trait(t) => Some(t.into()),\n+                    AssocItemContainer::ImplDef(impld) => {\n+                        impld.target_ty(db).as_adt().map(|adt| adt.into())\n+                    }\n+                })\n+                .unwrap_or_else(|| f.clone().into()),\n+            moddef => moddef,\n+        },\n+        Definition::Field(f) => f.parent_def(db).into(),\n+        // FIXME: Handle macros\n+        _ => return None,\n+    };\n+\n+    let ns = ItemInNs::from(target_def.clone());\n+\n+    let module = definition.module(db)?;\n+    let krate = module.krate();\n+    let import_map = db.import_map(krate.into());\n+    let base = once(krate.declaration_name(db)?.to_string())\n+        .chain(import_map.path_of(ns)?.segments.iter().map(|name| name.to_string()))\n+        .join(\"/\");\n+\n+    let filename = get_symbol_filename(db, &target_def);\n+    let fragment = match definition {\n+        Definition::ModuleDef(moddef) => match moddef {\n+            ModuleDef::Function(f) => {\n+                get_symbol_fragment(db, &FieldOrAssocItem::AssocItem(AssocItem::Function(f)))\n+            }\n+            ModuleDef::Const(c) => {\n+                get_symbol_fragment(db, &FieldOrAssocItem::AssocItem(AssocItem::Const(c)))\n+            }\n+            ModuleDef::TypeAlias(ty) => {\n+                get_symbol_fragment(db, &FieldOrAssocItem::AssocItem(AssocItem::TypeAlias(ty)))\n+            }\n+            _ => None,\n+        },\n+        Definition::Field(field) => get_symbol_fragment(db, &FieldOrAssocItem::Field(field)),\n+        _ => None,\n+    };\n+\n+    get_doc_url(db, &krate)\n+        .and_then(|url| url.join(&base).ok())\n+        .and_then(|url| filename.as_deref().and_then(|f| url.join(f).ok()))\n+        .and_then(\n+            |url| if let Some(fragment) = fragment { url.join(&fragment).ok() } else { Some(url) },\n+        )\n+        .map(|url| url.into_string())\n+}\n+\n fn rewrite_intra_doc_link(\n     db: &RootDatabase,\n     def: Definition,\n@@ -138,7 +216,29 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n         .map(|url| url.into_string())\n }\n \n-// Rewrites a markdown document, resolving links using `callback` and additionally striping prefixes/suffixes on link titles.\n+/// Retrieve a link to documentation for the given symbol.\n+pub(crate) fn external_docs(\n+    db: &RootDatabase,\n+    position: &FilePosition,\n+) -> Option<DocumentationLink> {\n+    let sema = Semantics::new(db);\n+    let file = sema.parse(position.file_id).syntax().clone();\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n+    let token = sema.descend_into_macros(token);\n+\n+    let node = token.parent();\n+    let definition = match_ast! {\n+        match node {\n+            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition(sema.db)),\n+            _ => None,\n+        }\n+    };\n+\n+    get_doc_link(db, definition?)\n+}\n+\n+/// Rewrites a markdown document, applying 'callback' to each link.\n fn map_links<'e>(\n     events: impl Iterator<Item = Event<'e>>,\n     callback: impl Fn(&str, &str) -> (String, String),\n@@ -239,6 +339,12 @@ fn ns_from_intra_spec(s: &str) -> Option<hir::Namespace> {\n     .next()\n }\n \n+/// Get the root URL for the documentation of a crate.\n+///\n+/// ```\n+/// https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\n+/// ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+/// ```\n fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n     krate\n         .get_html_root_url(db)\n@@ -255,8 +361,11 @@ fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n \n /// Get the filename and extension generated for a symbol by rustdoc.\n ///\n-/// Example: `struct.Shard.html`\n-fn get_symbol_filename(db: &RootDatabase, definition: &ModuleDef) -> Option<String> {\n+/// ```\n+/// https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\n+///                                    ^^^^^^^^^^^^^^^^^^^\n+/// ```\n+fn get_symbol_filename(db: &dyn HirDatabase, definition: &ModuleDef) -> Option<String> {\n     Some(match definition {\n         ModuleDef::Adt(adt) => match adt {\n             Adt::Struct(s) => format!(\"struct.{}.html\", s.name(db)),\n@@ -266,7 +375,7 @@ fn get_symbol_filename(db: &RootDatabase, definition: &ModuleDef) -> Option<Stri\n         ModuleDef::Module(_) => \"index.html\".to_string(),\n         ModuleDef::Trait(t) => format!(\"trait.{}.html\", t.name(db)),\n         ModuleDef::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n-        ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t),\n+        ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.as_name()),\n         ModuleDef::Function(f) => format!(\"fn.{}.html\", f.name(db)),\n         ModuleDef::EnumVariant(ev) => {\n             format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))\n@@ -275,3 +384,163 @@ fn get_symbol_filename(db: &RootDatabase, definition: &ModuleDef) -> Option<Stri\n         ModuleDef::Static(s) => format!(\"static.{}.html\", s.name(db)?),\n     })\n }\n+\n+enum FieldOrAssocItem {\n+    Field(Field),\n+    AssocItem(AssocItem),\n+}\n+\n+/// Get the fragment required to link to a specific field, method, associated type, or associated constant.\n+///\n+/// ```\n+/// https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\n+///                                                       ^^^^^^^^^^^^^^\n+/// ```\n+fn get_symbol_fragment(db: &dyn HirDatabase, field_or_assoc: &FieldOrAssocItem) -> Option<String> {\n+    Some(match field_or_assoc {\n+        FieldOrAssocItem::Field(field) => format!(\"#structfield.{}\", field.name(db)),\n+        FieldOrAssocItem::AssocItem(assoc) => match assoc {\n+            AssocItem::Function(function) => {\n+                let is_trait_method = matches!(\n+                    function.as_assoc_item(db).map(|assoc| assoc.container(db)),\n+                    Some(AssocItemContainer::Trait(..))\n+                );\n+                // This distinction may get more complicated when specialisation is available.\n+                // Rustdoc makes this decision based on whether a method 'has defaultness'.\n+                // Currently this is only the case for provided trait methods.\n+                if is_trait_method && !function.has_body(db) {\n+                    format!(\"#tymethod.{}\", function.name(db))\n+                } else {\n+                    format!(\"#method.{}\", function.name(db))\n+                }\n+            }\n+            AssocItem::Const(constant) => format!(\"#associatedconstant.{}\", constant.name(db)?),\n+            AssocItem::TypeAlias(ty) => format!(\"#associatedtype.{}\", ty.name(db)),\n+        },\n+    })\n+}\n+\n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 3,\n+            T!['('] | T![')'] => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::{expect, Expect};\n+\n+    use crate::fixture;\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let url = analysis.external_docs(position).unwrap().expect(\"could not find url for symbol\");\n+\n+        expect.assert_eq(&url)\n+    }\n+\n+    #[test]\n+    fn test_doc_url_struct() {\n+        check(\n+            r#\"\n+pub struct Fo<|>o;\n+\"#,\n+            expect![[r#\"https://docs.rs/test/*/test/struct.Foo.html\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_fn() {\n+        check(\n+            r#\"\n+pub fn fo<|>o() {}\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/fn.foo.html#method.foo\"##]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_inherent_method() {\n+        check(\n+            r#\"\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn met<|>hod() {}\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#method.method\"##]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_trait_provided_method() {\n+        check(\n+            r#\"\n+pub trait Bar {\n+    fn met<|>hod() {}\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/trait.Bar.html#method.method\"##]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_trait_required_method() {\n+        check(\n+            r#\"\n+pub trait Foo {\n+    fn met<|>hod();\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/trait.Foo.html#tymethod.method\"##]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_field() {\n+        check(\n+            r#\"\n+pub struct Foo {\n+    pub fie<|>ld: ()\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#structfield.field\"##]],\n+        );\n+    }\n+\n+    // FIXME: ImportMap will return re-export paths instead of public module\n+    // paths. The correct path to documentation will never be a re-export.\n+    // This problem stops us from resolving stdlib items included in the prelude\n+    // such as `Option::Some` correctly.\n+    #[ignore = \"ImportMap may return re-exports\"]\n+    #[test]\n+    fn test_reexport_order() {\n+        check(\n+            r#\"\n+pub mod wrapper {\n+    pub use module::Item;\n+\n+    pub mod module {\n+        pub struct Item;\n+    }\n+}\n+\n+fn foo() {\n+    let bar: wrapper::It<|>em;\n+}\n+        \"#,\n+            expect![[r#\"https://docs.rs/test/*/test/wrapper/module/struct.Item.html\"#]],\n+        )\n+    }\n+}", "previous_filename": "crates/ide/src/link_rewrite.rs"}, {"sha": "6290b35bd8949b56639d45393edc1f402b5d65bf", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -14,7 +14,7 @@ use test_utils::mark;\n \n use crate::{\n     display::{macro_label, ShortLabel, ToNav, TryToNav},\n-    link_rewrite::{remove_links, rewrite_links},\n+    doc_links::{remove_links, rewrite_links},\n     markdown_remove::remove_markdown,\n     markup::Markup,\n     runnables::runnable,"}, {"sha": "686cee3a1bff7207e1fa1f1a0be50933ce48a89c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -45,8 +45,8 @@ mod status;\n mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n-mod link_rewrite;\n mod markdown_remove;\n+mod doc_links;\n \n use std::sync::Arc;\n \n@@ -384,6 +384,14 @@ impl Analysis {\n         self.with_db(|db| hover::hover(db, position, links_in_hover, markdown))\n     }\n \n+    /// Return URL(s) for the documentation of the symbol under the cursor.\n+    pub fn external_docs(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Option<doc_links::DocumentationLink>> {\n+        self.with_db(|db| doc_links::external_docs(db, &position))\n+    }\n+\n     /// Computes parameter information for the given call expression.\n     pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n         self.with_db(|db| call_info::call_info(db, position))"}, {"sha": "215be850fddc3c997e4c52fbf18efb97e6d2369e", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -1301,6 +1301,18 @@ pub(crate) fn handle_semantic_tokens_range(\n     Ok(Some(semantic_tokens.into()))\n }\n \n+pub(crate) fn handle_open_docs(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_types::TextDocumentPositionParams,\n+) -> Result<Option<lsp_types::Url>> {\n+    let _p = profile::span(\"handle_open_docs\");\n+    let position = from_proto::file_position(&snap, params)?;\n+\n+    let remote = snap.analysis.external_docs(position)?;\n+\n+    Ok(remote.and_then(|remote| Url::parse(&remote).ok()))\n+}\n+\n fn implementation_title(count: usize) -> String {\n     if count == 1 {\n         \"1 implementation\".into()"}, {"sha": "f31f8d9001b7b8b4fa0a372d253b2c0ddcf44fdf", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -347,3 +347,11 @@ pub struct CommandLink {\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub tooltip: Option<String>,\n }\n+\n+pub enum ExternalDocs {}\n+\n+impl Request for ExternalDocs {\n+    type Params = lsp_types::TextDocumentPositionParams;\n+    type Result = Option<lsp_types::Url>;\n+    const METHOD: &'static str = \"experimental/externalDocs\";\n+}"}, {"sha": "06b38d99c8ee4ab1756495160c4ac13e3f5dcd73", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -384,6 +384,7 @@ impl GlobalState {\n             .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)?\n             .on::<lsp_ext::ResolveCodeActionRequest>(handlers::handle_resolve_code_action)?\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)?\n+            .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)?\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n             .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?"}, {"sha": "f5ee3484b0ce95d9be1bb51c5c57498f82d85313", "filename": "crates/stdx/src/macros.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fstdx%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/crates%2Fstdx%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fmacros.rs?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -18,7 +18,13 @@ macro_rules! format_to {\n     };\n }\n \n-// Generates `From` impls for `Enum E { Foo(Foo), Bar(Bar) }` enums\n+/// Generates `From` impls for `Enum E { Foo(Foo), Bar(Bar) }` enums\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// impl_from!(Struct, Union, Enum for Adt);\n+/// ```\n #[macro_export]\n macro_rules! impl_from {\n     ($($variant:ident $(($($sub_variant:ident),*))?),* for $enum:ident) => {"}, {"sha": "3f861f3e00d3b0c5bd6437d94b1a71cce3acb529", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -129,7 +129,7 @@ As a result of the command call the client will get the respective workspace edi\n \n **Server Capability:** `{ \"parentModule\": boolean }`\n \n-This request is send from client to server to handle \"Goto Parent Module\" editor action.\n+This request is sent from client to server to handle \"Goto Parent Module\" editor action.\n \n **Method:** `experimental/parentModule`\n \n@@ -163,7 +163,7 @@ mod foo;\n \n **Server Capability:** `{ \"joinLines\": boolean }`\n \n-This request is send from client to server to handle \"Join Lines\" editor action.\n+This request is sent from client to server to handle \"Join Lines\" editor action.\n \n **Method:** `experimental/joinLines`\n \n@@ -210,7 +210,7 @@ fn main() {\n \n **Server Capability:** `{ \"onEnter\": boolean }`\n \n-This request is send from client to server to handle <kbd>Enter</kbd> keypress.\n+This request is sent from client to server to handle <kbd>Enter</kbd> keypress.\n \n **Method:** `experimental/onEnter`\n \n@@ -261,7 +261,7 @@ As proper cursor positioning is raison-d'etat for `onEnter`, it uses `SnippetTex\n \n **Server Capability:** `{ \"ssr\": boolean }`\n \n-This request is send from client to server to handle structural search replace -- automated syntax tree based transformation of the source.\n+This request is sent from client to server to handle structural search replace -- automated syntax tree based transformation of the source.\n \n **Method:** `experimental/ssr`\n \n@@ -303,7 +303,7 @@ SSR with query `foo($a, $b) ==>> ($a).foo($b)` will transform, eg `foo(y + 5, z)\n \n **Server Capability:** `{ \"matchingBrace\": boolean }`\n \n-This request is send from client to server to handle \"Matching Brace\" editor action.\n+This request is sent from client to server to handle \"Matching Brace\" editor action.\n \n **Method:** `experimental/matchingBrace`\n \n@@ -348,7 +348,7 @@ Moreover, it would be cool if editors didn't need to implement even basic langua\n \n **Server Capability:** `{ \"runnables\": { \"kinds\": string[] } }`\n \n-This request is send from client to server to get the list of things that can be run (tests, binaries, `cargo check -p`).\n+This request is sent from client to server to get the list of things that can be run (tests, binaries, `cargo check -p`).\n \n **Method:** `experimental/runnables`\n \n@@ -386,6 +386,17 @@ rust-analyzer supports only one `kind`, `\"cargo\"`. The `args` for `\"cargo\"` look\n }\n ```\n \n+## Open External Documentation\n+\n+This request is sent from client to server to get a URL to documentation for the symbol under the cursor, if available.\n+\n+**Method** `experimental/externalDocs`\n+\n+**Request:**: `TextDocumentPositionParams`\n+\n+**Response** `string | null`\n+\n+\n ## Analyzer Status\n \n **Method:** `rust-analyzer/analyzerStatus`\n@@ -477,7 +488,7 @@ Expands macro call at a given position.\n \n **Method:** `rust-analyzer/inlayHints`\n \n-This request is send from client to server to render \"inlay hints\" -- virtual text inserted into editor to show things like inferred types.\n+This request is sent from client to server to render \"inlay hints\" -- virtual text inserted into editor to show things like inferred types.\n Generally, the client should re-query inlay hints after every modification.\n Note that we plan to move this request to `experimental/inlayHints`, as it is not really Rust-specific, but the current API is not necessary the right one.\n Upstream issue: https://github.com/microsoft/language-server-protocol/issues/956"}, {"sha": "4bd3117fc80660d47bc3e9b766854c0073c0fa26", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -182,6 +182,11 @@\n                 \"command\": \"rust-analyzer.toggleInlayHints\",\n                 \"title\": \"Toggle inlay hints\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.openDocs\",\n+                \"title\": \"Open docs under cursor\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": [\n@@ -1044,6 +1049,10 @@\n                 {\n                     \"command\": \"rust-analyzer.toggleInlayHints\",\n                     \"when\": \"inRustProject\"\n+                },\n+                {\n+                    \"command\": \"rust-analyzer.openDocs\",\n+                    \"when\": \"inRustProject\"\n                 }\n             ]\n         }"}, {"sha": "1445e41d3cb0a92c0a10890ab8546897a5e1005e", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -419,10 +419,31 @@ export function gotoLocation(ctx: Ctx): Cmd {\n     };\n }\n \n+export function openDocs(ctx: Ctx): Cmd {\n+    return async () => {\n+\n+        const client = ctx.client;\n+        const editor = vscode.window.activeTextEditor;\n+        if (!editor || !client) {\n+            return;\n+        };\n+\n+        const position = editor.selection.active;\n+        const textDocument = { uri: editor.document.uri.toString() };\n+\n+        const doclink = await client.sendRequest(ra.openDocs, { position, textDocument });\n+\n+        if (doclink != null) {\n+            vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink));\n+        }\n+    };\n+\n+}\n+\n export function resolveCodeAction(ctx: Ctx): Cmd {\n     const client = ctx.client;\n-    return async (params: ra.ResolveCodeActionParams) => {\n-        const item: lc.WorkspaceEdit = await client.sendRequest(ra.resolveCodeAction, params);\n+    return async () => {\n+        const item: lc.WorkspaceEdit = await client.sendRequest(ra.resolveCodeAction, null);\n         if (!item) {\n             return;\n         }"}, {"sha": "fc8e120b3fc6d8854f0e7bd68607e9aae77fe91f", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -118,3 +118,5 @@ export interface CommandLinkGroup {\n     title?: string;\n     commands: CommandLink[];\n }\n+\n+export const openDocs = new lc.RequestType<lc.TextDocumentPositionParams, string | void, void>('experimental/externalDocs');"}, {"sha": "09543e348a82805f36ba5797b1133dd92e556ee0", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/518f6d772482c7c58e59081f340947087a9b4800/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=518f6d772482c7c58e59081f340947087a9b4800", "patch": "@@ -110,6 +110,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('run', commands.run);\n     ctx.registerCommand('debug', commands.debug);\n     ctx.registerCommand('newDebugConfig', commands.newDebugConfig);\n+    ctx.registerCommand('openDocs', commands.openDocs);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}