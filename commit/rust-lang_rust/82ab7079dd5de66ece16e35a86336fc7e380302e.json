{"sha": "82ab7079dd5de66ece16e35a86336fc7e380302e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYWI3MDc5ZGQ1ZGU2NmVjZTE2ZTM1YTg2MzM2ZmM3ZTM4MDMwMmU=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-11-14T20:12:12Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-11-14T22:47:49Z"}, "message": "Consistently normalize fn types after erasing lifetimes.\n\nFixes #23406.\nFixes #23958.\nFixes #29832.", "tree": {"sha": "6179fd8ee928e65a987ea15479a015c2d781de90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6179fd8ee928e65a987ea15479a015c2d781de90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ab7079dd5de66ece16e35a86336fc7e380302e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ab7079dd5de66ece16e35a86336fc7e380302e", "html_url": "https://github.com/rust-lang/rust/commit/82ab7079dd5de66ece16e35a86336fc7e380302e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ab7079dd5de66ece16e35a86336fc7e380302e/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5edf9e386f9ee7ed3f34edbaa3b71bd574c207", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5edf9e386f9ee7ed3f34edbaa3b71bd574c207", "html_url": "https://github.com/rust-lang/rust/commit/4f5edf9e386f9ee7ed3f34edbaa3b71bd574c207"}], "stats": {"total": 170, "additions": 114, "deletions": 56}, "files": [{"sha": "90a649405cdddadfa02a07937ab729a6976ef866", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -142,6 +142,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n     };\n \n     let fn_sig = ccx.tcx().erase_late_bound_regions(fn_sig);\n+    let fn_sig = infer::normalize_associated_type(ccx.tcx(), &fn_sig);\n \n     let mut attrs = llvm::AttrBuilder::new();\n     let ret_ty = fn_sig.output;"}, {"sha": "ecd4c75c9d35d48bede4d41c35082af1b0c324ad", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -38,6 +38,7 @@ use metadata::{csearch, encoder, loader};\n use middle::astencode;\n use middle::cfg;\n use middle::def_id::DefId;\n+use middle::infer;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n use middle::pat_util::simple_name;\n@@ -1905,7 +1906,11 @@ pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"trans_fn(param_substs={:?})\", param_substs);\n     let _icx = push_ctxt(\"trans_fn\");\n     let fn_ty = ccx.tcx().node_id_to_type(id);\n-    let output_type = ccx.tcx().erase_late_bound_regions(&fn_ty.fn_ret());\n+    let fn_ty = monomorphize::apply_param_substs(ccx.tcx(), param_substs, &fn_ty);\n+    let sig = fn_ty.fn_sig();\n+    let sig = ccx.tcx().erase_late_bound_regions(&sig);\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let output_type = sig.output;\n     let abi = fn_ty.fn_abi();\n     trans_closure(ccx, decl, body, llfndecl, param_substs, id, attrs, output_type, abi,\n                   closure::ClosureEnv::NotClosure);\n@@ -1936,15 +1941,9 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n     let ccx = bcx.fcx.ccx;\n \n-    let result_ty = match ctor_ty.sty {\n-        ty::TyBareFn(_, ref bft) => {\n-            bcx.tcx().erase_late_bound_regions(&bft.sig.output()).unwrap()\n-        }\n-        _ => ccx.sess().bug(\n-            &format!(\"trans_enum_variant_constructor: \\\n-                     unexpected ctor return type {}\",\n-                     ctor_ty))\n-    };\n+    let sig = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let result_ty = sig.output.unwrap();\n \n     // Get location to store the result. If the user does not care about\n     // the result, just make a stack slot\n@@ -2026,15 +2025,10 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n     let ctor_ty = ccx.tcx().node_id_to_type(ctor_id);\n     let ctor_ty = monomorphize::apply_param_substs(ccx.tcx(), param_substs, &ctor_ty);\n \n-    let result_ty = match ctor_ty.sty {\n-        ty::TyBareFn(_, ref bft) => {\n-            ccx.tcx().erase_late_bound_regions(&bft.sig.output())\n-        }\n-        _ => ccx.sess().bug(\n-            &format!(\"trans_enum_variant_or_tuple_like_struct: \\\n-                     unexpected ctor return type {}\",\n-                    ctor_ty))\n-    };\n+    let sig = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let arg_tys = sig.inputs;\n+    let result_ty = sig.output;\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);\n     arena = TypedArena::new();\n@@ -2044,8 +2038,6 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n \n     assert!(!fcx.needs_ret_allocas);\n \n-    let arg_tys = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_args());\n-\n     if !type_is_zero_size(fcx.ccx, result_ty.unwrap()) {\n         let dest = fcx.get_ret_slot(bcx, result_ty, \"eret_slot\");\n         let repr = adt::represent_type(ccx, result_ty.unwrap());"}, {"sha": "a52c7f94c3a810afd30e283bbfb0d3a602a298da", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -25,7 +25,7 @@ use llvm::{self, ValueRef, get_params};\n use metadata::cstore::LOCAL_CRATE;\n use middle::def;\n use middle::def_id::DefId;\n-use middle::infer::normalize_associated_type;\n+use middle::infer;\n use middle::subst;\n use middle::subst::{Substs};\n use rustc::front::map as hir_map;\n@@ -304,6 +304,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n             }\n         };\n     let sig = tcx.erase_late_bound_regions(sig);\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n     let tuple_input_ty = tcx.mk_tup(sig.inputs.to_vec());\n     let tuple_fn_ty = tcx.mk_fn(opt_def_id,\n         tcx.mk_bare_fn(ty::BareFnTy {\n@@ -466,7 +467,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n \n     // Type scheme of the function item (may have type params)\n     let fn_type_scheme = tcx.lookup_item_type(def_id);\n-    let fn_type = normalize_associated_type(tcx, &fn_type_scheme.ty);\n+    let fn_type = infer::normalize_associated_type(tcx, &fn_type_scheme.ty);\n \n     // Find the actual function pointer.\n     let mut val = {\n@@ -605,8 +606,9 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n \n     let (abi, ret_ty) = match callee.ty.sty {\n         ty::TyBareFn(_, ref f) => {\n-            let output = bcx.tcx().erase_late_bound_regions(&f.sig.output());\n-            (f.abi, output)\n+            let sig = bcx.tcx().erase_late_bound_regions(&f.sig);\n+            let sig = infer::normalize_associated_type(bcx.tcx(), &sig);\n+            (f.abi, sig.output)\n         }\n         _ => panic!(\"expected bare rust fn or closure in trans_call_inner\")\n     };\n@@ -826,7 +828,9 @@ fn trans_args_under_call_abi<'blk, 'tcx>(\n                              ignore_self: bool)\n                              -> Block<'blk, 'tcx>\n {\n-    let args = bcx.tcx().erase_late_bound_regions(&fn_ty.fn_args());\n+    let sig = bcx.tcx().erase_late_bound_regions(&fn_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(bcx.tcx(), &sig);\n+    let args = sig.inputs;\n \n     // Translate the `self` argument first.\n     if !ignore_self {\n@@ -887,7 +891,10 @@ fn trans_overloaded_call_args<'blk, 'tcx>(\n                               ignore_self: bool)\n                               -> Block<'blk, 'tcx> {\n     // Translate the `self` argument first.\n-    let arg_tys = bcx.tcx().erase_late_bound_regions( &fn_ty.fn_args());\n+    let sig = bcx.tcx().erase_late_bound_regions(&fn_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(bcx.tcx(), &sig);\n+    let arg_tys = sig.inputs;\n+\n     if !ignore_self {\n         let arg_datum = unpack_datum!(bcx, expr::trans(bcx, arg_exprs[0]));\n         bcx = trans_arg_datum(bcx,\n@@ -933,8 +940,10 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     debug!(\"trans_args(abi={})\", abi);\n \n     let _icx = push_ctxt(\"trans_args\");\n-    let arg_tys = cx.tcx().erase_late_bound_regions(&fn_ty.fn_args());\n-    let variadic = fn_ty.fn_sig().0.variadic;\n+    let sig = cx.tcx().erase_late_bound_regions(&fn_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+    let arg_tys = sig.inputs;\n+    let variadic = sig.variadic;\n \n     let mut bcx = cx;\n "}, {"sha": "04487a6f2d25db90a1efe57da9d0320a6f99534d", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -210,6 +210,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n         tcx.with_freevars(id, |fv| fv.iter().cloned().collect());\n \n     let sig = tcx.erase_late_bound_regions(&function_type.sig);\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n \n     trans_closure(ccx,\n                   decl,\n@@ -371,6 +372,8 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let lloncefn = declare::define_internal_rust_fn(ccx, &function_name,\n                                                     llonce_fn_ty);\n     let sig = tcx.erase_late_bound_regions(&llonce_bare_fn_ty.sig);\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();\n     fcx = new_fn_ctxt(ccx,"}, {"sha": "addac528aa25cd15394cc71dd5e6375904fb6e16", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -24,6 +24,7 @@ use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n \n use middle::def_id::DefId;\n+use middle::infer;\n use middle::pat_util;\n use middle::subst::{self, Substs};\n use rustc::front::map as hir_map;\n@@ -262,6 +263,7 @@ impl<'tcx> TypeMap<'tcx> {\n                 unique_type_id.push_str(\" fn(\");\n \n                 let sig = cx.tcx().erase_late_bound_regions(sig);\n+                let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n \n                 for &parameter_type in &sig.inputs {\n                     let parameter_type_id ="}, {"sha": "9e53d72cfb8b9d2702e3db527cd6c6fb55f4b624", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -35,6 +35,7 @@ use rustc_front::hir;\n use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n use trans;\n use trans::{monomorphize, type_of};\n+use middle::infer;\n use middle::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n@@ -418,19 +419,23 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         // Return type -- llvm::DIBuilder wants this at index 0\n         assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n         let fn_type = cx.tcx().node_id_to_type(fn_ast_id);\n+        let fn_type = monomorphize::apply_param_substs(cx.tcx(), param_substs, &fn_type);\n \n         let (sig, abi) = match fn_type.sty {\n             ty::TyBareFn(_, ref barefnty) => {\n-                (cx.tcx().erase_late_bound_regions(&barefnty.sig), barefnty.abi)\n+                let sig = cx.tcx().erase_late_bound_regions(&barefnty.sig);\n+                let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+                (sig, barefnty.abi)\n             }\n             ty::TyClosure(def_id, ref substs) => {\n                 let closure_type = cx.tcx().closure_type(def_id, substs);\n-                (cx.tcx().erase_late_bound_regions(&closure_type.sig), closure_type.abi)\n+                let sig = cx.tcx().erase_late_bound_regions(&closure_type.sig);\n+                let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+                (sig, closure_type.abi)\n             }\n \n             _ => cx.sess().bug(\"get_function_metdata: Expected a function type!\")\n         };\n-        let sig = monomorphize::apply_param_substs(cx.tcx(), param_substs, &sig);\n \n         let mut signature = Vec::with_capacity(sig.inputs.len() + 1);\n "}, {"sha": "c6b5ce436835f15159bd6f28b11bb621b8c1dcbb", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -14,6 +14,7 @@ use super::namespace::crate_root_namespace;\n \n use trans::common::CrateContext;\n use middle::def_id::DefId;\n+use middle::infer;\n use middle::subst::{self, Substs};\n use middle::ty::{self, Ty};\n \n@@ -124,6 +125,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push_str(\"fn(\");\n \n             let sig = cx.tcx().erase_late_bound_regions(sig);\n+            let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n             if !sig.inputs.is_empty() {\n                 for &parameter_type in &sig.inputs {\n                     push_debuginfo_type_name(cx, parameter_type, true, output);"}, {"sha": "b9e74beaf55ae5573009e7231d45539dfe66683c", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -103,9 +103,6 @@ pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n                                  fn_type: ty::Ty<'tcx>) -> ValueRef {\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name,\n            fn_type);\n-    let fn_type = infer::normalize_associated_type(ccx.tcx(), &fn_type);\n-    debug!(\"declare_rust_fn (after normalised associated types) fn_type={:?}\",\n-           fn_type);\n \n     let function_type; // placeholder so that the memory ownership works out ok\n     let (sig, abi, env) = match fn_type.sty {\n@@ -124,14 +121,15 @@ pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n         _ => ccx.sess().bug(\"expected closure or fn\")\n     };\n \n-    let sig = ty::Binder(ccx.tcx().erase_late_bound_regions(sig));\n+    let sig = ccx.tcx().erase_late_bound_regions(sig);\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n     let llfty = type_of::type_of_rust_fn(ccx, env, &sig, abi);\n     debug!(\"declare_rust_fn llfty={}\", ccx.tn().type_to_string(llfty));\n \n     // it is ok to directly access sig.0.output because we erased all\n     // late-bound-regions above\n-    let llfn = declare_fn(ccx, name, llvm::CCallConv, llfty, sig.0.output);\n+    let llfn = declare_fn(ccx, name, llvm::CCallConv, llfty, sig.output);\n     attributes::from_fn_type(ccx, fn_type).apply_llfn(llfn);\n     llfn\n }"}, {"sha": "98114da851f918e68939fbaa70d4d41360a04e69", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -15,6 +15,7 @@ use intrinsics::{self, Intrinsic};\n use libc;\n use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef, TypeKind};\n+use middle::infer;\n use middle::subst;\n use middle::subst::FnSpace;\n use trans::adt;\n@@ -170,13 +171,10 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n     let _icx = push_ctxt(\"trans_intrinsic_call\");\n \n-    let (arg_tys, ret_ty) = match callee_ty.sty {\n-        ty::TyBareFn(_, ref f) => {\n-            (bcx.tcx().erase_late_bound_regions(&f.sig.inputs()),\n-             bcx.tcx().erase_late_bound_regions(&f.sig.output()))\n-        }\n-        _ => panic!(\"expected bare_fn in trans_intrinsic_call\")\n-    };\n+    let sig = ccx.tcx().erase_late_bound_regions(callee_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let arg_tys = sig.inputs;\n+    let ret_ty = sig.output;\n     let foreign_item = tcx.map.expect_foreign_item(node);\n     let name = foreign_item.name.as_str();\n \n@@ -1330,12 +1328,9 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n \n \n     let tcx = bcx.tcx();\n-    let arg_tys = match callee_ty.sty {\n-        ty::TyBareFn(_, ref f) => {\n-            bcx.tcx().erase_late_bound_regions(&f.sig.inputs())\n-        }\n-        _ => unreachable!()\n-    };\n+    let sig = tcx.erase_late_bound_regions(callee_ty.fn_sig());\n+    let sig = infer::normalize_associated_type(tcx, &sig);\n+    let arg_tys = sig.inputs;\n \n     // every intrinsic takes a SIMD vector as its first argument\n     require_simd!(arg_tys[0], \"input\");"}, {"sha": "ff94e4feda2165a4717d6cb12854a33594754fa9", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -12,6 +12,7 @@ use arena::TypedArena;\n use back::link;\n use llvm::{ValueRef, get_params};\n use middle::def_id::DefId;\n+use middle::infer;\n use middle::subst::{Subst, Substs};\n use middle::subst::VecPerParamSpace;\n use middle::subst;\n@@ -522,6 +523,7 @@ fn trans_object_shim<'a, 'tcx>(\n     let llfn = declare::define_internal_rust_fn(ccx, &function_name, shim_fn_ty);\n \n     let sig = ccx.tcx().erase_late_bound_regions(&fty.sig);\n+    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n \n     let empty_substs = tcx.mk_substs(Substs::trans_empty());\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);"}, {"sha": "1e371a16970100dc46fab0b65cc65d8122e7570c", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -11,6 +11,7 @@\n #![allow(non_camel_case_types)]\n \n use middle::def_id::DefId;\n+use middle::infer;\n use middle::subst;\n use trans::adt;\n use trans::common::*;\n@@ -89,24 +90,25 @@ pub fn untuple_arguments<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                  llenvironment_type: Option<Type>,\n-                                 sig: &ty::Binder<ty::FnSig<'tcx>>,\n+                                 sig: &ty::FnSig<'tcx>,\n                                  abi: abi::Abi)\n                                  -> Type\n {\n     debug!(\"type_of_rust_fn(sig={:?},abi={:?})\",\n            sig,\n            abi);\n \n-    let sig = cx.tcx().erase_late_bound_regions(sig);\n     assert!(!sig.variadic); // rust fns are never variadic\n \n     let mut atys: Vec<Type> = Vec::new();\n \n     // First, munge the inputs, if this has the `rust-call` ABI.\n-    let inputs = &if abi == abi::RustCall {\n-        untuple_arguments(cx, &sig.inputs)\n+    let inputs_temp;\n+    let inputs = if abi == abi::RustCall {\n+        inputs_temp = untuple_arguments(cx, &sig.inputs);\n+        &inputs_temp\n     } else {\n-        sig.inputs\n+        &sig.inputs\n     };\n \n     // Arg 0: Output pointer.\n@@ -155,7 +157,9 @@ pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>)\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n             if f.abi == abi::Rust || f.abi == abi::RustCall {\n-                type_of_rust_fn(cx, None, &f.sig, f.abi)\n+                let sig = cx.tcx().erase_late_bound_regions(&f.sig);\n+                let sig = infer::normalize_associated_type(cx.tcx(), &sig);\n+                type_of_rust_fn(cx, None, &sig, f.abi)\n             } else {\n                 foreign::lltype_for_foreign_fn(cx, fty)\n             }"}, {"sha": "c3c1b755af8336ce48a2f823a21e9e5d611b04a5", "filename": "src/test/run-pass/issue-23406.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Ftest%2Frun-pass%2Fissue-23406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Ftest%2Frun-pass%2Fissue-23406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23406.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Inner {\n+    type T;\n+}\n+\n+impl<'a> Inner for &'a i32 {\n+    type T = i32;\n+}\n+\n+fn f<'a>(x: &'a i32) -> <&'a i32 as Inner>::T {\n+    *x\n+}\n+\n+fn main() {}"}, {"sha": "5f1c79a3c1542bdd139705adffd475977962ea5a", "filename": "src/test/run-pass/issue-23598.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Ftest%2Frun-pass%2Fissue-23598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ab7079dd5de66ece16e35a86336fc7e380302e/src%2Ftest%2Frun-pass%2Fissue-23598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23598.rs?ref=82ab7079dd5de66ece16e35a86336fc7e380302e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Collection where for<'a> &'a Self: IntoIterator {\n+    fn my_iter(&self) -> <&Self as IntoIterator>::IntoIter {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<T> Collection for [T] { }\n+\n+fn main() {\n+    let v = [0usize];\n+    let _ = v.my_iter();\n+}"}]}