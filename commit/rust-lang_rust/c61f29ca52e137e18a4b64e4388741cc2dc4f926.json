{"sha": "c61f29ca52e137e18a4b64e4388741cc2dc4f926", "node_id": "C_kwDOAAsO6NoAKGM2MWYyOWNhNTJlMTM3ZTE4YTRiNjRlNDM4ODc0MWNjMmRjNGY5MjY", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-12T14:44:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T14:44:52Z"}, "message": "Rollup merge of #106714 - Ezrashaw:remove-e0490, r=davidtwco\n\nremove unreachable error code `E0490`\n\nAFAIK, the untested and undocumented error code `E0490` is now unreachable, it was from the days of the original borrow checker.\n\ncc ``@GuillaumeGomez`` #61137", "tree": {"sha": "40118455cccaa2819e8b2240c2203281d60011cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40118455cccaa2819e8b2240c2203281d60011cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61f29ca52e137e18a4b64e4388741cc2dc4f926", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwBzkCRBK7hj4Ov3rIwAADkYIAAv6lUfUS6R4LQr7R+nfWGft\nx+vfJGTINzPNZI0vCzsFWxvdvGRoNi0n0mgUf2zDBpkZonpND/i0qD5aO6zmsv4E\nPWp1ne3s8NdCjJMJULeEsunEUyOdi8XGnOxBPVf6yNbxIcm5pGDbaBg5beAKuYRL\noK2vYLDDkd5wsiDIQ93avSu4rq0SYdWAyK/t56YA5FpVS/8ceyYfQFUR8xbSgR8M\nHmC2C2m+Jbxkym3s1nuzN3SOu9FJ8C9f40GW6bTOt4H1Eo/SoWvQIYQAbXGR+P9O\nQpzjHwxb7Cj566Mr9Rl6BmcOekIHX332EpuKE6repgfheJMrxARqenMdMvS7Y0U=\n=Ay8l\n-----END PGP SIGNATURE-----\n", "payload": "tree 40118455cccaa2819e8b2240c2203281d60011cf\nparent 25fd6338280caf93b30f8f92f217c8e50a8c0766\nparent 02005e9f22bf06e74c3ed6ce56be112d7366bd15\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1673534692 +0100\ncommitter GitHub <noreply@github.com> 1673534692 +0100\n\nRollup merge of #106714 - Ezrashaw:remove-e0490, r=davidtwco\n\nremove unreachable error code `E0490`\n\nAFAIK, the untested and undocumented error code `E0490` is now unreachable, it was from the days of the original borrow checker.\n\ncc ``@GuillaumeGomez`` #61137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61f29ca52e137e18a4b64e4388741cc2dc4f926", "html_url": "https://github.com/rust-lang/rust/commit/c61f29ca52e137e18a4b64e4388741cc2dc4f926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61f29ca52e137e18a4b64e4388741cc2dc4f926/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fd6338280caf93b30f8f92f217c8e50a8c0766", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fd6338280caf93b30f8f92f217c8e50a8c0766", "html_url": "https://github.com/rust-lang/rust/commit/25fd6338280caf93b30f8f92f217c8e50a8c0766"}, {"sha": "02005e9f22bf06e74c3ed6ce56be112d7366bd15", "url": "https://api.github.com/repos/rust-lang/rust/commits/02005e9f22bf06e74c3ed6ce56be112d7366bd15", "html_url": "https://github.com/rust-lang/rust/commit/02005e9f22bf06e74c3ed6ce56be112d7366bd15"}], "stats": {"total": 73, "additions": 6, "deletions": 67}, "files": [{"sha": "24258974bb97c67e05cabf9d649757f5d5d4ebf6", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=c61f29ca52e137e18a4b64e4388741cc2dc4f926", "patch": "@@ -618,7 +618,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0487, // unsafe use of destructor: destructor might be called while...\n //  E0488, // lifetime of variable does not enclose its declaration\n //  E0489, // type/lifetime parameter not in scope here\n-    E0490, // a value of type `..` is borrowed for too long\n+//  E0490, // removed: unreachable\n     E0523, // two dependencies have same (crate-name, disambiguator) but different SVH\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes"}, {"sha": "ae0091b03736f3b6c78343ae5d7487ab7b12606a", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=c61f29ca52e137e18a4b64e4388741cc2dc4f926", "patch": "@@ -101,7 +101,6 @@ infer_subtype_2 = ...so that {$requirement ->\n infer_reborrow = ...so that reference does not outlive borrowed content\n infer_reborrow_upvar = ...so that closure can access `{$name}`\n infer_relate_object_bound = ...so that it can be closed over into an object\n-infer_data_borrowed = ...so that the type `{$name}` is not borrowed for too long\n infer_reference_outlives_referent = ...so that the reference type `{$name}` does not outlive the data it points at\n infer_relate_param_bound = ...so that the type `{$name}` will meet its required lifetime bounds{$continues ->\n     [true] ..."}, {"sha": "7504ed094a3d4160715436ac3981b6f1729e45e3", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=c61f29ca52e137e18a4b64e4388741cc2dc4f926", "patch": "@@ -29,15 +29,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_relate_object_bound }\n                     .add_to_diagnostic(err);\n             }\n-            infer::DataBorrowed(ty, span) => {\n-                RegionOriginNote::WithName {\n-                    span,\n-                    msg: fluent::infer_data_borrowed,\n-                    name: &self.ty_to_string(ty),\n-                    continues: false,\n-                }\n-                .add_to_diagnostic(err);\n-            }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n                 RegionOriginNote::WithName {\n                     span,\n@@ -227,32 +218,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::DataBorrowed(ty, span) => {\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0490,\n-                    \"a value of type `{}` is borrowed for too long\",\n-                    self.ty_to_string(ty)\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"the type is valid for \",\n-                    sub,\n-                    \"\",\n-                    None,\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"but the borrow lasts for \",\n-                    sup,\n-                    \"\",\n-                    None,\n-                );\n-                err\n-            }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "897545046c33f3bfd2b6886e974ab1f1673409ea", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=c61f29ca52e137e18a4b64e4388741cc2dc4f926", "patch": "@@ -702,26 +702,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // Obtain the spans for all the places that can\n                     // influence the constraints on this value for\n                     // richer diagnostics in `static_impl_trait`.\n-                    let influences: Vec<Span> = self\n-                        .data\n-                        .constraints\n-                        .iter()\n-                        .filter_map(|(constraint, origin)| match (constraint, origin) {\n-                            (\n-                                Constraint::VarSubVar(_, sup),\n-                                SubregionOrigin::DataBorrowed(_, sp),\n-                            ) if sup == &node_vid => Some(*sp),\n-                            _ => None,\n-                        })\n-                        .collect();\n-\n-                    self.collect_error_for_expanding_node(\n-                        graph,\n-                        &mut dup_vec,\n-                        node_vid,\n-                        errors,\n-                        influences,\n-                    );\n+\n+                    self.collect_error_for_expanding_node(graph, &mut dup_vec, node_vid, errors);\n                 }\n             }\n         }\n@@ -775,7 +757,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n-        influences: Vec<Span>,\n     ) {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -830,7 +811,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         lower_bound.region,\n                         upper_bound.origin.clone(),\n                         upper_bound.region,\n-                        influences,\n+                        vec![],\n                     ));\n                     return;\n                 }"}, {"sha": "4acd0d0edfec774546b1a73bda0ae049d8fe720e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f29ca52e137e18a4b64e4388741cc2dc4f926/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c61f29ca52e137e18a4b64e4388741cc2dc4f926", "patch": "@@ -410,9 +410,6 @@ pub enum SubregionOrigin<'tcx> {\n     /// Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n-    /// Data with type `Ty<'tcx>` was borrowed\n-    DataBorrowed(Ty<'tcx>, Span),\n-\n     /// (&'a &'b T) where a >= b\n     ReferenceOutlivesReferent(Ty<'tcx>, Span),\n \n@@ -1978,7 +1975,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             RelateParamBound(a, ..) => a,\n             RelateRegionParamBound(a) => a,\n             Reborrow(a) => a,\n-            DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplItemObligation { span, .. } => span,\n             AscribeUserTypeProvePredicate(span) => span,"}, {"sha": "bc9fd35ecde3786c2db4092104dce15e25d69290", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c61f29ca52e137e18a4b64e4388741cc2dc4f926/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f29ca52e137e18a4b64e4388741cc2dc4f926/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=c61f29ca52e137e18a4b64e4388741cc2dc4f926", "patch": "@@ -31,10 +31,8 @@ const IGNORE_DOCTEST_CHECK: &[&str] =\n     &[\"E0208\", \"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E0640\", \"E0717\"];\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n-const IGNORE_UI_TEST_CHECK: &[&str] = &[\n-    \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n-    \"E0789\",\n-];\n+const IGNORE_UI_TEST_CHECK: &[&str] =\n+    &[\"E0461\", \"E0465\", \"E0476\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\"];\n \n macro_rules! verbose_print {\n     ($verbose:expr, $($fmt:tt)*) => {"}]}