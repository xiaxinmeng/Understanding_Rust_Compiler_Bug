{"sha": "8a392a5992fda3f041726fc85e42569497dfd753", "node_id": "C_kwDOAAsO6NoAKDhhMzkyYTU5OTJmZGEzZjA0MTcyNmZjODVlNDI1Njk0OTdkZmQ3NTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T02:22:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T02:22:48Z"}, "message": "Auto merge of #98754 - jyn514:non-trivial-drop, r=compiler-errors\n\nFix drop-tracking ICE when a struct containing a field with a significant drop is used across an await\n\nPreviously, drop-tracking would incorrectly assume the struct would be dropped immediately, which was not true.\n\nFixes #98476. Also fixes https://github.com/rust-lang/rust/issues/98477, I think because the parent HIR node for type variables is the whole function instead of the expression where the variable is used.\n\nr? `@eholk`", "tree": {"sha": "c3f6ede91aff837e4b764b0927e35e6457739ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f6ede91aff837e4b764b0927e35e6457739ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a392a5992fda3f041726fc85e42569497dfd753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a392a5992fda3f041726fc85e42569497dfd753", "html_url": "https://github.com/rust-lang/rust/commit/8a392a5992fda3f041726fc85e42569497dfd753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a392a5992fda3f041726fc85e42569497dfd753/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbb07c27a4d78f95557a6b9cdcc32f98d67a0c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb07c27a4d78f95557a6b9cdcc32f98d67a0c22", "html_url": "https://github.com/rust-lang/rust/commit/cbb07c27a4d78f95557a6b9cdcc32f98d67a0c22"}, {"sha": "b30315d64f75b26fc20d3df975a48cd1e149f28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30315d64f75b26fc20d3df975a48cd1e149f28f", "html_url": "https://github.com/rust-lang/rust/commit/b30315d64f75b26fc20d3df975a48cd1e149f28f"}], "stats": {"total": 404, "additions": 369, "deletions": 35}, "files": [{"sha": "a0c256bb83dc9b24857db6abbad662ca7bd305eb", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::hir_id::HirIdSet;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n-use rustc_middle::ty::{self, RvalueScopes, Ty, TyCtxt};\n+use rustc_middle::ty::{self, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use tracing::debug;\n@@ -376,6 +376,17 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         debug!(\"is_borrowed_temporary: {:?}\", self.drop_ranges.is_borrowed_temporary(expr));\n \n+        let ty = self.fcx.typeck_results.borrow().expr_ty_adjusted_opt(expr);\n+        let may_need_drop = |ty: Ty<'tcx>| {\n+            // Avoid ICEs in needs_drop.\n+            let ty = self.fcx.resolve_vars_if_possible(ty);\n+            let ty = self.fcx.tcx.erase_regions(ty);\n+            if ty.needs_infer() {\n+                return true;\n+            }\n+            ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n+        };\n+\n         // Typically, the value produced by an expression is consumed by its parent in some way,\n         // so we only have to check if the parent contains a yield (note that the parent may, for\n         // example, store the value into a local variable, but then we already consider local\n@@ -384,7 +395,18 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // However, in the case of temporary values, we are going to store the value into a\n         // temporary on the stack that is live for the current temporary scope and then return a\n         // reference to it. That value may be live across the entire temporary scope.\n-        let scope = if self.drop_ranges.is_borrowed_temporary(expr) {\n+        //\n+        // There's another subtlety: if the type has an observable drop, it must be dropped after\n+        // the yield, even if it's not borrowed or referenced after the yield. Ideally this would\n+        // *only* happen for types with observable drop, not all types which wrap them, but that\n+        // doesn't match the behavior of MIR borrowck and causes ICEs. See the FIXME comment in\n+        // src/test/ui/generator/drop-tracking-parent-expression.rs.\n+        let scope = if self.drop_ranges.is_borrowed_temporary(expr)\n+            || ty.map_or(true, |ty| {\n+                let needs_drop = may_need_drop(ty);\n+                debug!(?needs_drop, ?ty);\n+                needs_drop\n+            }) {\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id)\n         } else {\n             debug!(\"parent_node: {:?}\", self.fcx.tcx.hir().find_parent_node(expr.hir_id));\n@@ -398,7 +420,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n-        if let Some(adjusted_ty) = self.fcx.typeck_results.borrow().expr_ty_adjusted_opt(expr) {\n+        if let Some(adjusted_ty) = ty {\n             self.record(adjusted_ty, expr.hir_id, scope, Some(expr), expr.span);\n         }\n "}, {"sha": "64fb6280dd7bb644bc62a8ff8ab82759a5ed747f", "filename": "src/test/ui/async-await/default-struct-update.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fdefault-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fdefault-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdefault-struct-update.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -0,0 +1,22 @@\n+// build-pass\n+// edition:2018\n+// compile-flags: -Zdrop-tracking=y\n+\n+fn main() {\n+    let _ = foo();\n+}\n+\n+async fn from_config(_: Config) {}\n+\n+async fn foo() {\n+    from_config(Config {\n+        nickname: None,\n+        ..Default::default()\n+    })\n+    .await;\n+}\n+\n+#[derive(Default)]\n+struct Config {\n+    nickname: Option<Box<u8>>,\n+}"}, {"sha": "2ce7309e1de63575ebf644137dcb385ae6f4b15b", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `Sender<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:13:45\n+  --> $DIR/issue-70935-complex-spans.rs:12:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&Sender<i32>`\n note: required because it's used within this closure\n-  --> $DIR/issue-70935-complex-spans.rs:25:13\n+  --> $DIR/issue-70935-complex-spans.rs:16:13\n    |\n LL |         baz(|| async{\n    |             ^^\n@@ -16,16 +16,14 @@ note: required because it's used within this `async fn` body\n    |\n LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n-LL | |\n LL | | }\n    | |_^\n    = note: required because it captures the following types: `ResumeTy`, `impl for<'r, 's, 't0> Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n-  --> $DIR/issue-70935-complex-spans.rs:23:16\n+  --> $DIR/issue-70935-complex-spans.rs:15:16\n    |\n LL |       async move {\n    |  ________________^\n-LL | |\n LL | |         baz(|| async{\n LL | |             foo(tx.clone());\n LL | |         }).await;"}, {"sha": "2b81b400099f4049316a20c1a9d3b121ec61b331", "filename": "src/test/ui/async-await/issue-70935-complex-spans.normal.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -1,22 +1,22 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:13:45\n+  --> $DIR/issue-70935-complex-spans.rs:12:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:27:11\n+  --> $DIR/issue-70935-complex-spans.rs:18:11\n    |\n LL |           baz(|| async{\n    |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n    | |         - ^^^^^^ await occurs here, with the value maybe used later\n    | |_________|\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:25:13: 25:15]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:16:13: 16:15]` which is not `Send`\n note: the value is later dropped here\n-  --> $DIR/issue-70935-complex-spans.rs:27:17\n+  --> $DIR/issue-70935-complex-spans.rs:18:17\n    |\n LL |         }).await;\n    |                 ^"}, {"sha": "48847cdf974bd9ae5bd910babc0f36e3efea0795", "filename": "src/test/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -7,22 +7,13 @@\n use std::future::Future;\n \n async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n-//[drop_tracking]~^ within this `async fn` body\n }\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n-    //[normal]~^ ERROR: future cannot be sent between threads safely\n-    //[drop_tracking]~^^ ERROR: `Sender<i32>` cannot be shared\n-    //[drop_tracking]~|  NOTE: cannot be shared\n-    //[drop_tracking]~|  NOTE: requirements on the impl of `Send`\n-    //[drop_tracking]~|  NOTE: captures the following types\n-    //[drop_tracking]~|  NOTE: in this expansion\n-    //[drop_tracking]~|  NOTE: in this expansion\n-    //[drop_tracking]~|  NOTE: in this expansion\n-    //[drop_tracking]~|  NOTE: in this expansion\n+    //[normal]~^ ERROR future cannot be sent between threads safely\n+    //[drop_tracking]~^^ ERROR `Sender<i32>` cannot be shared between threads\n     async move {\n-    //[drop_tracking]~^ within this `async` block\n-        baz(|| async{ //[drop_tracking]~ NOTE: used within this closure\n+        baz(|| async{\n             foo(tx.clone());\n         }).await;\n     }"}, {"sha": "a3167215dc32bc6259663a1acc5c5a665f2d3037", "filename": "src/test/ui/async-await/non-trivial-drop.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fnon-trivial-drop.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -0,0 +1,36 @@\n+// build-pass\n+// edition:2018\n+// compile-flags: -Zdrop-tracking=y\n+\n+#![feature(generators)]\n+\n+fn main() {\n+    let _ = foo();\n+}\n+\n+fn foo() {\n+    || {\n+        yield drop(Config {\n+            nickname: NonCopy,\n+            b: NonCopy2,\n+        }.nickname);\n+    };\n+}\n+\n+#[derive(Default)]\n+struct NonCopy;\n+impl Drop for NonCopy {\n+    fn drop(&mut self) {}\n+}\n+\n+#[derive(Default)]\n+struct NonCopy2;\n+impl Drop for NonCopy2 {\n+    fn drop(&mut self) {}\n+}\n+\n+#[derive(Default)]\n+struct Config {\n+    nickname: NonCopy,\n+    b: NonCopy2,\n+}"}, {"sha": "ab2b62aa5aa1c13503e778c698034eca267c70c7", "filename": "src/test/ui/async-await/type-parameter-send.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Ftype-parameter-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fasync-await%2Ftype-parameter-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftype-parameter-send.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// compile-flags: --crate-type lib\n+// edition:2018\n+\n+fn assert_send<F: Send>(_: F) {}\n+\n+async fn __post<T>() -> T {\n+    if false {\n+        todo!()\n+    } else {\n+        async {}.await;\n+        todo!()\n+    }\n+}\n+\n+fn foo<T>() {\n+    assert_send(__post::<T>());\n+}"}, {"sha": "4bd34346a181521649245099454ecdb76bc76327", "filename": "src/test/ui/generator/derived-drop-parent-expr.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fderived-drop-parent-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fderived-drop-parent-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fderived-drop-parent-expr.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -0,0 +1,17 @@\n+// build-pass\n+// compile-flags:-Zdrop-tracking\n+\n+//! Like drop-tracking-parent-expression, but also tests that this doesn't ICE when building MIR\n+#![feature(generators)]\n+\n+fn assert_send<T: Send>(_thing: T) {}\n+\n+#[derive(Default)]\n+pub struct Client { pub nickname: String }\n+\n+fn main() {\n+    let g = move || match drop(Client { ..Client::default() }) {\n+        _status => yield,\n+    };\n+    assert_send(g);\n+}"}, {"sha": "d40f1b8f64d4aa587b9df5591f07702b23937d11", "filename": "src/test/ui/generator/drop-tracking-parent-expression.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -0,0 +1,69 @@\n+// compile-flags: -Zdrop-tracking\n+#![feature(generators, negative_impls, rustc_attrs)]\n+\n+macro_rules! type_combinations {\n+    (\n+        $( $name:ident => { $( $tt:tt )* } );* $(;)?\n+    ) => { $(\n+        mod $name {\n+            $( $tt )*\n+\n+            impl !Sync for Client {}\n+            impl !Send for Client {}\n+        }\n+\n+        // Struct update syntax. This fails because the Client used in the update is considered\n+        // dropped *after* the yield.\n+        {\n+            let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+            //~^ `significant_drop::Client` which is not `Send`\n+            //~| `insignificant_dtor::Client` which is not `Send`\n+            //~| `derived_drop::Client` which is not `Send`\n+                _ => yield,\n+            };\n+            assert_send(g);\n+            //~^ ERROR cannot be sent between threads\n+            //~| ERROR cannot be sent between threads\n+            //~| ERROR cannot be sent between threads\n+        }\n+\n+        // Simple owned value. This works because the Client is considered moved into `drop`,\n+        // even though the temporary expression doesn't end until after the yield.\n+        {\n+            let g = move || match drop($name::Client::default()) {\n+                _ => yield,\n+            };\n+            assert_send(g);\n+        }\n+    )* }\n+}\n+\n+fn assert_send<T: Send>(_thing: T) {}\n+\n+fn main() {\n+    type_combinations!(\n+        // OK\n+        copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+        // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+        // this has no `Drop` impl and only the drops of the fields are observable.\n+        // FIXME: this should compile.\n+        derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+        // NOT OK\n+        significant_drop => {\n+            #[derive(Default)]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        };\n+        // NOT OK (we need to agree with MIR borrowck)\n+        insignificant_dtor => {\n+            #[derive(Default)]\n+            #[rustc_insignificant_dtor]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        };\n+    );\n+}"}, {"sha": "522a300b3ed79afd49b744057ae3337734b15c58", "filename": "src/test/ui/generator/drop-tracking-parent-expression.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -0,0 +1,128 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+   |\n+LL |               assert_send(g);\n+   |               ^^^^^^^^^^^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c0bde3b4473e10ea0cc7d865e141b1503064e4b2", "filename": "src/test/ui/generator/issue-57017.rs", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a392a5992fda3f041726fc85e42569497dfd753/src%2Ftest%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57017.rs?ref=8a392a5992fda3f041726fc85e42569497dfd753", "patch": "@@ -1,22 +1,55 @@\n-// check-pass\n+// build-pass\n // compile-flags: -Zdrop-tracking\n #![feature(generators, negative_impls)]\n \n-struct Client;\n+macro_rules! type_combinations {\n+    (\n+        $( $name:ident => { $( $tt:tt )* } );*\n+    ) => { $(\n+        mod $name {\n+            pub mod unsync {\n+                $( $tt )*\n \n-impl !Sync for Client {}\n+                impl !Sync for Client {}\n+            }\n+            pub mod unsend {\n+                $( $tt )*\n \n-fn status(_client_status: &Client) -> i16 {\n-    200\n+                impl !Send for Client {}\n+            }\n+        }\n+\n+        // This is the same bug as issue 57017, but using yield instead of await\n+        {\n+            let g = move || match drop(&$name::unsync::Client::default()) {\n+                _status => yield,\n+            };\n+            assert_send(g);\n+        }\n+\n+        // This tests that `Client` is properly considered to be dropped after moving it into the\n+        // function.\n+        {\n+            let g = move || match drop($name::unsend::Client::default()) {\n+                _status => yield,\n+            };\n+            assert_send(g);\n+        }\n+    )* }\n }\n \n fn assert_send<T: Send>(_thing: T) {}\n \n-// This is the same bug as issue 57017, but using yield instead of await\n fn main() {\n-    let client = Client;\n-    let g = move || match status(&client) {\n-        _status => yield,\n-    };\n-    assert_send(g);\n+    type_combinations!(\n+        copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+        derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+        significant_drop => {\n+            #[derive(Default)]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        }\n+    );\n }"}]}