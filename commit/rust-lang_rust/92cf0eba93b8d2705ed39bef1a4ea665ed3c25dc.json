{"sha": "92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyY2YwZWJhOTNiOGQyNzA1ZWQzOWJlZjFhNGVhNjY1ZWQzYzI1ZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-08T11:46:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T11:46:14Z"}, "message": "Merge #1924\n\n1924: Support inferring&completing `Self` type in enum/struct/union definitions r=ice1000 a=ice1000\n\nSigned-off-by: ice1000 <ice1000kotlin@foxmail.com>\r\n\r\nAn attempt to fix #1908.\r\nThis code works, but I believe the implementation is ugly. Please give me suggestions!\n\nCo-authored-by: ice1000 <ice1000kotlin@foxmail.com>", "tree": {"sha": "a015a8a8162acacb61b3353b4642c93cd80e51ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a015a8a8162acacb61b3353b4642c93cd80e51ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnHcGCRBK7hj4Ov3rIwAAdHIIAHumUdMZTuM0HMlYogO3TIAF\nGpKESxCdcQHkZGP1IYnp8gs8jq2qxuci5PZ/dstKAMPW5xUPFNXXu6BwyPgS+3Rg\nnFNGyxBOBh5PA2b/1lDmcUiQOPCp0nQwpIY7St/0vTQ6NtckrtZQ2efmtfhvoXJd\nhhrySIVSa3CrfVciS2s0wwN6BSfgfGkQQYCpDQrMTGLb0hRI4OiUHqyQ1TSB4f2D\nIWwKqha+WTDMivXwxvC/OTZeySJByjzRgnIctNfcnBoK+WX2Q7rxOCtPY0Pbx3At\nqYNbnvKWU62vmQj+Fzdq74B/o9P5r6De2aJdIAkA5KCLyDjKHALA42wQZr1kZ7c=\n=8o9k\n-----END PGP SIGNATURE-----\n", "payload": "tree a015a8a8162acacb61b3353b4642c93cd80e51ae\nparent 93199002af05f3a3dfd274fe10633372f2471b73\nparent b043358be936b7f139efd49b7d187d64e319830e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570535174 +0000\ncommitter GitHub <noreply@github.com> 1570535174 +0000\n\nMerge #1924\n\n1924: Support inferring&completing `Self` type in enum/struct/union definitions r=ice1000 a=ice1000\n\nSigned-off-by: ice1000 <ice1000kotlin@foxmail.com>\r\n\r\nAn attempt to fix #1908.\r\nThis code works, but I believe the implementation is ugly. Please give me suggestions!\n\nCo-authored-by: ice1000 <ice1000kotlin@foxmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "html_url": "https://github.com/rust-lang/rust/commit/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93199002af05f3a3dfd274fe10633372f2471b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/93199002af05f3a3dfd274fe10633372f2471b73", "html_url": "https://github.com/rust-lang/rust/commit/93199002af05f3a3dfd274fe10633372f2471b73"}, {"sha": "b043358be936b7f139efd49b7d187d64e319830e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b043358be936b7f139efd49b7d187d64e319830e", "html_url": "https://github.com/rust-lang/rust/commit/b043358be936b7f139efd49b7d187d64e319830e"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "58db6832d1a5c786bb538a6d1bba062b11492b16", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -24,7 +24,7 @@ use crate::{\n         U8, USIZE,\n     },\n     nameres::{CrateModuleId, ImportId, ModuleScope, Namespace},\n-    resolve::{Resolver, TypeNs},\n+    resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n     ty::{\n         primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n@@ -465,7 +465,7 @@ impl Enum {\n         // ...and add generic params, if present\n         let p = self.generic_params(db);\n         let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_scope(Scope::AdtScope(self.into()))\n     }\n }\n "}, {"sha": "3c797c0c3a82168a087446a255627eebd60dfd6b", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -43,8 +43,10 @@ pub(crate) enum Scope {\n     ModuleScope(ModuleItemMap),\n     /// Brings the generic parameters of an item into scope\n     GenericParams(Arc<GenericParams>),\n-    /// Brings `Self` into scope\n+    /// Brings `Self` in `impl` block into scope\n     ImplBlockScope(ImplBlock),\n+    /// Brings `Self` in enum, struct and union definitions into scope\n+    AdtScope(Adt),\n     /// Local bindings\n     ExprScope(ExprScope),\n }\n@@ -54,6 +56,7 @@ pub enum TypeNs {\n     SelfType(ImplBlock),\n     GenericParam(u32),\n     Adt(Adt),\n+    AdtSelfType(Adt),\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n@@ -151,6 +154,12 @@ impl Resolver {\n                         return Some((TypeNs::SelfType(*impl_), idx));\n                     }\n                 }\n+                Scope::AdtScope(adt) => {\n+                    if first_name == &SELF_TYPE {\n+                        let idx = if path.segments.len() == 1 { None } else { Some(1) };\n+                        return Some((TypeNs::AdtSelfType(*adt), idx));\n+                    }\n+                }\n                 Scope::ModuleScope(m) => {\n                     let (module_def, idx) = m.crate_def_map.resolve_path(db, m.module_id, path);\n                     let res = match module_def.take_types()? {\n@@ -200,7 +209,10 @@ impl Resolver {\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n         for scope in self.scopes.iter().rev() {\n             match scope {\n-                Scope::ExprScope(_) | Scope::GenericParams(_) | Scope::ImplBlockScope(_)\n+                Scope::AdtScope(_)\n+                | Scope::ExprScope(_)\n+                | Scope::GenericParams(_)\n+                | Scope::ImplBlockScope(_)\n                     if skip_to_mod =>\n                 {\n                     continue\n@@ -233,7 +245,13 @@ impl Resolver {\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n-                Scope::ImplBlockScope(_) => continue,\n+                Scope::AdtScope(adt) if n_segments > 1 => {\n+                    if first_name == &SELF_TYPE {\n+                        let ty = TypeNs::AdtSelfType(*adt);\n+                        return Some(ResolveValueResult::Partial(ty, 1));\n+                    }\n+                }\n+                Scope::ImplBlockScope(_) | Scope::AdtScope(_) => continue,\n \n                 Scope::ModuleScope(m) => {\n                     let (module_def, idx) = m.crate_def_map.resolve_path(db, m.module_id, path);\n@@ -389,7 +407,8 @@ pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n     GenericParam(u32),\n-    SelfType(ImplBlock),\n+    ImplSelfType(ImplBlock),\n+    AdtSelfType(Adt),\n     LocalBinding(PatId),\n     Unknown,\n }\n@@ -437,7 +456,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(SELF_TYPE, ScopeDef::SelfType(*i));\n+                f(SELF_TYPE, ScopeDef::ImplSelfType(*i));\n+            }\n+            Scope::AdtScope(i) => {\n+                f(SELF_TYPE, ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(e) => {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {"}, {"sha": "a907d6a9f9db14c28e1c5bdb05d916d67c9c0480", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -216,7 +216,7 @@ impl SourceAnalyzer {\n         let types = self.resolver.resolve_path_in_type_ns_fully(db, &path).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it),\n             TypeNs::GenericParam(it) => PathResolution::GenericParam(it),\n-            TypeNs::Adt(it) => PathResolution::Def(it.into()),\n+            TypeNs::AdtSelfType(it) | TypeNs::Adt(it) => PathResolution::Def(it.into()),\n             TypeNs::EnumVariant(it) => PathResolution::Def(it.into()),\n             TypeNs::TypeAlias(it) => PathResolution::Def(it.into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),"}, {"sha": "a69f04ff1513197d1bddbf954f221d5078d9603f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -559,6 +559,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             match resolver.resolve_path_in_type_ns_fully(self.db, &path) {\n                 Some(TypeNs::Adt(Adt::Struct(it))) => it.into(),\n                 Some(TypeNs::Adt(Adt::Union(it))) => it.into(),\n+                Some(TypeNs::AdtSelfType(adt)) => adt.into(),\n                 Some(TypeNs::EnumVariant(it)) => it.into(),\n                 Some(TypeNs::TypeAlias(it)) => it.into(),\n "}, {"sha": "a604c02e2d600209b1fee82dd1410a86138dcb24", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -175,6 +175,7 @@ impl Ty {\n                 Ty::Param { idx, name }\n             }\n             TypeNs::SelfType(impl_block) => impl_block.target_ty(db),\n+            TypeNs::AdtSelfType(adt) => adt.ty(db),\n \n             TypeNs::Adt(it) => Ty::from_hir_path_inner(db, resolver, resolved_segment, it.into()),\n             TypeNs::BuiltinType(it) => {"}, {"sha": "03b30adcd35aaaa781029b9bb0dccbfe9a02917e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -134,6 +134,25 @@ mod boxed {\n     assert_eq!(\"(Box<i32>, Box<Box<i32>>, Box<&i32>, Box<[i32;_]>)\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_adt_self() {\n+    let (db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+enum Nat { Succ(Self), Demo(Nat), Zero }\n+\n+fn test() {\n+    let foo: Nat = Nat::Zero;\n+    if let Nat::Succ(x) = foo {\n+        x<|>\n+    }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"Nat\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (mut db, pos) = MockDatabase::with_position("}, {"sha": "38a6c3d37b65f77a50a492bdf209e0dc0bd091e9", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -309,6 +309,35 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_self_in_enum() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum X {\n+                    Y(<|>)\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Self\",\n+        source_range: [48; 48),\n+        delete: [48; 48),\n+        insert: \"Self\",\n+        kind: TypeParam,\n+    },\n+    CompletionItem {\n+        label: \"X\",\n+        source_range: [48; 48),\n+        delete: [48; 48),\n+        insert: \"X\",\n+        kind: Enum,\n+    },\n+]\"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_module_items() {\n         assert_debug_snapshot!("}, {"sha": "eb480a775ea57d0b99eede8f01330e30383d466f", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=92cf0eba93b8d2705ed39bef1a4ea665ed3c25dc", "patch": "@@ -72,7 +72,7 @@ impl Completions {\n             }\n             ScopeDef::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n             ScopeDef::LocalBinding(..) => (CompletionItemKind::Binding, None),\n-            ScopeDef::SelfType(..) => (\n+            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => (\n                 CompletionItemKind::TypeParam, // (does this need its own kind?)\n                 None,\n             ),"}]}