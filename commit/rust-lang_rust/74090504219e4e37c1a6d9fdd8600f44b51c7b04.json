{"sha": "74090504219e4e37c1a6d9fdd8600f44b51c7b04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDkwNTA0MjE5ZTRlMzdjMWE2ZDlmZGQ4NjAwZjQ0YjUxYzdiMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-29T23:52:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-29T23:52:21Z"}, "message": "auto merge of #17468 : nick29581/rust/dst-bug-nostd, r=nikomatsakis\n\ncloses #17392 \r\n\r\nr? @nikomatsakis \r\n\r\nKind of a first draft because I'm not sure if this is the right approach. I believe the general idea of giving an error rather than an ICE in obligation_for_builtin_bound is right, but not sure about returning an Option, etc.\r\n\r\nAlso, could probably have a better error message.", "tree": {"sha": "061ed280c1151b9a117f7ea972f364f063a68932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/061ed280c1151b9a117f7ea972f364f063a68932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74090504219e4e37c1a6d9fdd8600f44b51c7b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74090504219e4e37c1a6d9fdd8600f44b51c7b04", "html_url": "https://github.com/rust-lang/rust/commit/74090504219e4e37c1a6d9fdd8600f44b51c7b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74090504219e4e37c1a6d9fdd8600f44b51c7b04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c66796525cef24d4bcc0cd2d0626c2e61a4627f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c66796525cef24d4bcc0cd2d0626c2e61a4627f", "html_url": "https://github.com/rust-lang/rust/commit/0c66796525cef24d4bcc0cd2d0626c2e61a4627f"}, {"sha": "1c36d1c71d0095d822ab03e7615fffc63fb16988", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c36d1c71d0095d822ab03e7615fffc63fb16988", "html_url": "https://github.com/rust-lang/rust/commit/1c36d1c71d0095d822ab03e7615fffc63fb16988"}], "stats": {"total": 147, "additions": 102, "deletions": 45}, "files": [{"sha": "88685101b31325440365d10e8d825c97e1f67d94", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -86,6 +86,10 @@ pub enum ObligationCauseCode {\n     FieldSized,\n }\n \n+// An error has already been reported to the user, so no need to continue checking.\n+#[deriving(Clone,Show)]\n+pub struct ErrorReported;\n+\n pub type Obligations = subst::VecPerParamSpace<Obligation>;\n \n pub type Selection = Vtable<Obligation>;\n@@ -332,7 +336,7 @@ pub fn obligation_for_builtin_bound(tcx: &ty::ctxt,\n                                     cause: ObligationCause,\n                                     source_ty: ty::t,\n                                     builtin_bound: ty::BuiltinBound)\n-                                    -> Obligation\n+                                    -> Result<Obligation, ErrorReported>\n {\n     util::obligation_for_builtin_bound(tcx, cause, builtin_bound, 0, source_ty)\n }"}, {"sha": "61477fdeed5f7ba00f91bee0608d6b4af99831a3", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -228,6 +228,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 bound,\n                 previous_stack.obligation.recursion_depth + 1,\n                 ty);\n+        let obligation = match obligation {\n+            Ok(ob) => ob,\n+            _ => return EvaluatedToMatch\n+        };\n+\n         self.evaluate_obligation_recursively(previous_stack, &obligation)\n     }\n "}, {"sha": "ab5bbf4363f31915a5a5da794b1d37cc072e70e7", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -20,7 +20,8 @@ use syntax::ast;\n use syntax::codemap::Span;\n use util::ppaux::Repr;\n \n-use super::{Obligation, ObligationCause, VtableImpl, VtableParam, VtableParamData, VtableImplData};\n+use super::{ErrorReported, Obligation, ObligationCause, VtableImpl,\n+            VtableParam, VtableParamData, VtableImplData};\n \n ///////////////////////////////////////////////////////////////////////////\n // Supertrait iterator\n@@ -82,7 +83,7 @@ impl<'cx, 'tcx> Supertraits<'cx, 'tcx> {\n             let bound_trait_ref = trait_ref_for_builtin_bound(self.tcx,\n                                                               builtin_bound,\n                                                               trait_ref.self_ty());\n-            trait_bounds.push(bound_trait_ref);\n+            bound_trait_ref.map(|trait_ref| trait_bounds.push(trait_ref));\n         }\n \n         // Only keep those bounds that we haven't already seen.  This\n@@ -213,13 +214,15 @@ fn push_obligations_for_param_bounds(\n     let param_ty = *param_substs.types.get(space, index);\n \n     for builtin_bound in param_bounds.builtin_bounds.iter() {\n-        obligations.push(\n-            space,\n-            obligation_for_builtin_bound(tcx,\n-                                         cause,\n-                                         builtin_bound,\n-                                         recursion_depth,\n-                                         param_ty));\n+        let obligation = obligation_for_builtin_bound(tcx,\n+                                                      cause,\n+                                                      builtin_bound,\n+                                                      recursion_depth,\n+                                                      param_ty);\n+        match obligation {\n+            Ok(ob) => obligations.push(space, ob),\n+            _ => {}\n+        }\n     }\n \n     for bound_trait_ref in param_bounds.trait_bounds.iter() {\n@@ -236,17 +239,18 @@ pub fn trait_ref_for_builtin_bound(\n     tcx: &ty::ctxt,\n     builtin_bound: ty::BuiltinBound,\n     param_ty: ty::t)\n-    -> Rc<ty::TraitRef>\n+    -> Option<Rc<ty::TraitRef>>\n {\n     match tcx.lang_items.from_builtin_kind(builtin_bound) {\n         Ok(def_id) => {\n-            Rc::new(ty::TraitRef {\n+            Some(Rc::new(ty::TraitRef {\n                 def_id: def_id,\n                 substs: Substs::empty().with_self_ty(param_ty)\n-            })\n+            }))\n         }\n         Err(e) => {\n-            tcx.sess.bug(e.as_slice());\n+            tcx.sess.err(e.as_slice());\n+            None\n         }\n     }\n }\n@@ -257,13 +261,16 @@ pub fn obligation_for_builtin_bound(\n     builtin_bound: ty::BuiltinBound,\n     recursion_depth: uint,\n     param_ty: ty::t)\n-    -> Obligation\n+    -> Result<Obligation, ErrorReported>\n {\n     let trait_ref = trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty);\n-    Obligation {\n-        cause: cause,\n-        recursion_depth: recursion_depth,\n-        trait_ref: trait_ref\n+    match trait_ref {\n+        Some(trait_ref) => Ok(Obligation {\n+                cause: cause,\n+                recursion_depth: recursion_depth,\n+                trait_ref: trait_ref\n+            }),\n+        None => Err(ErrorReported)\n     }\n }\n "}, {"sha": "0bf22d97345cf978afd5ffe07f3c817e5896568c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -1795,12 +1795,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               code: traits::ObligationCauseCode,\n                               bound: ty::BuiltinBound)\n     {\n-        self.register_obligation(\n-            traits::obligation_for_builtin_bound(\n-                self.tcx(),\n-                traits::ObligationCause::new(span, code),\n-                ty,\n-                bound));\n+        let obligation = traits::obligation_for_builtin_bound(\n+            self.tcx(),\n+            traits::ObligationCause::new(span, code),\n+            ty,\n+            bound);\n+        match obligation {\n+            Ok(ob) => self.register_obligation(ob),\n+            _ => {}\n+        }\n     }\n \n     pub fn require_type_is_sized(&self,"}, {"sha": "b853616991fedf8e2e0192e3e615cf9ba1317611", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -945,7 +945,13 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 let cause = traits::ObligationCause::new(freevar.span, code);\n                 let obligation = traits::obligation_for_builtin_bound(rcx.tcx(), cause,\n                                                                       var_ty, builtin_bound);\n-                rcx.fcx.inh.fulfillment_cx.borrow_mut().register_obligation(rcx.tcx(), obligation);\n+                match obligation {\n+                    Ok(obligation) => {\n+                        rcx.fcx.inh.fulfillment_cx.borrow_mut().register_obligation(rcx.tcx(),\n+                                                                                    obligation)\n+                    }\n+                    _ => {}\n+                }\n             }\n             type_must_outlive(\n                 rcx, infer::RelateProcBound(expr.span, var_node_id, var_ty),"}, {"sha": "bdcf4d73c3b840f74d2135d315413f694679b06f", "filename": "src/librustc/middle/typeck/check/vtable2.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -170,13 +170,16 @@ pub fn register_object_cast_obligations(fcx: &FnCtxt,\n     // object type is Foo+Send, this would create an obligation\n     // for the Send check.)\n     for builtin_bound in object_trait.bounds.builtin_bounds.iter() {\n-        fcx.register_obligation(\n-            obligation_for_builtin_bound(\n+            let obligation = obligation_for_builtin_bound(\n                 fcx.tcx(),\n                 ObligationCause::new(span,\n                                      traits::ObjectCastObligation(object_trait_ty)),\n                 referent_ty,\n-                builtin_bound));\n+                builtin_bound);\n+            match obligation {\n+                Ok(obligation) => fcx.register_obligation(obligation),\n+                _ => {}\n+            }\n     }\n \n     object_trait_ref"}, {"sha": "587aa072fa8636b18ac04a87d0ea9d38ba6d6f33", "filename": "src/librustc/middle/typeck/check/wf.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -124,11 +124,14 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 if variant.fields.len() > 0 {\n                     for field in variant.fields.init().iter() {\n                         let cause = traits::ObligationCause::new(field.span, traits::FieldSized);\n-                        fcx.register_obligation(\n-                            traits::obligation_for_builtin_bound(fcx.tcx(),\n-                                                                 cause,\n-                                                                 field.ty,\n-                                                                 ty::BoundSized));\n+                        let obligation = traits::obligation_for_builtin_bound(fcx.tcx(),\n+                                                                              cause,\n+                                                                              field.ty,\n+                                                                              ty::BoundSized);\n+                        match obligation {\n+                            Ok(obligation) => fcx.register_obligation(obligation),\n+                            _ => {}\n+                        }\n                     }\n                 }\n             }\n@@ -213,11 +216,14 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                                           &trait_def.bounds,\n                                                           trait_ref.self_ty());\n             for builtin_bound in trait_def.bounds.builtin_bounds.iter() {\n-                fcx.register_obligation(\n-                    traits::obligation_for_builtin_bound(fcx.tcx(),\n-                                                         cause,\n-                                                         trait_ref.self_ty(),\n-                                                         builtin_bound));\n+                let obligation = traits::obligation_for_builtin_bound(fcx.tcx(),\n+                                                                      cause,\n+                                                                      trait_ref.self_ty(),\n+                                                                      builtin_bound);\n+                match obligation {\n+                    Ok (obligation) => fcx.register_obligation(obligation),\n+                    _ => {}\n+                }\n             }\n             for trait_bound in trait_def.bounds.trait_bounds.iter() {\n                 let trait_bound = trait_bound.subst(fcx.tcx(), &trait_ref.substs);\n@@ -453,12 +459,14 @@ fn check_struct_safe_for_destructor(fcx: &FnCtxt,\n         && !struct_tpt.generics.has_region_params(subst::TypeSpace)\n     {\n         let cause = traits::ObligationCause::new(span, traits::DropTrait);\n-        fcx.register_obligation(\n-            traits::obligation_for_builtin_bound(\n-                fcx.tcx(),\n-                cause,\n-                self_ty,\n-                ty::BoundSend));\n+        let obligation = traits::obligation_for_builtin_bound(fcx.tcx(),\n+                                                              cause,\n+                                                              self_ty,\n+                                                              ty::BoundSend);\n+        match obligation {\n+            Ok(obligation) => fcx.register_obligation(obligation),\n+            _ => {}\n+        }\n     } else {\n         span_err!(fcx.tcx().sess, span, E0141,\n                   \"cannot implement a destructor on a structure \\"}, {"sha": "bcde10a0b22381b577cc7a911c71d9f87cdc56c9", "filename": "src/test/compile-fail/lang-item-missing.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74090504219e4e37c1a6d9fdd8600f44b51c7b04/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs?ref=74090504219e4e37c1a6d9fdd8600f44b51c7b04", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a missing lang item (in this case `sized`) does not cause an ICE,\n+// see #17392.\n+\n+// error-pattern: requires `sized` lang_item\n+\n+#![no_std]\n+\n+#[start]\n+fn start(argc: int, argv: *const *const u8) -> int {\n+    0\n+}"}]}