{"sha": "e65d0cbabebc73f2c9733a7ed158576c9702e71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NWQwY2JhYmViYzczZjJjOTczM2E3ZWQxNTg1NzZjOTcwMmU3MWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-24T01:22:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-25T00:07:03Z"}, "message": "extra: Make test runner compatible with newsched", "tree": {"sha": "717d289c5fda8bc54c7d5fb340a94949a6432ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717d289c5fda8bc54c7d5fb340a94949a6432ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65d0cbabebc73f2c9733a7ed158576c9702e71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65d0cbabebc73f2c9733a7ed158576c9702e71e", "html_url": "https://github.com/rust-lang/rust/commit/e65d0cbabebc73f2c9733a7ed158576c9702e71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65d0cbabebc73f2c9733a7ed158576c9702e71e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "url": "https://api.github.com/repos/rust-lang/rust/commits/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "html_url": "https://github.com/rust-lang/rust/commit/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "64c6a822a86e70876ebbb13433ae1d0e0b9d15e7", "filename": "src/libextra/test.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=e65d0cbabebc73f2c9733a7ed158576c9702e71e", "patch": "@@ -31,14 +31,6 @@ use core::to_str::ToStr;\n use core::uint;\n use core::vec;\n \n-pub mod rustrt {\n-    use core::libc::size_t;\n-\n-    #[abi = \"cdecl\"]\n-    pub extern {\n-        pub unsafe fn rust_sched_threads() -> size_t;\n-    }\n-}\n \n // The name of a test. By convention this follows the rules for rust\n // paths; i.e. it should be a series of identifiers separated by double\n@@ -488,11 +480,10 @@ static sched_overcommit : uint = 1;\n static sched_overcommit : uint = 4u;\n \n fn get_concurrency() -> uint {\n-    unsafe {\n-        let threads = rustrt::rust_sched_threads() as uint;\n-        if threads == 1 { 1 }\n-        else { threads * sched_overcommit }\n-    }\n+    use core::rt;\n+    let threads = rt::util::default_sched_threads();\n+    if threads == 1 { 1 }\n+    else { threads * sched_overcommit }\n }\n \n #[allow(non_implicitly_copyable_typarams)]"}, {"sha": "bbf1cf0d9b797caceb68160f80914f6d2156bef0", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=e65d0cbabebc73f2c9733a7ed158576c9702e71e", "patch": "@@ -63,11 +63,9 @@ Several modules in `core` are clients of `rt`:\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n-use from_str::FromStr;\n use iter::Times;\n use iterator::IteratorUtil;\n-use option::{Some, None};\n-use os;\n+use option::Some;\n use ptr::RawPtr;\n use rt::sched::{Scheduler, Coroutine, Shutdown};\n use rt::sleeper_list::SleeperList;\n@@ -223,10 +221,7 @@ pub fn run(main: ~fn()) -> int {\n \n     static DEFAULT_ERROR_CODE: int = 101;\n \n-    let nthreads = match os::getenv(\"RUST_THREADS\") {\n-        Some(nstr) => FromStr::from_str(nstr).get(),\n-        None => util::num_cpus()\n-    };\n+    let nthreads = util::default_sched_threads();\n \n     // The shared list of sleeping schedulers. Schedulers wake each other\n     // occassionally to do new work."}, {"sha": "5219ae1d5406d8e4c706f1e1a2640a9ba92b47dd", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=e65d0cbabebc73f2c9733a7ed158576c9702e71e", "patch": "@@ -9,8 +9,11 @@\n // except according to those terms.\n \n use container::Container;\n+use from_str::FromStr;\n use iterator::IteratorUtil;\n use libc;\n+use option::{Some, None};\n+use os;\n use str::StrSlice;\n \n /// Get the number of cores available\n@@ -24,6 +27,15 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n+/// Get's the number of scheduler threads requested by the environment\n+/// either `RUST_THREADS` or `num_cpus`.\n+pub fn default_sched_threads() -> uint {\n+    match os::getenv(\"RUST_THREADS\") {\n+        Some(nstr) => FromStr::from_str(nstr).get(),\n+        None => num_cpus()\n+    }\n+}\n+\n pub fn dumb_println(s: &str) {\n     use io::WriterUtil;\n     let dbg = ::libc::STDERR_FILENO as ::io::fd_t;"}, {"sha": "0e0bf2a13e171eb84b8c90834b5b6f52e6bc6ab1", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65d0cbabebc73f2c9733a7ed158576c9702e71e/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=e65d0cbabebc73f2c9733a7ed158576c9702e71e", "patch": "@@ -23,15 +23,13 @@ mod rustrt {\n         pub fn rust_get_sched_id() -> libc::intptr_t;\n         pub fn rust_get_argc() -> libc::c_int;\n         pub fn get_task_id() -> libc::intptr_t;\n-        pub fn rust_sched_threads();\n         pub fn rust_get_task();\n     }\n }\n \n fn calllink01() { unsafe { rustrt::rust_get_sched_id(); } }\n fn calllink02() { unsafe { rustrt::rust_get_argc(); } }\n fn calllink08() { unsafe { rustrt::get_task_id(); } }\n-fn calllink09() { unsafe { rustrt::rust_sched_threads(); } }\n fn calllink10() { unsafe { rustrt::rust_get_task(); } }\n \n fn runtest(f: extern fn(), frame_backoff: u32) {\n@@ -64,7 +62,6 @@ pub fn main() {\n         calllink01,\n         calllink02,\n         calllink08,\n-        calllink09,\n         calllink10\n     ];\n     let mut rng = rand::rng();"}]}