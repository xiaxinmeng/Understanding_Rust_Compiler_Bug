{"sha": "7388cb4cf81523fb2709518ec8b6a16c329b72e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODhjYjRjZjgxNTIzZmIyNzA5NTE4ZWM4YjZhMTZjMzI5YjcyZTU=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-30T02:19:29Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-30T02:19:29Z"}, "message": "Fixup remaining direct relocation field references", "tree": {"sha": "bef99fc174b50bfd3721780c935dae1224020dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef99fc174b50bfd3721780c935dae1224020dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7388cb4cf81523fb2709518ec8b6a16c329b72e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7388cb4cf81523fb2709518ec8b6a16c329b72e5", "html_url": "https://github.com/rust-lang/rust/commit/7388cb4cf81523fb2709518ec8b6a16c329b72e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7388cb4cf81523fb2709518ec8b6a16c329b72e5/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bee2d3748ef472e416b4a690af89543ed0edd302", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee2d3748ef472e416b4a690af89543ed0edd302", "html_url": "https://github.com/rust-lang/rust/commit/bee2d3748ef472e416b4a690af89543ed0edd302"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "958666cb8858a62fa1b71f6119e1fb58db2ea275", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7388cb4cf81523fb2709518ec8b6a16c329b72e5/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7388cb4cf81523fb2709518ec8b6a16c329b72e5/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=7388cb4cf81523fb2709518ec8b6a16c329b72e5", "patch": "@@ -25,12 +25,12 @@ use rustc::hir::{self, CodegenFnAttrs, CodegenFnAttrFlags};\n use std::ffi::{CStr, CString};\n \n pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll Value {\n-    let mut llvals = Vec::with_capacity(alloc.relocations.len() + 1);\n+    let mut llvals = Vec::with_capacity(alloc.relocations().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n \n     let mut next_offset = 0;\n-    for &(offset, ((), alloc_id)) in alloc.relocations.iter() {\n+    for &(offset, ((), alloc_id)) in alloc.relocations().iter() {\n         let offset = offset.bytes();\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;\n@@ -455,7 +455,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 //\n                 // We could remove this hack whenever we decide to drop macOS 10.10 support.\n                 if self.tcx.sess.target.target.options.is_like_osx {\n-                    assert_eq!(alloc.relocations.len(), 0);\n+                    assert_eq!(alloc.relocations().len(), 0);\n \n                     let is_zeroed = {\n                         // Treats undefined bytes as if they were defined with the byte value that\n@@ -490,7 +490,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                         section.as_str().as_ptr() as *const _,\n                         section.as_str().len() as c_uint,\n                     );\n-                    assert!(alloc.relocations.is_empty());\n+                    assert!(alloc.relocations().is_empty());\n \n                     // The `inspect` method is okay here because we checked relocations, and\n                     // because we are doing this access to inspect the final interpreter state (not"}, {"sha": "2cac8bb0c517e49b99a8a20390689f4e61266dd2", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7388cb4cf81523fb2709518ec8b6a16c329b72e5/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7388cb4cf81523fb2709518ec8b6a16c329b72e5/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=7388cb4cf81523fb2709518ec8b6a16c329b72e5", "patch": "@@ -287,7 +287,6 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n         let Allocation {\n-            relocations,\n             size,\n             align,\n             mutability,\n@@ -300,7 +299,9 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n         // influence interpreter exeuction, but only to detect the error of cycles in evalution\n         // dependencies.\n         let bytes = self.inspect_with_undef_and_ptr_outside_interpreter(all_bytes);\n+\n         let undef_mask = self.undef_mask();\n+        let relocations = self.relocations();\n \n         AllocationSnapshot {\n             bytes,"}]}