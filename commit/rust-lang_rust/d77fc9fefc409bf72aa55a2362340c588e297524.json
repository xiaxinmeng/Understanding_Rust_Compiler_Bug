{"sha": "d77fc9fefc409bf72aa55a2362340c588e297524", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3N2ZjOWZlZmM0MDliZjcyYWE1NWEyMzYyMzQwYzU4OGUyOTc1MjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:31:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:31:23Z"}, "message": "Rollup merge of #23074 - michaelwoerister:constants-debug-locs, r=alexcrichton\n\n With this PR in-place constants are handled correctly with respect to debug location assignment.\nThe PR also adds an (unrelated) test case for debug locations in `extern \\\"C\\\"` functions.\n\nFixes #22432", "tree": {"sha": "8d475587ba9401e89a18c7a333f8d9362b95c27e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d475587ba9401e89a18c7a333f8d9362b95c27e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77fc9fefc409bf72aa55a2362340c588e297524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77fc9fefc409bf72aa55a2362340c588e297524", "html_url": "https://github.com/rust-lang/rust/commit/d77fc9fefc409bf72aa55a2362340c588e297524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77fc9fefc409bf72aa55a2362340c588e297524/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c39833ed2d307df3b1f969a83fb9b834fb36de25", "url": "https://api.github.com/repos/rust-lang/rust/commits/c39833ed2d307df3b1f969a83fb9b834fb36de25", "html_url": "https://github.com/rust-lang/rust/commit/c39833ed2d307df3b1f969a83fb9b834fb36de25"}, {"sha": "215d287982b0ea678312892fb2f8db58acebd3b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/215d287982b0ea678312892fb2f8db58acebd3b8", "html_url": "https://github.com/rust-lang/rust/commit/215d287982b0ea678312892fb2f8db58acebd3b8"}], "stats": {"total": 184, "additions": 181, "deletions": 3}, "files": [{"sha": "39b430b7ad51ed1a6ddcb5eaeaa9baea1311e89e", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=d77fc9fefc409bf72aa55a2362340c588e297524", "patch": "@@ -173,7 +173,7 @@ pub fn get_const_expr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         &**expr\n     } else {\n         ccx.sess().span_bug(ref_expr.span,\n-                            &format!(\"get_const_val given non-constant item {}\",\n+                            &format!(\"get_const_expr given non-constant item {}\",\n                                      item.repr(ccx.tcx())));\n     }\n }"}, {"sha": "95c39270cc6d9f18c56dd2e98145009c39f74ae3", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=d77fc9fefc409bf72aa55a2362340c588e297524", "patch": "@@ -697,6 +697,7 @@ struct FunctionDebugContextData {\n     fn_metadata: DISubprogram,\n     argument_counter: Cell<uint>,\n     source_locations_enabled: Cell<bool>,\n+    source_location_override: Cell<bool>,\n }\n \n enum VariableAccess<'a> {\n@@ -1176,6 +1177,12 @@ pub fn set_source_location(fcx: &FunctionContext,\n             return;\n         }\n         FunctionDebugContext::RegularContext(box ref function_debug_context) => {\n+            if function_debug_context.source_location_override.get() {\n+                // Just ignore any attempts to set a new debug location while\n+                // the override is active.\n+                return;\n+            }\n+\n             let cx = fcx.ccx;\n \n             debug!(\"set_source_location: {}\", cx.sess().codemap().span_to_string(span));\n@@ -1194,6 +1201,35 @@ pub fn set_source_location(fcx: &FunctionContext,\n     }\n }\n \n+/// This function makes sure that all debug locations emitted while executing\n+/// `wrapped_function` are set to the given `debug_loc`.\n+pub fn with_source_location_override<F, R>(fcx: &FunctionContext,\n+                                           debug_loc: DebugLoc,\n+                                           wrapped_function: F) -> R\n+    where F: FnOnce() -> R\n+{\n+    match fcx.debug_context {\n+        FunctionDebugContext::DebugInfoDisabled => {\n+            wrapped_function()\n+        }\n+        FunctionDebugContext::FunctionWithoutDebugInfo => {\n+            set_debug_location(fcx.ccx, UnknownLocation);\n+            wrapped_function()\n+        }\n+        FunctionDebugContext::RegularContext(box ref function_debug_context) => {\n+            if function_debug_context.source_location_override.get() {\n+                wrapped_function()\n+            } else {\n+                debug_loc.apply(fcx);\n+                function_debug_context.source_location_override.set(true);\n+                let result = wrapped_function();\n+                function_debug_context.source_location_override.set(false);\n+                result\n+            }\n+        }\n+    }\n+}\n+\n /// Clears the current debug location.\n ///\n /// Instructions generated hereafter won't be assigned a source location.\n@@ -1414,6 +1450,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         fn_metadata: fn_metadata,\n         argument_counter: Cell::new(1),\n         source_locations_enabled: Cell::new(false),\n+        source_location_override: Cell::new(false),\n     };\n \n "}, {"sha": "96d3e16d253b44707c6f15ba5cb7d536e002b1e1", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d77fc9fefc409bf72aa55a2362340c588e297524", "patch": "@@ -147,15 +147,21 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 ast::ExprPath(..) => {\n                     match bcx.def(expr.id) {\n                         def::DefConst(did) => {\n-                            let expr = consts::get_const_expr(bcx.ccx(), did, expr);\n+                            let const_expr = consts::get_const_expr(bcx.ccx(), did, expr);\n                             // Temporarily get cleanup scopes out of the way,\n                             // as they require sub-expressions to be contained\n                             // inside the current AST scope.\n                             // These should record no cleanups anyways, `const`\n                             // can't have destructors.\n                             let scopes = mem::replace(&mut *bcx.fcx.scopes.borrow_mut(),\n                                                       vec![]);\n-                            bcx = trans_into(bcx, expr, dest);\n+                            // Lock emitted debug locations to the location of\n+                            // the constant reference expression.\n+                            debuginfo::with_source_location_override(bcx.fcx,\n+                                                                     expr.debug_loc(),\n+                                                                     || {\n+                                bcx = trans_into(bcx, const_expr, dest)\n+                            });\n                             let scopes = mem::replace(&mut *bcx.fcx.scopes.borrow_mut(),\n                                                       scopes);\n                             assert!(scopes.is_empty());"}, {"sha": "24332e31775088b5901b5fa16aa11f78b42359ff", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=d77fc9fefc409bf72aa55a2362340c588e297524", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// This test makes sure that the compiler doesn't crash when trying to assign\n+// debug locations to const-expressions.\n+\n+use std::sync::MUTEX_INIT;\n+use std::cell::UnsafeCell;\n+\n+const CONSTANT: u64 = 3 + 4;\n+\n+struct Struct {\n+    a: isize,\n+    b: usize,\n+}\n+const STRUCT: Struct = Struct { a: 1, b: 2 };\n+\n+struct TupleStruct(u32);\n+const TUPLE_STRUCT: TupleStruct = TupleStruct(4);\n+\n+enum Enum {\n+    Variant1(char),\n+    Variant2 { a: u8 },\n+    Variant3\n+}\n+\n+const VARIANT1: Enum = Enum::Variant1('v');\n+const VARIANT2: Enum = Enum::Variant2 { a: 2 };\n+const VARIANT3: Enum = Enum::Variant3;\n+\n+const STRING: &'static str = \"String\";\n+\n+const VEC: [u32; 8] = [0; 8];\n+\n+const NESTED: (Struct, TupleStruct) = (STRUCT, TUPLE_STRUCT);\n+\n+const UNSAFE_CELL: UnsafeCell<bool> = UnsafeCell { value: false };\n+\n+fn main() {\n+    let mut _constant = CONSTANT;\n+    let mut _struct = STRUCT;\n+    let mut _tuple_struct = TUPLE_STRUCT;\n+    let mut _variant1 = VARIANT1;\n+    let mut _variant2 = VARIANT2;\n+    let mut _variant3 = VARIANT3;\n+    let mut _string = STRING;\n+    let mut _vec = VEC;\n+    let mut _nested = NESTED;\n+    let mut _extern = MUTEX_INIT;\n+    let mut _unsafe_cell = UNSAFE_CELL;\n+}"}, {"sha": "9e73417e7de7400843f334df0fb081849c12c06e", "filename": "src/test/debuginfo/extern-c-fn.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Ftest%2Fdebuginfo%2Fextern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77fc9fefc409bf72aa55a2362340c588e297524/src%2Ftest%2Fdebuginfo%2Fextern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fextern-c-fn.rs?ref=d77fc9fefc409bf72aa55a2362340c588e297524", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+// gdb-command:run\n+\n+// gdb-command:print s\n+// gdb-check:$1 = [...]\"abcd\"\n+// gdb-command:print len\n+// gdb-check:$2 = 20\n+// gdb-command:print local0\n+// gdb-check:$3 = 19\n+// gdb-command:print local1\n+// gdb-check:$4 = true\n+// gdb-command:print local2\n+// gdb-check:$5 = 20.5\n+\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print len\n+// lldb-check:[...]$0 = 20\n+// lldb-command:print local0\n+// lldb-check:[...]$1 = 19\n+// lldb-command:print local1\n+// lldb-check:[...]$2 = true\n+// lldb-command:print local2\n+// lldb-check:[...]$3 = 20.5\n+\n+// lldb-command:continue\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn fn_with_c_abi(s: *const u8, len: i32) -> i32 {\n+    let local0 = len - 1;\n+    let local1 = len > 2;\n+    let local2 = (len as f64) + 0.5;\n+\n+    zzz(); // #break\n+\n+    return 0;\n+}\n+\n+fn main() {\n+    unsafe {\n+        fn_with_c_abi(b\"abcd\\0\".as_ptr(), 20);\n+    }\n+}\n+\n+#[inline(never)]\n+fn zzz() {()}"}]}