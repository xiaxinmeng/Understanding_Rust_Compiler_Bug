{"sha": "1788f7bcdecb3454868bd1715c019a467545da93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODhmN2JjZGVjYjM0NTQ4NjhiZDE3MTVjMDE5YTQ2NzU0NWRhOTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-07-04T14:05:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-04T14:05:24Z"}, "message": "Merge pull request #1847 from Manishearth/nested_while_let\n\ndon't lint while_let_on_iterator on nested loops", "tree": {"sha": "cac14278632120392489dee2328183c7eb506e7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac14278632120392489dee2328183c7eb506e7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1788f7bcdecb3454868bd1715c019a467545da93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1788f7bcdecb3454868bd1715c019a467545da93", "html_url": "https://github.com/rust-lang/rust/commit/1788f7bcdecb3454868bd1715c019a467545da93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1788f7bcdecb3454868bd1715c019a467545da93/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ecdc1cefa8fbdefc8128d4592e8a2e39d71219", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ecdc1cefa8fbdefc8128d4592e8a2e39d71219", "html_url": "https://github.com/rust-lang/rust/commit/b8ecdc1cefa8fbdefc8128d4592e8a2e39d71219"}, {"sha": "01a4a1dfd8625fe10cd0f9097c71b6cde0f8c669", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a4a1dfd8625fe10cd0f9097c71b6cde0f8c669", "html_url": "https://github.com/rust-lang/rust/commit/01a4a1dfd8625fe10cd0f9097c71b6cde0f8c669"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "d7b915fd16dea67f7120e3c2dac072b083338a54", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1788f7bcdecb3454868bd1715c019a467545da93/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1788f7bcdecb3454868bd1715c019a467545da93/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1788f7bcdecb3454868bd1715c019a467545da93", "patch": "@@ -251,7 +251,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box shadow::Pass);\n     reg.register_late_lint_pass(box types::LetPass);\n     reg.register_late_lint_pass(box types::UnitCmp);\n-    reg.register_late_lint_pass(box loops::Pass);\n+    reg.register_late_lint_pass(box loops::Pass::default());\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n     reg.register_late_lint_pass(box entry::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);"}, {"sha": "5bb75f7c2b15c20a6c1a615e00cf8d4f097ba85d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1788f7bcdecb3454868bd1715c019a467545da93/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1788f7bcdecb3454868bd1715c019a467545da93/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1788f7bcdecb3454868bd1715c019a467545da93", "patch": "@@ -304,8 +304,10 @@ declare_lint! {\n     \"any loop that will always `break` or `return`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Pass;\n+#[derive(Copy, Clone, Default)]\n+pub struct Pass {\n+    loop_count : usize,\n+}\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -327,6 +329,13 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        match expr.node {\n+            ExprWhile(..) | ExprLoop(..) => { self.loop_count -= 1; }\n+            _ => ()\n+        }\n+    }\n+\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n@@ -336,6 +345,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         match expr.node {\n             ExprWhile(_, ref block, _) |\n             ExprLoop(ref block, _, _) => {\n+                self.loop_count += 1;\n                 if never_loop(block, &expr.id) {\n                     span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n                 }\n@@ -398,7 +408,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     &ExprMethodCall(method_name, _, ref method_args)) = (pat, &match_expr.node) {\n                 let iter_expr = &method_args[0];\n                 let lhs_constructor = last_path_segment(qpath);\n-                if method_name.node == \"next\" && match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n+                if self.loop_count < 2 && method_name.node == \"next\" &&\n+                   match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n                    lhs_constructor.name == \"Some\" && !is_refutable(cx, &pat_args[0]) &&\n                    !is_iterator_used_after_while_let(cx, iter_expr) {\n                     let iterator = snippet(cx, method_args[0].span, \"_\");"}, {"sha": "58df3ba9dcb85e741298cf39afd12179c25b0a66", "filename": "clippy_tests/examples/while_loop.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1788f7bcdecb3454868bd1715c019a467545da93/clippy_tests%2Fexamples%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1788f7bcdecb3454868bd1715c019a467545da93/clippy_tests%2Fexamples%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fwhile_loop.rs?ref=1788f7bcdecb3454868bd1715c019a467545da93", "patch": "@@ -165,4 +165,16 @@ fn refutable() {\n     for &(1, 2, 3) in b {}\n     for &Option::None in b.next() {}\n     // */\n+\n+    let mut y = a.iter();\n+    loop { // x is reused, so don't lint here\n+        while let Some(v) = y.next() {\n+        }\n+    }\n+\n+    let mut y = a.iter();\n+    for _ in 0..2 {\n+        while let Some(v) = y.next() {\n+        }\n+    }\n }"}]}