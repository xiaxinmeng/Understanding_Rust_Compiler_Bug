{"sha": "50f9925fabbc738f7be0df8148c99fae3e975bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjk5MjVmYWJiYzczOGY3YmUwZGY4MTQ4Yzk5ZmFlM2U5NzViYjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-22T23:22:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-23T21:21:15Z"}, "message": "core: Give future_pipe the same definition as pipes::oneshot", "tree": {"sha": "651d19c0e1222894fef3d919a2d11f0230965326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651d19c0e1222894fef3d919a2d11f0230965326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f9925fabbc738f7be0df8148c99fae3e975bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f9925fabbc738f7be0df8148c99fae3e975bb1", "html_url": "https://github.com/rust-lang/rust/commit/50f9925fabbc738f7be0df8148c99fae3e975bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f9925fabbc738f7be0df8148c99fae3e975bb1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759e1c165f474314bb113d0b72e8ef85fc3864d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/759e1c165f474314bb113d0b72e8ef85fc3864d7", "html_url": "https://github.com/rust-lang/rust/commit/759e1c165f474314bb113d0b72e8ef85fc3864d7"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "8d4540605347d689d3cb97ccca74ef055373cbb2", "filename": "src/libcore/future.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50f9925fabbc738f7be0df8148c99fae3e975bb1/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f9925fabbc738f7be0df8148c99fae3e975bb1/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=50f9925fabbc738f7be0df8148c99fae3e975bb1", "patch": "@@ -67,7 +67,7 @@ pub fn from_value<A>(val: A) -> Future<A> {\n     Future {state: Forced(~(move val))}\n }\n \n-pub fn from_port<A:Send>(port: future_pipe::client::waiting<A>) ->\n+pub fn from_port<A:Send>(port: future_pipe::server::waiting<A>) ->\n         Future<A> {\n     /*!\n      * Create a future from a port\n@@ -107,9 +107,15 @@ pub fn spawn<A:Send>(blk: fn~() -> A) -> Future<A> {\n      * value of the future.\n      */\n \n-    from_port(pipes::spawn_service_recv(future_pipe::init, |move blk, ch| {\n-        future_pipe::server::completed(move ch, blk());\n-    }))\n+    let (chan, port) = future_pipe::init();\n+\n+    let chan = ~mut Some(move chan);\n+    do task::spawn |move blk, move chan| {\n+        let chan = option::swap_unwrap(&mut *chan);\n+        future_pipe::client::completed(move chan, blk());\n+    }\n+\n+    return from_port(move port);\n }\n \n pub fn get_ref<A>(future: &r/Future<A>) -> &r/A {\n@@ -163,7 +169,7 @@ pub fn with<A,B>(future: &Future<A>, blk: fn((&A)) -> B) -> B {\n }\n \n proto! future_pipe (\n-    waiting:recv<T:Send> {\n+    waiting:send<T:Send> {\n         completed(T) -> !\n     }\n )\n@@ -178,8 +184,8 @@ pub mod test {\n \n     #[test]\n     pub fn test_from_port() {\n-        let (po, ch) = future_pipe::init();\n-        future_pipe::server::completed(move ch, ~\"whale\");\n+        let (ch, po) = future_pipe::init();\n+        future_pipe::client::completed(move ch, ~\"whale\");\n         let f = from_port(move po);\n         assert get(&f) == ~\"whale\";\n     }"}]}