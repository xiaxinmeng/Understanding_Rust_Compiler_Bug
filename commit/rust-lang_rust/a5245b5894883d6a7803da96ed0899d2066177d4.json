{"sha": "a5245b5894883d6a7803da96ed0899d2066177d4", "node_id": "C_kwDOAAsO6NoAKGE1MjQ1YjU4OTQ4ODNkNmE3ODAzZGE5NmVkMDg5OWQyMDY2MTc3ZDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-12T15:44:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-12T15:44:37Z"}, "message": "Rollup merge of #112302 - jieyouxu:issue-85184, r=WaffleLapkin\n\nSuggest using `ptr::null_mut` when user provided `ptr::null` to a function expecting `ptr::null_mut`\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/ptr-null-mutability-suggestions.rs:9:24\n   |\nLL |     expecting_null_mut(ptr::null());\n   |     ------------------ ^^^^^^^^^^^\n   |     |                  |\n   |     |                  types differ in mutability\n   |     |                  help: consider using `core::ptr::null_mut` instead: `core::ptr::null_mut()`\n   |     arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*mut u8`\n              found raw pointer `*const _`\nnote: function defined here\n  --> $DIR/ptr-null-mutability-suggestions.rs:6:4\n   |\nLL | fn expecting_null_mut(_: *mut u8) {}\n   |    ^^^^^^^^^^^^^^^^^^ ----------\n```\n\nCloses #85184.", "tree": {"sha": "f1b13d47f49f0ff946373a4e55fc26e9e6f99e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b13d47f49f0ff946373a4e55fc26e9e6f99e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5245b5894883d6a7803da96ed0899d2066177d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhz1lCRBK7hj4Ov3rIwAAFukIAJVtqjrmqbs6xTLZNUKaALwC\nm8AhKvNvphIdc81m50qVcw8HVjmb/s1ArkPj4VW/NyzbXIIUQW9OyqPoyrn6GGHv\nAxkS8jV5vk0S38n8375589ZZoQv8jIqmYTUkpSJTvwhVBPfGBoJ1Uc43lNsodVQT\nZXvAeoXOv9EYtISDXev/OIfoMbJAn7syIl8WO6cxTqijkxVBl9UfL7AWLiJk9cg0\nWYqFzyVGOFe3Bg/dG6UUxFOEJTXnwWfFQIJzBR0yvKAtolzo/yBDVjekn748XIDW\nBDk6oSZDaQSJ4rdTOtrrZY+pbqS51ebURWNvqmyhO6uEBPtpssoqp5T2S2wOxXA=\n=zl+k\n-----END PGP SIGNATURE-----\n", "payload": "tree f1b13d47f49f0ff946373a4e55fc26e9e6f99e80\nparent cb882fa998571e8a7ec1c06bb5d9dd9bc3423629\nparent 432ce39c8bb5520cdaea7a633c86eb11036a5985\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686584677 +0200\ncommitter GitHub <noreply@github.com> 1686584677 +0200\n\nRollup merge of #112302 - jieyouxu:issue-85184, r=WaffleLapkin\n\nSuggest using `ptr::null_mut` when user provided `ptr::null` to a function expecting `ptr::null_mut`\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/ptr-null-mutability-suggestions.rs:9:24\n   |\nLL |     expecting_null_mut(ptr::null());\n   |     ------------------ ^^^^^^^^^^^\n   |     |                  |\n   |     |                  types differ in mutability\n   |     |                  help: consider using `core::ptr::null_mut` instead: `core::ptr::null_mut()`\n   |     arguments to this function are incorrect\n   |\n   = note: expected raw pointer `*mut u8`\n              found raw pointer `*const _`\nnote: function defined here\n  --> $DIR/ptr-null-mutability-suggestions.rs:6:4\n   |\nLL | fn expecting_null_mut(_: *mut u8) {}\n   |    ^^^^^^^^^^^^^^^^^^ ----------\n```\n\nCloses #85184.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5245b5894883d6a7803da96ed0899d2066177d4", "html_url": "https://github.com/rust-lang/rust/commit/a5245b5894883d6a7803da96ed0899d2066177d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5245b5894883d6a7803da96ed0899d2066177d4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb882fa998571e8a7ec1c06bb5d9dd9bc3423629", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb882fa998571e8a7ec1c06bb5d9dd9bc3423629", "html_url": "https://github.com/rust-lang/rust/commit/cb882fa998571e8a7ec1c06bb5d9dd9bc3423629"}, {"sha": "432ce39c8bb5520cdaea7a633c86eb11036a5985", "url": "https://api.github.com/repos/rust-lang/rust/commits/432ce39c8bb5520cdaea7a633c86eb11036a5985", "html_url": "https://github.com/rust-lang/rust/commit/432ce39c8bb5520cdaea7a633c86eb11036a5985"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "c1c58db57648c47a9e74abd3d89ba8f1fb47090c", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5245b5894883d6a7803da96ed0899d2066177d4/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a5245b5894883d6a7803da96ed0899d2066177d4/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=a5245b5894883d6a7803da96ed0899d2066177d4", "patch": "@@ -89,6 +89,8 @@ hir_typeck_suggest_boxing_note = for more on the distinction between the stack a\n \n hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`\n \n+hir_typeck_suggest_ptr_null_mut = consider using `core::ptr::null_mut` instead\n+\n hir_typeck_union_pat_dotdot = `..` cannot be used in union patterns\n \n hir_typeck_union_pat_multiple_fields = union patterns should have exactly one field"}, {"sha": "6b4168d89446f33acb28692422e3241acf7eddca", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5245b5894883d6a7803da96ed0899d2066177d4/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5245b5894883d6a7803da96ed0899d2066177d4/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=a5245b5894883d6a7803da96ed0899d2066177d4", "patch": "@@ -298,6 +298,17 @@ pub enum SuggestBoxing {\n     },\n }\n \n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    hir_typeck_suggest_ptr_null_mut,\n+    applicability = \"maybe-incorrect\",\n+    code = \"core::ptr::null_mut()\"\n+)]\n+pub struct SuggestPtrNullMut {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_typeck_no_associated_item, code = \"E0599\")]\n pub struct NoAssociatedItem {"}, {"sha": "4a3e28ffce95bf02c8f572a0573192e040d64fd0", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a5245b5894883d6a7803da96ed0899d2066177d4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5245b5894883d6a7803da96ed0899d2066177d4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=a5245b5894883d6a7803da96ed0899d2066177d4", "patch": "@@ -1,4 +1,5 @@\n use crate::coercion::CoerceMany;\n+use crate::errors::SuggestPtrNullMut;\n use crate::fn_ctxt::arg_matrix::{ArgMatrix, Compatibility, Error, ExpectedIdx, ProvidedIdx};\n use crate::gather_locals::Declaration;\n use crate::method::MethodCallee;\n@@ -814,6 +815,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             }\n \n+            self.suggest_ptr_null_mut(\n+                expected_ty,\n+                provided_ty,\n+                provided_args[*provided_idx],\n+                &mut err,\n+            );\n+\n             // Call out where the function is defined\n             self.label_fn_like(\n                 &mut err,\n@@ -1271,6 +1279,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_ptr_null_mut(\n+        &self,\n+        expected_ty: Ty<'tcx>,\n+        provided_ty: Ty<'tcx>,\n+        arg: &hir::Expr<'tcx>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) {\n+        if let ty::RawPtr(ty::TypeAndMut { mutbl: hir::Mutability::Mut, .. }) = expected_ty.kind()\n+            && let ty::RawPtr(ty::TypeAndMut { mutbl: hir::Mutability::Not, .. }) = provided_ty.kind()\n+            && let hir::ExprKind::Call(callee, _) = arg.kind\n+            && let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = callee.kind\n+            && let Res::Def(_, def_id) = path.res\n+            && self.tcx.get_diagnostic_item(sym::ptr_null) == Some(def_id)\n+        {\n+            // The user provided `ptr::null()`, but the function expects\n+            // `ptr::null_mut()`.\n+            err.subdiagnostic(SuggestPtrNullMut {\n+                span: arg.span\n+            });\n+        }\n+    }\n+\n     // AST fragment checking\n     pub(in super::super) fn check_lit(\n         &self,"}, {"sha": "d00536b29cff8fdb1348ca4649cf09f7ac528cdb", "filename": "tests/ui/typeck/ptr-null-mutability-suggestions.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5245b5894883d6a7803da96ed0899d2066177d4/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a5245b5894883d6a7803da96ed0899d2066177d4/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.fixed?ref=a5245b5894883d6a7803da96ed0899d2066177d4", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n+use std::ptr;\n+\n+fn expecting_null_mut(_: *mut u8) {}\n+\n+fn main() {\n+    expecting_null_mut(core::ptr::null_mut());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "ea3066d2289f5fbaab980b5b427340aec226cecd", "filename": "tests/ui/typeck/ptr-null-mutability-suggestions.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5245b5894883d6a7803da96ed0899d2066177d4/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5245b5894883d6a7803da96ed0899d2066177d4/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.rs?ref=a5245b5894883d6a7803da96ed0899d2066177d4", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n+use std::ptr;\n+\n+fn expecting_null_mut(_: *mut u8) {}\n+\n+fn main() {\n+    expecting_null_mut(ptr::null());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "705b029bdeab593569c9651b0a8e277465223a34", "filename": "tests/ui/typeck/ptr-null-mutability-suggestions.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5245b5894883d6a7803da96ed0899d2066177d4/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5245b5894883d6a7803da96ed0899d2066177d4/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.stderr?ref=a5245b5894883d6a7803da96ed0899d2066177d4", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/ptr-null-mutability-suggestions.rs:9:24\n+   |\n+LL |     expecting_null_mut(ptr::null());\n+   |     ------------------ ^^^^^^^^^^^\n+   |     |                  |\n+   |     |                  types differ in mutability\n+   |     |                  help: consider using `core::ptr::null_mut` instead: `core::ptr::null_mut()`\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut u8`\n+              found raw pointer `*const _`\n+note: function defined here\n+  --> $DIR/ptr-null-mutability-suggestions.rs:6:4\n+   |\n+LL | fn expecting_null_mut(_: *mut u8) {}\n+   |    ^^^^^^^^^^^^^^^^^^ ----------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}