{"sha": "4fd404f2ca1b3a246872521a606d749ae5a11258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZDQwNGYyY2ExYjNhMjQ2ODcyNTIxYTYwNmQ3NDlhZTVhMTEyNTg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-19T21:15:25Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-20T17:28:51Z"}, "message": "Fixup style of test cases for #7083", "tree": {"sha": "ff01040294ab73957c9cb34271fc8aba14256499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff01040294ab73957c9cb34271fc8aba14256499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd404f2ca1b3a246872521a606d749ae5a11258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd404f2ca1b3a246872521a606d749ae5a11258", "html_url": "https://github.com/rust-lang/rust/commit/4fd404f2ca1b3a246872521a606d749ae5a11258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd404f2ca1b3a246872521a606d749ae5a11258/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95089d37930267931c375fea5f10d0322fde771e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95089d37930267931c375fea5f10d0322fde771e", "html_url": "https://github.com/rust-lang/rust/commit/95089d37930267931c375fea5f10d0322fde771e"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "dfb0c0310ecf1bf64beb0101013ec84e7d865999", "filename": "src/test/auxiliary/trait_superkinds_in_metadata.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test library crate for cross-crate usages of traits inheriting\n+// from the builtin kinds. Mostly tests metadata correctness.\n+\n #[crate_type=\"lib\"];\n \n-pub trait Bar : Freeze { }\n-pub trait Foo : Bar + Send { }\n+pub trait RequiresFreeze : Freeze { }\n+pub trait RequiresRequiresFreezeAndSend : RequiresFreeze + Send { }"}, {"sha": "15fa0b6643381f60a63124111666509f461cd8f8", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test for traits that inherit from multiple builtin kinds at once,\n+// testing that all such kinds must be present on implementing types.\n+\n trait Foo : Send+Freeze { }\n \n impl <T: Freeze> Foo for (T,) { } //~ ERROR cannot implement this trait"}, {"sha": "a52a3765889580f9b1ada246c6833db55a6d696c", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -10,13 +10,16 @@\n \n // aux-build:trait_superkinds_in_metadata.rs\n \n+// Test for traits inheriting from the builtin kinds cross-crate.\n+// Mostly tests correctness of metadata.\n+\n extern mod trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{Foo, Bar};\n+use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n \n struct X<T>(T);\n \n-impl <T:Freeze> Bar for X<T> { }\n+impl <T:Freeze> RequiresFreeze for X<T> { }\n \n-impl <T:Freeze> Foo for X<T> { } //~ ERROR cannot implement this trait\n+impl <T:Freeze> RequiresRequiresFreezeAndSend for X<T> { } //~ ERROR cannot implement this trait\n \n fn main() { }"}, {"sha": "c1011f1368a656769e8ec43ddb0c85c3ec5f34b1", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Basic test for traits inheriting from the builtin kinds, checking\n+// the type contents of the implementing type (that's not a typaram).\n+\n trait Foo : Send { }\n \n impl <'self> Foo for &'self mut () { } //~ ERROR cannot implement this trait"}, {"sha": "2a3d3c7df6132ff8d95678216ba16c62ba2f6911", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Basic test for traits inheriting from the builtin kinds.\n+\n trait Foo : Send { }\n \n impl <T: Freeze> Foo for T { } //~ ERROR cannot implement this trait"}, {"sha": "ab5e58285d47e97b14cf21579c2097e07c46982b", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests \"transitivity\" of super-builtin-kinds on traits. Here, if\n+// we have a Foo, we know we have a Bar, and if we have a Bar, we\n+// know we have a Send. So if we have a Foo we should know we have\n+// a Send. Basically this just makes sure rustc is using\n+// each_bound_trait_and_supertraits in type_contents correctly.\n+\n trait Bar : Send { }\n trait Foo : Bar { }\n "}, {"sha": "1e24c121f5a25404f12839e244334fbeb60a2dd3", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -10,16 +10,19 @@\n \n // aux-build:trait_superkinds_in_metadata.rs\n \n+// Tests \"capabilities\" granted by traits with super-builtin-kinds,\n+// even when using them cross-crate.\n+\n extern mod trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{Foo, Bar};\n+use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n \n #[deriving(Eq)]\n struct X<T>(T);\n \n-impl <T: Freeze> Bar for X<T> { }\n-impl <T: Freeze+Send> Foo for X<T> { }\n+impl <T: Freeze> RequiresFreeze for X<T> { }\n+impl <T: Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n \n-fn foo<T: Foo>(val: T, chan: std::comm::Chan<T>) {\n+fn foo<T: RequiresRequiresFreezeAndSend>(val: T, chan: std::comm::Chan<T>) {\n     chan.send(val);\n }\n "}, {"sha": "ebbb3d38694ea443e835fb9f165f2f6fc7099655", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests \"capabilities\" granted by traits that inherit from super-\n+// builtin-kinds, e.g., if a trait requires Send to implement, then\n+// at usage site of that trait, we know we have the Send capability.\n+\n trait Foo : Send { }\n \n impl <T: Send> Foo for T { }"}, {"sha": "9f68976a4a425177996c129fd0e3340d2233f008", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -10,13 +10,15 @@\n \n // aux-build:trait_superkinds_in_metadata.rs\n \n+// Tests (correct) usage of trait super-builtin-kinds cross-crate.\n+\n extern mod trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{Foo, Bar};\n+use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n \n struct X<T>(T);\n \n-impl <T:Freeze> Bar for X<T> { }\n+impl <T:Freeze> RequiresFreeze for X<T> { }\n \n-impl <T:Freeze+Send> Foo for X<T> { }\n+impl <T:Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n \n fn main() { }"}, {"sha": "b6e58bfbf3d8ff10260f89fe01ef17bfa070db5f", "filename": "src/test/run-pass/builtin-superkinds-phantom-typaram.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests that even when a type paramenter doesn't implement a required\n+// super-builtin-kind of a trait, if the type parameter is never used,\n+// the type can implement the trait anyway.\n+\n trait Foo : Send { }\n \n struct X<T>(());", "previous_filename": "src/test/run-pass/builtin-superkinds-shadow-typaram.rs"}, {"sha": "61a22d97498cbbb51be191a541d6bb09f8507f02", "filename": "src/test/run-pass/builtin-superkinds-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Simple test case of implementing a trait with super-builtin-kinds.\n+\n trait Foo : Send { }\n \n impl Foo for int { }"}, {"sha": "7dfd1e0629f8b860d4a19b5a7d7b2554247a8a83", "filename": "src/test/run-pass/builtin-superkinds-typaram.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd404f2ca1b3a246872521a606d749ae5a11258/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs?ref=4fd404f2ca1b3a246872521a606d749ae5a11258", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests correct implementation of traits with super-builtin-kinds\n+// using a bounded type parameter.\n+\n trait Foo : Send { }\n \n impl <T: Send> Foo for T { }"}]}