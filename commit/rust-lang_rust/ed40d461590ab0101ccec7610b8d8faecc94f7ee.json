{"sha": "ed40d461590ab0101ccec7610b8d8faecc94f7ee", "node_id": "C_kwDOAAsO6NoAKGVkNDBkNDYxNTkwYWIwMTAxY2NlYzc2MTBiOGQ4ZmFlY2M5NGY3ZWU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-10-22T01:37:15Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-10-22T01:37:15Z"}, "message": "Properly escape quotes when suggesting switching between char/string literals", "tree": {"sha": "f42d6d22ad566b9439b576abbf3220057c30e97a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f42d6d22ad566b9439b576abbf3220057c30e97a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed40d461590ab0101ccec7610b8d8faecc94f7ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed40d461590ab0101ccec7610b8d8faecc94f7ee", "html_url": "https://github.com/rust-lang/rust/commit/ed40d461590ab0101ccec7610b8d8faecc94f7ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed40d461590ab0101ccec7610b8d8faecc94f7ee/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0940040c0486a536be4f8685c7dd9a078f9e87c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0940040c0486a536be4f8685c7dd9a078f9e87c2", "html_url": "https://github.com/rust-lang/rust/commit/0940040c0486a536be4f8685c7dd9a078f9e87c2"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "88ffbe0b539acc1f994d538095f320b0f6d2a123", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed40d461590ab0101ccec7610b8d8faecc94f7ee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed40d461590ab0101ccec7610b8d8faecc94f7ee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ed40d461590ab0101ccec7610b8d8faecc94f7ee", "patch": "@@ -2272,6 +2272,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0580, \"{}\", failure_str)\n             }\n             FailureCode::Error0308(failure_str) => {\n+                fn escape_literal(s: &str) -> String {\n+                    let mut escaped = String::with_capacity(s.len());\n+                    let mut chrs = s.chars().peekable();\n+                    while let Some(first) = chrs.next() {\n+                        match (first, chrs.peek()) {\n+                            ('\\\\', Some(&delim @ '\"') | Some(&delim @ '\\'')) => {\n+                                escaped.push('\\\\');\n+                                escaped.push(delim);\n+                                chrs.next();\n+                            }\n+                            ('\"' | '\\'', _) => {\n+                                escaped.push('\\\\');\n+                                escaped.push(first)\n+                            }\n+                            (c, _) => escaped.push(c),\n+                        };\n+                    }\n+                    escaped\n+                }\n                 let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n                 if let Some((expected, found)) = trace.values.ty() {\n                     match (expected.kind(), found.kind()) {\n@@ -2293,7 +2312,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 err.span_suggestion(\n                                     span,\n                                     \"if you meant to write a `char` literal, use single quotes\",\n-                                    format!(\"'{}'\", code),\n+                                    format!(\"'{}'\", escape_literal(code)),\n                                     Applicability::MachineApplicable,\n                                 );\n                             }\n@@ -2308,7 +2327,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                     err.span_suggestion(\n                                         span,\n                                         \"if you meant to write a `str` literal, use double quotes\",\n-                                        format!(\"\\\"{}\\\"\", code),\n+                                        format!(\"\\\"{}\\\"\", escape_literal(code)),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }"}, {"sha": "f075de714267688eb0711fe0e631f14cb9c485d3", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed40d461590ab0101ccec7610b8d8faecc94f7ee/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed40d461590ab0101ccec7610b8d8faecc94f7ee/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=ed40d461590ab0101ccec7610b8d8faecc94f7ee", "patch": "@@ -113,11 +113,26 @@ pub(crate) fn emit_unescape_error(\n                 } else {\n                     (\"\", \"if you meant to write a `str` literal, use double quotes\")\n                 };\n-\n+                let mut escaped = String::with_capacity(lit.len());\n+                let mut chrs = lit.chars().peekable();\n+                while let Some(first) = chrs.next() {\n+                    match (first, chrs.peek()) {\n+                        ('\\\\', Some('\"')) => {\n+                            escaped.push('\\\\');\n+                            escaped.push('\"');\n+                            chrs.next();\n+                        }\n+                        ('\"', _) => {\n+                            escaped.push('\\\\');\n+                            escaped.push('\"')\n+                        }\n+                        (c, _) => escaped.push(c),\n+                    };\n+                }\n                 handler.span_suggestion(\n                     span_with_quotes,\n                     msg,\n-                    format!(\"{}\\\"{}\\\"\", prefix, lit),\n+                    format!(\"{prefix}\\\"{escaped}\\\"\"),\n                     Applicability::MachineApplicable,\n                 );\n             }"}]}