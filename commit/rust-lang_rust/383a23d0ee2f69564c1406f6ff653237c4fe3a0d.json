{"sha": "383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4M2EyM2QwZWUyZjY5NTY0YzE0MDZmNmZmNjUzMjM3YzRmZTNhMGQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-02T01:29:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-02T01:29:37Z"}, "message": "Merge pull request #3073 from scampi/format_strings\n\nformat_strings: take into account newline occurring within a rewritten line", "tree": {"sha": "e40cfcc9c2f88107a50dc07b48d41e7b22cf6958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40cfcc9c2f88107a50dc07b48d41e7b22cf6958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbssoBCRBK7hj4Ov3rIwAAdHIIADzve7PrXX6N588G+su5qaNO\npPkqK4f4Sv0ZEfmaBON29hrJhPYeULlgETJgVCEJujircUCjkpo+q6MqXGJGvDis\nwSZFvzfHCEMPtMB+xpfWx0foqawElI95D7ZOBhWQIXsP8rbIRi9zQyKk16auv7dg\nG1Bcy+pvi4QvQEY2oz9fes5HrB9os5UdU/nC7l2ICtOyO3pT2R/ocfrhPV4fT574\nMVKK8b7sI0T9oyS1G+Dq0R5PO7SYakW9O/JHsSqRVb75ZHAmtbHKhI+TG5wwMo0x\n/ggdYW7gaLMDA0ZvtCbqmLGhgRAHrFjTJJY6AeaTHT9Ij9omo/B61zFO7eliNxU=\n=UIVS\n-----END PGP SIGNATURE-----\n", "payload": "tree e40cfcc9c2f88107a50dc07b48d41e7b22cf6958\nparent 4c1b0c2241bf72b2c66a73b3468e6698964e3f0a\nparent 4b26723e555114592b4f4af7011cf5401ae46beb\nauthor Seiichi Uchida <seuchida@gmail.com> 1538443777 +0900\ncommitter GitHub <noreply@github.com> 1538443777 +0900\n\nMerge pull request #3073 from scampi/format_strings\n\nformat_strings: take into account newline occurring within a rewritten line"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "html_url": "https://github.com/rust-lang/rust/commit/383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a", "html_url": "https://github.com/rust-lang/rust/commit/4c1b0c2241bf72b2c66a73b3468e6698964e3f0a"}, {"sha": "4b26723e555114592b4f4af7011cf5401ae46beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b26723e555114592b4f4af7011cf5401ae46beb", "html_url": "https://github.com/rust-lang/rust/commit/4b26723e555114592b4f4af7011cf5401ae46beb"}], "stats": {"total": 108, "additions": 105, "deletions": 3}, "files": [{"sha": "6f84a8e2c02014282d565353bac7987cfcec32dc", "filename": "src/string.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "patch": "@@ -19,12 +19,19 @@ use utils::wrap_str;\n \n const MIN_STRING: usize = 10;\n \n+/// Describes the layout of a piece of text.\n pub struct StringFormat<'a> {\n+    /// The opening sequence of characters for the piece of text\n     pub opener: &'a str,\n+    /// The closing sequence of characters for the piece of text\n     pub closer: &'a str,\n+    /// The opening sequence of characters for a line\n     pub line_start: &'a str,\n+    /// The closing sequence of characters for a line\n     pub line_end: &'a str,\n+    /// The allocated box to fit the text into\n     pub shape: Shape,\n+    /// Trim trailing whitespaces\n     pub trim_end: bool,\n     pub config: &'a Config,\n }\n@@ -129,6 +136,9 @@ enum SnippetState {\n     EndOfInput(String),\n     /// The input could be broken and the returned snippet should be ended with a\n     /// `[StringFormat::line_end]`. The next snippet needs to be indented.\n+    /// The returned string is the line to print out and the number is the length that got read in\n+    /// the text being rewritten. That length may be greater than the returned string if trailing\n+    /// whitespaces got trimmed.\n     LineEnd(String, usize),\n     /// The input could be broken but the returned snippet should not be ended with a\n     /// `[StringFormat::line_end]` because the whitespace is significant. Therefore, the next\n@@ -144,13 +154,23 @@ fn break_string(max_chars: usize, trim_end: bool, input: &[&str]) -> SnippetStat\n         // check if there is a line feed, in which case whitespaces needs to be kept.\n         let mut index_minus_ws = index;\n         for (i, grapheme) in input[0..=index].iter().enumerate().rev() {\n-            if !trim_end && is_line_feed(grapheme) {\n-                return SnippetState::Overflow(input[0..=i].join(\"\").to_string(), i + 1);\n-            } else if !is_whitespace(grapheme) {\n+            if !is_whitespace(grapheme) {\n                 index_minus_ws = i;\n                 break;\n             }\n         }\n+        // Take into account newlines occuring in input[0..=index], i.e., the possible next new\n+        // line. If there is one, then text after it could be rewritten in a way that the available\n+        // space is fully used.\n+        for (i, grapheme) in input[0..=index].iter().enumerate() {\n+            if is_line_feed(grapheme) {\n+                if i < index_minus_ws || !trim_end {\n+                    return SnippetState::Overflow(input[0..=i].join(\"\").to_string(), i + 1);\n+                }\n+                break;\n+            }\n+        }\n+\n         let mut index_plus_ws = index;\n         for (i, grapheme) in input[index + 1..].iter().enumerate() {\n             if !trim_end && is_line_feed(grapheme) {\n@@ -224,6 +244,7 @@ fn is_punctuation(grapheme: &str) -> bool {\n #[cfg(test)]\n mod test {\n     use super::{break_string, rewrite_string, SnippetState, StringFormat};\n+    use config::Config;\n     use shape::{Indent, Shape};\n     use unicode_segmentation::UnicodeSegmentation;\n \n@@ -318,4 +339,28 @@ mod test {\n             SnippetState::LineEnd(\"Neque in sem.\".to_string(), 25)\n         );\n     }\n+\n+    #[test]\n+    fn newline_in_candidate_line() {\n+        let string = \"Nulla\\nconsequat erat at massa. Vivamus id mi.\";\n+\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(\n+            break_string(25, false, &graphemes[..]),\n+            SnippetState::Overflow(\"Nulla\\n\".to_string(), 6)\n+        );\n+        assert_eq!(\n+            break_string(25, true, &graphemes[..]),\n+            SnippetState::Overflow(\"Nulla\\n\".to_string(), 6)\n+        );\n+\n+        let mut config: Config = Default::default();\n+        config.set().max_width(27);\n+        let fmt = StringFormat::new(Shape::legacy(25, Indent::empty()), &config);\n+        let rewritten_string = rewrite_string(string, &fmt);\n+        assert_eq!(\n+            rewritten_string,\n+            Some(\"\\\"Nulla\\nconsequat erat at massa. \\\\\\n Vivamus id mi.\\\"\".to_string())\n+        );\n+    }\n }"}, {"sha": "2a2c24140ddfc6d510ecf2f832d6e4e26e8d0ca1", "filename": "tests/target/format_strings/issue-202.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue-202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue-202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fformat_strings%2Fissue-202.rs?ref=383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-format_strings: true\n+\n+#[test]\n+fn compile_empty_program() {\n+    let result = get_result();\n+    let expected = \"; ModuleID = \\'foo\\'\n+\n+; Function Attrs: nounwind\n+declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0\n+\n+declare i32 @write(i32, i8*, i32)\n+\n+declare i32 @putchar(i32)\n+\n+declare i32 @getchar()\n+\n+define i32 @main() {\n+entry:\n+  ret i32 0\n+}\n+\n+attributes #0 = { nounwind }\n+\";\n+    assert_eq!(result, CString::new(expected).unwrap());\n+}"}, {"sha": "70483532528c405bea0d4d590a4135bc39d1fd3b", "filename": "tests/target/format_strings/issue-2833.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue-2833.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue-2833.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fformat_strings%2Fissue-2833.rs?ref=383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-format_strings: true\n+// rustfmt-max_width: 80\n+\n+fn test1() {\n+    let expected = \"\\\n+but Doctor Watson has to have it taken out for him and dusted,\n+\";\n+}\n+\n+fn test2() {\n+    let expected = \"\\\n+[Omitted long matching line]\n+but Doctor Watson has to have it taken out for him and dusted,\n+\";\n+}"}, {"sha": "21d292f9eb98afd696fb9206fa31c9ab6641ba15", "filename": "tests/target/format_strings/issue-687.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fformat_strings%2Fissue-687.rs?ref=383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-format_strings: true\n+\n+fn foo() -> &'static str {\n+    let sql = \"ATTACH DATABASE ':memory:' AS my_attached;\n+               BEGIN;\n+               CREATE TABLE my_attached.foo(x INTEGER);\n+               INSERT INTO my_attached.foo VALUES(42);\n+               END;\";\n+    sql\n+}"}, {"sha": "d9ef077c256239c9a131961cae42aaf509db275f", "filename": "tests/target/format_strings/issue564.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a23d0ee2f69564c1406f6ff653237c4fe3a0d/tests%2Ftarget%2Fformat_strings%2Fissue564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fformat_strings%2Fissue564.rs?ref=383a23d0ee2f69564c1406f6ff653237c4fe3a0d", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-format_strings: true\n+\n+const USAGE: &'static str = \"\n+Usage: codegen project <name> <digits> <len> <codes> <prizes> <step> <shift>\n+       codegen regenerate <name>\n+       codegen verify <name> <code>\n+\";"}]}