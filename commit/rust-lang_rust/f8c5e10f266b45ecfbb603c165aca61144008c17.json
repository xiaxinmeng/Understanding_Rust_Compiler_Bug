{"sha": "f8c5e10f266b45ecfbb603c165aca61144008c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzVlMTBmMjY2YjQ1ZWNmYmI2MDNjMTY1YWNhNjExNDQwMDhjMTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T12:47:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T12:47:01Z"}, "message": "Fix compiling in release mode", "tree": {"sha": "c3b285b538909127d36a72bd6819598128b35f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b285b538909127d36a72bd6819598128b35f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c5e10f266b45ecfbb603c165aca61144008c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c5e10f266b45ecfbb603c165aca61144008c17", "html_url": "https://github.com/rust-lang/rust/commit/f8c5e10f266b45ecfbb603c165aca61144008c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c5e10f266b45ecfbb603c165aca61144008c17/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b70fd6430535bd9199c973c64cd8be98072d394", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b70fd6430535bd9199c973c64cd8be98072d394", "html_url": "https://github.com/rust-lang/rust/commit/5b70fd6430535bd9199c973c64cd8be98072d394"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "3c608a1d97c43d3f3b1d3cd7630322be293401c3", "filename": "src/abi.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8c5e10f266b45ecfbb603c165aca61144008c17/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c5e10f266b45ecfbb603c165aca61144008c17/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=f8c5e10f266b45ecfbb603c165aca61144008c17", "patch": "@@ -716,8 +716,14 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n             def: InstanceDef::Virtual(_, idx),\n             ..\n         }) => {\n-            let nop_inst = fx.bcx.ins().nop();\n-            fx.add_comment(nop_inst, format!(\"virtual call; self arg pass mode: {:?}\", get_pass_mode(fx.tcx, args[0].layout())));\n+            #[cfg(debug_assertions)]\n+            {\n+                let nop_inst = fx.bcx.ins().nop();\n+                fx.add_comment(\n+                    nop_inst,\n+                    format!(\"virtual call; self arg pass mode: {:?}\", get_pass_mode(fx.tcx, args[0].layout())),\n+                );\n+            }\n             let (ptr, method) = crate::vtable::get_ptr_and_method_ref(fx, args[0], idx);\n             (Some(method), Single(ptr), true)\n         }\n@@ -727,8 +733,11 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n \n         // Indirect call\n         None => {\n-            let nop_inst = fx.bcx.ins().nop();\n-            fx.add_comment(nop_inst, \"indirect call\");\n+            #[cfg(debug_assertions)]\n+            {\n+                let nop_inst = fx.bcx.ins().nop();\n+                fx.add_comment(nop_inst, \"indirect call\");\n+            }\n             let func = trans_operand(fx, func.expect(\"indirect call without func Operand\"))\n                 .load_scalar(fx);\n             ("}]}