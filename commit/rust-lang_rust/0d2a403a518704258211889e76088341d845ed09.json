{"sha": "0d2a403a518704258211889e76088341d845ed09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMmE0MDNhNTE4NzA0MjU4MjExODg5ZTc2MDg4MzQxZDg0NWVkMDk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-15T14:13:54Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-15T14:13:54Z"}, "message": "run all tests found in folder given by MIRI_RUSTC_TEST env var", "tree": {"sha": "26b67037305214d2dfc2952350c2a48e364593de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b67037305214d2dfc2952350c2a48e364593de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d2a403a518704258211889e76088341d845ed09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX2qyiAAoJEFbW7qD8Z6xGGPYP/0y2uxqNG30/1W19ZF0inETL\nBL6BrRCGEA1QjqtYyepvHrm72znJkWYz2JXasCC3Yx0srKly02fKE0gdeBzf5WZN\naENDVn2JV10VhH9dFrUmuJJjPRCoz5onBXA7hJ6Of+In64gYH/R/RndzuF+On6tk\naSYUi734pgNuj3bilJz9ukcjnW4iLrQR224PWCIUPr7Gm3zQKA3oocuDfsIdg8au\nW0tToFJpOnOpKFuqpJE+jqFy4kRPuP4+3M0AjPZ7xQzdB3XQGfPhGCutAyNwsodL\ng0XfwGTrDooxizwQWiExxn/9aslpiPFH+CCX34GQc4I5X8Mvtb7G+HAPyvCZvC6j\np+QEs8iya1oZoYlYGLeZCsLI7yc0BsyEni7Ya0n5YukchgvxJzWcfGCCOkRtz02X\n6fh4/KhGP8A9cLJKFJyc3TDsozOW/bWEfA5hAxruOc42k0NnQAWo2VT8qLH0nB25\nSFcUo112Vm+KPkWmArY0h5xisSlgSjVRJoIs+BGdkbDxY/kLbw2W2HAZj7lJ7aAT\nJw9iUeRPg6LkJNSiyb7WwVS2bX+1omYI4sexqDuuAnPqLK8gl1B2wbQAFWwziZcm\n74vScAkXkO+lAIHWuCHDlIfAC7Xju4In3c2rNoPSasR/FrEvMVhGXB30xlShyMLB\nN2lFc2yegB8M7aAg0Efc\n=ox5f\n-----END PGP SIGNATURE-----", "payload": "tree 26b67037305214d2dfc2952350c2a48e364593de\nparent eb594da409e3a6dfd68b99133064b2dc43c4d1ff\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473948834 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473948834 +0200\n\nrun all tests found in folder given by MIRI_RUSTC_TEST env var"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2a403a518704258211889e76088341d845ed09", "html_url": "https://github.com/rust-lang/rust/commit/0d2a403a518704258211889e76088341d845ed09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d2a403a518704258211889e76088341d845ed09/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb594da409e3a6dfd68b99133064b2dc43c4d1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb594da409e3a6dfd68b99133064b2dc43c4d1ff", "html_url": "https://github.com/rust-lang/rust/commit/eb594da409e3a6dfd68b99133064b2dc43c4d1ff"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "bc112f40685463c11e98a9c9285023970cf4a85b", "filename": "tests/compiletest.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0d2a403a518704258211889e76088341d845ed09/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2a403a518704258211889e76088341d845ed09/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=0d2a403a518704258211889e76088341d845ed09", "patch": "@@ -57,7 +57,17 @@ fn compile_test() {\n     compile_fail(&sysroot);\n     run_pass();\n     for_all_targets(&sysroot, |target| {\n-        for file in std::fs::read_dir(\"tests/run-pass\").unwrap() {\n+        let files = std::fs::read_dir(\"tests/run-pass\").unwrap();\n+        let files: Box<Iterator<Item=_>> = if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+            Box::new(files.chain(std::fs::read_dir(path).unwrap()))\n+        } else {\n+            Box::new(files)\n+        };\n+        let mut mir_not_found = 0;\n+        let mut crate_not_found = 0;\n+        let mut success = 0;\n+        let mut failed = 0;\n+        for file in files {\n             let file = file.unwrap();\n             let path = file.path();\n \n@@ -76,20 +86,34 @@ fn compile_test() {\n             cmd.env(compiletest::procsrv::dylib_env_var(), paths);\n \n             match cmd.output() {\n-                Ok(ref output) if output.status.success() => writeln!(stderr.lock(), \"ok\").unwrap(),\n+                Ok(ref output) if output.status.success() => {\n+                    success += 1;\n+                    writeln!(stderr.lock(), \"ok\").unwrap()\n+                },\n                 Ok(output) => {\n-                    writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n-                    writeln!(stderr.lock(), \"stdout: \\n {}\", std::str::from_utf8(&output.stdout).unwrap()).unwrap();\n-                    writeln!(stderr.lock(), \"stderr: \\n {}\", std::str::from_utf8(&output.stderr).unwrap()).unwrap();\n-                    panic!(\"some tests failed\");\n+                    let output_err = std::str::from_utf8(&output.stderr).unwrap();\n+                    if let Some(text) = output_err.splitn(2, \"thread 'main' panicked at 'no mir for `\").nth(1) {\n+                        mir_not_found += 1;\n+                        let end = text.find('`').unwrap();\n+                        writeln!(stderr.lock(), \"NO MIR FOR `{}`\", &text[..end]).unwrap();\n+                    } else if let Some(text) = output_err.splitn(2, \"can't find crate for `\").nth(1) {\n+                        crate_not_found += 1;\n+                        let end = text.find('`').unwrap();\n+                        writeln!(stderr.lock(), \"CAN'T FIND CRATE FOR `{}`\", &text[..end]).unwrap();\n+                    } else {\n+                        failed += 1;\n+                        writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n+                        writeln!(stderr.lock(), \"stdout: \\n {}\", std::str::from_utf8(&output.stdout).unwrap()).unwrap();\n+                        writeln!(stderr.lock(), \"stderr: \\n {}\", output_err).unwrap();\n+                    }\n                 }\n                 Err(e) => {\n                     writeln!(stderr.lock(), \"FAILED: {}\", e).unwrap();\n-                    panic!(\"some tests failed\");\n+                    panic!(\"failed to execute miri\");\n                 },\n             }\n         }\n         let stderr = std::io::stderr();\n-        writeln!(stderr.lock(), \"\").unwrap();\n+        writeln!(stderr.lock(), \"{} success, {} mir not found, {} crate not found, {} failed\", success, mir_not_found, crate_not_found, failed).unwrap();\n     });\n }"}]}