{"sha": "6f9b15c40c909e80acc27aca3118654cb506241e", "node_id": "C_kwDOAAsO6NoAKDZmOWIxNWM0MGM5MDllODBhY2MyN2FjYTMxMTg2NTRjYjUwNjI0MWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T12:46:19Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-12T16:20:34Z"}, "message": "Add tests for tagged pointers", "tree": {"sha": "cbb35c4259ea548c5c499d2b40e83f4e2fe9f057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb35c4259ea548c5c499d2b40e83f4e2fe9f057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f9b15c40c909e80acc27aca3118654cb506241e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9b15c40c909e80acc27aca3118654cb506241e", "html_url": "https://github.com/rust-lang/rust/commit/6f9b15c40c909e80acc27aca3118654cb506241e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f9b15c40c909e80acc27aca3118654cb506241e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4577ec65a3dc327feee9618fa91a44797771d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4577ec65a3dc327feee9618fa91a44797771d4", "html_url": "https://github.com/rust-lang/rust/commit/5e4577ec65a3dc327feee9618fa91a44797771d4"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "aebf24ebbdeb764008dbd63239a10521717d565f", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=6f9b15c40c909e80acc27aca3118654cb506241e", "patch": "@@ -203,3 +203,33 @@ where\n         self.tag().hash_stable(hcx, hasher);\n     }\n }\n+\n+/// Test that `new` does not compile if there is not enough alignment for the\n+/// tag in the pointer.\n+///\n+/// ```compile_fail,E0080\n+/// use rustc_data_structures::tagged_ptr::{CopyTaggedPtr, Tag};\n+///\n+/// #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+/// enum Tag2 { B00 = 0b00, B01 = 0b01, B10 = 0b10, B11 = 0b11 };\n+///\n+/// unsafe impl Tag for Tag2 {\n+///     const BITS: usize = 2;\n+///\n+///     fn into_usize(self) -> usize { todo!() }\n+///     unsafe fn from_usize(tag: usize) -> Self { todo!() }\n+/// }\n+///\n+/// let value = 12u16;\n+/// let reference = &value;\n+/// let tag = Tag2::B01;\n+///\n+/// let _ptr = CopyTaggedPtr::<_, _, true>::new(reference, tag);\n+/// ```\n+// For some reason miri does not get the compile error\n+// probably it `check`s instead of `build`ing?\n+#[cfg(not(miri))]\n+const _: () = ();\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "77544f9c0324d4819da399ce16d06cdd62fcf076", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy/tests.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy%2Ftests.rs?ref=6f9b15c40c909e80acc27aca3118654cb506241e", "patch": "@@ -0,0 +1,61 @@\n+use std::ptr;\n+\n+use crate::tagged_ptr::{CopyTaggedPtr, Pointer, Tag};\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum Tag2 {\n+    B00 = 0b00,\n+    B01 = 0b01,\n+    B10 = 0b10,\n+    B11 = 0b11,\n+}\n+\n+unsafe impl Tag for Tag2 {\n+    const BITS: usize = 2;\n+\n+    fn into_usize(self) -> usize {\n+        self as _\n+    }\n+\n+    unsafe fn from_usize(tag: usize) -> Self {\n+        const B00: usize = Tag2::B00 as _;\n+        const B01: usize = Tag2::B01 as _;\n+        const B10: usize = Tag2::B10 as _;\n+        const B11: usize = Tag2::B11 as _;\n+        match tag {\n+            B00 => Tag2::B00,\n+            B01 => Tag2::B01,\n+            B10 => Tag2::B10,\n+            B11 => Tag2::B11,\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n+#[test]\n+fn smoke() {\n+    let value = 12u32;\n+    let reference = &value;\n+    let tag = Tag2::B01;\n+\n+    let ptr = tag_ptr(reference, tag);\n+\n+    assert_eq!(ptr.tag(), tag);\n+    assert_eq!(*ptr, 12);\n+    assert!(ptr::eq(ptr.pointer(), reference));\n+\n+    let copy = ptr;\n+\n+    let mut ptr = ptr;\n+    ptr.set_tag(Tag2::B00);\n+    assert_eq!(ptr.tag(), Tag2::B00);\n+\n+    assert_eq!(copy.tag(), tag);\n+    assert_eq!(*copy, 12);\n+    assert!(ptr::eq(copy.pointer(), reference));\n+}\n+\n+/// Helper to create tagged pointers without specifying `COMPARE_PACKED` if it does not matter.\n+fn tag_ptr<P: Pointer, T: Tag>(ptr: P, tag: T) -> CopyTaggedPtr<P, T, true> {\n+    CopyTaggedPtr::new(ptr, tag)\n+}"}, {"sha": "286951ce0e9c121692103df925203e2492a014cf", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=6f9b15c40c909e80acc27aca3118654cb506241e", "patch": "@@ -134,3 +134,33 @@ where\n         self.raw.hash_stable(hcx, hasher);\n     }\n }\n+\n+/// Test that `new` does not compile if there is not enough alignment for the\n+/// tag in the pointer.\n+///\n+/// ```compile_fail,E0080\n+/// use rustc_data_structures::tagged_ptr::{TaggedPtr, Tag};\n+///\n+/// #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+/// enum Tag2 { B00 = 0b00, B01 = 0b01, B10 = 0b10, B11 = 0b11 };\n+///\n+/// unsafe impl Tag for Tag2 {\n+///     const BITS: usize = 2;\n+///\n+///     fn into_usize(self) -> usize { todo!() }\n+///     unsafe fn from_usize(tag: usize) -> Self { todo!() }\n+/// }\n+///\n+/// let value = 12u16;\n+/// let reference = &value;\n+/// let tag = Tag2::B01;\n+///\n+/// let _ptr = TaggedPtr::<_, _, true>::new(reference, tag);\n+/// ```\n+// For some reason miri does not get the compile error\n+// probably it `check`s instead of `build`ing?\n+#[cfg(not(miri))]\n+const _: () = ();\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "0c61cebaf7e6a22e3a9303f0842977c8d02dd4b9", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop/tests.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9b15c40c909e80acc27aca3118654cb506241e/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop%2Ftests.rs?ref=6f9b15c40c909e80acc27aca3118654cb506241e", "patch": "@@ -0,0 +1,101 @@\n+use std::{ptr, sync::Arc};\n+\n+use crate::tagged_ptr::{Pointer, Tag, TaggedPtr};\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum Tag2 {\n+    B00 = 0b00,\n+    B01 = 0b01,\n+    B10 = 0b10,\n+    B11 = 0b11,\n+}\n+\n+unsafe impl Tag for Tag2 {\n+    const BITS: usize = 2;\n+\n+    fn into_usize(self) -> usize {\n+        self as _\n+    }\n+\n+    unsafe fn from_usize(tag: usize) -> Self {\n+        const B00: usize = Tag2::B00 as _;\n+        const B01: usize = Tag2::B01 as _;\n+        const B10: usize = Tag2::B10 as _;\n+        const B11: usize = Tag2::B11 as _;\n+        match tag {\n+            B00 => Tag2::B00,\n+            B01 => Tag2::B01,\n+            B10 => Tag2::B10,\n+            B11 => Tag2::B11,\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n+#[test]\n+fn smoke() {\n+    let value = 12u32;\n+    let reference = &value;\n+    let tag = Tag2::B01;\n+\n+    let ptr = tag_ptr(reference, tag);\n+\n+    assert_eq!(ptr.tag(), tag);\n+    assert_eq!(*ptr, 12);\n+\n+    let clone = ptr.clone();\n+    assert_eq!(clone.tag(), tag);\n+    assert_eq!(*clone, 12);\n+\n+    let mut ptr = ptr;\n+    ptr.set_tag(Tag2::B00);\n+    assert_eq!(ptr.tag(), Tag2::B00);\n+\n+    assert_eq!(clone.tag(), tag);\n+    assert_eq!(*clone, 12);\n+    assert!(ptr::eq(&*ptr, &*clone))\n+}\n+\n+#[test]\n+fn boxed() {\n+    let value = 12u32;\n+    let boxed = Box::new(value);\n+    let tag = Tag2::B01;\n+\n+    let ptr = tag_ptr(boxed, tag);\n+\n+    assert_eq!(ptr.tag(), tag);\n+    assert_eq!(*ptr, 12);\n+\n+    let clone = ptr.clone();\n+    assert_eq!(clone.tag(), tag);\n+    assert_eq!(*clone, 12);\n+\n+    let mut ptr = ptr;\n+    ptr.set_tag(Tag2::B00);\n+    assert_eq!(ptr.tag(), Tag2::B00);\n+\n+    assert_eq!(clone.tag(), tag);\n+    assert_eq!(*clone, 12);\n+    assert!(!ptr::eq(&*ptr, &*clone))\n+}\n+\n+#[test]\n+fn arclones() {\n+    let value = 12u32;\n+    let arc = Arc::new(value);\n+    let tag = Tag2::B01;\n+\n+    let ptr = tag_ptr(arc, tag);\n+\n+    assert_eq!(ptr.tag(), tag);\n+    assert_eq!(*ptr, 12);\n+\n+    let clone = ptr.clone();\n+    assert!(ptr::eq(&*ptr, &*clone))\n+}\n+\n+/// Helper to create tagged pointers without specifying `COMPARE_PACKED` if it does not matter.\n+fn tag_ptr<P: Pointer, T: Tag>(ptr: P, tag: T) -> TaggedPtr<P, T, true> {\n+    TaggedPtr::new(ptr, tag)\n+}"}]}