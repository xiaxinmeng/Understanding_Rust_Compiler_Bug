{"sha": "5ba81faba632883ee69be0d216959a5ef3bba030", "node_id": "C_kwDOAAsO6NoAKDViYTgxZmFiYTYzMjg4M2VlNjliZTBkMjE2OTU5YTVlZjNiYmEwMzA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-10T14:50:06Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-10T14:50:06Z"}, "message": "lint: add diagnostic translation migration lints\n\nIntroduce allow-by-default lints for checking whether diagnostics are\nwritten in `SessionDiagnostic`/`AddSubdiagnostic` impls and whether\ndiagnostics are translatable. These lints can be denied for modules once\nthey are fully migrated to impls and translation.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "8d0940ffb1e0dc97e79a692625e16e617a8ff555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d0940ffb1e0dc97e79a692625e16e617a8ff555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba81faba632883ee69be0d216959a5ef3bba030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba81faba632883ee69be0d216959a5ef3bba030", "html_url": "https://github.com/rust-lang/rust/commit/5ba81faba632883ee69be0d216959a5ef3bba030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba81faba632883ee69be0d216959a5ef3bba030/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ee2a2738c957ca6fd54e97b4e090a266ba96ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ee2a2738c957ca6fd54e97b4e090a266ba96ba", "html_url": "https://github.com/rust-lang/rust/commit/52ee2a2738c957ca6fd54e97b4e090a266ba96ba"}], "stats": {"total": 364, "additions": 327, "deletions": 37}, "files": [{"sha": "fd4b2daae9c13c236c85c7c52412067a5aa6b78d", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -1,6 +1,7 @@\n #![feature(let_chains)]\n #![feature(once_cell)]\n #![feature(path_try_exists)]\n+#![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n \n use fluent_bundle::FluentResource;\n@@ -241,6 +242,7 @@ type FluentId = Cow<'static, str>;\n /// message so messages of this type must be combined with a `DiagnosticMessage` (using\n /// `DiagnosticMessage::with_subdiagnostic_message`) before rendering. However, subdiagnostics from\n /// the `SessionSubdiagnostic` derive refer to Fluent identifiers directly.\n+#[rustc_diagnostic_item = \"SubdiagnosticMessage\"]\n pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n@@ -281,6 +283,7 @@ impl<S: Into<String>> From<S> for SubdiagnosticMessage {\n ///\n /// Intended to be removed once diagnostics are entirely translatable.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n+#[rustc_diagnostic_item = \"DiagnosticMessage\"]\n pub enum DiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?"}, {"sha": "00c0ff8bcaf9c6f641a2b4b7a47eaac872170b56", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -80,6 +80,7 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(SessionSubdiagnostic)]` -- see [rustc_macros::SessionSubdiagnostic].\n+#[rustc_diagnostic_item = \"AddSubdiagnostic\"]\n pub trait AddSubdiagnostic {\n     /// Add a subdiagnostic to an existing diagnostic.\n     fn add_to_diagnostic(self, diag: &mut Diagnostic);\n@@ -283,6 +284,7 @@ impl Diagnostic {\n     ///\n     /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n     /// the `Span` supplied when creating the diagnostic is primary.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_label(&mut self, span: Span, label: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.span.push_span_label(span, self.subdiagnostic_message_to_diagnostic_message(label));\n         self\n@@ -401,6 +403,7 @@ impl Diagnostic {\n     }\n \n     /// Add a note attached to this diagnostic.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn note(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Note, msg, MultiSpan::new(), None);\n         self\n@@ -423,6 +426,7 @@ impl Diagnostic {\n \n     /// Prints the span with a note above it.\n     /// This is like [`Diagnostic::note()`], but it gets its own span.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_note<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n@@ -444,13 +448,15 @@ impl Diagnostic {\n     }\n \n     /// Add a warning attached to this diagnostic.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn warn(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Warning, msg, MultiSpan::new(), None);\n         self\n     }\n \n     /// Prints the span with a warning above it.\n     /// This is like [`Diagnostic::warn()`], but it gets its own span.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n@@ -461,6 +467,7 @@ impl Diagnostic {\n     }\n \n     /// Add a help message attached to this diagnostic.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn help(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Help, msg, MultiSpan::new(), None);\n         self\n@@ -474,6 +481,7 @@ impl Diagnostic {\n \n     /// Prints the span with some help above it.\n     /// This is like [`Diagnostic::help()`], but it gets its own span.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_help<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,"}, {"sha": "4eef00ddff4a38774d1b193d6658abfbbcaa3a5f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -9,6 +9,7 @@\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(adt_const_params)]\n+#![feature(rustc_attrs)]\n #![allow(incomplete_features)]\n #![allow(rustc::potential_query_instability)]\n \n@@ -644,6 +645,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -655,6 +657,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -667,6 +670,7 @@ impl Handler {\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -683,16 +687,19 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning, msg)\n     }\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -702,6 +709,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -713,6 +721,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -726,6 +735,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -740,6 +750,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -751,6 +762,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -762,6 +774,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -773,6 +786,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -785,28 +799,33 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_help(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n     /// Construct a builder at the `Note` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Note, msg)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError.raise()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -817,6 +836,7 @@ impl Handler {\n         FatalError.raise()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -825,6 +845,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span).unwrap()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -837,10 +858,12 @@ impl Handler {\n         );\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Warning, msg), span);\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,"}, {"sha": "34c53597dde6b8df09a3d12f22b5e05aba2d8267", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -615,6 +615,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Used by the `rustc::potential_query_instability` lint to warn methods which\n     // might not be stable during incremental compilation.\n     rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n+    // Used by the `rustc::untranslatable_diagnostic` and `rustc::diagnostic_outside_of_impl` lints\n+    // to assist in changes to diagnostic APIs.\n+    rustc_attr!(rustc_lint_diagnostics, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "e70bcaac0c830a70f98b17e991d41c9c5208d7ef", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 107, "deletions": 31, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -5,12 +5,14 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, GenericArg, PatKind, Path, PathSegment, QPath};\n-use rustc_hir::{HirId, Item, ItemKind, Node, Pat, Ty, TyKind};\n+use rustc_hir::{def_id::DefId, Expr, ExprKind, GenericArg, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{HirId, Impl, Item, ItemKind, Node, Pat, Ty, TyKind};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::Span;\n+use tracing::debug;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,\n@@ -46,6 +48,41 @@ impl LateLintPass<'_> for DefaultHashTypes {\n     }\n }\n \n+/// Helper function for lints that check for expressions with calls and use typeck results to\n+/// get the `DefId` and `SubstsRef` of the function.\n+fn typeck_results_of_method_fn<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &Expr<'_>,\n+) -> Option<(Span, DefId, ty::subst::SubstsRef<'tcx>)> {\n+    // FIXME(rustdoc): Lints which use this function use typecheck results which can cause\n+    // `rustdoc` to error if there are resolution failures.\n+    //\n+    // As internal lints are currently always run if there are `unstable_options`, they are added\n+    // to the lint store of rustdoc. Internal lints are also not used via the `lint_mod` query.\n+    // Crate lints run outside of a query so rustdoc currently doesn't disable them.\n+    //\n+    // Instead of relying on this, either change crate lints to a query disabled by rustdoc, only\n+    // run internal lints if the user is explicitly opting in or figure out a different way to\n+    // avoid running lints for rustdoc.\n+    if cx.tcx.sess.opts.actually_rustdoc {\n+        return None;\n+    }\n+\n+    match expr.kind {\n+        ExprKind::MethodCall(segment, _, _)\n+            if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n+        {\n+            Some((segment.ident.span, def_id, cx.typeck_results().node_substs(expr.hir_id)))\n+        },\n+        _ => {\n+            match cx.typeck_results().node_type(expr.hir_id).kind() {\n+                &ty::FnDef(def_id, substs) => Some((expr.span, def_id, substs)),\n+                _ => None,\n+            }\n+        }\n+    }\n+}\n+\n declare_tool_lint! {\n     pub rustc::POTENTIAL_QUERY_INSTABILITY,\n     Allow,\n@@ -57,35 +94,7 @@ declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n \n impl LateLintPass<'_> for QueryStability {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n-        // error if there are resolution failures.\n-        //\n-        // As internal lints are currently always run if there are `unstable_options`,\n-        // they are added to the lint store of rustdoc. Internal lints are also\n-        // not used via the `lint_mod` query. Crate lints run outside of a query\n-        // so rustdoc currently doesn't disable them.\n-        //\n-        // Instead of relying on this, either change crate lints to a query disabled by\n-        // rustdoc, only run internal lints if the user is explicitly opting in\n-        // or figure out a different way to avoid running lints for rustdoc.\n-        if cx.tcx.sess.opts.actually_rustdoc {\n-            return;\n-        }\n-\n-        let (span, def_id, substs) = match expr.kind {\n-            ExprKind::MethodCall(segment, _, _)\n-                if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n-            {\n-                (segment.ident.span, def_id, cx.typeck_results().node_substs(expr.hir_id))\n-            },\n-            _ => {\n-                let &ty::FnDef(def_id, substs) =\n-                    cx.typeck_results()\n-                        .node_type(expr.hir_id)\n-                        .kind() else { return };\n-                (expr.span, def_id, substs)\n-            }\n-        };\n+        let Some((span, def_id, substs)) = typeck_results_of_method_fn(cx, expr) else { return };\n         if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n             let def_id = instance.def_id();\n             if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n@@ -376,3 +385,70 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n         }\n     }\n }\n+\n+declare_tool_lint! {\n+    pub rustc::UNTRANSLATABLE_DIAGNOSTIC,\n+    Allow,\n+    \"prevent creation of diagnostics which cannot be translated\",\n+    report_in_external_macro: true\n+}\n+\n+declare_tool_lint! {\n+    pub rustc::DIAGNOSTIC_OUTSIDE_OF_IMPL,\n+    Allow,\n+    \"prevent creation of diagnostics outside of `SessionDiagnostic`/`AddSubdiagnostic` impls\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Diagnostics => [ UNTRANSLATABLE_DIAGNOSTIC, DIAGNOSTIC_OUTSIDE_OF_IMPL ]);\n+\n+impl LateLintPass<'_> for Diagnostics {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        let Some((span, def_id, substs)) = typeck_results_of_method_fn(cx, expr) else { return };\n+        debug!(?span, ?def_id, ?substs);\n+        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) &&\n+            !cx.tcx.has_attr(instance.def_id(), sym::rustc_lint_diagnostics)\n+        {\n+            return;\n+        }\n+\n+        let mut found_impl = false;\n+        for (_, parent) in cx.tcx.hir().parent_iter(expr.hir_id) {\n+            debug!(?parent);\n+            if let Node::Item(Item { kind: ItemKind::Impl(impl_), .. }) = parent &&\n+                let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n+                let Some(def_id) = of_trait.trait_def_id() &&\n+                let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n+                matches!(name, sym::SessionDiagnostic | sym::AddSubdiagnostic)\n+            {\n+                found_impl = true;\n+                break;\n+            }\n+        }\n+        debug!(?found_impl);\n+        if !found_impl {\n+            cx.struct_span_lint(DIAGNOSTIC_OUTSIDE_OF_IMPL, span, |lint| {\n+                lint.build(\"diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\")\n+                    .emit();\n+            })\n+        }\n+\n+        let mut found_diagnostic_message = false;\n+        for ty in substs.types() {\n+            debug!(?ty);\n+            if let Some(adt_def) = ty.ty_adt_def() &&\n+                let Some(name) =  cx.tcx.get_diagnostic_name(adt_def.did()) &&\n+                matches!(name, sym::DiagnosticMessage | sym::SubdiagnosticMessage)\n+            {\n+                found_diagnostic_message = true;\n+                break;\n+            }\n+        }\n+        debug!(?found_diagnostic_message);\n+        if !found_diagnostic_message {\n+            cx.struct_span_lint(UNTRANSLATABLE_DIAGNOSTIC, span, |lint| {\n+                lint.build(\"diagnostics should be created using translatable messages\").emit();\n+            })\n+        }\n+    }\n+}"}, {"sha": "f0182883d2b46ae5747385bd63eec991f23bdc85", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -508,6 +508,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| Box::new(TyTyKind));\n+    store.register_lints(&Diagnostics::get_lints());\n+    store.register_late_pass(|| Box::new(Diagnostics));\n     store.register_lints(&PassByValue::get_lints());\n     store.register_late_pass(|| Box::new(PassByValue));\n     store.register_group("}, {"sha": "e3a02cb8161f8cbb919e79d3ef343beefbf85014", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -118,6 +118,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_lint_query_instability => {\n                     self.check_rustc_lint_query_instability(&attr, span, target)\n                 }\n+                sym::rustc_lint_diagnostics => {\n+                    self.check_rustc_lint_diagnostics(&attr, span, target)\n+                }\n                 sym::rustc_clean\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n@@ -1624,12 +1627,9 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    fn check_rustc_lint_query_instability(\n-        &self,\n-        attr: &Attribute,\n-        span: Span,\n-        target: Target,\n-    ) -> bool {\n+    /// Helper function for checking that the provided attribute is only applied to a function or\n+    /// method.\n+    fn check_applied_to_fn_or_method(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         let is_function = matches!(target, Target::Fn | Target::Method(..));\n         if !is_function {\n             self.tcx\n@@ -1643,6 +1643,23 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks that the `#[rustc_lint_query_instability]` attribute is only applied to a function\n+    /// or method.\n+    fn check_rustc_lint_query_instability(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        self.check_applied_to_fn_or_method(attr, span, target)\n+    }\n+\n+    /// Checks that the `#[rustc_lint_diagnostics]` attribute is only applied to a function or\n+    /// method.\n+    fn check_rustc_lint_diagnostics(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+        self.check_applied_to_fn_or_method(attr, span, target)\n+    }\n+\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {"}, {"sha": "044be906b55071c21cc7b2f7521f9917c66c386a", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -5,6 +5,7 @@\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(option_get_or_insert_default)]\n+#![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "a5ccae047fcc311cbbb34010d21e9526f5cfc043", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -311,13 +311,15 @@ impl ParseSess {\n         self.create_warning(warning).emit()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.span_diagnostic.struct_err(msg)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }"}, {"sha": "b1d1f9e7a6ce013f20ef9f15e5a7ac5acb09e283", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -209,6 +209,7 @@ pub struct PerfStats {\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n+#[rustc_diagnostic_item = \"SessionDiagnostic\"]\n pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `sess`.\n     #[must_use]"}, {"sha": "6547ec493c8620292a1b2bb8ed1d945c0bb867ba", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -125,6 +125,7 @@ symbols! {\n     Symbols {\n         AcqRel,\n         Acquire,\n+        AddSubdiagnostic,\n         Alignment,\n         Any,\n         Arc,\n@@ -169,6 +170,7 @@ symbols! {\n         Decoder,\n         Default,\n         Deref,\n+        DiagnosticMessage,\n         DirBuilder,\n         Display,\n         DoubleEndedIterator,\n@@ -253,11 +255,13 @@ symbols! {\n         RustcEncodable,\n         Send,\n         SeqCst,\n+        SessionDiagnostic,\n         SliceIndex,\n         Some,\n         String,\n         StructuralEq,\n         StructuralPartialEq,\n+        SubdiagnosticMessage,\n         Sync,\n         Target,\n         ToOwned,\n@@ -1205,6 +1209,7 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_legacy_const_generics,\n+        rustc_lint_diagnostics,\n         rustc_lint_query_instability,\n         rustc_macro_transparency,\n         rustc_main,"}, {"sha": "817d8531da905125860ddf7397c6c0882be29fb2", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -0,0 +1,73 @@\n+// compile-flags: -Z unstable-options\n+\n+#![crate_type = \"lib\"]\n+#![feature(rustc_private)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n+extern crate rustc_errors;\n+extern crate rustc_macros;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_errors::{AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, fluent};\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_session::{parse::ParseSess, SessionDiagnostic};\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-expect-path\")]\n+struct DeriveSessionDiagnostic {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[note(slug = \"note\")]\n+struct Note {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+pub struct UntranslatableInSessionDiagnostic;\n+\n+impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        sess.struct_err(\"untranslatable diagnostic\")\n+        //~^ ERROR diagnostics should be created using translatable messages\n+    }\n+}\n+\n+pub struct TranslatableInSessionDiagnostic;\n+\n+impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        sess.struct_err(fluent::parser::expect_path)\n+    }\n+}\n+\n+pub struct UntranslatableInAddSubdiagnostic;\n+\n+impl AddSubdiagnostic for UntranslatableInAddSubdiagnostic {\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        diag.note(\"untranslatable diagnostic\");\n+        //~^ ERROR diagnostics should be created using translatable messages\n+    }\n+}\n+\n+pub struct TranslatableInAddSubdiagnostic;\n+\n+impl AddSubdiagnostic for TranslatableInAddSubdiagnostic {\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        diag.note(fluent::typeck::note);\n+    }\n+}\n+\n+pub fn make_diagnostics<'a>(sess: &'a ParseSess) {\n+    let _diag = sess.struct_err(fluent::parser::expect_path);\n+    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+\n+    let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    //~^^ ERROR diagnostics should be created using translatable messages\n+}"}, {"sha": "bae78ffdc021b5fff868b5189e422d60a77332d9", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -0,0 +1,44 @@\n+error: diagnostics should be created using translatable messages\n+  --> $DIR/diagnostics.rs:36:14\n+   |\n+LL |         sess.struct_err(\"untranslatable diagnostic\")\n+   |              ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/diagnostics.rs:5:9\n+   |\n+LL | #![deny(rustc::untranslatable_diagnostic)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: diagnostics should be created using translatable messages\n+  --> $DIR/diagnostics.rs:53:14\n+   |\n+LL |         diag.note(\"untranslatable diagnostic\");\n+   |              ^^^^\n+\n+error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+  --> $DIR/diagnostics.rs:67:22\n+   |\n+LL |     let _diag = sess.struct_err(fluent::parser::expect_path);\n+   |                      ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/diagnostics.rs:6:9\n+   |\n+LL | #![deny(rustc::diagnostic_outside_of_impl)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+  --> $DIR/diagnostics.rs:70:22\n+   |\n+LL |     let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+   |                      ^^^^^^^^^^\n+\n+error: diagnostics should be created using translatable messages\n+  --> $DIR/diagnostics.rs:70:22\n+   |\n+LL |     let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+   |                      ^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "99f99ffcd359735cb0d1c3ce4d1fd2a2a1837155", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics_incorrect.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.rs?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_lint_diagnostics]\n+//~^ ERROR attribute should be applied to a function\n+struct Foo;\n+\n+impl Foo {\n+    #[rustc_lint_diagnostics(a)]\n+    //~^ ERROR malformed `rustc_lint_diagnostics`\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "46c206f3bf9fb0772ba9fc3ba4d9b19ea4ca6c8d", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics_incorrect.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba81faba632883ee69be0d216959a5ef3bba030/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.stderr?ref=5ba81faba632883ee69be0d216959a5ef3bba030", "patch": "@@ -0,0 +1,17 @@\n+error: malformed `rustc_lint_diagnostics` attribute input\n+  --> $DIR/diagnostics_incorrect.rs:10:5\n+   |\n+LL |     #[rustc_lint_diagnostics(a)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_lint_diagnostics]`\n+\n+error: attribute should be applied to a function\n+  --> $DIR/diagnostics_incorrect.rs:5:1\n+   |\n+LL | #[rustc_lint_diagnostics]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: aborting due to 2 previous errors\n+"}]}