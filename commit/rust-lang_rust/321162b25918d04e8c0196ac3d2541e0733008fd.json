{"sha": "321162b25918d04e8c0196ac3d2541e0733008fd", "node_id": "C_kwDOAAsO6NoAKDMyMTE2MmIyNTkxOGQwNGU4YzAxOTZhYzNkMjU0MWUwNzMzMDA4ZmQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-05T12:29:24Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-05T12:29:24Z"}, "message": "update error messages and explicitly mention them in tests", "tree": {"sha": "e77e3bfed7f71b9f505290e5ffcc83a6639c9a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77e3bfed7f71b9f505290e5ffcc83a6639c9a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/321162b25918d04e8c0196ac3d2541e0733008fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/321162b25918d04e8c0196ac3d2541e0733008fd", "html_url": "https://github.com/rust-lang/rust/commit/321162b25918d04e8c0196ac3d2541e0733008fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/321162b25918d04e8c0196ac3d2541e0733008fd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "html_url": "https://github.com/rust-lang/rust/commit/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b"}], "stats": {"total": 88, "additions": 54, "deletions": 34}, "files": [{"sha": "de29a851e2fdfa21aec103cbb3c94d2e1512c040", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321162b25918d04e8c0196ac3d2541e0733008fd/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321162b25918d04e8c0196ac3d2541e0733008fd/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=321162b25918d04e8c0196ac3d2541e0733008fd", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> InherentCollect<'tcx> {\n                     self.tcx.sess,\n                     item.span,\n                     E0390,\n-                    \"cannot define inherent `impl` for a type outside of crate where the type is defined\",\n+                    \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                 )\n                 .help(INTO_DEFINING_CRATE)\n                 .span_help(item.span, ADD_ATTR_TO_TY)\n@@ -166,7 +166,7 @@ impl<'tcx> InherentCollect<'tcx> {\n                         self.tcx.sess,\n                         item.span,\n                         E0390,\n-                        \"cannot define inherent `impl` for a type outside of crate where the type is defined\",\n+                        \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                     )\n                     .help(INTO_DEFINING_CRATE)\n                     .span_help(impl_item.span, ADD_ATTR)"}, {"sha": "0f7282bec5c0e8d8dcf5e0877457148e1b537f4c", "filename": "src/test/ui/incoherent-inherent-impls/needs-has-incoherent-impls.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs?ref=321162b25918d04e8c0196ac3d2541e0733008fd", "patch": "@@ -2,31 +2,37 @@\n #![feature(rustc_attrs)]\n extern crate extern_crate;\n \n-impl extern_crate::StructWithAttr { //~ ERROR\n+impl extern_crate::StructWithAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n     fn foo() {}\n }\n impl extern_crate::StructWithAttr {\n     #[rustc_allow_incoherent_impl]\n     fn bar() {}\n }\n-impl extern_crate::StructNoAttr { //~ ERROR\n+impl extern_crate::StructNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n     fn foo() {}\n }\n-impl extern_crate::StructNoAttr { //~ ERROR\n+impl extern_crate::StructNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n     #[rustc_allow_incoherent_impl]\n     fn bar() {}\n }\n-impl extern_crate::EnumWithAttr { //~ ERROR\n+impl extern_crate::EnumWithAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n     fn foo() {}\n }\n impl extern_crate::EnumWithAttr {\n     #[rustc_allow_incoherent_impl]\n     fn bar() {}\n }\n-impl extern_crate::EnumNoAttr { //~ ERROR\n+impl extern_crate::EnumNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n     fn foo() {}\n }\n-impl extern_crate::EnumNoAttr { //~ ERROR\n+impl extern_crate::EnumNoAttr {\n+    //~^ ERROR cannot define inherent `impl` for a type outside of the crate\n     #[rustc_allow_incoherent_impl]\n     fn bar() {}\n }"}, {"sha": "8f70825115dd34ede3c23b669393f836204fc2f3", "filename": "src/test/ui/incoherent-inherent-impls/needs-has-incoherent-impls.stderr", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr?ref=321162b25918d04e8c0196ac3d2541e0733008fd", "patch": "@@ -1,100 +1,110 @@\n-error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:5:1\n    |\n LL | / impl extern_crate::StructWithAttr {\n+LL | |\n LL | |     fn foo() {}\n LL | | }\n    | |_^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n-  --> $DIR/needs-has-incoherent-impls.rs:6:5\n+  --> $DIR/needs-has-incoherent-impls.rs:7:5\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^^^^\n \n-error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n-  --> $DIR/needs-has-incoherent-impls.rs:12:1\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:13:1\n    |\n LL | / impl extern_crate::StructNoAttr {\n+LL | |\n LL | |     fn foo() {}\n LL | | }\n    | |_^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n-  --> $DIR/needs-has-incoherent-impls.rs:12:1\n+  --> $DIR/needs-has-incoherent-impls.rs:13:1\n    |\n LL | / impl extern_crate::StructNoAttr {\n+LL | |\n LL | |     fn foo() {}\n LL | | }\n    | |_^\n \n-error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n-  --> $DIR/needs-has-incoherent-impls.rs:15:1\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:17:1\n    |\n LL | / impl extern_crate::StructNoAttr {\n+LL | |\n LL | |     #[rustc_allow_incoherent_impl]\n LL | |     fn bar() {}\n LL | | }\n    | |_^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n-  --> $DIR/needs-has-incoherent-impls.rs:15:1\n+  --> $DIR/needs-has-incoherent-impls.rs:17:1\n    |\n LL | / impl extern_crate::StructNoAttr {\n+LL | |\n LL | |     #[rustc_allow_incoherent_impl]\n LL | |     fn bar() {}\n LL | | }\n    | |_^\n \n-error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n-  --> $DIR/needs-has-incoherent-impls.rs:19:1\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:22:1\n    |\n LL | / impl extern_crate::EnumWithAttr {\n+LL | |\n LL | |     fn foo() {}\n LL | | }\n    | |_^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n-  --> $DIR/needs-has-incoherent-impls.rs:20:5\n+  --> $DIR/needs-has-incoherent-impls.rs:24:5\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^^^^\n \n-error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n-  --> $DIR/needs-has-incoherent-impls.rs:26:1\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:30:1\n    |\n LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n LL | |     fn foo() {}\n LL | | }\n    | |_^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n-  --> $DIR/needs-has-incoherent-impls.rs:26:1\n+  --> $DIR/needs-has-incoherent-impls.rs:30:1\n    |\n LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n LL | |     fn foo() {}\n LL | | }\n    | |_^\n \n-error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n-  --> $DIR/needs-has-incoherent-impls.rs:29:1\n+error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:34:1\n    |\n LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n LL | |     #[rustc_allow_incoherent_impl]\n LL | |     fn bar() {}\n LL | | }\n    | |_^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n-  --> $DIR/needs-has-incoherent-impls.rs:29:1\n+  --> $DIR/needs-has-incoherent-impls.rs:34:1\n    |\n LL | / impl extern_crate::EnumNoAttr {\n+LL | |\n LL | |     #[rustc_allow_incoherent_impl]\n LL | |     fn bar() {}\n LL | | }"}, {"sha": "62c249e58822bc5f87bba23306a29250ee8d6b51", "filename": "src/test/ui/incoherent-inherent-impls/no-attr-empty-impl.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs?ref=321162b25918d04e8c0196ac3d2541e0733008fd", "patch": "@@ -1,14 +1,18 @@\n // aux-build:extern-crate.rs\n extern crate extern_crate;\n \n-impl extern_crate::StructWithAttr {} //~ ERROR\n+impl extern_crate::StructWithAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n \n-impl extern_crate::StructNoAttr {} //~ ERROR\n+impl extern_crate::StructNoAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n \n-impl extern_crate::EnumWithAttr {} //~ ERROR\n+impl extern_crate::EnumWithAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n \n-impl extern_crate::EnumNoAttr {} //~ ERROR\n+impl extern_crate::EnumNoAttr {}\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate\n \n-impl f32 {} //~ ERROR\n+impl f32 {} //~ ERROR cannot define inherent `impl` for primitive types\n \n fn main() {}"}, {"sha": "b3f8b51d0ea8bc269cadd6dfc4b3cb89a98fded2", "filename": "src/test/ui/incoherent-inherent-impls/no-attr-empty-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/321162b25918d04e8c0196ac3d2541e0733008fd/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr?ref=321162b25918d04e8c0196ac3d2541e0733008fd", "patch": "@@ -7,31 +7,31 @@ LL | impl extern_crate::StructWithAttr {}\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n-  --> $DIR/no-attr-empty-impl.rs:6:1\n+  --> $DIR/no-attr-empty-impl.rs:7:1\n    |\n LL | impl extern_crate::StructNoAttr {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n-  --> $DIR/no-attr-empty-impl.rs:8:1\n+  --> $DIR/no-attr-empty-impl.rs:10:1\n    |\n LL | impl extern_crate::EnumWithAttr {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n-  --> $DIR/no-attr-empty-impl.rs:10:1\n+  --> $DIR/no-attr-empty-impl.rs:13:1\n    |\n LL | impl extern_crate::EnumNoAttr {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/no-attr-empty-impl.rs:12:6\n+  --> $DIR/no-attr-empty-impl.rs:16:6\n    |\n LL | impl f32 {}\n    |      ^^^"}]}