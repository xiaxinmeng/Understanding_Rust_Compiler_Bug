{"sha": "ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMjg5YzlmODhjY2ViNzMzMmIzM2I1Y2RmZDQ4ZGJlMGY4YWMwNzQ=", "commit": {"author": {"name": "cgm616", "email": "cgm616@me.com", "date": "2017-11-03T03:57:07Z"}, "committer": {"name": "cgm616", "email": "cgm616@me.com", "date": "2017-11-03T03:57:07Z"}, "message": "Merge branch 'master' of github.com:rust-lang-nursery/rust-clippy", "tree": {"sha": "0ce72326605231f40b2c42e7748a996bfee03210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce72326605231f40b2c42e7748a996bfee03210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "html_url": "https://github.com/rust-lang/rust/commit/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/comments", "author": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed5a89076afa6b57af92aa489b7ba179cbd6f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed5a89076afa6b57af92aa489b7ba179cbd6f59", "html_url": "https://github.com/rust-lang/rust/commit/fed5a89076afa6b57af92aa489b7ba179cbd6f59"}, {"sha": "47be6927239cc8dabeb59764581fc4ac73327f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/47be6927239cc8dabeb59764581fc4ac73327f22", "html_url": "https://github.com/rust-lang/rust/commit/47be6927239cc8dabeb59764581fc4ac73327f22"}], "stats": {"total": 554, "additions": 484, "deletions": 70}, "files": [{"sha": "062aab05e868b9f2d73d7510de2f3e54b2df2c54", "filename": "CHANGELOG.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -1,6 +1,13 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.168\n+* Rustup to *rustc 1.23.0-nightly (f0fe716db 2017-10-30)*\n+\n+## 0.0.167\n+* Rustup to *rustc 1.23.0-nightly (90ef3372e 2017-10-29)*\n+* New lints: [`const_static_lifetime`], [`erasing_op`], [`fallible_impl_from`], [`println_empty_string`], [`useless_asref`]\n+\n ## 0.0.166\n * Rustup to *rustc 1.22.0-nightly (b7960878b 2017-10-18)*\n * New lints: [`explicit_write`], [`identity_conversion`], [`implicit_hasher`], [`invalid_ref`], [`option_map_or_none`], [`range_minus_one`], [`range_plus_one`], [`transmute_int_to_bool`], [`transmute_int_to_char`], [`transmute_int_to_float`]\n@@ -68,7 +75,7 @@ All notable changes to this project will be documented in this file.\n \n ## 0.0.148\n * Update to *rustc 1.21.0-nightly (37c7d0ebb 2017-07-31)*\n-* New lints: [`unreadable_literal`], [`inconsisten_digit_grouping`], [`large_digit_groups`]\n+* New lints: [`unreadable_literal`], [`inconsistent_digit_grouping`], [`large_digit_groups`]\n \n ## 0.0.147\n * Update to *rustc 1.21.0-nightly (aac223f4f 2017-07-30)*\n@@ -486,6 +493,7 @@ All notable changes to this project will be documented in this file.\n [`cmp_null`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cmp_null\n [`cmp_owned`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cmp_owned\n [`collapsible_if`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#collapsible_if\n+[`const_static_lifetime`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#const_static_lifetime\n [`crosspointer_transmute`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#crosspointer_transmute\n [`cyclomatic_complexity`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cyclomatic_complexity\n [`deprecated_semver`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#deprecated_semver\n@@ -504,13 +512,15 @@ All notable changes to this project will be documented in this file.\n [`enum_glob_use`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#enum_glob_use\n [`enum_variant_names`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#enum_variant_names\n [`eq_op`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#eq_op\n+[`erasing_op`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`expl_impl_clone_on_copy`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#explicit_counter_loop\n [`explicit_into_iter_loop`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#explicit_into_iter_loop\n [`explicit_iter_loop`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#explicit_iter_loop\n [`explicit_write`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#explicit_write\n [`extend_from_slice`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#extend_from_slice\n+[`fallible_impl_from`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#fallible_impl_from\n [`filter_map`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#filter_map\n [`filter_next`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#filter_next\n [`float_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#float_arithmetic\n@@ -611,6 +621,7 @@ All notable changes to this project will be documented in this file.\n [`precedence`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#precedence\n [`print_stdout`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#print_stdout\n [`print_with_newline`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#print_with_newline\n+[`println_empty_string`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#println_empty_string\n [`ptr_arg`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ptr_arg\n [`pub_enum_variant_names`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#pub_enum_variant_names\n [`range_minus_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#range_minus_one\n@@ -673,6 +684,7 @@ All notable changes to this project will be documented in this file.\n [`use_debug`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#use_self\n [`used_underscore_binding`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#used_underscore_binding\n+[`useless_asref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_asref\n [`useless_attribute`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_attribute\n [`useless_format`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_format\n [`useless_let_if_seq`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#useless_let_if_seq"}, {"sha": "cb8e5b2adf97c00922edadc6aad0ba022d849dd0", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.166\"\n+version = \"0.0.168\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -37,7 +37,7 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.166\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.168\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n "}, {"sha": "57fa3ce91ba17647ebb9111ef953d4eeba7aa788", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.166\"\n+version = \"0.0.168\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "03771f0375b367f81ff26ce0f70cf7a8972397a9", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -37,7 +37,7 @@ impl StaticConst {\n     // Recursively visit types\n     fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext) {\n         match ty.node {\n-            // Be carefull of nested structures (arrays and tuples)\n+            // Be careful of nested structures (arrays and tuples)\n             TyKind::Array(ref ty, _) => {\n                 self.visit_type(&*ty, cx);\n             },"}, {"sha": "9ed09d96e1b0055308b8240a053a91ac90916499", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -224,7 +224,7 @@ fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n \n                     let (begin, span) = spans[index];\n \n-                    // Adjust for the begining of the current `Event`\n+                    // Adjust for the beginning of the current `Event`\n                     let span = span.with_lo(span.lo() + BytePos::from_usize(offset - begin));\n \n                     check_text(cx, valid_idents, &text, span);"}, {"sha": "5549c98aaf35cc76aa350b573c9114f7730f7aaf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -9,6 +9,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(conservative_impl_trait)]\n #![feature(inclusive_range_syntax, range_contains)]\n+#![feature(macro_vis_matcher)]\n #![allow(unknown_lints, indexing_slicing, shadow_reuse, missing_docs_in_private_items)]\n \n #![recursion_limit=\"256\"]\n@@ -93,20 +94,20 @@ pub mod entry;\n pub mod enum_clike;\n pub mod enum_glob_use;\n pub mod enum_variants;\n-pub mod erasing_op;\n pub mod eq_op;\n+pub mod erasing_op;\n pub mod escape;\n pub mod eta_reduction;\n pub mod eval_order_dependence;\n pub mod explicit_write;\n+pub mod fallible_impl_from;\n pub mod format;\n pub mod formatting;\n pub mod functions;\n pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n-pub mod fallible_impl_from;\n pub mod infinite_iter;\n pub mod int_plus_one;\n pub mod invalid_ref;\n@@ -209,7 +210,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     let mut store = reg.sess.lint_store.borrow_mut();\n     store.register_removed(\n         \"should_assert_eq\",\n-        \"`assert!()` will be more flexible with RFC 2011\"\n+        \"`assert!()` will be more flexible with RFC 2011\",\n     );\n     store.register_removed(\n         \"extend_from_slice\",\n@@ -360,11 +361,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         booleans::NONMINIMAL_BOOL,\n-        const_static_lifetime::CONST_STATIC_LIFETIME,\n         empty_enum::EMPTY_ENUM,\n         enum_glob_use::ENUM_GLOB_USE,\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n         enum_variants::STUTTER,\n+        fallible_impl_from::FALLIBLE_IMPL_FROM,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         int_plus_one::INT_PLUS_ONE,\n@@ -374,6 +375,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::FILTER_MAP,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,\n+        methods::RESULT_MAP_UNWRAP_OR_ELSE,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,\n         methods::WRONG_PUB_SELF_CONVENTION,\n@@ -423,6 +425,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         booleans::LOGIC_BUG,\n         bytecount::NAIVE_BYTECOUNT,\n         collapsible_if::COLLAPSIBLE_IF,\n+        const_static_lifetime::CONST_STATIC_LIFETIME,\n         copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n         copies::MATCH_SAME_ARMS,\n@@ -441,6 +444,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::MODULE_INCEPTION,\n         eq_op::EQ_OP,\n         eq_op::OP_REF,\n+        erasing_op::ERASING_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n         eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n@@ -455,7 +459,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n-        fallible_impl_from::FALLIBLE_IMPL_FROM,\n         infinite_iter::INFINITE_ITER,\n         invalid_ref::INVALID_REF,\n         is_unit_expr::UNIT_EXPR,\n@@ -509,6 +512,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::SINGLE_CHAR_PATTERN,\n         methods::STRING_EXTEND_CHARS,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n+        methods::USELESS_ASREF,\n         methods::WRONG_SELF_CONVENTION,\n         minmax::MIN_MAX,\n         misc::CMP_NAN,"}, {"sha": "7cfe2c1cdcbcf8d27e2908acea238e25fa896810", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, id) = item.node {\n-            check_fn_inner(cx, &sig.decl, Some(id), &sig.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n         }\n     }\n \n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n                 TraitMethod::Required(_) => None,\n                 TraitMethod::Provided(id) => Some(id),\n             };\n-            check_fn_inner(cx, &sig.decl, body, &sig.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span);\n         }\n     }\n }"}, {"sha": "f6787c61ae25dae9dcb0992889256e533131c082", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -193,6 +193,24 @@ declare_lint! {\n      `map_or_else(g, f)`\"\n }\n \n+/// **What it does:** Checks for usage of `result.map(_).unwrap_or_else(_)`.\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as\n+/// `result.ok().map_or_else(_, _)`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// x.map(|a| a + 1).unwrap_or_else(some_function)\n+/// ```\n+declare_lint! {\n+    pub RESULT_MAP_UNWRAP_OR_ELSE,\n+    Allow,\n+    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n+     `.ok().map_or_else(g, f)`\"\n+}\n+\n /// **What it does:** Checks for usage of `_.map_or(None, _)`.\n ///\n /// **Why is this bad?** Readability, this can be written more concisely as\n@@ -615,6 +633,7 @@ impl LintPass for Pass {\n             OK_EXPECT,\n             OPTION_MAP_UNWRAP_OR,\n             OPTION_MAP_UNWRAP_OR_ELSE,\n+            RESULT_MAP_UNWRAP_OR_ELSE,\n             OPTION_MAP_OR_NONE,\n             OR_FUN_CALL,\n             CHARS_NEXT_CMP,\n@@ -748,7 +767,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         if name == method_name &&\n                         sig.decl.inputs.len() == n_args &&\n                         out_type.matches(&sig.decl.output) &&\n-                        self_kind.matches(first_arg_ty, first_arg, self_ty, false, &sig.generics) {\n+                        self_kind.matches(first_arg_ty, first_arg, self_ty, false, &implitem.generics) {\n                             span_lint(cx, SHOULD_IMPLEMENT_TRAIT, implitem.span, &format!(\n                                 \"defining a method called `{}` on this type; consider implementing \\\n                                 the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -763,7 +782,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n                     if_chain! {\n                         if conv.check(&name.as_str());\n-                        if !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &sig.generics));\n+                        if !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n                         then {\n                             let lint = if item.vis == hir::Visibility::Public {\n                                 WRONG_PUB_SELF_CONVENTION\n@@ -1244,13 +1263,25 @@ fn lint_map_unwrap_or(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::Expr]\n     }\n }\n \n-/// lint use of `map().unwrap_or_else()` for `Option`s\n-fn lint_map_unwrap_or_else<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, map_args: &'tcx [hir::Expr], unwrap_args: &'tcx [hir::Expr]) {\n+/// lint use of `map().unwrap_or_else()` for `Option`s and `Result`s\n+fn lint_map_unwrap_or_else<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+    map_args: &'tcx [hir::Expr],\n+    unwrap_args: &'tcx [hir::Expr],\n+) {\n     // lint if the caller of `map()` is an `Option`\n-    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n+    let is_option = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION);\n+    let is_result = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::RESULT);\n+    if is_option || is_result {\n         // lint message\n-        let msg = \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\\n-                   `map_or_else(g, f)` instead\";\n+        let msg = if is_option {\n+            \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\\n+            `map_or_else(g, f)` instead\"\n+        } else {\n+            \"called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling \\\n+            `ok().map_or_else(g, f)` instead\"\n+        };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n         let unwrap_snippet = snippet(cx, unwrap_args[1].span, \"..\");\n@@ -1261,18 +1292,32 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir\n         if same_span && !multiline {\n             span_note_and_lint(\n                 cx,\n-                OPTION_MAP_UNWRAP_OR_ELSE,\n+                if is_option {\n+                    OPTION_MAP_UNWRAP_OR_ELSE\n+                } else {\n+                    RESULT_MAP_UNWRAP_OR_ELSE\n+                },\n                 expr.span,\n                 msg,\n                 expr.span,\n                 &format!(\n-                    \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n+                    \"replace `map({0}).unwrap_or_else({1})` with `{2}map_or_else({1}, {0})`\",\n                     map_snippet,\n-                    unwrap_snippet\n+                    unwrap_snippet,\n+                    if is_result { \"ok().\" } else { \"\" }\n                 ),\n             );\n         } else if same_span && multiline {\n-            span_lint(cx, OPTION_MAP_UNWRAP_OR_ELSE, expr.span, msg);\n+            span_lint(\n+                cx,\n+                if is_option {\n+                    OPTION_MAP_UNWRAP_OR_ELSE\n+                } else {\n+                    RESULT_MAP_UNWRAP_OR_ELSE\n+                },\n+                expr.span,\n+                msg,\n+            );\n         };\n     }\n }"}, {"sha": "e28d077f99998f6bdc9d51a448fc6192e9cd060f", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -108,11 +108,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                 // can't be implemented by default\n                 return;\n             }\n-            if !sig.generics.ty_params.is_empty() {\n-                // when the result of `new()` depends on a type parameter we should not require\n-                // an\n-                // impl of `Default`\n-                return;\n+            if !cx.generics.expect(\"method must have generics\").ty_params.is_empty() {\n+               // when the result of `new()` depends on a type parameter we should not require\n+               // an\n+               // impl of `Default`\n+               return;\n             }\n             if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx"}, {"sha": "d01a63f0494c87b4a4dad05521c6da98e89030cf", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -80,22 +80,58 @@ declare_lint! {\n \n /// **What it does:** Checks for transmutes from an integer to a `char`.\n ///\n-/// **Why is this bad?** Not every integer is a unicode scalar value.\n+/// **Why is this bad?** Not every integer is a Unicode scalar value.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:**\n+/// - [`from_u32`] which this lint suggests using is slower than `transmute`\n+/// as it needs to validate the input.\n+/// If you are certain that the input is always a valid Unicode scalar value,\n+/// use [`from_u32_unchecked`] which is as fast as `transmute`\n+/// but has a semantically meaningful name.\n+/// - You might want to handle `None` returned from [`from_u32`] instead of calling `unwrap`.\n+///\n+/// [`from_u32`]: https://doc.rust-lang.org/std/char/fn.from_u32.html\n+/// [`from_u32_unchecked`]: https://doc.rust-lang.org/std/char/fn.from_u32_unchecked.html\n ///\n /// **Example:**\n /// ```rust\n /// let _: char = std::mem::transmute(x); // where x: u32\n /// // should be:\n-/// let _: Option<char> = std::char::from_u32(x);\n+/// let _ = std::char::from_u32(x).unwrap();\n /// ```\n declare_lint! {\n     pub TRANSMUTE_INT_TO_CHAR,\n     Warn,\n     \"transmutes from an integer to a `char`\"\n }\n \n+/// **What it does:** Checks for transmutes from a `&[u8]` to a `&str`.\n+///\n+/// **Why is this bad?** Not every byte slice is a valid UTF-8 string.\n+///\n+/// **Known problems:**\n+/// - [`from_utf8`] which this lint suggests using is slower than `transmute`\n+/// as it needs to validate the input.\n+/// If you are certain that the input is always a valid UTF-8,\n+/// use [`from_utf8_unchecked`] which is as fast as `transmute`\n+/// but has a semantically meaningful name.\n+/// - You might want to handle errors returned from [`from_utf8`] instead of calling `unwrap`.\n+///\n+/// [`from_utf8`]: https://doc.rust-lang.org/std/str/fn.from_utf8.html\n+/// [`from_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: &str = std::mem::transmute(b); // where b: &[u8]\n+/// // should be:\n+/// let _ = std::str::from_utf8(b).unwrap();\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_BYTES_TO_STR,\n+    Warn,\n+    \"transmutes from a `&[u8]` to a `&str`\"\n+}\n+\n /// **What it does:** Checks for transmutes from an integer to a `bool`.\n ///\n /// **Why is this bad?** This might result in an invalid in-memory representation of a `bool`.\n@@ -142,6 +178,7 @@ impl LintPass for Transmute {\n             USELESS_TRANSMUTE,\n             WRONG_TRANSMUTE,\n             TRANSMUTE_INT_TO_CHAR,\n+            TRANSMUTE_BYTES_TO_STR,\n             TRANSMUTE_INT_TO_BOOL,\n             TRANSMUTE_INT_TO_FLOAT\n         )\n@@ -254,9 +291,41 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     } else {\n                                         arg\n                                     };\n-                                    db.span_suggestion(e.span, \"consider using\", format!(\"std::char::from_u32({})\", arg.to_string()));\n+                                    db.span_suggestion(e.span, \"consider using\", format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()));\n                                 }\n                             ),\n+                            (&ty::TyRef(_, ref ref_from), &ty::TyRef(_, ref ref_to)) => {\n+                                if_chain! {\n+                                    if let (&ty::TySlice(slice_ty), &ty::TyStr) = (&ref_from.ty.sty, &ref_to.ty.sty);\n+                                    if let ty::TyUint(ast::UintTy::U8) = slice_ty.sty;\n+                                    if ref_from.mutbl == ref_to.mutbl;\n+                                    then {\n+                                        let postfix = if ref_from.mutbl == Mutability::MutMutable {\n+                                            \"_mut\"\n+                                        } else {\n+                                            \"\"\n+                                        };\n+\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            TRANSMUTE_BYTES_TO_STR,\n+                                            e.span,\n+                                            &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                                            |db| {\n+                                                db.span_suggestion(\n+                                                    e.span,\n+                                                    \"consider using\",\n+                                                    format!(\n+                                                        \"std::str::from_utf8{}({}).unwrap()\",\n+                                                        postfix,\n+                                                        snippet(cx, args[0].span, \"..\"),\n+                                                    ),\n+                                                );\n+                                            }\n+                                        )\n+                                    }\n+                                }\n+                            },\n                             (&ty::TyInt(ast::IntTy::I8), &ty::TyBool) |\n                             (&ty::TyUint(ast::UintTy::U8), &ty::TyBool) => span_lint_and_then(\n                                 cx,"}, {"sha": "6e62f96749ed863d327ed61faeca91f38f9177ca", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -161,16 +161,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n \n fn is_lint_ref_type(ty: &Ty) -> bool {\n     if let TyRptr(\n-        ref lt,\n+        _,\n         MutTy {\n             ty: ref inner,\n             mutbl: MutImmutable,\n         },\n     ) = ty.node\n     {\n-        if lt.is_elided() {\n-            return false;\n-        }\n         if let TyPath(ref path) = inner.node {\n             return match_qpath(path, &paths::LINT);\n         }"}, {"sha": "a3b0e928aa20756ba9a593a48bbc36aa93f4069a", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -924,6 +924,7 @@ pub fn opt_def_id(def: Def) -> Option<DefId> {\n         Def::TyAlias(id) |\n         Def::AssociatedTy(id) |\n         Def::TyParam(id) |\n+        Def::TyForeign(id) |\n         Def::Struct(id) |\n         Def::StructCtor(id, ..) |\n         Def::Union(id) |"}, {"sha": "95e146091824dabd06734f64a5834c9aeaac714d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -41,8 +41,8 @@ pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LINKED_LIST: [&str; 3] = [\"alloc\", \"linked_list\", \"LinkedList\"];\n-pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n-pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n+pub const LINT: [&str; 2] = [\"lint\", \"Lint\"];\n+pub const LINT_ARRAY: [&str; 2] = [\"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];"}, {"sha": "fdf917d51588cf1dc8e1b99aab86370de80e8355", "filename": "mut_range_bound", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fed5a89076afa6b57af92aa489b7ba179cbd6f59/mut_range_bound", "raw_url": "https://github.com/rust-lang/rust/raw/fed5a89076afa6b57af92aa489b7ba179cbd6f59/mut_range_bound", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mut_range_bound?ref=fed5a89076afa6b57af92aa489b7ba179cbd6f59"}, {"sha": "4e367406bcca75240a727e85940ce6575d79f711", "filename": "src/driver.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -82,7 +82,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                             .as_ref()\n                             .expect(\n                                 \"at this compilation stage \\\n-                                 the krate must be parsed\",\n+                                 the crate must be parsed\",\n                             )\n                             .span,\n                     );\n@@ -129,7 +129,7 @@ fn show_version() {\n pub fn main() {\n     use std::env;\n \n-    if env::var(\"CLIPPY_DOGFOOD\").map(|_| true).unwrap_or(false) {\n+    if env::var(\"CLIPPY_DOGFOOD\").is_ok() {\n         panic!(\"yummy\");\n     }\n \n@@ -161,8 +161,11 @@ pub fn main() {\n \n     rustc_driver::in_rustc_thread(|| {\n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-        // We're invoking the compiler programatically, so we ignore this/\n+        // We're invoking the compiler programmatically, so we ignore this/\n         let mut orig_args: Vec<String> = env::args().collect();\n+        if orig_args.len() <= 1 {\n+            std::process::exit(1);\n+        }\n         if orig_args[1] == \"rustc\" {\n             // we still want to be able to invoke it normally though\n             orig_args.remove(1);"}, {"sha": "8f0c6a632074301387020c16a470f01121ddb703", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:cargo-clippy\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n+#![feature(macro_vis_matcher)]\n #![allow(unknown_lints)]\n #![allow(missing_docs_in_private_items)]\n "}, {"sha": "11ae135bfa960c1d11b45d940d09b514c8e84261", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -51,7 +51,7 @@ fn show_version() {\n pub fn main() {\n     use std::env;\n \n-    if env::var(\"CLIPPY_DOGFOOD\").map(|_| true).unwrap_or(false) {\n+    if env::var(\"CLIPPY_DOGFOOD\").is_ok() {\n         panic!(\"yummy\");\n     }\n "}, {"sha": "29c93e745b3e021688ac8b1e9fecb2d1c85372a6", "filename": "tests/ui/lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -1,6 +1,6 @@\n \n #![feature(rustc_private)]\n-\n+#![feature(macro_vis_matcher)]\n \n #![warn(lint_without_lint_pass)]\n "}, {"sha": "f114ef44c1529880f25d3111b332e3f7540ce82e", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -152,6 +152,29 @@ fn option_methods() {\n                 );\n }\n \n+/// Checks implementation of the following lints:\n+/// * `RESULT_MAP_UNWRAP_OR_ELSE`\n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check RESULT_MAP_UNWRAP_OR_ELSE\n+    // single line case\n+    let _ = res.map(|x| x + 1)\n+\n+               .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+    // multi line cases\n+    let _ = res.map(|x| {\n+                        x + 1\n+                    }\n+              ).unwrap_or_else(|e| 0);\n+    let _ = res.map(|x| x + 1)\n+               .unwrap_or_else(|e|\n+                    0\n+                );\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n+}\n+\n /// Struct to generate false positives for things with .iter()\n #[derive(Copy, Clone)]\n struct HasIter;"}, {"sha": "c7a1fd5c708060017ad107608b01f16cb60044a8", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -226,7 +226,40 @@ help: try using and_then instead\n 151 |                        });\n     |\n \n+error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:159:13\n+    |\n+159 |       let _ = res.map(|x| x + 1)\n+    |  _____________^\n+160 | |\n+161 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+    | |_____________________________________^\n+    |\n+    = note: `-D result-map-unwrap-or-else` implied by `-D warnings`\n+    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:163:13\n+    |\n+163 |       let _ = res.map(|x| {\n+    |  _____________^\n+164 | |                         x + 1\n+165 | |                     }\n+166 | |               ).unwrap_or_else(|e| 0);\n+    | |_____________________________________^\n+\n+error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:167:13\n+    |\n+167 |       let _ = res.map(|x| x + 1)\n+    |  _____________^\n+168 | |                .unwrap_or_else(|e|\n+169 | |                     0\n+170 | |                 );\n+    | |_________________^\n+\n error: unnecessary structure name repetition\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:176:24\n     |\n 176 |     fn filter(self) -> IteratorFalsePositives {\n@@ -248,12 +281,36 @@ error: called `filter(p).next()` on an `Iterator`. This is more succinctly expre\n    --> $DIR/methods.rs:210:13\n     |\n 210 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+=======\n+   --> $DIR/methods.rs:196:24\n+    |\n+196 |     fn filter(self) -> IteratorFalsePositives {\n+    |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:200:22\n+    |\n+200 |     fn next(self) -> IteratorFalsePositives {\n+    |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:220:32\n+    |\n+220 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+    |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+   --> $DIR/methods.rs:230:13\n+    |\n+230 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:213:13\n     |\n 213 |       let _ = v.iter().filter(|&x| {\n@@ -267,12 +324,28 @@ error: called `is_some()` after searching an `Iterator` with find. This is more\n    --> $DIR/methods.rs:228:13\n     |\n 228 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+=======\n+   --> $DIR/methods.rs:233:13\n+    |\n+233 |       let _ = v.iter().filter(|&x| {\n+    |  _____________^\n+234 | |                                 *x < 0\n+235 | |                             }\n+236 | |                    ).next();\n+    | |___________________________^\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:248:13\n+    |\n+248 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:231:13\n     |\n 231 |       let _ = v.iter().find(|&x| {\n@@ -286,11 +359,27 @@ error: called `is_some()` after searching an `Iterator` with position. This is m\n    --> $DIR/methods.rs:237:13\n     |\n 237 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+=======\n+   --> $DIR/methods.rs:251:13\n+    |\n+251 |       let _ = v.iter().find(|&x| {\n+    |  _____________^\n+252 | |                               *x < 0\n+253 | |                           }\n+254 | |                    ).is_some();\n+    | |______________________________^\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:257:13\n+    |\n+257 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:240:13\n     |\n 240 |       let _ = v.iter().position(|&x| {\n@@ -304,11 +393,27 @@ error: called `is_some()` after searching an `Iterator` with rposition. This is\n    --> $DIR/methods.rs:246:13\n     |\n 246 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+=======\n+   --> $DIR/methods.rs:260:13\n+    |\n+260 |       let _ = v.iter().position(|&x| {\n+    |  _____________^\n+261 | |                                   x < 0\n+262 | |                               }\n+263 | |                    ).is_some();\n+    | |______________________________^\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:266:13\n+    |\n+266 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:249:13\n     |\n 249 |       let _ = v.iter().rposition(|&x| {\n@@ -328,11 +433,33 @@ error: use of `unwrap_or` followed by a function call\n    --> $DIR/methods.rs:284:5\n     |\n 284 |     with_constructor.unwrap_or(make());\n+=======\n+   --> $DIR/methods.rs:269:13\n+    |\n+269 |       let _ = v.iter().rposition(|&x| {\n+    |  _____________^\n+270 | |                                    x < 0\n+271 | |                                }\n+272 | |                    ).is_some();\n+    | |______________________________^\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:286:21\n+    |\n+286 |         fn new() -> Foo { Foo }\n+    |                     ^^^ help: use the applicable keyword: `Self`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:304:5\n+    |\n+304 |     with_constructor.unwrap_or(make());\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:287:5\n     |\n 287 |     with_new.unwrap_or(Vec::new());\n@@ -402,11 +529,83 @@ error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more\n    --> $DIR/methods.rs:330:23\n     |\n 330 |         let bad_vec = some_vec.iter().nth(3);\n+=======\n+   --> $DIR/methods.rs:307:5\n+    |\n+307 |     with_new.unwrap_or(Vec::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:310:5\n+    |\n+310 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:313:5\n+    |\n+313 |     with_err.unwrap_or(make());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:316:5\n+    |\n+316 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+   --> $DIR/methods.rs:319:5\n+    |\n+319 |     with_default_trait.unwrap_or(Default::default());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+   --> $DIR/methods.rs:322:5\n+    |\n+322 |     with_default_type.unwrap_or(u64::default());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:325:5\n+    |\n+325 |     with_vec.unwrap_or(vec![]);\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:330:5\n+    |\n+330 |     without_default.unwrap_or(Foo::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n+\n+error: use of `or_insert` followed by a function call\n+   --> $DIR/methods.rs:333:5\n+    |\n+333 |     map.entry(42).or_insert(String::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n+\n+error: use of `or_insert` followed by a function call\n+   --> $DIR/methods.rs:336:5\n+    |\n+336 |     btree.entry(42).or_insert(String::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:339:13\n+    |\n+339 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n+\n+error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:350:23\n+    |\n+350 |         let bad_vec = some_vec.iter().nth(3);\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:331:26\n     |\n 331 |         let bad_slice = &some_vec[..].iter().nth(3);\n@@ -446,11 +645,53 @@ error: called `skip(x).next()` on an iterator. This is more succinctly expressed\n    --> $DIR/methods.rs:356:13\n     |\n 356 |     let _ = some_vec.iter().skip(42).next();\n+=======\n+   --> $DIR/methods.rs:351:26\n+    |\n+351 |         let bad_slice = &some_vec[..].iter().nth(3);\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:352:31\n+    |\n+352 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:353:29\n+    |\n+353 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:358:23\n+    |\n+358 |         let bad_vec = some_vec.iter_mut().nth(3);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:361:26\n+    |\n+361 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:364:29\n+    |\n+364 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:376:13\n+    |\n+376 |     let _ = some_vec.iter().skip(42).next();\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+<<<<<<< HEAD\n    --> $DIR/methods.rs:357:13\n     |\n 357 |     let _ = some_vec.iter().cycle().skip(42).next();\n@@ -472,6 +713,29 @@ error: used unwrap() on an Option value. If you don't want to handle the None ca\n    --> $DIR/methods.rs:368:13\n     |\n 368 |     let _ = opt.unwrap();\n+=======\n+   --> $DIR/methods.rs:377:13\n+    |\n+377 |     let _ = some_vec.iter().cycle().skip(42).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:378:13\n+    |\n+378 |     let _ = (1..10).skip(10).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:379:14\n+    |\n+379 |     let _ = &some_vec[..].iter().skip(3).next();\n+    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:388:13\n+    |\n+388 |     let _ = opt.unwrap();\n+>>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}, {"sha": "8bfc2fc8a5ccd244e5aea7187bb8c196dc29d6f2", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -39,12 +39,6 @@ error: generally you want to avoid `&mut &mut _` if possible\n 30 |         let y : &mut &mut u32 = &mut &mut 2;\n    |                 ^^^^^^^^^^^^^\n \n-error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:30:17\n-   |\n-30 |         let y : &mut &mut u32 = &mut &mut 2;\n-   |                 ^^^^^^^^^^^^^\n-\n error: generally you want to avoid `&mut &mut _` if possible\n   --> $DIR/mut_mut.rs:35:38\n    |\n@@ -63,21 +57,3 @@ error: generally you want to avoid `&mut &mut _` if possible\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                      ^^^^^^^^^^^^^\n \n-error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:35:17\n-   |\n-35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-   |                 ^^^^^^^^^^^^^^^^^^\n-\n-error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:35:22\n-   |\n-35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-   |                      ^^^^^^^^^^^^^\n-\n-error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:35:22\n-   |\n-35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-   |                      ^^^^^^^^^^^^^\n-"}, {"sha": "b04297f01fb24ab0a384971ec3a966b278d9d341", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -135,4 +135,9 @@ fn int_to_float() {\n     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n }\n \n+fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n+    let _: &str = unsafe { std::mem::transmute(b) };\n+    let _: &mut str = unsafe { std::mem::transmute(mb) };\n+}\n+\n fn main() { }"}, {"sha": "6504f55845dd314323183d9dd190f66941013678", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "patch": "@@ -158,15 +158,15 @@ error: transmute from a `u32` to a `char`\n    --> $DIR/transmute.rs:123:28\n     |\n 123 |     let _: char = unsafe { std::mem::transmute(0_u32) };\n-    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32)`\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n     |\n     = note: `-D transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n    --> $DIR/transmute.rs:124:28\n     |\n 124 |     let _: char = unsafe { std::mem::transmute(0_i32) };\n-    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32)`\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n    --> $DIR/transmute.rs:129:28\n@@ -190,3 +190,17 @@ error: transmute from a `i32` to a `f32`\n 135 |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n+error: transmute from a `&[u8]` to a `&str`\n+   --> $DIR/transmute.rs:139:28\n+    |\n+139 |     let _: &str = unsafe { std::mem::transmute(b) };\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n+    |\n+    = note: `-D transmute-bytes-to-str` implied by `-D warnings`\n+\n+error: transmute from a `&mut [u8]` to a `&mut str`\n+   --> $DIR/transmute.rs:140:32\n+    |\n+140 |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n+    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n+"}]}