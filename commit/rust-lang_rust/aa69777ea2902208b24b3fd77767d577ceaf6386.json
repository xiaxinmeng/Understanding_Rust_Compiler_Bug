{"sha": "aa69777ea2902208b24b3fd77767d577ceaf6386", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjk3NzdlYTI5MDIyMDhiMjRiM2ZkNzc3NjdkNTc3Y2VhZjYzODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-29T19:12:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-29T19:12:01Z"}, "message": "Auto merge of #65943 - tmandry:rollup-g20uvkh, r=tmandry\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #65405 (Create new error E0742 and add long error explanation)\n - #65539 (resolve: Turn the \"non-empty glob must import something\" error into a lint)\n - #65724 (ci: refactor pr tools job skipping)\n - #65741 (Prevent help popup to disappear when clicking on it)\n - #65832 (Re-enable Emscripten's exception handling support)\n - #65843 (Enable dist for MIPS64 musl targets)\n - #65898 (add basic HermitCore support within libtest)\n - #65900 (proc_macro: clean up bridge::client::__run_expand{1,2} a bit.)\n - #65906 (Update mdbook to 0.3.3)\n - #65920 (Use rustc-workspace-hack for rustbook)\n - #65930 (doc: use new feature gate for c_void type)\n - #65936 (save-analysis: Account for async desugaring in async fn return types)\n\nFailed merges:\n\n - #65434 (Add long error explanation for E0577)\n\nr? @ghost", "tree": {"sha": "a10b62394886dfbfb294a55a71cd434c34d239ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a10b62394886dfbfb294a55a71cd434c34d239ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa69777ea2902208b24b3fd77767d577ceaf6386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa69777ea2902208b24b3fd77767d577ceaf6386", "html_url": "https://github.com/rust-lang/rust/commit/aa69777ea2902208b24b3fd77767d577ceaf6386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa69777ea2902208b24b3fd77767d577ceaf6386/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa1f8d7b3b021c86a70ff62d23a07d97acff4c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa1f8d7b3b021c86a70ff62d23a07d97acff4c4", "html_url": "https://github.com/rust-lang/rust/commit/caa1f8d7b3b021c86a70ff62d23a07d97acff4c4"}, {"sha": "db496864601f127f260b0810919c309fe60679c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/db496864601f127f260b0810919c309fe60679c5", "html_url": "https://github.com/rust-lang/rust/commit/db496864601f127f260b0810919c309fe60679c5"}], "stats": {"total": 506, "additions": 304, "deletions": 202}, "files": [{"sha": "5826a1dbbd9492581e63be3735704d20749fb0a6", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -27,16 +27,16 @@ dependencies = [\n \n [[package]]\n name = \"ammonia\"\n-version = \"2.1.2\"\n+version = \"3.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"384d704f242a0a9faf793fff775a0be6ab9aa27edabffa097331d73779142520\"\n+checksum = \"9e266e1f4be5ffa05309f650e2586fe1d3ae6034eb24025a7ae1dfecc330823a\"\n dependencies = [\n  \"html5ever\",\n  \"lazy_static 1.3.0\",\n  \"maplit\",\n  \"matches\",\n  \"tendril\",\n- \"url 1.7.2\",\n+ \"url 2.1.0\",\n ]\n \n [[package]]\n@@ -1363,16 +1363,16 @@ dependencies = [\n \n [[package]]\n name = \"html5ever\"\n-version = \"0.23.0\"\n+version = \"0.24.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5ce65ac8028cf5a287a7dbf6c4e0a6cf2dcf022ed5b167a81bae66ebf599a8b7\"\n+checksum = \"025483b0a1e4577bb28578318c886ee5f817dda6eb62473269349044406644cb\"\n dependencies = [\n  \"log\",\n  \"mac\",\n  \"markup5ever\",\n- \"proc-macro2 0.4.30\",\n- \"quote 0.6.12\",\n- \"syn 0.15.35\",\n+ \"proc-macro2 1.0.3\",\n+ \"quote 1.0.2\",\n+ \"syn 1.0.5\",\n ]\n \n [[package]]\n@@ -1902,9 +1902,9 @@ checksum = \"08cbb6b4fef96b6d77bfc40ec491b1690c779e77b05cd9f07f787ed376fd4c43\"\n \n [[package]]\n name = \"markup5ever\"\n-version = \"0.8.1\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f1af46a727284117e09780d05038b1ce6fc9c76cc6df183c3dae5a8955a25e21\"\n+checksum = \"65381d9d47506b8592b97c4efd936afcf673b09b059f2bef39c7211ee78b9d03\"\n dependencies = [\n  \"log\",\n  \"phf\",\n@@ -1925,9 +1925,9 @@ checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.3.1\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"949bb2acb2cff9fa5c375cf9c43e70b3dba0a974d9fe01c31285d7a84d2a0fa2\"\n+checksum = \"9a070268274c566082efb6b2ace7743e43ba91a70d5c6982981e96d3c05ac81c\"\n dependencies = [\n  \"ammonia\",\n  \"chrono\",\n@@ -3103,6 +3103,7 @@ dependencies = [\n  \"failure\",\n  \"mdbook\",\n  \"mdbook-linkcheck\",\n+ \"rustc-workspace-hack\",\n ]\n \n [[package]]"}, {"sha": "bb6041d7f31960c7b53d3cc31bbba0e852008bc7", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -133,6 +133,10 @@ def v(*args):\n   \"mips-unknown-linux-musl install directory\")\n v(\"musl-root-mipsel\", \"target.mipsel-unknown-linux-musl.musl-root\",\n   \"mipsel-unknown-linux-musl install directory\")\n+v(\"musl-root-mips64\", \"target.mips64-unknown-linux-muslabi64.musl-root\",\n+  \"mips64-unknown-linux-muslabi64 install directory\")\n+v(\"musl-root-mips64el\", \"target.mips64el-unknown-linux-muslabi64.musl-root\",\n+  \"mips64el-unknown-linux-muslabi64 install directory\")\n v(\"qemu-armhf-rootfs\", \"target.arm-unknown-linux-gnueabihf.qemu-rootfs\",\n   \"rootfs in qemu testing, you probably don't want to use this\")\n v(\"qemu-aarch64-rootfs\", \"target.aarch64-unknown-linux-gnu.qemu-rootfs\","}, {"sha": "e76604e45bdeb3c60570e88e633a7d5039490a1f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -534,6 +534,10 @@ impl Step for TestHelpers {\n         builder.info(\"Building test helpers\");\n         t!(fs::create_dir_all(&dst));\n         let mut cfg = cc::Build::new();\n+        // FIXME: Workaround for https://github.com/emscripten-core/emscripten/issues/9013\n+        if target.contains(\"emscripten\") {\n+            cfg.pic(false);\n+        }\n \n         // We may have found various cross-compilers a little differently due to our\n         // extra configuration, so inform gcc of these compilers. Note, though, that"}, {"sha": "815498047fd5d160ac9afef8dfcc2060558c7743", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -244,6 +244,7 @@ pub fn prepare_tool_cargo(\n             path.ends_with(\"rls\") ||\n             path.ends_with(\"clippy\") ||\n             path.ends_with(\"miri\") ||\n+            path.ends_with(\"rustbook\") ||\n             path.ends_with(\"rustfmt\")\n         {\n             cargo.env(\"LIBZ_SYS_STATIC\", \"1\");"}, {"sha": "566e654fdb3f0f8ffb62fa70415f57af8070f367", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -22,14 +22,6 @@ jobs:\n         IMAGE: x86_64-gnu-llvm-6.0\n       mingw-check:\n         IMAGE: mingw-check\n-\n-- job: LinuxTools\n-  timeoutInMinutes: 600\n-  pool:\n-    vmImage: ubuntu-16.04\n-  steps:\n-    - template: steps/run.yml\n-      parameters:\n-        only_on_updated_submodules: 'yes'\n-  variables:\n-    IMAGE: x86_64-gnu-tools\n+      x86_64-gnu-tools:\n+        IMAGE: x86_64-gnu-tools\n+        CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "b8e32cf2cdfe317617cbe642e7106ea6f0dfeba0", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -6,11 +6,6 @@\n #\n # Check travis config for `gdb --batch` command to print all crash logs\n \n-parameters:\n-  # When this parameter is set to anything other than an empty string the tests\n-  # will only be executed when the commit updates submodules\n-  only_on_updated_submodules: ''\n-\n steps:\n \n # Disable automatic line ending conversion, which is enabled by default on\n@@ -26,21 +21,8 @@ steps:\n - checkout: self\n   fetchDepth: 2\n \n-# Set the SKIP_JOB environment variable if this job is supposed to only run\n-# when submodules are updated and they were not. The following time consuming\n-# tasks will be skipped when the environment variable is present.\n-- ${{ if parameters.only_on_updated_submodules }}:\n-  - bash: |\n-      set -e\n-      # Submodules pseudo-files inside git have the 160000 permissions, so when\n-      # those files are present in the diff a submodule was updated.\n-      if git diff HEAD^ | grep \"^index .* 160000\" >/dev/null 2>&1; then\n-          echo \"Executing the job since submodules are updated\"\n-      else\n-          echo \"Not executing this job since no submodules were updated\"\n-          echo \"##vso[task.setvariable variable=SKIP_JOB;]1\"\n-      fi\n-    displayName: Decide whether to run this job\n+- bash: src/ci/scripts/should-skip-this.sh\n+  displayName: Decide whether to run this job\n \n # Spawn a background process to collect CPU usage statistics which we'll upload\n # at the end of the build. See the comments in the script here for more"}, {"sha": "816bdb34a7bfe216e91b438e9b4f13bf313ab1d7", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -15,6 +15,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++-arm-linux-gnueabi \\\n   g++-arm-linux-gnueabihf \\\n   g++-aarch64-linux-gnu \\\n+  g++-mips64-linux-gnuabi64 \\\n+  g++-mips64el-linux-gnuabi64 \\\n   gcc-sparc64-linux-gnu \\\n   libc6-dev-sparc64-cross \\\n   bzip2 \\\n@@ -77,6 +79,14 @@ RUN env \\\n     CC=mipsel-openwrt-linux-gcc \\\n     CXX=mipsel-openwrt-linux-g++ \\\n     bash musl.sh mipsel && \\\n+    env \\\n+    CC=mips64-linux-gnuabi64-gcc \\\n+    CXX=mips64-linux-gnuabi64-g++ \\\n+    bash musl.sh mips64 && \\\n+    env \\\n+    CC=mips64el-linux-gnuabi64-gcc \\\n+    CXX=mips64el-linux-gnuabi64-g++ \\\n+    bash musl.sh mips64el && \\\n     rm -rf /build/*\n \n # FIXME(mozilla/sccache#235) this shouldn't be necessary but is currently\n@@ -97,6 +107,8 @@ ENV TARGETS=$TARGETS,wasm32-unknown-emscripten\n ENV TARGETS=$TARGETS,x86_64-rumprun-netbsd\n ENV TARGETS=$TARGETS,mips-unknown-linux-musl\n ENV TARGETS=$TARGETS,mipsel-unknown-linux-musl\n+ENV TARGETS=$TARGETS,mips64-unknown-linux-muslabi64\n+ENV TARGETS=$TARGETS,mips64el-unknown-linux-muslabi64\n ENV TARGETS=$TARGETS,arm-unknown-linux-musleabi\n ENV TARGETS=$TARGETS,arm-unknown-linux-musleabihf\n ENV TARGETS=$TARGETS,armv5te-unknown-linux-gnueabi\n@@ -125,6 +137,8 @@ ENV TARGETS=$TARGETS,thumbv7neon-unknown-linux-gnueabihf\n \n ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CC_mips_unknown_linux_musl=mips-openwrt-linux-gcc \\\n+    CC_mips64el_unknown_linux_muslabi64=mips64el-linux-gnuabi64-gcc \\\n+    CC_mips64_unknown_linux_muslabi64=mips64-linux-gnuabi64-gcc \\\n     CC_sparc64_unknown_linux_gnu=sparc64-linux-gnu-gcc \\\n     CC_x86_64_unknown_redox=x86_64-unknown-redox-gcc \\\n     CC_thumbv7neon_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc \\\n@@ -139,6 +153,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --musl-root-aarch64=/musl-aarch64 \\\n       --musl-root-mips=/musl-mips \\\n       --musl-root-mipsel=/musl-mipsel \\\n+      --musl-root-mips64=/musl-mips64 \\\n+      --musl-root-mips64el=/musl-mips64el \\\n       --disable-docs\n \n ENV SCRIPT \\"}, {"sha": "f945db0ada27d70a93ccb5c6a54ed1a268600a2e", "filename": "src/ci/scripts/should-skip-this.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+# Set the SKIP_JOB environment variable if this job is supposed to only run\n+# when submodules are updated and they were not. The following time consuming\n+# tasks will be skipped when the environment variable is present.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if [[ -z \"${CI_ONLY_WHEN_SUBMODULES_CHANGED+x}\" ]]; then\n+    echo \"Executing the job since there is no skip rule in effect\"\n+elif git diff HEAD^ | grep --quiet \"^index .* 160000\"; then\n+    # Submodules pseudo-files inside git have the 160000 permissions, so when\n+    # those files are present in the diff a submodule was updated.\n+    echo \"Executing the job since submodules are updated\"\n+else\n+    echo \"Not executing this job since no submodules were updated\"\n+    ciCommandSetEnv SKIP_JOB 1\n+fi"}, {"sha": "569c667ac0a54b534064d8a4c590edcbf482f58d", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -18,8 +18,13 @@ use crate::ops::{Deref, DerefMut};\n /// stabilized, it is recommended to use a newtype wrapper around an empty\n /// byte array. See the [Nomicon] for details.\n ///\n+/// One could use `std::os::raw::c_void` if they want to support old Rust\n+/// compiler down to 1.1.0. After Rust 1.30.0, it was re-exported by\n+/// this definition. For more information, please read [RFC 2521].\n+///\n /// [pointer]: ../../std/primitive.pointer.html\n /// [Nomicon]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs\n+/// [RFC 2521]: https://github.com/rust-lang/rfcs/blob/master/text/2521-c_void-reunification.md\n // N.B., for LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse\n@@ -29,7 +34,7 @@ use crate::ops::{Deref, DerefMut};\n //     would be uninhabited and at least dereferencing such pointers would\n //     be UB.\n #[repr(u8)]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {\n     #[unstable(feature = \"c_void_variant\", reason = \"temporary implementation detail\",\n                issue = \"0\")]"}, {"sha": "9643dba997aa475213b5a4556f077ce72b1582a9", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 28, "deletions": 54, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -15,8 +15,9 @@ macro_rules! define_handles {\n         }\n \n         impl HandleCounters {\n-            // FIXME(#53451) public to work around `Cannot create local mono-item` ICE.\n-            pub extern \"C\" fn get() -> &'static Self {\n+            // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+            // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n+            extern \"C\" fn get() -> &'static Self {\n                 static COUNTERS: HandleCounters = HandleCounters {\n                     $($oty: AtomicUsize::new(1),)*\n                     $($ity: AtomicUsize::new(1),)*\n@@ -333,29 +334,32 @@ impl Bridge<'_> {\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct Client<F> {\n+    // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+    // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n     pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n     pub(super) run: extern \"C\" fn(Bridge<'_>, F) -> Buffer<u8>,\n     pub(super) f: F,\n }\n \n-// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n-// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n-pub extern \"C\" fn __run_expand1(\n+/// Client-side helper for handling client panics, entering the bridge,\n+/// deserializing input and serializing output.\n+// FIXME(eddyb) maybe replace `Bridge::enter` with this?\n+fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n     mut bridge: Bridge<'_>,\n-    f: fn(crate::TokenStream) -> crate::TokenStream,\n+    f: impl FnOnce(A) -> R,\n ) -> Buffer<u8> {\n     // The initial `cached_buffer` contains the input.\n     let mut b = bridge.cached_buffer.take();\n \n     panic::catch_unwind(panic::AssertUnwindSafe(|| {\n         bridge.enter(|| {\n             let reader = &mut &b[..];\n-            let input = TokenStream::decode(reader, &mut ());\n+            let input = A::decode(reader, &mut ());\n \n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n             Bridge::with(|bridge| bridge.cached_buffer = b.take());\n \n-            let output = f(crate::TokenStream(input)).0;\n+            let output = f(input);\n \n             // Take the `cached_buffer` back out, for the output value.\n             b = Bridge::with(|bridge| bridge.cached_buffer.take());\n@@ -383,65 +387,35 @@ pub extern \"C\" fn __run_expand1(\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n+        extern \"C\" fn run(\n+            bridge: Bridge<'_>,\n+            f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,\n+        ) -> Buffer<u8> {\n+            run_client(bridge, |input| f(crate::TokenStream(input)).0)\n+        }\n         Client {\n             get_handle_counters: HandleCounters::get,\n-            run: __run_expand1,\n+            run,\n             f,\n         }\n     }\n }\n \n-// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n-// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n-pub extern \"C\" fn __run_expand2(\n-    mut bridge: Bridge<'_>,\n-    f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n-) -> Buffer<u8> {\n-    // The initial `cached_buffer` contains the input.\n-    let mut b = bridge.cached_buffer.take();\n-\n-    panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        bridge.enter(|| {\n-            let reader = &mut &b[..];\n-            let input = TokenStream::decode(reader, &mut ());\n-            let input2 = TokenStream::decode(reader, &mut ());\n-\n-            // Put the `cached_buffer` back in the `Bridge`, for requests.\n-            Bridge::with(|bridge| bridge.cached_buffer = b.take());\n-\n-            let output = f(crate::TokenStream(input), crate::TokenStream(input2)).0;\n-\n-            // Take the `cached_buffer` back out, for the output value.\n-            b = Bridge::with(|bridge| bridge.cached_buffer.take());\n-\n-            // HACK(eddyb) Separate encoding a success value (`Ok(output)`)\n-            // from encoding a panic (`Err(e: PanicMessage)`) to avoid\n-            // having handles outside the `bridge.enter(|| ...)` scope, and\n-            // to catch panics that could happen while encoding the success.\n-            //\n-            // Note that panics should be impossible beyond this point, but\n-            // this is defensively trying to avoid any accidental panicking\n-            // reaching the `extern \"C\"` (which should `abort` but may not\n-            // at the moment, so this is also potentially preventing UB).\n-            b.clear();\n-            Ok::<_, ()>(output).encode(&mut b, &mut ());\n-        })\n-    }))\n-    .map_err(PanicMessage::from)\n-    .unwrap_or_else(|e| {\n-        b.clear();\n-        Err::<(), _>(e).encode(&mut b, &mut ());\n-    });\n-    b\n-}\n-\n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream\n     ) -> Self {\n+        extern \"C\" fn run(\n+            bridge: Bridge<'_>,\n+            f: impl FnOnce(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n+        ) -> Buffer<u8> {\n+            run_client(bridge, |(input, input2)| {\n+                f(crate::TokenStream(input), crate::TokenStream(input2)).0\n+            })\n+        }\n         Client {\n             get_handle_counters: HandleCounters::get,\n-            run: __run_expand2,\n+            run,\n             f,\n         }\n     }"}, {"sha": "85e0b6d465ab06d7d0bd0f503e8c6fa847c2b6cd", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -3,7 +3,7 @@ use crate::llvm;\n use syntax_pos::symbol::Symbol;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n-use rustc_target::spec::MergeFunctions;\n+use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use libc::c_int;\n use std::ffi::CString;\n use syntax::feature_gate::UnstableFeatures;\n@@ -73,6 +73,11 @@ unsafe fn configure_llvm(sess: &Session) {\n             }\n         }\n \n+        if sess.target.target.target_os == \"emscripten\" &&\n+            sess.panic_strategy() == PanicStrategy::Unwind {\n+            add(\"-enable-emscripten-cxx-exceptions\");\n+        }\n+\n         // HACK(eddyb) LLVM inserts `llvm.assume` calls to preserve align attributes\n         // during inlining. Unfortunately these may block other optimizations.\n         add(\"-preserve-alignment-assumptions-during-inlining=false\");"}, {"sha": "85a90459f5ee473955c3f6a7625afe14ca8dc23f", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -364,8 +364,9 @@ fn symbol_export_level(tcx: TyCtxt<'_>, sym_def_id: DefId) -> SymbolExportLevel\n         codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n \n     if is_extern && !std_internal {\n-        // Emscripten cannot export statics, so reduce their export level here\n-        if tcx.sess.target.target.options.is_like_emscripten {\n+        let target = &tcx.sess.target.target.llvm_target;\n+        // WebAssembly cannot export data symbols, so reduce their export level\n+        if target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n             if let Some(Node::Item(&hir::Item {\n                 kind: hir::ItemKind::Static(..),\n                 .."}, {"sha": "648c5104b1af70050cb2ca668d8b8c8334016224", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -256,9 +256,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                                 if self.r.is_accessible_from(vis, parent_scope.module) {\n                                     vis\n                                 } else {\n-                                    let msg =\n-                                        \"visibilities can only be restricted to ancestor modules\";\n-                                    self.r.session.span_err(path.span, msg);\n+                                    struct_span_err!(self.r.session, path.span, E0742,\n+                                        \"visibilities can only be restricted to ancestor modules\")\n+                                        .emit();\n                                     ty::Visibility::Public\n                                 }\n                             }"}, {"sha": "9937f27931fb7b8258fdb529093d65eec757ab17", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1910,6 +1910,7 @@ E0671: r##\"\n \n Const parameters cannot depend on type parameters.\n The following is therefore invalid:\n+\n ```compile_fail,E0741\n #![feature(const_generics)]\n \n@@ -1933,6 +1934,44 @@ struct Foo<X = Box<Self>> {\n ```\n \"##,\n \n+E0742: r##\"\n+Visibility is restricted to a module which isn't an ancestor of the current\n+item.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0742,edition2018\n+pub mod Sea {}\n+\n+pub (in crate::Sea) struct Shark; // error!\n+\n+fn main() {}\n+```\n+\n+To fix this error, we need to move the `Shark` struct inside the `Sea` module:\n+\n+```edition2018\n+pub mod Sea {\n+    pub (in crate::Sea) struct Shark; // ok!\n+}\n+\n+fn main() {}\n+```\n+\n+Of course, you can do it as long as the module you're referring to is an\n+ancestor:\n+\n+```edition2018\n+pub mod Earth {\n+    pub mod Sea {\n+        pub (in crate::Earth) struct Shark; // ok!\n+    }\n+}\n+\n+fn main() {}\n+```\n+\"##,\n+\n ;\n //  E0153, unused error code\n //  E0157, unused error code"}, {"sha": "03ff8ba7dc158660cc1011f6a126cd9f445fe1bb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -977,8 +977,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 if !is_prelude &&\n                    max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.\n                    !max_vis.get().is_at_least(directive.vis.get(), &*self) {\n-                    let msg = \"A non-empty glob must import something with the glob's visibility\";\n-                    self.r.session.span_err(directive.span, msg);\n+                    let msg =\n+                    \"glob import doesn't reexport anything because no candidate is public enough\";\n+                    self.r.session.buffer_lint(UNUSED_IMPORTS, directive.id, directive.span, msg);\n                 }\n                 return None;\n             }"}, {"sha": "a372106d3795b57dc5c8a7615a4c9ca1828a20f4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -300,7 +300,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n \n             if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n-                v.visit_ty(ret_ty);\n+                // In async functions, return types are desugared and redefined\n+                // as an `impl Trait` existential type. Because of this, to match\n+                // the definition paths when resolving nested types we need to\n+                // start walking from the newly-created definition.\n+                match sig.header.asyncness.node {\n+                    ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                        v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                    }\n+                    _ => v.visit_ty(ret_ty)\n+                }\n             }\n \n             // walk the fn body\n@@ -369,6 +378,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         &mut self,\n         item: &'l ast::Item,\n         decl: &'l ast::FnDecl,\n+        header: &'l ast::FnHeader,\n         ty_params: &'l ast::Generics,\n         body: &'l ast::Block,\n     ) {\n@@ -391,7 +401,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     // FIXME: Opaque type desugaring prevents us from easily\n                     // processing trait bounds. See `visit_ty` for more details.\n                 } else {\n-                    v.visit_ty(&ret_ty);\n+                    // In async functions, return types are desugared and redefined\n+                    // as an `impl Trait` existential type. Because of this, to match\n+                    // the definition paths when resolving nested types we need to\n+                    // start walking from the newly-created definition.\n+                    match header.asyncness.node {\n+                        ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                            v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                        }\n+                        _ => v.visit_ty(ret_ty)\n+                    }\n                 }\n             }\n \n@@ -1315,8 +1334,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref decl, .., ref ty_params, ref body) => {\n-                self.process_fn(item, &decl, ty_params, &body)\n+            Fn(ref decl, ref header, ref ty_params, ref body) => {\n+                self.process_fn(item, &decl, &header, ty_params, &body)\n             }\n             Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),"}, {"sha": "906c704c804f36ff7df85f30284c296934e4c5c4", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -9,12 +9,8 @@ pub fn target() -> Result<Target, String> {\n                                \"-s\".to_string(),\n                                \"ASSERTIONS=1\".to_string(),\n                                \"-s\".to_string(),\n-                               \"DISABLE_EXCEPTION_CATCHING=1\".to_string(),\n-                               \"-s\".to_string(),\n                                \"ABORTING_MALLOC=0\".to_string(),\n-                               // FIXME(tlively): Enable this linker option once libc type errors\n-                               // are resolved. See https://github.com/rust-lang/libc/pull/1478.\n-                               // \"-Wl,--fatal-warnings\".to_string(),\n+                               \"-Wl,--fatal-warnings\".to_string(),\n                                ]);\n \n     let opts = TargetOptions {\n@@ -24,10 +20,7 @@ pub fn target() -> Result<Target, String> {\n         linker: None,\n         linker_is_gnu: true,\n         is_like_emscripten: true,\n-        // FIXME(tlively): Emscripten supports unwinding, but we would have to pass\n-        // -enable-emscripten-cxx-exceptions to LLVM at codegen time and merge\n-        // https://reviews.llvm.org/rG5c3cdef84b82464756bb571c13c31cf7773860c3to use it.\n-        panic_strategy: PanicStrategy::Abort,\n+        panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. wasm32_base::options()"}, {"sha": "a5264a2dfc9d1da65c44295c70ecaae68c91f957", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -379,9 +379,13 @@ function getSearchElement() {\n \n                 set_fragment(cur_id);\n             }\n-        } else if (hasClass(document.getElementById(\"help\"), \"hidden\") === false) {\n-            addClass(document.getElementById(\"help\"), \"hidden\");\n-            removeClass(document.body, \"blur\");\n+        } else if (hasClass(getHelpElement(), \"hidden\") === false) {\n+            var help = getHelpElement();\n+            var is_inside_help_popup = ev.target !== help && help.contains(ev.target);\n+            if (is_inside_help_popup === false) {\n+                addClass(help, \"hidden\");\n+                removeClass(document.body, \"blur\");\n+            }\n         } else {\n             // Making a collapsed element visible on onhashchange seems\n             // too late"}, {"sha": "28d9906eb93b5d6ce3bdd7cac5d80d94a42067cb", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -163,7 +163,7 @@ pub use self::c_str::{FromBytesWithNulError};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::{OsString, OsStr};\n \n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+#[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub use core::ffi::c_void;\n \n #[unstable(feature = \"c_variadic\","}, {"sha": "6b0c8a8af32b456a9d6934fbedcd17acacd1ccf4", "filename": "src/libtest/helpers/concurrency.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fconcurrency.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -54,6 +54,12 @@ pub fn get_concurrency() -> usize {\n         1\n     }\n \n+    #[cfg(target_os = \"hermit\")]\n+    fn num_cpus() -> usize {\n+        // FIXME: Implement num_cpus on HermitCore\n+        1\n+    }\n+\n     #[cfg(any(\n         all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n         all(target_vendor = \"fortanix\", target_env = \"sgx\")"}, {"sha": "4955e1fc88862c838992f88c86e6eabf81665da3", "filename": "src/libtest/helpers/isatty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibtest%2Fhelpers%2Fisatty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibtest%2Fhelpers%2Fisatty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fisatty.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -2,7 +2,7 @@\n //! if stdout is a tty.\n \n #[cfg(any(\n-    target_os = \"cloudabi\",\n+    target_os = \"cloudabi\", target_os = \"hermit\",\n     all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n     all(target_vendor = \"fortanix\", target_env = \"sgx\")\n ))]"}, {"sha": "341a2e18db5fcfd50f449851647a41f74512c12f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -441,9 +441,9 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    // FIXME: Re-enable emscripten once it can catch panics again\n+    // Emscripten can catch panics but other wasm targets cannot\n     let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n-        && (cfg!(target_arch = \"wasm32\") || cfg!(target_os = \"emscripten\"));\n+        && cfg!(target_arch = \"wasm32\") && !cfg!(target_os = \"emscripten\");\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n         let message = CompletedTest::new(desc, TrIgnored, None, Vec::new());"}, {"sha": "971f4e3e12ea81eb2cb411884a9b3b605b9b3bcf", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n "}, {"sha": "959929fbafbf10424f937f4b3b0c2eb68eb8832a", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "9f07488a9a8a6a3be34c9fc8e0f8706d98a7d48c", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // ignore-msvc\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "e5a2936b92497aa6cf26a8f126079f12c40e766f", "filename": "src/test/codegen/unwind-extern-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C opt-level=0\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![crate_type = \"lib\"]\n #![feature(unwind_attributes)]"}, {"sha": "8403e1e9da9fa381f0b86be85e8b8647f765a8ae", "filename": "src/test/codegen/unwind-extern-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![crate_type = \"lib\"]\n #![feature(unwind_attributes)]"}, {"sha": "8c35f6ca0000dd8f6f57809bfd0f5993544723ab", "filename": "src/test/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,7 +1,7 @@\n // Test that we detect changes to the `dep_kind` query. If the change is not\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "8dc6b73edf6d473ecd804cdd314597fbdb86dcd9", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "109304d6d22ccdd4cb9368c12bbea673702e2f76", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that we generate StorageDead on unwind paths for generators.\n //"}, {"sha": "e73390f52b5d552fc3287e923a0f52ac9a117c52", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // check that we don't emit multiple drop flags when they are not needed.\n "}, {"sha": "a3b517e9bca87bfa0cf295af84a7496c3ad5fe65", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,7 +1,7 @@\n // check that we don't forget to drop the Box if we early return before\n // initializing it\n // ignore-tidy-linelength\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "782bc31186ca5fb8eb8a4931bc077d8579e4d351", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that after the call to `std::mem::drop` we do not generate a\n // MIR drop of the argument. (We used to have a `DROP(_2)` in the code"}, {"sha": "da73cc96348f059e4c15e29ce839204b2b824ed4", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "965897ad541e78f362328754b06da3d47e0c6c4d", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // Test that the fake borrows for matches are removed after borrow checking.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {"}, {"sha": "db36a1fab5f2104f48e2dc3a3dedea1532753d86", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n "}, {"sha": "5d6fa416b9895e7e3aa2a1890a64f3c9846589cb", "filename": "src/test/ui/abi/statics/static-mut-foreign.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -5,10 +5,6 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n-// FIXME: This will work on emscripten once libc is updated to include\n-// rust-lang/libc/#1478\n-// ignore-emscripten libc type mismatch\n-\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "ea4a9e5afa50157279c76ac8d737e16e329f2ab7", "filename": "src/test/ui/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -2,7 +2,7 @@\n // Check that partially moved from function parameters are dropped after the\n // named bindings that move from them.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::{panic, cell::RefCell};\n "}, {"sha": "339bcfa1060a48e6a3c560176a987535317c2230", "filename": "src/test/ui/builtin-clone-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused_variables)]\n #![allow(unused_imports)]\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that builtin implementations of `Clone` cleanup everything\n // in case of unwinding."}, {"sha": "f181991713b2cd3fb4add9cec8f6f0db83a35bfb", "filename": "src/test/ui/catch-unwind-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn worker() -> ! {\n     panic!()"}, {"sha": "91063edf0f6c4badf45a759ad86bcb9722290287", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -5,7 +5,7 @@\n \n // run-pass\n // edition:2018\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(slice_patterns)]\n #![allow(unused)]"}, {"sha": "29dcbfe9609a0bf59fe36bea428144cc9c9e8fbe", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n #![feature(slice_patterns)]"}, {"sha": "20c443b63d17532f459ee214223fedcbefe0e98a", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes -Cpasses=name-anon-globals\n \n #![crate_type = \"lib\"]"}, {"sha": "f88687858fd1139b92a5b9a517b384cea2b6239a", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "5f6778674dce13a5e9fd32e8ff61ff3c2bbef2bb", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "71a68ff684af31c6656fb61cc9bd20ecafa0e7fa", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "d76cc41be4e5558bb1eae991c8edb866fef9a4b5", "filename": "src/test/ui/imports/reexports.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexports.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,16 +1,21 @@\n+#![warn(unused_imports)]\n+\n mod a {\n     fn foo() {}\n     mod foo {}\n \n     mod a {\n         pub use super::foo; //~ ERROR cannot be re-exported\n-        pub use super::*; //~ ERROR must import something with the glob's visibility\n+        pub use super::*;\n+        //~^ WARNING glob import doesn't reexport anything because no candidate is public enough\n     }\n }\n \n mod b {\n     pub fn foo() {}\n-    mod foo { pub struct S; }\n+    mod foo {\n+        pub struct S;\n+    }\n \n     pub mod a {\n         pub use super::foo; // This is OK since the value `foo` is visible enough."}, {"sha": "4388e2c276b8ebbda2cc938f14eee86f1ce75251", "filename": "src/test/ui/imports/reexports.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexports.stderr?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,34 +1,40 @@\n error[E0364]: `foo` is private, and cannot be re-exported\n-  --> $DIR/reexports.rs:6:17\n+  --> $DIR/reexports.rs:8:17\n    |\n LL |         pub use super::foo;\n    |                 ^^^^^^^^^^\n    |\n note: consider marking `foo` as `pub` in the imported module\n-  --> $DIR/reexports.rs:6:17\n+  --> $DIR/reexports.rs:8:17\n    |\n LL |         pub use super::foo;\n    |                 ^^^^^^^^^^\n \n-error: A non-empty glob must import something with the glob's visibility\n-  --> $DIR/reexports.rs:7:17\n-   |\n-LL |         pub use super::*;\n-   |                 ^^^^^^^^\n-\n error[E0603]: module `foo` is private\n-  --> $DIR/reexports.rs:28:15\n+  --> $DIR/reexports.rs:33:15\n    |\n LL |     use b::a::foo::S;\n    |               ^^^\n \n error[E0603]: module `foo` is private\n-  --> $DIR/reexports.rs:29:15\n+  --> $DIR/reexports.rs:34:15\n    |\n LL |     use b::b::foo::S as T;\n    |               ^^^\n \n-error: aborting due to 4 previous errors\n+warning: glob import doesn't reexport anything because no candidate is public enough\n+  --> $DIR/reexports.rs:9:17\n+   |\n+LL |         pub use super::*;\n+   |                 ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/reexports.rs:1:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0364, E0603.\n For more information about an error, try `rustc --explain E0364`."}, {"sha": "0d95d168b3db3fdb388dfaa7909e8f570bf8ebc8", "filename": "src/test/ui/issues/issue-14875.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Check that values are not leaked when a dtor panics (#14875)\n "}, {"sha": "8ede8143ea6572a1b718fb0298ccde7248f6e1b9", "filename": "src/test/ui/issues/issue-29948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "47c3ab59aa2eb9c2eba273f77eb142336a9cbc48", "filename": "src/test/ui/issues/issue-43853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "cca0995d4ca10bad7d3f33020e88de160fdf8b5a", "filename": "src/test/ui/issues/issue-46519.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // compile-flags:--test -O\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #[test]\n #[should_panic(expected = \"creating inhabited type\")]"}, {"sha": "d6612035750836e49accc865a8f2d05dcaeb35b3", "filename": "src/test/ui/iterators/iter-count-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "f1eded31702c4449d4ebf383127d13b251d84b81", "filename": "src/test/ui/iterators/iter-position-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "5d67c7cbb42565e00898ee95cb7d5b155a201c7f", "filename": "src/test/ui/iterators/iter-step-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "ee4ab4d24c6ab22da3d6c2579bf01308c144c0cf", "filename": "src/test/ui/iterators/iter-sum-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "429f8e0bc9648a61aeecc631e91202fce4770891", "filename": "src/test/ui/iterators/iter-sum-overflow-overflow-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C overflow-checks\n \n use std::panic;"}, {"sha": "32cf59294e7603e7fc4d158c4be511a05f09bf24", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -13,7 +13,7 @@\n // compile-flags: --test -C debug_assertions=yes\n // revisions: std core\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![cfg_attr(core, no_std)]\n "}, {"sha": "6f13d5612ce51b93a333eaf4dfbcb558e68f5b17", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n #![feature(never_type)]"}, {"sha": "2949437b1e4b659db6463f812ae0239c8c6fdb5b", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::cell::RefCell;\n use std::panic;"}, {"sha": "e0c30160b9e94be9ff2ceb286ad6d04151e26029", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n "}, {"sha": "e9927304f23f8c380a0f1c9ea5fa0d76a79e2536", "filename": "src/test/ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // compile-flags: -C debug_assertions=yes\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten dies with an LLVM error\n \n use std::panic;"}, {"sha": "5d72771c2dcff1bdff532ec1214b0acb67daa901", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -4,7 +4,7 @@\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // error-pattern: is not compiled with this crate's panic strategy `unwind`\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "4c25c09d6438f3146ca04a355be849481707add5", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "478af451e7f657bbd73ecceb3ca5b180027019ca", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -2,7 +2,7 @@\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "54fee085ee943dfc7bfd6953b88562f9bf8feb67", "filename": "src/test/ui/privacy/restricted/relative-2018.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Frelative-2018.stderr?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-error: visibilities can only be restricted to ancestor modules\n+error[E0742]: visibilities can only be restricted to ancestor modules\n   --> $DIR/relative-2018.rs:7:12\n    |\n LL |     pub(in ::core) struct S4;\n@@ -14,3 +14,4 @@ LL |     pub(in a::b) struct S5;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0742`."}, {"sha": "e6a61fbefb0d80dd87ea7195bc2b5a5068dedb02", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -4,7 +4,7 @@ error[E0433]: failed to resolve: maybe a missing crate `bad`?\n LL |     pub(in bad::path) mod m1 {}\n    |            ^^^ maybe a missing crate `bad`?\n \n-error: visibilities can only be restricted to ancestor modules\n+error[E0742]: visibilities can only be restricted to ancestor modules\n   --> $DIR/test.rs:51:12\n    |\n LL |     pub(in foo) mod m2 {}\n@@ -78,5 +78,5 @@ LL |     u.h();\n \n error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0364, E0433, E0603, E0616, E0624.\n+Some errors have detailed explanations: E0364, E0433, E0603, E0616, E0624, E0742.\n For more information about an error, try `rustc --explain E0364`."}, {"sha": "418178d0f0ead071c24efda048d43721ac535eec", "filename": "src/test/ui/proc-macro/expand-with-a-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // aux-build:expand-with-a-macro.rs\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![deny(warnings)]\n "}, {"sha": "6b8724457a6a3621bc2b3dd1fdb6795f713aa909", "filename": "src/test/ui/proc-macro/issue-50493.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,4 +1,4 @@\n-error: visibilities can only be restricted to ancestor modules\n+error[E0742]: visibilities can only be restricted to ancestor modules\n   --> $DIR/issue-50493.rs:8:12\n    |\n LL |     pub(in restricted) field: usize,\n@@ -12,4 +12,5 @@ LL | #[derive(Derive)]\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0616`.\n+Some errors have detailed explanations: E0616, E0742.\n+For more information about an error, try `rustc --explain E0616`."}, {"sha": "56ff104b4fed914a75f97f4ab71d1a759bc227e9", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -53,12 +53,13 @@ LL | pub (xyz) fn xyz() {}\n            `pub(super)`: visible only in the current module's parent\n            `pub(in path::to::module)`: visible only on the specified path\n \n-error: visibilities can only be restricted to ancestor modules\n+error[E0742]: visibilities can only be restricted to ancestor modules\n   --> $DIR/pub-restricted.rs:25:17\n    |\n LL |         pub (in x) non_parent_invalid: usize,\n    |                 ^\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0704`.\n+Some errors have detailed explanations: E0704, E0742.\n+For more information about an error, try `rustc --explain E0704`."}, {"sha": "f1e53a0d8b4266658134f0953db9b546126ee211", "filename": "src/test/ui/reachable-unnameable-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable-unnameable-items.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // aux-build:reachable-unnameable-items.rs\n \n extern crate reachable_unnameable_items;"}, {"sha": "43af38cf491e3aed4ab8af834991950ac817ebcd", "filename": "src/test/ui/resolve/resolve-bad-visibility.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-bad-visibility.stderr?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -10,7 +10,7 @@ error[E0577]: expected module, found trait `Tr`\n LL | pub(in Tr) struct Z;\n    |        ^^ not a module\n \n-error: visibilities can only be restricted to ancestor modules\n+error[E0742]: visibilities can only be restricted to ancestor modules\n   --> $DIR/resolve-bad-visibility.rs:6:8\n    |\n LL | pub(in std::vec) struct F;\n@@ -30,4 +30,5 @@ LL | pub(in too_soon) struct H;\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0433`.\n+Some errors have detailed explanations: E0433, E0742.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "0bd7bf3d51a78d01db1a8e86ebe49ad811f40c3b", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --test\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(test)]\n "}, {"sha": "7923aa7c0e22f31affe992fabc45afaa67d844f9", "filename": "src/test/ui/rfcs/rfc1857-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![allow(dead_code, unreachable_code)]\n "}, {"sha": "27874f8655e56c7bde9c5af7b305c75004c3d85c", "filename": "src/test/ui/save-analysis/issue-65590.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// compile-flags: -Zsave-analysis\n+// edition:2018\n+\n+// Async desugaring for return types in (associated) functions introduces a\n+// separate definition internally, which we need to take into account\n+// (or else we ICE).\n+trait Trait { type Assoc; }\n+struct Struct;\n+\n+async fn foobar<T: Trait>() -> T::Assoc {\n+    unimplemented!()\n+}\n+\n+impl Struct {\n+    async fn foo<T: Trait>(&self) -> T::Assoc {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1a478460efc6c8954c6714450b848652cd700a85", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #![feature(allow_fail)]\n "}, {"sha": "9fa759f9eb4837a25ff0b215cba976b78f849412", "filename": "src/test/ui/test-attrs/test-should-fail-good-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #[test]\n #[should_panic(expected = \"foo\")]"}, {"sha": "fca57eec79fc65029d4fecf73bf58eb20cb813c0", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -91,7 +91,9 @@ static TARGETS: &[&str] = &[\n     \"mips-unknown-linux-gnu\",\n     \"mips-unknown-linux-musl\",\n     \"mips64-unknown-linux-gnuabi64\",\n+    \"mips64-unknown-linux-muslabi64\",\n     \"mips64el-unknown-linux-gnuabi64\",\n+    \"mips64el-unknown-linux-muslabi64\",\n     \"mipsisa32r6-unknown-linux-gnu\",\n     \"mipsisa32r6el-unknown-linux-gnu\",\n     \"mipsisa64r6-unknown-linux-gnuabi64\","}, {"sha": "d750595e272cffa0129cd08479ecbd27a0e47d0c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -141,10 +141,6 @@ impl EarlyProps {\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n-                // FIXME: Re-enable run-fail once panics are handled correctly\n-                if config.target.contains(\"emscripten\") && config.mode == common::RunFail {\n-                    props.ignore = Ignore::Ignore;\n-                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&"}, {"sha": "89bbde4d5a9e3069122aff148bc478c7adb57eca", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aa69777ea2902208b24b3fd77767d577ceaf6386/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=aa69777ea2902208b24b3fd77767d577ceaf6386", "patch": "@@ -13,6 +13,11 @@ clap = \"2.25.0\"\n failure = \"0.1\"\n mdbook-linkcheck = { version = \"0.3.0\", optional = true }\n \n+# A noop dependency that changes in the Rust repository, it's a bit of a hack.\n+# See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n+# for more information.\n+rustc-workspace-hack = \"1.0.0\"\n+\n [dependencies.mdbook]\n version = \"0.3.0\"\n default-features = false"}]}