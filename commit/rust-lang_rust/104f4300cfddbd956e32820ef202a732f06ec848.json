{"sha": "104f4300cfddbd956e32820ef202a732f06ec848", "node_id": "C_kwDOAAsO6NoAKDEwNGY0MzAwY2ZkZGJkOTU2ZTMyODIwZWYyMDJhNzMyZjA2ZWM4NDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T08:09:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-10T08:09:25Z"}, "message": "Auto merge of #108934 - matthiaskrgr:rollup-vm414p5, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #106915 (Only load one CSS theme by default)\n - #108294 (Place binder correctly for arbitrary trait bound suggestion)\n - #108778 (x fmt: Don't print all modified files if there's more than 10)\n - #108854 (feat/refactor: improve errors in case of ident with number at start)\n - #108870 (Fix invalid inlining of reexport of reexport of private item)\n - #108917 (Consider target_family as pal)\n - #108922 (Add auto notification for changes to stable mir)\n - #108929 (Fix typo in span_map.rs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "556e5ecc43e89550c7d8b8f3d82454197f391d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556e5ecc43e89550c7d8b8f3d82454197f391d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104f4300cfddbd956e32820ef202a732f06ec848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104f4300cfddbd956e32820ef202a732f06ec848", "html_url": "https://github.com/rust-lang/rust/commit/104f4300cfddbd956e32820ef202a732f06ec848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104f4300cfddbd956e32820ef202a732f06ec848/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f37f8549940386a9d066ba199983affff47afbb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f37f8549940386a9d066ba199983affff47afbb4", "html_url": "https://github.com/rust-lang/rust/commit/f37f8549940386a9d066ba199983affff47afbb4"}, {"sha": "5b3f84d8af3668944f25b542d2f71f88f253ecc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3f84d8af3668944f25b542d2f71f88f253ecc0", "html_url": "https://github.com/rust-lang/rust/commit/5b3f84d8af3668944f25b542d2f71f88f253ecc0"}], "stats": {"total": 498, "additions": 345, "deletions": 153}, "files": [{"sha": "ae0bb4949c743d608b69a0a522d5c271248cffe5", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -117,7 +117,7 @@ pub fn suggest_arbitrary_trait_bound<'tcx>(\n     }\n \n     let param_name = trait_pred.skip_binder().self_ty().to_string();\n-    let mut constraint = trait_pred.print_modifiers_and_trait_path().to_string();\n+    let mut constraint = trait_pred.to_string();\n \n     if let Some((name, term)) = associated_ty {\n         // FIXME: this case overlaps with code in TyCtxt::note_and_explain_type_err.\n@@ -144,7 +144,7 @@ pub fn suggest_arbitrary_trait_bound<'tcx>(\n              this requirement\",\n             if generics.where_clause_span.is_empty() { \"introducing a\" } else { \"extending the\" },\n         ),\n-        format!(\"{} {}: {}\", generics.add_where_or_trailing_comma(), param_name, constraint),\n+        format!(\"{} {constraint}\", generics.add_where_or_trailing_comma()),\n         Applicability::MaybeIncorrect,\n     );\n     true"}, {"sha": "5c7dc1e2abf91f67f9df2a96fe9d9c14b8046013", "filename": "compiler/rustc_parse/locales/en-US.ftl", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -412,8 +412,7 @@ parse_fn_ptr_with_generics = function pointer types may not have generic paramet\n         *[false] a\n     } `for` parameter list\n \n-parse_invalid_identifier_with_leading_number = expected identifier, found number literal\n-    .label = identifiers cannot start with a number\n+parse_invalid_identifier_with_leading_number = identifiers cannot start with a number\n \n parse_maybe_fn_typo_with_impl = you might have meant to write `impl` instead of `fn`\n     .suggestion = replace `fn` with `impl` here"}, {"sha": "63e5bc5051326fdab2ec67486d052ff24c8f6af5", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -939,6 +939,7 @@ pub(crate) struct ExpectedIdentifier {\n     pub token: Token,\n     pub suggest_raw: Option<SuggEscapeToUseAsIdentifier>,\n     pub suggest_remove_comma: Option<SuggRemoveComma>,\n+    pub help_cannot_start_number: Option<HelpIdentifierStartsWithNumber>,\n }\n \n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n@@ -975,10 +976,18 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n             sugg.add_to_diagnostic(&mut diag);\n         }\n \n+        if let Some(help) = self.help_cannot_start_number {\n+            help.add_to_diagnostic(&mut diag);\n+        }\n+\n         diag\n     }\n }\n \n+#[derive(Subdiagnostic)]\n+#[help(parse_invalid_identifier_with_leading_number)]\n+pub(crate) struct HelpIdentifierStartsWithNumber;\n+\n pub(crate) struct ExpectedSemi {\n     pub span: Span,\n     pub token: Token,\n@@ -1207,14 +1216,6 @@ pub(crate) struct SelfParamNotFirst {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(parse_invalid_identifier_with_leading_number)]\n-pub(crate) struct InvalidIdentiferStartsWithNumber {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(parse_const_generic_without_braces)]\n pub(crate) struct ConstGenericWithoutBraces {"}, {"sha": "5b12bcc182222dd735b890faf67b4133f19f6030", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -8,14 +8,14 @@ use crate::errors::{\n     ComparisonOperatorsCannotBeChained, ComparisonOperatorsCannotBeChainedSugg,\n     ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentOnParamType,\n     DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n-    GenericParamsWithoutAngleBrackets, GenericParamsWithoutAngleBracketsSugg, InInTypo,\n-    IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait, ParenthesesInForHead,\n-    ParenthesesInForHeadSugg, PatternMethodParamWithoutBody, QuestionMarkInType,\n-    QuestionMarkInTypeSugg, SelfParamNotFirst, StructLiteralBodyWithoutPath,\n-    StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens, StructLiteralNeedingParensSugg,\n-    SuggEscapeToUseAsIdentifier, SuggRemoveComma, UnexpectedConstInGenericParam,\n-    UnexpectedConstParamDeclaration, UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets,\n-    UseEqInstead,\n+    GenericParamsWithoutAngleBrackets, GenericParamsWithoutAngleBracketsSugg,\n+    HelpIdentifierStartsWithNumber, InInTypo, IncorrectAwait, IncorrectSemicolon,\n+    IncorrectUseOfAwait, ParenthesesInForHead, ParenthesesInForHeadSugg,\n+    PatternMethodParamWithoutBody, QuestionMarkInType, QuestionMarkInTypeSugg, SelfParamNotFirst,\n+    StructLiteralBodyWithoutPath, StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens,\n+    StructLiteralNeedingParensSugg, SuggEscapeToUseAsIdentifier, SuggRemoveComma,\n+    UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n+    UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n };\n \n use crate::fluent_generated as fluent;\n@@ -280,6 +280,7 @@ impl<'a> Parser<'a> {\n             TokenKind::CloseDelim(Delimiter::Brace),\n             TokenKind::CloseDelim(Delimiter::Parenthesis),\n         ];\n+\n         let suggest_raw = match self.token.ident() {\n             Some((ident, false))\n                 if ident.is_raw_guess()\n@@ -295,18 +296,19 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let suggest_remove_comma =\n-            if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                Some(SuggRemoveComma { span: self.token.span })\n-            } else {\n-                None\n-            };\n+        let suggest_remove_comma = (self.token == token::Comma\n+            && self.look_ahead(1, |t| t.is_ident()))\n+        .then_some(SuggRemoveComma { span: self.token.span });\n+\n+        let help_cannot_start_number =\n+            self.is_lit_bad_ident().then_some(HelpIdentifierStartsWithNumber);\n \n         let err = ExpectedIdentifier {\n             span: self.token.span,\n             token: self.token.clone(),\n             suggest_raw,\n             suggest_remove_comma,\n+            help_cannot_start_number,\n         };\n         let mut err = err.into_diagnostic(&self.sess.span_diagnostic);\n \n@@ -365,6 +367,17 @@ impl<'a> Parser<'a> {\n         err\n     }\n \n+    /// Checks if the current token is a integer or float literal and looks like\n+    /// it could be a invalid identifier with digits at the start.\n+    pub(super) fn is_lit_bad_ident(&mut self) -> bool {\n+        matches!(self.token.uninterpolate().kind, token::Literal(Lit { kind: token::LitKind::Integer | token::LitKind::Float, .. })\n+            // ensure that the integer literal is followed by a *invalid*\n+            // suffix: this is how we know that it is a identifier with an\n+            // invalid beginning.\n+            if rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n+        )\n+    }\n+\n     pub(super) fn expected_one_of_not_found(\n         &mut self,\n         edible: &[TokenKind],"}, {"sha": "fc9f1d1330a72038bc81a031740119d5ba9a6a23", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -348,6 +348,10 @@ impl<'a> Parser<'a> {\n             lo = self.token.span;\n         }\n \n+        if self.is_lit_bad_ident() {\n+            return Err(self.expected_ident_found());\n+        }\n+\n         let pat = if self.check(&token::BinOp(token::And)) || self.token.kind == token::AndAnd {\n             self.parse_pat_deref(expected)?\n         } else if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {"}, {"sha": "fbe5b88c49eaa42ddaa5001031cbc3e832ea12f4", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -273,7 +273,6 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n-        self.report_invalid_identifier_error()?;\n         let (pat, colon) =\n             self.parse_pat_before_ty(None, RecoverComma::Yes, PatternLocation::LetBinding)?;\n \n@@ -366,17 +365,6 @@ impl<'a> Parser<'a> {\n         Ok(P(ast::Local { ty, pat, kind, id: DUMMY_NODE_ID, span: lo.to(hi), attrs, tokens: None }))\n     }\n \n-    /// report error for `let 1x = 123`\n-    pub fn report_invalid_identifier_error(&mut self) -> PResult<'a, ()> {\n-        if let token::Literal(lit) = self.token.uninterpolate().kind &&\n-            rustc_ast::MetaItemLit::from_token(&self.token).is_none() &&\n-            (lit.kind == token::LitKind::Integer || lit.kind == token::LitKind::Float) &&\n-            self.look_ahead(1, |t| matches!(t.kind, token::Eq) || matches!(t.kind, token::Colon ) ) {\n-                return Err(self.sess.create_err(errors::InvalidIdentiferStartsWithNumber { span: self.token.span }));\n-        }\n-        Ok(())\n-    }\n-\n     fn check_let_else_init_bool_expr(&self, init: &ast::Expr) {\n         if let ast::ExprKind::Binary(op, ..) = init.kind {\n             if op.node.lazy() {"}, {"sha": "b79969663ca2e1d5140129c55b2f9c5af7d7e567", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -165,8 +165,14 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n             if !CiEnv::is_ci() && paths.is_empty() {\n                 match get_modified_rs_files(build) {\n                     Ok(Some(files)) => {\n+                        if files.len() <= 10 {\n+                            for file in &files {\n+                                println!(\"formatting modified file {file}\");\n+                            }\n+                        } else {\n+                            println!(\"formatting {} modified files\", files.len());\n+                        }\n                         for file in files {\n-                            println!(\"formatting modified file {file}\");\n                             ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n                         }\n                     }"}, {"sha": "29c3afe0d9560d06b363c5846566c5fbc34fd2f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -2065,23 +2065,81 @@ fn clean_bare_fn_ty<'tcx>(\n     BareFunctionDecl { unsafety: bare_fn.unsafety, abi: bare_fn.abi, decl, generic_params }\n }\n \n-/// This visitor is used to go through only the \"top level\" of a item and not enter any sub\n-/// item while looking for a given `Ident` which is stored into `item` if found.\n-struct OneLevelVisitor<'hir> {\n+/// Get DefId of of an item's user-visible parent.\n+///\n+/// \"User-visible\" should account for re-exporting and inlining, which is why this function isn't\n+/// just `tcx.parent(def_id)`. If the provided `path` has more than one path element, the `DefId`\n+/// of the second-to-last will be given.\n+///\n+/// ```text\n+/// use crate::foo::Bar;\n+///            ^^^ DefId of this item will be returned\n+/// ```\n+///\n+/// If the provided path has only one item, `tcx.parent(def_id)` will be returned instead.\n+fn get_path_parent_def_id(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    path: &hir::UsePath<'_>,\n+) -> Option<DefId> {\n+    if let [.., parent_segment, _] = &path.segments {\n+        match parent_segment.res {\n+            hir::def::Res::Def(_, parent_def_id) => Some(parent_def_id),\n+            _ if parent_segment.ident.name == kw::Crate => {\n+                // In case the \"parent\" is the crate, it'll give `Res::Err` so we need to\n+                // circumvent it this way.\n+                Some(tcx.parent(def_id))\n+            }\n+            _ => None,\n+        }\n+    } else {\n+        // If the path doesn't have a parent, then the parent is the current module.\n+        Some(tcx.parent(def_id))\n+    }\n+}\n+\n+/// This visitor is used to find an HIR Item based on its `use` path. This doesn't use the ordinary\n+/// name resolver because it does not walk all the way through a chain of re-exports.\n+pub(crate) struct OneLevelVisitor<'hir> {\n     map: rustc_middle::hir::map::Map<'hir>,\n-    item: Option<&'hir hir::Item<'hir>>,\n+    pub(crate) item: Option<&'hir hir::Item<'hir>>,\n     looking_for: Ident,\n     target_def_id: LocalDefId,\n }\n \n impl<'hir> OneLevelVisitor<'hir> {\n-    fn new(map: rustc_middle::hir::map::Map<'hir>, target_def_id: LocalDefId) -> Self {\n+    pub(crate) fn new(map: rustc_middle::hir::map::Map<'hir>, target_def_id: LocalDefId) -> Self {\n         Self { map, item: None, looking_for: Ident::empty(), target_def_id }\n     }\n \n-    fn reset(&mut self, looking_for: Ident) {\n-        self.looking_for = looking_for;\n+    pub(crate) fn find_target(\n+        &mut self,\n+        tcx: TyCtxt<'_>,\n+        def_id: DefId,\n+        path: &hir::UsePath<'_>,\n+    ) -> Option<&'hir hir::Item<'hir>> {\n+        let parent_def_id = get_path_parent_def_id(tcx, def_id, path)?;\n+        let parent = self.map.get_if_local(parent_def_id)?;\n+\n+        // We get the `Ident` we will be looking for into `item`.\n+        self.looking_for = path.segments[path.segments.len() - 1].ident;\n+        // We reset the `item`.\n         self.item = None;\n+\n+        match parent {\n+            hir::Node::Item(parent_item) => {\n+                hir::intravisit::walk_item(self, parent_item);\n+            }\n+            hir::Node::Crate(m) => {\n+                hir::intravisit::walk_mod(\n+                    self,\n+                    m,\n+                    tcx.local_def_id_to_hir_id(parent_def_id.as_local().unwrap()),\n+                );\n+            }\n+            _ => return None,\n+        }\n+        self.item\n     }\n }\n \n@@ -2129,41 +2187,7 @@ fn get_all_import_attributes<'hir>(\n             add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()), is_inline);\n         }\n \n-        let def_id = if let [.., parent_segment, _] = &path.segments {\n-            match parent_segment.res {\n-                hir::def::Res::Def(_, def_id) => def_id,\n-                _ if parent_segment.ident.name == kw::Crate => {\n-                    // In case the \"parent\" is the crate, it'll give `Res::Err` so we need to\n-                    // circumvent it this way.\n-                    tcx.parent(item.owner_id.def_id.to_def_id())\n-                }\n-                _ => break,\n-            }\n-        } else {\n-            // If the path doesn't have a parent, then the parent is the current module.\n-            tcx.parent(item.owner_id.def_id.to_def_id())\n-        };\n-\n-        let Some(parent) = hir_map.get_if_local(def_id) else { break };\n-\n-        // We get the `Ident` we will be looking for into `item`.\n-        let looking_for = path.segments[path.segments.len() - 1].ident;\n-        visitor.reset(looking_for);\n-\n-        match parent {\n-            hir::Node::Item(parent_item) => {\n-                hir::intravisit::walk_item(&mut visitor, parent_item);\n-            }\n-            hir::Node::Crate(m) => {\n-                hir::intravisit::walk_mod(\n-                    &mut visitor,\n-                    m,\n-                    tcx.local_def_id_to_hir_id(def_id.as_local().unwrap()),\n-                );\n-            }\n-            _ => break,\n-        }\n-        if let Some(i) = visitor.item {\n+        if let Some(i) = visitor.find_target(tcx, item.owner_id.def_id.to_def_id(), path) {\n             item = i;\n         } else {\n             break;"}, {"sha": "ed1eb66b97c36f9235a18dc8b4877e01290c6193", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -647,11 +647,35 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                      </noscript>\\\n                      <link rel=\\\"stylesheet\\\" \\\n                          href=\\\"{static_root_path}{settings_css}\\\">\\\n-                     <script defer src=\\\"{static_root_path}{settings_js}\\\"></script>\",\n+                     <script defer src=\\\"{static_root_path}{settings_js}\\\"></script>\\\n+                     <link rel=\\\"preload\\\" href=\\\"{static_root_path}{theme_light_css}\\\" \\\n+                         as=\\\"style\\\">\\\n+                     <link rel=\\\"preload\\\" href=\\\"{static_root_path}{theme_dark_css}\\\" \\\n+                         as=\\\"style\\\">\\\n+                     <link rel=\\\"preload\\\" href=\\\"{static_root_path}{theme_ayu_css}\\\" \\\n+                         as=\\\"style\\\">\",\n                     static_root_path = page.get_static_root_path(),\n                     settings_css = static_files::STATIC_FILES.settings_css,\n                     settings_js = static_files::STATIC_FILES.settings_js,\n-                )\n+                    theme_light_css = static_files::STATIC_FILES.theme_light_css,\n+                    theme_dark_css = static_files::STATIC_FILES.theme_dark_css,\n+                    theme_ayu_css = static_files::STATIC_FILES.theme_ayu_css,\n+                );\n+                // Pre-load all theme CSS files, so that switching feels seamless.\n+                //\n+                // When loading settings.html as a popover, the equivalent HTML is\n+                // generated in main.js.\n+                for file in &shared.style_files {\n+                    if let Ok(theme) = file.basename() {\n+                        write!(\n+                            buf,\n+                            \"<link rel=\\\"preload\\\" href=\\\"{root_path}{theme}{suffix}.css\\\" \\\n+                                as=\\\"style\\\">\",\n+                            root_path = page.static_root_path.unwrap_or(\"\"),\n+                            suffix = page.resource_suffix,\n+                        );\n+                    }\n+                }\n             },\n             &shared.style_files,\n         );"}, {"sha": "eb9262f472b67bcc032d855bfd9533d9bf07270e", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -29,12 +29,12 @@ pub(crate) enum LinkFromSrc {\n \n /// This function will do at most two things:\n ///\n-/// 1. Generate a `span` correspondance map which links an item `span` to its definition `span`.\n+/// 1. Generate a `span` correspondence map which links an item `span` to its definition `span`.\n /// 2. Collect the source code files.\n ///\n-/// It returns the `krate`, the source code files and the `span` correspondance map.\n+/// It returns the `krate`, the source code files and the `span` correspondence map.\n ///\n-/// Note about the `span` correspondance map: the keys are actually `(lo, hi)` of `span`s. We don't\n+/// Note about the `span` correspondence map: the keys are actually `(lo, hi)` of `span`s. We don't\n /// need the `span` context later on, only their position, so instead of keep a whole `Span`, we\n /// only keep the `lo` and `hi`.\n pub(crate) fn collect_spans_and_sources("}, {"sha": "403b5004d6558a46f522bc442ad149701efc524c", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -1,20 +1,9 @@\n // Local js definitions:\n /* global addClass, getSettingValue, hasClass, searchState */\n-/* global onEach, onEachLazy, removeClass */\n+/* global onEach, onEachLazy, removeClass, getVar */\n \n \"use strict\";\n \n-// Get a value from the rustdoc-vars div, which is used to convey data from\n-// Rust to the JS. If there is no such element, return null.\n-function getVar(name) {\n-    const el = document.getElementById(\"rustdoc-vars\");\n-    if (el) {\n-        return el.attributes[\"data-\" + name].value;\n-    } else {\n-        return null;\n-    }\n-}\n-\n // Given a basename (e.g. \"storage\") and an extension (e.g. \".js\"), return a URL\n // for a resource under the root-path, with the resource-suffix.\n function resourcePath(basename, extension) {\n@@ -187,6 +176,15 @@ function loadCss(cssUrl) {\n     document.getElementsByTagName(\"head\")[0].appendChild(link);\n }\n \n+function preLoadCss(cssUrl) {\n+    // https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\n+    const link = document.createElement(\"link\");\n+    link.href = cssUrl;\n+    link.rel = \"preload\";\n+    link.as = \"style\";\n+    document.getElementsByTagName(\"head\")[0].appendChild(link);\n+}\n+\n (function() {\n     const isHelpPage = window.location.pathname.endsWith(\"/help.html\");\n \n@@ -207,6 +205,23 @@ function loadCss(cssUrl) {\n         // hopefully be loaded when the JS will generate the settings content.\n         loadCss(getVar(\"static-root-path\") + getVar(\"settings-css\"));\n         loadScript(getVar(\"static-root-path\") + getVar(\"settings-js\"));\n+        preLoadCss(getVar(\"static-root-path\") + getVar(\"theme-light-css\"));\n+        preLoadCss(getVar(\"static-root-path\") + getVar(\"theme-dark-css\"));\n+        preLoadCss(getVar(\"static-root-path\") + getVar(\"theme-ayu-css\"));\n+        // Pre-load all theme CSS files, so that switching feels seamless.\n+        //\n+        // When loading settings.html as a standalone page, the equivalent HTML is\n+        // generated in context.rs.\n+        setTimeout(() => {\n+            const themes = getVar(\"themes\").split(\",\");\n+            for (const theme of themes) {\n+                // if there are no themes, do nothing\n+                // \"\".split(\",\") == [\"\"]\n+                if (theme !== \"\") {\n+                    preLoadCss(getVar(\"root-path\") + theme + \".css\");\n+                }\n+            }\n+        }, 0);\n     };\n \n     window.searchState = {"}, {"sha": "c3fed9a72d4e23fc470ea65857b9a7328b75118d", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -7,7 +7,6 @@\n \n const darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n-window.mainTheme = document.getElementById(\"mainThemeStyle\");\n \n // WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY\n // If you update this line, then you also need to update the media query with the same\n@@ -44,8 +43,6 @@ function getSettingValue(settingName) {\n \n const localStoredTheme = getSettingValue(\"theme\");\n \n-const savedHref = [];\n-\n // eslint-disable-next-line no-unused-vars\n function hasClass(elem, className) {\n     return elem && elem.classList && elem.classList.contains(className);\n@@ -102,6 +99,7 @@ function onEach(arr, func, reversed) {\n  * @param {function(?)}                   func       - The callback\n  * @param {boolean}                       [reversed] - Whether to iterate in reverse\n  */\n+// eslint-disable-next-line no-unused-vars\n function onEachLazy(lazyArray, func, reversed) {\n     return onEach(\n         Array.prototype.slice.call(lazyArray),\n@@ -125,30 +123,37 @@ function getCurrentValue(name) {\n     }\n }\n \n-function switchTheme(styleElem, mainStyleElem, newThemeName, saveTheme) {\n+// Get a value from the rustdoc-vars div, which is used to convey data from\n+// Rust to the JS. If there is no such element, return null.\n+const getVar = (function getVar(name) {\n+    const el = document.getElementById(\"rustdoc-vars\");\n+    if (el) {\n+        return el.attributes[\"data-\" + name].value;\n+    } else {\n+        return null;\n+    }\n+});\n+\n+function switchTheme(newThemeName, saveTheme) {\n     // If this new value comes from a system setting or from the previously\n     // saved theme, no need to save it.\n     if (saveTheme) {\n         updateLocalStorage(\"theme\", newThemeName);\n     }\n \n-    if (savedHref.length === 0) {\n-        onEachLazy(document.getElementsByTagName(\"link\"), el => {\n-            savedHref.push(el.href);\n-        });\n+    let newHref;\n+\n+    if (newThemeName === \"light\" || newThemeName === \"dark\" || newThemeName === \"ayu\") {\n+        newHref = getVar(\"static-root-path\") + getVar(\"theme-\" + newThemeName + \"-css\");\n+    } else {\n+        newHref = getVar(\"root-path\") + newThemeName + getVar(\"resource-suffix\") + \".css\";\n     }\n-    const newHref = savedHref.find(url => {\n-        const m = url.match(/static\\.files\\/(.*)-[a-f0-9]{16}\\.css$/);\n-        if (m && m[1] === newThemeName) {\n-            return true;\n-        }\n-        const m2 = url.match(/\\/([^/]*)\\.css$/);\n-        if (m2 && m2[1].startsWith(newThemeName)) {\n-            return true;\n-        }\n-    });\n-    if (newHref && newHref !== styleElem.href) {\n-        styleElem.href = newHref;\n+\n+    if (!window.currentTheme) {\n+        document.write(`<link rel=\"stylesheet\" id=\"themeStyle\" href=\"${newHref}\">`);\n+        window.currentTheme = document.getElementById(\"themeStyle\");\n+    } else if (newHref !== window.currentTheme.href) {\n+        window.currentTheme.href = newHref;\n     }\n }\n \n@@ -164,7 +169,7 @@ const updateTheme = (function() {\n      */\n     function updateTheme() {\n         const use = (theme, saveTheme) => {\n-            switchTheme(window.currentTheme, window.mainTheme, theme, saveTheme);\n+            switchTheme(theme, saveTheme);\n         };\n \n         // maybe the user has disabled the setting in the meantime!"}, {"sha": "532660e3d33c73bf200b6a4b4af0cd060ab07466", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -17,19 +17,28 @@\n     <link rel=\"stylesheet\" {#+ #}\n           href=\"{{static_root_path|safe}}{{files.rustdoc_css}}\" {#+ #}\n           id=\"mainThemeStyle\"> {# #}\n-    <link rel=\"stylesheet\" id=\"themeStyle\" href=\"{{static_root_path|safe}}{{files.theme_light_css}}\"> {# #}\n-    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_dark_css}}\"> {# #}\n-    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_ayu_css}}\"> {# #}\n-    {% for theme in themes %}\n-        <link rel=\"stylesheet\" disabled href=\"{{page.root_path|safe}}{{theme}}{{page.resource_suffix}}.css\"> {# #}\n-    {% endfor %}\n     {% if !layout.default_settings.is_empty() %}\n     <script id=\"default-settings\" {#+ #}\n       {%~ for (k, v) in layout.default_settings ~%}\n         data-{{k}}=\"{{v}}\"\n       {% endfor %}\n     ></script> {# #}\n     {% endif %}\n+    <div id=\"rustdoc-vars\" {#+ #}\n+         data-root-path=\"{{page.root_path|safe}}\" {#+ #}\n+         data-static-root-path=\"{{static_root_path|safe}}\" {#+ #}\n+         data-current-crate=\"{{layout.krate}}\" {#+ #}\n+         data-themes=\"{{themes|join(\",\") }}\" {#+ #}\n+         data-resource-suffix=\"{{page.resource_suffix}}\" {#+ #}\n+         data-rustdoc-version=\"{{rustdoc_version}}\" {#+ #}\n+         data-search-js=\"{{files.search_js}}\" {#+ #}\n+         data-settings-js=\"{{files.settings_js}}\" {#+ #}\n+         data-settings-css=\"{{files.settings_css}}\" {#+ #}\n+         data-theme-light-css=\"{{files.theme_light_css}}\" {#+ #}\n+         data-theme-dark-css=\"{{files.theme_dark_css}}\" {#+ #}\n+         data-theme-ayu-css=\"{{files.theme_ayu_css}}\" {#+ #}\n+    > {# #}\n+    </div> {# #}\n     <script src=\"{{static_root_path|safe}}{{files.storage_js}}\"></script> {# #}\n     {% if page.css_class.contains(\"crate\") %}\n     <script defer src=\"{{page.root_path|safe}}crates{{page.resource_suffix}}.js\"></script> {# #}\n@@ -44,6 +53,12 @@\n     <script defer src=\"{{static_root_path|safe}}{{files.scrape_examples_js}}\"></script> {# #}\n     {% endif %}\n     <noscript> {# #}\n+        <link rel=\"stylesheet\" {#+ #}\n+           media=\"(prefers-color-scheme:light)\" {#+ #}\n+           href=\"{{static_root_path|safe}}{{files.theme_light_css}}\"> {# #}\n+        <link rel=\"stylesheet\" {#+ #}\n+           media=\"(prefers-color-scheme:dark)\" {#+ #}\n+           href=\"{{static_root_path|safe}}{{files.theme_dark_css}}\"> {# #}\n         <link rel=\"stylesheet\" {#+ #}\n            href=\"{{static_root_path|safe}}{{files.noscript_css}}\"> {# #}\n     </noscript> {# #}\n@@ -132,17 +147,5 @@ <h2></h2> {# #}\n         {% if page.css_class != \"source\" %}</div>{% endif %}\n     </main> {# #}\n     {{ layout.external_html.after_content|safe }}\n-    <div id=\"rustdoc-vars\" {#+ #}\n-         data-root-path=\"{{page.root_path|safe}}\" {#+ #}\n-         data-static-root-path=\"{{static_root_path|safe}}\" {#+ #}\n-         data-current-crate=\"{{layout.krate}}\" {#+ #}\n-         data-themes=\"{{themes|join(\",\") }}\" {#+ #}\n-         data-resource-suffix=\"{{page.resource_suffix}}\" {#+ #}\n-         data-rustdoc-version=\"{{rustdoc_version}}\" {#+ #}\n-         data-search-js=\"{{files.search_js}}\" {#+ #}\n-         data-settings-js=\"{{files.settings_js}}\" {#+ #}\n-         data-settings-css=\"{{files.settings_css}}\" {#+ #}\n-    > {# #}\n-    </div> {# #}\n </body> {# #}\n </html> {# #}"}, {"sha": "44e9b49f82afd5382ac3124fe09526894ed32b96", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -15,7 +15,7 @@ use rustc_span::Span;\n \n use std::mem;\n \n-use crate::clean::{cfg::Cfg, AttributesExt, NestedAttributesExt};\n+use crate::clean::{cfg::Cfg, AttributesExt, NestedAttributesExt, OneLevelVisitor};\n use crate::core;\n \n /// This module is used to store stuff from Rust's AST in a more convenient\n@@ -220,6 +220,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         renamed: Option<Symbol>,\n         glob: bool,\n         please_inline: bool,\n+        path: &hir::UsePath<'_>,\n     ) -> bool {\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n@@ -263,6 +264,22 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             return false;\n         }\n \n+        if !please_inline &&\n+            let mut visitor = OneLevelVisitor::new(self.cx.tcx.hir(), res_did) &&\n+            let Some(item) = visitor.find_target(self.cx.tcx, def_id.to_def_id(), path) &&\n+            let item_def_id = item.owner_id.def_id &&\n+            item_def_id != def_id &&\n+            self\n+                .cx\n+                .cache\n+                .effective_visibilities\n+                .is_directly_public(self.cx.tcx, item_def_id.to_def_id()) &&\n+            !inherits_doc_hidden(self.cx.tcx, item_def_id)\n+        {\n+            // The imported item is public and not `doc(hidden)` so no need to inline it.\n+            return false;\n+        }\n+\n         let ret = match tcx.hir().get_by_def_id(res_did) {\n             Node::Item(&hir::Item { kind: hir::ItemKind::Mod(ref m), .. }) if glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n@@ -361,6 +378,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                             ident,\n                             is_glob,\n                             please_inline,\n+                            path,\n                         ) {\n                             continue;\n                         }"}, {"sha": "6d6d3c89a3c543788172786c67d2c44a75032ecb", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -62,6 +62,8 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"library/std/src/panic.rs\",   // fuchsia-specific panic backtrace handling\n     \"library/std/src/personality.rs\",\n     \"library/std/src/personality/\",\n+    \"library/std/src/thread/mod.rs\",\n+    \"library/std/src/thread/local.rs\",\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {\n@@ -128,6 +130,7 @@ fn check_cfgs(\n             || cfg.contains(\"target_env\")\n             || cfg.contains(\"target_abi\")\n             || cfg.contains(\"target_vendor\")\n+            || cfg.contains(\"target_family\")\n             || cfg.contains(\"unix\")\n             || cfg.contains(\"windows\");\n "}, {"sha": "995544aeff998032afe209c2518bec27de2ec215", "filename": "tests/run-make-fulldeps/rustdoc-themes/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Frun-make-fulldeps%2Frustdoc-themes%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Frun-make-fulldeps%2Frustdoc-themes%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Frustdoc-themes%2Ffoo.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -1,4 +1,4 @@\n // @has test.css\n // @has foo/struct.Foo.html\n-// @has - '//link[@rel=\"stylesheet\"]/@href' '../test.css'\n+// @has - '//*[@id=\"rustdoc-vars\"]/@data-themes' 'test'\n pub struct Foo;"}, {"sha": "16f0ced8c6eaab1b4a9d9b35b23fd730d2e083d4", "filename": "tests/rustdoc-gui/scrape-examples-button-focus.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -8,24 +8,24 @@ focus: \".scraped-example-list > .scraped-example .next\"\n press-key: \"Enter\"\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n     \"scrollTop\": |initialScrollTop|\n-})\n+}, NEAR)\n focus: \".scraped-example-list > .scraped-example .prev\"\n press-key: \"Enter\"\n assert-property: (\".scraped-example-list > .scraped-example pre\", {\n     \"scrollTop\": |initialScrollTop|\n-})\n+}, NEAR)\n \n // The expand button increases the scrollHeight of the minimized code viewport\n store-property: (smallOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n     \"scrollHeight\": |smallOffsetHeight|\n-})\n+}, NEAR)\n focus: \".scraped-example-list > .scraped-example .expand\"\n press-key: \"Enter\"\n assert-property-false: (\".scraped-example-list > .scraped-example pre\", {\n     \"offsetHeight\": |smallOffsetHeight|\n-})\n+}, NEAR)\n store-property: (fullOffsetHeight, \".scraped-example-list > .scraped-example pre\", \"offsetHeight\")\n assert-property: (\".scraped-example-list > .scraped-example pre\", {\n     \"scrollHeight\": |fullOffsetHeight|\n-})\n+}, NEAR)"}, {"sha": "5f977801cfd466acfa00ad3bb960a1d31b124b38", "filename": "tests/rustdoc/issue-108679-reexport-of-reexport.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Frustdoc%2Fissue-108679-reexport-of-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Frustdoc%2Fissue-108679-reexport-of-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-108679-reexport-of-reexport.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -0,0 +1,29 @@\n+// This test ensures that the `struct.B.html` only exists in `a`:\n+// since `a::B` is public (and inlined too), `self::a::B` doesn't\n+// need to be inlined as well.\n+\n+#![crate_name = \"foo\"]\n+\n+pub mod a {\n+    // @has 'foo/a/index.html'\n+    // Should only contain \"Structs\".\n+    // @count - '//*[@id=\"main-content\"]//*[@class=\"item-table\"]' 1\n+    // @has - '//*[@id=\"structs\"]' 'Structs'\n+    // @has - '//*[@id=\"main-content\"]//a[@href=\"struct.A.html\"]' 'A'\n+    // @has - '//*[@id=\"main-content\"]//a[@href=\"struct.B.html\"]' 'B'\n+    mod b {\n+        pub struct B;\n+    }\n+    pub use self::b::B;\n+    pub struct A;\n+}\n+\n+// @has 'foo/index.html'\n+// @!has - '//*[@id=\"structs\"]' 'Structs'\n+// @has - '//*[@id=\"reexports\"]' 'Re-exports'\n+// @has - '//*[@id=\"modules\"]' 'Modules'\n+// @has - '//*[@id=\"main-content\"]//*[@id=\"reexport.A\"]' 'pub use self::a::A;'\n+// @has - '//*[@id=\"main-content\"]//*[@id=\"reexport.B\"]' 'pub use self::a::B;'\n+// Should only contain \"Modules\" and \"Re-exports\".\n+// @count - '//*[@id=\"main-content\"]//*[@class=\"item-table\"]' 2\n+pub use self::a::{A, B};"}, {"sha": "12537482e0ff68993427cee940e62c608f609373", "filename": "tests/ui/parser/integer-literal-start-ident.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Finteger-literal-start-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Finteger-literal-start-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Finteger-literal-start-ident.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -0,0 +1,2 @@\n+fn 1main() {}\n+//~^ ERROR expected identifier, found `1main`"}, {"sha": "51c37a0d24c3cdd6de163f65b1149c1ba8c79af8", "filename": "tests/ui/parser/integer-literal-start-ident.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `1main`\n+  --> $DIR/integer-literal-start-ident.rs:1:4\n+   |\n+LL | fn 1main() {}\n+   |    ^^^^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n+\n+error: aborting due to previous error\n+"}, {"sha": "86988c8cd21dac9316beddc0df464280f1b5c66c", "filename": "tests/ui/parser/issues/issue-104088.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -4,12 +4,12 @@ fn test() {\n \n fn test_2() {\n     let 1x = 123;\n-    //~^ ERROR expected identifier, found number literal\n+    //~^ ERROR expected identifier, found `1x`\n }\n \n fn test_3() {\n     let 2x: i32 = 123;\n-    //~^ ERROR expected identifier, found number literal\n+    //~^ ERROR expected identifier, found `2x`\n }\n \n fn test_4() {\n@@ -20,7 +20,7 @@ fn test_4() {\n \n fn test_5() {\n     let 23name = 123;\n-    //~^ ERROR expected identifier, found number literal\n+    //~^ ERROR expected identifier, found `23name`\n }\n \n fn main() {}"}, {"sha": "6511a313149f44268a9374650f15c1c401d0e15e", "filename": "tests/ui/parser/issues/issue-104088.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -1,20 +1,26 @@\n-error: expected identifier, found number literal\n+error: expected identifier, found `1x`\n   --> $DIR/issue-104088.rs:6:9\n    |\n LL |     let 1x = 123;\n-   |         ^^ identifiers cannot start with a number\n+   |         ^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n \n-error: expected identifier, found number literal\n+error: expected identifier, found `2x`\n   --> $DIR/issue-104088.rs:11:9\n    |\n LL |     let 2x: i32 = 123;\n-   |         ^^ identifiers cannot start with a number\n+   |         ^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n \n-error: expected identifier, found number literal\n+error: expected identifier, found `23name`\n   --> $DIR/issue-104088.rs:22:9\n    |\n LL |     let 23name = 123;\n-   |         ^^^^^^ identifiers cannot start with a number\n+   |         ^^^^^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n \n error[E0308]: mismatched types\n   --> $DIR/issue-104088.rs:16:12"}, {"sha": "e56c8622ece0364d07ef3178f84bb6300960df87", "filename": "tests/ui/suggestions/correct-binder-for-arbitrary-bound-sugg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fsuggestions%2Fcorrect-binder-for-arbitrary-bound-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fsuggestions%2Fcorrect-binder-for-arbitrary-bound-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fcorrect-binder-for-arbitrary-bound-sugg.rs?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -0,0 +1,16 @@\n+trait Foo\n+where\n+    for<'a> &'a Self: Bar,\n+{\n+}\n+\n+impl Foo for () {}\n+\n+trait Bar {}\n+\n+impl Bar for &() {}\n+\n+fn foo<T: Foo>() {}\n+//~^ ERROR the trait bound `for<'a> &'a T: Bar` is not satisfied\n+\n+fn main() {}"}, {"sha": "2298e7f4e0c3c898fe18120360b467de5c95aa7c", "filename": "tests/ui/suggestions/correct-binder-for-arbitrary-bound-sugg.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fsuggestions%2Fcorrect-binder-for-arbitrary-bound-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/tests%2Fui%2Fsuggestions%2Fcorrect-binder-for-arbitrary-bound-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fcorrect-binder-for-arbitrary-bound-sugg.stderr?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: the trait bound `for<'a> &'a T: Bar` is not satisfied\n+  --> $DIR/correct-binder-for-arbitrary-bound-sugg.rs:13:11\n+   |\n+LL | fn foo<T: Foo>() {}\n+   |           ^^^ the trait `for<'a> Bar` is not implemented for `&'a T`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/correct-binder-for-arbitrary-bound-sugg.rs:3:23\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this trait\n+LL | where\n+LL |     for<'a> &'a Self: Bar,\n+   |                       ^^^ required by this bound in `Foo`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn foo<T: Foo>() where for<'a> &'a T: Bar {}\n+   |                  ++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f8752fdcacac16c06ab92a05dd6565e7bedf59ff", "filename": "triagebot.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/104f4300cfddbd956e32820ef202a732f06ec848/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/104f4300cfddbd956e32820ef202a732f06ec848/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=104f4300cfddbd956e32820ef202a732f06ec848", "patch": "@@ -451,6 +451,10 @@ cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@TaKO8Ki\"]\n message = \"`rustc_macros::diagnostics` was changed\"\n cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@TaKO8Ki\"]\n \n+[mentions.\"compiler/rustc_smir\"]\n+message = \"This PR changes Stable MIR\"\n+cc = [\"@oli-obk\", \"@celinval\"]\n+\n [mentions.\"compiler/rustc_target/src/spec\"]\n message = \"\"\"\n These commits modify **compiler targets**."}]}