{"sha": "8a8be062194604360bbb27ee11961b8a72973f44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOGJlMDYyMTk0NjA0MzYwYmJiMjdlZTExOTYxYjhhNzI5NzNmNDQ=", "commit": {"author": {"name": "bravomikekilo", "email": "bmk1221@126.com", "date": "2019-11-21T18:51:40Z"}, "committer": {"name": "bravomikekilo", "email": "bmk1221@126.com", "date": "2019-11-21T18:51:40Z"}, "message": "initial invert_if", "tree": {"sha": "368cb308aed82b6d0e226b4fe769f75d69f9d743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368cb308aed82b6d0e226b4fe769f75d69f9d743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a8be062194604360bbb27ee11961b8a72973f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8be062194604360bbb27ee11961b8a72973f44", "html_url": "https://github.com/rust-lang/rust/commit/8a8be062194604360bbb27ee11961b8a72973f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a8be062194604360bbb27ee11961b8a72973f44/comments", "author": {"login": "bravomikekilo", "id": 17548436, "node_id": "MDQ6VXNlcjE3NTQ4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/17548436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravomikekilo", "html_url": "https://github.com/bravomikekilo", "followers_url": "https://api.github.com/users/bravomikekilo/followers", "following_url": "https://api.github.com/users/bravomikekilo/following{/other_user}", "gists_url": "https://api.github.com/users/bravomikekilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravomikekilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravomikekilo/subscriptions", "organizations_url": "https://api.github.com/users/bravomikekilo/orgs", "repos_url": "https://api.github.com/users/bravomikekilo/repos", "events_url": "https://api.github.com/users/bravomikekilo/events{/privacy}", "received_events_url": "https://api.github.com/users/bravomikekilo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bravomikekilo", "id": 17548436, "node_id": "MDQ6VXNlcjE3NTQ4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/17548436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravomikekilo", "html_url": "https://github.com/bravomikekilo", "followers_url": "https://api.github.com/users/bravomikekilo/followers", "following_url": "https://api.github.com/users/bravomikekilo/following{/other_user}", "gists_url": "https://api.github.com/users/bravomikekilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravomikekilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravomikekilo/subscriptions", "organizations_url": "https://api.github.com/users/bravomikekilo/orgs", "repos_url": "https://api.github.com/users/bravomikekilo/repos", "events_url": "https://api.github.com/users/bravomikekilo/events{/privacy}", "received_events_url": "https://api.github.com/users/bravomikekilo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a9ed50da054d74721c6c51124696a20de5843b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a9ed50da054d74721c6c51124696a20de5843b", "html_url": "https://github.com/rust-lang/rust/commit/d0a9ed50da054d74721c6c51124696a20de5843b"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "0d59a0d241be6d59686e7a5ff7f1dc9e2c31e29b", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=8a8be062194604360bbb27ee11961b8a72973f44", "patch": "@@ -57,7 +57,7 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n }\n \n // This function tries to undo unary negation, or inequality\n-fn undo_negation(node: SyntaxNode) -> Option<String> {\n+pub(crate) fn undo_negation(node: SyntaxNode) -> Option<String> {\n     match ast::Expr::cast(node)? {\n         ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n             ast::BinOp::NegatedEqualityTest => {"}, {"sha": "9a53a3d18f58d7a50c1cce0fefcac3de72ca8e44", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=8a8be062194604360bbb27ee11961b8a72973f44", "patch": "@@ -0,0 +1,85 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::ast::{self, AstNode};\n+use ra_syntax::{TextRange, TextUnit};\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+use super::apply_demorgan::undo_negation;\n+\n+// Assist: invert_if\n+//\n+// Apply invert_if\n+// This transforms if expressions of the form `if !x {A} else {B}` into `if x {B} else {A}`\n+// This also works with `!=`. This assist can only be applied with the cursor\n+// on `if`.\n+//\n+// ```\n+// fn main() {\n+//     if<|> !y {A} else {B}\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     if y {B} else {A}\n+// }\n+// ```\n+\n+\n+pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let expr = ctx.find_node_at_offset::<ast::IfExpr>()?;\n+    let expr_range = expr.syntax().text_range();\n+    let if_range = TextRange::offset_len(expr_range.start(), TextUnit::from_usize(2));\n+    let cursor_in_range = ctx.frange.range.is_subrange(&if_range);\n+    if !cursor_in_range {\n+        return None;\n+    }\n+\n+    let cond = expr.condition()?.expr()?.syntax().clone();\n+    let then_node = expr.then_branch()?.syntax().clone();\n+\n+    if let ast::ElseBranch::Block(else_block) = expr.else_branch()? {\n+        let flip_cond = undo_negation(cond.clone())?;\n+        let cond_range = cond.text_range();\n+        let else_node = else_block.syntax();\n+        let else_range = else_node.text_range();\n+        let then_range = then_node.text_range();\n+        ctx.add_assist(AssistId(\"invert_if\"), \"invert if branches\", |edit| {\n+            edit.target(if_range);\n+            edit.replace(cond_range, flip_cond);\n+            edit.replace(else_range, then_node.text());\n+            edit.replace(then_range, else_node.text());\n+        })\n+\n+    } else {\n+        None\n+    }\n+\n+\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn invert_if_remove_inequality() {\n+        check_assist(invert_if, \"fn f() { i<|>f x != 3 {1} else {3 + 2} }\", \"fn f() { i<|>f x == 3 {3 + 2} else {1} }\")\n+    }\n+\n+    #[test]\n+    fn invert_if_remove_not() {\n+        check_assist(invert_if, \"fn f() { <|>if !cond {3 * 2} else {1} }\", \"fn f() { <|>if cond {1} else {3 * 2} }\")\n+    }\n+\n+    #[test]\n+    fn invert_if_doesnt_apply_with_cursor_not_on_if() {\n+        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond {3 * 2} else {1} }\")\n+    }\n+\n+    #[test]\n+    fn invert_if_doesnt_apply_without_negated() {\n+        check_assist_not_applicable(invert_if, \"fn f() { i<|>f cond {3 * 2} else {1} }\")\n+    }\n+}"}, {"sha": "1ccc016d32fe57c469ab2e34519923243f8632bc", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=8a8be062194604360bbb27ee11961b8a72973f44", "patch": "@@ -341,6 +341,23 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_invert_if() {\n+    check(\n+        \"invert_if\",\n+        r#####\"\n+fn main() {\n+    if<|> !y {A} else {B}\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    if y {B} else {A}\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_make_raw_string() {\n     check("}, {"sha": "a372bd8b9d54ea9695c47b00144c84369253e2af", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a8be062194604360bbb27ee11961b8a72973f44/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=8a8be062194604360bbb27ee11961b8a72973f44", "patch": "@@ -97,6 +97,7 @@ mod assists {\n     mod add_impl;\n     mod add_new;\n     mod apply_demorgan;\n+    mod invert_if;\n     mod flip_comma;\n     mod flip_binexpr;\n     mod flip_trait_bound;\n@@ -122,6 +123,7 @@ mod assists {\n             add_impl::add_impl,\n             add_new::add_new,\n             apply_demorgan::apply_demorgan,\n+            invert_if::invert_if,\n             change_visibility::change_visibility,\n             fill_match_arms::fill_match_arms,\n             merge_match_arms::merge_match_arms,"}, {"sha": "6e7811bd6c058db46a2a9e266c3ef199735f1ea3", "filename": "docs/user/assists.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a8be062194604360bbb27ee11961b8a72973f44/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a8be062194604360bbb27ee11961b8a72973f44/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=8a8be062194604360bbb27ee11961b8a72973f44", "patch": "@@ -329,6 +329,25 @@ fn main() {\n }\n ```\n \n+## `invert_if`\n+\n+Apply invert_if\n+This transforms if expressions of the form `if !x {A} else {B}` into `if x {B} else {A}`\n+This also works with `!=`. This assist can only be applied with the cursor\n+on `if`.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    if\u2503 !y {A} else {B}\n+}\n+\n+// AFTER\n+fn main() {\n+    if y {B} else {A}\n+}\n+```\n+\n ## `make_raw_string`\n \n Adds `r#` to a plain string literal."}]}