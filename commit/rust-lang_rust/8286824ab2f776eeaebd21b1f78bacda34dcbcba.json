{"sha": "8286824ab2f776eeaebd21b1f78bacda34dcbcba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODY4MjRhYjJmNzc2ZWVhZWJkMjFiMWY3OGJhY2RhMzRkY2JjYmE=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-04-26T18:19:23Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-07-25T07:28:51Z"}, "message": "Add inferred args to typeck", "tree": {"sha": "fe68ff90d14001ab4574914fb7b8d1222cbc3cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe68ff90d14001ab4574914fb7b8d1222cbc3cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8286824ab2f776eeaebd21b1f78bacda34dcbcba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8286824ab2f776eeaebd21b1f78bacda34dcbcba", "html_url": "https://github.com/rust-lang/rust/commit/8286824ab2f776eeaebd21b1f78bacda34dcbcba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8286824ab2f776eeaebd21b1f78bacda34dcbcba/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00faed9f0cb0129dc39d3f6ea769df35c68a4d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/00faed9f0cb0129dc39d3f6ea769df35c68a4d05", "html_url": "https://github.com/rust-lang/rust/commit/00faed9f0cb0129dc39d3f6ea769df35c68a4d05"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "ad4898d1ccbb5575676414ac158934ed12f7c201", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=8286824ab2f776eeaebd21b1f78bacda34dcbcba", "patch": "@@ -5,7 +5,7 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -295,6 +295,14 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n         walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if let Some(target) = ImplicitHasherType::new(self.cx, &inf.to_ty()) {\n+            self.found.push(target);\n+        }\n+\n+        walk_inf(self, inf);\n+    }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": "b438d680d2cbded0f1c99b8c2ed210da86147722", "filename": "clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=8286824ab2f776eeaebd21b1f78bacda34dcbcba", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -39,6 +39,11 @@ struct TypeComplexityVisitor {\n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+      self.score += 1;\n+      walk_inf(self, inf);\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level"}, {"sha": "c8cdf1a5d2c9c4eba44e96380a0dbef89042b145", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=8286824ab2f776eeaebd21b1f78bacda34dcbcba", "patch": "@@ -8,8 +8,9 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_ty, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n+    intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor},\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, PathSegment,\n+    QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -263,6 +264,11 @@ struct SkipTyCollector {\n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &hir::InferArg) {\n+      self.types_to_skip.push(inf.hir_id);\n+\n+      walk_inf(self, inf)\n+    }\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n \n@@ -274,6 +280,52 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     }\n }\n \n+<<<<<<< HEAD\n+=======\n+struct LintTyCollector<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    self_ty: Ty<'tcx>,\n+    types_to_lint: Vec<HirId>,\n+    types_to_skip: Vec<HirId>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n+        if_chain! {\n+            if let Some(ty) = self.cx.typeck_results().node_type_opt(hir_ty.hir_id);\n+            if should_lint_ty(hir_ty, ty, self.self_ty);\n+            then {\n+                self.types_to_lint.push(hir_ty.hir_id);\n+            } else {\n+                self.types_to_skip.push(hir_ty.hir_id);\n+            }\n+        }\n+\n+        walk_ty(self, hir_ty);\n+    }\n+\n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if_chain! {\n+            if let Some(ty) = self.cx.typeck_results().node_type_opt(inf.hir_id);\n+            if should_lint_ty(&inf.to_ty(), ty, self.self_ty);\n+            then {\n+                self.types_to_lint.push(inf.hir_id);\n+            } else {\n+                self.types_to_skip.push(inf.hir_id);\n+            }\n+        }\n+\n+        walk_inf(self, inf)\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+>>>>>>> Add inferred args to typeck\n fn span_lint(cx: &LateContext<'_>, span: Span) {\n     span_lint_and_sugg(\n         cx,"}, {"sha": "e636038b6e1a5a02eb08522235c433752b339cab", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=8286824ab2f776eeaebd21b1f78bacda34dcbcba", "patch": "@@ -288,6 +288,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (GenericArg::Const(l), GenericArg::Const(r)) => self.eq_body(l.value.body, r.value.body),\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n+            (GenericArg::Infer(l_inf), GenericArg::Infer(r_inf)) =>\n+              self.eq_ty(&l_inf.to_ty(), &r_inf.to_ty()),\n             _ => false,\n         }\n     }\n@@ -888,10 +890,6 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         self.hash_tykind(&ty.kind);\n     }\n \n-    pub fn hash_infer(&mut self) {\n-        \"_\".hash(&mut self.s);\n-    }\n-\n     pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n         match ty {\n             TyKind::Slice(ty) => {\n@@ -957,7 +955,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 GenericArg::Lifetime(l) => self.hash_lifetime(l),\n                 GenericArg::Type(ref ty) => self.hash_ty(ty),\n                 GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n-                GenericArg::Infer(ref _inf) => self.hash_infer(),\n+                GenericArg::Infer(ref inf) => self.hash_ty(&inf.to_ty()),\n             }\n         }\n     }"}, {"sha": "e914dc1c222f681549855fd75bbbd2b6ccbb3202", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8286824ab2f776eeaebd21b1f78bacda34dcbcba/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=8286824ab2f776eeaebd21b1f78bacda34dcbcba", "patch": "@@ -180,7 +180,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n // FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n-// this function can be removed once the `normalizie` method does not panic when normalization does\n+// this function can be removed once the `normalize` method does not panic when normalization does\n // not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`."}, {"sha": "54ab04f8c5d388e30f74824b15ae021513b7a646", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8286824ab2f776eeaebd21b1f78bacda34dcbcba/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8286824ab2f776eeaebd21b1f78bacda34dcbcba/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=8286824ab2f776eeaebd21b1f78bacda34dcbcba", "patch": "@@ -46,13 +46,13 @@ error: transmute from a pointer type (`*const i32`) to a reference type (`&issue\n   --> $DIR/transmute_ptr_to_ref.rs:32:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<u8>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:34:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<&u8>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:14"}]}