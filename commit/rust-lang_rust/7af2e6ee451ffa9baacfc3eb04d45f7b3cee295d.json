{"sha": "7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjJlNmVlNDUxZmZhOWJhYWNmYzNlYjA0ZDQ1ZjdiM2NlZTI5NWQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-15T10:14:49Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:57:39Z"}, "message": "debuginfo: Fixed unique pointers to data containing managed pointers.", "tree": {"sha": "499827a7a25880f289c0f21448d5274822e3476b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499827a7a25880f289c0f21448d5274822e3476b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "html_url": "https://github.com/rust-lang/rust/commit/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0108a47abcd1977670aa2ca0e5e88321cf789bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0108a47abcd1977670aa2ca0e5e88321cf789bf", "html_url": "https://github.com/rust-lang/rust/commit/e0108a47abcd1977670aa2ca0e5e88321cf789bf"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "1102428a53884fc5808c8c33877b61e38184b50a", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "patch": "@@ -1137,15 +1137,7 @@ fn get_or_create_type_metadata(cx: &mut CrateContext,\n             create_enum_metadata(cx, t, def_id, substs, span)\n         },\n         ty::ty_box(ref mt) => {\n-            let content_llvm_type = type_of::type_of(cx, mt.ty);\n-            let content_type_metadata = get_or_create_type_metadata(cx, mt.ty, span);\n-\n-            let box_metadata = create_boxed_type_metadata(cx,\n-                                                 content_llvm_type,\n-                                                 content_type_metadata,\n-                                                 span);\n-\n-            create_pointer_type_metadata(cx, t, box_metadata)\n+            create_pointer_to_box_metadata(cx, t, mt.ty)\n         },\n         ty::ty_evec(ref mt, ref vstore) => {\n             match *vstore {\n@@ -1162,6 +1154,9 @@ fn get_or_create_type_metadata(cx: &mut CrateContext,\n                 }\n             }\n         },\n+        ty::ty_uniq(ref mt) if ty::type_contents(cx.tcx, mt.ty).contains_managed() => {\n+            create_pointer_to_box_metadata(cx, t, mt.ty)\n+        },\n         ty::ty_uniq(ref mt)    |\n         ty::ty_ptr(ref mt)     |\n         ty::ty_rptr(_, ref mt) => {\n@@ -1193,6 +1188,24 @@ fn get_or_create_type_metadata(cx: &mut CrateContext,\n \n     dbg_cx(cx).created_types.insert(type_id, type_metadata);\n     return type_metadata;\n+\n+\n+    fn create_pointer_to_box_metadata(cx: &mut CrateContext,\n+                                      pointer_type: ty::t,\n+                                      type_in_box: ty::t)\n+                                   -> DIType {\n+        let content_llvm_type = type_of::type_of(cx, type_in_box);\n+        let content_type_metadata = get_or_create_type_metadata(cx,\n+                                                                type_in_box,\n+                                                                codemap::dummy_sp());\n+\n+        let box_metadata = create_boxed_type_metadata(cx,\n+                                                      content_llvm_type,\n+                                                      content_type_metadata,\n+                                                      codemap::dummy_sp());\n+\n+        create_pointer_type_metadata(cx, pointer_type, box_metadata)\n+    }\n }\n \n fn set_debug_location(cx: @mut CrateContext, scope: DIScope, line: uint, col: uint) {"}, {"sha": "411b6e0a7eecea2fe78c1cce4b912327ceec5b01", "filename": "src/test/debug-info/managed-box-within-unique.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d/src%2Ftest%2Fdebug-info%2Fmanaged-box-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d/src%2Ftest%2Fdebug-info%2Fmanaged-box-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-box-within-unique.rs?ref=7af2e6ee451ffa9baacfc3eb04d45f7b3cee295d", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print pretty off\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print *ordinary_unique\n+// check:$1 = {-1, -2}\n+\n+// debugger:print managed_within_unique.val->x\n+// check:$2 = -3\n+\n+// debugger:print managed_within_unique.val->y->val\n+// check:$3 = -4\n+\n+struct ContainsManaged\n+{\n+\tx: int,\n+\ty: @int\n+}\n+\n+fn main() {\n+\n+\tlet ordinary_unique = ~(-1, -2);\n+\n+\n+\t// This is a special case: Normally values allocated in the exchange heap are not boxed, unless,\n+\t// however, if they contain managed pointers.\n+\t// This test case verifies that both cases are handled correctly.\n+    let managed_within_unique = ~ContainsManaged { x: -3, y: @-4 };\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}]}