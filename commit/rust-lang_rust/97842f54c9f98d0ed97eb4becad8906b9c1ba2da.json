{"sha": "97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ODQyZjU0YzlmOThkMGVkOTdlYjRiZWNhZDg5MDZiOWMxYmEyZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T03:21:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T03:21:49Z"}, "message": "Auto merge of #31358 - japaric:print-targets, r=alexcrichton\n\nthat prints a list of all the triples supported by the `--target` flag\n\nr? @alexcrichton", "tree": {"sha": "ee4850ed5a5e0e8275b74058cb750c7100e58bf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee4850ed5a5e0e8275b74058cb750c7100e58bf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "html_url": "https://github.com/rust-lang/rust/commit/97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3548b8c273d9feb0291e97a928c4f48e01daf0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3548b8c273d9feb0291e97a928c4f48e01daf0f9", "html_url": "https://github.com/rust-lang/rust/commit/3548b8c273d9feb0291e97a928c4f48e01daf0f9"}, {"sha": "0bb4209b88fe3663ca07c7730ed23da3ed7a274b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb4209b88fe3663ca07c7730ed23da3ed7a274b", "html_url": "https://github.com/rust-lang/rust/commit/0bb4209b88fe3663ca07c7730ed23da3ed7a274b"}], "stats": {"total": 179, "additions": 101, "deletions": 78}, "files": [{"sha": "c96713a72851a3ff930e06eef53bdc70d49e2d5c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "patch": "@@ -164,6 +164,7 @@ pub enum PrintRequest {\n     Sysroot,\n     CrateName,\n     Cfg,\n+    TargetList,\n }\n \n pub enum Input {\n@@ -844,7 +845,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                  \"[asm|llvm-bc|llvm-ir|obj|link|dep-info]\"),\n         opt::multi(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\",\n-                 \"[crate-name|file-names|sysroot]\"),\n+                 \"[crate-name|file-names|sysroot|target-list]\"),\n         opt::flagmulti(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n@@ -1109,6 +1110,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             \"file-names\" => PrintRequest::FileNames,\n             \"sysroot\" => PrintRequest::Sysroot,\n             \"cfg\" => PrintRequest::Cfg,\n+            \"target-list\" => PrintRequest::TargetList,\n             req => {\n                 early_error(error_format, &format!(\"unknown print request `{}`\", req))\n             }"}, {"sha": "95b7c2e3f0748a304ffecd2423f567d70aa7303b", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 78, "deletions": 77, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "patch": "@@ -63,6 +63,82 @@ mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n \n+macro_rules! supported_targets {\n+    ( $(($triple:expr, $module:ident)),+ ) => (\n+        /// List of supported targets\n+        pub const TARGETS: &'static [&'static str] = &[$($triple),*];\n+\n+        // this would use a match if stringify! were allowed in pattern position\n+        fn load_specific(target: &str) -> Option<Target> {\n+            $(mod $module;)*\n+            let target = target.replace(\"-\", \"_\");\n+            if false { }\n+            $(\n+                else if target == stringify!($module) {\n+                    let t = $module::target();\n+                    debug!(\"Got builtin target: {:?}\", t);\n+                    return Some(t);\n+                }\n+            )*\n+\n+            None\n+        }\n+    )\n+}\n+\n+supported_targets! {\n+    (\"x86_64-unknown-linux-gnu\", x86_64_unknown_linux_gnu),\n+    (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n+    (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n+    (\"mipsel-unknown-linux-gnu\", mipsel_unknown_linux_gnu),\n+    (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),\n+    (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),\n+    (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n+    (\"arm-unknown-linux-gnueabi\", arm_unknown_linux_gnueabi),\n+    (\"arm-unknown-linux-gnueabihf\", arm_unknown_linux_gnueabihf),\n+    (\"armv7-unknown-linux-gnueabihf\", armv7_unknown_linux_gnueabihf),\n+    (\"aarch64-unknown-linux-gnu\", aarch64_unknown_linux_gnu),\n+    (\"x86_64-unknown-linux-musl\", x86_64_unknown_linux_musl),\n+    (\"i686-unknown-linux-musl\", i686_unknown_linux_musl),\n+    (\"mips-unknown-linux-musl\", mips_unknown_linux_musl),\n+    (\"mipsel-unknown-linux-musl\", mipsel_unknown_linux_musl),\n+\n+    (\"i686-linux-android\", i686_linux_android),\n+    (\"arm-linux-androideabi\", arm_linux_androideabi),\n+    (\"aarch64-linux-android\", aarch64_linux_android),\n+\n+    (\"i686-unknown-freebsd\", i686_unknown_freebsd),\n+    (\"x86_64-unknown-freebsd\", x86_64_unknown_freebsd),\n+\n+    (\"i686-unknown-dragonfly\", i686_unknown_dragonfly),\n+    (\"x86_64-unknown-dragonfly\", x86_64_unknown_dragonfly),\n+\n+    (\"x86_64-unknown-bitrig\", x86_64_unknown_bitrig),\n+    (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n+    (\"x86_64-unknown-netbsd\", x86_64_unknown_netbsd),\n+    (\"x86_64-rumprun-netbsd\", x86_64_rumprun_netbsd),\n+\n+    (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n+    (\"i686-apple-darwin\", i686_apple_darwin),\n+\n+    (\"i386-apple-ios\", i386_apple_ios),\n+    (\"x86_64-apple-ios\", x86_64_apple_ios),\n+    (\"aarch64-apple-ios\", aarch64_apple_ios),\n+    (\"armv7-apple-ios\", armv7_apple_ios),\n+    (\"armv7s-apple-ios\", armv7s_apple_ios),\n+\n+    (\"x86_64-sun-solaris\", x86_64_sun_solaris),\n+\n+    (\"x86_64-pc-windows-gnu\", x86_64_pc_windows_gnu),\n+    (\"i686-pc-windows-gnu\", i686_pc_windows_gnu),\n+\n+    (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),\n+    (\"i686-pc-windows-msvc\", i686_pc_windows_msvc),\n+\n+    (\"le32-unknown-nacl\", le32_unknown_nacl),\n+    (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten)\n+}\n+\n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n /// Every field here must be specified, and has no default value.\n@@ -393,85 +469,10 @@ impl Target {\n             Ok(Target::from_json(obj))\n         }\n \n-        // this would use a match if stringify! were allowed in pattern position\n-        macro_rules! load_specific {\n-            ( $($name:ident),+ ) => (\n-                {\n-                    $(mod $name;)*\n-                    let target = target.replace(\"-\", \"_\");\n-                    if false { }\n-                    $(\n-                        else if target == stringify!($name) {\n-                            let t = $name::target();\n-                            debug!(\"Got builtin target: {:?}\", t);\n-                            return Ok(t);\n-                        }\n-                    )*\n-                    else if target == \"x86_64-w64-mingw32\" {\n-                        let t = x86_64_pc_windows_gnu::target();\n-                        return Ok(t);\n-                    } else if target == \"i686-w64-mingw32\" {\n-                        let t = i686_pc_windows_gnu::target();\n-                        return Ok(t);\n-                    }\n-                }\n-            )\n+        if let Some(t) = load_specific(target) {\n+            return Ok(t)\n         }\n \n-        load_specific!(\n-            x86_64_unknown_linux_gnu,\n-            i686_unknown_linux_gnu,\n-            mips_unknown_linux_gnu,\n-            mipsel_unknown_linux_gnu,\n-            powerpc_unknown_linux_gnu,\n-            powerpc64_unknown_linux_gnu,\n-            powerpc64le_unknown_linux_gnu,\n-            arm_unknown_linux_gnueabi,\n-            arm_unknown_linux_gnueabihf,\n-            armv7_unknown_linux_gnueabihf,\n-            aarch64_unknown_linux_gnu,\n-            x86_64_unknown_linux_musl,\n-            i686_unknown_linux_musl,\n-            mips_unknown_linux_musl,\n-            mipsel_unknown_linux_musl,\n-\n-            i686_linux_android,\n-            arm_linux_androideabi,\n-            aarch64_linux_android,\n-\n-            i686_unknown_freebsd,\n-            x86_64_unknown_freebsd,\n-\n-            i686_unknown_dragonfly,\n-            x86_64_unknown_dragonfly,\n-\n-            x86_64_unknown_bitrig,\n-            x86_64_unknown_openbsd,\n-            x86_64_unknown_netbsd,\n-            x86_64_rumprun_netbsd,\n-\n-            x86_64_apple_darwin,\n-            i686_apple_darwin,\n-\n-            i386_apple_ios,\n-            x86_64_apple_ios,\n-            aarch64_apple_ios,\n-            armv7_apple_ios,\n-            armv7s_apple_ios,\n-\n-            x86_64_sun_solaris,\n-\n-            x86_64_pc_windows_gnu,\n-            i686_pc_windows_gnu,\n-\n-            x86_64_pc_windows_msvc,\n-            i686_pc_windows_msvc,\n-\n-            le32_unknown_nacl,\n-            asmjs_unknown_emscripten\n-        );\n-\n-\n         let path = Path::new(target);\n \n         if path.is_file() {"}, {"sha": "e77663091106b8545309ad32f84d7a2b8fcc0163", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "patch": "@@ -532,6 +532,11 @@ impl RustcDefaultCalls {\n         let attrs = input.map(|input| parse_crate_attrs(sess, input));\n         for req in &sess.opts.prints {\n             match *req {\n+                PrintRequest::TargetList => {\n+                    let mut targets = rustc_back::target::TARGETS.to_vec();\n+                    targets.sort();\n+                    println!(\"{}\", targets.join(\"\\n\"));\n+                },\n                 PrintRequest::Sysroot => println!(\"{}\", sess.sysroot().display()),\n                 PrintRequest::FileNames |\n                 PrintRequest::CrateName => {"}, {"sha": "144c5ba10cccf14c316a0cc2649b984461938ea8", "filename": "src/test/run-make/print-target-list/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Ftest%2Frun-make%2Fprint-target-list%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/97842f54c9f98d0ed97eb4becad8906b9c1ba2da/src%2Ftest%2Frun-make%2Fprint-target-list%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprint-target-list%2FMakefile?ref=97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "patch": "@@ -0,0 +1,15 @@\n+-include ../tools.mk\n+\n+# Checks that all the targets returned by `rustc --print target-list` are valid\n+# target specifications\n+# TODO remove the '*ios*' case when rust-lang/rust#29812 is fixed\n+all:\n+\tfor target in $(shell $(BARE_RUSTC) --print target-list); do \\\n+\t\tcase $$target in \\\n+\t\t\t*ios*) \\\n+\t\t\t\t;; \\\n+\t\t\t*) \\\n+\t\t\t\t$(BARE_RUSTC) --target $$target --print sysroot \\\n+\t\t\t\t;; \\\n+\t\t\tesac \\\n+\tdone"}]}