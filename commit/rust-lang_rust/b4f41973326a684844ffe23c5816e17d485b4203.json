{"sha": "b4f41973326a684844ffe23c5816e17d485b4203", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjQxOTczMzI2YTY4NDg0NGZmZTIzYzU4MTZlMTdkNDg1YjQyMDM=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-04-30T08:33:07Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:46Z"}, "message": "Build wildcard witnesses instead of panicking", "tree": {"sha": "b0537c97119fb24c189d98055b29477110c0bf36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0537c97119fb24c189d98055b29477110c0bf36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f41973326a684844ffe23c5816e17d485b4203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f41973326a684844ffe23c5816e17d485b4203", "html_url": "https://github.com/rust-lang/rust/commit/b4f41973326a684844ffe23c5816e17d485b4203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f41973326a684844ffe23c5816e17d485b4203/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "678d85ca7e4d7e631a450b8c050fe7696da0cac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/678d85ca7e4d7e631a450b8c050fe7696da0cac3", "html_url": "https://github.com/rust-lang/rust/commit/678d85ca7e4d7e631a450b8c050fe7696da0cac3"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "60323aea3b4807c1671c626da2c258e7777071ce", "filename": "crates/hir_ty/src/diagnostics/pattern/deconstruct_pat.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4f41973326a684844ffe23c5816e17d485b4203/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f41973326a684844ffe23c5816e17d485b4203/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs?ref=b4f41973326a684844ffe23c5816e17d485b4203", "patch": "@@ -496,6 +496,8 @@ impl Fields {\n     pub(super) fn apply(self, pcx: PatCtxt<'_>, ctor: &Constructor) -> Pat {\n         let subpatterns_and_indices = self.patterns_and_indices();\n         let mut subpatterns = subpatterns_and_indices.iter().map(|&(_, p)| p);\n+        // TODO witnesses are not yet used \n+        const TODO: Pat = Pat::Wild;\n \n         match ctor {\n             Single | Variant(_) => match pcx.ty.kind(&Interner) {\n@@ -509,7 +511,7 @@ impl Fields {\n                         let path = find_path(pcx.cx.db.upcast(), item, pcx.cx.module)\n                             .map(|mpath| Path::from_known_path(mpath, Vec::new()).into());\n                         match adt {\n-                            hir_def::AdtId::EnumId(_) => todo!(),\n+                            hir_def::AdtId::EnumId(id) => TODO,\n                             hir_def::AdtId::StructId(id) => {\n                                 let variant_data = &pcx.cx.db.struct_data(id).variant_data;\n                                 let args = subpatterns_and_indices\n@@ -522,7 +524,7 @@ impl Fields {\n                                     .collect();\n                                 Pat::Record { path, args, ellipsis: false }\n                             }\n-                            hir_def::AdtId::UnionId(_) => todo!(),\n+                            hir_def::AdtId::UnionId(_) => Pat::Wild,\n                         }\n                     } else {\n                         Pat::Tuple { args: subpatterns, ellipsis: None }\n@@ -540,12 +542,10 @@ impl Fields {\n                 }\n                 _ => Pat::Wild,\n             },\n-            Constructor::Slice(slice) => {\n-                todo!()\n-            }\n-            Str(_) => todo!(),\n-            FloatRange(..) => todo!(),\n-            Constructor::IntRange(_) => todo!(),\n+            Constructor::Slice(slice) => TODO,\n+            Str(_) => TODO,\n+            FloatRange(..) => TODO,\n+            Constructor::IntRange(_) => TODO,\n             NonExhaustive => Pat::Wild,\n             Wildcard => Pat::Wild,\n             Opaque => panic!(\"bug: we should not try to apply an opaque constructor\"),"}]}