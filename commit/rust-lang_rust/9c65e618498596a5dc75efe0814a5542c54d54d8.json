{"sha": "9c65e618498596a5dc75efe0814a5542c54d54d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNjVlNjE4NDk4NTk2YTVkYzc1ZWZlMDgxNGE1NTQyYzU0ZDU0ZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:47:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:47:10Z"}, "message": "introduce ids module", "tree": {"sha": "30d22a7d25c1baf9bada0da625dc60bc7572b079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d22a7d25c1baf9bada0da625dc60bc7572b079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c65e618498596a5dc75efe0814a5542c54d54d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c65e618498596a5dc75efe0814a5542c54d54d8", "html_url": "https://github.com/rust-lang/rust/commit/9c65e618498596a5dc75efe0814a5542c54d54d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c65e618498596a5dc75efe0814a5542c54d54d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fca1422ea34363b6f47da76914022bc60f7f66df", "url": "https://api.github.com/repos/rust-lang/rust/commits/fca1422ea34363b6f47da76914022bc60f7f66df", "html_url": "https://github.com/rust-lang/rust/commit/fca1422ea34363b6f47da76914022bc60f7f66df"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "881303861da6a9e90e18066977e3f2ad20b9bf7c", "filename": "crates/ra_hir/src/ids.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c65e618498596a5dc75efe0814a5542c54d54d8/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c65e618498596a5dc75efe0814a5542c54d54d8/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=9c65e618498596a5dc75efe0814a5542c54d54d8", "patch": "@@ -0,0 +1,32 @@\n+use crate::{FileId, MacroCallId};\n+\n+/// hir makes a heavy use of ids: integer (u32) handlers to various things. You\n+/// can think of id as a pointer (but without a lifetime) or a file descriptor\n+/// (but for hir objects).\n+///\n+/// This module defines a bunch of ids we are using. The most important ones are\n+/// probably `HirFileId` and `DefId`.\n+\n+/// Input to the analyzer is a set of file, where each file is indetified by\n+/// `FileId` and contains source code. However, another source of source code in\n+/// Rust are macros: each macro can be thought of as producing a \"temporary\n+/// file\". To assign id to such file, we use the id of a macro call that\n+/// produced the file. So, a `HirFileId` is either a `FileId` (source code\n+/// written by user), or a `MacroCallId` (source code produced by macro).\n+///\n+/// What is a `MacroCallId`? Simplifying, it's a `HirFileId` of a file containin\n+/// the call plus the offset of the macro call in the file. Note that this is a\n+/// recursive definition! Nethetheless, size_of of `HirFileId` is finite\n+/// (because everything bottoms out at the real `FileId`) and small\n+/// (`MacroCallId` uses location interner).\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum MFileId {\n+    File(FileId),\n+    Macro(MacroCallId),\n+}\n+\n+impl From<FileId> for MFileId {\n+    fn from(file_id: FileId) -> MFileId {\n+        MFileId::File(file_id)\n+    }\n+}"}, {"sha": "8d3a026d5e8a54dd6797789909191f4d58b68e94", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c65e618498596a5dc75efe0814a5542c54d54d8/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c65e618498596a5dc75efe0814a5542c54d54d8/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=9c65e618498596a5dc75efe0814a5542c54d54d8", "patch": "@@ -22,6 +22,7 @@ mod path;\n mod arena;\n pub mod source_binder;\n \n+mod ids;\n mod macros;\n mod name;\n mod krate;\n@@ -46,6 +47,7 @@ pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n     krate::Crate,\n+    ids::MFileId,\n     macros::{MacroDef, MacroInput, MacroExpansion, MacroCallId, MacroCallLoc},\n     module::{Module, ModuleId, Problem, nameres::{ItemMap, PerNs, Namespace}, ModuleScope, Resolution},\n     function::{Function, FnScopes},\n@@ -55,20 +57,6 @@ pub use self::{\n \n pub use self::function::FnSignatureInfo;\n \n-/// An `MFileId` is like a `FileId`, but it can also refer to code generated by\n-/// macros.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum MFileId {\n-    File(FileId),\n-    Macro(MacroCallId),\n-}\n-\n-impl From<FileId> for MFileId {\n-    fn from(file_id: FileId) -> MFileId {\n-        MFileId::File(file_id)\n-    }\n-}\n-\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}]}