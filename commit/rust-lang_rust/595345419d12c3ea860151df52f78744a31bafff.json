{"sha": "595345419d12c3ea860151df52f78744a31bafff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTM0NTQxOWQxMmMzZWE4NjAxNTFkZjUyZjc4NzQ0YTMxYmFmZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-10T10:28:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-10T10:28:53Z"}, "message": "Auto merge of #54011 - eddyb:anchored-in-the-future, r=petrochenkov\n\nrustc_resolve: inject `uniform_paths` canaries regardless of the feature-gate, on Rust 2018.\n\nThis PR is an attempt at future-proofing \"anchored paths\" by emitting the same ambiguity errors that `#![feature(uniform_paths)]` would, with slightly changed phrasing (see added UI tests).\n\nAlso, on top of #54005, this PR allows this as well:\n```rust\nuse crate_name;\nuse crate_name::foo;\n```\nIn that any ambiguity between an extern crate and an import *of that same crate* is ignored.\n\nr? @petrochenkov cc @aturon @Centril @joshtriplett", "tree": {"sha": "60b6af371b197266ec08e1a37e9a3a0ec65d1114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60b6af371b197266ec08e1a37e9a3a0ec65d1114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/595345419d12c3ea860151df52f78744a31bafff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/595345419d12c3ea860151df52f78744a31bafff", "html_url": "https://github.com/rust-lang/rust/commit/595345419d12c3ea860151df52f78744a31bafff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/595345419d12c3ea860151df52f78744a31bafff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d45da2747c0b0943f48854e653ebe0d1ba60c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d45da2747c0b0943f48854e653ebe0d1ba60c9", "html_url": "https://github.com/rust-lang/rust/commit/b8d45da2747c0b0943f48854e653ebe0d1ba60c9"}, {"sha": "d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5da94a3b1e635eeb9520b87f6414ff3c24c8602", "html_url": "https://github.com/rust-lang/rust/commit/d5da94a3b1e635eeb9520b87f6414ff3c24c8602"}], "stats": {"total": 355, "additions": 307, "deletions": 48}, "files": [{"sha": "1fa9979edb8d3128e5dec763e5b1aef467ae3ae2", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -194,27 +194,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // ergonomically unacceptable.\n         let emit_uniform_paths_canary =\n             !uniform_paths_canary_emitted &&\n-            uniform_paths &&\n+            self.session.rust_2018() &&\n             starts_with_non_keyword;\n         if emit_uniform_paths_canary {\n             let source = prefix_start.unwrap();\n \n-            // HACK(eddyb) For `use x::{self, ...};`, use the ID of the\n-            // `self` nested import for the canary. This allows the\n-            // ambiguity reporting scope to ignore false positives\n-            // in the same way it does for `use x;` (by comparing IDs).\n-            let mut canary_id = id;\n-            if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n-                for &(ref use_tree, id) in items {\n-                    if let ast::UseTreeKind::Simple(..) = use_tree.kind {\n-                        if use_tree.ident().name == keywords::SelfValue.name() {\n-                            canary_id = id;\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-\n             // Helper closure to emit a canary with the given base path.\n             let emit = |this: &mut Self, base: Option<Ident>| {\n                 let subclass = SingleImport {\n@@ -234,7 +218,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     base.into_iter().collect(),\n                     subclass.clone(),\n                     source.span,\n-                    canary_id,\n+                    id,\n                     root_use_tree.span,\n                     root_id,\n                     ty::Visibility::Invisible,"}, {"sha": "68709f6891ab7df213c33d914a8e522f4086b46a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 55, "deletions": 29, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -620,9 +620,9 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         }\n \n         #[derive(Default)]\n-        struct UniformPathsCanaryResult {\n-            module_scope: Option<Span>,\n-            block_scopes: Vec<Span>,\n+        struct UniformPathsCanaryResult<'a> {\n+            module_scope: Option<&'a NameBinding<'a>>,\n+            block_scopes: Vec<&'a NameBinding<'a>>,\n         }\n         // Collect all tripped `uniform_paths` canaries separately.\n         let mut uniform_paths_canaries: BTreeMap<\n@@ -663,20 +663,12 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n                 self.per_ns(|_, ns| {\n                     if let Some(result) = result[ns].get().ok() {\n-                        if let NameBindingKind::Import { directive, .. } = result.kind {\n-                            // Skip canaries that resolve to the import itself.\n-                            // These come from `use crate_name;`, which isn't really\n-                            // ambiguous, as the import can't actually shadow itself.\n-                            if directive.id == import.id {\n-                                return;\n-                            }\n-                        }\n                         if has_explicit_self {\n                             // There should only be one `self::x` (module-scoped) canary.\n-                            assert_eq!(canary_results[ns].module_scope, None);\n-                            canary_results[ns].module_scope = Some(result.span);\n+                            assert!(canary_results[ns].module_scope.is_none());\n+                            canary_results[ns].module_scope = Some(result);\n                         } else {\n-                            canary_results[ns].block_scopes.push(result.span);\n+                            canary_results[ns].block_scopes.push(result);\n                         }\n                     }\n                 });\n@@ -716,18 +708,39 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             }\n         }\n \n+        let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _), (name, results)) in uniform_paths_canaries {\n             self.per_ns(|this, ns| {\n-                let results = &results[ns];\n+                let external_crate = if ns == TypeNS && this.extern_prelude.contains(&name) {\n+                    let crate_id =\n+                        this.crate_loader.process_path_extern(name, span);\n+                    Some(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                } else {\n+                    None\n+                };\n+                let result_filter = |result: &&NameBinding| {\n+                    // Ignore canaries that resolve to an import of the same crate.\n+                    // That is, we allow `use crate_name; use crate_name::foo;`.\n+                    if let Some(def_id) = external_crate {\n+                        if let Some(module) = result.module() {\n+                            if module.normal_ancestor_id == def_id {\n+                                return false;\n+                            }\n+                        }\n+                    }\n \n-                let has_external_crate =\n-                    ns == TypeNS && this.extern_prelude.contains(&name);\n+                    true\n+                };\n+                let module_scope = results[ns].module_scope.filter(result_filter);\n+                let block_scopes = || {\n+                    results[ns].block_scopes.iter().cloned().filter(result_filter)\n+                };\n \n                 // An ambiguity requires more than one possible resolution.\n                 let possible_resultions =\n-                    (has_external_crate as usize) +\n-                    (results.module_scope.is_some() as usize) +\n-                    (!results.block_scopes.is_empty() as usize);\n+                    (external_crate.is_some() as usize) +\n+                    (module_scope.is_some() as usize) +\n+                    (block_scopes().next().is_some() as usize);\n                 if possible_resultions <= 1 {\n                     return;\n                 }\n@@ -737,25 +750,34 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 let msg = format!(\"`{}` import is ambiguous\", name);\n                 let mut err = this.session.struct_span_err(span, &msg);\n                 let mut suggestion_choices = String::new();\n-                if has_external_crate {\n+                if external_crate.is_some() {\n                     write!(suggestion_choices, \"`::{}`\", name);\n                     err.span_label(span,\n                         format!(\"can refer to external crate `::{}`\", name));\n                 }\n-                if let Some(span) = results.module_scope {\n+                if let Some(result) = module_scope {\n                     if !suggestion_choices.is_empty() {\n                         suggestion_choices.push_str(\" or \");\n                     }\n                     write!(suggestion_choices, \"`self::{}`\", name);\n-                    err.span_label(span,\n-                        format!(\"can refer to `self::{}`\", name));\n+                    if uniform_paths_feature {\n+                        err.span_label(result.span,\n+                            format!(\"can refer to `self::{}`\", name));\n+                    } else {\n+                        err.span_label(result.span,\n+                            format!(\"may refer to `self::{}` in the future\", name));\n+                    }\n                 }\n-                for &span in &results.block_scopes {\n-                    err.span_label(span,\n+                for result in block_scopes() {\n+                    err.span_label(result.span,\n                         format!(\"shadowed by block-scoped `{}`\", name));\n                 }\n                 err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n-                err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+                if uniform_paths_feature {\n+                    err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+                } else {\n+                    err.note(\"in the future, `#![feature(uniform_paths)]` may become the default\");\n+                }\n                 err.emit();\n             });\n         }\n@@ -968,11 +990,15 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             _ => unreachable!(),\n         };\n \n+        // Do not record uses from canaries, to avoid interfering with other\n+        // diagnostics or suggestions that rely on some items not being used.\n+        let record_used = !directive.is_uniform_paths_canary;\n+\n         let mut all_ns_err = true;\n         self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Ok(binding) = result[ns].get() {\n                 all_ns_err = false;\n-                if this.record_use(ident, ns, binding) {\n+                if record_used && this.record_use(ident, ns, binding) {\n                     if let ModuleOrUniformRoot::Module(module) = module {\n                         this.resolution(module, ident, ns).borrow_mut().binding =\n                             Some(this.dummy_binding);\n@@ -984,7 +1010,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         if all_ns_err {\n             let mut all_ns_failed = true;\n             self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n-                match this.resolve_ident_in_module(module, ident, ns, true, span) {\n+                match this.resolve_ident_in_module(module, ident, ns, record_used, span) {\n                     Ok(_) => all_ns_failed = false,\n                     _ => {}\n                 }"}, {"sha": "590e83b07819a24e4f33994fc1b9f72d0f14c55a", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros-nested.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// This test is similar to `ambiguity-macros.rs`, but nested in a module.\n+\n+mod foo {\n+    pub use std::io;\n+    //~^ ERROR `std` import is ambiguous\n+\n+    macro_rules! m {\n+        () => {\n+            mod std {\n+                pub struct io;\n+            }\n+        }\n+    }\n+    m!();\n+}\n+\n+fn main() {}"}, {"sha": "948043cff7614ee3cf0b5187d24e108d444caf0d", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros-nested.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros-nested.stderr?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity-macros-nested.rs:16:13\n+   |\n+LL |       pub use std::io;\n+   |               ^^^ can refer to external crate `::std`\n+...\n+LL | /             mod std {\n+LL | |                 pub struct io;\n+LL | |             }\n+   | |_____________- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "861efba14f80c9ccf098c011b3e80312e6f7299d", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// This test is similar to `ambiguity.rs`, but with macros defining local items.\n+\n+use std::io;\n+//~^ ERROR `std` import is ambiguous\n+\n+macro_rules! m {\n+    () => {\n+        mod std {\n+            pub struct io;\n+        }\n+    }\n+}\n+m!();\n+\n+fn main() {}"}, {"sha": "40cceea2440b95330876db764e4f0482b0bcdf12", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-macros.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-macros.stderr?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity-macros.rs:15:5\n+   |\n+LL |   use std::io;\n+   |       ^^^ can refer to external crate `::std`\n+...\n+LL | /         mod std {\n+LL | |             pub struct io;\n+LL | |         }\n+   | |_________- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "a69eb101917fa50bd4b711fbd939e00339b782a3", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-nested.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// This test is similar to `ambiguity.rs`, but nested in a module.\n+\n+mod foo {\n+    pub use std::io;\n+    //~^ ERROR `std` import is ambiguous\n+\n+    mod std {\n+        pub struct io;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7538d3d2d917a2a5988c9154328c99521cfcee37", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity-nested.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity-nested.stderr?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity-nested.rs:16:13\n+   |\n+LL |       pub use std::io;\n+   |               ^^^ can refer to external crate `::std`\n+...\n+LL | /     mod std {\n+LL | |         pub struct io;\n+LL | |     }\n+   | |_____- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "500e9f6c63ff87901671b965ddd82d69af5fe6a0", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+use std::io;\n+//~^ ERROR `std` import is ambiguous\n+\n+mod std {\n+    pub struct io;\n+}\n+\n+fn main() {}"}, {"sha": "7b64b8f02464af6025435535d8de29daa2b6012e", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/ambiguity.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fambiguity.stderr?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,16 @@\n+error: `std` import is ambiguous\n+  --> $DIR/ambiguity.rs:13:5\n+   |\n+LL |   use std::io;\n+   |       ^^^ can refer to external crate `::std`\n+...\n+LL | / mod std {\n+LL | |     pub struct io;\n+LL | | }\n+   | |_- may refer to `self::std` in the future\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca488fec5162de71299105f3e913850c2599e880", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/block-scoped-shadow.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+struct std;\n+\n+fn main() {\n+    fn std() {}\n+    enum std {}\n+    use std as foo;\n+    //~^ ERROR `std` import is ambiguous\n+    //~| ERROR `std` import is ambiguous\n+}"}, {"sha": "27e0e883691272dab890cab8fc4b1b643a014bca", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/block-scoped-shadow.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fblock-scoped-shadow.stderr?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,31 @@\n+error: `std` import is ambiguous\n+  --> $DIR/block-scoped-shadow.rs:18:9\n+   |\n+LL | struct std;\n+   | ----------- may refer to `self::std` in the future\n+...\n+LL |     enum std {}\n+   |     ----------- shadowed by block-scoped `std`\n+LL |     use std as foo;\n+   |         ^^^ can refer to external crate `::std`\n+   |\n+   = help: write `::std` or `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: `std` import is ambiguous\n+  --> $DIR/block-scoped-shadow.rs:18:9\n+   |\n+LL | struct std;\n+   | ----------- may refer to `self::std` in the future\n+...\n+LL |     fn std() {}\n+   |     ----------- shadowed by block-scoped `std`\n+LL |     enum std {}\n+LL |     use std as foo;\n+   |         ^^^\n+   |\n+   = help: write `self::std` explicitly instead\n+   = note: in the future, `#![feature(uniform_paths)]` may become the default\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "05048cfd451050e39382c4bf39b22df15476c412", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/redundant.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fredundant.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// edition:2018\n+\n+use std;\n+use std::io;\n+\n+mod foo {\n+    pub use std as my_std;\n+}\n+\n+mod bar {\n+    pub use std::{self};\n+}\n+\n+fn main() {\n+    io::stdout();\n+    self::std::io::stdout();\n+    foo::my_std::io::stdout();\n+    bar::std::io::stdout();\n+}"}, {"sha": "745ac18e059b9c895a5261e52cdd0917fc18bbed", "filename": "src/test/ui/rust-2018/uniform-paths/redundant.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595345419d12c3ea860151df52f78744a31bafff/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // edition:2018\n \n #![feature(uniform_paths)]\n \n use std;\n+use std::io;\n \n mod foo {\n     pub use std as my_std;\n@@ -23,6 +25,7 @@ mod bar {\n }\n \n fn main() {\n+    io::stdout();\n     self::std::io::stdout();\n     foo::my_std::io::stdout();\n     bar::std::io::stdout();", "previous_filename": "src/test/run-pass/redundant.rs"}, {"sha": "fa922de1e5e1f02b576b7a5aa6ded16935693ec5", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=595345419d12c3ea860151df52f78744a31bafff", "patch": "@@ -1 +1 @@\n-Subproject commit 5b5cd9d45719414196e254ec17baa598acc8cd25\n+Subproject commit fa922de1e5e1f02b576b7a5aa6ded16935693ec5"}]}