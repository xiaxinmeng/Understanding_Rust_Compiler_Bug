{"sha": "6f5b809775fb1f8dbf27edded8e955d64377749c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWI4MDk3NzVmYjFmOGRiZjI3ZWRkZWQ4ZTk1NWQ2NDM3Nzc0OWM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-02T06:35:32Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:11Z"}, "message": "path2: Add more tests to posix impl", "tree": {"sha": "d210f7da10e8acf6605580f95a675f82d63df593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d210f7da10e8acf6605580f95a675f82d63df593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5b809775fb1f8dbf27edded8e955d64377749c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5b809775fb1f8dbf27edded8e955d64377749c", "html_url": "https://github.com/rust-lang/rust/commit/6f5b809775fb1f8dbf27edded8e955d64377749c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5b809775fb1f8dbf27edded8e955d64377749c/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d29142219d92f886124057e9ecfdb51ffca19f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d29142219d92f886124057e9ecfdb51ffca19f2", "html_url": "https://github.com/rust-lang/rust/commit/6d29142219d92f886124057e9ecfdb51ffca19f2"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "d66f51894b53d4c6394beb831e43d7909cc158fb", "filename": "src/libstd/path2/posix.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f5b809775fb1f8dbf27edded8e955d64377749c/src%2Flibstd%2Fpath2%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5b809775fb1f8dbf27edded8e955d64377749c/src%2Flibstd%2Fpath2%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fposix.rs?ref=6f5b809775fb1f8dbf27edded8e955d64377749c", "patch": "@@ -97,13 +97,13 @@ impl GenericPathUnsafe for Path {\n             Some(0) if self.repr.len() == 1 && self.repr[0] == sep => {\n                 self.repr = Path::normalize(dirname);\n             }\n+            Some(idx) if self.repr.slice_from(idx+1) == bytes!(\"..\") => {\n+                self.repr = Path::normalize(dirname);\n+            }\n             Some(idx) if dirname.is_empty() => {\n                 let v = Path::normalize(self.repr.slice_from(idx+1));\n                 self.repr = v;\n             }\n-            Some(idx) if self.repr.slice_from(idx+1) == bytes!(\"..\") => {\n-                self.repr = Path::normalize(dirname);\n-            }\n             Some(idx) => {\n                 let mut v = vec::with_capacity(dirname.len() + self.repr.len() - idx);\n                 v.push_all(dirname);\n@@ -444,7 +444,9 @@ mod tests {\n         t!(s: Path::from_str(\"\"), \".\");\n         t!(s: Path::from_str(\"/\"), \"/\");\n         t!(s: Path::from_str(\"hi\"), \"hi\");\n+        t!(s: Path::from_str(\"hi/\"), \"hi\");\n         t!(s: Path::from_str(\"/lib\"), \"/lib\");\n+        t!(s: Path::from_str(\"/lib/\"), \"/lib\");\n         t!(s: Path::from_str(\"hi/there\"), \"hi/there\");\n         t!(s: Path::from_str(\"hi/there.txt\"), \"hi/there.txt\");\n \n@@ -800,6 +802,8 @@ mod tests {\n         t!(s: Path::from_str(\"/foo\").with_dirname_str(\"bar\"), \"bar/foo\");\n         t!(s: Path::from_str(\"..\").with_dirname_str(\"foo\"), \"foo\");\n         t!(s: Path::from_str(\"../..\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(s: Path::from_str(\"..\").with_dirname_str(\"\"), \".\");\n+        t!(s: Path::from_str(\"../..\").with_dirname_str(\"\"), \".\");\n         t!(s: Path::from_str(\"foo\").with_dirname_str(\"..\"), \"../foo\");\n         t!(s: Path::from_str(\"foo\").with_dirname_str(\"../..\"), \"../../foo\");\n \n@@ -813,6 +817,8 @@ mod tests {\n         t!(s: Path::from_str(\"/\").with_filename_str(\"foo\"), \"/foo\");\n         t!(s: Path::from_str(\"/a\").with_filename_str(\"foo\"), \"/foo\");\n         t!(s: Path::from_str(\"foo\").with_filename_str(\"bar\"), \"bar\");\n+        t!(s: Path::from_str(\"/\").with_filename_str(\"foo/\"), \"/foo\");\n+        t!(s: Path::from_str(\"/a\").with_filename_str(\"foo/\"), \"/foo\");\n         t!(s: Path::from_str(\"a/b/c\").with_filename_str(\"\"), \"a/b\");\n         t!(s: Path::from_str(\"a/b/c\").with_filename_str(\".\"), \"a/b\");\n         t!(s: Path::from_str(\"a/b/c\").with_filename_str(\"..\"), \"a\");\n@@ -822,6 +828,8 @@ mod tests {\n         t!(s: Path::from_str(\"a/b/c\").with_filename_str(\"/d\"), \"a/b/d\");\n         t!(s: Path::from_str(\"..\").with_filename_str(\"foo\"), \"../foo\");\n         t!(s: Path::from_str(\"../..\").with_filename_str(\"foo\"), \"../../foo\");\n+        t!(s: Path::from_str(\"..\").with_filename_str(\"\"), \"..\");\n+        t!(s: Path::from_str(\"../..\").with_filename_str(\"\"), \"../..\");\n \n         t!(v: Path::new(b!(\"hi/there\", 0x80, \".txt\")).with_filestem(b!(0xff)),\n               b!(\"hi/\", 0xff, \".txt\"));"}]}