{"sha": "547873aa54e787cbb7c266fb6e7337ea4e8a9331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0Nzg3M2FhNTRlNzg3Y2JiN2MyNjZmYjZlNzMzN2VhNGU4YTkzMzE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-15T01:49:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-24T15:34:31Z"}, "message": "Account for missing keyword in fn/struct definition", "tree": {"sha": "5bcfc4954c7f0a54618959af49ff39ddd516c754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bcfc4954c7f0a54618959af49ff39ddd516c754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547873aa54e787cbb7c266fb6e7337ea4e8a9331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547873aa54e787cbb7c266fb6e7337ea4e8a9331", "html_url": "https://github.com/rust-lang/rust/commit/547873aa54e787cbb7c266fb6e7337ea4e8a9331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547873aa54e787cbb7c266fb6e7337ea4e8a9331/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1737d69c3b6632d56cd66144c9316ad643fb7507", "url": "https://api.github.com/repos/rust-lang/rust/commits/1737d69c3b6632d56cd66144c9316ad643fb7507", "html_url": "https://github.com/rust-lang/rust/commit/1737d69c3b6632d56cd66144c9316ad643fb7507"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "fbc12872501c05abf9206d20e1cf2ce3138d0af1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=547873aa54e787cbb7c266fb6e7337ea4e8a9331", "patch": "@@ -6236,7 +6236,58 @@ impl<'a> Parser<'a> {\n             return Ok(Some(macro_def));\n         }\n \n-        self.parse_macro_use_or_failure(attrs,macros_allowed,attributes_allowed,lo,visibility)\n+        // Verify wether we have encountered a struct or method definition where the user forgot to\n+        // add the `struct` or `fn` keyword after writing `pub`: `pub S {}`\n+        if visibility == Visibility::Public && self.check_ident() {\n+            // Keep the current state of the parser to rollback after an unsuccessful attempt to\n+            // parse an entire method or struct body.\n+            let parser_snapshot = self.clone();\n+\n+            // Space between `pub` keyword and the identifier\n+            //\n+            //     pub   S {}\n+            //        ^^^ `sp` points here\n+            let sp = self.prev_span.between(self.span);\n+            if self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) {\n+                // possible public struct definition where `struct` was forgotten\n+                let ident = self.parse_ident().unwrap();\n+                match self.parse_record_struct_body() {\n+                    Err(mut err) => {\n+                        // couldn't parse a struct body, continue parsing as if it were a macro\n+                        err.cancel();\n+                        mem::replace(self, parser_snapshot);\n+                    }\n+                    Ok(_) => {\n+                        let msg = format!(\"add `struct` here to parse `{}` as a public struct\",\n+                                          ident);\n+                        let mut err = self.diagnostic()\n+                            .struct_span_err(sp, \"missing `struct` for struct definition\");\n+                        err.span_suggestion_short(sp, &msg, \" struct \".into());\n+                        return Err(err);\n+                    }\n+                }\n+            } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n+                // possible public method definition where `fn` was forgotten\n+                let ident = self.parse_ident().unwrap();\n+                match self.parse_fn_decl(false)\n+                    .and_then(|_| self.parse_where_clause())\n+                    .and_then(|_| self.parse_inner_attrs_and_block()) {\n+                    Err(mut err) => {\n+                        // couldn't parse method arguments or body, continue parsing\n+                        err.cancel();\n+                        mem::replace(self, parser_snapshot);\n+                    }\n+                    Ok(_) => {\n+                        let msg = format!(\"add `fn` here to parse `{}` as a public method\", ident);\n+                        let mut err = self.diagnostic()\n+                            .struct_span_err(sp, \"missing `fn` for method definition\");\n+                        err.span_suggestion_short(sp, &msg, \" fn \".into());\n+                        return Err(err);\n+                    }\n+                }\n+            }\n+        }\n+        self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)\n     }\n \n     /// Parse a foreign item."}, {"sha": "043cf9328c920903cdfc0bfca072e7f3003c0317", "filename": "src/test/ui/suggestions/pub-ident-fn.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs?ref=547873aa54e787cbb7c266fb6e7337ea4e8a9331", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub   foo(s: usize) -> bool { true }\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "19d3db157c239b3a6eb56c743e85adf427308d45", "filename": "src/test/ui/suggestions/pub-ident-fn.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr?ref=547873aa54e787cbb7c266fb6e7337ea4e8a9331", "patch": "@@ -0,0 +1,13 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn.rs:11:4\n+   |\n+11 | pub   foo(s: usize) -> bool { true }\n+   |    ^^^\n+   |\n+help: add `fn` here to parse `foo` as a public method\n+   |\n+11 | pub fn foo(s: usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3e14a36dbab632433faae6df554c46cdbe88c158", "filename": "src/test/ui/suggestions/pub-ident-struct.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.rs?ref=547873aa54e787cbb7c266fb6e7337ea4e8a9331", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub S {\n+}\n+fn main() {}"}, {"sha": "bae2f6a4f809d7ea69ca733a99ded25255dfcb6c", "filename": "src/test/ui/suggestions/pub-ident-struct.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547873aa54e787cbb7c266fb6e7337ea4e8a9331/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr?ref=547873aa54e787cbb7c266fb6e7337ea4e8a9331", "patch": "@@ -0,0 +1,13 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/pub-ident-struct.rs:11:4\n+   |\n+11 | pub S {\n+   |    ^\n+   |\n+help: add `struct` here to parse `S` as a public struct\n+   |\n+11 | pub struct S {\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}