{"sha": "9ea3c4d53bc41984b96013a6085d92d6b19e9952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTNjNGQ1M2JjNDE5ODRiOTYwMTNhNjA4NWQ5MmQ2YjE5ZTk5NTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-27T21:22:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-27T21:22:35Z"}, "message": "Merge #10059\n\n10059: feat: Enable diagnostics in `const` and `static` items r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "ae21fff0e7261b6d8c04bfbe923fca47c140f358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae21fff0e7261b6d8c04bfbe923fca47c140f358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea3c4d53bc41984b96013a6085d92d6b19e9952", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhKVebCRBK7hj4Ov3rIwAAIWAIADftqb02Yim+2V6VuqTqfX0y\ndrBiT8huuuCKdKvDhRar+Otaa37ds3AU5g2E/xFnTzuoSldLV0F+SZ2l4NSELlZn\nhKNmOkST9GBOj9PimfD+6kqHYtK/39vECNjp35mWVq7D1CYRtBgF4V8tI35/A72f\niXlOiFbMHz9Qvo/OWFSimpasyXTRFTydL6o0996QFsrsGPaZcXQw3MX5n1xf6yni\n1Zse6UO0p9NAIEYhhT+FkL7V9m7GMwym4jPxUitiwVrd239JHnBUlMuHg+mTFXXS\n56eH5Xv3r2eSz+QtN4/vBOCi3U3ddKiVTS8oe1Yp5jneORitDvdqsiE6QIxrtmc=\n=dggq\n-----END PGP SIGNATURE-----\n", "payload": "tree ae21fff0e7261b6d8c04bfbe923fca47c140f358\nparent 99e67f899815309a9be41a6664f046e7a4b41170\nparent 3047ae8d0fb187edbea1b9b492c795da3b7e6257\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630099355 +0000\ncommitter GitHub <noreply@github.com> 1630099355 +0000\n\nMerge #10059\n\n10059: feat: Enable diagnostics in `const` and `static` items r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea3c4d53bc41984b96013a6085d92d6b19e9952", "html_url": "https://github.com/rust-lang/rust/commit/9ea3c4d53bc41984b96013a6085d92d6b19e9952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea3c4d53bc41984b96013a6085d92d6b19e9952/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e67f899815309a9be41a6664f046e7a4b41170", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e67f899815309a9be41a6664f046e7a4b41170", "html_url": "https://github.com/rust-lang/rust/commit/99e67f899815309a9be41a6664f046e7a4b41170"}, {"sha": "3047ae8d0fb187edbea1b9b492c795da3b7e6257", "url": "https://api.github.com/repos/rust-lang/rust/commits/3047ae8d0fb187edbea1b9b492c795da3b7e6257", "html_url": "https://github.com/rust-lang/rust/commit/3047ae8d0fb187edbea1b9b492c795da3b7e6257"}], "stats": {"total": 204, "additions": 129, "deletions": 75}, "files": [{"sha": "a968b59bfea24a41da3ecc3fb69b0f7f7c408499", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 116, "deletions": 75, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3c4d53bc41984b96013a6085d92d6b19e9952/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3c4d53bc41984b96013a6085d92d6b19e9952/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9ea3c4d53bc41984b96013a6085d92d6b19e9952", "patch": "@@ -347,12 +347,36 @@ impl ModuleDef {\n         };\n \n         let mut acc = Vec::new();\n-        for diag in hir_ty::diagnostics::validate_module_item(db, module.id.krate(), id) {\n-            acc.push(diag.into())\n+\n+        match self.as_def_with_body() {\n+            Some(def) => {\n+                def.diagnostics(db, &mut acc);\n+            }\n+            None => {\n+                for diag in hir_ty::diagnostics::validate_module_item(db, module.id.krate(), id) {\n+                    acc.push(diag.into())\n+                }\n+            }\n         }\n+\n         acc\n     }\n \n+    pub fn as_def_with_body(self) -> Option<DefWithBody> {\n+        match self {\n+            ModuleDef::Function(it) => Some(it.into()),\n+            ModuleDef::Const(it) => Some(it.into()),\n+            ModuleDef::Static(it) => Some(it.into()),\n+\n+            ModuleDef::Module(_)\n+            | ModuleDef::Adt(_)\n+            | ModuleDef::Variant(_)\n+            | ModuleDef::Trait(_)\n+            | ModuleDef::TypeAlias(_)\n+            | ModuleDef::BuiltinType(_) => None,\n+        }\n+    }\n+\n     pub fn attrs(&self, db: &dyn HirDatabase) -> Option<AttrsWithOwner> {\n         Some(match self {\n             ModuleDef::Module(it) => it.attrs(db),\n@@ -624,7 +648,6 @@ impl Module {\n         }\n         for decl in self.declarations(db) {\n             match decl {\n-                ModuleDef::Function(f) => f.diagnostics(db, acc),\n                 ModuleDef::Module(m) => {\n                     // Only add diagnostics from inline modules\n                     if def_map[m.id.local_id].origin.is_inline() {\n@@ -637,9 +660,13 @@ impl Module {\n \n         for impl_def in self.impl_defs(db) {\n             for item in impl_def.items(db) {\n-                if let AssocItem::Function(f) = item {\n-                    f.diagnostics(db, acc);\n-                }\n+                let def: DefWithBody = match item {\n+                    AssocItem::Function(it) => it.into(),\n+                    AssocItem::Const(it) => it.into(),\n+                    AssocItem::TypeAlias(_) => continue,\n+                };\n+\n+                def.diagnostics(db, acc);\n             }\n         }\n     }\n@@ -999,76 +1026,20 @@ impl DefWithBody {\n             DefWithBody::Const(c) => c.name(db),\n         }\n     }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct Function {\n-    pub(crate) id: FunctionId,\n-}\n-\n-impl Function {\n-    pub fn module(self, db: &dyn HirDatabase) -> Module {\n-        self.id.lookup(db.upcast()).module(db.upcast()).into()\n-    }\n-\n-    pub fn name(self, db: &dyn HirDatabase) -> Name {\n-        db.function_data(self.id).name.clone()\n-    }\n \n-    /// Get this function's return type\n-    pub fn ret_type(self, db: &dyn HirDatabase) -> Type {\n-        let resolver = self.id.resolver(db.upcast());\n-        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n-        let ret_type = &db.function_data(self.id).ret_type;\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let ty = ctx.lower_ty(ret_type);\n-        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n-    }\n-\n-    pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n-        if !db.function_data(self.id).has_self_param() {\n-            return None;\n-        }\n-        Some(SelfParam { func: self.id })\n-    }\n-\n-    pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n-        let resolver = self.id.resolver(db.upcast());\n-        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let environment = db.trait_environment(self.id.into());\n-        db.function_data(self.id)\n-            .params\n-            .iter()\n-            .enumerate()\n-            .map(|(idx, type_ref)| {\n-                let ty = Type { krate, env: environment.clone(), ty: ctx.lower_ty(type_ref) };\n-                Param { func: self, ty, idx }\n-            })\n-            .collect()\n-    }\n-\n-    pub fn method_params(self, db: &dyn HirDatabase) -> Option<Vec<Param>> {\n-        if self.self_param(db).is_none() {\n-            return None;\n+    /// Returns the type this def's body has to evaluate to.\n+    pub fn body_type(self, db: &dyn HirDatabase) -> Type {\n+        match self {\n+            DefWithBody::Function(it) => it.ret_type(db),\n+            DefWithBody::Static(it) => it.ty(db),\n+            DefWithBody::Const(it) => it.ty(db),\n         }\n-        let mut res = self.assoc_fn_params(db);\n-        res.remove(0);\n-        Some(res)\n-    }\n-\n-    pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).is_unsafe()\n-    }\n-\n-    pub fn is_async(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).is_async()\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>) {\n         let krate = self.module(db).id.krate();\n \n-        let source_map = db.body_with_source_map(self.id.into()).1;\n+        let source_map = db.body_with_source_map(self.into()).1;\n         for diag in source_map.diagnostics() {\n             match diag {\n                 BodyDiagnostic::InactiveCode { node, cfg, opts } => acc.push(\n@@ -1096,8 +1067,8 @@ impl Function {\n             }\n         }\n \n-        let infer = db.infer(self.id.into());\n-        let source_map = Lazy::new(|| db.body_with_source_map(self.id.into()).1);\n+        let infer = db.infer(self.into());\n+        let source_map = Lazy::new(|| db.body_with_source_map(self.into()).1);\n         for d in &infer.diagnostics {\n             match d {\n                 hir_ty::InferenceDiagnostic::NoSuchField { expr } => {\n@@ -1113,7 +1084,7 @@ impl Function {\n             }\n         }\n \n-        for expr in hir_ty::diagnostics::missing_unsafe(db, self.id.into()) {\n+        for expr in hir_ty::diagnostics::missing_unsafe(db, self.into()) {\n             match source_map.expr_syntax(expr) {\n                 Ok(expr) => acc.push(MissingUnsafe { expr }.into()),\n                 Err(SyntheticSyntax) => {\n@@ -1123,7 +1094,7 @@ impl Function {\n             }\n         }\n \n-        for diagnostic in BodyValidationDiagnostic::collect(db, self.id.into()) {\n+        for diagnostic in BodyValidationDiagnostic::collect(db, self.into()) {\n             match diagnostic {\n                 BodyValidationDiagnostic::RecordMissingFields {\n                     record,\n@@ -1220,7 +1191,7 @@ impl Function {\n                             MissingOkOrSomeInTailExpr {\n                                 expr,\n                                 required,\n-                                expected: self.ret_type(db),\n+                                expected: self.body_type(db),\n                             }\n                             .into(),\n                         ),\n@@ -1260,10 +1231,80 @@ impl Function {\n             }\n         }\n \n-        for diag in hir_ty::diagnostics::validate_module_item(db, krate, self.id.into()) {\n+        let def: ModuleDef = match self {\n+            DefWithBody::Function(it) => it.into(),\n+            DefWithBody::Static(it) => it.into(),\n+            DefWithBody::Const(it) => it.into(),\n+        };\n+        for diag in hir_ty::diagnostics::validate_module_item(db, krate, def.into()) {\n             acc.push(diag.into())\n         }\n     }\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct Function {\n+    pub(crate) id: FunctionId,\n+}\n+\n+impl Function {\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        self.id.lookup(db.upcast()).module(db.upcast()).into()\n+    }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        db.function_data(self.id).name.clone()\n+    }\n+\n+    /// Get this function's return type\n+    pub fn ret_type(self, db: &dyn HirDatabase) -> Type {\n+        let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n+        let ret_type = &db.function_data(self.id).ret_type;\n+        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n+        let ty = ctx.lower_ty(ret_type);\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n+    }\n+\n+    pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n+        if !db.function_data(self.id).has_self_param() {\n+            return None;\n+        }\n+        Some(SelfParam { func: self.id })\n+    }\n+\n+    pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n+        let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n+        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n+        let environment = db.trait_environment(self.id.into());\n+        db.function_data(self.id)\n+            .params\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, type_ref)| {\n+                let ty = Type { krate, env: environment.clone(), ty: ctx.lower_ty(type_ref) };\n+                Param { func: self, ty, idx }\n+            })\n+            .collect()\n+    }\n+\n+    pub fn method_params(self, db: &dyn HirDatabase) -> Option<Vec<Param>> {\n+        if self.self_param(db).is_none() {\n+            return None;\n+        }\n+        let mut res = self.assoc_fn_params(db);\n+        res.remove(0);\n+        Some(res)\n+    }\n+\n+    pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).is_unsafe()\n+    }\n+\n+    pub fn is_async(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).is_async()\n+    }\n \n     /// Whether this function declaration has a definition.\n     ///"}, {"sha": "6d8e74b6fd5c457b85d7370bed94979ed94e4c4c", "filename": "crates/ide_diagnostics/src/handlers/missing_ok_or_some_in_tail_expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3c4d53bc41984b96013a6085d92d6b19e9952/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3c4d53bc41984b96013a6085d92d6b19e9952/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs?ref=9ea3c4d53bc41984b96013a6085d92d6b19e9952", "patch": "@@ -175,6 +175,19 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n         );\n     }\n \n+    #[test]\n+    fn test_in_const_and_static() {\n+        check_fix(\n+            r#\"\n+//- minicore: option, result\n+static A: Option<()> = {($0)};\n+            \"#,\n+            r#\"\n+static A: Option<()> = {Some(())};\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         check_diagnostics("}]}