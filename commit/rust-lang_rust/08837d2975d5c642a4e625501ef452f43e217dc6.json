{"sha": "08837d2975d5c642a4e625501ef452f43e217dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ODM3ZDI5NzVkNWM2NDJhNGU2MjU1MDFlZjQ1MmY0M2UyMTdkYzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-05T00:44:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T14:11:35Z"}, "message": "pass revision and incr_comp directory to auxbuild\n\nThis is needed for incremental compilation harness to support\ncross-crate testing. Also support cfg for typechecking prettyprint", "tree": {"sha": "499e6a2177228a01eefb17cf0d9c0f45b566f255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499e6a2177228a01eefb17cf0d9c0f45b566f255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08837d2975d5c642a4e625501ef452f43e217dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08837d2975d5c642a4e625501ef452f43e217dc6", "html_url": "https://github.com/rust-lang/rust/commit/08837d2975d5c642a4e625501ef452f43e217dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08837d2975d5c642a4e625501ef452f43e217dc6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3a8c24cd667da6c1e8ba751ba9896c7f9ad293", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3a8c24cd667da6c1e8ba751ba9896c7f9ad293", "html_url": "https://github.com/rust-lang/rust/commit/8f3a8c24cd667da6c1e8ba751ba9896c7f9ad293"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "7593033ffe3991f9c9791aedae294056a9f335bf", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08837d2975d5c642a4e625501ef452f43e217dc6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08837d2975d5c642a4e625501ef452f43e217dc6/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=08837d2975d5c642a4e625501ef452f43e217dc6", "patch": "@@ -162,6 +162,11 @@ pub struct TestProps {\n     pub forbid_output: Vec<String>,\n     // Revisions to test for incremental compilation.\n     pub revisions: Vec<String>,\n+    // Directory (if any) to use for incremental compilation.  This is\n+    // not set by end-users; rather it is set by the incremental\n+    // testing harness and used when generating compilation\n+    // arguments. (In particular, it propagates to the aux-builds.)\n+    pub incremental_dir: Option<PathBuf>,\n }\n \n impl TestProps {\n@@ -197,9 +202,20 @@ impl TestProps {\n             pretty_mode: format!(\"normal\"),\n             pretty_compare_only: pretty_compare_only,\n             forbid_output: forbid_output,\n+            incremental_dir: None,\n         }\n     }\n \n+    pub fn from_aux_file(&self, testfile: &Path, cfg: Option<&str>) -> Self {\n+        let mut props = TestProps::new();\n+\n+        // copy over select properties to the aux build:\n+        props.incremental_dir = self.incremental_dir.clone();\n+        props.load_from(testfile, cfg);\n+\n+        props\n+    }\n+\n     pub fn from_file(testfile: &Path) -> Self {\n         let mut props = TestProps::new();\n         props.load_from(testfile, None);"}, {"sha": "f89ff6b38492048443a7443b82f170bc2935e4ab", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/08837d2975d5c642a4e625501ef452f43e217dc6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08837d2975d5c642a4e625501ef452f43e217dc6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=08837d2975d5c642a4e625501ef452f43e217dc6", "patch": "@@ -63,10 +63,6 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n         for revision in &base_props.revisions {\n             let mut revision_props = base_props.clone();\n             revision_props.load_from(&testpaths.file, Some(&revision));\n-            revision_props.compile_flags.extend(vec![\n-                format!(\"--cfg\"),\n-                format!(\"{}\", revision),\n-            ]);\n             let rev_cx = TestCx {\n                 config: &config,\n                 props: &revision_props,\n@@ -383,6 +379,12 @@ actual:\\n\\\n                             self.config.build_base.to_str().unwrap().to_owned(),\n                             \"-L\".to_owned(),\n                             aux_dir.to_str().unwrap().to_owned());\n+        if let Some(revision) = self.revision {\n+            args.extend(vec![\n+                format!(\"--cfg\"),\n+                format!(\"{}\", revision),\n+            ]);\n+        }\n         args.extend(self.split_maybe_args(&self.config.target_rustcflags));\n         args.extend(self.props.compile_flags.iter().cloned());\n         // FIXME (#9639): This needs to handle non-utf8 paths\n@@ -1102,7 +1104,7 @@ actual:\\n\\\n         if self.props.build_aux_docs {\n             for rel_ab in &self.props.aux_builds {\n                 let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n-                let aux_props = TestProps::from_file(&aux_testpaths.file);\n+                let aux_props = self.props.from_aux_file(&aux_testpaths.file, self.revision);\n                 let aux_cx = TestCx {\n                     config: self.config,\n                     props: &aux_props,\n@@ -1186,7 +1188,7 @@ actual:\\n\\\n \n         for rel_ab in &self.props.aux_builds {\n             let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n-            let aux_props = TestProps::from_file(&aux_testpaths.file);\n+            let aux_props = self.props.from_aux_file(&aux_testpaths.file, self.revision);\n             let mut crate_type = if aux_props.no_prefer_dynamic {\n                 Vec::new()\n             } else {\n@@ -1291,6 +1293,21 @@ actual:\\n\\\n                             self.config.build_base.to_str().unwrap().to_owned(),\n                             format!(\"--target={}\", target));\n \n+        if let Some(revision) = self.revision {\n+            args.extend(vec![\n+                format!(\"--cfg\"),\n+                format!(\"{}\", revision),\n+            ]);\n+        }\n+\n+        if let Some(ref incremental_dir) = self.props.incremental_dir {\n+            args.extend(vec![\n+                format!(\"-Z\"),\n+                format!(\"incremental={}\", incremental_dir.display()),\n+            ]);\n+        }\n+\n+\n         match self.config.mode {\n             CompileFail |\n             ParseFail |\n@@ -1980,10 +1997,7 @@ actual:\\n\\\n \n         // Add an extra flag pointing at the incremental directory.\n         let mut revision_props = self.props.clone();\n-        revision_props.compile_flags.extend(vec![\n-            format!(\"-Z\"),\n-            format!(\"incremental={}\", incremental_dir.display()),\n-        ]);\n+        revision_props.incremental_dir = Some(incremental_dir);\n \n         let revision_cx = TestCx {\n             config: self.config,"}]}