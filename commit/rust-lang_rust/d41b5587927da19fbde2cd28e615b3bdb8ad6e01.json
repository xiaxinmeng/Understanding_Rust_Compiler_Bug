{"sha": "d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MWI1NTg3OTI3ZGExOWZiZGUyY2QyOGU2MTViM2JkYjhhZDZlMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T23:26:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T23:26:03Z"}, "message": "auto merge of #9089 : anasazi/rust/fix-acceptor-iterator, r=cmr\n\nThe iterator over incoming connections has no natural end, so it should always return Some(_).\r\nCurrently, if an incoming connection fails, the iterator returns None.\r\nTrying to accept another connection afterwards enters the realm of undefined behavior (due to the iterator protocol being silent on the issue).\r\n\r\nThis PR changes wraps the underlying accept call in Some, so the iterator never finishes.", "tree": {"sha": "3fb0af4ec5de8c02760d1148a77c67ccac68b16a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb0af4ec5de8c02760d1148a77c67ccac68b16a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "html_url": "https://github.com/rust-lang/rust/commit/d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d41b5587927da19fbde2cd28e615b3bdb8ad6e01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed695d470bf1568b896f2944815f4723905ab66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed695d470bf1568b896f2944815f4723905ab66e", "html_url": "https://github.com/rust-lang/rust/commit/ed695d470bf1568b896f2944815f4723905ab66e"}, {"sha": "8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "html_url": "https://github.com/rust-lang/rust/commit/8f0721bcb86c0aa236991118d65639cc4f2f8ea4"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "37c53de09e615b3fd31038ddaa59b1ecf104f87a", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d41b5587927da19fbde2cd28e615b3bdb8ad6e01/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41b5587927da19fbde2cd28e615b3bdb8ad6e01/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "patch": "@@ -493,21 +493,26 @@ pub trait Acceptor<T> {\n     /// then `accept` returns `None`.\n     fn accept(&mut self) -> Option<T>;\n \n-    /// Create an iterator over incoming connections\n+    /// Create an iterator over incoming connection attempts\n     fn incoming<'r>(&'r mut self) -> IncomingIterator<'r, Self> {\n         IncomingIterator { inc: self }\n     }\n }\n \n /// An infinite iterator over incoming connection attempts.\n /// Calling `next` will block the task until a connection is attempted.\n+///\n+/// Since connection attempts can continue forever, this iterator always returns Some.\n+/// The Some contains another Option representing whether the connection attempt was succesful.\n+/// A successful connection will be wrapped in Some.\n+/// A failed connection is represented as a None and raises a condition.\n struct IncomingIterator<'self, A> {\n     priv inc: &'self mut A,\n }\n \n-impl<'self, T, A: Acceptor<T>> Iterator<T> for IncomingIterator<'self, A> {\n-    fn next(&mut self) -> Option<T> {\n-        self.inc.accept()\n+impl<'self, T, A: Acceptor<T>> Iterator<Option<T>> for IncomingIterator<'self, A> {\n+    fn next(&mut self) -> Option<Option<T>> {\n+        Some(self.inc.accept())\n     }\n }\n "}]}