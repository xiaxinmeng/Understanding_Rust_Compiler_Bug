{"sha": "21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjFiZDY5YjBmY2Q0ODYxYWFkOThlZDJmZWYzN2E3MWNiNzA4NTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-03T15:49:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:52:35Z"}, "message": "Prevent cyclic locks of `alloc_map`", "tree": {"sha": "e3799223b3fa01381123a9d0e7e82662eb3903a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3799223b3fa01381123a9d0e7e82662eb3903a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "html_url": "https://github.com/rust-lang/rust/commit/21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b1bd69b0fcd4861aad98ed2fef37a71cb70850/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6f3868b3e1bdb5193cc240664f046bc18ca6a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6f3868b3e1bdb5193cc240664f046bc18ca6a4", "html_url": "https://github.com/rust-lang/rust/commit/4b6f3868b3e1bdb5193cc240664f046bc18ca6a4"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "ff33dccdfeafa1268786848281f0f4f500c19639", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b1bd69b0fcd4861aad98ed2fef37a71cb70850/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b1bd69b0fcd4861aad98ed2fef37a71cb70850/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=21b1bd69b0fcd4861aad98ed2fef37a71cb70850", "patch": "@@ -453,8 +453,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         if let Ok(alloc) = self.get(id) {\n             return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n         }\n+        // can't do this in the match argument, we may get cycle errors since the lock would get\n+        // dropped after the match.\n+        let alloc = self.tcx.alloc_map.lock().get(id);\n         // Could also be a fn ptr or extern static\n-        match self.tcx.alloc_map.lock().get(id) {\n+        match alloc {\n             Some(GlobalAlloc::Function(..)) => Ok((Size::ZERO, Align::from_bytes(1).unwrap())),\n             // `self.get` would also work, but can cause cycles if a static refers to itself\n             Some(GlobalAlloc::Static(did)) => {"}]}