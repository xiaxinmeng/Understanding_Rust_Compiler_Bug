{"sha": "4967f1ae57120b02639f3d1493e8f0c9e168b0dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjdmMWFlNTcxMjBiMDI2MzlmM2QxNDkzZThmMGM5ZTE2OGIwZGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-17T15:10:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T11:55:29Z"}, "message": "document the diverges flag etc", "tree": {"sha": "bbc7e823e65659e58922189a79d3ba33b1f4def7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbc7e823e65659e58922189a79d3ba33b1f4def7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4967f1ae57120b02639f3d1493e8f0c9e168b0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4967f1ae57120b02639f3d1493e8f0c9e168b0dc", "html_url": "https://github.com/rust-lang/rust/commit/4967f1ae57120b02639f3d1493e8f0c9e168b0dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4967f1ae57120b02639f3d1493e8f0c9e168b0dc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11", "html_url": "https://github.com/rust-lang/rust/commit/a6e6be5f88bc773f50016cc1cf1baaa7b3e6cd11"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "e186daf9f408eb40b3b0760a7c34769fbf59b02e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4967f1ae57120b02639f3d1493e8f0c9e168b0dc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4967f1ae57120b02639f3d1493e8f0c9e168b0dc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4967f1ae57120b02639f3d1493e8f0c9e168b0dc", "patch": "@@ -360,11 +360,12 @@ impl UnsafetyState {\n     }\n }\n \n-/// Whether a node ever exits normally or not.\n-/// Tracked semi-automatically (through type variables\n-/// marked as diverging), with some manual adjustments\n-/// for control-flow primitives (approximating a CFG).\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+/// Tracks whether executing a node may exit normally (versus\n+/// return/break/panic, which \"diverge\", leaving dead code in their\n+/// wake). Tracked semi-automatically (through type variables marked\n+/// as diverging), with some manual adjustments for control-flow\n+/// primitives (approximating a CFG).\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n enum Diverges {\n     /// Potentially unknown, some cases converge,\n     /// others require a CFG to determine them.\n@@ -452,7 +453,37 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     ps: RefCell<UnsafetyState>,\n \n-    /// Whether the last checked node can ever exit.\n+    /// Whether the last checked node generates a divergence (e.g.,\n+    /// `return` will set this to Always). In general, this is\n+    /// typically set to *Maybe* on the way **down** the tree, and\n+    /// then values are propagated **up** the tree. In a block, we\n+    /// combine the results from statements and propagate the\n+    /// end-result up.\n+    ///\n+    /// We use this flag for two purposes:\n+    ///\n+    /// - To warn about unreachable code: if, after processing a\n+    ///   sub-expression but before we have applied the effects of the\n+    ///   current node, we see that the flag is set to `Always`, we\n+    ///   can issue a warning. This corresponds to something like\n+    ///   `foo(return)`; we warn on the `foo()` expression. (We then\n+    ///   update the flag to `WarnedAlways` to suppress duplicate\n+    ///   reports.) Similarly, if we traverse to a fresh statement (or\n+    ///   tail expression) from a `Always` setting, we will isssue a\n+    ///   warning. This corresponds to something like `{return;\n+    ///   foo();}` or `{return; 22}`, where we would warn on the\n+    ///   `foo()` or `22`.\n+    ///\n+    /// - To permit assignment into a local variable or other lvalue\n+    ///   (including the \"return slot\") of type `!`.  This is allowed\n+    ///   if **either** the type of value being assigned is `!`, which\n+    ///   means the current code is dead, **or** the expression's\n+    ///   divering flag is true, which means that a divering value was\n+    ///   wrapped (e.g., `let x: ! = foo(return)`).\n+    ///\n+    /// To repeat the last point: an expression represents dead-code\n+    /// if, after checking it, **either** its type is `!` OR the\n+    /// diverges flag is set to something other than `Maybe`.\n     diverges: Cell<Diverges>,\n \n     /// Whether any child nodes have any type errors."}]}