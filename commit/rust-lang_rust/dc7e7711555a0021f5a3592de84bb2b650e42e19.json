{"sha": "dc7e7711555a0021f5a3592de84bb2b650e42e19", "node_id": "C_kwDOAAsO6NoAKGRjN2U3NzExNTU1YTAwMjFmNWEzNTkyZGU4NGJiMmI2NTBlNDJlMTk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-05T05:56:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-07T05:50:03Z"}, "message": "expand: Rename some `AstFragment`s to match AST structures", "tree": {"sha": "4ec179630af79339a885b5d919d4c2284f9d0d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec179630af79339a885b5d919d4c2284f9d0d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7e7711555a0021f5a3592de84bb2b650e42e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7e7711555a0021f5a3592de84bb2b650e42e19", "html_url": "https://github.com/rust-lang/rust/commit/dc7e7711555a0021f5a3592de84bb2b650e42e19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7e7711555a0021f5a3592de84bb2b650e42e19/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "08c30f5b396a1f03dfbcaf0da1a3c4ad3d7b0f86", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dc7e7711555a0021f5a3592de84bb2b650e42e19/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7e7711555a0021f5a3592de84bb2b650e42e19/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=dc7e7711555a0021f5a3592de84bb2b650e42e19", "patch": "@@ -178,10 +178,10 @@ ast_fragments! {\n     Arms(SmallVec<[ast::Arm; 1]>) {\n         \"match arm\"; many fn flat_map_arm; fn visit_arm(); fn make_arms;\n     }\n-    Fields(SmallVec<[ast::ExprField; 1]>) {\n+    ExprFields(SmallVec<[ast::ExprField; 1]>) {\n         \"field expression\"; many fn flat_map_expr_field; fn visit_expr_field(); fn make_expr_fields;\n     }\n-    FieldPats(SmallVec<[ast::PatField; 1]>) {\n+    PatFields(SmallVec<[ast::PatField; 1]>) {\n         \"field pattern\";\n         many fn flat_map_pat_field;\n         fn visit_pat_field();\n@@ -196,7 +196,7 @@ ast_fragments! {\n     Params(SmallVec<[ast::Param; 1]>) {\n         \"function parameter\"; many fn flat_map_param; fn visit_param(); fn make_params;\n     }\n-    StructFields(SmallVec<[ast::FieldDef; 1]>) {\n+    FieldDefs(SmallVec<[ast::FieldDef; 1]>) {\n         \"field\";\n         many fn flat_map_field_def;\n         fn visit_field_def();\n@@ -231,11 +231,11 @@ impl AstFragmentKind {\n             | AstFragmentKind::ForeignItems\n             | AstFragmentKind::Crate => SupportsMacroExpansion::Yes { supports_inner_attrs: true },\n             AstFragmentKind::Arms\n-            | AstFragmentKind::Fields\n-            | AstFragmentKind::FieldPats\n+            | AstFragmentKind::ExprFields\n+            | AstFragmentKind::PatFields\n             | AstFragmentKind::GenericParams\n             | AstFragmentKind::Params\n-            | AstFragmentKind::StructFields\n+            | AstFragmentKind::FieldDefs\n             | AstFragmentKind::Variants => SupportsMacroExpansion::No,\n         }\n     }\n@@ -249,20 +249,20 @@ impl AstFragmentKind {\n             AstFragmentKind::Arms => {\n                 AstFragment::Arms(items.map(Annotatable::expect_arm).collect())\n             }\n-            AstFragmentKind::Fields => {\n-                AstFragment::Fields(items.map(Annotatable::expect_expr_field).collect())\n+            AstFragmentKind::ExprFields => {\n+                AstFragment::ExprFields(items.map(Annotatable::expect_expr_field).collect())\n             }\n-            AstFragmentKind::FieldPats => {\n-                AstFragment::FieldPats(items.map(Annotatable::expect_pat_field).collect())\n+            AstFragmentKind::PatFields => {\n+                AstFragment::PatFields(items.map(Annotatable::expect_pat_field).collect())\n             }\n             AstFragmentKind::GenericParams => {\n                 AstFragment::GenericParams(items.map(Annotatable::expect_generic_param).collect())\n             }\n             AstFragmentKind::Params => {\n                 AstFragment::Params(items.map(Annotatable::expect_param).collect())\n             }\n-            AstFragmentKind::StructFields => {\n-                AstFragment::StructFields(items.map(Annotatable::expect_field_def).collect())\n+            AstFragmentKind::FieldDefs => {\n+                AstFragment::FieldDefs(items.map(Annotatable::expect_field_def).collect())\n             }\n             AstFragmentKind::Variants => {\n                 AstFragment::Variants(items.map(Annotatable::expect_variant).collect())\n@@ -915,11 +915,11 @@ pub fn parse_ast_fragment<'a>(\n         )?),\n         AstFragmentKind::Crate => AstFragment::Crate(this.parse_crate_mod()?),\n         AstFragmentKind::Arms\n-        | AstFragmentKind::Fields\n-        | AstFragmentKind::FieldPats\n+        | AstFragmentKind::ExprFields\n+        | AstFragmentKind::PatFields\n         | AstFragmentKind::GenericParams\n         | AstFragmentKind::Params\n-        | AstFragmentKind::StructFields\n+        | AstFragmentKind::FieldDefs\n         | AstFragmentKind::Variants => panic!(\"unexpected AST fragment kind\"),\n     })\n }\n@@ -1231,7 +1231,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         if let Some(attr) = self.take_first_attr(&mut field) {\n             return self\n-                .collect_attr(attr, Annotatable::ExprField(field), AstFragmentKind::Fields)\n+                .collect_attr(attr, Annotatable::ExprField(field), AstFragmentKind::ExprFields)\n                 .make_expr_fields();\n         }\n \n@@ -1243,7 +1243,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         if let Some(attr) = self.take_first_attr(&mut fp) {\n             return self\n-                .collect_attr(attr, Annotatable::PatField(fp), AstFragmentKind::FieldPats)\n+                .collect_attr(attr, Annotatable::PatField(fp), AstFragmentKind::PatFields)\n                 .make_pat_fields();\n         }\n \n@@ -1267,7 +1267,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         if let Some(attr) = self.take_first_attr(&mut sf) {\n             return self\n-                .collect_attr(attr, Annotatable::FieldDef(sf), AstFragmentKind::StructFields)\n+                .collect_attr(attr, Annotatable::FieldDef(sf), AstFragmentKind::FieldDefs)\n                 .make_field_defs();\n         }\n "}, {"sha": "af593e92634b034be962b944d9038b036bf2568c", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc7e7711555a0021f5a3592de84bb2b650e42e19/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7e7711555a0021f5a3592de84bb2b650e42e19/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=dc7e7711555a0021f5a3592de84bb2b650e42e19", "patch": "@@ -123,7 +123,7 @@ pub fn placeholder(\n             span,\n             is_placeholder: true,\n         }]),\n-        AstFragmentKind::Fields => AstFragment::Fields(smallvec![ast::ExprField {\n+        AstFragmentKind::ExprFields => AstFragment::ExprFields(smallvec![ast::ExprField {\n             attrs: Default::default(),\n             expr: expr_placeholder(),\n             id,\n@@ -132,7 +132,7 @@ pub fn placeholder(\n             span,\n             is_placeholder: true,\n         }]),\n-        AstFragmentKind::FieldPats => AstFragment::FieldPats(smallvec![ast::PatField {\n+        AstFragmentKind::PatFields => AstFragment::PatFields(smallvec![ast::PatField {\n             attrs: Default::default(),\n             id,\n             ident,\n@@ -159,7 +159,7 @@ pub fn placeholder(\n             ty: ty(),\n             is_placeholder: true,\n         }]),\n-        AstFragmentKind::StructFields => AstFragment::StructFields(smallvec![ast::FieldDef {\n+        AstFragmentKind::FieldDefs => AstFragment::FieldDefs(smallvec![ast::FieldDef {\n             attrs: Default::default(),\n             id,\n             ident: None,"}]}