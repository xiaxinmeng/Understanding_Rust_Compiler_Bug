{"sha": "7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "node_id": "C_kwDOAAsO6NoAKDczNTRiYjMzMWU2YTg4ZTYzYzg5YTNkOTJjNDdkY2M1YWZjMjc0Zjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-20T09:21:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T09:21:12Z"}, "message": "Rollup merge of #90575 - m-ou-se:compatible-variant-improvements, r=estebank\n\nImprove suggestions for compatible variants on type mismatch.\n\nFixes #90553.\n\nBefore:\n![image](https://user-images.githubusercontent.com/783247/140385675-6ff41090-eca2-41bc-b161-99c5dabfec61.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/783247/140385748-20cf26b5-ea96-4e56-8af2-5fe1ab16fd3b.png)\n\nr? `````@estebank`````", "tree": {"sha": "b6e18631fbfe3774034585ac269beeb5742dabf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e18631fbfe3774034585ac269beeb5742dabf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmL4JCRBK7hj4Ov3rIwAA/LQIAGIo242Z5DWYkpSfSKiQv1AJ\nXHbJua/lE9M1W0wEXlGXVg8VX6KXXBLz57zHn2q9VjMS/8htk3pe0b5x2Epd7Sf9\n+U6k5CE0UkzhL72li1pjKAj+Bjt6G+mxJsIPWeTqYelZsaSVJT5RJ60xpplgNk5e\nMCxVCRBIli8MPVmDeq64GCI8UP5rLkal+2OAWz5TKKjIK26wvRE5tlKOyWRjls+X\n9Lgs7r+PEzE4L0hQXWbYB0stvqd8JNTwBgrPesA6am2+pw03aZCVmjyVMNOn8530\n+hQYC+xeh4CkgyeUFwdjrOfvBU3cvDlXPd2mOZV5cmO7iAsScsLCo+Du8hK662A=\n=SUSY\n-----END PGP SIGNATURE-----\n", "payload": "tree b6e18631fbfe3774034585ac269beeb5742dabf5\nparent 50f2c292007f9364908e4b8344886797f0144648\nparent b66fb641da92ea4c9d1c5b0d52ea273cbc21f76e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637400072 +0100\ncommitter GitHub <noreply@github.com> 1637400072 +0100\n\nRollup merge of #90575 - m-ou-se:compatible-variant-improvements, r=estebank\n\nImprove suggestions for compatible variants on type mismatch.\n\nFixes #90553.\n\nBefore:\n![image](https://user-images.githubusercontent.com/783247/140385675-6ff41090-eca2-41bc-b161-99c5dabfec61.png)\n\nAfter:\n![image](https://user-images.githubusercontent.com/783247/140385748-20cf26b5-ea96-4e56-8af2-5fe1ab16fd3b.png)\n\nr? `````@estebank`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "html_url": "https://github.com/rust-lang/rust/commit/7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f2c292007f9364908e4b8344886797f0144648", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f2c292007f9364908e4b8344886797f0144648", "html_url": "https://github.com/rust-lang/rust/commit/50f2c292007f9364908e4b8344886797f0144648"}, {"sha": "b66fb641da92ea4c9d1c5b0d52ea273cbc21f76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66fb641da92ea4c9d1c5b0d52ea273cbc21f76e", "html_url": "https://github.com/rust-lang/rust/commit/b66fb641da92ea4c9d1c5b0d52ea273cbc21f76e"}], "stats": {"total": 367, "additions": 309, "deletions": 58}, "files": [{"sha": "7414d201f511d099b79cba7748fdfc8abe47fe79", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -593,14 +593,19 @@ impl SourceMap {\n     }\n \n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n-        match self.span_to_prev_source(sp) {\n-            Err(_) => None,\n-            Ok(source) => {\n-                let last_line = source.rsplit_once('\\n').unwrap_or((\"\", &source)).1;\n+        Some(self.indentation_before(sp)?.len())\n+    }\n \n-                Some(last_line.len() - last_line.trim_start().len())\n-            }\n-        }\n+    pub fn indentation_before(&self, sp: Span) -> Option<String> {\n+        self.span_to_source(sp, |src, start_index, _| {\n+            let before = &src[..start_index];\n+            let last_line = before.rsplit_once('\\n').map_or(before, |(_, last)| last);\n+            Ok(last_line\n+                .split_once(|c: char| !c.is_whitespace())\n+                .map_or(last_line, |(indent, _)| indent)\n+                .to_string())\n+        })\n+        .ok()\n     }\n \n     /// Returns the source snippet as `String` before the given `Span`."}, {"sha": "ece2d7b4f3793f0aaa93b48e50a9fdcddae69491", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -199,7 +199,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let mut compatible_variants = expected_adt\n+            // If the expression is of type () and it's the return expression of a block,\n+            // we suggest adding a separate return expression instead.\n+            // (To avoid things like suggesting `Ok(while .. { .. })`.)\n+            if expr_ty.is_unit() {\n+                if let Some(hir::Node::Block(&hir::Block {\n+                    span: block_span, expr: Some(e), ..\n+                })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+                {\n+                    if e.hir_id == expr.hir_id {\n+                        if let Some(span) = expr.span.find_ancestor_inside(block_span) {\n+                            let return_suggestions =\n+                                if self.tcx.is_diagnostic_item(sym::Result, expected_adt.did) {\n+                                    vec![\"Ok(())\".to_string()]\n+                                } else if self.tcx.is_diagnostic_item(sym::Option, expected_adt.did)\n+                                {\n+                                    vec![\"None\".to_string(), \"Some(())\".to_string()]\n+                                } else {\n+                                    return;\n+                                };\n+                            if let Some(indent) =\n+                                self.tcx.sess.source_map().indentation_before(span.shrink_to_lo())\n+                            {\n+                                // Add a semicolon, except after `}`.\n+                                let semicolon =\n+                                    match self.tcx.sess.source_map().span_to_snippet(span) {\n+                                        Ok(s) if s.ends_with('}') => \"\",\n+                                        _ => \";\",\n+                                    };\n+                                err.span_suggestions(\n+                                    span.shrink_to_hi(),\n+                                    \"try adding an expression at the end of the block\",\n+                                    return_suggestions\n+                                        .into_iter()\n+                                        .map(|r| format!(\"{}\\n{}{}\", semicolon, indent, r)),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            let compatible_variants: Vec<String> = expected_adt\n                 .variants\n                 .iter()\n                 .filter(|variant| variant.fields.len() == 1)\n@@ -220,19 +263,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     }\n                 })\n-                .peekable();\n+                .collect();\n \n-            if compatible_variants.peek().is_some() {\n-                if let Ok(expr_text) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-                    let suggestions = compatible_variants.map(|v| format!(\"{}({})\", v, expr_text));\n-                    let msg = \"try using a variant of the expected enum\";\n-                    err.span_suggestions(\n-                        expr.span,\n-                        msg,\n-                        suggestions,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+            if let [variant] = &compatible_variants[..] {\n+                // Just a single matching variant.\n+                err.multipart_suggestion(\n+                    &format!(\"try wrapping the expression in `{}`\", variant),\n+                    vec![\n+                        (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                        (expr.span.shrink_to_hi(), \")\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else if compatible_variants.len() > 1 {\n+                // More than one matching variant.\n+                err.multipart_suggestions(\n+                    &format!(\n+                        \"try wrapping the expression in a variant of `{}`\",\n+                        self.tcx.def_path_str(expected_adt.did)\n+                    ),\n+                    compatible_variants.into_iter().map(|variant| {\n+                        vec![\n+                            (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                            (expr.span.shrink_to_hi(), \")\".to_string()),\n+                        ]\n+                    }),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n     }"}, {"sha": "fb6b6a5673d90ec59711df4b53a715fb5b5ee7d6", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -0,0 +1,43 @@\n+enum Hey<A, B> {\n+    A(A),\n+    B(B),\n+}\n+\n+fn f() {}\n+\n+fn a() -> Option<()> {\n+    while false {\n+        //~^ ERROR mismatched types\n+        f();\n+    }\n+    //~^ HELP try adding an expression\n+}\n+\n+fn b() -> Result<(), ()> {\n+    f()\n+    //~^ ERROR mismatched types\n+    //~| HELP try adding an expression\n+}\n+\n+fn main() {\n+    let _: Option<()> = while false {};\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Option<()> = {\n+        while false {}\n+        //~^ ERROR mismatched types\n+        //~| HELP try adding an expression\n+    };\n+    let _: Result<i32, i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Option<i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Hey<i32, i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Hey<i32, bool> = false;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+}"}, {"sha": "e77949687fcb2035bed74253e028ea6a0ae479ac", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -0,0 +1,137 @@\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:9:5\n+   |\n+LL |   fn a() -> Option<()> {\n+   |             ---------- expected `Option<()>` because of return type\n+LL | /     while false {\n+LL | |\n+LL | |         f();\n+LL | |     }\n+   | |_____^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     }\n+LL +     None\n+   |\n+LL ~     }\n+LL +     Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:17:5\n+   |\n+LL | fn b() -> Result<(), ()> {\n+   |           -------------- expected `Result<(), ()>` because of return type\n+LL |     f()\n+   |     ^^^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), ()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     f();\n+LL +     Ok(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:23:25\n+   |\n+LL |     let _: Option<()> = while false {};\n+   |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _: Option<()> = Some(while false {});\n+   |                         +++++              +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:27:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~         while false {}\n+LL +         None\n+   |\n+LL ~         while false {}\n+LL +         Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:31:31\n+   |\n+LL |     let _: Result<i32, i32> = 1;\n+   |            ----------------   ^ expected enum `Result`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Result<i32, i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in a variant of `Result`\n+   |\n+LL |     let _: Result<i32, i32> = Ok(1);\n+   |                               +++ +\n+LL |     let _: Result<i32, i32> = Err(1);\n+   |                               ++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:34:26\n+   |\n+LL |     let _: Option<i32> = 1;\n+   |            -----------   ^ expected enum `Option`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Option<i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _: Option<i32> = Some(1);\n+   |                          +++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:37:28\n+   |\n+LL |     let _: Hey<i32, i32> = 1;\n+   |            -------------   ^ expected enum `Hey`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Hey<i32, i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in a variant of `Hey`\n+   |\n+LL |     let _: Hey<i32, i32> = Hey::A(1);\n+   |                            +++++++ +\n+LL |     let _: Hey<i32, i32> = Hey::B(1);\n+   |                            +++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:40:29\n+   |\n+LL |     let _: Hey<i32, bool> = false;\n+   |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Hey<i32, bool>`\n+              found type `bool`\n+help: try wrapping the expression in `Hey::B`\n+   |\n+LL |     let _: Hey<i32, bool> = Hey::B(false);\n+   |                             +++++++     +\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6da640b2b7c765b26054fc0248512e8fb23be270", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let n: usize = 42;\n     this_function_expects_a_double_option(n);\n     //~^ ERROR mismatched types\n-    //~| HELP try using a variant of the expected enum\n+    //~| HELP try wrapping the expression in a variant of `DoubleOption`\n }\n \n "}, {"sha": "dbe46704b9320224edc810d5b2488f9a5ca0deef", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -6,12 +6,12 @@ LL |     this_function_expects_a_double_option(n);\n    |\n    = note: expected enum `DoubleOption<_>`\n               found type `usize`\n-help: try using a variant of the expected enum\n+help: try wrapping the expression in a variant of `DoubleOption`\n    |\n-LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n-   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n-   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                           ++++++++++++++++++++++++ +\n+LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n+   |                                           ++++++++++++++++++++++++++++++ +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:27:33"}, {"sha": "03fb299b39cd2e11721ef522431735637305485c", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -2,13 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/fully-qualified-type-name1.rs:5:9\n    |\n LL |     x = 5;\n-   |         ^\n-   |         |\n-   |         expected enum `Option`, found integer\n-   |         help: try using a variant of the expected enum: `Some(5)`\n+   |         ^ expected enum `Option`, found integer\n    |\n    = note: expected enum `Option<usize>`\n               found type `{integer}`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     x = Some(5);\n+   |         +++++ +\n \n error: aborting due to previous error\n "}, {"sha": "778b13f24cf5667b82e8e1d0bcbd0aa22c362002", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -4,13 +4,14 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `Option<usize>` because of return type\n LL |     return x;\n-   |            ^\n-   |            |\n-   |            expected enum `Option`, found `usize`\n-   |            help: try using a variant of the expected enum: `Some(x)`\n+   |            ^ expected enum `Option`, found `usize`\n    |\n    = note: expected enum `Option<usize>`\n               found type `usize`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     return Some(x);\n+   |            +++++ +\n \n error: aborting due to previous error\n "}, {"sha": "15d2ef3fce8da150c21091a7338ac19c841f1c13", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -12,10 +12,10 @@ help: try removing this `?`\n LL -     missing_discourses()?\n LL +     missing_discourses()\n    | \n-help: try using a variant of the expected enum\n+help: try wrapping the expression in `Ok`\n    |\n LL |     Ok(missing_discourses()?)\n-   |\n+   |     +++                     +\n \n error: aborting due to previous error\n "}, {"sha": "ff1a836c9aec034b7e2cbd5e929b5a190a05b89a", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -26,27 +26,29 @@ error[E0308]: mismatched types\n LL | fn b() -> Option<Foo> {\n    |           ----------- expected `Option<Foo>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^\n-   |     |\n-   |     expected enum `Option`, found struct `Foo`\n-   |     help: try using a variant of the expected enum: `Some(Foo { bar: 1 })`\n+   |     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `Foo`\n    |\n    = note: expected enum `Option<Foo>`\n             found struct `Foo`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     Some(Foo { bar: 1 })\n+   |     +++++              +\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:28:5\n    |\n LL | fn c() -> Result<Foo, Bar> {\n    |           ---------------- expected `Result<Foo, Bar>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^\n-   |     |\n-   |     expected enum `Result`, found struct `Foo`\n-   |     help: try using a variant of the expected enum: `Ok(Foo { bar: 1 })`\n+   |     ^^^^^^^^^^^^^^ expected enum `Result`, found struct `Foo`\n    |\n    = note: expected enum `Result<Foo, Bar>`\n             found struct `Foo`\n+help: try wrapping the expression in `Ok`\n+   |\n+LL |     Ok(Foo { bar: 1 })\n+   |     +++              +\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:39:5"}, {"sha": "090bd67117eab8cdad015950777c29ad481944e0", "filename": "src/test/ui/pattern/pat-type-err-let-stmt.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:6:29\n    |\n LL |     let Ok(0): Option<u8> = 42u8;\n-   |                ----------   ^^^^\n-   |                |            |\n-   |                |            expected enum `Option`, found `u8`\n-   |                |            help: try using a variant of the expected enum: `Some(42u8)`\n+   |                ----------   ^^^^ expected enum `Option`, found `u8`\n+   |                |\n    |                expected due to this\n    |\n    = note: expected enum `Option<u8>`\n               found type `u8`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let Ok(0): Option<u8> = Some(42u8);\n+   |                             +++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:6:9"}, {"sha": "9b9e70a675fb1119725baa0152398e0587d6e005", "filename": "src/test/ui/suggestions/boxed-variant-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -9,7 +9,7 @@ fn foo(x: Ty) -> Ty {\n         Ty::List(elem) => foo(elem),\n         //~^ ERROR mismatched types\n         //~| HELP try dereferencing the `Box`\n-        //~| HELP try using a variant of the expected enum\n+        //~| HELP try wrapping\n     }\n }\n "}, {"sha": "e865b993a4c178bb128935eef88c7afaf6a286ae", "filename": "src/test/ui/suggestions/boxed-variant-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -10,10 +10,10 @@ help: try dereferencing the `Box`\n    |\n LL |         Ty::List(elem) => foo(*elem),\n    |                               +\n-help: try using a variant of the expected enum\n+help: try wrapping the expression in `Ty::List`\n    |\n LL |         Ty::List(elem) => foo(Ty::List(elem)),\n-   |                               ~~~~~~~~~~~~~~\n+   |                               +++++++++    +\n \n error: aborting due to previous error\n "}, {"sha": "9b6dba7e9e75b9d7ac273c434f16af7a88da2c04", "filename": "src/test/ui/suggestions/suggest-full-enum-variant-for-local-module.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-full-enum-variant-for-local-module.rs:9:28\n    |\n LL |     let _: option::O<()> = ();\n-   |            -------------   ^^\n-   |            |               |\n-   |            |               expected enum `O`, found `()`\n-   |            |               help: try using a variant of the expected enum: `option::O::Some(())`\n+   |            -------------   ^^ expected enum `O`, found `()`\n+   |            |\n    |            expected due to this\n    |\n    = note:   expected enum `O<()>`\n            found unit type `()`\n+help: try wrapping the expression in `option::O::Some`\n+   |\n+LL |     let _: option::O<()> = option::O::Some(());\n+   |                            ++++++++++++++++  +\n \n error: aborting due to previous error\n "}, {"sha": "39bff88e7f81a3624cbbf3ec0aa5bc3bc2e26122", "filename": "src/test/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7354bb331e6a88e63c89a3d92c47dcc5afc274f8/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "patch": "@@ -2,13 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/issue-46112.rs:9:21\n    |\n LL | fn main() { test(Ok(())); }\n-   |                     ^^\n-   |                     |\n-   |                     expected enum `Option`, found `()`\n-   |                     help: try using a variant of the expected enum: `Some(())`\n+   |                     ^^ expected enum `Option`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n+help: try wrapping the expression in `Some`\n+   |\n+LL | fn main() { test(Ok(Some(()))); }\n+   |                     +++++  +\n \n error: aborting due to previous error\n "}]}