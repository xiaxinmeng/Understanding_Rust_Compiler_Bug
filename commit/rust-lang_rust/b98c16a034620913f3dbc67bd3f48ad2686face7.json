{"sha": "b98c16a034620913f3dbc67bd3f48ad2686face7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OGMxNmEwMzQ2MjA5MTNmM2RiYzY3YmQzZjQ4YWQyNjg2ZmFjZTc=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-06-28T22:36:05Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-02T21:13:02Z"}, "message": "Categorize assists", "tree": {"sha": "10f90c96791cfd82bb160a1a5c7474ccc17d5b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f90c96791cfd82bb160a1a5c7474ccc17d5b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b98c16a034620913f3dbc67bd3f48ad2686face7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b98c16a034620913f3dbc67bd3f48ad2686face7", "html_url": "https://github.com/rust-lang/rust/commit/b98c16a034620913f3dbc67bd3f48ad2686face7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b98c16a034620913f3dbc67bd3f48ad2686face7/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb8bf03c588dcf244d25785de3878b6ef3f7958", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb8bf03c588dcf244d25785de3878b6ef3f7958", "html_url": "https://github.com/rust-lang/rust/commit/4cb8bf03c588dcf244d25785de3878b6ef3f7958"}], "stats": {"total": 1227, "additions": 721, "deletions": 506}, "files": [{"sha": "c35d0254ae360b2ecbcef79f016272de28cf2dfc", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -19,7 +19,7 @@ use ra_text_edit::TextEditBuilder;\n \n use crate::{\n     assist_config::{AssistConfig, SnippetCap},\n-    Assist, AssistId, GroupLabel, ResolvedAssist,\n+    Assist, AssistId, AssistKind, GroupLabel, ResolvedAssist,\n };\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n@@ -135,22 +135,24 @@ impl Assists {\n     pub(crate) fn add(\n         &mut self,\n         id: AssistId,\n+        kind: AssistKind,\n         label: impl Into<String>,\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = Assist::new(id, label.into(), None, target);\n+        let label = Assist::new(id, kind, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n     pub(crate) fn add_group(\n         &mut self,\n         group: &GroupLabel,\n         id: AssistId,\n+        kind: AssistKind,\n         label: impl Into<String>,\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = Assist::new(id, label.into(), Some(group.clone()), target);\n+        let label = Assist::new(id, kind, label.into(), Some(group.clone()), target);\n         self.add_impl(label, f)\n     }\n     fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {"}, {"sha": "e86b01dbb2b210d082a5c14fbab8352006e3f9b7", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -8,7 +8,7 @@ use stdx::SepBy;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: add_custom_impl\n@@ -52,7 +52,7 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         format!(\"Add custom impl `{}` for `{}`\", trait_token.text().as_str(), annotated_name);\n \n     let target = attr.syntax().text_range();\n-    acc.add(AssistId(\"add_custom_impl\"), label, target, |builder| {\n+    acc.add(AssistId(\"add_custom_impl\"), AssistKind::Refactor, label, target, |builder| {\n         let new_attr_input = input\n             .syntax()\n             .descendants_with_tokens()"}, {"sha": "3b7a570b0859aaeb7ba5575906c137812658fa22", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     TextSize,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_derive\n //\n@@ -29,7 +29,7 @@ pub(crate) fn add_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |builder| {\n+    acc.add(AssistId(\"add_derive\"), AssistKind::Refactor, \"Add `#[derive]`\", target, |builder| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())"}, {"sha": "653137d437f73f8a8030a7b48dae4e3b05da96cb", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_explicit_type\n //\n@@ -60,6 +60,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     let inferred_type = ty.display_source_code(ctx.db(), module.into()).ok()?;\n     acc.add(\n         AssistId(\"add_explicit_type\"),\n+        AssistKind::RefactorRewrite,\n         format!(\"Insert explicit type `{}`\", inferred_type),\n         pat_range,\n         |builder| match ascribed_ty {"}, {"sha": "505085c54275a543230f8151e4e83efdeb9dde0a", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -2,7 +2,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n-use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n+use crate::{utils::FamousDefs, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_from_impl_for_enum\n //\n@@ -46,6 +46,7 @@ pub(crate) fn add_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) ->\n     let target = variant.syntax().text_range();\n     acc.add(\n         AssistId(\"add_from_impl_for_enum\"),\n+        AssistKind::Refactor,\n         \"Add From impl for this enum variant\",\n         target,\n         |edit| {"}, {"sha": "a11bc25516f58460e3e8fef8a3629f73f7e98dc8", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     assist_config::SnippetCap,\n     utils::{render_snippet, Cursor},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: add_function\n@@ -62,15 +62,21 @@ pub(crate) fn add_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let function_builder = FunctionBuilder::from_call(&ctx, &call, &path, target_module)?;\n \n     let target = call.syntax().text_range();\n-    acc.add(AssistId(\"add_function\"), \"Add function\", target, |builder| {\n-        let function_template = function_builder.render();\n-        builder.edit_file(function_template.file);\n-        let new_fn = function_template.to_string(ctx.config.snippet_cap);\n-        match ctx.config.snippet_cap {\n-            Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n-            None => builder.insert(function_template.insert_offset, new_fn),\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"add_function\"),\n+        AssistKind::RefactorExtract,\n+        \"Add function\",\n+        target,\n+        |builder| {\n+            let function_template = function_builder.render();\n+            builder.edit_file(function_template.file);\n+            let new_fn = function_template.to_string(ctx.config.snippet_cap);\n+            match ctx.config.snippet_cap {\n+                Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n+                None => builder.insert(function_template.insert_offset, new_fn),\n+            }\n+        },\n+    )\n }\n \n struct FunctionTemplate {"}, {"sha": "405e3c568dd925767e71448b08fb21abe49b681f", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::ast::{self, AstNode, NameOwner, TypeParamsOwner};\n use stdx::{format_to, SepBy};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_impl\n //\n@@ -26,38 +26,46 @@ pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_impl\"), format!(\"Implement {}\", name.text().as_str()), target, |edit| {\n-        let type_params = nominal.type_param_list();\n-        let start_offset = nominal.syntax().text_range().end();\n-        let mut buf = String::new();\n-        buf.push_str(\"\\n\\nimpl\");\n-        if let Some(type_params) = &type_params {\n-            format_to!(buf, \"{}\", type_params.syntax());\n-        }\n-        buf.push_str(\" \");\n-        buf.push_str(name.text().as_str());\n-        if let Some(type_params) = type_params {\n-            let lifetime_params = type_params\n-                .lifetime_params()\n-                .filter_map(|it| it.lifetime_token())\n-                .map(|it| it.text().clone());\n-            let type_params =\n-                type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n+    acc.add(\n+        AssistId(\"add_impl\"),\n+        AssistKind::Refactor,\n+        format!(\"Implement {}\", name.text().as_str()),\n+        target,\n+        |edit| {\n+            let type_params = nominal.type_param_list();\n+            let start_offset = nominal.syntax().text_range().end();\n+            let mut buf = String::new();\n+            buf.push_str(\"\\n\\nimpl\");\n+            if let Some(type_params) = &type_params {\n+                format_to!(buf, \"{}\", type_params.syntax());\n+            }\n+            buf.push_str(\" \");\n+            buf.push_str(name.text().as_str());\n+            if let Some(type_params) = type_params {\n+                let lifetime_params = type_params\n+                    .lifetime_params()\n+                    .filter_map(|it| it.lifetime_token())\n+                    .map(|it| it.text().clone());\n+                let type_params = type_params\n+                    .type_params()\n+                    .filter_map(|it| it.name())\n+                    .map(|it| it.text().clone());\n \n-            let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n-            format_to!(buf, \"<{}>\", generic_params)\n-        }\n-        match ctx.config.snippet_cap {\n-            Some(cap) => {\n-                buf.push_str(\" {\\n    $0\\n}\");\n-                edit.insert_snippet(cap, start_offset, buf);\n+                let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n+                format_to!(buf, \"<{}>\", generic_params)\n             }\n-            None => {\n-                buf.push_str(\" {\\n}\");\n-                edit.insert(start_offset, buf);\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    buf.push_str(\" {\\n    $0\\n}\");\n+                    edit.insert_snippet(cap, start_offset, buf);\n+                }\n+                None => {\n+                    buf.push_str(\" {\\n}\");\n+                    edit.insert(start_offset, buf);\n+                }\n             }\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "13b441a2929b6e8c57422f8506869a068360818b", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     assist_context::{AssistContext, Assists},\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n     utils::{get_missing_assoc_items, render_snippet, resolve_target_trait, Cursor},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n #[derive(PartialEq)]\n@@ -147,7 +147,7 @@ fn add_missing_impl_members_inner(\n     }\n \n     let target = impl_def.syntax().text_range();\n-    acc.add(AssistId(assist_id), label, target, |builder| {\n+    acc.add(AssistId(assist_id), AssistKind::QuickFix, label, target, |builder| {\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = ctx.sema.scope_for_def(trait_);\n         let target_scope = ctx.sema.scope(impl_item_list.syntax());"}, {"sha": "4cd3ca264977859ae64f34e5efd6cbc2b6e82b99", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 49, "deletions": 43, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n };\n use stdx::{format_to, SepBy};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_new\n //\n@@ -42,50 +42,56 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     let target = strukt.syntax().text_range();\n-    acc.add(AssistId(\"add_new\"), \"Add default constructor\", target, |builder| {\n-        let mut buf = String::with_capacity(512);\n-\n-        if impl_def.is_some() {\n-            buf.push('\\n');\n-        }\n-\n-        let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-\n-        let params = field_list\n-            .fields()\n-            .filter_map(|f| {\n-                Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n-            })\n-            .sep_by(\", \");\n-        let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n-\n-        format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n-\n-        let start_offset = impl_def\n-            .and_then(|impl_def| {\n+    acc.add(\n+        AssistId(\"add_new\"),\n+        AssistKind::Refactor,\n+        \"Add default constructor\",\n+        target,\n+        |builder| {\n+            let mut buf = String::with_capacity(512);\n+\n+            if impl_def.is_some() {\n                 buf.push('\\n');\n-                let start = impl_def\n-                    .syntax()\n-                    .descendants_with_tokens()\n-                    .find(|t| t.kind() == T!['{'])?\n-                    .text_range()\n-                    .end();\n-\n-                Some(start)\n-            })\n-            .unwrap_or_else(|| {\n-                buf = generate_impl_text(&strukt, &buf);\n-                strukt.syntax().text_range().end()\n-            });\n-\n-        match ctx.config.snippet_cap {\n-            None => builder.insert(start_offset, buf),\n-            Some(cap) => {\n-                buf = buf.replace(\"fn new\", \"fn $0new\");\n-                builder.insert_snippet(cap, start_offset, buf);\n             }\n-        }\n-    })\n+\n+            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+\n+            let params = field_list\n+                .fields()\n+                .filter_map(|f| {\n+                    Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n+                })\n+                .sep_by(\", \");\n+            let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n+\n+            format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n+\n+            let start_offset = impl_def\n+                .and_then(|impl_def| {\n+                    buf.push('\\n');\n+                    let start = impl_def\n+                        .syntax()\n+                        .descendants_with_tokens()\n+                        .find(|t| t.kind() == T!['{'])?\n+                        .text_range()\n+                        .end();\n+\n+                    Some(start)\n+                })\n+                .unwrap_or_else(|| {\n+                    buf = generate_impl_text(&strukt, &buf);\n+                    strukt.syntax().text_range().end()\n+                });\n+\n+            match ctx.config.snippet_cap {\n+                None => builder.insert(start_offset, buf),\n+                Some(cap) => {\n+                    buf = buf.replace(\"fn new\", \"fn $0new\");\n+                    builder.insert_snippet(cap, start_offset, buf);\n+                }\n+            }\n+        },\n+    )\n }\n \n // Generates the surrounding `impl Type { <code> }` including type and lifetime"}, {"sha": "7a807fbde6efca3695236b5038a4f3997af61f5b", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -4,7 +4,7 @@ use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: add_turbo_fish\n@@ -45,12 +45,16 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         mark::hit!(add_turbo_fish_non_generic);\n         return None;\n     }\n-    acc.add(AssistId(\"add_turbo_fish\"), \"Add `::<>`\", ident.text_range(), |builder| {\n-        match ctx.config.snippet_cap {\n+    acc.add(\n+        AssistId(\"add_turbo_fish\"),\n+        AssistKind::RefactorRewrite,\n+        \"Add `::<>`\",\n+        ident.text_range(),\n+        |builder| match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, ident.text_range().end(), \"::<${0:_}>\"),\n             None => builder.insert(ident.text_range().end(), \"::<_>\"),\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "a1fd6e112273938116b63f60980b9f8069c35743", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{utils::invert_boolean_expression, AssistContext, AssistId, Assists};\n+use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: apply_demorgan\n //\n@@ -39,11 +39,17 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let rhs_range = rhs.syntax().text_range();\n     let not_rhs = invert_boolean_expression(rhs);\n \n-    acc.add(AssistId(\"apply_demorgan\"), \"Apply De Morgan's law\", op_range, |edit| {\n-        edit.replace(op_range, opposite_op);\n-        edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n-        edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n-    })\n+    acc.add(\n+        AssistId(\"apply_demorgan\"),\n+        AssistKind::RefactorRewrite,\n+        \"Apply De Morgan's law\",\n+        op_range,\n+        |edit| {\n+            edit.replace(op_range, opposite_op);\n+            edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n+            edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n+        },\n+    )\n }\n \n // Return the opposite text for a given logical operator, if it makes sense"}, {"sha": "4d97ed1015a43ddd60009508f2938f3bae40803a", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -13,7 +13,9 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{utils::insert_use_statement, AssistContext, AssistId, Assists, GroupLabel};\n+use crate::{\n+    utils::insert_use_statement, AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n+};\n \n // Assist: auto_import\n //\n@@ -47,6 +49,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         acc.add_group(\n             &group,\n             AssistId(\"auto_import\"),\n+            AssistKind::QuickFix,\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {"}, {"sha": "2be6d5e492473142588b57a1dfd94458f3bbaa3f", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     AstNode, SyntaxNode,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n use test_utils::mark;\n \n // Assist: change_return_type_to_result\n@@ -36,6 +36,7 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n \n     acc.add(\n         AssistId(\"change_return_type_to_result\"),\n+        AssistKind::RefactorRewrite,\n         \"Change return type to Result\",\n         type_ref.syntax().text_range(),\n         |builder| {"}, {"sha": "34c7e481deb51302135b955d1d7904cf9fe0f9ad", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n };\n use test_utils::mark;\n \n-use crate::{utils::vis_offset, AssistContext, AssistId, Assists};\n+use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: change_visibility\n //\n@@ -62,16 +62,23 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     };\n \n-    acc.add(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", target, |edit| {\n-        edit.insert(offset, \"pub(crate) \");\n-    })\n+    acc.add(\n+        AssistId(\"change_visibility\"),\n+        AssistKind::RefactorRewrite,\n+        \"Change visibility to pub(crate)\",\n+        target,\n+        |edit| {\n+            edit.insert(offset, \"pub(crate) \");\n+        },\n+    )\n }\n \n fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n     if vis.syntax().text() == \"pub\" {\n         let target = vis.syntax().text_range();\n         return acc.add(\n             AssistId(\"change_visibility\"),\n+            AssistKind::RefactorRewrite,\n             \"Change Visibility to pub(crate)\",\n             target,\n             |edit| {\n@@ -83,6 +90,7 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n         let target = vis.syntax().text_range();\n         return acc.add(\n             AssistId(\"change_visibility\"),\n+            AssistKind::RefactorRewrite,\n             \"Change visibility to pub\",\n             target,\n             |edit| {"}, {"sha": "9ccd42cd72ab7a6def175ba573d0aada656a5d94", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 82, "deletions": 75, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::invert_boolean_expression,\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: convert_to_guarded_return\n@@ -99,86 +99,93 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n \n     let target = if_expr.syntax().text_range();\n-    acc.add(AssistId(\"convert_to_guarded_return\"), \"Convert to guarded return\", target, |edit| {\n-        let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n-        let new_block = match if_let_pat {\n-            None => {\n-                // If.\n-                let new_expr = {\n-                    let then_branch =\n-                        make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n-                    let cond = invert_boolean_expression(cond_expr);\n-                    make::expr_if(make::condition(cond, None), then_branch).indent(if_indent_level)\n-                };\n-                replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n-            }\n-            Some((path, bound_ident)) => {\n-                // If-let.\n-                let match_expr = {\n-                    let happy_arm = {\n-                        let pat = make::tuple_struct_pat(\n-                            path,\n-                            once(make::bind_pat(make::name(\"it\")).into()),\n-                        );\n-                        let expr = {\n-                            let name_ref = make::name_ref(\"it\");\n-                            let segment = make::path_segment(name_ref);\n-                            let path = make::path_unqualified(segment);\n-                            make::expr_path(path)\n-                        };\n-                        make::match_arm(once(pat.into()), expr)\n+    acc.add(\n+        AssistId(\"convert_to_guarded_return\"),\n+        AssistKind::RefactorRewrite,\n+        \"Convert to guarded return\",\n+        target,\n+        |edit| {\n+            let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n+            let new_block = match if_let_pat {\n+                None => {\n+                    // If.\n+                    let new_expr = {\n+                        let then_branch =\n+                            make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n+                        let cond = invert_boolean_expression(cond_expr);\n+                        make::expr_if(make::condition(cond, None), then_branch)\n+                            .indent(if_indent_level)\n                     };\n+                    replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n+                }\n+                Some((path, bound_ident)) => {\n+                    // If-let.\n+                    let match_expr = {\n+                        let happy_arm = {\n+                            let pat = make::tuple_struct_pat(\n+                                path,\n+                                once(make::bind_pat(make::name(\"it\")).into()),\n+                            );\n+                            let expr = {\n+                                let name_ref = make::name_ref(\"it\");\n+                                let segment = make::path_segment(name_ref);\n+                                let path = make::path_unqualified(segment);\n+                                make::expr_path(path)\n+                            };\n+                            make::match_arm(once(pat.into()), expr)\n+                        };\n \n-                    let sad_arm = make::match_arm(\n-                        // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n-                        once(make::placeholder_pat().into()),\n-                        early_expression,\n-                    );\n+                        let sad_arm = make::match_arm(\n+                            // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n+                            once(make::placeholder_pat().into()),\n+                            early_expression,\n+                        );\n \n-                    make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n-                };\n+                        make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n+                    };\n \n-                let let_stmt = make::let_stmt(\n-                    make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n-                    Some(match_expr),\n+                    let let_stmt = make::let_stmt(\n+                        make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n+                        Some(match_expr),\n+                    );\n+                    let let_stmt = let_stmt.indent(if_indent_level);\n+                    replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n+                }\n+            };\n+            edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n+\n+            fn replace(\n+                new_expr: &SyntaxNode,\n+                then_block: &ast::BlockExpr,\n+                parent_block: &ast::BlockExpr,\n+                if_expr: &ast::IfExpr,\n+            ) -> SyntaxNode {\n+                let then_block_items = then_block.dedent(IndentLevel(1));\n+                let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n+                let end_of_then =\n+                    if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n+                        end_of_then.prev_sibling_or_token().unwrap()\n+                    } else {\n+                        end_of_then\n+                    };\n+                let mut then_statements = new_expr.children_with_tokens().chain(\n+                    then_block_items\n+                        .syntax()\n+                        .children_with_tokens()\n+                        .skip(1)\n+                        .take_while(|i| *i != end_of_then),\n                 );\n-                let let_stmt = let_stmt.indent(if_indent_level);\n-                replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n+                replace_children(\n+                    &parent_block.syntax(),\n+                    RangeInclusive::new(\n+                        if_expr.clone().syntax().clone().into(),\n+                        if_expr.syntax().clone().into(),\n+                    ),\n+                    &mut then_statements,\n+                )\n             }\n-        };\n-        edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n-\n-        fn replace(\n-            new_expr: &SyntaxNode,\n-            then_block: &ast::BlockExpr,\n-            parent_block: &ast::BlockExpr,\n-            if_expr: &ast::IfExpr,\n-        ) -> SyntaxNode {\n-            let then_block_items = then_block.dedent(IndentLevel(1));\n-            let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n-            let end_of_then =\n-                if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n-                    end_of_then.prev_sibling_or_token().unwrap()\n-                } else {\n-                    end_of_then\n-                };\n-            let mut then_statements = new_expr.children_with_tokens().chain(\n-                then_block_items\n-                    .syntax()\n-                    .children_with_tokens()\n-                    .skip(1)\n-                    .take_while(|i| *i != end_of_then),\n-            );\n-            replace_children(\n-                &parent_block.syntax(),\n-                RangeInclusive::new(\n-                    if_expr.clone().syntax().clone().into(),\n-                    if_expr.syntax().clone().into(),\n-                ),\n-                &mut then_statements,\n-            )\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "e1ae485c9b75aa7748e45aabe6ec5b6d25ca8f63", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -10,7 +10,8 @@ use ra_syntax::{\n use rustc_hash::FxHashSet;\n \n use crate::{\n-    assist_context::AssistBuilder, utils::insert_use_statement, AssistContext, AssistId, Assists,\n+    assist_context::AssistBuilder, utils::insert_use_statement, AssistContext, AssistId,\n+    AssistKind, Assists,\n };\n \n // Assist: extract_struct_from_enum_variant\n@@ -49,6 +50,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     let target = variant.syntax().text_range();\n     acc.add(\n         AssistId(\"extract_struct_from_enum_variant\"),\n+        AssistKind::RefactorRewrite,\n         \"Extract struct from enum variant\",\n         target,\n         |builder| {"}, {"sha": "8f7ffdaff132844dee8db233c1bf6c781d5291d9", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 72, "deletions": 66, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n use stdx::format_to;\n use test_utils::mark;\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: extract_variable\n //\n@@ -43,80 +43,86 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n     let target = expr.syntax().text_range();\n-    acc.add(AssistId(\"extract_variable\"), \"Extract into variable\", target, move |edit| {\n-        let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n-            Some(field) => field.name_ref(),\n-            None => None,\n-        };\n-\n-        let mut buf = String::new();\n-\n-        let var_name = match &field_shorthand {\n-            Some(it) => it.to_string(),\n-            None => \"var_name\".to_string(),\n-        };\n-        let expr_range = match &field_shorthand {\n-            Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n-            None => expr.syntax().text_range(),\n-        };\n-\n-        if wrap_in_block {\n-            format_to!(buf, \"{{ let {} = \", var_name);\n-        } else {\n-            format_to!(buf, \"let {} = \", var_name);\n-        };\n-        format_to!(buf, \"{}\", expr.syntax());\n-\n-        let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n-        let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n-            Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())\n-        } else {\n-            false\n-        };\n-        if is_full_stmt {\n-            mark::hit!(test_extract_var_expr_stmt);\n-            if full_stmt.unwrap().semicolon_token().is_none() {\n-                buf.push_str(\";\");\n+    acc.add(\n+        AssistId(\"extract_variable\"),\n+        AssistKind::RefactorExtract,\n+        \"Extract into variable\",\n+        target,\n+        move |edit| {\n+            let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n+                Some(field) => field.name_ref(),\n+                None => None,\n+            };\n+\n+            let mut buf = String::new();\n+\n+            let var_name = match &field_shorthand {\n+                Some(it) => it.to_string(),\n+                None => \"var_name\".to_string(),\n+            };\n+            let expr_range = match &field_shorthand {\n+                Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n+                None => expr.syntax().text_range(),\n+            };\n+\n+            if wrap_in_block {\n+                format_to!(buf, \"{{ let {} = \", var_name);\n+            } else {\n+                format_to!(buf, \"let {} = \", var_name);\n+            };\n+            format_to!(buf, \"{}\", expr.syntax());\n+\n+            let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n+            let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n+                Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())\n+            } else {\n+                false\n+            };\n+            if is_full_stmt {\n+                mark::hit!(test_extract_var_expr_stmt);\n+                if full_stmt.unwrap().semicolon_token().is_none() {\n+                    buf.push_str(\";\");\n+                }\n+                match ctx.config.snippet_cap {\n+                    Some(cap) => {\n+                        let snip = buf\n+                            .replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n+                        edit.replace_snippet(cap, expr_range, snip)\n+                    }\n+                    None => edit.replace(expr_range, buf),\n+                }\n+                return;\n+            }\n+\n+            buf.push_str(\";\");\n+\n+            // We want to maintain the indent level,\n+            // but we do not want to duplicate possible\n+            // extra newlines in the indent block\n+            let text = indent.text();\n+            if text.starts_with('\\n') {\n+                buf.push_str(\"\\n\");\n+                buf.push_str(text.trim_start_matches('\\n'));\n+            } else {\n+                buf.push_str(text);\n             }\n+\n+            edit.replace(expr_range, var_name.clone());\n+            let offset = anchor_stmt.text_range().start();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n                     let snip =\n                         buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n-                    edit.replace_snippet(cap, expr_range, snip)\n+                    edit.insert_snippet(cap, offset, snip)\n                 }\n-                None => edit.replace(expr_range, buf),\n+                None => edit.insert(offset, buf),\n             }\n-            return;\n-        }\n \n-        buf.push_str(\";\");\n-\n-        // We want to maintain the indent level,\n-        // but we do not want to duplicate possible\n-        // extra newlines in the indent block\n-        let text = indent.text();\n-        if text.starts_with('\\n') {\n-            buf.push_str(\"\\n\");\n-            buf.push_str(text.trim_start_matches('\\n'));\n-        } else {\n-            buf.push_str(text);\n-        }\n-\n-        edit.replace(expr_range, var_name.clone());\n-        let offset = anchor_stmt.text_range().start();\n-        match ctx.config.snippet_cap {\n-            Some(cap) => {\n-                let snip =\n-                    buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n-                edit.insert_snippet(cap, offset, snip)\n+            if wrap_in_block {\n+                edit.insert(anchor_stmt.text_range().end(), \" }\");\n             }\n-            None => edit.insert(offset, buf),\n-        }\n-\n-        if wrap_in_block {\n-            edit.insert(anchor_stmt.text_range().end(), \" }\");\n-        }\n-    })\n+        },\n+    )\n }\n \n /// Check whether the node is a valid expression which can be extracted to a variable."}, {"sha": "96610dbf5eda5970a65acd552314aa947edc7e32", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -8,7 +8,7 @@ use test_utils::mark;\n \n use crate::{\n     utils::{render_snippet, Cursor, FamousDefs},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: fill_match_arms\n@@ -103,24 +103,30 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     }\n \n     let target = match_expr.syntax().text_range();\n-    acc.add(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |builder| {\n-        let new_arm_list = match_arm_list.remove_placeholder();\n-        let n_old_arms = new_arm_list.arms().count();\n-        let new_arm_list = new_arm_list.append_arms(missing_arms);\n-        let first_new_arm = new_arm_list.arms().nth(n_old_arms);\n-        let old_range = match_arm_list.syntax().text_range();\n-        match (first_new_arm, ctx.config.snippet_cap) {\n-            (Some(first_new_arm), Some(cap)) => {\n-                let snippet = render_snippet(\n-                    cap,\n-                    new_arm_list.syntax(),\n-                    Cursor::Before(first_new_arm.syntax()),\n-                );\n-                builder.replace_snippet(cap, old_range, snippet);\n-            }\n-            _ => builder.replace(old_range, new_arm_list.to_string()),\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"fill_match_arms\"),\n+        AssistKind::RefactorRewrite,\n+        \"Fill match arms\",\n+        target,\n+        |builder| {\n+            let new_arm_list = match_arm_list.remove_placeholder();\n+            let n_old_arms = new_arm_list.arms().count();\n+            let new_arm_list = new_arm_list.append_arms(missing_arms);\n+            let first_new_arm = new_arm_list.arms().nth(n_old_arms);\n+            let old_range = match_arm_list.syntax().text_range();\n+            match (first_new_arm, ctx.config.snippet_cap) {\n+                (Some(first_new_arm), Some(cap)) => {\n+                    let snippet = render_snippet(\n+                        cap,\n+                        new_arm_list.syntax(),\n+                        Cursor::Before(first_new_arm.syntax()),\n+                    );\n+                    builder.replace_snippet(cap, old_range, snippet);\n+                }\n+                _ => builder.replace(old_range, new_arm_list.to_string()),\n+            }\n+        },\n+    )\n }\n \n fn is_variant_missing(existing_arms: &mut Vec<MatchArm>, var: &Pat) -> bool {"}, {"sha": "9c6f9efc28f060db742f0d1ccf5a521d48756c2e", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -2,7 +2,7 @@ use hir::{db::HirDatabase, HasSource, HasVisibility, PathResolution};\n use ra_db::FileId;\n use ra_syntax::{ast, AstNode, TextRange, TextSize};\n \n-use crate::{utils::vis_offset, AssistContext, AssistId, Assists};\n+use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n \n // FIXME: this really should be a fix for diagnostic, rather than an assist.\n \n@@ -58,7 +58,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         Some(name) => format!(\"Change visibility of {} to {}\", name, missing_visibility),\n     };\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+    acc.add(AssistId(\"fix_visibility\"), AssistKind::QuickFix, assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n@@ -101,7 +101,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let assist_label =\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+    acc.add(AssistId(\"fix_visibility\"), AssistKind::QuickFix, assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),"}, {"sha": "aee55762ff86ce448d1d4bd0175bded3aeca1c92", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: flip_binexpr\n //\n@@ -33,13 +33,19 @@ pub(crate) fn flip_binexpr(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    acc.add(AssistId(\"flip_binexpr\"), \"Flip binary expression\", op_range, |edit| {\n-        if let FlipAction::FlipAndReplaceOp(new_op) = action {\n-            edit.replace(op_range, new_op);\n-        }\n-        edit.replace(lhs.text_range(), rhs.text());\n-        edit.replace(rhs.text_range(), lhs.text());\n-    })\n+    acc.add(\n+        AssistId(\"flip_binexpr\"),\n+        AssistKind::RefactorRewrite,\n+        \"Flip binary expression\",\n+        op_range,\n+        |edit| {\n+            if let FlipAction::FlipAndReplaceOp(new_op) = action {\n+                edit.replace(op_range, new_op);\n+            }\n+            edit.replace(lhs.text_range(), rhs.text());\n+            edit.replace(rhs.text_range(), lhs.text());\n+        },\n+    )\n }\n \n enum FlipAction {"}, {"sha": "9971ffa713013b8fac595c5804cb5a8f278e0f29", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{algo::non_trivia_sibling, Direction, T};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: flip_comma\n //\n@@ -28,10 +28,16 @@ pub(crate) fn flip_comma(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n-    acc.add(AssistId(\"flip_comma\"), \"Flip comma\", comma.text_range(), |edit| {\n-        edit.replace(prev.text_range(), next.to_string());\n-        edit.replace(next.text_range(), prev.to_string());\n-    })\n+    acc.add(\n+        AssistId(\"flip_comma\"),\n+        AssistKind::RefactorRewrite,\n+        \"Flip comma\",\n+        comma.text_range(),\n+        |edit| {\n+            edit.replace(prev.text_range(), next.to_string());\n+            edit.replace(next.text_range(), prev.to_string());\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "192f70ccb818e1c86b495efd41453500250b03d4", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     Direction, T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: flip_trait_bound\n //\n@@ -33,10 +33,16 @@ pub(crate) fn flip_trait_bound(acc: &mut Assists, ctx: &AssistContext) -> Option\n     );\n \n     let target = plus.text_range();\n-    acc.add(AssistId(\"flip_trait_bound\"), \"Flip trait bounds\", target, |edit| {\n-        edit.replace(before.text_range(), after.to_string());\n-        edit.replace(after.text_range(), before.to_string());\n-    })\n+    acc.add(\n+        AssistId(\"flip_trait_bound\"),\n+        AssistKind::RefactorRewrite,\n+        \"Flip trait bounds\",\n+        target,\n+        |edit| {\n+            edit.replace(before.text_range(), after.to_string());\n+            edit.replace(after.text_range(), before.to_string());\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "f1bd8b46d8c33c8895868655e43fc67b7dd21c9b", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -7,7 +7,7 @@ use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: inline_local_variable\n@@ -110,13 +110,20 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n     let init_in_paren = format!(\"({})\", &init_str);\n \n     let target = bind_pat.syntax().text_range();\n-    acc.add(AssistId(\"inline_local_variable\"), \"Inline variable\", target, move |builder| {\n-        builder.delete(delete_range);\n-        for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n-            let replacement = if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n-            builder.replace(desc.file_range.range, replacement)\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"inline_local_variable\"),\n+        AssistKind::RefactorInline,\n+        \"Inline variable\",\n+        target,\n+        move |builder| {\n+            builder.delete(delete_range);\n+            for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n+                let replacement =\n+                    if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n+                builder.replace(desc.file_range.range, replacement)\n+            }\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "3742748240607e87a2f808613f97ef3d0e8facdb", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{assist_context::AssistBuilder, AssistContext, AssistId, Assists};\n+use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n \n static ASSIST_NAME: &str = \"introduce_named_lifetime\";\n static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n@@ -83,7 +83,7 @@ fn generate_fn_def_assist(\n             _ => return None,\n         }\n     };\n-    acc.add(AssistId(ASSIST_NAME), ASSIST_LABEL, lifetime_loc, |builder| {\n+    acc.add(AssistId(ASSIST_NAME), AssistKind::Refactor, ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(fn_def, builder, end_of_fn_ident, new_lifetime_param);\n         builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n         loc_needing_lifetime.map(|loc| builder.insert(loc, format!(\"'{} \", new_lifetime_param)));\n@@ -98,7 +98,7 @@ fn generate_impl_def_assist(\n ) -> Option<()> {\n     let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.type_param_list())?;\n     let end_of_impl_kw = impl_def.impl_token()?.text_range().end();\n-    acc.add(AssistId(ASSIST_NAME), ASSIST_LABEL, lifetime_loc, |builder| {\n+    acc.add(AssistId(ASSIST_NAME), AssistKind::Refactor, ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(impl_def, builder, end_of_impl_kw, new_lifetime_param);\n         builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n     })"}, {"sha": "eebb2364d0dab46e8cc9eb396808d1cdf6458917", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::invert_boolean_expression,\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: invert_if\n@@ -54,7 +54,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let else_node = else_block.syntax();\n     let else_range = else_node.text_range();\n     let then_range = then_node.text_range();\n-    acc.add(AssistId(\"invert_if\"), \"Invert if\", if_range, |edit| {\n+    acc.add(AssistId(\"invert_if\"), AssistKind::RefactorRewrite, \"Invert if\", if_range, |edit| {\n         edit.replace(cond_range, flip_cond.syntax().text());\n         edit.replace(else_range, then_node.text());\n         edit.replace(then_range, else_node.text());"}, {"sha": "b0458e17f8cc3463f6131589f072bfc1914a8c92", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: merge_imports\n@@ -56,9 +56,15 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     };\n \n     let target = tree.syntax().text_range();\n-    acc.add(AssistId(\"merge_imports\"), \"Merge imports\", target, |builder| {\n-        builder.rewrite(rewriter);\n-    })\n+    acc.add(\n+        AssistId(\"merge_imports\"),\n+        AssistKind::RefactorRewrite,\n+        \"Merge imports\",\n+        target,\n+        |builder| {\n+            builder.rewrite(rewriter);\n+        },\n+    )\n }\n \n fn next_prev() -> impl Iterator<Item = Direction> {"}, {"sha": "f0f11a04679afc6057afaba148bddc251b272426", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n     Direction,\n };\n \n-use crate::{AssistContext, AssistId, Assists, TextRange};\n+use crate::{AssistContext, AssistId, AssistKind, Assists, TextRange};\n \n // Assist: merge_match_arms\n //\n@@ -59,25 +59,31 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n \n-    acc.add(AssistId(\"merge_match_arms\"), \"Merge match arms\", current_text_range, |edit| {\n-        let pats = if arms_to_merge.iter().any(contains_placeholder) {\n-            \"_\".into()\n-        } else {\n-            arms_to_merge\n-                .iter()\n-                .filter_map(ast::MatchArm::pat)\n-                .map(|x| x.syntax().to_string())\n-                .collect::<Vec<String>>()\n-                .join(\" | \")\n-        };\n-\n-        let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n-\n-        let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n-        let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n-\n-        edit.replace(TextRange::new(start, end), arm);\n-    })\n+    acc.add(\n+        AssistId(\"merge_match_arms\"),\n+        AssistKind::RefactorRewrite,\n+        \"Merge match arms\",\n+        current_text_range,\n+        |edit| {\n+            let pats = if arms_to_merge.iter().any(contains_placeholder) {\n+                \"_\".into()\n+            } else {\n+                arms_to_merge\n+                    .iter()\n+                    .filter_map(ast::MatchArm::pat)\n+                    .map(|x| x.syntax().to_string())\n+                    .collect::<Vec<String>>()\n+                    .join(\" | \")\n+            };\n+\n+            let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n+\n+            let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n+            let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n+\n+            edit.replace(TextRange::new(start, end), arm);\n+        },\n+    )\n }\n \n fn contains_placeholder(a: &ast::MatchArm) -> bool {"}, {"sha": "bcedd39a8210856aa1bf29ff90349bb20c192669", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: move_bounds_to_where_clause\n //\n@@ -50,29 +50,37 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n     };\n \n     let target = type_param_list.syntax().text_range();\n-    acc.add(AssistId(\"move_bounds_to_where_clause\"), \"Move to where clause\", target, |edit| {\n-        let new_params = type_param_list\n-            .type_params()\n-            .filter(|it| it.type_bound_list().is_some())\n-            .map(|type_param| {\n-                let without_bounds = type_param.remove_bounds();\n-                (type_param, without_bounds)\n-            });\n-\n-        let new_type_param_list = type_param_list.replace_descendants(new_params);\n-        edit.replace_ast(type_param_list.clone(), new_type_param_list);\n-\n-        let where_clause = {\n-            let predicates = type_param_list.type_params().filter_map(build_predicate);\n-            make::where_clause(predicates)\n-        };\n-\n-        let to_insert = match anchor.prev_sibling_or_token() {\n-            Some(ref elem) if elem.kind() == WHITESPACE => format!(\"{} \", where_clause.syntax()),\n-            _ => format!(\" {}\", where_clause.syntax()),\n-        };\n-        edit.insert(anchor.text_range().start(), to_insert);\n-    })\n+    acc.add(\n+        AssistId(\"move_bounds_to_where_clause\"),\n+        AssistKind::RefactorRewrite,\n+        \"Move to where clause\",\n+        target,\n+        |edit| {\n+            let new_params = type_param_list\n+                .type_params()\n+                .filter(|it| it.type_bound_list().is_some())\n+                .map(|type_param| {\n+                    let without_bounds = type_param.remove_bounds();\n+                    (type_param, without_bounds)\n+                });\n+\n+            let new_type_param_list = type_param_list.replace_descendants(new_params);\n+            edit.replace_ast(type_param_list.clone(), new_type_param_list);\n+\n+            let where_clause = {\n+                let predicates = type_param_list.type_params().filter_map(build_predicate);\n+                make::where_clause(predicates)\n+            };\n+\n+            let to_insert = match anchor.prev_sibling_or_token() {\n+                Some(ref elem) if elem.kind() == WHITESPACE => {\n+                    format!(\"{} \", where_clause.syntax())\n+                }\n+                _ => format!(\" {}\", where_clause.syntax()),\n+            };\n+            edit.insert(anchor.text_range().start(), to_insert);\n+        },\n+    )\n }\n \n fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {"}, {"sha": "7f3aaf4f7fd7831d219d4ed3fdc27b758824faef", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     SyntaxKind::WHITESPACE,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: move_guard_to_arm_body\n //\n@@ -40,17 +40,23 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n     let target = guard.syntax().text_range();\n-    acc.add(AssistId(\"move_guard_to_arm_body\"), \"Move guard to arm body\", target, |edit| {\n-        match space_before_guard {\n-            Some(element) if element.kind() == WHITESPACE => {\n-                edit.delete(element.text_range());\n-            }\n-            _ => (),\n-        };\n+    acc.add(\n+        AssistId(\"move_guard_to_arm_body\"),\n+        AssistKind::RefactorExtract,\n+        \"Move guard to arm body\",\n+        target,\n+        |edit| {\n+            match space_before_guard {\n+                Some(element) if element.kind() == WHITESPACE => {\n+                    edit.delete(element.text_range());\n+                }\n+                _ => (),\n+            };\n \n-        edit.delete(guard.syntax().text_range());\n-        edit.replace_node_and_indent(arm_expr.syntax(), buf);\n-    })\n+            edit.delete(guard.syntax().text_range());\n+            edit.replace_node_and_indent(arm_expr.syntax(), buf);\n+        },\n+    )\n }\n \n // Assist: move_arm_cond_to_match_guard\n@@ -101,6 +107,7 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n     let target = if_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"move_arm_cond_to_match_guard\"),\n+        AssistKind::RefactorRewrite,\n         \"Move condition to match guard\",\n         target,\n         |edit| {"}, {"sha": "8d0dac52858d8ff45e11af96bd926fffd7a909f9", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     TextSize,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: make_raw_string\n //\n@@ -26,14 +26,23 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n-    acc.add(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", target, |edit| {\n-        let max_hash_streak = count_hashes(&value);\n-        let mut hashes = String::with_capacity(max_hash_streak + 1);\n-        for _ in 0..hashes.capacity() {\n-            hashes.push('#');\n-        }\n-        edit.replace(token.syntax().text_range(), format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes));\n-    })\n+    acc.add(\n+        AssistId(\"make_raw_string\"),\n+        AssistKind::RefactorRewrite,\n+        \"Rewrite as raw string\",\n+        target,\n+        |edit| {\n+            let max_hash_streak = count_hashes(&value);\n+            let mut hashes = String::with_capacity(max_hash_streak + 1);\n+            for _ in 0..hashes.capacity() {\n+                hashes.push('#');\n+            }\n+            edit.replace(\n+                token.syntax().text_range(),\n+                format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes),\n+            );\n+        },\n+    )\n }\n \n // Assist: make_usual_string\n@@ -55,11 +64,17 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n-    acc.add(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", target, |edit| {\n-        // parse inside string to escape `\"`\n-        let escaped = value.escape_default().to_string();\n-        edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n-    })\n+    acc.add(\n+        AssistId(\"make_usual_string\"),\n+        AssistKind::RefactorRewrite,\n+        \"Rewrite as regular string\",\n+        target,\n+        |edit| {\n+            // parse inside string to escape `\"`\n+            let escaped = value.escape_default().to_string();\n+            edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n+        },\n+    )\n }\n \n // Assist: add_hash\n@@ -80,7 +95,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let target = token.text_range();\n-    acc.add(AssistId(\"add_hash\"), \"Add # to raw string\", target, |edit| {\n+    acc.add(AssistId(\"add_hash\"), AssistKind::Refactor, \"Add # to raw string\", target, |edit| {\n         edit.insert(token.text_range().start() + TextSize::of('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n     })\n@@ -109,18 +124,24 @@ pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n     let target = token.text_range();\n-    acc.add(AssistId(\"remove_hash\"), \"Remove hash from raw string\", target, |edit| {\n-        let result = &text[2..text.len() - 1];\n-        let result = if result.starts_with('\\\"') {\n-            // FIXME: this logic is wrong, not only the last has has to handled specially\n-            // no more hash, escape\n-            let internal_str = &result[1..result.len() - 1];\n-            format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\n-        } else {\n-            result.to_owned()\n-        };\n-        edit.replace(token.text_range(), format!(\"r{}\", result));\n-    })\n+    acc.add(\n+        AssistId(\"remove_hash\"),\n+        AssistKind::RefactorRewrite,\n+        \"Remove hash from raw string\",\n+        target,\n+        |edit| {\n+            let result = &text[2..text.len() - 1];\n+            let result = if result.starts_with('\\\"') {\n+                // FIXME: this logic is wrong, not only the last has has to handled specially\n+                // no more hash, escape\n+                let internal_str = &result[1..result.len() - 1];\n+                format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\n+            } else {\n+                result.to_owned()\n+            };\n+            edit.replace(token.text_range(), format!(\"r{}\", result));\n+        },\n+    )\n }\n \n fn count_hashes(s: &str) -> usize {"}, {"sha": "e5571676f0ca9d0132937db83eb6136d61267460", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     TextSize, T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: remove_dbg\n //\n@@ -38,7 +38,7 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = macro_call.syntax().text_range();\n-    acc.add(AssistId(\"remove_dbg\"), \"Remove dbg!()\", target, |builder| {\n+    acc.add(AssistId(\"remove_dbg\"), AssistKind::Refactor, \"Remove dbg!()\", target, |builder| {\n         builder.replace(macro_range, macro_content);\n     })\n }"}, {"sha": "a8173694a8fd53f4f5adf8bdd4b417977aa0c871", "filename": "crates/ra_assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{SyntaxKind, TextRange, T};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: remove_mut\n //\n@@ -26,7 +26,13 @@ pub(crate) fn remove_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = mut_token.text_range();\n-    acc.add(AssistId(\"remove_mut\"), \"Remove `mut` keyword\", target, |builder| {\n-        builder.delete(TextRange::new(delete_from, delete_to));\n-    })\n+    acc.add(\n+        AssistId(\"remove_mut\"),\n+        AssistKind::Refactor,\n+        \"Remove `mut` keyword\",\n+        target,\n+        |builder| {\n+            builder.delete(TextRange::new(delete_from, delete_to));\n+        },\n+    )\n }"}, {"sha": "4a542a5d702941b43ee9426c852aae1204c79fef", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -5,7 +5,7 @@ use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{algo, ast, match_ast, AstNode, SyntaxKind, SyntaxKind::*, SyntaxNode};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: reorder_fields\n //\n@@ -42,11 +42,17 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     }\n \n     let target = record.syntax().text_range();\n-    acc.add(AssistId(\"reorder_fields\"), \"Reorder record fields\", target, |edit| {\n-        for (old, new) in fields.iter().zip(&sorted_fields) {\n-            algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"reorder_fields\"),\n+        AssistKind::RefactorRewrite,\n+        \"Reorder record fields\",\n+        target,\n+        |edit| {\n+            for (old, new) in fields.iter().zip(&sorted_fields) {\n+                algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n+            }\n+        },\n+    )\n }\n \n fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {"}, {"sha": "9ef121a4ccf75e00a36d6b4ca1b56013d0b79c20", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n+use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_if_let_with_match\n //\n@@ -48,29 +48,36 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     };\n \n     let target = if_expr.syntax().text_range();\n-    acc.add(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", target, move |edit| {\n-        let match_expr = {\n-            let then_arm = {\n-                let then_block = then_block.reset_indent().indent(IndentLevel(1));\n-                let then_expr = unwrap_trivial_block(then_block);\n-                make::match_arm(vec![pat.clone()], then_expr)\n+    acc.add(\n+        AssistId(\"replace_if_let_with_match\"),\n+        AssistKind::RefactorRewrite,\n+        \"Replace with match\",\n+        target,\n+        move |edit| {\n+            let match_expr = {\n+                let then_arm = {\n+                    let then_block = then_block.reset_indent().indent(IndentLevel(1));\n+                    let then_expr = unwrap_trivial_block(then_block);\n+                    make::match_arm(vec![pat.clone()], then_expr)\n+                };\n+                let else_arm = {\n+                    let pattern = ctx\n+                        .sema\n+                        .type_of_pat(&pat)\n+                        .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n+                        .map(|it| it.sad_pattern())\n+                        .unwrap_or_else(|| make::placeholder_pat().into());\n+                    let else_expr = unwrap_trivial_block(else_block);\n+                    make::match_arm(vec![pattern], else_expr)\n+                };\n+                let match_expr =\n+                    make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]));\n+                match_expr.indent(IndentLevel::from_node(if_expr.syntax()))\n             };\n-            let else_arm = {\n-                let pattern = ctx\n-                    .sema\n-                    .type_of_pat(&pat)\n-                    .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n-                    .map(|it| it.sad_pattern())\n-                    .unwrap_or_else(|| make::placeholder_pat().into());\n-                let else_expr = unwrap_trivial_block(else_block);\n-                make::match_arm(vec![pattern], else_expr)\n-            };\n-            let match_expr = make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]));\n-            match_expr.indent(IndentLevel::from_node(if_expr.syntax()))\n-        };\n \n-        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n-    })\n+            edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "174ff1fb4e8c92603043e041ba6761e2884687f0", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n     AstNode, T,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n+use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_let_with_if_let\n //\n@@ -44,24 +44,32 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty).map(|it| it.happy_case());\n \n     let target = let_kw.text_range();\n-    acc.add(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", target, |edit| {\n-        let with_placeholder: ast::Pat = match happy_variant {\n-            None => make::placeholder_pat().into(),\n-            Some(var_name) => make::tuple_struct_pat(\n-                make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n-                once(make::placeholder_pat().into()),\n-            )\n-            .into(),\n-        };\n-        let block = make::block_expr(None, None).indent(IndentLevel::from_node(let_stmt.syntax()));\n-        let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n-        let stmt = make::expr_stmt(if_);\n+    acc.add(\n+        AssistId(\"replace_let_with_if_let\"),\n+        AssistKind::RefactorRewrite,\n+        \"Replace with if-let\",\n+        target,\n+        |edit| {\n+            let with_placeholder: ast::Pat = match happy_variant {\n+                None => make::placeholder_pat().into(),\n+                Some(var_name) => make::tuple_struct_pat(\n+                    make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n+                    once(make::placeholder_pat().into()),\n+                )\n+                .into(),\n+            };\n+            let block =\n+                make::block_expr(None, None).indent(IndentLevel::from_node(let_stmt.syntax()));\n+            let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n+            let stmt = make::expr_stmt(if_);\n \n-        let placeholder = stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n-        let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n+            let placeholder =\n+                stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n+            let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n \n-        edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n-    })\n+            edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "5e06f7f0e5208222f6f7d532d541201cf10dbfe2", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SmolStr, SyntaxNo\n \n use crate::{\n     utils::{find_insert_use_container, insert_use_statement},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: replace_qualified_name_with_use\n@@ -38,6 +38,7 @@ pub(crate) fn replace_qualified_name_with_use(\n     let target = path.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\"),\n+        AssistKind::RefactorRewrite,\n         \"Replace qualified path with use\",\n         target,\n         |builder| {"}, {"sha": "5f9705be1a1d79ffa745e393fec366f4c3b75e87", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     utils::{render_snippet, Cursor, TryEnum},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: replace_unwrap_with_match\n@@ -46,37 +46,44 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n     let ty = ctx.sema.type_of_expr(&caller)?;\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n     let target = method_call.syntax().text_range();\n-    acc.add(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", target, |builder| {\n-        let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n-        let it = make::bind_pat(make::name(\"a\")).into();\n-        let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n+    acc.add(\n+        AssistId(\"replace_unwrap_with_match\"),\n+        AssistKind::RefactorRewrite,\n+        \"Replace unwrap with match\",\n+        target,\n+        |builder| {\n+            let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n+            let it = make::bind_pat(make::name(\"a\")).into();\n+            let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n-        let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n-        let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+            let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n+            let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n-        let unreachable_call = make::expr_unreachable();\n-        let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n+            let unreachable_call = make::expr_unreachable();\n+            let err_arm =\n+                make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n-        let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-        let match_expr = make::expr_match(caller.clone(), match_arm_list)\n-            .indent(IndentLevel::from_node(method_call.syntax()));\n+            let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n+            let match_expr = make::expr_match(caller.clone(), match_arm_list)\n+                .indent(IndentLevel::from_node(method_call.syntax()));\n \n-        let range = method_call.syntax().text_range();\n-        match ctx.config.snippet_cap {\n-            Some(cap) => {\n-                let err_arm = match_expr\n-                    .syntax()\n-                    .descendants()\n-                    .filter_map(ast::MatchArm::cast)\n-                    .last()\n-                    .unwrap();\n-                let snippet =\n-                    render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n-                builder.replace_snippet(cap, range, snippet)\n+            let range = method_call.syntax().text_range();\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let err_arm = match_expr\n+                        .syntax()\n+                        .descendants()\n+                        .filter_map(ast::MatchArm::cast)\n+                        .last()\n+                        .unwrap();\n+                    let snippet =\n+                        render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n+                    builder.replace_snippet(cap, range, snippet)\n+                }\n+                None => builder.replace(range, match_expr.to_string()),\n             }\n-            None => builder.replace(range, match_expr.to_string()),\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "c0cf8d923a0b77ba0a3e19ad8d16eca5f9276b22", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -2,7 +2,7 @@ use std::iter::successors;\n \n use ra_syntax::{ast, AstNode, T};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: split_import\n //\n@@ -28,7 +28,7 @@ pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     }\n \n     let target = colon_colon.text_range();\n-    acc.add(AssistId(\"split_import\"), \"Split import\", target, |edit| {\n+    acc.add(AssistId(\"split_import\"), AssistKind::RefactorExtract, \"Split import\", target, |edit| {\n         edit.replace_ast(use_tree, new_tree);\n     })\n }"}, {"sha": "a66fba7c386e8c112934a870c159317d9d088967", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n     AstNode, TextRange, T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: unwrap_block\n //\n@@ -50,43 +50,55 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     let ancestor_then_branch = ancestor.then_branch()?;\n \n                     let target = then_branch.syntax().text_range();\n-                    return acc.add(assist_id, assist_label, target, |edit| {\n-                        let range_to_del_else_if = TextRange::new(\n-                            ancestor_then_branch.syntax().text_range().end(),\n-                            l_curly_token.text_range().start(),\n-                        );\n-                        let range_to_del_rest = TextRange::new(\n-                            then_branch.syntax().text_range().end(),\n-                            if_expr.syntax().text_range().end(),\n-                        );\n-\n-                        edit.delete(range_to_del_rest);\n-                        edit.delete(range_to_del_else_if);\n-                        edit.replace(\n-                            target,\n-                            update_expr_string(then_branch.to_string(), &[' ', '{']),\n-                        );\n-                    });\n+                    return acc.add(\n+                        assist_id,\n+                        AssistKind::Refactor,\n+                        assist_label,\n+                        target,\n+                        |edit| {\n+                            let range_to_del_else_if = TextRange::new(\n+                                ancestor_then_branch.syntax().text_range().end(),\n+                                l_curly_token.text_range().start(),\n+                            );\n+                            let range_to_del_rest = TextRange::new(\n+                                then_branch.syntax().text_range().end(),\n+                                if_expr.syntax().text_range().end(),\n+                            );\n+\n+                            edit.delete(range_to_del_rest);\n+                            edit.delete(range_to_del_else_if);\n+                            edit.replace(\n+                                target,\n+                                update_expr_string(then_branch.to_string(), &[' ', '{']),\n+                            );\n+                        },\n+                    );\n                 }\n             } else {\n                 let target = block.syntax().text_range();\n-                return acc.add(assist_id, assist_label, target, |edit| {\n-                    let range_to_del = TextRange::new(\n-                        then_branch.syntax().text_range().end(),\n-                        l_curly_token.text_range().start(),\n-                    );\n+                return acc.add(\n+                    assist_id,\n+                    AssistKind::RefactorRewrite,\n+                    assist_label,\n+                    target,\n+                    |edit| {\n+                        let range_to_del = TextRange::new(\n+                            then_branch.syntax().text_range().end(),\n+                            l_curly_token.text_range().start(),\n+                        );\n \n-                    edit.delete(range_to_del);\n-                    edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n-                });\n+                        edit.delete(range_to_del);\n+                        edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n+                    },\n+                );\n             }\n         }\n         _ => return None,\n     };\n \n     let unwrapped = unwrap_trivial_block(block);\n     let target = unwrapped.syntax().text_range();\n-    acc.add(assist_id, assist_label, target, |builder| {\n+    acc.add(assist_id, AssistKind::RefactorRewrite, assist_label, target, |builder| {\n         builder.replace(\n             parent.syntax().text_range(),\n             update_expr_string(unwrapped.to_string(), &[' ', '{', '\\n']),"}, {"sha": "dd26e192fdb37a5831ed924a8d577311f466d33e", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -37,6 +37,7 @@ pub struct GroupLabel(pub String);\n #[derive(Debug, Clone)]\n pub struct Assist {\n     pub id: AssistId,\n+    pub kind: AssistKind,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n     pub group: Option<GroupLabel>,\n@@ -51,6 +52,18 @@ pub struct ResolvedAssist {\n     pub source_change: SourceChange,\n }\n \n+#[derive(Debug, Copy, Clone)]\n+pub enum AssistKind {\n+    None,\n+    QuickFix,\n+    Refactor,\n+    RefactorExtract,\n+    RefactorInline,\n+    RefactorRewrite,\n+    Source,\n+    OrganizeImports,\n+}\n+\n impl Assist {\n     /// Return all the assists applicable at the given position.\n     ///\n@@ -86,13 +99,14 @@ impl Assist {\n \n     pub(crate) fn new(\n         id: AssistId,\n+        kind: AssistKind,\n         label: String,\n         group: Option<GroupLabel>,\n         target: TextRange,\n     ) -> Assist {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        Assist { id, label, group, target }\n+        Assist { id, kind, label, group, target }\n     }\n }\n "}, {"sha": "dcfa186dc2d52a832254bd77e096d981bd5cc4d9", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -76,7 +76,7 @@ pub use crate::{\n };\n \n pub use hir::{Documentation, Semantics};\n-pub use ra_assists::{Assist, AssistConfig, AssistId, ResolvedAssist};\n+pub use ra_assists::{Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist};\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n     SourceRootId,"}, {"sha": "c3a0bff5833d07ebc1a4eef6637dd15b0c941fa3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b98c16a034620913f3dbc67bd3f48ad2686face7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b98c16a034620913f3dbc67bd3f48ad2686face7", "patch": "@@ -4,9 +4,9 @@ use std::path::{self, Path};\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n use ra_ide::{\n-    Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n-    FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, Indel,\n-    InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n+    Assist, AssistKind, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold,\n+    FoldKind, FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n+    Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n     ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n@@ -627,6 +627,20 @@ pub(crate) fn call_hierarchy_item(\n     Ok(lsp_types::CallHierarchyItem { name, kind, tags: None, detail, uri, range, selection_range })\n }\n \n+pub(crate) fn code_action_kind(kind: AssistKind) -> String {\n+    match kind {\n+        AssistKind::None => lsp_types::code_action_kind::EMPTY,\n+        AssistKind::QuickFix => lsp_types::code_action_kind::QUICKFIX,\n+        AssistKind::Refactor => lsp_types::code_action_kind::REFACTOR,\n+        AssistKind::RefactorExtract => lsp_types::code_action_kind::REFACTOR_EXTRACT,\n+        AssistKind::RefactorInline => lsp_types::code_action_kind::REFACTOR_INLINE,\n+        AssistKind::RefactorRewrite => lsp_types::code_action_kind::REFACTOR_REWRITE,\n+        AssistKind::Source => lsp_types::code_action_kind::SOURCE,\n+        AssistKind::OrganizeImports => lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS,\n+    }\n+    .to_string()\n+}\n+\n pub(crate) fn unresolved_code_action(\n     snap: &GlobalStateSnapshot,\n     assist: Assist,\n@@ -636,7 +650,7 @@ pub(crate) fn unresolved_code_action(\n         title: assist.label,\n         id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n         group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(String::new()),\n+        kind: Some(code_action_kind(assist.kind)),\n         edit: None,\n         command: None,\n     };"}]}