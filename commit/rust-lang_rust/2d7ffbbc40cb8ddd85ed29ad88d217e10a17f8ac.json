{"sha": "2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "node_id": "C_kwDOAAsO6NoAKDJkN2ZmYmJjNDBjYjhkZGQ4NWVkMjlhZDg4ZDIxN2UxMGExN2Y4YWM", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-21T21:08:54Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-31T19:23:47Z"}, "message": "Factor convenience functions out of main printer implementation", "tree": {"sha": "6d8a234464e843b5b000f8e5e84560c5c4b6425a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8a234464e843b5b000f8e5e84560c5c4b6425a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmH4N0UACgkQ+boUO5X/\nbYLKeg//UAOVvu6CRYCV3/2HJYUFGTM56m0dYw4JpEvgGyT1ToCKqNxcWnHorT84\nb/uJ8XapCmnAoKt+eobI7PmdvIO1aD7N+MBs9DtWjqtDudovWn+N80DKj+dai9Xk\nJEl/En/9Becd0PnzmAfumE/5jB88zd6gZueA14E7mOEE7dMeivf8YRja9iuZdxhX\noa7GQ7aqB+ItrFZcbMwRjftwmOk1agUBMos+CpNTJOKoe5exZmwVOITbFV7PpXs+\negkFho9Fr9xLE1Hw+A+XPUcgRz7S6ByawKnReCNtbz9K85o1IwUpq/o2RrrMOQ9O\n0NnZOmJS3O6daWezUpGXVgLid7n9y0NzdGOkr6Bmq3HQoLEn2pW3AYqF3yXzgujz\npGG8ycJ0fBTDp+AFeLSHHhOJqIFx/mWDzhzJobcdupb4xq6Po7gePpFO3s9OyaFb\noBh2LPGr2RvOwfn6LoHA5DK1x9CjY4uPf/NuPkg8QsRG7WWiHvaRFpNPO0tgQg5N\nsH/KUQNl1NS1vHYiIGbOoGgKCxZ1X2UdFraESBiEqUt2EewHkWze3PqQh1wDavtz\n/7jxOh6N3ltnW5IMT3dJiuZw1AnRtq69PmrAKQU84nT2QVvRCNYA/yBIzOhXCHlm\nSObo3NwhOEsGrqxiwEs5UGDXYgg6STRsm0fO6PMDYEoB1dS5VmA=\n=aRRV\n-----END PGP SIGNATURE-----", "payload": "tree 6d8a234464e843b5b000f8e5e84560c5c4b6425a\nparent 24b8bb13bff98bb747cd403b86596af43aceee78\nauthor David Tolnay <dtolnay@gmail.com> 1642799334 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1643657027 -0800\n\nFactor convenience functions out of main printer implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "html_url": "https://github.com/rust-lang/rust/commit/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24b8bb13bff98bb747cd403b86596af43aceee78", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b8bb13bff98bb747cd403b86596af43aceee78", "html_url": "https://github.com/rust-lang/rust/commit/24b8bb13bff98bb747cd403b86596af43aceee78"}], "stats": {"total": 153, "additions": 78, "deletions": 75}, "files": [{"sha": "eb27d5add9f37a6790389115ae77e96666057a12", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 1, "deletions": 75, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "patch": "@@ -132,6 +132,7 @@\n //! methods called `Printer::scan_*`, and the 'PRINT' process is the\n //! method called `Printer::print`.\n \n+mod convenience;\n mod ring;\n \n use ring::RingBuffer;\n@@ -185,12 +186,6 @@ pub enum Token {\n     End,\n }\n \n-impl Token {\n-    pub fn is_hardbreak_tok(&self) -> bool {\n-        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n-    }\n-}\n-\n #[derive(Copy, Clone)]\n enum PrintFrame {\n     Fits,\n@@ -439,73 +434,4 @@ impl Printer {\n         self.out.push_str(string);\n         self.space -= string.len() as isize;\n     }\n-\n-    // Convenience functions to talk to the printer.\n-\n-    /// \"raw box\"\n-    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken {\n-            indent: IndentStyle::Block { offset: indent as isize },\n-            breaks,\n-        })\n-    }\n-\n-    /// Inconsistent breaking box\n-    pub fn ibox(&mut self, indent: usize) {\n-        self.rbox(indent, Breaks::Inconsistent)\n-    }\n-\n-    /// Consistent breaking box\n-    pub fn cbox(&mut self, indent: usize) {\n-        self.rbox(indent, Breaks::Consistent)\n-    }\n-\n-    pub fn visual_align(&mut self) {\n-        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n-    }\n-\n-    pub fn break_offset(&mut self, n: usize, off: isize) {\n-        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n-    }\n-\n-    pub fn end(&mut self) {\n-        self.scan_end()\n-    }\n-\n-    pub fn eof(mut self) -> String {\n-        self.scan_eof();\n-        self.out\n-    }\n-\n-    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n-        let string = wrd.into();\n-        self.scan_string(string)\n-    }\n-\n-    fn spaces(&mut self, n: usize) {\n-        self.break_offset(n, 0)\n-    }\n-\n-    pub fn zerobreak(&mut self) {\n-        self.spaces(0)\n-    }\n-\n-    pub fn space(&mut self) {\n-        self.spaces(1)\n-    }\n-\n-    pub fn hardbreak(&mut self) {\n-        self.spaces(SIZE_INFINITY as usize)\n-    }\n-\n-    pub fn is_beginning_of_line(&self) -> bool {\n-        match self.last_token() {\n-            Some(last_token) => last_token.is_hardbreak_tok(),\n-            None => true,\n-        }\n-    }\n-\n-    pub fn hardbreak_tok_offset(off: isize) -> Token {\n-        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n-    }\n }"}, {"sha": "1b9ac705883afd571f5dbf5dcdf95a40c32c2828", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "patch": "@@ -0,0 +1,77 @@\n+use crate::pp::{BeginToken, BreakToken, Breaks, IndentStyle, Printer, Token, SIZE_INFINITY};\n+use std::borrow::Cow;\n+\n+impl Printer {\n+    /// \"raw box\"\n+    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n+        self.scan_begin(BeginToken {\n+            indent: IndentStyle::Block { offset: indent as isize },\n+            breaks,\n+        })\n+    }\n+\n+    /// Inconsistent breaking box\n+    pub fn ibox(&mut self, indent: usize) {\n+        self.rbox(indent, Breaks::Inconsistent)\n+    }\n+\n+    /// Consistent breaking box\n+    pub fn cbox(&mut self, indent: usize) {\n+        self.rbox(indent, Breaks::Consistent)\n+    }\n+\n+    pub fn visual_align(&mut self) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n+    }\n+\n+    pub fn break_offset(&mut self, n: usize, off: isize) {\n+        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n+    }\n+\n+    pub fn end(&mut self) {\n+        self.scan_end()\n+    }\n+\n+    pub fn eof(mut self) -> String {\n+        self.scan_eof();\n+        self.out\n+    }\n+\n+    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n+        let string = wrd.into();\n+        self.scan_string(string)\n+    }\n+\n+    fn spaces(&mut self, n: usize) {\n+        self.break_offset(n, 0)\n+    }\n+\n+    pub fn zerobreak(&mut self) {\n+        self.spaces(0)\n+    }\n+\n+    pub fn space(&mut self) {\n+        self.spaces(1)\n+    }\n+\n+    pub fn hardbreak(&mut self) {\n+        self.spaces(SIZE_INFINITY as usize)\n+    }\n+\n+    pub fn is_beginning_of_line(&self) -> bool {\n+        match self.last_token() {\n+            Some(last_token) => last_token.is_hardbreak_tok(),\n+            None => true,\n+        }\n+    }\n+\n+    pub fn hardbreak_tok_offset(off: isize) -> Token {\n+        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n+    }\n+}\n+\n+impl Token {\n+    pub fn is_hardbreak_tok(&self) -> bool {\n+        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n+    }\n+}"}]}