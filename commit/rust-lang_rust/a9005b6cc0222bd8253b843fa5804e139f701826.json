{"sha": "a9005b6cc0222bd8253b843fa5804e139f701826", "node_id": "C_kwDOAAsO6NoAKGE5MDA1YjZjYzAyMjJiZDgyNTNiODQzZmE1ODA0ZTEzOWY3MDE4MjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-12-19T09:11:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-19T09:11:35Z"}, "message": "Rollup merge of #105864 - matthiaskrgr:compl, r=Nilstrieb\n\nclippy::complexity fixes\n\nfilter_next\nneedless_question_mark\nbind_instead_of_map\nmanual_find\nderivable_impls\nmap_identity\nredundant_slicing\nskip_while_next\nunnecessary_unwrap\nneedless_bool\n\nr? `@compiler-errors`", "tree": {"sha": "dc80787c60122ffd4957d8cafb54728a1614f3c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc80787c60122ffd4957d8cafb54728a1614f3c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9005b6cc0222bd8253b843fa5804e139f701826", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjoCrHCRBK7hj4Ov3rIwAAoQkIADd5pQWJSfkXySEl9SKULREH\ng+u69tZcIBJ7Svcv2yp6MSc/YGs8mk5LhZCMfp7ogTRMV8wtQtg8ffgFqMfpCJZB\n6ZMmuSxibPudkM78W4qnb1YZoRewusQyKa8sYfd1s4IzcVyb++Tl527jRvk3xB7t\nT22YhQ97aGoH1uVuSEEUldKhd+kP5qHft7HpfYkQ6nj3Dx2jGSTPFhErWfn6vhpf\nTWeb7LmbabmUUdr1hX1r0PDB2fYJW8yutRJl0g3cQZF4OcICAYM8h8n00FEwo0vn\n9SiKVE1mGzqawgq3ZNBIAo2s9CG7ALZBkL/ttd2zd4i2Bk1nY6NkhxAFMCMBzAw=\n=nUFq\n-----END PGP SIGNATURE-----\n", "payload": "tree dc80787c60122ffd4957d8cafb54728a1614f3c1\nparent 90035f130ecc9c8550b935cc9705531122746ee7\nparent 1da4a499122f59201cf761b79f9e8c6ded1cb91d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1671441095 +0530\ncommitter GitHub <noreply@github.com> 1671441095 +0530\n\nRollup merge of #105864 - matthiaskrgr:compl, r=Nilstrieb\n\nclippy::complexity fixes\n\nfilter_next\nneedless_question_mark\nbind_instead_of_map\nmanual_find\nderivable_impls\nmap_identity\nredundant_slicing\nskip_while_next\nunnecessary_unwrap\nneedless_bool\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9005b6cc0222bd8253b843fa5804e139f701826", "html_url": "https://github.com/rust-lang/rust/commit/a9005b6cc0222bd8253b843fa5804e139f701826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9005b6cc0222bd8253b843fa5804e139f701826/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90035f130ecc9c8550b935cc9705531122746ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90035f130ecc9c8550b935cc9705531122746ee7", "html_url": "https://github.com/rust-lang/rust/commit/90035f130ecc9c8550b935cc9705531122746ee7"}, {"sha": "1da4a499122f59201cf761b79f9e8c6ded1cb91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da4a499122f59201cf761b79f9e8c6ded1cb91d", "html_url": "https://github.com/rust-lang/rust/commit/1da4a499122f59201cf761b79f9e8c6ded1cb91d"}], "stats": {"total": 80, "additions": 26, "deletions": 54}, "files": [{"sha": "0ef784a4453dcf131193f9be757250671328b413", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.impl_trait_defs = current_impl_trait_defs;\n         self.impl_trait_bounds = current_impl_trait_bounds;\n \n-        debug_assert!(self.children.iter().find(|(id, _)| id == &def_id).is_none());\n+        debug_assert!(!self.children.iter().any(|(id, _)| id == &def_id));\n         self.children.push((def_id, hir::MaybeOwner::Owner(info)));\n     }\n "}, {"sha": "d8c22fbe59f015929ad04085baa1d6664e213ca3", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -2059,12 +2059,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> Option<InitIndex> {\n         let mpi = self.move_data.rev_lookup.find_local(local);\n         let ii = &self.move_data.init_path_map[mpi];\n-        for &index in ii {\n-            if flow_state.ever_inits.contains(index) {\n-                return Some(index);\n-            }\n-        }\n-        None\n+        ii.into_iter().find(|&&index| flow_state.ever_inits.contains(index)).copied()\n     }\n \n     /// Adds the place into the used mutable variables set"}, {"sha": "5bf45a81e4347cd7de59a42a80fdaaa796131bd6", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -233,8 +233,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // Set KCFI operand bundle\n         let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n         let kcfi_bundle =\n-            if self.tcx.sess.is_sanitizer_kcfi_enabled() && fn_abi.is_some() && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap());\n+            if self.tcx.sess.is_sanitizer_kcfi_enabled() && let Some(fn_abi) = fn_abi && is_indirect_call {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n                 Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n             } else {\n                 None"}, {"sha": "6eb120157da0205b34c762ec5787d2a9665bd9b0", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -123,7 +123,7 @@ fn try_filter_fat_archs<'a>(\n ) -> io::Result<Option<(&'a [u8], u64)>> {\n     let archs = archs.map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n \n-    let desired = match archs.iter().filter(|a| a.architecture() == target_arch).next() {\n+    let desired = match archs.iter().find(|a| a.architecture() == target_arch) {\n         Some(a) => a,\n         None => return Ok(None),\n     };"}, {"sha": "c9d179de39f391adecb9a14de7a98021d8e0347b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -1124,9 +1124,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let hir = self.tcx.hir();\n-        let cond_parent = hir.parent_iter(expr.hir_id).skip_while(|(_, node)| {\n-            matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Binary(op, _, _), .. }) if op.node == hir::BinOpKind::And)\n-        }).next();\n+        let cond_parent = hir.parent_iter(expr.hir_id).find(|(_, node)| {\n+            !matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Binary(op, _, _), .. }) if op.node == hir::BinOpKind::And)\n+        });\n         // Don't suggest:\n         //     `let Some(_) = a.is_some() && b`\n         //                     ++++++++++"}, {"sha": "da2c6fbc05f576f2a76128878891e828f51c546a", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -488,7 +488,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         // If this empty region is from a universe that can\n                         // name the placeholder, then the placeholder is\n                         // larger; otherwise, the only ancestor is `'static`.\n-                        if a_ui.can_name(placeholder.universe) { true } else { false }\n+                        return a_ui.can_name(placeholder.universe);\n                     }\n                 }\n             }"}, {"sha": "955c54e85157eb9279ab9f788701fb531a27ccbb", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -87,18 +87,12 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n \n /// The combined undo log for all the various unification tables. For each change to the storage\n /// for any kind of inference variable, we record an UndoLog entry in the vector here.\n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub(crate) struct InferCtxtUndoLogs<'tcx> {\n     logs: Vec<UndoLog<'tcx>>,\n     num_open_snapshots: usize,\n }\n \n-impl Default for InferCtxtUndoLogs<'_> {\n-    fn default() -> Self {\n-        Self { logs: Default::default(), num_open_snapshots: Default::default() }\n-    }\n-}\n-\n /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any\n /// action that is convertible into an UndoLog (per the From impls above).\n impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>"}, {"sha": "0e18ba73d7129da3bd04fc6b0852ec90f493de53", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -103,12 +103,7 @@ impl EffectiveVisibilities {\n \n     pub fn public_at_level(&self, id: LocalDefId) -> Option<Level> {\n         self.effective_vis(id).and_then(|effective_vis| {\n-            for level in Level::all_levels() {\n-                if effective_vis.is_public_at_level(level) {\n-                    return Some(level);\n-                }\n-            }\n-            None\n+            Level::all_levels().into_iter().find(|&level| effective_vis.is_public_at_level(level))\n         })\n     }\n "}, {"sha": "3a2bf051516554bc6f6acdf220f42a604a5de656", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -182,7 +182,7 @@ fn replace_flattened_locals<'tcx>(\n     let mut fragments = IndexVec::new();\n     for (k, v) in &replacements.fields {\n         fragments.ensure_contains_elem(k.local, || Vec::new());\n-        fragments[k.local].push((&k.projection[..], *v));\n+        fragments[k.local].push((k.projection, *v));\n     }\n     debug!(?fragments);\n "}, {"sha": "deeeb9af4eb9232b38a525b98cc0cdfc19924dde", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -595,8 +595,8 @@ fn check_recursion_limit<'tcx>(\n         let def_path_str = tcx.def_path_str(def_id);\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let mut path = PathBuf::new();\n-        let was_written = if written_to_path.is_some() {\n-            path = written_to_path.unwrap();\n+        let was_written = if let Some(written_to_path) = written_to_path {\n+            path = written_to_path;\n             Some(())\n         } else {\n             None"}, {"sha": "5333d3b8587ddaafa80c49336c50890d4f25af7a", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -277,8 +277,7 @@ impl<'a> Parser<'a> {\n                         if let Some(arg) = args\n                             .iter()\n                             .rev()\n-                            .skip_while(|arg| matches!(arg, AngleBracketedArg::Constraint(_)))\n-                            .next()\n+                            .find(|arg| !matches!(arg, AngleBracketedArg::Constraint(_)))\n                         {\n                             err.span_suggestion_verbose(\n                                 arg.span().shrink_to_hi(),"}, {"sha": "f5556738bff91bfa75a6d3f4738ec0bfd4ac9586", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -787,7 +787,6 @@ impl<'tcx> DeadVisitor<'tcx> {\n         let mut dead_codes = dead_codes\n             .iter()\n             .filter(|v| !v.name.as_str().starts_with('_'))\n-            .map(|v| v)\n             .collect::<Vec<&DeadVariant>>();\n         if dead_codes.is_empty() {\n             return;"}, {"sha": "6f1b31ff9c3aec9cbce8cb0bf3b2fe053a566ba7", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -122,7 +122,7 @@ pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n     let target = crate::config::host_triple();\n     let mut sysroot_candidates: SmallVec<[PathBuf; 2]> =\n         smallvec![get_or_default_sysroot().expect(\"Failed finding sysroot\")];\n-    let path = current_dll_path().and_then(|s| Ok(s.canonicalize().map_err(|e| e.to_string())?));\n+    let path = current_dll_path().and_then(|s| s.canonicalize().map_err(|e| e.to_string()));\n     if let Ok(dll) = path {\n         // use `parent` twice to chop off the file name and then also the\n         // directory containing the dll which should be either `lib` or `bin`.\n@@ -165,7 +165,7 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n     }\n \n     fn default_from_rustc_driver_dll() -> Result<PathBuf, String> {\n-        let dll = current_dll_path().and_then(|s| Ok(canonicalize(s)))?;\n+        let dll = current_dll_path().map(|s| canonicalize(s))?;\n \n         // `dll` will be in one of the following two:\n         // - compiler's libdir: $sysroot/lib/*.dll"}, {"sha": "0845b1b6b096c600b124ec94690a231b4c5d6187", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -99,13 +99,8 @@ fn is_c_void_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Adt(adt_def, ..) => {\n             let def_id = adt_def.0.did;\n             let crate_name = tcx.crate_name(def_id.krate);\n-            if tcx.item_name(def_id).as_str() == \"c_void\"\n+            tcx.item_name(def_id).as_str() == \"c_void\"\n                 && (crate_name == sym::core || crate_name == sym::std || crate_name == sym::libc)\n-            {\n-                true\n-            } else {\n-                false\n-            }\n         }\n         _ => false,\n     }\n@@ -267,8 +262,7 @@ fn encode_predicates<'tcx>(\n ) -> String {\n     // <predicate1[..predicateN]>E as part of vendor extended type\n     let mut s = String::new();\n-    let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> =\n-        predicates.iter().map(|predicate| predicate).collect();\n+    let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> = predicates.iter().collect();\n     for predicate in predicates {\n         s.push_str(&encode_predicate(tcx, predicate, dict, options));\n     }\n@@ -322,7 +316,7 @@ fn encode_substs<'tcx>(\n ) -> String {\n     // [I<subst1..substN>E] as part of vendor extended type\n     let mut s = String::new();\n-    let substs: Vec<GenericArg<'_>> = substs.iter().map(|subst| subst).collect();\n+    let substs: Vec<GenericArg<'_>> = substs.iter().collect();\n     if !substs.is_empty() {\n         s.push('I');\n         for subst in substs {\n@@ -703,11 +697,8 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                         tcx.layout_of(param_env.and(ty)).map_or(false, |layout| layout.is_zst());\n                     !is_zst\n                 });\n-                if field.is_none() {\n-                    // Transform repr(transparent) types without non-ZST field into ()\n-                    ty = tcx.mk_unit();\n-                } else {\n-                    let ty0 = tcx.type_of(field.unwrap().did);\n+                if let Some(field) = field {\n+                    let ty0 = tcx.type_of(field.did);\n                     // Generalize any repr(transparent) user-defined type that is either a pointer\n                     // or reference, and either references itself or any other type that contains or\n                     // references itself, to avoid a reference cycle.\n@@ -720,6 +711,9 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                     } else {\n                         ty = transform_ty(tcx, ty0, options);\n                     }\n+                } else {\n+                    // Transform repr(transparent) types without non-ZST field into ()\n+                    ty = tcx.mk_unit();\n                 }\n             } else {\n                 ty = tcx.mk_adt(*adt_def, transform_substs(tcx, substs, options));"}, {"sha": "e4f3e7928da5a3eb54b57a13c589d8ba26300ae9", "filename": "compiler/rustc_transmute/src/maybe_transmutable/query_context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9005b6cc0222bd8253b843fa5804e139f701826/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs?ref=a9005b6cc0222bd8253b843fa5804e139f701826", "patch": "@@ -76,11 +76,7 @@ mod rustc {\n                 }\n             };\n \n-            let ret = if self.visibility(def_id).is_accessible_from(parent, *self) {\n-                true\n-            } else {\n-                false\n-            };\n+            let ret: bool = self.visibility(def_id).is_accessible_from(parent, *self);\n \n             trace!(?ret, \"ret\");\n             ret"}]}