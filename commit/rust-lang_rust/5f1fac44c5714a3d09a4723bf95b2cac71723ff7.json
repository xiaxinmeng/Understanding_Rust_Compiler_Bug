{"sha": "5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMWZhYzQ0YzU3MTRhM2QwOWE0NzIzYmY5NWIyY2FjNzE3MjNmZjc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T12:09:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T12:09:20Z"}, "message": "Cleanup parameter_hint_heuristics inlay hints test", "tree": {"sha": "e1d82fe3e03bd6dd10365c1988e679d04ee408dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d82fe3e03bd6dd10365c1988e679d04ee408dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "html_url": "https://github.com/rust-lang/rust/commit/5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1fac44c5714a3d09a4723bf95b2cac71723ff7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f6d8868ca33a9907e372de2a2f868c3ef8d00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f6d8868ca33a9907e372de2a2f868c3ef8d00c", "html_url": "https://github.com/rust-lang/rust/commit/b0f6d8868ca33a9907e372de2a2f868c3ef8d00c"}], "stats": {"total": 155, "additions": 68, "deletions": 87}, "files": [{"sha": "821c61403bdfd24dbfd891e2aad6ee2771118e53", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 68, "deletions": 87, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/5f1fac44c5714a3d09a4723bf95b2cac71723ff7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1fac44c5714a3d09a4723bf95b2cac71723ff7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "patch": "@@ -315,6 +315,7 @@ fn should_hide_param_name_hint(\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n+    // These are to be tested in the `parameter_hint_heuristics` test\n     // hide when:\n     // - the parameter name is a suffix of the function's name\n     // - the argument is an enum whose name is equal to the parameter\n@@ -395,7 +396,7 @@ fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n         ast::Expr::MethodCallExpr(method_call_expr) => {\n             let name_ref = method_call_expr.name_ref()?;\n             match name_ref.text().as_str() {\n-                \"clone\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n+                \"clone\" | \"as_ref\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n                 name_ref => Some(name_ref.to_owned()),\n             }\n         }\n@@ -521,6 +522,8 @@ fn main() {\n         );\n     }\n \n+    // Parameter hint tests\n+\n     #[test]\n     fn param_hints_only() {\n         check_params(\n@@ -558,6 +561,15 @@ fn main() {\n         check_params(\n             r#\"\n fn param_with_underscore(with_underscore: i32) -> i32 { with_underscore }\n+fn main() {\n+    let _x = param_with_underscore(\n+        4,\n+    );\n+}\"#,\n+        );\n+        check_params(\n+            r#\"\n+fn param_with_underscore(underscore: i32) -> i32 { underscore }\n fn main() {\n     let _x = param_with_underscore(\n         4,\n@@ -583,30 +595,32 @@ fn main() {\n     fn never_hide_param_when_multiple_params() {\n         check_params(\n             r#\"\n-fn foo(bar: i32, baz: i32) -> i32 { bar + baz }\n+fn foo(foo: i32, bar: i32) -> i32 { bar + baz }\n fn main() {\n     let _x = foo(\n         4,\n-      //^ bar\n+      //^ foo\n         8,\n-      //^ baz\n+      //^ bar\n     );\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn hide_param_hints_for_clones() {\n+    fn param_hints_look_through_as_ref_and_clone() {\n         check_params(\n             r#\"\n-fn foo(bar: i32, baz: String, qux: f32) {}\n+fn foo(bar: i32, baz: f32) {}\n \n fn main() {\n     let bar = 3;\n     let baz = &\"baz\";\n     let fez = 1.0;\n-    foo(bar.clone(), baz.clone(), fez.clone());\n-                                //^^^^^^^^^^^ qux\n+    foo(bar.clone(), bar.clone());\n+                   //^^^^^^^^^^^ baz\n+    foo(bar.as_ref(), bar.as_ref());\n+                    //^^^^^^^^^^^^ baz\n }\n \"#,\n         );\n@@ -639,18 +653,18 @@ fn main() {\n             r#\"pub fn test(a: i32, b: i32) -> [i32; 2] { [a, b] }\n fn main() {\n     test(\n-        0x0fab272b,\n-      //^^^^^^^^^^ a\n-        0x0fab272b\n-      //^^^^^^^^^^ b\n+        0xa_b,\n+      //^^^^^ a\n+        0xa_b,\n+      //^^^^^ b\n     );\n }\"#,\n         )\n     }\n \n     #[test]\n     fn function_call_parameter_hint() {\n-        check(\n+        check_params(\n             r#\"\n enum Option<T> { None, Some(T) }\n use Option::*;\n@@ -685,7 +699,6 @@ fn test_func(mut foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n \n fn main() {\n     let not_literal = 1;\n-      //^^^^^^^^^^^ i32\n     let _: i32 = test_func(1,    2,      \"hello\", 3,  not_literal);\n                          //^ foo ^ bar   ^^^^^^^ msg  ^^^^^^^^^^^ last\n     let t: Test = Test {};\n@@ -712,97 +725,65 @@ fn main() {\n     }\n \n     #[test]\n-    fn omitted_parameters_hints_heuristics() {\n-        check_with_config(\n-            InlayHintsConfig { max_length: Some(8), ..TEST_CONFIG },\n+    fn parameter_hint_heuristics() {\n+        check_params(\n             r#\"\n+fn check(ra_fixture_thing: &str) {}\n+\n fn map(f: i32) {}\n fn filter(predicate: i32) {}\n \n-struct TestVarContainer {\n-    test_var: i32,\n-}\n-\n-impl TestVarContainer {\n-    fn test_var(&self) -> i32 {\n-        self.test_var\n-    }\n-}\n+fn strip_suffix(suffix: &str) {}\n+fn stripsuffix(suffix: &str) {}\n+fn same(same: u32) {}\n+fn same2(_same2: u32) {}\n \n-struct Test {}\n-\n-impl Test {\n-    fn map(self, f: i32) -> Self {\n-        self\n-    }\n-\n-    fn filter(self, predicate: i32) -> Self {\n-        self\n-    }\n-\n-    fn field(self, value: i32) -> Self {\n-        self\n-    }\n-\n-    fn no_hints_expected(&self, _: i32, test_var: i32) {}\n-\n-    fn frob(&self, frob: bool) {}\n-}\n-\n-struct Param {}\n-\n-fn different_order(param: &Param) {}\n-fn different_order_mut(param: &mut Param) {}\n-fn has_underscore(_param: bool) {}\n fn enum_matches_param_name(completion_kind: CompletionKind) {}\n-fn param_destructuring_omitted_1((a, b): (u32, u32)) {}\n-fn param_destructuring_omitted_2(TestVarContainer { test_var: _ }: TestVarContainer) {}\n \n-fn twiddle(twiddle: bool) {}\n-fn doo(_doo: bool) {}\n+fn foo(param: u32) {}\n+fn bar(param_eter: u32) {}\n \n enum CompletionKind {\n     Keyword,\n }\n \n-fn main() {\n-    let container: TestVarContainer = TestVarContainer { test_var: 42 };\n-    let test: Test = Test {};\n-\n-    map(22);\n-    filter(33);\n+fn non_ident_pat((a, b): (u32, u32)) {}\n \n-    let test_processed: Test = test.map(1).filter(2).field(3);\n-\n-    let test_var: i32 = 55;\n-    test_processed.no_hints_expected(22, test_var);\n-    test_processed.no_hints_expected(33, container.test_var);\n-    test_processed.no_hints_expected(44, container.test_var());\n-    test_processed.frob(false);\n-\n-    twiddle(true);\n-    doo(true);\n-\n-    const TWIDDLE_UPPERCASE: bool = true;\n-    twiddle(TWIDDLE_UPPERCASE);\n+fn main() {\n+    check(\"\");\n \n-    let mut param_begin: Param = Param {};\n-    different_order(&param_begin);\n-    different_order(&mut param_begin);\n+    map(0);\n+    filter(0);\n \n-    let param: bool = true;\n-    has_underscore(param);\n+    strip_suffix(\"\");\n+    stripsuffix(\"\");\n+              //^^ suffix\n+    same(0);\n+    same2(0);\n \n     enum_matches_param_name(CompletionKind::Keyword);\n \n-    let a: f64 = 7.0;\n-    let b: f64 = 4.0;\n-    let _: f64 = a.div_euclid(b);\n-    let _: f64 = a.abs_sub(b);\n-\n-    let range: (u32, u32) = (3, 5);\n-    param_destructuring_omitted_1(range);\n-    param_destructuring_omitted_2(container);\n+    let param = 0;\n+    foo(param);\n+    let param_end = 0;\n+    foo(param_end);\n+    let start_param = 0;\n+    foo(start_param);\n+    let param2 = 0;\n+    foo(param2);\n+      //^^^^^^ param\n+\n+    let param_eter = 0;\n+    bar(param_eter);\n+    let param_eter_end = 0;\n+    bar(param_eter_end);\n+    let start_param_eter = 0;\n+    bar(start_param_eter);\n+    let param_eter2 = 0;\n+    bar(param_eter2);\n+      //^^^^^^^^^^^ param_eter\n+\n+    non_ident_pat((0, 0));\n }\"#,\n         );\n     }"}]}