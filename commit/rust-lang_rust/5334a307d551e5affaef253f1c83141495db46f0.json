{"sha": "5334a307d551e5affaef253f1c83141495db46f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzRhMzA3ZDU1MWU1YWZmYWVmMjUzZjFjODMxNDE0OTVkYjQ2ZjA=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-07-26T11:27:13Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-10-24T13:46:44Z"}, "message": "Add unit tests for `array::IntoIter`\n\nMany tests are based on tests by Josh Stone <cuviper@gmail.com>", "tree": {"sha": "bbf0893a4b0a3738891f1ea9d25e2c3e221dd522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbf0893a4b0a3738891f1ea9d25e2c3e221dd522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5334a307d551e5affaef253f1c83141495db46f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENwctvZ5TgcKYXim8PLr0FT+BhicFAl2xq0UACgkQPLr0FT+B\nhicpkw//YlzcvfdEwoPCgv8PBN2uo5e6UOtZU5NZV3vnInFfoWcjGbaCU8ZervNF\nkfmubqkLAOQgnF8sUGDVN8XParfUDtxIdAwWecklEDulFp6VAtls/z4JF5M3p0x7\nFK6ZO0FcGZGpmpg9PRJI3y0rUiqibA2/Q4mO5r72Foc+ti3EtpccjUn9lPtjd0ZA\ntNOrpuZe5gHyqcK8x1Vus3/ub/G5bOet/7KOicGvpz+NEK8LZAwcy/q+Jk+0HupI\n9G3DKxOpTdyK0n+7HNRdP8p4moy3crIGtxhlM6mF/cEsKVHTgMk3kGC2k7NuleJI\nRHT3ZoQzXRgS0+i+JkAMWyQRZ8j22Li1yAx8C5IWnhVrwxOeYxWEewXwOihZ/TjJ\n1YozW4pKL4WZle+XYtYLJpMKU7cWDQSAQhIgmZah2zfrBVGyw/eoq6NLkjzCFfPC\njisZvPnvgGW0UOGHC41nNpoQWHlg0ZOTS8i98DjWuRbeFgJswsDFr/FXvMgT2xNR\ncb29/8zadFsYVTn/omurj2ptWh7JQMo8DYcSbhRoDdzzpUjkS6SB+IMwMlCihBYX\n9zyXD+XL9LGpiMwGn+N0MarzPqn/gHauCWzD/8Al3Gj0bhRkWlvtIg0G2T3kmQWb\nSE+uYNnl85AwMZTKpXmazqyfLkoVNupU9xFn9jTtLWAuOv9m37c=\n=VB1T\n-----END PGP SIGNATURE-----", "payload": "tree bbf0893a4b0a3738891f1ea9d25e2c3e221dd522\nparent a2e94ca1ee21f46eb18cd4392fa8e621ebaea20a\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1564140433 +0200\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1571924804 +0200\n\nAdd unit tests for `array::IntoIter`\n\nMany tests are based on tests by Josh Stone <cuviper@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5334a307d551e5affaef253f1c83141495db46f0", "html_url": "https://github.com/rust-lang/rust/commit/5334a307d551e5affaef253f1c83141495db46f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5334a307d551e5affaef253f1c83141495db46f0/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2e94ca1ee21f46eb18cd4392fa8e621ebaea20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e94ca1ee21f46eb18cd4392fa8e621ebaea20a", "html_url": "https://github.com/rust-lang/rust/commit/a2e94ca1ee21f46eb18cd4392fa8e621ebaea20a"}], "stats": {"total": 208, "additions": 207, "deletions": 1}, "files": [{"sha": "4f3b79c78b66c58d6d604800134a9173af9b1df5", "filename": "src/libcore/tests/array.rs", "status": "modified", "additions": 206, "deletions": 1, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/5334a307d551e5affaef253f1c83141495db46f0/src%2Flibcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5334a307d551e5affaef253f1c83141495db46f0/src%2Flibcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Farray.rs?ref=5334a307d551e5affaef253f1c83141495db46f0", "patch": "@@ -1,4 +1,4 @@\n-use core::array::FixedSizeArray;\n+use core::array::{FixedSizeArray, IntoIter};\n use core::convert::TryFrom;\n \n #[test]\n@@ -40,3 +40,208 @@ fn array_try_from() {\n         30 31 32\n     }\n }\n+\n+\n+#[test]\n+fn iterator_collect() {\n+    let arr = [0, 1, 2, 5, 9];\n+    let v: Vec<_> = IntoIter::new(arr.clone()).collect();\n+    assert_eq!(&arr[..], &v[..]);\n+}\n+\n+#[test]\n+fn iterator_rev_collect() {\n+    let arr = [0, 1, 2, 5, 9];\n+    let v: Vec<_> = IntoIter::new(arr.clone()).rev().collect();\n+    assert_eq!(&v[..], &[9, 5, 2, 1, 0]);\n+}\n+\n+#[test]\n+fn iterator_nth() {\n+    let v = [0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(IntoIter::new(v.clone()).nth(i).unwrap(), v[i]);\n+    }\n+    assert_eq!(IntoIter::new(v.clone()).nth(v.len()), None);\n+\n+    let mut iter = IntoIter::new(v);\n+    assert_eq!(iter.nth(2).unwrap(), v[2]);\n+    assert_eq!(iter.nth(1).unwrap(), v[4]);\n+}\n+\n+#[test]\n+fn iterator_last() {\n+    let v = [0, 1, 2, 3, 4];\n+    assert_eq!(IntoIter::new(v).last().unwrap(), 4);\n+    assert_eq!(IntoIter::new([0]).last().unwrap(), 0);\n+\n+    let mut it = IntoIter::new([0, 9, 2, 4]);\n+    assert_eq!(it.next_back(), Some(4));\n+    assert_eq!(it.last(), Some(2));\n+}\n+\n+#[test]\n+fn iterator_clone() {\n+    let mut it = IntoIter::new([0, 2, 4, 6, 8]);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next_back(), Some(8));\n+    let mut clone = it.clone();\n+    assert_eq!(it.next_back(), Some(6));\n+    assert_eq!(clone.next_back(), Some(6));\n+    assert_eq!(it.next_back(), Some(4));\n+    assert_eq!(clone.next_back(), Some(4));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(clone.next(), Some(2));\n+}\n+\n+#[test]\n+fn iterator_fused() {\n+    let mut it = IntoIter::new([0, 9, 2]);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(9));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.next(), None);\n+}\n+\n+#[test]\n+fn iterator_len() {\n+    let mut it = IntoIter::new([0, 1, 2, 5, 9]);\n+    assert_eq!(it.size_hint(), (5, Some(5)));\n+    assert_eq!(it.len(), 5);\n+    assert_eq!(it.is_empty(), false);\n+\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.size_hint(), (4, Some(4)));\n+    assert_eq!(it.len(), 4);\n+    assert_eq!(it.is_empty(), false);\n+\n+    assert_eq!(it.next_back(), Some(9));\n+    assert_eq!(it.size_hint(), (3, Some(3)));\n+    assert_eq!(it.len(), 3);\n+    assert_eq!(it.is_empty(), false);\n+\n+    // Empty\n+    let it = IntoIter::new([] as [String; 0]);\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.is_empty(), true);\n+}\n+\n+#[test]\n+fn iterator_count() {\n+    let v = [0, 1, 2, 3, 4];\n+    assert_eq!(IntoIter::new(v.clone()).count(), 5);\n+\n+    let mut iter2 = IntoIter::new(v);\n+    iter2.next();\n+    iter2.next();\n+    assert_eq!(iter2.count(), 3);\n+}\n+\n+#[test]\n+fn iterator_flat_map() {\n+    assert!((0..5).flat_map(|i| IntoIter::new([2 * i, 2 * i + 1])).eq(0..10));\n+}\n+\n+#[test]\n+fn iterator_debug() {\n+    let arr = [0, 1, 2, 5, 9];\n+    assert_eq!(\n+        format!(\"{:?}\", IntoIter::new(arr)),\n+        \"IntoIter([0, 1, 2, 5, 9])\",\n+    );\n+}\n+\n+#[test]\n+fn iterator_drops() {\n+    use core::cell::Cell;\n+\n+    // This test makes sure the correct number of elements are dropped. The `R`\n+    // type is just a reference to a `Cell` that is incremented when an `R` is\n+    // dropped.\n+\n+    #[derive(Clone)]\n+    struct Foo<'a>(&'a Cell<usize>);\n+\n+    impl Drop for Foo<'_> {\n+       fn drop(&mut self) {\n+            self.0.set(self.0.get() + 1);\n+        }\n+    }\n+\n+    fn five(i: &Cell<usize>) -> [Foo<'_>; 5] {\n+        // This is somewhat verbose because `Foo` does not implement `Copy`\n+        // since it implements `Drop`. Consequently, we cannot write\n+        // `[Foo(i); 5]`.\n+        [Foo(i), Foo(i), Foo(i), Foo(i), Foo(i)]\n+    }\n+\n+    // Simple: drop new iterator.\n+    let i = Cell::new(0);\n+    {\n+        IntoIter::new(five(&i));\n+    }\n+    assert_eq!(i.get(), 5);\n+\n+    // Call `next()` once.\n+    let i = Cell::new(0);\n+    {\n+        let mut iter = IntoIter::new(five(&i));\n+        let _x = iter.next();\n+        assert_eq!(i.get(), 0);\n+        assert_eq!(iter.count(), 4);\n+        assert_eq!(i.get(), 4);\n+    }\n+    assert_eq!(i.get(), 5);\n+\n+    // Check `clone` and calling `next`/`next_back`.\n+    let i = Cell::new(0);\n+    {\n+        let mut iter = IntoIter::new(five(&i));\n+        iter.next();\n+        assert_eq!(i.get(), 1);\n+        iter.next_back();\n+        assert_eq!(i.get(), 2);\n+\n+        let mut clone = iter.clone();\n+        assert_eq!(i.get(), 2);\n+\n+        iter.next();\n+        assert_eq!(i.get(), 3);\n+\n+        clone.next();\n+        assert_eq!(i.get(), 4);\n+\n+        assert_eq!(clone.count(), 2);\n+        assert_eq!(i.get(), 6);\n+    }\n+    assert_eq!(i.get(), 8);\n+\n+    // Check via `nth`.\n+    let i = Cell::new(0);\n+    {\n+        let mut iter = IntoIter::new(five(&i));\n+        let _x = iter.nth(2);\n+        assert_eq!(i.get(), 2);\n+        let _y = iter.last();\n+        assert_eq!(i.get(), 3);\n+    }\n+    assert_eq!(i.get(), 5);\n+\n+    // Check every element.\n+    let i = Cell::new(0);\n+    for (index, _x) in IntoIter::new(five(&i)).enumerate() {\n+        assert_eq!(i.get(), index);\n+    }\n+    assert_eq!(i.get(), 5);\n+\n+    let i = Cell::new(0);\n+    for (index, _x) in IntoIter::new(five(&i)).rev().enumerate() {\n+        assert_eq!(i.get(), index);\n+    }\n+    assert_eq!(i.get(), 5);\n+}"}, {"sha": "b28ed2eaa0876ad6af9fb264eed6cc736b2cadb6", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5334a307d551e5affaef253f1c83141495db46f0/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5334a307d551e5affaef253f1c83141495db46f0/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=5334a307d551e5affaef253f1c83141495db46f0", "patch": "@@ -31,6 +31,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]\n #![feature(const_fn)]\n+#![feature(array_value_iter)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]"}]}