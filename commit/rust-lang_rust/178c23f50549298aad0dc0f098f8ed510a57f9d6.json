{"sha": "178c23f50549298aad0dc0f098f8ed510a57f9d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OGMyM2Y1MDU0OTI5OGFhZDBkYzBmMDk4ZjhlZDUxMGE1N2Y5ZDY=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T18:08:44Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T18:08:44Z"}, "message": "Re-implement status display using LSP 3.15 progress event", "tree": {"sha": "cd6a937505d5f14aec9c960ee7ac21a943f24118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6a937505d5f14aec9c960ee7ac21a943f24118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178c23f50549298aad0dc0f098f8ed510a57f9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178c23f50549298aad0dc0f098f8ed510a57f9d6", "html_url": "https://github.com/rust-lang/rust/commit/178c23f50549298aad0dc0f098f8ed510a57f9d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178c23f50549298aad0dc0f098f8ed510a57f9d6/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500fe46e6c0df7827d56c7cd07741533422e7743", "url": "https://api.github.com/repos/rust-lang/rust/commits/500fe46e6c0df7827d56c7cd07741533422e7743", "html_url": "https://github.com/rust-lang/rust/commit/500fe46e6c0df7827d56c7cd07741533422e7743"}], "stats": {"total": 112, "additions": 103, "deletions": 9}, "files": [{"sha": "dd8c5d407af00c113c40f04c1ab56fef21eb7f74", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "modified", "additions": 44, "deletions": 9, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/178c23f50549298aad0dc0f098f8ed510a57f9d6/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178c23f50549298aad0dc0f098f8ed510a57f9d6/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=178c23f50549298aad0dc0f098f8ed510a57f9d6", "patch": "@@ -9,7 +9,8 @@ use cargo_metadata::{\n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender, TryRecvError};\n use lsp_types::{\n     Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n-    NumberOrString, Position, Range, Url,\n+    NumberOrString, Position, Range, Url, WorkDoneProgress, WorkDoneProgressBegin,\n+    WorkDoneProgressEnd, WorkDoneProgressReport,\n };\n use parking_lot::RwLock;\n use std::{\n@@ -132,6 +133,7 @@ impl CheckWatcherSharedState {\n #[derive(Debug)]\n pub enum CheckTask {\n     Update(Url),\n+    Status(WorkDoneProgress),\n }\n \n pub enum CheckCommand {\n@@ -204,13 +206,38 @@ impl CheckWatcherState {\n         }\n     }\n \n-    fn handle_message(&mut self, msg: cargo_metadata::Message, task_send: &Sender<CheckTask>) {\n+    fn handle_message(&mut self, msg: CheckEvent, task_send: &Sender<CheckTask>) {\n         match msg {\n-            Message::CompilerArtifact(_msg) => {\n-                // TODO: Status display\n+            CheckEvent::Begin => {\n+                task_send\n+                    .send(CheckTask::Status(WorkDoneProgress::Begin(WorkDoneProgressBegin {\n+                        title: \"Running 'cargo check'\".to_string(),\n+                        cancellable: Some(false),\n+                        message: None,\n+                        percentage: None,\n+                    })))\n+                    .unwrap();\n             }\n \n-            Message::CompilerMessage(msg) => {\n+            CheckEvent::End => {\n+                task_send\n+                    .send(CheckTask::Status(WorkDoneProgress::End(WorkDoneProgressEnd {\n+                        message: None,\n+                    })))\n+                    .unwrap();\n+            }\n+\n+            CheckEvent::Msg(Message::CompilerArtifact(msg)) => {\n+                task_send\n+                    .send(CheckTask::Status(WorkDoneProgress::Report(WorkDoneProgressReport {\n+                        cancellable: Some(false),\n+                        message: Some(msg.target.name),\n+                        percentage: None,\n+                    })))\n+                    .unwrap();\n+            }\n+\n+            CheckEvent::Msg(Message::CompilerMessage(msg)) => {\n                 let map_result =\n                     match map_rust_diagnostic_to_lsp(&msg.message, &self.workspace_root) {\n                         Some(map_result) => map_result,\n@@ -232,8 +259,8 @@ impl CheckWatcherState {\n                 task_send.send(CheckTask::Update(location.uri)).unwrap();\n             }\n \n-            Message::BuildScriptExecuted(_msg) => {}\n-            Message::Unknown => {}\n+            CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}\n+            CheckEvent::Msg(Message::Unknown) => {}\n         }\n     }\n }\n@@ -244,10 +271,16 @@ impl CheckWatcherState {\n /// have to wrap sub-processes output handling in a thread and pass messages\n /// back over a channel.\n struct WatchThread {\n-    message_recv: Receiver<cargo_metadata::Message>,\n+    message_recv: Receiver<CheckEvent>,\n     cancel_send: Sender<()>,\n }\n \n+enum CheckEvent {\n+    Begin,\n+    Msg(cargo_metadata::Message),\n+    End,\n+}\n+\n impl WatchThread {\n     fn new(\n         check_command: Option<&String>,\n@@ -273,6 +306,7 @@ impl WatchThread {\n                 .spawn()\n                 .expect(\"couldn't launch cargo\");\n \n+            message_send.send(CheckEvent::Begin).unwrap();\n             for message in cargo_metadata::parse_messages(command.stdout.take().unwrap()) {\n                 match cancel_recv.try_recv() {\n                     Ok(()) | Err(TryRecvError::Disconnected) => {\n@@ -281,8 +315,9 @@ impl WatchThread {\n                     Err(TryRecvError::Empty) => (),\n                 }\n \n-                message_send.send(message.unwrap()).unwrap();\n+                message_send.send(CheckEvent::Msg(message.unwrap())).unwrap();\n             }\n+            message_send.send(CheckEvent::End).unwrap();\n         });\n         WatchThread { message_recv, cancel_send }\n     }"}, {"sha": "045e4660ddd3597516a7bf905ffd5749676e23eb", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178c23f50549298aad0dc0f098f8ed510a57f9d6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178c23f50549298aad0dc0f098f8ed510a57f9d6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=178c23f50549298aad0dc0f098f8ed510a57f9d6", "patch": "@@ -338,6 +338,14 @@ fn loop_turn(\n                     task_sender.send(Task::Notify(not)).unwrap();\n                 }\n             }\n+            CheckTask::Status(progress) => {\n+                let params = req::ProgressParams {\n+                    token: req::ProgressToken::String(\"rustAnalyzer/cargoWatcher\".to_string()),\n+                    value: req::ProgressParamsValue::WorkDone(progress),\n+                };\n+                let not = notification_new::<req::Progress>(params);\n+                task_sender.send(Task::Notify(not)).unwrap();\n+            }\n         },\n         Event::Msg(msg) => match msg {\n             Message::Request(req) => on_request("}, {"sha": "2404c3f164df62bdac20053b8d90c4b846158c2e", "filename": "editors/code/src/commands/watch_status.ts", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/178c23f50549298aad0dc0f098f8ed510a57f9d6/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/178c23f50549298aad0dc0f098f8ed510a57f9d6/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=178c23f50549298aad0dc0f098f8ed510a57f9d6", "patch": "@@ -57,7 +57,50 @@ export class StatusDisplay implements vscode.Disposable {\n         this.statusBarItem.dispose();\n     }\n \n+    public handleProgressNotification(params: ProgressParams) {\n+        const { token, value } = params;\n+        if (token !== \"rustAnalyzer/cargoWatcher\") {\n+            return;\n+        }\n+\n+        console.log(\"Got progress notification\", token, value)\n+        switch (value.kind) {\n+            case \"begin\":\n+                this.show();\n+                break;\n+\n+            case \"report\":\n+                if (value.message) {\n+                    this.packageName = value.message;\n+                }\n+                break;\n+\n+            case \"end\":\n+                this.hide();\n+                break;\n+        }\n+    }\n+\n     private frame() {\n         return spinnerFrames[(this.i = ++this.i % spinnerFrames.length)];\n     }\n }\n+\n+// FIXME: Replace this once vscode-languageclient is updated to LSP 3.15\n+interface ProgressParams {\n+    token: string\n+    value: WorkDoneProgress\n+}\n+\n+enum WorkDoneProgressKind {\n+    Begin = \"begin\",\n+    Report = \"report\",\n+    End = \"end\"\n+}\n+\n+interface WorkDoneProgress {\n+    kind: WorkDoneProgressKind,\n+    message?: string\n+    cancelable?: boolean\n+    percentage?: string\n+}\n\\ No newline at end of file"}, {"sha": "1507cb26eac48bfb208ae7595f4225ab7fea9f2d", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178c23f50549298aad0dc0f098f8ed510a57f9d6/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/178c23f50549298aad0dc0f098f8ed510a57f9d6/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=178c23f50549298aad0dc0f098f8ed510a57f9d6", "patch": "@@ -8,6 +8,7 @@ import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n+import { StatusDisplay } from './commands/watch_status';\n \n export async function activate(context: vscode.ExtensionContext) {\n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n@@ -83,6 +84,9 @@ export async function activate(context: vscode.ExtensionContext) {\n         overrideCommand('type', commands.onEnter.handle);\n     }\n \n+    const watchStatus = new StatusDisplay(Server.config.cargoCheckOptions.command || 'check');\n+    disposeOnDeactivation(watchStatus);\n+\n     // Notifications are events triggered by the language server\n     const allNotifications: Iterable<[\n         string,\n@@ -92,6 +96,10 @@ export async function activate(context: vscode.ExtensionContext) {\n             'rust-analyzer/publishDecorations',\n             notifications.publishDecorations.handle,\n         ],\n+        [\n+            '$/progress',\n+            (params) => watchStatus.handleProgressNotification(params),\n+        ]\n     ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n     const expandMacroContentProvider = new ExpandMacroContentProvider();"}]}