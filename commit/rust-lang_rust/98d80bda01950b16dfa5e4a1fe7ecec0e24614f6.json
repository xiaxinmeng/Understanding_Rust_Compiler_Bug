{"sha": "98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDgwYmRhMDE5NTBiMTZkZmE1ZTRhMWZlN2VjZWMwZTI0NjE0ZjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-28T13:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-28T13:12:59Z"}, "message": "Rollup merge of #79662 - bjorn3:move_more_code_out_of_codegen_backend, r=oli-obk\n\nMove some more code out of CodegenBackend::{codegen_crate,link}\n\nKind of a follow up to #77795", "tree": {"sha": "cf1dfa900fba4e2fb2231da88d52c82fd55f2418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1dfa900fba4e2fb2231da88d52c82fd55f2418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6dncCRBK7hj4Ov3rIwAAdHIIAI5m8tzVcsnrWTFIErjFXOPF\nqpZGcL31Zy2J/+MOKEWfH1jmidY98UrXtudZtUoauX+qmZCOXy8bhJSBF4bx4Kup\nVwgD8DyPdF2Zu2/smJ5MKJx6qZhHqb1E5NoS1Rj5lGkDH7iK2AywpKhw+rLk9vkx\n+7LE3Riqmsi8DqScQ4qqxcc1c8gU4LbItCHHkWCKTFLAKjqe8HrFy4GoyrOYXBkR\nhm/0sXf0I1QACQ4ikkiuhcHYmC+M565Km3nBRRF1OdLURWPeSanPk7s+vIwtnnCY\nK5jTJtw3AUHAolUFWVm1bnaEXQMI4WcivJG8QAqq1pYPg0IUdNbGZGBltVSxhLo=\n=2bR8\n-----END PGP SIGNATURE-----\n", "payload": "tree cf1dfa900fba4e2fb2231da88d52c82fd55f2418\nparent aef92d44e4e83fe7d5ddb741a274754466207402\nparent 3a3a23ffc5742885187c84e7db320610c8b352fb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1609161179 +0100\ncommitter GitHub <noreply@github.com> 1609161179 +0100\n\nRollup merge of #79662 - bjorn3:move_more_code_out_of_codegen_backend, r=oli-obk\n\nMove some more code out of CodegenBackend::{codegen_crate,link}\n\nKind of a follow up to #77795\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "html_url": "https://github.com/rust-lang/rust/commit/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef92d44e4e83fe7d5ddb741a274754466207402", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef92d44e4e83fe7d5ddb741a274754466207402", "html_url": "https://github.com/rust-lang/rust/commit/aef92d44e4e83fe7d5ddb741a274754466207402"}, {"sha": "3a3a23ffc5742885187c84e7db320610c8b352fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3a23ffc5742885187c84e7db320610c8b352fb", "html_url": "https://github.com/rust-lang/rust/commit/3a3a23ffc5742885187c84e7db320610c8b352fb"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "f33464f83dad407b1dcfadf37fba781d72520896", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "patch": "@@ -298,21 +298,19 @@ impl CodegenBackend for LlvmCodegenBackend {\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n+        use crate::back::archive::LlvmArchiveBuilder;\n+        use rustc_codegen_ssa::back::link::link_binary;\n+\n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n-        sess.time(\"link_crate\", || {\n-            use crate::back::archive::LlvmArchiveBuilder;\n-            use rustc_codegen_ssa::back::link::link_binary;\n-\n-            let target_cpu = crate::llvm_util::target_cpu(sess);\n-            link_binary::<LlvmArchiveBuilder<'_>>(\n-                sess,\n-                &codegen_results,\n-                outputs,\n-                &codegen_results.crate_name.as_str(),\n-                target_cpu,\n-            );\n-        });\n+        let target_cpu = crate::llvm_util::target_cpu(sess);\n+        link_binary::<LlvmArchiveBuilder<'_>>(\n+            sess,\n+            &codegen_results,\n+            outputs,\n+            &codegen_results.crate_name.as_str(),\n+            target_cpu,\n+        );\n \n         Ok(())\n     }"}, {"sha": "14ace02844e4304eae213f398a46e26dcdf65926", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "patch": "@@ -46,7 +46,6 @@ use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, EntryFnType};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n-use rustc_symbol_mangling::test as symbol_names_test;\n use rustc_target::abi::{Align, LayoutOf, VariantIdx};\n \n use std::cmp;\n@@ -486,8 +485,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n         ongoing_codegen.codegen_finished(tcx);\n \n-        finalize_tcx(tcx);\n-\n         ongoing_codegen.check_for_errors(tcx.sess);\n \n         return ongoing_codegen;\n@@ -688,14 +685,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         total_codegen_time.into_inner(),\n     );\n \n-    rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n-\n-    symbol_names_test::report_symbol_names(tcx);\n-\n     ongoing_codegen.check_for_errors(tcx.sess);\n \n-    finalize_tcx(tcx);\n-\n     ongoing_codegen.into_inner()\n }\n \n@@ -746,18 +737,6 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn finalize_tcx(tcx: TyCtxt<'_>) {\n-    tcx.sess.time(\"assert_dep_graph\", || rustc_incremental::assert_dep_graph(tcx));\n-    tcx.sess.time(\"serialize_dep_graph\", || rustc_incremental::save_dep_graph(tcx));\n-\n-    // We assume that no queries are run past here. If there are new queries\n-    // after this point, they'll show up as \"<unknown>\" in self-profiling data.\n-    {\n-        let _prof_timer = tcx.prof.generic_activity(\"self_profile_alloc_query_strings\");\n-        tcx.alloc_self_profile_query_strings();\n-    }\n-}\n-\n impl CrateInfo {\n     pub fn new(tcx: TyCtxt<'_>) -> CrateInfo {\n         let mut info = CrateInfo {"}, {"sha": "1a2af48b38d328ec9789bcb0b2bf4b9c2ab38c90", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "patch": "@@ -1013,6 +1013,23 @@ pub fn start_codegen<'tcx>(\n         codegen_backend.codegen_crate(tcx, metadata, need_metadata_module)\n     });\n \n+    // Don't run these test assertions when not doing codegen. Compiletest tries to build\n+    // build-fail tests in check mode first and expects it to not give an error in that case.\n+    if tcx.sess.opts.output_types.should_codegen() {\n+        rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n+        rustc_symbol_mangling::test::report_symbol_names(tcx);\n+    }\n+\n+    tcx.sess.time(\"assert_dep_graph\", || rustc_incremental::assert_dep_graph(tcx));\n+    tcx.sess.time(\"serialize_dep_graph\", || rustc_incremental::save_dep_graph(tcx));\n+\n+    // We assume that no queries are run past here. If there are new queries\n+    // after this point, they'll show up as \"<unknown>\" in self-profiling data.\n+    {\n+        let _prof_timer = tcx.prof.generic_activity(\"self_profile_alloc_query_strings\");\n+        tcx.alloc_self_profile_query_strings();\n+    }\n+\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {"}, {"sha": "2384927b3017a65a35efb76322d86fb55b8af8ce", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d80bda01950b16dfa5e4a1fe7ecec0e24614f6/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=98d80bda01950b16dfa5e4a1fe7ecec0e24614f6", "patch": "@@ -403,6 +403,7 @@ impl Linker {\n             return Ok(());\n         }\n \n+        let _timer = sess.prof.verbose_generic_activity(\"link_crate\");\n         self.codegen_backend.link(&self.sess, codegen_results, &self.prepare_outputs)\n     }\n }"}]}