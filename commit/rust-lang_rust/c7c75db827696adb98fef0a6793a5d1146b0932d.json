{"sha": "c7c75db827696adb98fef0a6793a5d1146b0932d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Yzc1ZGI4Mjc2OTZhZGI5OGZlZjBhNjc5M2E1ZDExNDZiMDkzMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-03T19:27:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-03T19:27:32Z"}, "message": "Auto merge of #3621 - Zoxc:parallel, r=phansch\n\nMake clippy work with parallel rustc", "tree": {"sha": "ef846e8eb3d36eb9a90552c0f95cf7de00476ded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef846e8eb3d36eb9a90552c0f95cf7de00476ded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c75db827696adb98fef0a6793a5d1146b0932d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c75db827696adb98fef0a6793a5d1146b0932d", "html_url": "https://github.com/rust-lang/rust/commit/c7c75db827696adb98fef0a6793a5d1146b0932d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c75db827696adb98fef0a6793a5d1146b0932d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8b01e8dc9d5ba7209256061c8ace789f95e432", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8b01e8dc9d5ba7209256061c8ace789f95e432", "html_url": "https://github.com/rust-lang/rust/commit/5b8b01e8dc9d5ba7209256061c8ace789f95e432"}, {"sha": "3af68f831a27b024a95c80cd2f9a9fe7f25eeb18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af68f831a27b024a95c80cd2f9a9fe7f25eeb18", "html_url": "https://github.com/rust-lang/rust/commit/3af68f831a27b024a95c80cd2f9a9fe7f25eeb18"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8369f4b4470725cc7adec2a5bff4f759afd48fa3", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7c75db827696adb98fef0a6793a5d1146b0932d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c75db827696adb98fef0a6793a5d1146b0932d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=c7c75db827696adb98fef0a6793a5d1146b0932d", "patch": "@@ -17,11 +17,11 @@ use rustc::lint::LateContext;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc::{bug, span_bug};\n+use rustc_data_structures::sync::Lrc;\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n-use std::rc::Rc;\n use syntax::ast::{FloatTy, LitKind};\n use syntax::ptr::P;\n \n@@ -31,7 +31,7 @@ pub enum Constant {\n     /// a String \"abc\"\n     Str(String),\n     /// a Binary String b\"abc\"\n-    Binary(Rc<Vec<u8>>),\n+    Binary(Lrc<Vec<u8>>),\n     /// a single char 'a'\n     Char(char),\n     /// an integer's bit representation\n@@ -156,7 +156,7 @@ pub fn lit_to_constant<'tcx>(lit: &LitKind, ty: Ty<'tcx>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Rc::clone(s)),\n+        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, _) | LitKind::FloatUnsuffixed(ref is) => match ty.sty {"}, {"sha": "5466baae88606548f14d15ac50f89eb226cd0543", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7c75db827696adb98fef0a6793a5d1146b0932d/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c75db827696adb98fef0a6793a5d1146b0932d/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=c7c75db827696adb98fef0a6793a5d1146b0932d", "patch": "@@ -15,7 +15,7 @@ use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::{InternedString, LocalInternedString};\n \n /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n /// by the same characters.\n@@ -111,7 +111,7 @@ declare_clippy_lint! {\n }\n \n pub struct EnumVariantNames {\n-    modules: Vec<(LocalInternedString, String)>,\n+    modules: Vec<(InternedString, String)>,\n     threshold: u64,\n }\n \n@@ -308,6 +308,6 @@ impl EarlyLintPass for EnumVariantNames {\n             };\n             check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span, lint);\n         }\n-        self.modules.push((item_name, item_camel));\n+        self.modules.push((item_name.as_interned_str(), item_camel));\n     }\n }"}, {"sha": "edf8fb8d033eead5edeb02b6ea389a8443a37567", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7c75db827696adb98fef0a6793a5d1146b0932d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c75db827696adb98fef0a6793a5d1146b0932d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c7c75db827696adb98fef0a6793a5d1146b0932d", "patch": "@@ -25,11 +25,11 @@ use rustc::ty::{\n     subst::Kind,\n     Binder, Ty, TyCtxt,\n };\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n use std::borrow::Cow;\n use std::env;\n use std::mem;\n-use std::rc::Rc;\n use std::str::FromStr;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n@@ -223,7 +223,7 @@ pub fn path_to_def(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<def::Def>\n                 None => return None,\n             };\n \n-            for item in mem::replace(&mut items, Rc::new(vec![])).iter() {\n+            for item in mem::replace(&mut items, Lrc::new(vec![])).iter() {\n                 if item.ident.name == *segment {\n                     if path_it.peek().is_none() {\n                         return Some(item.def);"}]}