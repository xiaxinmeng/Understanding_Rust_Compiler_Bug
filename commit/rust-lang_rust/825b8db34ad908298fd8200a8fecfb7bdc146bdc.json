{"sha": "825b8db34ad908298fd8200a8fecfb7bdc146bdc", "node_id": "C_kwDOAAsO6NoAKDgyNWI4ZGIzNGFkOTA4Mjk4ZmQ4MjAwYThmZWNmYjdiZGMxNDZiZGM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-19T16:46:04Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-19T16:46:04Z"}, "message": "Cleanup macro matching recovery\n\nThe retry has been implemented already.", "tree": {"sha": "1ee9880ad2a3d89fb1a8b18c12cc8059530ae66a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee9880ad2a3d89fb1a8b18c12cc8059530ae66a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825b8db34ad908298fd8200a8fecfb7bdc146bdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFuvvnNPbv5W1cf2MDWMM3oMM7UBr2BsnZGXbLMV+schxtppsa3czcc/Q+sBtU7ZtI\nf1ch9ffEh2xDQ+Gi+9kwM=\n-----END SSH SIGNATURE-----", "payload": "tree 1ee9880ad2a3d89fb1a8b18c12cc8059530ae66a\nparent 62c627c7a3a9b3e193a5ae6e1ec7348bc5136301\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668876364 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668876364 +0100\n\nCleanup macro matching recovery\n\nThe retry has been implemented already.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825b8db34ad908298fd8200a8fecfb7bdc146bdc", "html_url": "https://github.com/rust-lang/rust/commit/825b8db34ad908298fd8200a8fecfb7bdc146bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825b8db34ad908298fd8200a8fecfb7bdc146bdc/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c627c7a3a9b3e193a5ae6e1ec7348bc5136301", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c627c7a3a9b3e193a5ae6e1ec7348bc5136301", "html_url": "https://github.com/rust-lang/rust/commit/62c627c7a3a9b3e193a5ae6e1ec7348bc5136301"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "6c7063ca28b35b5fcc580180d41fe5a3e90872ba", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/825b8db34ad908298fd8200a8fecfb7bdc146bdc/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825b8db34ad908298fd8200a8fecfb7bdc146bdc/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=825b8db34ad908298fd8200a8fecfb7bdc146bdc", "patch": "@@ -495,7 +495,6 @@ fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n     // hacky, but speeds up the `html5ever` benchmark significantly. (Issue\n     // 68836 suggests a more comprehensive but more complex change to deal with\n     // this situation.)\n-    // FIXME(Nilstrieb): Stop recovery from happening on this parser and retry later with recovery if the macro failed to match.\n     let parser = parser_from_cx(sess, arg.clone(), T::recovery());\n     // Try each arm's matchers.\n     let mut tt_parser = TtParser::new(name);"}, {"sha": "fe7401786a0291ebf8e20dc56d3dddca76c816d3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/825b8db34ad908298fd8200a8fecfb7bdc146bdc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825b8db34ad908298fd8200a8fecfb7bdc146bdc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=825b8db34ad908298fd8200a8fecfb7bdc146bdc", "patch": "@@ -2078,12 +2078,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == TokenKind::Semi\n             && matches!(self.token_cursor.frame.delim_sp, Some((Delimiter::Parenthesis, _)))\n-            // HACK: This is needed so we can detect whether we're inside a macro,\n-            // where regular assumptions about what tokens can follow other tokens\n-            // don't necessarily apply.\n             && self.may_recover()\n-            // FIXME(Nilstrieb): Remove this check once `may_recover` actually stops recovery\n-            && self.subparser_name.is_none()\n         {\n             // It is likely that the closure body is a block but where the\n             // braces have been removed. We will recover and eat the next"}]}