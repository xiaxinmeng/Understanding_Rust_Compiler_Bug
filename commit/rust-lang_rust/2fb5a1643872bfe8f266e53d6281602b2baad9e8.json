{"sha": "2fb5a1643872bfe8f266e53d6281602b2baad9e8", "node_id": "C_kwDOAAsO6NoAKDJmYjVhMTY0Mzg3MmJmZThmMjY2ZTUzZDYyODE2MDJiMmJhYWQ5ZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-01T02:41:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-01T02:41:47Z"}, "message": "Rollup merge of #93385 - CraftSpider:rustdoc-ty-fixes, r=camelid\n\nRustdoc ty consistency fixes\n\nChanges to make rustdoc cleaning of ty more consistent with hir, and hopefully use it in more places.\n\nr? `@camelid`", "tree": {"sha": "1a4cf4effa8e3e81b11513fd3c0f8361d133ab62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a4cf4effa8e3e81b11513fd3c0f8361d133ab62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb5a1643872bfe8f266e53d6281602b2baad9e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHYfsCRBK7hj4Ov3rIwAAXu8IABHf9K6naZBK+osOK9b+F91I\nUJDTfimi+1CPHHS8DwC6Byp2jm8Scc9g8Ai2uxN/5wAcSPEh+g7LD5ZpEB4BJpKE\nLWqKWd5gerFnckKrChr6tILR1yIsMPhIuaueyV9WsTxuwfvDEjQNd+q6iRv0TRAS\nbbcvqmJVwONv+hBaSLJWR29eiWm0wrWvZ8Q0d40XWBNMeygnNy/BMBiItfxN+ls7\nBnj8nre1725fPWVVrqkecnAJC19+1iygSFr1mmDIPFBrQPEEcld/UWsE6yrZRY1T\nSUAjXUF3uddDxv0dRwgNpSmEUouhAOcomKrJNPuNE6/zsUTRjIBGJ6euhRsHlHA=\n=2JzJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a4cf4effa8e3e81b11513fd3c0f8361d133ab62\nparent 4bd40d67d85f9e06df87b9f0fdeb9be6784ef427\nparent 2d2163bd3a4815c1a68de7b4246503977d99b21b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646102507 +0100\ncommitter GitHub <noreply@github.com> 1646102507 +0100\n\nRollup merge of #93385 - CraftSpider:rustdoc-ty-fixes, r=camelid\n\nRustdoc ty consistency fixes\n\nChanges to make rustdoc cleaning of ty more consistent with hir, and hopefully use it in more places.\n\nr? `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb5a1643872bfe8f266e53d6281602b2baad9e8", "html_url": "https://github.com/rust-lang/rust/commit/2fb5a1643872bfe8f266e53d6281602b2baad9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb5a1643872bfe8f266e53d6281602b2baad9e8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd40d67d85f9e06df87b9f0fdeb9be6784ef427", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd40d67d85f9e06df87b9f0fdeb9be6784ef427", "html_url": "https://github.com/rust-lang/rust/commit/4bd40d67d85f9e06df87b9f0fdeb9be6784ef427"}, {"sha": "2d2163bd3a4815c1a68de7b4246503977d99b21b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2163bd3a4815c1a68de7b4246503977d99b21b", "html_url": "https://github.com/rust-lang/rust/commit/2d2163bd3a4815c1a68de7b4246503977d99b21b"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "6f4b87750ff858d1c6cba411e1bc64ddfc3b2332", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2fb5a1643872bfe8f266e53d6281602b2baad9e8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb5a1643872bfe8f266e53d6281602b2baad9e8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=2fb5a1643872bfe8f266e53d6281602b2baad9e8", "patch": "@@ -101,27 +101,6 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n \n                     cx.generated_synthetics.insert((ty, trait_def_id));\n \n-                    let hir_imp = impl_def_id.as_local()\n-                        .map(|local| cx.tcx.hir().expect_item(local))\n-                        .and_then(|item| if let hir::ItemKind::Impl(i) = &item.kind {\n-                            Some(i)\n-                        } else {\n-                            None\n-                        });\n-\n-                    let items = match hir_imp {\n-                        Some(imp) => imp\n-                            .items\n-                            .iter()\n-                            .map(|ii| cx.tcx.hir().impl_item(ii.id).clean(cx))\n-                            .collect::<Vec<_>>(),\n-                        None => cx.tcx\n-                            .associated_items(impl_def_id)\n-                            .in_definition_order()\n-                            .map(|x| x.clean(cx))\n-                            .collect::<Vec<_>>(),\n-                    };\n-\n                     impls.push(Item {\n                         name: None,\n                         attrs: Default::default(),\n@@ -138,7 +117,11 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             // the post-inference `trait_ref`, as it's more accurate.\n                             trait_: Some(trait_ref.clean(cx)),\n                             for_: ty.clean(cx),\n-                            items,\n+                            items: cx.tcx\n+                                .associated_items(impl_def_id)\n+                                .in_definition_order()\n+                                .map(|x| x.clean(cx))\n+                                .collect::<Vec<_>>(),\n                             polarity: ty::ImplPolarity::Positive,\n                             kind: ImplKind::Blanket(box trait_ref.self_ty().clean(cx)),\n                         }),"}, {"sha": "3ae1df51695b7f1d28b0163e9289b81d83ee3402", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb5a1643872bfe8f266e53d6281602b2baad9e8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb5a1643872bfe8f266e53d6281602b2baad9e8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2fb5a1643872bfe8f266e53d6281602b2baad9e8", "patch": "@@ -228,7 +228,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n         // NOTE: generics need to be cleaned before the decl!\n         let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n-        let decl = clean_fn_decl_from_did_and_sig(cx, did, sig);\n+        let decl = clean_fn_decl_from_did_and_sig(cx, Some(did), sig);\n         (generics, decl)\n     });\n     clean::Function {"}, {"sha": "8fad625973fb814f7bf5fe14fc8b38c4a623f4e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2fb5a1643872bfe8f266e53d6281602b2baad9e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb5a1643872bfe8f266e53d6281602b2baad9e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2fb5a1643872bfe8f266e53d6281602b2baad9e8", "patch": "@@ -891,13 +891,20 @@ fn clean_fn_decl_with_args(\n \n fn clean_fn_decl_from_did_and_sig(\n     cx: &mut DocContext<'_>,\n-    did: DefId,\n+    did: Option<DefId>,\n     sig: ty::PolyFnSig<'_>,\n ) -> FnDecl {\n-    let mut names = if did.is_local() { &[] } else { cx.tcx.fn_arg_names(did) }.iter();\n+    let mut names = did.map_or(&[] as &[_], |did| cx.tcx.fn_arg_names(did)).iter();\n+\n+    // We assume all empty tuples are default return type. This theoretically can discard `-> ()`,\n+    // but shouldn't change any code meaning.\n+    let output = match sig.skip_binder().output().clean(cx) {\n+        Type::Tuple(inner) if inner.len() == 0 => DefaultReturn,\n+        ty => Return(ty),\n+    };\n \n     FnDecl {\n-        output: Return(sig.skip_binder().output().clean(cx)),\n+        output,\n         c_variadic: sig.skip_binder().c_variadic,\n         inputs: Arguments {\n             values: sig\n@@ -1031,20 +1038,18 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                 }\n             };\n \n-            let what_rustc_thinks =\n+            let mut what_rustc_thinks =\n                 Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n-            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id()));\n-            if let hir::ItemKind::Impl(impl_) = &parent_item.kind {\n-                if impl_.of_trait.is_some() {\n-                    // Trait impl items always inherit the impl's visibility --\n-                    // we don't want to show `pub`.\n-                    Item { visibility: Inherited, ..what_rustc_thinks }\n-                } else {\n-                    what_rustc_thinks\n-                }\n-            } else {\n-                panic!(\"found impl item with non-impl parent {:?}\", parent_item);\n+\n+            let impl_ref = cx.tcx.parent(local_did).and_then(|did| cx.tcx.impl_trait_ref(did));\n+\n+            // Trait impl items always inherit the impl's visibility --\n+            // we don't want to show `pub`.\n+            if impl_ref.is_some() {\n+                what_rustc_thinks.visibility = Inherited;\n             }\n+\n+            what_rustc_thinks\n         })\n     }\n }\n@@ -1069,7 +1074,7 @@ impl Clean<Item> for ty::AssocItem {\n                     tcx.explicit_predicates_of(self.def_id),\n                 );\n                 let sig = tcx.fn_sig(self.def_id);\n-                let mut decl = clean_fn_decl_from_did_and_sig(cx, self.def_id, sig);\n+                let mut decl = clean_fn_decl_from_did_and_sig(cx, Some(self.def_id), sig);\n \n                 if self.fn_has_self_parameter {\n                     let self_ty = match self.container {\n@@ -1199,7 +1204,18 @@ impl Clean<Item> for ty::AssocItem {\n             }\n         };\n \n-        Item::from_def_id_and_parts(self.def_id, Some(self.name), kind, cx)\n+        let mut what_rustc_thinks =\n+            Item::from_def_id_and_parts(self.def_id, Some(self.name), kind, cx);\n+\n+        let impl_ref = tcx.parent(self.def_id).and_then(|did| tcx.impl_trait_ref(did));\n+\n+        // Trait impl items always inherit the impl's visibility --\n+        // we don't want to show `pub`.\n+        if impl_ref.is_some() {\n+            what_rustc_thinks.visibility = Visibility::Inherited;\n+        }\n+\n+        what_rustc_thinks\n     }\n }\n \n@@ -1478,8 +1494,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::FnDef(..) | ty::FnPtr(_) => {\n                 let ty = cx.tcx.lift(*self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n-                let def_id = DefId::local(CRATE_DEF_INDEX);\n-                let decl = clean_fn_decl_from_did_and_sig(cx, def_id, sig);\n+                let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n                 BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),"}]}