{"sha": "ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzg4YTJlZTE3NWM3NTYwZjBjYTU4YmJjMTgzZWNmZDU3ZDJmN2E=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-23T15:19:50Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-28T15:36:12Z"}, "message": "Replace most call to grep in run-make by a script that cat the input.\n\nIntroduced a new src/etc/cat-and-grep.sh script (called in run-make as\n$(CGREP)), which prints the input and do a grep simultaneously. This is\nmainly used to debug spurious failures in run-make, such as the sanitizer\nerror in #45810, as well as real errors such as #46126.", "tree": {"sha": "d2ed1e61f108296e0cafaf65f1f8d083983dfae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ed1e61f108296e0cafaf65f1f8d083983dfae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlodgmwACgkQ/vbIBR0O\nATzFeA//XVVLeNhWFfGM244TN1WarF0p1yw1aF6SnzGXTXU3F1CZyHs+xlmmPIee\nRPW8prZuWOZAtvTkydGQKnaHy4oGnr8G6Fig/HjypkffSOtfocgZubBTERIZ8ixw\nlm237xmPHHqekPqq2XB2uX2Y2PoFln23S1Q17UA7O/SMfFdLc+jtM6w5cFOyABQT\nzQOaXZW3Y3iE8lpJ8bPnkhluHXsfOu34ESnb9SaAqPDwzgocfpk10rk2ohN59EMj\nRhV7/EpH/QAcfynOXqDM19nPGPuMz/swxX72DU+XD4f3m5iWrmsZBN3PudwSNLug\n8ylZY0zys7Dab/HOQ+ko1vqMzGmG5QTLif7jC3AxmOfJnKESxstKcMat+ejMnQBY\nr9dhpkL0jSn7pJvkLf76qQG+0j9cHal6c8rqZ5VByc6mfJBQrdk5bjEfoGlYU2uh\nXHuPkQdhRqsK8qebePCXiLOfZtBO7kr4kVCSg/3B3DyHo51EL6Gp3/sFurFmMSn/\nHzsen1xyCHcDZZ/1BHwRTgRU5Ra07KCJIQIQiRah9ZIfmMq02faNn5RTdHCBtcyu\n6F5JyBt4esMtKLa4LMvC9uos9vWeNF+Hlm9QoMhVI/FVbx6rgBvggQoEfSdb8NO/\nYQSjUMn6W+4Is2OiGC6RkPsTbFJvpP1KrPEXnvX26oJgoNpG9NM=\n=eKs6\n-----END PGP SIGNATURE-----", "payload": "tree d2ed1e61f108296e0cafaf65f1f8d083983dfae6\nparent 3bde5e78aef6c05a23f6068403682df7517d5a73\nauthor kennytm <kennytm@gmail.com> 1511450390 +0800\ncommitter kennytm <kennytm@gmail.com> 1511883372 +0800\n\nReplace most call to grep in run-make by a script that cat the input.\n\nIntroduced a new src/etc/cat-and-grep.sh script (called in run-make as\n$(CGREP)), which prints the input and do a grep simultaneously. This is\nmainly used to debug spurious failures in run-make, such as the sanitizer\nerror in #45810, as well as real errors such as #46126.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "html_url": "https://github.com/rust-lang/rust/commit/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bde5e78aef6c05a23f6068403682df7517d5a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bde5e78aef6c05a23f6068403682df7517d5a73", "html_url": "https://github.com/rust-lang/rust/commit/3bde5e78aef6c05a23f6068403682df7517d5a73"}], "stats": {"total": 360, "additions": 241, "deletions": 119}, "files": [{"sha": "ef9884d2e980d45d70b0da9446f92969479f01b8", "filename": "src/etc/cat-and-grep.sh", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Fetc%2Fcat-and-grep.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Fetc%2Fcat-and-grep.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcat-and-grep.sh?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -0,0 +1,89 @@\n+#!/bin/sh\n+set -eu\n+\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Performs `cat` and `grep` simultaneously for `run-make` tests in the Rust CI.\n+#\n+# This program will read lines from stdin and print them to stdout immediately.\n+# At the same time, it will check if the input line contains the substring or\n+# regex specified in the command line. If any match is found, the program will\n+# set the exit code to 0, otherwise 1.\n+#\n+# This is written to simplify debugging runmake tests. Since `grep` swallows all\n+# output, when a test involving `grep` failed, it is impossible to know the\n+# reason just by reading the failure log. While it is possible to `tee` the\n+# output into another stream, it becomes pretty annoying to do this for all test\n+# cases.\n+\n+USAGE='\n+cat-and-grep.sh [-v] [-e] [-i] s1 s2 s3 ... < input.txt\n+\n+Prints the stdin, and exits successfully only if all of `sN` can be found in\n+some lines of the input.\n+\n+Options:\n+    -v      Invert match, exits successfully only if all of `sN` cannot be found\n+    -e      Regex search, search using extended Regex instead of fixed string\n+    -i      Case insensitive search.\n+'\n+\n+GREPPER=fgrep\n+INVERT=0\n+GREPFLAGS='q'\n+while getopts ':vieh' OPTION; do\n+    case \"$OPTION\" in\n+        v)\n+            INVERT=1\n+            ERROR_MSG='should not be found'\n+            ;;\n+        i)\n+            GREPFLAGS=\"i$GREPFLAGS\"\n+            ;;\n+        e)\n+            GREPPER=egrep\n+            ;;\n+        h)\n+            echo \"$USAGE\"\n+            exit 2\n+            ;;\n+        *)\n+            break\n+            ;;\n+    esac\n+done\n+\n+shift $((OPTIND - 1))\n+\n+LOG=$(mktemp -t cgrep.XXXXXX)\n+trap \"rm -f $LOG\" EXIT\n+\n+printf \"[[[ begin stdout ]]]\\n\\033[90m\"\n+tee \"$LOG\"\n+echo >> \"$LOG\"   # ensure at least 1 line of output, otherwise `grep -v` may unconditionally fail.\n+printf \"\\033[0m\\n[[[ end stdout ]]]\\n\"\n+\n+HAS_ERROR=0\n+for MATCH in \"$@\"; do\n+    if \"$GREPPER\" \"-$GREPFLAGS\" -- \"$MATCH\" \"$LOG\"; then\n+        if [ \"$INVERT\" = 1 ]; then\n+            printf \"\\033[1;31mError: should not match: %s\\033[0m\\n\" \"$MATCH\"\n+            HAS_ERROR=1\n+        fi\n+    else\n+        if [ \"$INVERT\" = 0 ]; then\n+            printf \"\\033[1;31mError: cannot match: %s\\033[0m\\n\" \"$MATCH\"\n+            HAS_ERROR=1\n+        fi\n+    fi\n+done\n+\n+exit \"$HAS_ERROR\""}, {"sha": "4849b0307423d5517f260c820cf4e04d2f2cc64f", "filename": "src/test/run-make/atomic-lock-free/Makefile", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fatomic-lock-free%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -7,36 +7,36 @@ all:\n ifeq ($(UNAME),Linux)\n ifeq ($(filter x86,$(LLVM_COMPONENTS)),x86)\n \t$(RUSTC) --target=i686-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=x86_64-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n ifeq ($(filter arm,$(LLVM_COMPONENTS)),arm)\n \t$(RUSTC) --target=arm-unknown-linux-gnueabi atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=arm-unknown-linux-gnueabihf atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=armv7-unknown-linux-gnueabihf atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n ifeq ($(filter aarch64,$(LLVM_COMPONENTS)),aarch64)\n \t$(RUSTC) --target=aarch64-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n ifeq ($(filter mips,$(LLVM_COMPONENTS)),mips)\n \t$(RUSTC) --target=mips-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=mipsel-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n ifeq ($(filter powerpc,$(LLVM_COMPONENTS)),powerpc)\n \t$(RUSTC) --target=powerpc-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=powerpc64-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=powerpc64le-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=s390x-unknown-linux-gnu atomic_lock_free.rs\n-\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | grep -vq __atomic_fetch_add\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n endif"}, {"sha": "fead197ce3906ce0ec4bef130979db12728644b8", "filename": "src/test/run-make/cat-and-grep-sanity-check/Makefile", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fcat-and-grep-sanity-check%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fcat-and-grep-sanity-check%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcat-and-grep-sanity-check%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -0,0 +1,46 @@\n+-include ../tools.mk\n+\n+all:\n+\techo a | $(CGREP) a\n+\t! echo b | $(CGREP) a\n+\techo xyz | $(CGREP) x y z\n+\t! echo abc | $(CGREP) b c d\n+\tprintf \"x\\ny\\nz\" | $(CGREP) x y z\n+\n+\techo AbCd | $(CGREP) -i a b C D\n+\t! echo AbCd | $(CGREP) a b C D\n+\n+\ttrue | $(CGREP) -v nothing\n+\t! echo nothing | $(CGREP) -v nothing\n+\t! echo xyz | $(CGREP) -v w x y\n+\t! echo xyz | $(CGREP) -v x y z\n+\techo xyz | $(CGREP) -v a b c\n+\n+\t! echo 'foo bar baz' | $(CGREP) 'foo baz'\n+\techo 'foo bar baz' | $(CGREP) foo baz\n+\techo 'x a `b` c y z' | $(CGREP) 'a `b` c'\n+\n+\techo baaac | $(CGREP) -e 'ba*c'\n+\techo bc | $(CGREP) -e 'ba*c'\n+\t! echo aaac | $(CGREP) -e 'ba*c'\n+\n+\techo aaa | $(CGREP) -e 'a+'\n+\t! echo bbb | $(CGREP) -e 'a+'\n+\n+\techo abc | $(CGREP) -e 'a|e|i|o|u'\n+\t! echo fgh | $(CGREP) -e 'a|e|i|o|u'\n+\techo abc | $(CGREP) -e '[aeiou]'\n+\t! echo fgh | $(CGREP) -e '[aeiou]'\n+\t! echo abc | $(CGREP) -e '[^aeiou]{3}'\n+\techo fgh | $(CGREP) -e '[^aeiou]{3}'\n+\techo ab cd ef gh | $(CGREP) -e '\\bcd\\b'\n+\t! echo abcdefgh | $(CGREP) -e '\\bcd\\b'\n+\techo xyz | $(CGREP) -e '...'\n+\t! echo xy | $(CGREP) -e '...'\n+\t! echo xyz | $(CGREP) -e '\\.\\.\\.'\n+\techo ... | $(CGREP) -e '\\.\\.\\.'\n+\n+\techo foo bar baz | $(CGREP) -e 'foo.*baz'\n+\t! echo foo bar baz | $(CGREP) -ve 'foo.*baz'\n+\t! echo foo bar baz | $(CGREP) -e 'baz.*foo'\n+\techo foo bar baz | $(CGREP) -ve 'baz.*foo'"}, {"sha": "929d5571194bd54737260169e079799f817cea1e", "filename": "src/test/run-make/cdylib-fewer-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcdylib-fewer-symbols%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -9,9 +9,5 @@ all:\n else\n all:\n \t$(RUSTC) foo.rs\n-\tnm -g \"$(call DYLIB,foo)\"\n-\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rdl_\n-\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rde_\n-\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rg_\n-\tnm -g \"$(call DYLIB,foo)\" | grep -vq __rust_\n+\tnm -g \"$(call DYLIB,foo)\" | $(CGREP) -v __rdl_ __rde_ __rg_ __rust_\n endif"}, {"sha": "81e06043c87aebef346de8313f2f3e0a5c3e97f7", "filename": "src/test/run-make/codegen-options-parsing/Makefile", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,33 +1,31 @@\n -include ../tools.mk\n \n-LOG = $(TMPDIR)/log.txt\n-\n all:\n \t#Option taking a number\n-\t$(RUSTC) -C codegen-units dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'codegen option `codegen-units` requires a number' $(LOG)\n-\t$(RUSTC) -C codegen-units= dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'incorrect value `` for codegen option `codegen-units` - a number was expected' $(LOG)\n-\t$(RUSTC) -C codegen-units=foo dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'incorrect value `foo` for codegen option `codegen-units` - a number was expected' $(LOG)\n+\t$(RUSTC) -C codegen-units dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'codegen option `codegen-units` requires a number'\n+\t$(RUSTC) -C codegen-units= dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'incorrect value `` for codegen option `codegen-units` - a number was expected'\n+\t$(RUSTC) -C codegen-units=foo dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'incorrect value `foo` for codegen option `codegen-units` - a number was expected'\n \t$(RUSTC) -C codegen-units=1 dummy.rs\n \t#Option taking a string\n-\t$(RUSTC) -C extra-filename dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'codegen option `extra-filename` requires a string' $(LOG)\n+\t$(RUSTC) -C extra-filename dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'codegen option `extra-filename` requires a string'\n \t$(RUSTC) -C extra-filename= dummy.rs 2>&1\n \t$(RUSTC) -C extra-filename=foo dummy.rs 2>&1\n \t#Option taking no argument\n-\t$(RUSTC) -C lto= dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'codegen option `lto` takes no value' $(LOG)\n-\t$(RUSTC) -C lto=1 dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'codegen option `lto` takes no value' $(LOG)\n-\t$(RUSTC) -C lto=foo dummy.rs 2>&1 | tee $(LOG)\n-\tgrep 'codegen option `lto` takes no value' $(LOG)\n+\t$(RUSTC) -C lto= dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'codegen option `lto` takes no value'\n+\t$(RUSTC) -C lto=1 dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'codegen option `lto` takes no value'\n+\t$(RUSTC) -C lto=foo dummy.rs 2>&1 | \\\n+\t\t$(CGREP) 'codegen option `lto` takes no value'\n \t$(RUSTC) -C lto dummy.rs\n \n \t# Should not link dead code...\n \t$(RUSTC) -Z print-link-args dummy.rs 2>&1 | \\\n-\t\tgrep -e '--gc-sections' -e '-z[^ ]* [^ ]*\\<ignore\\>' -e '-dead_strip' -e '/OPT:REF'\n+\t\t$(CGREP) -e '--gc-sections|-z[^ ]* [^ ]*<ignore>|-dead_strip|/OPT:REF'\n \t# ... unless you specifically ask to keep it\n \t$(RUSTC) -Z print-link-args -C link-dead-code dummy.rs 2>&1 | \\\n-\t\t(! grep -e '--gc-sections' -e '-z[^ ]* [^ ]*\\<ignore\\>' -e '-dead_strip' -e '/OPT:REF')\n+\t\t$(CGREP) -ve '--gc-sections|-z[^ ]* [^ ]*<ignore>|-dead_strip|/OPT:REF'"}, {"sha": "fef12c4da67033b2466b3d86a9e96d5953a4be71", "filename": "src/test/run-make/error-found-staticlib-instead-crate/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-found-staticlib-instead-crate%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) foo.rs --crate-type staticlib\n-\t$(RUSTC) bar.rs 2>&1 | grep \"found staticlib\"\n+\t$(RUSTC) bar.rs 2>&1 | $(CGREP) \"found staticlib\""}, {"sha": "cbc96901a388aed9f7ce95291d796305831376a9", "filename": "src/test/run-make/error-writing-dependencies/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -3,6 +3,6 @@\n all:\n \t# Let's get a nice error message\n \t$(BARE_RUSTC) foo.rs --emit dep-info --out-dir foo/bar/baz 2>&1 | \\\n-\t\tgrep \"error writing dependencies\"\n+\t\t$(CGREP) \"error writing dependencies\"\n \t# Make sure the filename shows up\n-\t$(BARE_RUSTC) foo.rs --emit dep-info --out-dir foo/bar/baz 2>&1 | grep \"baz\"\n+\t$(BARE_RUSTC) foo.rs --emit dep-info --out-dir foo/bar/baz 2>&1 | $(CGREP) \"baz\""}, {"sha": "bedb2b7d6aa5069a89d7a7687d30cdabe0b29d8b", "filename": "src/test/run-make/hir-tree/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fhir-tree%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fhir-tree%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhir-tree%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -6,4 +6,4 @@\n all:\n \t$(RUSTC) -o $(TMPDIR)/input.hir -Z unstable-options \\\n \t\t--unpretty=hir-tree input.rs\n-\tgrep '\"Hello, Rustaceans!\\\\n\"' $(TMPDIR)/input.hir\n+\t$(CGREP) '\"Hello, Rustaceans!\\n\"' < $(TMPDIR)/input.hir"}, {"sha": "f7b1d21ace281fa3b81b26eb7e612dfb92809aac", "filename": "src/test/run-make/include_bytes_deps/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finclude_bytes_deps%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -8,8 +8,7 @@ ifneq ($(shell uname),FreeBSD)\n ifndef IS_WINDOWS\n all:\n \t$(RUSTC) --emit dep-info main.rs\n-\tgrep \"input.txt\" $(TMPDIR)/main.d\n-\tgrep \"input.bin\" $(TMPDIR)/main.d\n+\t$(CGREP) \"input.txt\" \"input.bin\" < $(TMPDIR)/main.d\n else\n all:\n "}, {"sha": "0cab955f6442bb70d3acb8063ed645666a9ba414", "filename": "src/test/run-make/inline-always-many-cgu/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finline-always-many-cgu%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,7 +2,7 @@\n \n all:\n \t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n-\tif grep -w call $(TMPDIR)/*.ll; then \\\n+\tif cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b'; then \\\n \t\techo \"found call instruction when one wasn't expected\"; \\\n \t\texit 1; \\\n \tfi"}, {"sha": "b6fb122d98bf227bec3f3f7d5fd70126bbff3bbf", "filename": "src/test/run-make/invalid-library/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -3,4 +3,4 @@\n all:\n \ttouch $(TMPDIR)/rust.metadata.bin\n \t$(AR) crus $(TMPDIR)/libfoo-ffffffff-1.0.rlib $(TMPDIR)/rust.metadata.bin\n-\t$(RUSTC) foo.rs 2>&1 | grep \"can't find crate for\"\n+\t$(RUSTC) foo.rs 2>&1 | $(CGREP) \"can't find crate for\""}, {"sha": "3a91902ccceb622fc9ae2b78b103ac0f1c2c0cab", "filename": "src/test/run-make/invalid-staticlib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finvalid-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Finvalid-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-staticlib%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \ttouch $(TMPDIR)/libfoo.a\n-\techo | $(RUSTC) - --crate-type=rlib -lstatic=foo 2>&1 | grep \"failed to add native library\"\n+\techo | $(RUSTC) - --crate-type=rlib -lstatic=foo 2>&1 | $(CGREP) \"failed to add native library\""}, {"sha": "dbe8317dbc4bc3b51292a9919e2e52460b44fe64", "filename": "src/test/run-make/issue-14698/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-14698%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-14698%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14698%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n \n all:\n-\tTMP=fake TMPDIR=fake $(RUSTC) foo.rs 2>&1 | grep \"couldn't create a temp dir:\"\n+\tTMP=fake TMPDIR=fake $(RUSTC) foo.rs 2>&1 | $(CGREP) \"couldn't create a temp dir:\""}, {"sha": "6db737a9e72a2f2ea9d2617e982af8fa08e3a6c0", "filename": "src/test/run-make/issue-22131/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -4,4 +4,4 @@ all: foo.rs\n \t$(RUSTC) --cfg 'feature=\"bar\"' --crate-type lib foo.rs\n \t$(RUSTDOC) --test --cfg 'feature=\"bar\"' \\\n \t\t-L $(TMPDIR) foo.rs |\\\n-\t\tgrep -q 'foo.rs - foo (line 11) ... ok'\n+\t\t$(CGREP) 'foo.rs - foo (line 11) ... ok'"}, {"sha": "27631c31c4a06b38e802da900ed48e5f3a2992b3", "filename": "src/test/run-make/issue-26092/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-26092%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-26092%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-26092%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,5 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t\t$(RUSTC) -o \"\" blank.rs 2>&1 | \\\n-\t\t\tgrep -i 'No such file or directory'\n+\t$(RUSTC) -o \"\" blank.rs 2>&1 | $(CGREP) -i 'No such file or directory'"}, {"sha": "591e4e3dda344b0bb731dab06ce52317ee5366c1", "filename": "src/test/run-make/issue-33329/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-33329%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-33329%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-33329%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,5 +1,5 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) --target x86_64_unknown-linux-musl main.rs 2>&1 | \\\n-\t\tgrep \"error: Error loading target specification: Could not find specification for target\"\n+\t$(RUSTC) --target x86_64_unknown-linux-musl main.rs 2>&1 | $(CGREP) \\\n+\t\t\"error: Error loading target specification: Could not find specification for target\""}, {"sha": "6a451656dcb7ff32364058ab7572a8600c557a9f", "filename": "src/test/run-make/issue-35164/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-35164%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-35164%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-35164%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) main.rs --error-format json 2>&1 | grep -q '\"byte_start\":490.*\"byte_end\":496'\n+\t$(RUSTC) main.rs --error-format json 2>&1 | $(CGREP) -e '\"byte_start\":490\\b' '\"byte_end\":496\\b'"}, {"sha": "49db1d43e4718cb3d1005cfd8d8330fe2489c526", "filename": "src/test/run-make/issue-40535/Makefile", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-40535%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fissue-40535%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-40535%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,11 +1,13 @@\n+-include ../tools.mk\n+\n # The ICE occurred in the following situation:\n # * `foo` declares `extern crate bar, baz`, depends only on `bar` (forgetting `baz` in `Cargo.toml`)\n # * `bar` declares and depends on `extern crate baz`\n # * All crates built in metadata-only mode (`cargo check`)\n all:\n \t# cc https://github.com/rust-lang/rust/issues/40623\n-\t$(RUSTC) baz.rs --emit=metadata --out-dir=$(TMPDIR)\n-\t$(RUSTC) bar.rs --emit=metadata --extern baz=$(TMPDIR)/libbaz.rmeta --out-dir=$(TMPDIR)\n-\t$(RUSTC) foo.rs --emit=metadata --extern bar=$(TMPDIR)/libbar.rmeta --out-dir=$(TMPDIR) 2>&1 | \\\n-\tgrep -vq \"unexpectedly panicked\"\n+\t$(RUSTC) baz.rs --emit=metadata\n+\t$(RUSTC) bar.rs --emit=metadata --extern baz=$(TMPDIR)/libbaz.rmeta\n+\t$(RUSTC) foo.rs --emit=metadata --extern bar=$(TMPDIR)/libbar.rmeta 2>&1 | \\\n+\t\t$(CGREP) -v \"unexpectedly panicked\"\n \t# ^ Succeeds if it doesn't find the ICE message"}, {"sha": "d7c9fd2711285b14e2f4c28edc2954b955cd93d0", "filename": "src/test/run-make/link-arg/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Flink-arg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Flink-arg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-arg%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,4 +2,4 @@\n RUSTC_FLAGS = -C link-arg=\"-lfoo\" -C link-arg=\"-lbar\" -Z print-link-args\n \n all:\n-\t$(RUSTC) $(RUSTC_FLAGS) empty.rs | grep lfoo | grep lbar\n+\t$(RUSTC) $(RUSTC_FLAGS) empty.rs | $(CGREP) lfoo lbar"}, {"sha": "188cba5fe4127df52d0f0ada5bd13d379f007ef5", "filename": "src/test/run-make/link-cfg/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Flink-cfg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Flink-cfg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,7 +2,7 @@\n \n all: $(call DYLIB,return1) $(call DYLIB,return2) $(call NATIVE_STATICLIB,return3)\n \tls $(TMPDIR)\n-\t$(RUSTC) --print cfg --target x86_64-unknown-linux-musl | grep crt-static\n+\t$(RUSTC) --print cfg --target x86_64-unknown-linux-musl | $(CGREP) crt-static\n \n \t$(RUSTC) no-deps.rs --cfg foo\n \t$(call RUN,no-deps)"}, {"sha": "76d4b133defe2f4c84e31f84d69484315ff15552", "filename": "src/test/run-make/linker-output-non-utf8/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Flinker-output-non-utf8%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Flinker-output-non-utf8%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinker-output-non-utf8%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -19,6 +19,6 @@ all:\n \t$(RUSTC) library.rs\n \tmkdir $(bad_dir)\n \tmv $(TMPDIR)/liblibrary.a $(bad_dir)\n-\tLIBRARY_PATH=$(bad_dir) $(RUSTC) exec.rs 2>&1 | grep this_symbol_not_defined\n+\tLIBRARY_PATH=$(bad_dir) $(RUSTC) exec.rs 2>&1 | $(CGREP) this_symbol_not_defined\n \n endif"}, {"sha": "03a797d95f98477f0fbf90ed99f5affcd94866dc", "filename": "src/test/run-make/many-crates-but-no-match/Makefile", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fmany-crates-but-no-match%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fmany-crates-but-no-match%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmany-crates-but-no-match%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -27,7 +27,10 @@ all:\n \tmv $(TMPDIR)/$(call RLIB_GLOB,crateA) $(A3)\n \t# Ensure crateC fails to compile since A1 is \"missing\" and A2/A3 hashes do not match\n \t$(RUSTC) -L $(A2) -L $(A3) crateC.rs >$(LOG) 2>&1 || true\n-\tgrep \"found possibly newer version of crate \\`crateA\\` which \\`crateB\\` depends on\" $(LOG)\n-\tgrep \"note: perhaps that crate needs to be recompiled?\" $(LOG)\n-\tgrep \"crate \\`crateA\\`:\" $(LOG)  # this will match two entries\n-\tgrep \"crate \\`crateB\\`:\" $(LOG)\n+\t$(CGREP) \\\n+\t\t'found possibly newer version of crate `crateA` which `crateB` depends on' \\\n+\t\t'note: perhaps that crate needs to be recompiled?' \\\n+\t\t'crate `crateA`:' \\\n+\t\t'crate `crateB`:' \\\n+\t\t< $(LOG)\n+\t# the 'crate `crateA`' will match two entries.\n\\ No newline at end of file"}, {"sha": "1636e41b05652df7297835332361d0eaa403297d", "filename": "src/test/run-make/mismatching-target-triples/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -8,4 +8,4 @@\n all:\n \t$(RUSTC) foo.rs --target=i686-unknown-linux-gnu\n \t$(RUSTC) bar.rs --target=x86_64-unknown-linux-gnu 2>&1 \\\n-\t\t| grep \"couldn't find crate .foo. with expected target triple x86_64-unknown-linux-gnu\"\n+\t\t| $(CGREP) 'couldn'\"'\"'t find crate `foo` with expected target triple x86_64-unknown-linux-gnu'"}, {"sha": "b5a5bf492abe5c62833d439595fee9a010733900", "filename": "src/test/run-make/missing-crate-dependency/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -6,4 +6,4 @@ all:\n \t$(call REMOVE_RLIBS,crateA)\n \t# Ensure crateC fails to compile since dependency crateA is missing\n \t$(RUSTC) crateC.rs 2>&1 | \\\n-\t\tgrep \"can't find crate for \\`crateA\\` which \\`crateB\\` depends on\"\n+\t\t$(CGREP) 'can'\"'\"'t find crate for `crateA` which `crateB` depends on'"}, {"sha": "b9688f16c646465d82d216f8b42579c1cf2220da", "filename": "src/test/run-make/no-builtins-lto/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fno-builtins-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fno-builtins-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-builtins-lto%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -6,4 +6,4 @@ all:\n \t# Build an executable that depends on that crate using LTO. The no_builtins crate doesn't\n \t# participate in LTO, so its rlib must be explicitly linked into the final binary. Verify this by\n \t# grepping the linker arguments.\n-\t$(RUSTC) main.rs -C lto -Z print-link-args | grep 'libno_builtins.rlib'\n+\t$(RUSTC) main.rs -C lto -Z print-link-args | $(CGREP) 'libno_builtins.rlib'"}, {"sha": "08303a46d19299e590e59b1e1d38a74632d87bf2", "filename": "src/test/run-make/print-cfg/Makefile", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fprint-cfg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fprint-cfg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprint-cfg%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,16 +1,16 @@\n -include ../tools.mk\n \n all: default\n-\t$(RUSTC) --target x86_64-pc-windows-gnu --print cfg | grep windows\n-\t$(RUSTC) --target x86_64-pc-windows-gnu --print cfg | grep x86_64\n-\t$(RUSTC) --target i686-pc-windows-msvc --print cfg | grep msvc\n-\t$(RUSTC) --target i686-apple-darwin --print cfg | grep macos\n-\t$(RUSTC) --target i686-unknown-linux-gnu --print cfg | grep gnu\n+\t$(RUSTC) --target x86_64-pc-windows-gnu --print cfg | $(CGREP) windows\n+\t$(RUSTC) --target x86_64-pc-windows-gnu --print cfg | $(CGREP) x86_64\n+\t$(RUSTC) --target i686-pc-windows-msvc --print cfg | $(CGREP) msvc\n+\t$(RUSTC) --target i686-apple-darwin --print cfg | $(CGREP) macos\n+\t$(RUSTC) --target i686-unknown-linux-gnu --print cfg | $(CGREP) gnu\n \n ifdef IS_WINDOWS\n default:\n-\t$(RUSTC) --print cfg | grep windows\n+\t$(RUSTC) --print cfg | $(CGREP) windows\n else\n default:\n-\t$(RUSTC) --print cfg | grep unix\n+\t$(RUSTC) --print cfg | $(CGREP) unix\n endif"}, {"sha": "d2c8e7fd0434ccec9b9178829801ae514cbfe07f", "filename": "src/test/run-make/rustc-macro-dep-files/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -8,5 +8,5 @@ else\n all:\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs --emit dep-info\n-\tgrep \"proc-macro source\" $(TMPDIR)/bar.d && exit 1 || exit 0\n+\t$(CGREP) -v \"proc-macro source\" < $(TMPDIR)/bar.d\n endif"}, {"sha": "207615bfbd5c6b4196e08b81b39745506349cc64", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -24,7 +24,6 @@ endif\n \n all:\n ifeq ($(ASAN_SUPPORT),1)\n-\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | grep -q librustc_asan\n-\t$(TMPDIR)/overflow 2>&1 | tee $(LOG)\n-\tgrep -q stack-buffer-overflow $(LOG)\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) librustc_asan\n+\t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n endif"}, {"sha": "bea5519ec5f70889f4122cc60800c89060af4b1d", "filename": "src/test/run-make/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -18,6 +18,5 @@ all:\n ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | tee $(LOG)\n-\tgrep -q stack-buffer-overflow $(LOG)\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n endif"}, {"sha": "0cc8f73da8b56cf6b594e948d44b5d32cd85209d", "filename": "src/test/run-make/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -18,6 +18,5 @@ all:\n ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | tee $(LOG)\n-\tgrep -q stack-buffer-overflow $(LOG)\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n endif"}, {"sha": "dc37c0d0bc946193efc1a724aedab330f9a8e00c", "filename": "src/test/run-make/sanitizer-invalid-cratetype/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -14,5 +14,5 @@ endif\n \n all:\n ifeq ($(ASAN_SUPPORT),1)\n-\t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | grep -q -- '-Z sanitizer'\n+\t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | $(CGREP) '-Z sanitizer'\n endif"}, {"sha": "df8afee15ce073856f3ddf33695eed614a5b379f", "filename": "src/test/run-make/sanitizer-invalid-target/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,4 +1,5 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | grep -q 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` target'\n+\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | \\\n+\t\t$(CGREP) 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` target'"}, {"sha": "ab43fac2e99c3eb9eef7c0dd1d28783ff6a0ccb5", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,15 +1,12 @@\n -include ../tools.mk\n \n-LOG := $(TMPDIR)/log.txt\n-\n # FIXME(#46126) ThinLTO for libstd broke this test\n ifeq (1,0)\n all:\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ifdef SANITIZER_SUPPORT\n-\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n-\t$(TMPDIR)/leak 2>&1 | tee $(LOG)\n-\tgrep -q 'detected memory leaks' $(LOG)\n+\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n+\t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'\n endif\n endif\n "}, {"sha": "3507ca2bef2a051caf862acb322f86ae9bf48367", "filename": "src/test/run-make/sanitizer-memory/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -3,10 +3,8 @@\n all:\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ifdef SANITIZER_SUPPORT\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | tee $(TMPDIR)/out\n-\tgrep -q librustc_msan $(TMPDIR)/out\n-\t$(TMPDIR)/uninit 2>&1 | tee $(TMPDIR)/out\n-\tgrep -q use-of-uninitialized-value $(TMPDIR)/out\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n+\t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n endif\n endif\n "}, {"sha": "2b444d667bfa383b603aaeeb7655694f27918848", "filename": "src/test/run-make/sanitizer-staticlib-link/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -13,6 +13,6 @@ all:\n ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type staticlib --target $(TARGET) library.rs\n \t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | grep -q stack-buffer-overflow\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n endif\n "}, {"sha": "abc32d4423b05a8ffb01d12977c78592a8ffd394", "filename": "src/test/run-make/static-nobundle/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-nobundle%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -9,13 +9,13 @@ all: $(call NATIVE_STATICLIB,aaa)\n \t$(RUSTC) bbb.rs --crate-type=rlib\n \n \t# Check that bbb does NOT contain the definition of `native_func`\n-\tnm $(TMPDIR)/libbbb.rlib | (! grep \"T _*native_func\")\n-\tnm $(TMPDIR)/libbbb.rlib | grep \"U _*native_func\"\n+\tnm $(TMPDIR)/libbbb.rlib | $(CGREP) -ve \"T _*native_func\"\n+\tnm $(TMPDIR)/libbbb.rlib | $(CGREP) -e \"U _*native_func\"\n \n \t# Check that aaa gets linked (either as `-l aaa` or `aaa.lib`) when building ccc.\n-\t$(RUSTC) ccc.rs -C prefer-dynamic --crate-type=dylib -Z print-link-args | grep -e \"-l[\\\" ]*aaa\" -e \"aaa.lib\"\n+\t$(RUSTC) ccc.rs -C prefer-dynamic --crate-type=dylib -Z print-link-args | $(CGREP) -e '-l[\" ]*aaa|aaa\\.lib'\n \n \t# Check that aaa does NOT get linked when building ddd.\n-\t$(RUSTC) ddd.rs -Z print-link-args | (! grep -e \"-l[\\\" ]*aaa\" -e \"aaa.lib\")\n+\t$(RUSTC) ddd.rs -Z print-link-args | $(CGREP) -ve '-l[\" ]*aaa|aaa\\.lib'\n \n \t$(call RUN,ddd)"}, {"sha": "a6d294d2a1c0a5be6ecf382316770f73586c10fe", "filename": "src/test/run-make/symbols-are-reasonable/Makefile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -10,6 +10,4 @@ OUT=$(TMPDIR)/lib.s\n all:\n \t$(RUSTC) lib.rs --emit=asm --crate-type=staticlib\n \t# just check for symbol declarations with the names we're expecting.\n-\tgrep 'str.[0-9][0-9]*:' $(OUT)\n-\tgrep 'byte_str.[0-9][0-9]*:' $(OUT)\n-\tgrep 'vtable.[0-9][0-9]*' $(OUT)\n+\t$(CGREP) -e 'str\\.[0-9]+:' 'byte_str\\.[0-9]+:' 'vtable\\.[0-9]+' < $(OUT)"}, {"sha": "0850a2633e5d8282bc6c3c99194f691b8f24068e", "filename": "src/test/run-make/symbols-include-type-name/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsymbols-include-type-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fsymbols-include-type-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-include-type-name%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -6,4 +6,4 @@ OUT=$(TMPDIR)/lib.s\n \n all:\n \t$(RUSTC) --crate-type staticlib --emit asm lib.rs\n-\tgrep Def $(OUT)\n+\t$(CGREP) Def < $(OUT)"}, {"sha": "aff15ce38b4aef08c84c63917384ae48b3ac784f", "filename": "src/test/run-make/target-specs/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -1,9 +1,9 @@\n -include ../tools.mk\n all:\n \t$(RUSTC) foo.rs --target=my-awesome-platform.json --crate-type=lib --emit=asm\n-\tgrep -q -v morestack < $(TMPDIR)/foo.s\n-\t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep -q \"Error loading target specification\"\n-\t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | grep 'Field llvm-target'\n+\t$(CGREP) -v morestack < $(TMPDIR)/foo.s\n+\t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | $(CGREP) \"Error loading target specification\"\n+\t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | $(CGREP) 'Field llvm-target'\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-awesome-platform --crate-type=lib --emit=asm\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-x86_64-unknown-linux-gnu-platform --crate-type=lib --emit=asm\n \t$(RUSTC) -Z unstable-options --target=my-awesome-platform.json --print target-spec-json > $(TMPDIR)/test-platform.json && $(RUSTC) -Z unstable-options --target=$(TMPDIR)/test-platform.json --print target-spec-json | diff -q $(TMPDIR)/test-platform.json -"}, {"sha": "c5f575ddf84c694c9e5ba8257a4ae88f2ecc7e31", "filename": "src/test/run-make/target-without-atomics/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-without-atomics%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,4 +2,4 @@\n \n # The target used below doesn't support atomic operations. Verify that's the case\n all:\n-\t$(RUSTC) --print cfg --target thumbv6m-none-eabi | grep -qv target_has_atomic\n+\t$(RUSTC) --print cfg --target thumbv6m-none-eabi | $(CGREP) -v target_has_atomic"}, {"sha": "39477c07ced7cbca048f41fb611ae52555d2ffd6", "filename": "src/test/run-make/test-harness/Makefile", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftest-harness%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftest-harness%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftest-harness%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -3,7 +3,6 @@\n all:\n \t# check that #[cfg_attr(..., ignore)] does the right thing.\n \t$(RUSTC) --test test-ignore-cfg.rs --cfg ignorecfg\n-\t$(call RUN,test-ignore-cfg) | grep 'shouldnotignore ... ok'\n-\t$(call RUN,test-ignore-cfg) | grep 'shouldignore ... ignored'\n-\t$(call RUN,test-ignore-cfg --quiet) | grep \"^i\\.$$\"\n-\t$(call RUN,test-ignore-cfg --quiet) | grep -v 'should'\n+\t$(call RUN,test-ignore-cfg) | $(CGREP) 'shouldnotignore ... ok' 'shouldignore ... ignored'\n+\t$(call RUN,test-ignore-cfg --quiet) | $(CGREP) -e \"^i\\.$$\"\n+\t$(call RUN,test-ignore-cfg --quiet) | $(CGREP) -v 'should'"}, {"sha": "d9103e1992735eda23ea2bfeeeb7984996f20edd", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -16,6 +16,7 @@ RUSTDOC := $(RUSTDOC) --linker $(RUSTC_LINKER) -Z unstable-options\n endif\n #CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py\n+CGREP := \"$(S)/src/etc/cat-and-grep.sh\"\n \n # This is the name of the binary we will generate and run; use this\n # e.g. for `$(CC) -o $(RUN_BINFILE)`."}, {"sha": "f99e4611174cae034030b369c832a57c44376364", "filename": "src/test/run-make/treat-err-as-bug/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftreat-err-as-bug%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftreat-err-as-bug%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftreat-err-as-bug%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) err.rs -Z treat-err-as-bug 2>&1 \\\n-\t    | grep -q \"panicked at 'encountered error with .-Z treat_err_as_bug'\"\n+\t    | $(CGREP) \"panicked at 'encountered error with \\`-Z treat_err_as_bug'\""}, {"sha": "9fd1377322b94cc59f40730a04ce5b62675ebdf8", "filename": "src/test/run-make/type-mismatch-same-crate-name/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -8,12 +8,12 @@ all:\n \t$(RUSTC) --crate-type=rlib crateB.rs --extern crateA=$(TMPDIR)/libcrateA-1.rlib\n \t# make crateC depend on version 2 of crateA\n \t$(RUSTC) crateC.rs --extern crateA=$(TMPDIR)/libcrateA-2.rlib 2>&1 | \\\n-\t\ttr -d '\\r\\n' | grep \\\n+\t\ttr -d '\\r\\n' | $(CGREP) -e \\\n \t\"mismatched types.*\\\n-\tcrateB::try_foo(foo2);.*\\\n+\tcrateB::try_foo\\(foo2\\);.*\\\n \texpected struct \\`crateA::foo::Foo\\`, found struct \\`crateA::Foo\\`.*\\\n \tdifferent versions of crate \\`crateA\\`.*\\\n \tmismatched types.*\\\n-\tcrateB::try_bar(bar2);.*\\\n+\tcrateB::try_bar\\(bar2\\);.*\\\n \texpected trait \\`crateA::bar::Bar\\`, found trait \\`crateA::Bar\\`.*\\\n \tdifferent versions of crate \\`crateA\\`\""}, {"sha": "47edcbb5d0a1e2ed643e472d44c33fd549bda15b", "filename": "src/test/run-make/used/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fused%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fused%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fused%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -7,5 +7,5 @@ all:\n else\n all:\n \t$(RUSTC) -C opt-level=3 --emit=obj used.rs\n-\tnm $(TMPDIR)/used.o | grep FOO\n+\tnm $(TMPDIR)/used.o | $(CGREP) FOO\n endif"}, {"sha": "acbadbef9fb4af7db748b960f5e78d7083a999dc", "filename": "src/test/run-make/volatile-intrinsics/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -6,5 +6,4 @@ all:\n \t$(call RUN,main)\n \t# ... and the loads/stores must not be optimized out.\n \t$(RUSTC) main.rs --emit=llvm-ir\n-\tgrep \"load volatile\"  $(TMPDIR)/main.ll\n-\tgrep \"store volatile\" $(TMPDIR)/main.ll\n+\t$(CGREP) \"load volatile\" \"store volatile\" < $(TMPDIR)/main.ll"}, {"sha": "a5543e3b2c4d0e281205ce888696c225273766c7", "filename": "src/test/run-make/weird-output-filenames/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile?ref=ab788a2ee175c7560f0ca58bbc183ecfd57d2f7a", "patch": "@@ -3,13 +3,13 @@\n all:\n \tcp foo.rs $(TMPDIR)/.foo.rs\n \t$(RUSTC) $(TMPDIR)/.foo.rs 2>&1 \\\n-\t\t| grep \"invalid character.*in crate name:\"\n+\t\t| $(CGREP) -e \"invalid character.*in crate name:\"\n \tcp foo.rs $(TMPDIR)/.foo.bar\n \t$(RUSTC) $(TMPDIR)/.foo.bar 2>&1 \\\n-\t\t| grep \"invalid character.*in crate name:\"\n+\t\t| $(CGREP) -e \"invalid character.*in crate name:\"\n \tcp foo.rs $(TMPDIR)/+foo+bar\n \t$(RUSTC) $(TMPDIR)/+foo+bar 2>&1 \\\n-\t\t| grep \"invalid character.*in crate name:\"\n+\t\t| $(CGREP) -e \"invalid character.*in crate name:\"\n \tcp foo.rs $(TMPDIR)/-foo.rs\n \t$(RUSTC) $(TMPDIR)/-foo.rs 2>&1 \\\n-\t\t| grep 'crate names cannot start with a `-`'\n+\t\t| $(CGREP) 'crate names cannot start with a `-`'"}]}