{"sha": "cf49d6b080bb685304c63379a3e101dc7df4ab14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNDlkNmIwODBiYjY4NTMwNGM2MzM3OWEzZTEwMWRjN2RmNGFiMTQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-12T21:50:58Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-12T21:50:58Z"}, "message": "Add the interpreter from my rustc branch and hook it up to CompileController.", "tree": {"sha": "d7ceaa44b3ee3f98e3ca466d715991ec2a4e93c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ceaa44b3ee3f98e3ca466d715991ec2a4e93c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf49d6b080bb685304c63379a3e101dc7df4ab14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf49d6b080bb685304c63379a3e101dc7df4ab14", "html_url": "https://github.com/rust-lang/rust/commit/cf49d6b080bb685304c63379a3e101dc7df4ab14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf49d6b080bb685304c63379a3e101dc7df4ab14/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "ea8c4bf7f35f6f77f75d92ad8ce8349f6e81ddba", "filename": ".gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf49d6b080bb685304c63379a3e101dc7df4ab14/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/cf49d6b080bb685304c63379a3e101dc7df4ab14/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=cf49d6b080bb685304c63379a3e101dc7df4ab14", "patch": "@@ -0,0 +1 @@\n+/target"}, {"sha": "b86c754ccdf18806f892efd3dab22e6bfc78f46e", "filename": "Cargo.lock", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf49d6b080bb685304c63379a3e101dc7df4ab14/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cf49d6b080bb685304c63379a3e101dc7df4ab14/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cf49d6b080bb685304c63379a3e101dc7df4ab14", "patch": "@@ -0,0 +1,4 @@\n+[root]\n+name = \"miri\"\n+version = \"0.1.0\"\n+"}, {"sha": "8963f7a6ab8d84d3f8664458d04c9f6270111bb7", "filename": "Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf49d6b080bb685304c63379a3e101dc7df4ab14/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cf49d6b080bb685304c63379a3e101dc7df4ab14/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=cf49d6b080bb685304c63379a3e101dc7df4ab14", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"miri\"\n+version = \"0.1.0\"\n+authors = [\"Scott Olson <scott@solson.me>\"]\n+description = \"An experimental interpreter for Rust MIR.\"\n+repository = \"https://github.com/tsion/miri\"\n+license = \"ISC\""}, {"sha": "2382a5d30774a1ee7d75ebd427a6ea721776e7e3", "filename": "src/interpreter.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/cf49d6b080bb685304c63379a3e101dc7df4ab14/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf49d6b080bb685304c63379a3e101dc7df4ab14/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=cf49d6b080bb685304c63379a3e101dc7df4ab14", "patch": "@@ -0,0 +1,109 @@\n+use rustc::front;\n+use rustc::middle::ty;\n+use rustc_mir::repr::{self as mir, Mir};\n+use rustc_mir::mir_map::MirMap;\n+use syntax::attr::AttrMetaMethods;\n+\n+#[derive(Clone, Debug)]\n+enum Value {\n+    Uninit,\n+    Int(i64),\n+}\n+\n+struct Interpreter<'tcx> {\n+    mir: &'tcx Mir<'tcx>,\n+    var_vals: Vec<Value>,\n+    temp_vals: Vec<Value>,\n+    result: Value,\n+}\n+\n+impl<'tcx> Interpreter<'tcx> {\n+    fn new(mir: &'tcx Mir<'tcx>) -> Self {\n+        Interpreter {\n+            mir: mir,\n+            var_vals: vec![Value::Uninit; mir.var_decls.len()],\n+            temp_vals: vec![Value::Uninit; mir.temp_decls.len()],\n+            result: Value::Uninit,\n+        }\n+    }\n+\n+    fn run(&mut self) {\n+        let start_block = self.mir.basic_block_data(mir::START_BLOCK);\n+\n+        for stmt in &start_block.statements {\n+            use rustc_mir::repr::Lvalue::*;\n+            use rustc_mir::repr::StatementKind::*;\n+\n+            println!(\"  {:?}\", stmt);\n+            match stmt.kind {\n+                Assign(ref lv, ref rv) => {\n+                    let val = self.eval_rvalue(rv);\n+\n+                    let spot = match *lv {\n+                        Var(i) => &mut self.var_vals[i as usize],\n+                        Temp(i) => &mut self.temp_vals[i as usize],\n+                        ReturnPointer => &mut self.result,\n+                        _ => unimplemented!(),\n+                    };\n+\n+                    *spot = val;\n+                }\n+                Drop(_kind, ref _lv) => { /* TODO */ },\n+            }\n+        }\n+\n+        println!(\"  {:?}\", start_block.terminator);\n+        println!(\"=> {:?}\", self.result);\n+    }\n+\n+    fn eval_rvalue(&mut self, rv: &mir::Rvalue) -> Value {\n+        use rustc_mir::repr::Rvalue::*;\n+\n+        match *rv {\n+            Use(ref op) => self.eval_operand(op),\n+            BinaryOp(mir::BinOp::Add, ref left, ref right) => {\n+                let left_val = self.eval_operand(left);\n+                let right_val = self.eval_operand(right);\n+                match (left_val, right_val) {\n+                    (Value::Int(l), Value::Int(r)) => Value::Int(l + r),\n+                    _ => unimplemented!(),\n+                }\n+            }\n+            _ => unimplemented!(),\n+        }\n+    }\n+\n+    fn eval_operand(&mut self, op: &mir::Operand) -> Value {\n+        use rustc::middle::const_eval::ConstVal::*;\n+        use rustc_mir::repr::Lvalue::*;\n+        use rustc_mir::repr::Operand::*;\n+\n+        match *op {\n+            Consume(Var(i)) => self.var_vals[i as usize].clone(),\n+            Consume(Temp(i)) => self.temp_vals[i as usize].clone(),\n+            Constant(ref constant) => {\n+                match constant.literal {\n+                    mir::Literal::Value { value: Int(n) } => Value::Int(n),\n+                    _ => unimplemented!(),\n+                }\n+            }\n+            _ => unimplemented!(),\n+        }\n+    }\n+}\n+\n+pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>) {\n+    for (&id, mir) in mir_map {\n+        for attr in tcx.map.attrs(id) {\n+            if attr.check_name(\"miri_run\") {\n+                let item = match tcx.map.get(id) {\n+                    front::map::NodeItem(item) => item,\n+                    _ => panic!(),\n+                };\n+                println!(\"Interpreting: {}\", item.name);\n+                let mut interpreter = Interpreter::new(mir);\n+                interpreter.run();\n+            }\n+        }\n+    }\n+}"}, {"sha": "808b43e9643fa892221a5db8ef155786566a4db2", "filename": "src/main.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cf49d6b080bb685304c63379a3e101dc7df4ab14/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf49d6b080bb685304c63379a3e101dc7df4ab14/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=cf49d6b080bb685304c63379a3e101dc7df4ab14", "patch": "@@ -0,0 +1,31 @@\n+#![feature(rustc_private)]\n+\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate rustc_mir;\n+extern crate syntax;\n+\n+mod interpreter;\n+\n+use rustc::session::Session;\n+use rustc_driver::{driver, CompilerCalls, Compilation};\n+\n+struct MiriCompilerCalls;\n+\n+impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n+    fn build_controller(&mut self, _: &Session) -> driver::CompileController<'a> {\n+        let mut control = driver::CompileController::basic();\n+        control.after_analysis.stop = Compilation::Stop;\n+\n+        control.after_analysis.callback = Box::new(|state| {\n+            interpreter::interpret_start_points(state.tcx.unwrap(), state.mir_map.unwrap());\n+        });\n+\n+        control\n+    }\n+}\n+\n+fn main() {\n+    let args: Vec<String> = std::env::args().collect();\n+    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);\n+}"}, {"sha": "33b3b533f55c7e3820246f0af099d9be0d0ad643", "filename": "test/add.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf49d6b080bb685304c63379a3e101dc7df4ab14/test%2Fadd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf49d6b080bb685304c63379a3e101dc7df4ab14/test%2Fadd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fadd.rs?ref=cf49d6b080bb685304c63379a3e101dc7df4ab14", "patch": "@@ -0,0 +1,12 @@\n+#![feature(custom_attribute, rustc_attrs)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[rustc_mir]\n+#[miri_run]\n+fn foo() -> i32 {\n+    let x = 1;\n+    let y = 2;\n+    x + y\n+}\n+\n+fn main() {}"}]}