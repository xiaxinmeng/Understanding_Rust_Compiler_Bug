{"sha": "2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMGY4NzYxMGQ4ZmRjYjZhOTBjZDhkZDFhMzcyZmUwY2NjOGE0MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-18T04:32:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-18T04:32:16Z"}, "message": "auto merge of #18022 : nikomatsakis/rust/issue-18019, r=pcwalton\n\nOnly consider impliciy unboxed closure impl if the obligation is actually for `Fn`, `FnMut`, or `FnOnce`.\r\n\r\nFixes #18019\r\n\r\nr? @pcwalton", "tree": {"sha": "8d4eee30cd81bc590ee5314e68727ef97b367887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4eee30cd81bc590ee5314e68727ef97b367887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "html_url": "https://github.com/rust-lang/rust/commit/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1270f8e77a53b5be5ea3de10440c79394c0ad025", "url": "https://api.github.com/repos/rust-lang/rust/commits/1270f8e77a53b5be5ea3de10440c79394c0ad025", "html_url": "https://github.com/rust-lang/rust/commit/1270f8e77a53b5be5ea3de10440c79394c0ad025"}, {"sha": "f4a7d32c8b53649d20735c8a90469b08fe7cc3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a7d32c8b53649d20735c8a90469b08fe7cc3dc", "html_url": "https://github.com/rust-lang/rust/commit/f4a7d32c8b53649d20735c8a90469b08fe7cc3dc"}], "stats": {"total": 92, "additions": 56, "deletions": 36}, "files": [{"sha": "2a45d536066efdc846bafcb7563a87aa13647fdc", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "patch": "@@ -608,6 +608,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n          * unified during the confirmation step.\n          */\n \n+        let tcx = self.tcx();\n+        let kind = if Some(obligation.trait_ref.def_id) == tcx.lang_items.fn_trait() {\n+            ty::FnUnboxedClosureKind\n+        } else if Some(obligation.trait_ref.def_id) == tcx.lang_items.fn_mut_trait() {\n+            ty::FnMutUnboxedClosureKind\n+        } else if Some(obligation.trait_ref.def_id) == tcx.lang_items.fn_once_trait() {\n+            ty::FnOnceUnboxedClosureKind\n+        } else {\n+            return Ok(()); // not a fn trait, ignore\n+        };\n+\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         let closure_def_id = match ty::get(self_ty).sty {\n             ty::ty_unboxed_closure(id, _) => id,\n@@ -622,37 +633,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                self_ty.repr(self.tcx()),\n                obligation.repr(self.tcx()));\n \n-        let tcx = self.tcx();\n-        let fn_traits = [\n-            (ty::FnUnboxedClosureKind, tcx.lang_items.fn_trait()),\n-            (ty::FnMutUnboxedClosureKind, tcx.lang_items.fn_mut_trait()),\n-            (ty::FnOnceUnboxedClosureKind, tcx.lang_items.fn_once_trait()),\n-            ];\n-        for tuple in fn_traits.iter() {\n-            let kind = match tuple {\n-                &(kind, Some(ref fn_trait))\n-                    if *fn_trait == obligation.trait_ref.def_id =>\n-                {\n-                    kind\n-                }\n-                _ => continue,\n-            };\n-\n-            // Check to see whether the argument and return types match.\n-            let closure_kind = match self.typer.unboxed_closures().borrow().find(&closure_def_id) {\n-                Some(closure) => closure.kind,\n-                None => {\n-                    self.tcx().sess.span_bug(\n-                        obligation.cause.span,\n-                        format!(\"No entry for unboxed closure: {}\",\n-                                closure_def_id.repr(self.tcx())).as_slice());\n-                }\n-            };\n-\n-            if closure_kind != kind {\n-                continue;\n+        let closure_kind = match self.typer.unboxed_closures().borrow().find(&closure_def_id) {\n+            Some(closure) => closure.kind,\n+            None => {\n+                self.tcx().sess.span_bug(\n+                    obligation.cause.span,\n+                    format!(\"No entry for unboxed closure: {}\",\n+                            closure_def_id.repr(self.tcx())).as_slice());\n             }\n+        };\n \n+        if closure_kind == kind {\n             candidates.vec.push(UnboxedClosureCandidate(closure_def_id));\n         }\n "}, {"sha": "9be64bf534679722fda892ec2665cb4217dbd2b3", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "patch": "@@ -8,28 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test static calls to make sure that we align the Self and input\n+// type parameters on a trait correctly.\n+\n trait Tr<T> {\n     fn op(T) -> Self;\n }\n \n-// these compile as if Self: Tr<U>, even tho only Self: Tr<Self or T>\n trait A:    Tr<Self> {\n     fn test<U>(u: U) -> Self {\n         Tr::op(u)   //~ ERROR not implemented\n     }\n }\n+\n trait B<T>: Tr<T> {\n     fn test<U>(u: U) -> Self {\n         Tr::op(u)   //~ ERROR not implemented\n     }\n }\n \n-impl<T> Tr<T> for T {\n-    fn op(t: T) -> T { t }\n-}\n-impl<T> A for T {}\n-\n fn main() {\n-    std::io::println(A::test((&7306634593706211700, 8)));\n }\n "}, {"sha": "f4ca67548fd5333f76075151758ad642019732e0", "filename": "src/test/run-pass/multidispatch-infer-from-single-impl.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/src%2Ftest%2Frun-pass%2Fmultidispatch-infer-from-single-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418/src%2Ftest%2Frun-pass%2Fmultidispatch-infer-from-single-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch-infer-from-single-impl.rs?ref=2c0f87610d8fdcb6a90cd8dd1a372fe0ccc8a418", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly infer that `E` must be `()` here.  This is\n+// known because there is just one impl that could apply where\n+// `Self=()`.\n+\n+pub trait FromError<E> {\n+    fn from_error(err: E) -> Self;\n+}\n+\n+impl<E> FromError<E> for E {\n+    fn from_error(err: E) -> E {\n+        err\n+    }\n+}\n+\n+fn test() -> Result<(), ()> {\n+    Err(FromError::from_error(()))\n+}\n+\n+fn main() {\n+    let result = (|| Err(FromError::from_error(())))();\n+    let foo: () = result.unwrap_or(());\n+}"}]}