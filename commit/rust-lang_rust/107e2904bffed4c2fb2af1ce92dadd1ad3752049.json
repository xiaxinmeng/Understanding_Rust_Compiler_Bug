{"sha": "107e2904bffed4c2fb2af1ce92dadd1ad3752049", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwN2UyOTA0YmZmZWQ0YzJmYjJhZjFjZTkyZGFkZDFhZDM3NTIwNDk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-08-16T15:08:55Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-08-19T19:08:35Z"}, "message": "Use CopyTaggedPtr for ParamEnv", "tree": {"sha": "adfd4feb0a2a8a17e21617818a32c5c106249d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfd4feb0a2a8a17e21617818a32c5c106249d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107e2904bffed4c2fb2af1ce92dadd1ad3752049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107e2904bffed4c2fb2af1ce92dadd1ad3752049", "html_url": "https://github.com/rust-lang/rust/commit/107e2904bffed4c2fb2af1ce92dadd1ad3752049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107e2904bffed4c2fb2af1ce92dadd1ad3752049/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8fe232836f7ecf1b1d76d82a91c8d0022be2786", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fe232836f7ecf1b1d76d82a91c8d0022be2786", "html_url": "https://github.com/rust-lang/rust/commit/c8fe232836f7ecf1b1d76d82a91c8d0022be2786"}], "stats": {"total": 107, "additions": 47, "deletions": 60}, "files": [{"sha": "83a2bdf90f9af0843baa178201445f830e012449", "filename": "src/librustc_middle/ty/list.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/107e2904bffed4c2fb2af1ce92dadd1ad3752049/src%2Flibrustc_middle%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107e2904bffed4c2fb2af1ce92dadd1ad3752049/src%2Flibrustc_middle%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flist.rs?ref=107e2904bffed4c2fb2af1ce92dadd1ad3752049", "patch": "@@ -35,6 +35,21 @@ pub struct List<T> {\n     opaque: OpaqueListContents,\n }\n \n+unsafe impl<'a, T: 'a> rustc_data_structures::tagged_ptr::Pointer for &'a List<T> {\n+    const BITS: usize = std::mem::align_of::<usize>().trailing_zeros() as usize;\n+    fn into_usize(self) -> usize {\n+        self as *const List<T> as usize\n+    }\n+    unsafe fn from_usize(ptr: usize) -> Self {\n+        &*(ptr as *const List<T>)\n+    }\n+    unsafe fn with_ref<R, F: FnOnce(&Self) -> R>(ptr: usize, f: F) -> R {\n+        // Self: Copy so this is fine\n+        let ptr = Self::from_usize(ptr);\n+        f(&ptr)\n+    }\n+}\n+\n unsafe impl<T: Sync> Sync for List<T> {}\n \n impl<T: Copy> List<T> {"}, {"sha": "4fa86a91254ce698cffbe64a1a4ee8d000015d57", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 32, "deletions": 60, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/107e2904bffed4c2fb2af1ce92dadd1ad3752049/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107e2904bffed4c2fb2af1ce92dadd1ad3752049/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=107e2904bffed4c2fb2af1ce92dadd1ad3752049", "patch": "@@ -27,6 +27,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n+use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n@@ -46,7 +47,6 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use std::marker::PhantomData;\n use std::ops::Range;\n use std::ptr;\n use std::str;\n@@ -1713,41 +1713,45 @@ impl WithOptConstParam<DefId> {\n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n /// particular point.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ParamEnv<'tcx> {\n-    // We pack the caller_bounds List pointer and a Reveal enum into this usize.\n-    // Specifically, the low bit represents Reveal, with 0 meaning `UserFacing`\n-    // and 1 meaning `All`. The rest is the pointer.\n-    //\n-    // This relies on the List<Predicate<'tcx>> type having at least 2-byte\n-    // alignment. Lists start with a usize and are repr(C) so this should be\n-    // fine; there is a debug_assert in the constructor as well.\n-    //\n-    // Note that the choice of 0 for UserFacing is intentional -- since it is the\n-    // first variant in Reveal this means that joining the pointer is a simple `or`.\n-    packed_data: usize,\n-\n-    /// `Obligation`s that the caller must satisfy. This is basically\n-    /// the set of bounds on the in-scope type parameters, translated\n+    /// This packs both caller bounds and the reveal enum into one pointer.\n+    ///\n+    /// Caller bounds are `Obligation`s that the caller must satisfy. This is\n+    /// basically the set of bounds on the in-scope type parameters, translated\n     /// into `Obligation`s, and elaborated and normalized.\n     ///\n-    /// Note: This is packed into the `packed_data` usize above, use the\n-    /// `caller_bounds()` method to access it.\n-    caller_bounds: PhantomData<&'tcx List<Predicate<'tcx>>>,\n-\n+    /// Use the `caller_bounds()` method to access.\n+    ///\n     /// Typically, this is `Reveal::UserFacing`, but during codegen we\n     /// want `Reveal::All`.\n     ///\n-    /// Note: This is packed into the caller_bounds usize above, use the reveal()\n-    /// method to access it.\n-    reveal: PhantomData<traits::Reveal>,\n+    /// Note: This is packed, use the reveal() method to access it.\n+    packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, traits::Reveal, true>,\n \n     /// If this `ParamEnv` comes from a call to `tcx.param_env(def_id)`,\n     /// register that `def_id` (useful for transitioning to the chalk trait\n     /// solver).\n     pub def_id: Option<DefId>,\n }\n \n+unsafe impl rustc_data_structures::tagged_ptr::Tag for traits::Reveal {\n+    const BITS: usize = 1;\n+    fn into_usize(self) -> usize {\n+        match self {\n+            traits::Reveal::UserFacing => 0,\n+            traits::Reveal::All => 1,\n+        }\n+    }\n+    unsafe fn from_usize(ptr: usize) -> Self {\n+        match ptr {\n+            0 => traits::Reveal::UserFacing,\n+            1 => traits::Reveal::All,\n+            _ => std::hint::unreachable_unchecked(),\n+        }\n+    }\n+}\n+\n impl<'tcx> fmt::Debug for ParamEnv<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"ParamEnv\")\n@@ -1758,24 +1762,6 @@ impl<'tcx> fmt::Debug for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> Hash for ParamEnv<'tcx> {\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        // List hashes as the raw pointer, so we can skip splitting into the\n-        // pointer and the enum.\n-        self.packed_data.hash(state);\n-        self.def_id.hash(state);\n-    }\n-}\n-\n-impl<'tcx> PartialEq for ParamEnv<'tcx> {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.caller_bounds() == other.caller_bounds()\n-            && self.reveal() == other.reveal()\n-            && self.def_id == other.def_id\n-    }\n-}\n-impl<'tcx> Eq for ParamEnv<'tcx> {}\n-\n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         self.caller_bounds().hash_stable(hcx, hasher);\n@@ -1812,13 +1798,12 @@ impl<'tcx> ParamEnv<'tcx> {\n \n     #[inline]\n     pub fn caller_bounds(self) -> &'tcx List<Predicate<'tcx>> {\n-        // mask out bottom bit\n-        unsafe { &*((self.packed_data & (!1)) as *const _) }\n+        self.packed.pointer()\n     }\n \n     #[inline]\n     pub fn reveal(self) -> traits::Reveal {\n-        if self.packed_data & 1 == 0 { traits::Reveal::UserFacing } else { traits::Reveal::All }\n+        self.packed.tag()\n     }\n \n     /// Construct a trait environment with no where-clauses in scope\n@@ -1840,24 +1825,11 @@ impl<'tcx> ParamEnv<'tcx> {\n         reveal: Reveal,\n         def_id: Option<DefId>,\n     ) -> Self {\n-        let packed_data = caller_bounds as *const _ as usize;\n-        // Check that we can pack the reveal data into the pointer.\n-        debug_assert!(packed_data & 1 == 0);\n-        ty::ParamEnv {\n-            packed_data: packed_data\n-                | match reveal {\n-                    Reveal::UserFacing => 0,\n-                    Reveal::All => 1,\n-                },\n-            caller_bounds: PhantomData,\n-            reveal: PhantomData,\n-            def_id,\n-        }\n+        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal), def_id }\n     }\n \n     pub fn with_user_facing(mut self) -> Self {\n-        // clear bottom bit\n-        self.packed_data &= !1;\n+        self.packed.set_tag(Reveal::UserFacing);\n         self\n     }\n \n@@ -1871,7 +1843,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// will be normalized to their underlying types.\n     /// See PR #65989 and issue #65918 for more details\n     pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {\n-        if self.packed_data & 1 == 1 {\n+        if self.packed.tag() == traits::Reveal::All {\n             return self;\n         }\n "}]}