{"sha": "25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "node_id": "C_kwDOAAsO6NoAKDI1ZmNjMGVmOGM0YTNiN2E4ZGJmZWZkYjNiMTk4YzA5Y2VlOWYxYzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-04T15:34:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T15:34:17Z"}, "message": "Rollup merge of #92507 - chordtoll:suggest-single-quotes, r=petrochenkov\n\nSuggest single quotes when char expected, str provided\n\nIf a type mismatch occurs where a char is expected and a string literal is provided, suggest changing the double quotes to single quotes.\n\nWe already provide this suggestion in the other direction ( ' -> \" ).\n\nEspecially useful for new rust devs used to a language in which single/double quotes are interchangeable.\n\nFixes #92479.", "tree": {"sha": "f6326bcf7db03dfa6bad87c5a326efd04c18f3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6326bcf7db03dfa6bad87c5a326efd04c18f3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1Gj6CRBK7hj4Ov3rIwAA9SsIAChgCXncv70zpYmiKmg2OvR5\n058n1wobG+y+qoUVcWfa+DVoqbiY7SPg+nscRhA73jtJQgChjqXQX0Lr9dy+sJ4L\nfUbmmpjd9zGAG3LodKJSkHqOwzecq9xnKD66uTFbgnLzcUJMrpGrQOdKh/nG4gfi\nlnbrUMa5WuPY0V8yZhfoDbhTe6tOTUF7otrfU76rQOw1NfdOJ0d/gCpQ+qi4C2eV\n48c+P59YrhRsNaWQeFVI0EL0cFBMiupbOte6VPraaxKLcuKU6tWzEid5dnA6WoB7\nyyCDO7q1KnQoeUkqmR9r1K8Z/ZuS3SovrGIUsDVH/vL/sjnziWOaLcH4nwAlKRE=\n=KCla\n-----END PGP SIGNATURE-----\n", "payload": "tree f6326bcf7db03dfa6bad87c5a326efd04c18f3a4\nparent 4e4e1ec93104f8c5816d8ad92fbb007911e87610\nparent 3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641310457 +0100\ncommitter GitHub <noreply@github.com> 1641310457 +0100\n\nRollup merge of #92507 - chordtoll:suggest-single-quotes, r=petrochenkov\n\nSuggest single quotes when char expected, str provided\n\nIf a type mismatch occurs where a char is expected and a string literal is provided, suggest changing the double quotes to single quotes.\n\nWe already provide this suggestion in the other direction ( ' -> \" ).\n\nEspecially useful for new rust devs used to a language in which single/double quotes are interchangeable.\n\nFixes #92479.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "html_url": "https://github.com/rust-lang/rust/commit/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4e1ec93104f8c5816d8ad92fbb007911e87610", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4e1ec93104f8c5816d8ad92fbb007911e87610", "html_url": "https://github.com/rust-lang/rust/commit/4e4e1ec93104f8c5816d8ad92fbb007911e87610"}, {"sha": "3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa", "html_url": "https://github.com/rust-lang/rust/commit/3087c4dfb7ba1c117f6f2fec7a7206eeb026e6fa"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "f0c73d0c2f3691f5e8983488bccdbf3bfb3ac8de", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -2041,11 +2041,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if let ValuePairs::Types(ty::error::ExpectedFound { expected, found }) =\n                     trace.values\n                 {\n-                    // If a tuple of length one was expected and the found expression has\n-                    // parentheses around it, perhaps the user meant to write `(expr,)` to\n-                    // build a tuple (issue #86100)\n                     match (expected.kind(), found.kind()) {\n                         (ty::Tuple(_), ty::Tuple(_)) => {}\n+                        // If a tuple of length one was expected and the found expression has\n+                        // parentheses around it, perhaps the user meant to write `(expr,)` to\n+                        // build a tuple (issue #86100)\n                         (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n                             if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n                                 if let Some(code) =\n@@ -2060,6 +2060,41 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 }\n                             }\n                         }\n+                        // If a character was expected and the found expression is a string literal\n+                        // containing a single character, perhaps the user meant to write `'c'` to\n+                        // specify a character literal (issue #92479)\n+                        (ty::Char, ty::Ref(_, r, _)) if r.is_str() => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if let Some(code) =\n+                                    code.strip_prefix('\"').and_then(|s| s.strip_suffix('\"'))\n+                                {\n+                                    if code.chars().nth(1).is_none() {\n+                                        err.span_suggestion(\n+                                            span,\n+                                            \"if you meant to write a `char` literal, use single quotes\",\n+                                            format!(\"'{}'\", code),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        // If a string was expected and the found expression is a character literal,\n+                        // perhaps the user meant to write `\"s\"` to specify a string literal.\n+                        (ty::Ref(_, r, _), ty::Char) if r.is_str() => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if let Some(code) =\n+                                    code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n+                                {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"if you meant to write a `str` literal, use double quotes\",\n+                                        format!(\"\\\"{}\\\"\", code),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                            }\n+                        }\n                         _ => {}\n                     }\n                 }"}, {"sha": "21bbc6f20b294341ca41140e956ff44a9f154caf", "filename": "src/test/ui/inference/char-as-str-multi.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,6 @@\n+// When a MULTI-character string literal is used where a char should be,\n+// DO NOT suggest changing to single quotes.\n+\n+fn main() {\n+    let _: char = \"foo\"; //~ ERROR mismatched types\n+}"}, {"sha": "c3ba17a5579ad55978a625e643626d21bc0fa646", "filename": "src/test/ui/inference/char-as-str-multi.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-multi.rs:5:19\n+   |\n+LL |     let _: char = \"foo\";\n+   |            ----   ^^^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e401492a830b46d9fba1829b300df2ee99bc334b", "filename": "src/test/ui/inference/char-as-str-single.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,11 @@\n+// When a SINGLE-character string literal is used where a char should be,\n+// suggest changing to single quotes.\n+\n+// Testing both single-byte and multi-byte characters, as we should handle both.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: char = 'a'; //~ ERROR mismatched types\n+    let _: char = '\u4eba'; //~ ERROR mismatched types\n+}"}, {"sha": "4f23cea5354c3818046830496f2dc1abf83edc5c", "filename": "src/test/ui/inference/char-as-str-single.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,11 @@\n+// When a SINGLE-character string literal is used where a char should be,\n+// suggest changing to single quotes.\n+\n+// Testing both single-byte and multi-byte characters, as we should handle both.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: char = \"a\"; //~ ERROR mismatched types\n+    let _: char = \"\u4eba\"; //~ ERROR mismatched types\n+}"}, {"sha": "29075c15414b223c37db00418bf785a71922979e", "filename": "src/test/ui/inference/char-as-str-single.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-single.rs:9:19\n+   |\n+LL |     let _: char = \"a\";\n+   |            ----   ^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `char` literal, use single quotes\n+   |\n+LL |     let _: char = 'a';\n+   |                   ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-single.rs:10:19\n+   |\n+LL |     let _: char = \"\u4eba\";\n+   |            ----   ^^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `char` literal, use single quotes\n+   |\n+LL |     let _: char = '\u4eba';\n+   |                   ~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "09f3dec5a17554837b696b10f8da0f2a2776b9c1", "filename": "src/test/ui/inference/str-as-char.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,8 @@\n+// When a char literal is used where a str should be,\n+// suggest changing to double quotes.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: &str = \"a\"; //~ ERROR mismatched types\n+}"}, {"sha": "7092a61244255fc46a25ebd5f22545bf69545ba0", "filename": "src/test/ui/inference/str-as-char.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,8 @@\n+// When a char literal is used where a str should be,\n+// suggest changing to double quotes.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let _: &str = 'a'; //~ ERROR mismatched types\n+}"}, {"sha": "ebbe7c80f77196d6e9b84593a0d974484df646e4", "filename": "src/test/ui/inference/str-as-char.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/str-as-char.rs:7:19\n+   |\n+LL |     let _: &str = 'a';\n+   |            ----   ^^^ expected `&str`, found `char`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _: &str = \"a\";\n+   |                   ~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e065e17c280f9ae5946707807d13dbdd13c51abd", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=25fcc0ef8c4a3b7a8dbfefdb3b198c09cee9f1c4", "patch": "@@ -12,6 +12,11 @@ error[E0308]: mismatched types\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n    |                             ^^^ expected `&str`, found `char`\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let v: Vec(&str) = vec![\"1\", '2'];\n+   |                             ~~~\n \n error: aborting due to 2 previous errors\n "}]}