{"sha": "f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Zjk1N2QwMGI1ZThmOGRlMGEyODE4YTM5Y2M5ZWM2YTQ3YmM4Mjg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-31T16:35:39Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-08-05T15:48:05Z"}, "message": "Clear the ParamEnv where its information is irrelevant", "tree": {"sha": "5a2d01b9d829b284d03227870ea12b3b0eafdbaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a2d01b9d829b284d03227870ea12b3b0eafdbaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "html_url": "https://github.com/rust-lang/rust/commit/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7710820d184f36c3ab659dace70f8ee366212169", "url": "https://api.github.com/repos/rust-lang/rust/commits/7710820d184f36c3ab659dace70f8ee366212169", "html_url": "https://github.com/rust-lang/rust/commit/7710820d184f36c3ab659dace70f8ee366212169"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "5fec95e2a3b34f31f84dec3071becbf8fff1db6c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -2357,7 +2357,7 @@ impl<'tcx> AdtDef {\n \n     #[inline]\n     pub fn eval_explicit_discr(&self, tcx: TyCtxt<'tcx>, expr_did: DefId) -> Option<Discr<'tcx>> {\n-        let param_env = ParamEnv::empty();\n+        let param_env = tcx.param_env(expr_did);\n         let repr_type = self.repr.discr_type();\n         let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), expr_did);\n         let instance = ty::Instance::new(expr_did, substs);\n@@ -2368,7 +2368,7 @@ impl<'tcx> AdtDef {\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => {\n                 // FIXME: Find the right type and use it instead of `val.ty` here\n-                if let Some(b) = val.try_eval_bits(tcx.global_tcx(), param_env.and(val.ty)) {\n+                if let Some(b) = val.try_eval_bits(tcx.global_tcx(), param_env, val.ty) {\n                     trace!(\"discriminants: {} ({:?})\", b, repr_type);\n                     Some(Discr {\n                         val: b,"}, {"sha": "a37fa1308137f061f26e5955d4e0755b61574952", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -2294,21 +2294,25 @@ impl<'tcx> Const<'tcx> {\n     pub fn try_eval_bits(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n+        param_env: ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n     ) -> Option<u128> {\n-        assert_eq!(self.ty, ty.value);\n-        let size = tcx.layout_of(ty).ok()?.size;\n+        assert_eq!(self.ty, ty);\n+        let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n         match self.val {\n             // FIXME(const_generics): this doesn't work right now,\n             // because it tries to relate an `Infer` to a `Param`.\n             ConstValue::Unevaluated(did, substs) => {\n-                let substs = tcx.lift_to_global(&substs).unwrap();\n-                let instance = ty::Instance::resolve(tcx, ty.param_env, did, substs)?;\n+                // if `substs` has no unresolved components, use and empty param_env\n+                let pem_and_substs = param_env.with_reveal_all().and(substs);\n+                let (param_env, substs) = tcx.lift_to_global(&pem_and_substs).unwrap().into_parts();\n+                // try to resolve e.g. associated constants to their definition on an impl\n+                let instance = ty::Instance::resolve(tcx, param_env, did, substs)?;\n                 let gid = GlobalId {\n                     instance,\n                     promoted: None,\n                 };\n-                let evaluated = tcx.const_eval(ty.param_env.and(gid)).ok()?;\n+                let evaluated = tcx.const_eval(param_env.and(gid)).ok()?;\n                 evaluated.val.try_to_bits(size)\n             },\n             // FIXME(const_generics): try to evaluate generic consts with a given param env?\n@@ -2319,7 +2323,7 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n-        self.try_eval_bits(tcx, param_env.and(tcx.types.bool)).and_then(|v| match v {\n+        self.try_eval_bits(tcx, param_env, tcx.types.bool).and_then(|v| match v {\n             0 => Some(false),\n             1 => Some(true),\n             _ => None,\n@@ -2328,18 +2332,18 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n-        self.try_eval_bits(tcx, param_env.and(tcx.types.usize)).map(|v| v as u64)\n+        self.try_eval_bits(tcx, param_env, tcx.types.usize).map(|v| v as u64)\n     }\n \n     #[inline]\n-    pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> u128 {\n-        self.try_eval_bits(tcx, ty).unwrap_or_else(||\n+    pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {\n+        self.try_eval_bits(tcx, param_env, ty).unwrap_or_else(||\n             bug!(\"expected bits of {:#?}, got {:#?}\", ty, self))\n     }\n \n     #[inline]\n     pub fn eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n-        self.eval_bits(tcx, param_env.and(tcx.types.usize)) as u64\n+        self.eval_bits(tcx, param_env, tcx.types.usize) as u64\n     }\n }\n "}, {"sha": "47601da8b7b23816643be91f9721d67a79d50435", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -512,7 +512,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         }\n         self = ct.ty.print(self)?;\n \n-        if let Some(bits) = ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all().and(ct.ty)) {\n+        if let Some(bits) = ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty) {\n             let _ = write!(self.out, \"{:x}_\", bits);\n         } else {\n             // NOTE(eddyb) despite having the path, we need to"}, {"sha": "1c93abd40ded25d70fb9234219bbbca520efa31e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 indices.entry(value)\n                        .or_insert_with(|| {\n                            options.push(value.eval_bits(\n-                               self.hir.tcx(), self.hir.param_env.and(switch_ty),\n+                               self.hir.tcx(), self.hir.param_env, switch_ty,\n                            ));\n                            options.len() - 1\n                        });\n@@ -655,10 +655,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     use rustc::hir::RangeEnd::*;\n \n                     let tcx = self.hir.tcx();\n-                    let test_ty = self.hir.param_env.and(test.ty);\n \n-                    let lo = compare_const_vals(tcx, test.lo, pat.hi, test_ty)?;\n-                    let hi = compare_const_vals(tcx, test.hi, pat.lo, test_ty)?;\n+                    let lo = compare_const_vals(tcx, test.lo, pat.hi, self.hir.param_env, test.ty)?;\n+                    let hi = compare_const_vals(tcx, test.hi, pat.lo, self.hir.param_env, test.ty)?;\n \n                     match (test.end, pat.end, lo, hi) {\n                         // pat < test\n@@ -775,8 +774,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let tcx = self.hir.tcx();\n \n-        let a = compare_const_vals(tcx, range.lo, value, self.hir.param_env.and(range.ty))?;\n-        let b = compare_const_vals(tcx, value, range.hi, self.hir.param_env.and(range.ty))?;\n+        let a = compare_const_vals(tcx, range.lo, value, self.hir.param_env, range.ty)?;\n+        let b = compare_const_vals(tcx, value, range.hi, self.hir.param_env, range.ty)?;\n \n         match (b, range.end) {\n             (Less, _) |"}, {"sha": "8da4d737cc508286ece7d7466af1a2cb794c119f", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -860,7 +860,7 @@ impl<'tcx> IntRange<'tcx> {\n             }\n             ConstantValue(val) if is_integral(val.ty) => {\n                 let ty = val.ty;\n-                if let Some(val) = val.try_eval_bits(tcx, param_env.and(ty)) {\n+                if let Some(val) = val.try_eval_bits(tcx, param_env, ty) {\n                     let bias = IntRange::signed_bias(tcx, ty);\n                     let val = val ^ bias;\n                     Some(IntRange { range: val..=val, ty })\n@@ -881,8 +881,8 @@ impl<'tcx> IntRange<'tcx> {\n             match pat.kind {\n                 box PatternKind::Constant { value } => break ConstantValue(value),\n                 box PatternKind::Range(PatternRange { lo, hi, ty, end }) => break ConstantRange(\n-                    lo.eval_bits(tcx, param_env.and(ty)),\n-                    hi.eval_bits(tcx, param_env.and(ty)),\n+                    lo.eval_bits(tcx, param_env, ty),\n+                    hi.eval_bits(tcx, param_env, ty),\n                     ty,\n                     end,\n                 ),\n@@ -1341,8 +1341,8 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n         PatternKind::Constant { value } => Some(vec![ConstantValue(value)]),\n         PatternKind::Range(PatternRange { lo, hi, ty, end }) =>\n             Some(vec![ConstantRange(\n-                lo.eval_bits(cx.tcx, cx.param_env.and(ty)),\n-                hi.eval_bits(cx.tcx, cx.param_env.and(ty)),\n+                lo.eval_bits(cx.tcx, cx.param_env, ty),\n+                hi.eval_bits(cx.tcx, cx.param_env, ty),\n                 ty,\n                 end,\n             )]),\n@@ -1480,7 +1480,7 @@ fn slice_pat_covered_by_const<'tcx>(\n     {\n         match pat.kind {\n             box PatternKind::Constant { value } => {\n-                let b = value.eval_bits(tcx, param_env.and(pat.ty));\n+                let b = value.eval_bits(tcx, param_env, pat.ty);\n                 assert_eq!(b as u8 as u128, b);\n                 if b as u8 != *ch {\n                     return Ok(false);\n@@ -1660,9 +1660,9 @@ fn constructor_covered_by_range<'tcx>(\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);\n-    let cmp_from = |c_from| compare_const_vals(tcx, c_from, from, param_env.and(ty))\n+    let cmp_from = |c_from| compare_const_vals(tcx, c_from, from, param_env, ty)\n         .map(|res| res != Ordering::Less);\n-    let cmp_to = |c_to| compare_const_vals(tcx, c_to, to, param_env.and(ty));\n+    let cmp_to = |c_to| compare_const_vals(tcx, c_to, to, param_env, ty);\n     macro_rules! some_or_ok {\n         ($e:expr) => {\n             match $e {"}, {"sha": "5ecfb84b632360d37eb79c3f57333c28b3df2d45", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -446,7 +446,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             self.tcx,\n                             lo,\n                             hi,\n-                            self.param_env.and(ty),\n+                            self.param_env,\n+                            ty,\n                         );\n                         match (end, cmp) {\n                             (RangeEnd::Excluded, Some(Ordering::Less)) =>\n@@ -1452,7 +1453,8 @@ pub fn compare_const_vals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n-    ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n ) -> Option<Ordering> {\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);\n \n@@ -1467,13 +1469,16 @@ pub fn compare_const_vals<'tcx>(\n     let fallback = || from_bool(a == b);\n \n     // Use the fallback if any type differs\n-    if a.ty != b.ty || a.ty != ty.value {\n+    if a.ty != b.ty || a.ty != ty {\n         return fallback();\n     }\n \n-    if let (Some(a), Some(b)) = (a.try_eval_bits(tcx, ty), b.try_eval_bits(tcx, ty)) {\n+    let a_bits = a.try_eval_bits(tcx, param_env, ty);\n+    let b_bits = b.try_eval_bits(tcx, param_env, ty);\n+\n+    if let (Some(a), Some(b)) = (a_bits, b_bits) {\n         use ::rustc_apfloat::Float;\n-        return match ty.value.sty {\n+        return match ty.sty {\n             ty::Float(ast::FloatTy::F32) => {\n                 let l = ::rustc_apfloat::ieee::Single::from_bits(a);\n                 let r = ::rustc_apfloat::ieee::Single::from_bits(b);\n@@ -1496,7 +1501,7 @@ pub fn compare_const_vals<'tcx>(\n         }\n     }\n \n-    if let ty::Str = ty.value.sty {\n+    if let ty::Str = ty.sty {\n         match (a.val, b.val) {\n             (\n                 ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },"}, {"sha": "9ffa3db4c2eb073df0dbe44c0b50e632f37f26a1", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=f4f957d00b5e8f8de0a2818a39cc9ec6a47bc828", "patch": "@@ -27,7 +27,7 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::SwitchInt {\n                     discr: Operand::Constant(ref c), switch_ty, ref values, ref targets, ..\n                 } => {\n-                    let constant = c.literal.try_eval_bits(tcx, param_env.and(switch_ty));\n+                    let constant = c.literal.try_eval_bits(tcx, param_env, switch_ty);\n                     if let Some(constant) = constant {\n                         let (otherwise, targets) = targets.split_last().unwrap();\n                         let mut ret = TerminatorKind::Goto { target: *otherwise };"}]}