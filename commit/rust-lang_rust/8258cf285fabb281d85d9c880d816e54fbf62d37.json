{"sha": "8258cf285fabb281d85d9c880d816e54fbf62d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNThjZjI4NWZhYmIyODFkODVkOWM4ODBkODE2ZTU0ZmJmNjJkMzc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-07T20:22:24Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-07T20:50:57Z"}, "message": "Convert a bunch of intra-doc links", "tree": {"sha": "e0a10712e62633f7c2d366e5716308706367d067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a10712e62633f7c2d366e5716308706367d067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8258cf285fabb281d85d9c880d816e54fbf62d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8258cf285fabb281d85d9c880d816e54fbf62d37", "html_url": "https://github.com/rust-lang/rust/commit/8258cf285fabb281d85d9c880d816e54fbf62d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8258cf285fabb281d85d9c880d816e54fbf62d37/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d115f6db5172c961dfeb50de15f35784dbc7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d115f6db5172c961dfeb50de15f35784dbc7c9", "html_url": "https://github.com/rust-lang/rust/commit/b2d115f6db5172c961dfeb50de15f35784dbc7c9"}], "stats": {"total": 126, "additions": 55, "deletions": 71}, "files": [{"sha": "5ebc4d6c4c14aa6a9dc403c4fab00991b9ae9c53", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -309,13 +309,13 @@\n //! * `?` \u21d2 [`Debug`]\n //! * `x?` \u21d2 [`Debug`] with lower-case hexadecimal integers\n //! * `X?` \u21d2 [`Debug`] with upper-case hexadecimal integers\n-//! * `o` \u21d2 [`Octal`](trait.Octal.html)\n-//! * `x` \u21d2 [`LowerHex`](trait.LowerHex.html)\n-//! * `X` \u21d2 [`UpperHex`](trait.UpperHex.html)\n-//! * `p` \u21d2 [`Pointer`](trait.Pointer.html)\n+//! * `o` \u21d2 [`Octal`]\n+//! * `x` \u21d2 [`LowerHex`]\n+//! * `X` \u21d2 [`UpperHex`]\n+//! * `p` \u21d2 [`Pointer`]\n //! * `b` \u21d2 [`Binary`]\n-//! * `e` \u21d2 [`LowerExp`](trait.LowerExp.html)\n-//! * `E` \u21d2 [`UpperExp`](trait.UpperExp.html)\n+//! * `e` \u21d2 [`LowerExp`]\n+//! * `E` \u21d2 [`UpperExp`]\n //!\n //! What this means is that any type of argument which implements the\n //! [`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations"}, {"sha": "ceca2e916a90a193c26c23a84081173a840e65b2", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -573,7 +573,7 @@ pub struct RefCell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n-/// An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n+/// An error returned by [`RefCell::try_borrow`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n pub struct BorrowError {\n     _private: (),\n@@ -593,7 +593,7 @@ impl Display for BorrowError {\n     }\n }\n \n-/// An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n+/// An error returned by [`RefCell::try_borrow_mut`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n pub struct BorrowMutError {\n     _private: (),"}, {"sha": "bbb3a3dea435ec67e15c969622974bc8c9650787", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -29,7 +29,7 @@ use self::Ordering::*;\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n-/// so floating point types implement `PartialEq` but not [`Eq`](Eq).\n+/// so floating point types implement `PartialEq` but not [`Eq`].\n ///\n /// Formally, the equality must be (for all `a`, `b` and `c`):\n ///"}, {"sha": "d95d43f0854489a5b9b75ec53daa1b216b672600", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -1,4 +1,6 @@\n-use crate::fmt;\n+#![allow(unused_imports)]\n+\n+use crate::fmt::{self, Debug, Formatter};\n \n struct PadAdapter<'buf, 'state> {\n     buf: &'buf mut (dyn fmt::Write + 'buf),\n@@ -53,14 +55,12 @@ impl fmt::Write for PadAdapter<'_, '_> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted struct as a part of your\n-/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_struct`](struct.Formatter.html#method.debug_struct)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_struct`] method.\n ///\n /// # Examples\n ///\n@@ -257,14 +257,12 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted tuple as a part of your\n-/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_tuple`](struct.Formatter.html#method.debug_tuple)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_tuple`] method.\n ///\n /// # Examples\n ///\n@@ -428,14 +426,12 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted set of items as a part\n-/// of your [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// of your [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_set`](struct.Formatter.html#method.debug_set)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_set`] method.\n ///\n /// # Examples\n ///\n@@ -560,14 +556,12 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted list of items as a part\n-/// of your [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// of your [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_list`](struct.Formatter.html#method.debug_list)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_list`] method.\n ///\n /// # Examples\n ///\n@@ -692,14 +686,12 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted map as a part of your\n-/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_map`](struct.Formatter.html#method.debug_map)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_map`] method.\n ///\n /// # Examples\n ///"}, {"sha": "96d0a60a32768c9ca623fb21452013dc05de012b", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -121,7 +121,7 @@ where\n /// This `struct` is created by the [`flatten`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`flatten`]: trait.Iterator.html#method.flatten\n+/// [`flatten`]: Iterator::flatten\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]"}, {"sha": "9586284e1d706f288137cb2083de81b35ddcd27d", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -85,7 +85,7 @@ pub unsafe trait SourceIter {\n     /// * whatever remains in the source after iteration has stopped\n     /// * the memory that has become unused by advancing a consuming iterator\n     ///\n-    /// [`next()`]: trait.Iterator.html#method.next\n+    /// [`next()`]: Iterator::next\n     unsafe fn as_inner(&mut self) -> &mut Self::Source;\n }\n \n@@ -94,7 +94,7 @@ pub unsafe trait SourceIter {\n /// This `struct` is created by the [`rev`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`rev`]: trait.Iterator.html#method.rev\n+/// [`rev`]: Iterator::rev\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -228,7 +228,7 @@ unsafe impl<I> TrustedLen for Rev<I> where I: TrustedLen + DoubleEndedIterator {\n /// This `struct` is created by the [`copied`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`copied`]: trait.Iterator.html#method.copied\n+/// [`copied`]: Iterator::copied\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -380,7 +380,7 @@ where\n /// This `struct` is created by the [`cloned`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`cloned`]: trait.Iterator.html#method.cloned\n+/// [`cloned`]: Iterator::cloned\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -515,7 +515,7 @@ where\n /// This `struct` is created by the [`cycle`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`cycle`]: trait.Iterator.html#method.cycle\n+/// [`cycle`]: Iterator::cycle\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -600,7 +600,7 @@ impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n /// This `struct` is created by the [`step_by`] method on [`Iterator`]. See\n /// its documentation for more.\n ///\n-/// [`step_by`]: trait.Iterator.html#method.step_by\n+/// [`step_by`]: Iterator::step_by\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n@@ -833,7 +833,7 @@ impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}\n /// This `struct` is created by the [`map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`map`]: trait.Iterator.html#method.map\n+/// [`map`]: Iterator::map\n /// [`Iterator`]: trait.Iterator.html\n ///\n /// # Notes about side effects\n@@ -1042,7 +1042,7 @@ unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for Map<I, F> where F: FnM\n /// This `struct` is created by the [`filter`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`filter`]: trait.Iterator.html#method.filter\n+/// [`filter`]: Iterator::filter\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1191,7 +1191,7 @@ unsafe impl<I: InPlaceIterable, P> InPlaceIterable for Filter<I, P> where P: FnM\n /// This `struct` is created by the [`filter_map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`filter_map`]: trait.Iterator.html#method.filter_map\n+/// [`filter_map`]: Iterator::filter_map\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1338,7 +1338,7 @@ unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for FilterMap<I, F> where\n /// This `struct` is created by the [`enumerate`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`enumerate`]: trait.Iterator.html#method.enumerate\n+/// [`enumerate`]: Iterator::enumerate\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -1574,7 +1574,7 @@ unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n /// This `struct` is created by the [`peekable`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`peekable`]: trait.Iterator.html#method.peekable\n+/// [`peekable`]: Iterator::peekable\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -1743,7 +1743,7 @@ impl<I: Iterator> Peekable<I> {\n     /// Like [`next`], if there is a value, it is wrapped in a `Some(T)`.\n     /// But if the iteration is over, `None` is returned.\n     ///\n-    /// [`next`]: trait.Iterator.html#tymethod.next\n+    /// [`next`]: Iterator::next\n     ///\n     /// Because `peek()` returns a reference, and many iterators iterate over\n     /// references, there can be a possibly confusing situation where the\n@@ -1871,7 +1871,7 @@ unsafe impl<I: InPlaceIterable> InPlaceIterable for Peekable<I> {}\n /// This `struct` is created by the [`skip_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`skip_while`]: trait.Iterator.html#method.skip_while\n+/// [`skip_while`]: Iterator::skip_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1993,7 +1993,7 @@ unsafe impl<I: InPlaceIterable, F> InPlaceIterable for SkipWhile<I, F> where\n /// This `struct` is created by the [`take_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`take_while`]: trait.Iterator.html#method.take_while\n+/// [`take_while`]: Iterator::take_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2128,7 +2128,7 @@ unsafe impl<I: InPlaceIterable, F> InPlaceIterable for TakeWhile<I, F> where\n /// This `struct` is created by the [`map_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`map_while`]: trait.Iterator.html#method.map_while\n+/// [`map_while`]: Iterator::map_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n@@ -2226,7 +2226,7 @@ unsafe impl<B, I: InPlaceIterable, P> InPlaceIterable for MapWhile<I, P> where\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`skip`]: trait.Iterator.html#method.skip\n+/// [`skip`]: Iterator::skip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -2422,7 +2422,7 @@ unsafe impl<I: InPlaceIterable> InPlaceIterable for Skip<I> {}\n /// This `struct` is created by the [`take`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`take`]: trait.Iterator.html#method.take\n+/// [`take`]: Iterator::take\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -2627,7 +2627,7 @@ unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n /// This `struct` is created by the [`scan`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`scan`]: trait.Iterator.html#method.scan\n+/// [`scan`]: Iterator::scan\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2735,7 +2735,7 @@ unsafe impl<St, F, B, I: InPlaceIterable> InPlaceIterable for Scan<I, St, F> whe\n /// This `struct` is created by the [`inspect`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`inspect`]: trait.Iterator.html#method.inspect\n+/// [`inspect`]: Iterator::inspect\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "fa229251703a55cba6ea69218a8b687167ea50b8", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -1390,8 +1390,6 @@ pub struct IntoValues<K, V> {\n /// A builder for computing where in a HashMap a key-value pair would be stored.\n ///\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n-///\n-/// [`HashMap::raw_entry_mut`]: HashMap::raw_entry_mut\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a mut HashMap<K, V, S>,\n@@ -1430,8 +1428,6 @@ pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n /// A builder for computing where in a HashMap a key-value pair would be stored.\n ///\n /// See the [`HashMap::raw_entry`] docs for usage examples.\n-///\n-/// [`HashMap::raw_entry`]: HashMap::raw_entry\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilder<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a HashMap<K, V, S>,"}, {"sha": "db0777ee9f080b88d2fae091e789bfd2c3bd6d41", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -535,9 +535,6 @@ unsafe impl<T: Send> Send for SyncSender<T> {}\n /// A **send** operation can only fail if the receiving end of a channel is\n /// disconnected, implying that the data could never be received. The error\n /// contains the data being sent as a payload so it can be recovered.\n-///\n-/// [`Sender::send`]: Sender::send\n-/// [`SyncSender::send`]: SyncSender::send\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, Clone, Copy)]\n pub struct SendError<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);"}, {"sha": "d67f0f81a9fb00cb985ad451232420fc049217f2", "filename": "library/std/src/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -143,7 +143,7 @@ pub enum advice {\n     WILLNEED = 6,\n }\n \n-/// Enumeration describing the kind of value stored in [`auxv`](struct.auxv.html).\n+/// Enumeration describing the kind of value stored in [`auxv`].\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n #[non_exhaustive]\n@@ -246,7 +246,7 @@ pub struct condvar(pub u32);\n pub const CONDVAR_HAS_NO_WAITERS: condvar = condvar(0);\n \n /// Identifier for a device containing a file system. Can be used\n-/// in combination with [`inode`](struct.inode.html) to uniquely identify a file on the\n+/// in combination with [`inode`] to uniquely identify a file on the\n /// local system.\n #[repr(C)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n@@ -808,7 +808,7 @@ bitflags! {\n     const FILE_SYMLINK          = 0x0000000001000000;\n     /// The right to invoke [`file_unlink()`](fn.file_unlink.html).\n     const FILE_UNLINK           = 0x0000000002000000;\n-    /// The right to invoke [`mem_map()`](fn.mem_map.html) with [`mprot`](struct.mprot.html) set to\n+    /// The right to invoke [`mem_map()`](fn.mem_map.html) with [`mprot`] set to\n     /// zero.\n     const MEM_MAP               = 0x0000000004000000;\n     /// If [`MEM_MAP`](struct.rights.html#associatedconstant.MEM_MAP) is set, the right to invoke\n@@ -1020,7 +1020,7 @@ bitflags! {\n /// written it into locks when acquiring them for writing. It is\n /// not advised to use these identifiers for any other purpose.\n ///\n-/// As the thread identifier is also stored in [`lock`](struct.lock.html) when\n+/// As the thread identifier is also stored in [`lock`] when\n /// [`LOCK_WRLOCKED`](constant.LOCK_WRLOCKED.html) is set, the top two bits of the thread\n /// must always be set to zero.\n #[repr(C)]\n@@ -1373,7 +1373,7 @@ fn lookup_layout_test() {\n /// Entry point for a process (`_start`).\n ///\n /// **auxv**:\n-/// The auxiliary vector. See [`auxv`](struct.auxv.html).\n+/// The auxiliary vector. See [`auxv`].\n pub type processentry = unsafe extern \"C\" fn(auxv: *const auxv) -> ();\n \n /// Arguments of [`sock_recv()`](fn.sock_recv.html).\n@@ -2372,7 +2372,7 @@ pub unsafe fn file_open(\n ///\n /// When successful, the contents of the output buffer consist of\n /// a sequence of directory entries. Each directory entry consists\n-/// of a [`dirent`](struct.dirent.html) object, followed by [`dirent.d_namlen`](struct.dirent.html#structfield.d_namlen) bytes\n+/// of a [`dirent`] object, followed by [`dirent.d_namlen`](struct.dirent.html#structfield.d_namlen) bytes\n /// holding the name of the directory entry.\n ///\n /// This system call fills the output buffer as much as possible,"}, {"sha": "f79874a4aec9724b6432b029ba356710ce668ed5", "filename": "library/std/src/sys/sgx/ext/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -1,7 +1,7 @@\n //! SGX-specific extensions to general I/O primitives\n //!\n //! SGX file descriptors behave differently from Unix file descriptors. See the\n-//! description of [`TryIntoRawFd`](trait.TryIntoRawFd.html) for more details.\n+//! description of [`TryIntoRawFd`] for more details.\n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n use crate::net;"}, {"sha": "dd438858c37cd4c234ac48fe3a971445da9370fe", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -255,7 +255,7 @@ impl<T: 'static> LocalKey<T> {\n     ///\n     /// This will lazily initialize the value if this thread has not referenced\n     /// this key yet. If the key has been destroyed (which may happen if this is called\n-    /// in a destructor), this function will return an [`AccessError`](struct.AccessError.html).\n+    /// in a destructor), this function will return an [`AccessError`].\n     ///\n     /// # Panics\n     ///"}, {"sha": "fefaa77a2a104f9e6c60629d7368576d62886240", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8258cf285fabb281d85d9c880d816e54fbf62d37/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=8258cf285fabb281d85d9c880d816e54fbf62d37", "patch": "@@ -137,7 +137,6 @@\n //! [`thread::current`]: current\n //! [`thread::Result`]: Result\n //! [`unpark`]: Thread::unpark\n-//! [`Thread::name`]: Thread::name\n //! [`thread::park_timeout`]: park_timeout\n //! [`Cell`]: crate::cell::Cell\n //! [`RefCell`]: crate::cell::RefCell"}]}