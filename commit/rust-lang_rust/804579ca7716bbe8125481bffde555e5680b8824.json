{"sha": "804579ca7716bbe8125481bffde555e5680b8824", "node_id": "C_kwDOAAsO6NoAKDgwNDU3OWNhNzcxNmJiZTgxMjU0ODFiZmZkZTU1NWU1NjgwYjg4MjQ", "commit": {"author": {"name": "ridwanabdillahi", "email": "91507758+ridwanabdillahi@users.noreply.github.com", "date": "2022-08-12T18:34:31Z"}, "committer": {"name": "ridwanabdillahi", "email": "91507758+ridwanabdillahi@users.noreply.github.com", "date": "2022-08-12T18:34:31Z"}, "message": "Respond to RFC comments.", "tree": {"sha": "f4702122f397ec5a79128da27abb34b05926f2be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4702122f397ec5a79128da27abb34b05926f2be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804579ca7716bbe8125481bffde555e5680b8824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804579ca7716bbe8125481bffde555e5680b8824", "html_url": "https://github.com/rust-lang/rust/commit/804579ca7716bbe8125481bffde555e5680b8824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804579ca7716bbe8125481bffde555e5680b8824/comments", "author": {"login": "ridwanabdillahi", "id": 91507758, "node_id": "U_kgDOBXRMLg", "avatar_url": "https://avatars.githubusercontent.com/u/91507758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ridwanabdillahi", "html_url": "https://github.com/ridwanabdillahi", "followers_url": "https://api.github.com/users/ridwanabdillahi/followers", "following_url": "https://api.github.com/users/ridwanabdillahi/following{/other_user}", "gists_url": "https://api.github.com/users/ridwanabdillahi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ridwanabdillahi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ridwanabdillahi/subscriptions", "organizations_url": "https://api.github.com/users/ridwanabdillahi/orgs", "repos_url": "https://api.github.com/users/ridwanabdillahi/repos", "events_url": "https://api.github.com/users/ridwanabdillahi/events{/privacy}", "received_events_url": "https://api.github.com/users/ridwanabdillahi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ridwanabdillahi", "id": 91507758, "node_id": "U_kgDOBXRMLg", "avatar_url": "https://avatars.githubusercontent.com/u/91507758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ridwanabdillahi", "html_url": "https://github.com/ridwanabdillahi", "followers_url": "https://api.github.com/users/ridwanabdillahi/followers", "following_url": "https://api.github.com/users/ridwanabdillahi/following{/other_user}", "gists_url": "https://api.github.com/users/ridwanabdillahi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ridwanabdillahi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ridwanabdillahi/subscriptions", "organizations_url": "https://api.github.com/users/ridwanabdillahi/orgs", "repos_url": "https://api.github.com/users/ridwanabdillahi/repos", "events_url": "https://api.github.com/users/ridwanabdillahi/events{/privacy}", "received_events_url": "https://api.github.com/users/ridwanabdillahi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100882296e065526cfd055380e14334738da4158", "url": "https://api.github.com/repos/rust-lang/rust/commits/100882296e065526cfd055380e14334738da4158", "html_url": "https://github.com/rust-lang/rust/commit/100882296e065526cfd055380e14334738da4158"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "0913715b3c0b8a6742c34cf8b5599ac7bb4d8337", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/804579ca7716bbe8125481bffde555e5680b8824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804579ca7716bbe8125481bffde555e5680b8824/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=804579ca7716bbe8125481bffde555e5680b8824", "patch": "@@ -425,7 +425,7 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n \n fn get_instr_profile_output_path(config: &ModuleConfig) -> Option<CString> {\n     if config.instrument_coverage {\n-        Some(CString::new(format!(\"{}\", PathBuf::from(\"default_%m_%p.profraw\").display())).unwrap())\n+        Some(CString::new(\"default_%m_%p.profraw\").unwrap())\n     } else {\n         None\n     }"}, {"sha": "e1340c893f9a10bca308461bf4fd1697f09e8f42", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/804579ca7716bbe8125481bffde555e5680b8824/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/804579ca7716bbe8125481bffde555e5680b8824/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=804579ca7716bbe8125481bffde555e5680b8824", "patch": "@@ -97,7 +97,24 @@ $ echo \"{some: 'thing'}\" | target/debug/examples/formatjson5 -\n }\n ```\n \n-After running this program, a new file, `default.profraw`, should be in the current working directory. It's often preferable to set a specific file name or path. You can change the output file using the environment variable `LLVM_PROFILE_FILE`:\n+After running this program, a new file, `default_%m_%p.profraw`, should be in the current working directory. This file takes advantage ofLLVM's support for rewriting special pattern strings to ensure `.profraw` files generated are unique. The following special pattern strings are rewritten as:\n+\n+-   `%p` - The process ID.\n+-   `%h` - The hostname of the machine running the program.\n+-   `%t` - The value of the TMPDIR environment variable.\n+-   `%Nm` - the instrumented binary\u2019s signature: The runtime creates a pool of N raw profiles, used for on-line profile merging. The runtime takes care of selecting a raw profile from the pool, locking it, and updating it before the program exits. `N` must be between `1` and `9`, and defaults to `1` if omitted (with simply `%m`).\n+-   `%c` - Does not add anything to the filename, but enables a mode (on some platforms, including Darwin) in which profile counter updates are continuously synced to a file. This means that if the instrumented program crashes, or is killed by a signal, perfect coverage information can still be recovered.\n+\n+```shell\n+$ echo \"{some: 'thing'}\" | target/debug/examples/formatjson5 -\n+...\n+$ ls default_11699812450447639123_0_20944.profraw\n+default_11699812450447639123_0_20944.profraw\n+```\n+\n+In the example above, the value `11699812450447639123_0` in the generated filename is the instrumented binary's signature, which replaced the `%m` pattern and the value `20944` is the process ID of the binary being executed.\n+\n+You can also set a specific file name or path for the generated `.profraw` files by using the environment variable `LLVM_PROFILE_FILE`:\n \n ```shell\n $ echo \"{some: 'thing'}\" \\\n@@ -107,14 +124,6 @@ $ ls formatjson5.profraw\n formatjson5.profraw\n ```\n \n-If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing directory structure will be created. Additionally, the following special pattern strings are rewritten:\n-\n--   `%p` - The process ID.\n--   `%h` - The hostname of the machine running the program.\n--   `%t` - The value of the TMPDIR environment variable.\n--   `%Nm` - the instrumented binary\u2019s signature: The runtime creates a pool of N raw profiles, used for on-line profile merging. The runtime takes care of selecting a raw profile from the pool, locking it, and updating it before the program exits. `N` must be between `1` and `9`, and defaults to `1` if omitted (with simply `%m`).\n--   `%c` - Does not add anything to the filename, but enables a mode (on some platforms, including Darwin) in which profile counter updates are continuously synced to a file. This means that if the instrumented program crashes, or is killed by a signal, perfect coverage information can still be recovered.\n-\n ## Installing LLVM coverage tools\n \n LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher, and processing the *raw* data may require exactly the LLVM version used by the compiler. (`llvm-cov --version` typically shows the tool's LLVM version number, and `rustc --verbose --version` shows the version of LLVM used by the Rust compiler.)\n@@ -181,11 +190,12 @@ A typical use case for coverage analysis is test coverage. Rust's source-based c\n \n The following example (using the [`json5format`] crate, for demonstration purposes) show how to generate and analyze coverage results for all tests in a crate.\n \n-Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-C instrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n+Since `cargo test` both builds and runs the tests, we set the additional `RUSTFLAGS`, to add the `-C instrument-coverage` flag. If setting `LLVM_PROFILE_FILE` to specify a custom filename for the raw profiling data generated during the test runs,\n+apply `%m` in the filename pattern since there may be more than one test binary. This generates unique names for each test binary which is not done by default when setting the `LLVM_PROFILE_FILE` environment variable.\n+(Otherwise, each executed test binary would overwrite the coverage results from the previous binary.) If not setting `LLVM_PROFILE_FILE`, the `%m` and `%p` filename patterns are added by default.\n \n ```shell\n $ RUSTFLAGS=\"-C instrument-coverage\" \\\n-    LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test --tests\n ```\n \n@@ -210,7 +220,7 @@ test result: ok. 31 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n You should have one or more `.profraw` files now, one for each test binary. Run the `profdata` tool to merge them:\n \n ```shell\n-$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse default_*.profraw -o json5format.profdata\n ```\n \n Then run the `cov` tool, with the `profdata` file and all test binaries:\n@@ -271,9 +281,8 @@ To include doc tests in the coverage results, drop the `--tests` flag, and apply\n ```bash\n $ RUSTFLAGS=\"-C instrument-coverage\" \\\n   RUSTDOCFLAGS=\"-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n-  LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test\n-$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse default_*.profraw -o json5format.profdata\n ```\n \n The `-Z unstable-options --persist-doctests` flag is required, to save the test binaries\n@@ -302,8 +311,7 @@ $ llvm-cov report \\\n > version without doc tests, include:\n \n -   The `cargo test ... --no-run` command is updated with the same environment variables\n-    and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`\n-    is only used when _running_ the tests.)\n+    and flags used to _build_ the tests, _including_ the doc tests.\n -   The file glob pattern `target/debug/doctestbins/*/rust_out` adds the `rust_out`\n     binaries generated for doc tests (note, however, that some `rust_out` files may not\n     be executable binaries)."}]}