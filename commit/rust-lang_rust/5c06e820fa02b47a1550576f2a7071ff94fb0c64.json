{"sha": "5c06e820fa02b47a1550576f2a7071ff94fb0c64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMDZlODIwZmEwMmI0N2ExNTUwNTc2ZjJhNzA3MWZmOTRmYjBjNjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-10T17:53:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-10T17:53:10Z"}, "message": "Merge #6521\n\n6521: Switch to upstream protocol for resolving code action r=matklad a=matklad\n\nNote that we have to maintain custom implementation on the client\nside: I don't see how to marry bulitin resolve support with groups and\nsnippets.\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "580d90bd250ffcd4b1c66570e5601761e58d1057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580d90bd250ffcd4b1c66570e5601761e58d1057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c06e820fa02b47a1550576f2a7071ff94fb0c64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqtOHCRBK7hj4Ov3rIwAAdHIIAHSwF4P1K515Up2PpdzNIehG\njqQ5LNwxBO4T1Yz6TOtWIq1VHrav9h+vm+3mDAkUD+sFl6PPm861QaDxRcPmRA2S\n+sURQJorJjqnvQV5Eg3TWednZP+jBDHQ9Yw5nS8pAvI5GMF9mg8wF3zvvuyju5Yr\nC+dXtued4IhOornTJa8MdRh6QD3232cV+pHERKyJOne1DtX40Zis50/rzZ4ccxfI\nE0fH5HbcnRFQDlQCKFouDAn9eTe47xisCa+IUqT+G1l0LttgHiAuExX2g1bAQ39e\n13Ioiby6ZTJYm28tagDIvLZhHBKGLVCFKejJeI7ldDqiXD/KUsBvD9P4fNbDTVE=\n=HH6N\n-----END PGP SIGNATURE-----\n", "payload": "tree 580d90bd250ffcd4b1c66570e5601761e58d1057\nparent ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5\nparent 7d2eb000b078143e9fa6225d00ef52fc7c606fdf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605030790 +0000\ncommitter GitHub <noreply@github.com> 1605030790 +0000\n\nMerge #6521\n\n6521: Switch to upstream protocol for resolving code action r=matklad a=matklad\n\nNote that we have to maintain custom implementation on the client\nside: I don't see how to marry bulitin resolve support with groups and\nsnippets.\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c06e820fa02b47a1550576f2a7071ff94fb0c64", "html_url": "https://github.com/rust-lang/rust/commit/5c06e820fa02b47a1550576f2a7071ff94fb0c64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c06e820fa02b47a1550576f2a7071ff94fb0c64/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "html_url": "https://github.com/rust-lang/rust/commit/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5"}, {"sha": "7d2eb000b078143e9fa6225d00ef52fc7c606fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2eb000b078143e9fa6225d00ef52fc7c606fdf", "html_url": "https://github.com/rust-lang/rust/commit/7d2eb000b078143e9fa6225d00ef52fc7c606fdf"}], "stats": {"total": 177, "additions": 86, "deletions": 91}, "files": [{"sha": "9a887005342ea5df5b4be54a16545aa359f8108a", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -16,8 +16,6 @@ use serde_json::json;\n use crate::semantic_tokens;\n \n pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabilities {\n-    let code_action_provider = code_action_capabilities(client_caps);\n-\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n@@ -49,7 +47,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         document_highlight_provider: Some(OneOf::Left(true)),\n         document_symbol_provider: Some(OneOf::Left(true)),\n         workspace_symbol_provider: Some(OneOf::Left(true)),\n-        code_action_provider: Some(code_action_provider),\n+        code_action_provider: Some(code_action_capabilities(client_caps)),\n         code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(OneOf::Left(true)),\n         document_range_formatting_provider: None,\n@@ -113,7 +111,7 @@ fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProvi\n                     CodeActionKind::REFACTOR_INLINE,\n                     CodeActionKind::REFACTOR_REWRITE,\n                 ]),\n-                resolve_provider: None,\n+                resolve_provider: Some(true),\n                 work_done_progress_options: Default::default(),\n             })\n         })"}, {"sha": "9cc14fe827b7a98367c09d73a09dd1e7726f75e5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -144,7 +144,7 @@ pub struct ClientCapsConfig {\n     pub code_action_literals: bool,\n     pub work_done_progress: bool,\n     pub code_action_group: bool,\n-    pub resolve_code_action: bool,\n+    pub code_action_resolve: bool,\n     pub hover_actions: bool,\n     pub status_notification: bool,\n     pub signature_help_label_offsets: bool,\n@@ -383,6 +383,14 @@ impl Config {\n                     }\n                 }\n             }\n+\n+            if let Some(code_action) = &doc_caps.code_action {\n+                if let Some(resolve_support) = &code_action.resolve_support {\n+                    if resolve_support.properties.iter().any(|it| it == \"edit\") {\n+                        self.client_caps.code_action_resolve = true;\n+                    }\n+                }\n+            }\n         }\n \n         if let Some(window_caps) = caps.window.as_ref() {\n@@ -400,7 +408,6 @@ impl Config {\n             self.assist.allow_snippets(snippet_text_edit);\n \n             self.client_caps.code_action_group = get_bool(\"codeActionGroup\");\n-            self.client_caps.resolve_code_action = get_bool(\"resolveCodeAction\");\n             self.client_caps.hover_actions = get_bool(\"hoverActions\");\n             self.client_caps.status_notification = get_bool(\"statusNotification\");\n         }"}, {"sha": "a8d85f0087303faac01f62114ed472b174ba5996", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -36,7 +36,6 @@\n         fixes: [\n             CodeAction {\n                 title: \"consider prefixing with an underscore\",\n-                id: None,\n                 group: None,\n                 kind: Some(\n                     CodeActionKind(\n@@ -70,6 +69,7 @@\n                 is_preferred: Some(\n                     true,\n                 ),\n+                data: None,\n             },\n         ],\n     },"}, {"sha": "0b89373766557db2acccea8b944ac756fadbaaa2", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -36,7 +36,6 @@\n         fixes: [\n             CodeAction {\n                 title: \"consider prefixing with an underscore\",\n-                id: None,\n                 group: None,\n                 kind: Some(\n                     CodeActionKind(\n@@ -70,6 +69,7 @@\n                 is_preferred: Some(\n                     true,\n                 ),\n+                data: None,\n             },\n         ],\n     },"}, {"sha": "7fa9dee62ae5ff597a20aa291e7f883b3cd223e6", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -36,7 +36,6 @@\n         fixes: [\n             CodeAction {\n                 title: \"consider prefixing with an underscore\",\n-                id: None,\n                 group: None,\n                 kind: Some(\n                     CodeActionKind(\n@@ -70,6 +69,7 @@\n                 is_preferred: Some(\n                     true,\n                 ),\n+                data: None,\n             },\n         ],\n     },"}, {"sha": "3c97b20841fbdfb614902a2c5a77e63b42deda42", "filename": "crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -51,7 +51,6 @@\n         fixes: [\n             CodeAction {\n                 title: \"return the expression directly\",\n-                id: None,\n                 group: None,\n                 kind: Some(\n                     CodeActionKind(\n@@ -98,6 +97,7 @@\n                 is_preferred: Some(\n                     true,\n                 ),\n+                data: None,\n             },\n         ],\n     },"}, {"sha": "15145415b35c00d478faa2eb405087dfae597d39", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -110,7 +110,6 @@ fn map_rust_child_diagnostic(\n     } else {\n         MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n             title: rd.message.clone(),\n-            id: None,\n             group: None,\n             kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n             edit: Some(lsp_ext::SnippetWorkspaceEdit {\n@@ -119,6 +118,7 @@ fn map_rust_child_diagnostic(\n                 document_changes: None,\n             }),\n             is_preferred: Some(true),\n+            data: None,\n         })\n     }\n }"}, {"sha": "95659b0db9d3f1fadeb6ac652321f6ad02ee1834", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -806,11 +806,11 @@ fn handle_fixes(\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;\n         let action = lsp_ext::CodeAction {\n             title: fix.label.to_string(),\n-            id: None,\n             group: None,\n             kind: Some(CodeActionKind::QUICKFIX),\n             edit: Some(edit),\n             is_preferred: Some(false),\n+            data: None,\n         };\n         res.push(action);\n     }\n@@ -852,11 +852,11 @@ pub(crate) fn handle_code_action(\n \n     handle_fixes(&snap, &params, &mut res)?;\n \n-    if snap.config.client_caps.resolve_code_action {\n+    if snap.config.client_caps.code_action_resolve {\n         for (index, assist) in\n             snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n         {\n-            res.push(to_proto::unresolved_code_action(&snap, assist, index)?);\n+            res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n         }\n     } else {\n         for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n@@ -867,11 +867,16 @@ pub(crate) fn handle_code_action(\n     Ok(Some(res))\n }\n \n-pub(crate) fn handle_resolve_code_action(\n+pub(crate) fn handle_code_action_resolve(\n     mut snap: GlobalStateSnapshot,\n-    params: lsp_ext::ResolveCodeActionParams,\n-) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n-    let _p = profile::span(\"handle_resolve_code_action\");\n+    mut code_action: lsp_ext::CodeAction,\n+) -> Result<lsp_ext::CodeAction> {\n+    let _p = profile::span(\"handle_code_action_resolve\");\n+    let params = match code_action.data.take() {\n+        Some(it) => it,\n+        None => Err(\"can't resolve code action without data\")?,\n+    };\n+\n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n@@ -888,7 +893,9 @@ pub(crate) fn handle_resolve_code_action(\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n     assert!(assist.assist.id.0 == id);\n-    Ok(to_proto::resolved_code_action(&snap, assist.clone())?.edit)\n+    let edit = to_proto::resolved_code_action(&snap, assist.clone())?.edit;\n+    code_action.edit = edit;\n+    Ok(code_action)\n }\n \n pub(crate) fn handle_code_lens("}, {"sha": "a7c3028e499350375051312c144e4cf15636cbe2", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -113,22 +113,6 @@ pub struct JoinLinesParams {\n     pub ranges: Vec<Range>,\n }\n \n-pub enum ResolveCodeActionRequest {}\n-\n-impl Request for ResolveCodeActionRequest {\n-    type Params = ResolveCodeActionParams;\n-    type Result = Option<SnippetWorkspaceEdit>;\n-    const METHOD: &'static str = \"experimental/resolveCodeAction\";\n-}\n-\n-/// Params for the ResolveCodeActionRequest\n-#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct ResolveCodeActionParams {\n-    pub code_action_params: lsp_types::CodeActionParams,\n-    pub id: String,\n-}\n-\n pub enum OnEnter {}\n \n impl Request for OnEnter {\n@@ -265,13 +249,18 @@ impl Request for CodeActionRequest {\n     const METHOD: &'static str = \"textDocument/codeAction\";\n }\n \n+pub enum CodeActionResolveRequest {}\n+impl Request for CodeActionResolveRequest {\n+    type Params = CodeAction;\n+    type Result = CodeAction;\n+    const METHOD: &'static str = \"codeAction/resolve\";\n+}\n+\n #[derive(Debug, PartialEq, Clone, Default, Deserialize, Serialize)]\n #[serde(rename_all = \"camelCase\")]\n pub struct CodeAction {\n     pub title: String,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub id: Option<String>,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub group: Option<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub kind: Option<CodeActionKind>,\n@@ -282,6 +271,16 @@ pub struct CodeAction {\n     pub edit: Option<SnippetWorkspaceEdit>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub is_preferred: Option<bool>,\n+\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub data: Option<CodeActionData>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct CodeActionData {\n+    pub code_action_params: lsp_types::CodeActionParams,\n+    pub id: String,\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]"}, {"sha": "6e6cac42e03e0443eb7e6822215bf218e89757a5", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -435,7 +435,7 @@ impl GlobalState {\n             .on::<lsp_ext::Runnables>(handlers::handle_runnables)\n             .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)\n             .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)\n-            .on::<lsp_ext::ResolveCodeActionRequest>(handlers::handle_resolve_code_action)\n+            .on::<lsp_ext::CodeActionResolveRequest>(handlers::handle_code_action_resolve)\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)\n             .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)"}, {"sha": "4bdf4bf0fad79f212a9c01f4a52e76b1600b507f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -735,16 +735,20 @@ pub(crate) fn code_action_kind(kind: AssistKind) -> lsp_types::CodeActionKind {\n \n pub(crate) fn unresolved_code_action(\n     snap: &GlobalStateSnapshot,\n+    code_action_params: lsp_types::CodeActionParams,\n     assist: Assist,\n     index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n         title: assist.label.to_string(),\n-        id: Some(format!(\"{}:{}\", assist.id.0, index.to_string())),\n         group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n         kind: Some(code_action_kind(assist.id.1)),\n         edit: None,\n         is_preferred: None,\n+        data: Some(lsp_ext::CodeActionData {\n+            id: format!(\"{}:{}\", assist.id.0, index.to_string()),\n+            code_action_params,\n+        }),\n     };\n     Ok(res)\n }\n@@ -754,13 +758,19 @@ pub(crate) fn resolved_code_action(\n     assist: ResolvedAssist,\n ) -> Result<lsp_ext::CodeAction> {\n     let change = assist.source_change;\n-    unresolved_code_action(snap, assist.assist, 0).and_then(|it| {\n-        Ok(lsp_ext::CodeAction {\n-            id: None,\n-            edit: Some(snippet_workspace_edit(snap, change)?),\n-            ..it\n-        })\n-    })\n+    let res = lsp_ext::CodeAction {\n+        edit: Some(snippet_workspace_edit(snap, change)?),\n+        title: assist.assist.label.to_string(),\n+        group: assist\n+            .assist\n+            .group\n+            .filter(|_| snap.config.client_caps.code_action_group)\n+            .map(|gr| gr.0),\n+        kind: Some(code_action_kind(assist.assist.id.1)),\n+        is_preferred: None,\n+        data: None,\n+    };\n+    Ok(res)\n }\n \n pub(crate) fn runnable("}, {"sha": "77d4e0ec996ac126d12f93bb434b3fa38064ec72", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 286f8bbac885531a\n+lsp_ext.rs hash: 4f86fb54e4b2870e\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -109,30 +109,6 @@ Invoking code action at this position will yield two code actions for importing\n * Is a fixed two-level structure enough?\n * Should we devise a general way to encode custom interaction protocols for GUI refactorings?\n \n-## Lazy assists with `ResolveCodeAction`\n-\n-**Issue:** https://github.com/microsoft/language-server-protocol/issues/787\n-\n-**Client Capability** `{ \"resolveCodeAction\": boolean }`\n-\n-If this capability is set, the assists will be computed lazily. Thus `CodeAction` returned from the server will only contain `id` but not `edit` or `command` fields. The only exclusion from the rule is the diagnostic edits.\n-\n-After the client got the id, it should then call `experimental/resolveCodeAction` command on the server and provide the following payload:\n-\n-```typescript\n-interface ResolveCodeActionParams {\n-    id: string;\n-    codeActionParams: lc.CodeActionParams;\n-}\n-```\n-\n-As a result of the command call the client will get the respective workspace edit (`lc.WorkspaceEdit`).\n-\n-### Unresolved Questions\n-\n-* Apply smarter filtering for ids?\n-* Upon `resolveCodeAction` command only call the assits which should be resolved and not all of them?\n-\n ## Parent Module\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/1002"}, {"sha": "c9d032ead38645ea414d5b99a6d653ffd4f47989", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -4,6 +4,7 @@ import * as ra from '../src/lsp_ext';\n import * as Is from 'vscode-languageclient/lib/common/utils/is';\n import { DocumentSemanticsTokensSignature, DocumentSemanticsTokensEditsSignature, DocumentRangeSemanticTokensSignature } from 'vscode-languageclient/lib/common/semanticTokens';\n import { assert } from './util';\n+import { WorkspaceEdit } from 'vscode';\n \n function renderCommand(cmd: ra.CommandLink) {\n     return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(JSON.stringify(cmd.arguments))} '${cmd.tooltip!}')`;\n@@ -75,8 +76,8 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                         return Promise.resolve(null);\n                     });\n             },\n-            // Using custom handling of CodeActions where each code action is resolved lazily\n-            // That's why we are not waiting for any command or edits\n+            // Using custom handling of CodeActions to support action groups and snippet edits.\n+            // Note that this means we have to re-implement lazy edit resolving ourselves as well.\n             async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n                 const params: lc.CodeActionParams = {\n                     textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n@@ -99,16 +100,15 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                         const kind = client.protocol2CodeConverter.asCodeActionKind((item as any).kind);\n                         const action = new vscode.CodeAction(item.title, kind);\n                         const group = (item as any).group;\n-                        const id = (item as any).id;\n-                        const resolveParams: ra.ResolveCodeActionParams = {\n-                            id: id,\n-                            codeActionParams: params\n-                        };\n                         action.command = {\n                             command: \"rust-analyzer.resolveCodeAction\",\n                             title: item.title,\n-                            arguments: [resolveParams],\n+                            arguments: [item],\n                         };\n+\n+                        // Set a dummy edit, so that VS Code doesn't try to resolve this.\n+                        action.edit = new WorkspaceEdit();\n+\n                         if (group) {\n                             let entry = groups.get(group);\n                             if (!entry) {\n@@ -134,6 +134,10 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                                     return { label: item.title, arguments: item.command!!.arguments!![0] };\n                                 })],\n                             };\n+\n+                            // Set a dummy edit, so that VS Code doesn't try to resolve this.\n+                            action.edit = new WorkspaceEdit();\n+\n                             result[index] = action;\n                         }\n                     }\n@@ -164,7 +168,6 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         const caps: any = capabilities.experimental ?? {};\n         caps.snippetTextEdit = true;\n         caps.codeActionGroup = true;\n-        caps.resolveCodeAction = true;\n         caps.hoverActions = true;\n         caps.statusNotification = true;\n         capabilities.experimental = caps;"}, {"sha": "cf34622c34179b65cc6610da0bfa3b99215d36eb", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -395,7 +395,7 @@ export function showReferences(ctx: Ctx): Cmd {\n }\n \n export function applyActionGroup(_ctx: Ctx): Cmd {\n-    return async (actions: { label: string; arguments: ra.ResolveCodeActionParams }[]) => {\n+    return async (actions: { label: string; arguments: lc.CodeAction }[]) => {\n         const selectedAction = await vscode.window.showQuickPick(actions);\n         if (!selectedAction) return;\n         vscode.commands.executeCommand(\n@@ -442,12 +442,13 @@ export function openDocs(ctx: Ctx): Cmd {\n \n export function resolveCodeAction(ctx: Ctx): Cmd {\n     const client = ctx.client;\n-    return async (params: ra.ResolveCodeActionParams) => {\n-        const item: lc.WorkspaceEdit = await client.sendRequest(ra.resolveCodeAction, params);\n-        if (!item) {\n+    return async (params: lc.CodeAction) => {\n+        params.command = undefined;\n+        const item = await client.sendRequest(lc.CodeActionResolveRequest.type, params);\n+        if (!item.edit) {\n             return;\n         }\n-        const edit = client.protocol2CodeConverter.asWorkspaceEdit(item);\n+        const edit = client.protocol2CodeConverter.asWorkspaceEdit(item.edit);\n         await applySnippetWorkspaceEdit(edit);\n     };\n }"}, {"sha": "d320c3cd7182ab14a9f0f380ab1dfe46b55dfc4b", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c06e820fa02b47a1550576f2a7071ff94fb0c64/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5c06e820fa02b47a1550576f2a7071ff94fb0c64/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=5c06e820fa02b47a1550576f2a7071ff94fb0c64", "patch": "@@ -43,12 +43,6 @@ export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position\n \n export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.LocationLink[], void>(\"experimental/parentModule\");\n \n-export interface ResolveCodeActionParams {\n-    id: string;\n-    codeActionParams: lc.CodeActionParams;\n-}\n-export const resolveCodeAction = new lc.RequestType<ResolveCodeActionParams, lc.WorkspaceEdit, unknown>('experimental/resolveCodeAction');\n-\n export interface JoinLinesParams {\n     textDocument: lc.TextDocumentIdentifier;\n     ranges: lc.Range[];"}]}