{"sha": "c2bfe45e660b9c56cb4ef734b30c278bb0414ee7", "node_id": "C_kwDOAAsO6NoAKGMyYmZlNDVlNjYwYjljNTZjYjRlZjczNGIzMGMyNzhiYjA0MTRlZTc", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-05T04:12:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T04:12:38Z"}, "message": "Rollup merge of #89473 - FabianWolff:issue-89469, r=joshtriplett\n\nFix extra `non_snake_case` warning for shorthand field bindings\n\nFixes #89469. The problem is the innermost `if` condition here:\nhttps://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler/rustc_lint/src/nonstandard_style.rs#L435-L452\n\nThis code runs for every `PatKind::Binding`, so if a struct has multiple fields, say A and B, and both are bound in a pattern using shorthands, the call to `self.check_snake_case()` will indeed be skipped in the `check_pat()` call for `A`; but when `check_pat()` is called for `B`, the loop will still iterate over `A`, and `field.ident (= A) != ident (= B)` will be true. I have fixed this by only looking at non-shorthand bindings, and only the binding that `check_pat()` was actually called for.", "tree": {"sha": "d0cfbd3edb65545963f9dcc555268bdae177fabc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cfbd3edb65545963f9dcc555268bdae177fabc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW9C2CRBK7hj4Ov3rIwAAmhEIAGHEWhPQD+xAhiheEYcwT4VE\n1Y+6Cnxrzj4D4DaiF9ga/zjbAiF7qmmzq4pT1WkYBfFgeeD7YCXRzFgkP240/Z4a\nHU05mlz+5ajTinrhGtxqgPFpc4LaI4gRFkWcROxMCdxJqyr5SmJjQYx1YK2w9dPt\nCRxL5UDZrzuodYyXQzu7TDavyCww7JxskUVaVhLflJoBH3z/F6BtfcPF3q/ZwSoz\nCYTIATP3JFCGQ6cjEc189hRD16rrjHZFwj1hhJ46c/SAo0yzp1DoAYh5f+oYodJC\n1agNPnuwrtglKEJo8MWudLe8AkfdibaQMqm6DtaWvt5XotUuXIZOGmYvGsAJNDc=\n=Tlx1\n-----END PGP SIGNATURE-----\n", "payload": "tree d0cfbd3edb65545963f9dcc555268bdae177fabc\nparent 36f173f0a93dc3ead3d8be5f160c28cba0637494\nparent 9626f2bd84ccf99635dfdbca3da782db3596190a\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633407158 -0700\ncommitter GitHub <noreply@github.com> 1633407158 -0700\n\nRollup merge of #89473 - FabianWolff:issue-89469, r=joshtriplett\n\nFix extra `non_snake_case` warning for shorthand field bindings\n\nFixes #89469. The problem is the innermost `if` condition here:\nhttps://github.com/rust-lang/rust/blob/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40/compiler/rustc_lint/src/nonstandard_style.rs#L435-L452\n\nThis code runs for every `PatKind::Binding`, so if a struct has multiple fields, say A and B, and both are bound in a pattern using shorthands, the call to `self.check_snake_case()` will indeed be skipped in the `check_pat()` call for `A`; but when `check_pat()` is called for `B`, the loop will still iterate over `A`, and `field.ident (= A) != ident (= B)` will be true. I have fixed this by only looking at non-shorthand bindings, and only the binding that `check_pat()` was actually called for.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7", "html_url": "https://github.com/rust-lang/rust/commit/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f173f0a93dc3ead3d8be5f160c28cba0637494", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f173f0a93dc3ead3d8be5f160c28cba0637494", "html_url": "https://github.com/rust-lang/rust/commit/36f173f0a93dc3ead3d8be5f160c28cba0637494"}, {"sha": "9626f2bd84ccf99635dfdbca3da782db3596190a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9626f2bd84ccf99635dfdbca3da782db3596190a", "html_url": "https://github.com/rust-lang/rust/commit/9626f2bd84ccf99635dfdbca3da782db3596190a"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "bcddc4f3d7643b539b23e67f92704537ba034b2e", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=c2bfe45e660b9c56cb4ef734b30c278bb0414ee7", "patch": "@@ -437,12 +437,13 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n             if let hir::Node::Pat(parent_pat) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n             {\n                 if let PatKind::Struct(_, field_pats, _) = &parent_pat.kind {\n-                    for field in field_pats.iter() {\n-                        if field.ident != ident {\n-                            // Only check if a new name has been introduced, to avoid warning\n-                            // on both the struct definition and this pattern.\n-                            self.check_snake_case(cx, \"variable\", &ident);\n-                        }\n+                    if field_pats\n+                        .iter()\n+                        .any(|field| !field.is_shorthand && field.pat.hir_id == p.hir_id)\n+                    {\n+                        // Only check if a new name has been introduced, to avoid warning\n+                        // on both the struct definition and this pattern.\n+                        self.check_snake_case(cx, \"variable\", &ident);\n                     }\n                     return;\n                 }"}, {"sha": "3a6ab452840acbea313677cfb5d0bc3c4c8cdfba", "filename": "src/test/ui/lint/issue-89469.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bfe45e660b9c56cb4ef734b30c278bb0414ee7/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs?ref=c2bfe45e660b9c56cb4ef734b30c278bb0414ee7", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #89469, where an extra non_snake_case warning was\n+// reported for a shorthand field binding.\n+\n+// check-pass\n+#![deny(non_snake_case)]\n+\n+#[allow(non_snake_case)]\n+struct Entry {\n+    A: u16,\n+    a: u16\n+}\n+\n+fn foo() -> Entry {todo!()}\n+\n+pub fn f() {\n+    let Entry { A, a } = foo();\n+    let _ = (A, a);\n+}\n+\n+fn main() {}"}]}