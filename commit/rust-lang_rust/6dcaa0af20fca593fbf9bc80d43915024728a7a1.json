{"sha": "6dcaa0af20fca593fbf9bc80d43915024728a7a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkY2FhMGFmMjBmY2E1OTNmYmY5YmM4MGQ0MzkxNTAyNDcyOGE3YTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-23T09:03:44Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-23T14:30:59Z"}, "message": "Rollup merge of #47661 - bjorn3:refactor_driver, r=michaelwoerister\n\nInline some rustc_driver function", "tree": {"sha": "abd21ee8b9fa5d26ea4ff11f6226c589732dff8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd21ee8b9fa5d26ea4ff11f6226c589732dff8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcaa0af20fca593fbf9bc80d43915024728a7a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpnRyMACgkQ/vbIBR0O\nATzOHQ/9EoaPEYYfMPs5uuF5LCTVbfa5wCbZg3Rskm3Nt0+OBgDqkziVwxW52IfS\nglyjR6sauokPE4rnOPI6OUL2iCPSJjxYx3gr6oqhpp9YlTCPma3QcdIiqvcsHaGN\nxkCXb3UOR8OBPLsRQkrnlJ15b//7aMD5u3JqTvkovBz1oJ3GCcVfj+ik+5D16Ld+\nQ471PXsMalLb9VgYy4G7ub6naNqy5U+A7Ec3orDrijn7OU31NPNfiEzIBvFwoKSy\nP+ieL09p9u0MEQusAqU5Qj3b13lH85KeDnYC/PXtDzVCfa+LFdp1stZ3wc1GLXHt\nxXvIR5FPW3O/JWJSiBtcUDqBywD6BU+CPmPJSDJHdXRt4Nry0M5tmDOznyd7y+py\nMO67HwTPsRn5Os+ZETJjMPyuaMezir/u7okTF4sQU/7N6UCl8sqLe3HPj52aJssh\nJqA6l4Hr13z6ESrhGuajCSqlmoHRQWqaEjOZZKqIZNfgA0gDZcat9S6XXqged2Go\nYATG8za7BkXwP8ZnCHoOCYAMH/hjp61pFhF/e3q9XVG73fVGkeBT/eMDuyYTg415\ntzsm2+YLmFD24pGnXUbXpNBINnwydg96ERnNuhE+Ni57W+9OBwythrpL4yZ2FaNV\n6j7EZtuVy2uoyY96mS8V+2VO97zQU0njbJa78eLwsh+M7erlFaM=\n=TWty\n-----END PGP SIGNATURE-----", "payload": "tree abd21ee8b9fa5d26ea4ff11f6226c589732dff8d\nparent 117eb68122cee0346e15f83c248859a89063a86b\nparent c3fabceab15442b2d4a13774cb07019bc7ec5bc5\nauthor kennytm <kennytm@gmail.com> 1516698224 +0800\ncommitter kennytm <kennytm@gmail.com> 1516717859 +0800\n\nRollup merge of #47661 - bjorn3:refactor_driver, r=michaelwoerister\n\nInline some rustc_driver function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcaa0af20fca593fbf9bc80d43915024728a7a1", "html_url": "https://github.com/rust-lang/rust/commit/6dcaa0af20fca593fbf9bc80d43915024728a7a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcaa0af20fca593fbf9bc80d43915024728a7a1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117eb68122cee0346e15f83c248859a89063a86b", "url": "https://api.github.com/repos/rust-lang/rust/commits/117eb68122cee0346e15f83c248859a89063a86b", "html_url": "https://github.com/rust-lang/rust/commit/117eb68122cee0346e15f83c248859a89063a86b"}, {"sha": "c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fabceab15442b2d4a13774cb07019bc7ec5bc5", "html_url": "https://github.com/rust-lang/rust/commit/c3fabceab15442b2d4a13774cb07019bc7ec5bc5"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "f19ffc0e12af69ba55963fa0c3c4ab3e232affc2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6dcaa0af20fca593fbf9bc80d43915024728a7a1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcaa0af20fca593fbf9bc80d43915024728a7a1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6dcaa0af20fca593fbf9bc80d43915024728a7a1", "patch": "@@ -51,14 +51,12 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::sync::mpsc;\n-use syntax::{ast, diagnostics, visit};\n-use syntax::attr;\n+use syntax::{self, ast, attr, diagnostics, visit};\n use syntax::ext::base::ExtCtxt;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n use syntax_pos::FileName;\n-use syntax;\n use syntax_ext;\n \n use derive_registrar;\n@@ -274,10 +272,6 @@ pub fn compile_input(trans: Box<TransCrate>,\n     Ok(())\n }\n \n-fn keep_hygiene_data(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.keep_hygiene_data\n-}\n-\n pub fn source_name(input: &Input) -> FileName {\n     match *input {\n         Input::File(ref ifile) => ifile.clone().into(),\n@@ -851,7 +845,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n          || lint::check_ast_crate(sess, &krate));\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n-    if !keep_hygiene_data(sess) {\n+    if !sess.opts.debugging_opts.keep_hygiene_data {\n         syntax::ext::hygiene::clear_markings();\n     }\n \n@@ -915,18 +909,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n                             mpsc::Receiver<Box<Any + Send>>,\n                             CompileResult) -> R\n {\n-    macro_rules! try_with_f {\n-        ($e: expr, ($($t:tt)*)) => {\n-            match $e {\n-                Ok(x) => x,\n-                Err(x) => {\n-                    f($($t)*, Err(x));\n-                    return Err(x);\n-                }\n-            }\n-        }\n-    }\n-\n     let time_passes = sess.time_passes();\n \n     let query_result_on_disk_cache = time(time_passes,\n@@ -987,7 +969,13 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n              || stability::check_unstable_api_usage(tcx));\n \n         // passes are timed inside typeck\n-        try_with_f!(typeck::check_crate(tcx), (tcx, analysis, rx));\n+        match typeck::check_crate(tcx) {\n+            Ok(x) => x,\n+            Err(x) => {\n+                f(tcx, analysis, rx, Err(x));\n+                return Err(x);\n+            }\n+        }\n \n         time(time_passes,\n              \"const checking\","}, {"sha": "04e94979c719f0b0ea6398352cb5ccdbf7a4ade9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6dcaa0af20fca593fbf9bc80d43915024728a7a1/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcaa0af20fca593fbf9bc80d43915024728a7a1/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6dcaa0af20fca593fbf9bc80d43915024728a7a1", "patch": "@@ -670,7 +670,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_hir_lowering.stop = Compilation::Stop;\n         }\n \n-        if save_analysis(sess) {\n+        if sess.opts.debugging_opts.save_analysis {\n             enable_save_analysis(&mut control);\n         }\n \n@@ -705,10 +705,6 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n     control.make_glob_map = resolve::MakeGlobMap::Yes;\n }\n \n-fn save_analysis(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.save_analysis\n-}\n-\n impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session,\n                          cstore: &CrateStore,\n@@ -1330,20 +1326,19 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n-pub fn get_args() -> Vec<String> {\n-    env::args_os().enumerate()\n-        .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n-             early_error(ErrorOutputType::default(),\n-                         &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n-         }))\n-        .collect()\n-}\n-\n pub fn main() {\n     env_logger::init().unwrap();\n-    let result = run(|| run_compiler(&get_args(),\n-                                     &mut RustcDefaultCalls,\n-                                     None,\n-                                     None));\n+    let result = run(|| {\n+        let args = env::args_os().enumerate()\n+            .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+                early_error(ErrorOutputType::default(),\n+                            &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n+            }))\n+            .collect::<Vec<_>>();\n+        run_compiler(&args,\n+                     &mut RustcDefaultCalls,\n+                     None,\n+                     None)\n+    });\n     process::exit(result as i32);\n }"}]}