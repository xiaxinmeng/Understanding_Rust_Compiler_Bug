{"sha": "81602fb6706654b868dd74ee88f680c57d4311cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjAyZmI2NzA2NjU0Yjg2OGRkNzRlZTg4ZjY4MGM1N2Q0MzExY2I=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-22T20:18:12Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-22T20:41:32Z"}, "message": "fix io::copy specialization when writer was opened with O_APPEND", "tree": {"sha": "61af8d1900099053a6aea3078b419271781fce8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61af8d1900099053a6aea3078b419271781fce8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81602fb6706654b868dd74ee88f680c57d4311cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81602fb6706654b868dd74ee88f680c57d4311cb", "html_url": "https://github.com/rust-lang/rust/commit/81602fb6706654b868dd74ee88f680c57d4311cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81602fb6706654b868dd74ee88f680c57d4311cb/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c0d76dbe1669c96f1959d7b0b1d4de7e9a47c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0d76dbe1669c96f1959d7b0b1d4de7e9a47c43", "html_url": "https://github.com/rust-lang/rust/commit/5c0d76dbe1669c96f1959d7b0b1d4de7e9a47c43"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "9687576bb6aeb258f0a73ddd8b53511dda5097bf", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81602fb6706654b868dd74ee88f680c57d4311cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81602fb6706654b868dd74ee88f680c57d4311cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=81602fb6706654b868dd74ee88f680c57d4311cb", "patch": "@@ -61,6 +61,7 @@ use crate::process::{ChildStderr, ChildStdin, ChildStdout};\n use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n+use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n \n #[cfg(test)]\n mod tests;\n@@ -535,7 +536,7 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                 cvt(copy_file_range(INVALID_FD, ptr::null_mut(), INVALID_FD, ptr::null_mut(), 1, 0))\n             };\n \n-            if matches!(result.map_err(|e| e.raw_os_error()), Err(Some(libc::EBADF))) {\n+            if matches!(result.map_err(|e| e.raw_os_error()), Err(Some(EBADF))) {\n                 HAS_COPY_FILE_RANGE.store(AVAILABLE, Ordering::Relaxed);\n             } else {\n                 HAS_COPY_FILE_RANGE.store(UNAVAILABLE, Ordering::Relaxed);\n@@ -573,19 +574,20 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n             Err(err) => {\n                 return match err.raw_os_error() {\n                     // when file offset + max_length > u64::MAX\n-                    Some(libc::EOVERFLOW) => CopyResult::Fallback(written),\n-                    Some(\n-                        libc::ENOSYS | libc::EXDEV | libc::EINVAL | libc::EPERM | libc::EOPNOTSUPP,\n-                    ) => {\n+                    Some(EOVERFLOW) => CopyResult::Fallback(written),\n+                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) => {\n                         // Try fallback io::copy if either:\n                         // - Kernel version is < 4.5 (ENOSYS\u00b9)\n                         // - Files are mounted on different fs (EXDEV)\n                         // - copy_file_range is broken in various ways on RHEL/CentOS 7 (EOPNOTSUPP)\n                         // - copy_file_range file is immutable or syscall is blocked by seccomp\u00b9 (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n+                        // - the writer fd was opened with O_APPEND (EBADF\u00b2)\n                         //\n                         // \u00b9 these cases should be detected by the initial probe but we handle them here\n                         //   anyway in case syscall interception changes during runtime\n+                        // \u00b2 actually invalid file descriptors would cause this too, but in that case\n+                        //   the fallback code path is expected to encounter the same error again\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n@@ -649,7 +651,7 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n             Ok(ret) => written += ret as u64,\n             Err(err) => {\n                 return match err.raw_os_error() {\n-                    Some(libc::ENOSYS | libc::EPERM) => {\n+                    Some(ENOSYS | EPERM) => {\n                         // syscall not supported (ENOSYS)\n                         // syscall is disallowed, e.g. by seccomp (EPERM)\n                         match mode {\n@@ -659,12 +661,12 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n-                    Some(libc::EINVAL) => {\n+                    Some(EINVAL) => {\n                         // splice/sendfile do not support this particular file descriptor (EINVAL)\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n-                    Some(os_err) if mode == SpliceMode::Sendfile && os_err == libc::EOVERFLOW => {\n+                    Some(os_err) if mode == SpliceMode::Sendfile && os_err == EOVERFLOW => {\n                         CopyResult::Fallback(written)\n                     }\n                     _ => CopyResult::Error(err, written),"}]}