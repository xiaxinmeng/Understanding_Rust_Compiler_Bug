{"sha": "90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDcxY2QxM2YyNmM1MGYxZDE5MDRlYjNiNDM2YzRlMWZhZjdkMmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-13T14:08:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-15T10:33:52Z"}, "message": "adjust for frame hook changes", "tree": {"sha": "3fea333c05da2575f6b644b907808c02011ce020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fea333c05da2575f6b644b907808c02011ce020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c", "html_url": "https://github.com/rust-lang/rust/commit/90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669191bca995d01db9eb75e3d906cfc07e28d7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/669191bca995d01db9eb75e3d906cfc07e28d7dd", "html_url": "https://github.com/rust-lang/rust/commit/669191bca995d01db9eb75e3d906cfc07e28d7dd"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "67b847603d8a5479022d4f78336266f315504834", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=90d71cd13f26c50f1d1904eb3b436c4e1faf7d2c", "patch": "@@ -490,21 +490,25 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, FrameData<'tcx>> {\n+    fn init_frame_extra(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx, Tag>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx, Tag, FrameData<'tcx>>> {\n         let stacked_borrows = ecx.memory.extra.stacked_borrows.as_ref();\n         let call_id = stacked_borrows.map_or(NonZeroU64::new(1).unwrap(), |stacked_borrows| {\n             stacked_borrows.borrow_mut().new_call()\n         });\n-        Ok(FrameData { call_id, catch_unwind: None })\n+        let extra = FrameData { call_id, catch_unwind: None };\n+        Ok(frame.with_extra(extra))\n     }\n \n     #[inline(always)]\n-    fn stack_pop(\n+    fn after_stack_pop(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        extra: FrameData<'tcx>,\n+        frame: Frame<'mir, 'tcx, Tag, FrameData<'tcx>>,\n         unwinding: bool,\n     ) -> InterpResult<'tcx, StackPopJump> {\n-        ecx.handle_stack_pop(extra, unwinding)\n+        ecx.handle_stack_pop(frame.extra, unwinding)\n     }\n \n     #[inline(always)]"}]}