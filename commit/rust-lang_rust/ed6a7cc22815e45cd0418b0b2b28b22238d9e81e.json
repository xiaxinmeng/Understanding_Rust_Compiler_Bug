{"sha": "ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "node_id": "C_kwDOAAsO6NoAKGVkNmE3Y2MyMjgxNWU0NWNkMDQxOGIwYjJiMjhiMjIyMzhkOWU4MWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-09T18:47:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-09T22:58:39Z"}, "message": "Remove save_and_restore_in_snapshot_flag", "tree": {"sha": "892cd2e1761a5d31df9a31ff87a6a5eb4490b59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892cd2e1761a5d31df9a31ff87a6a5eb4490b59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "html_url": "https://github.com/rust-lang/rust/commit/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "html_url": "https://github.com/rust-lang/rust/commit/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd"}], "stats": {"total": 78, "additions": 25, "deletions": 53}, "files": [{"sha": "c6bd771fad2568e4b8578316c80013836f845e38", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "patch": "@@ -765,7 +765,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let expect_args = self\n             .fudge_inference_if_ok(|| {\n-                let ocx = ObligationCtxt::new(self);\n+                let ocx = ObligationCtxt::new_in_snapshot(self);\n \n                 // Attempt to apply a subtyping relationship between the formal\n                 // return type (likely containing type variables if the function"}, {"sha": "fd3b3e4d59fa699d7570a708814025e0519e7e3e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "patch": "@@ -778,32 +778,6 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n     }\n \n-    /// Clear the \"currently in a snapshot\" flag, invoke the closure,\n-    /// then restore the flag to its original value. This flag is a\n-    /// debugging measure designed to detect cases where we start a\n-    /// snapshot, create type variables, and register obligations\n-    /// which may involve those type variables in the fulfillment cx,\n-    /// potentially leaving \"dangling type variables\" behind.\n-    /// In such cases, an assertion will fail when attempting to\n-    /// register obligations, within a snapshot. Very useful, much\n-    /// better than grovelling through megabytes of `RUSTC_LOG` output.\n-    ///\n-    /// HOWEVER, in some cases the flag is unhelpful. In particular, we\n-    /// sometimes create a \"mini-fulfilment-cx\" in which we enroll\n-    /// obligations. As long as this fulfillment cx is fully drained\n-    /// before we return, this is not a problem, as there won't be any\n-    /// escaping obligations in the main cx. In those cases, you can\n-    /// use this function.\n-    pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R\n-    where\n-        F: FnOnce(&Self) -> R,\n-    {\n-        let flag = self.in_snapshot.replace(false);\n-        let result = func(self);\n-        self.in_snapshot.set(flag);\n-        result\n-    }\n-\n     fn start_snapshot(&self) -> CombinedSnapshot<'tcx> {\n         debug!(\"start_snapshot()\");\n "}, {"sha": "231a18f86eae72eaea55261dc2344e087e7d12ba", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6a7cc22815e45cd0418b0b2b28b22238d9e81e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=ed6a7cc22815e45cd0418b0b2b28b22238d9e81e", "patch": "@@ -10,10 +10,12 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n pub mod specialization_graph;\n+use rustc_infer::traits::{TraitEngine, TraitEngineExt as _};\n use specialization_graph::GraphExt;\n \n use crate::errors::NegativePositiveConflict;\n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n+use crate::traits::engine::TraitEngineExt as _;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n use rustc_data_structures::fx::FxIndexSet;\n@@ -200,36 +202,32 @@ fn fulfill_implication<'tcx>(\n         return Err(());\n     };\n \n+    // Needs to be `in_snapshot` because this function is used to rebase\n+    // substitutions, which may happen inside of a select within a probe.\n+    let mut engine = <dyn TraitEngine<'tcx>>::new_in_snapshot(infcx.tcx);\n     // attempt to prove all of the predicates for impl2 given those for impl1\n     // (which are packed up in penv)\n+    engine.register_predicate_obligations(infcx, obligations.chain(more_obligations));\n \n-    infcx.save_and_restore_in_snapshot_flag(|infcx| {\n-        let errors = traits::fully_solve_obligations(&infcx, obligations.chain(more_obligations));\n-        match &errors[..] {\n-            [] => {\n-                debug!(\n-                    \"fulfill_implication: an impl for {:?} specializes {:?}\",\n-                    source_trait, target_trait\n-                );\n+    let errors = engine.select_all_or_error(infcx);\n+    if !errors.is_empty() {\n+        // no dice!\n+        debug!(\n+            \"fulfill_implication: for impls on {:?} and {:?}, \\\n+                 could not fulfill: {:?} given {:?}\",\n+            source_trait,\n+            target_trait,\n+            errors,\n+            param_env.caller_bounds()\n+        );\n+        return Err(());\n+    }\n \n-                // Now resolve the *substitution* we built for the target earlier, replacing\n-                // the inference variables inside with whatever we got from fulfillment.\n-                Ok(infcx.resolve_vars_if_possible(target_substs))\n-            }\n-            errors => {\n-                // no dice!\n-                debug!(\n-                    \"fulfill_implication: for impls on {:?} and {:?}, \\\n-                     could not fulfill: {:?} given {:?}\",\n-                    source_trait,\n-                    target_trait,\n-                    errors,\n-                    param_env.caller_bounds()\n-                );\n-                Err(())\n-            }\n-        }\n-    })\n+    debug!(\"fulfill_implication: an impl for {:?} specializes {:?}\", source_trait, target_trait);\n+\n+    // Now resolve the *substitution* we built for the target earlier, replacing\n+    // the inference variables inside with whatever we got from fulfillment.\n+    Ok(infcx.resolve_vars_if_possible(target_substs))\n }\n \n // Query provider for `specialization_graph_of`."}]}