{"sha": "cb344be99d6b491017558ffbd015b9a0b86e8558", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzQ0YmU5OWQ2YjQ5MTAxNzU1OGZmYmQwMTViOWEwYjg2ZTg1NTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:19:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:19:51Z"}, "message": "rollup merge of #20725: tomjakubowski/rustdoc-misc\n\nConflicts:\n\tsrc/librustdoc/html/format.rs", "tree": {"sha": "c8e4f9c13897e3afe768f8ccfae402793ed275bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e4f9c13897e3afe768f8ccfae402793ed275bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb344be99d6b491017558ffbd015b9a0b86e8558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb344be99d6b491017558ffbd015b9a0b86e8558", "html_url": "https://github.com/rust-lang/rust/commit/cb344be99d6b491017558ffbd015b9a0b86e8558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb344be99d6b491017558ffbd015b9a0b86e8558/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a204dc56c97f35632575b1baa008f2e069b1bed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a204dc56c97f35632575b1baa008f2e069b1bed9", "html_url": "https://github.com/rust-lang/rust/commit/a204dc56c97f35632575b1baa008f2e069b1bed9"}, {"sha": "a0734ff7e03b57db46cf8549c8329cddce4934ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0734ff7e03b57db46cf8549c8329cddce4934ec", "html_url": "https://github.com/rust-lang/rust/commit/a0734ff7e03b57db46cf8549c8329cddce4934ec"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "ea6bfc64c2227d806a62bff8f312c28d13fb7122", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cb344be99d6b491017558ffbd015b9a0b86e8558/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb344be99d6b491017558ffbd015b9a0b86e8558/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cb344be99d6b491017558ffbd015b9a0b86e8558", "patch": "@@ -530,7 +530,8 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n                 _ => {\n                     return PathParameters::AngleBracketed {\n                         lifetimes: lifetimes,\n-                        types: types.clean(cx)\n+                        types: types.clean(cx),\n+                        bindings: vec![]\n                     }\n                 }\n             };\n@@ -547,6 +548,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n             PathParameters::AngleBracketed {\n                 lifetimes: lifetimes,\n                 types: types.clean(cx),\n+                bindings: vec![] // FIXME(#20646)\n             }\n         }\n     }\n@@ -1766,6 +1768,7 @@ pub enum PathParameters {\n     AngleBracketed {\n         lifetimes: Vec<Lifetime>,\n         types: Vec<Type>,\n+        bindings: Vec<TypeBinding>\n     },\n     Parenthesized {\n         inputs: Vec<Type>,\n@@ -1779,7 +1782,8 @@ impl Clean<PathParameters> for ast::PathParameters {\n             ast::AngleBracketedParameters(ref data) => {\n                 PathParameters::AngleBracketed {\n                     lifetimes: data.lifetimes.clean(cx),\n-                    types: data.types.clean(cx)\n+                    types: data.types.clean(cx),\n+                    bindings: data.bindings.clean(cx)\n                 }\n             }\n \n@@ -2442,8 +2446,25 @@ fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n                 params: PathParameters::AngleBracketed {\n                     lifetimes: vec![],\n                     types: vec![t.clean(cx)],\n+                    bindings: vec![]\n                 }\n             }],\n         },\n     }\n }\n+\n+/// An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable)]\n+pub struct TypeBinding {\n+    pub name: String,\n+    pub ty: Type\n+}\n+\n+impl Clean<TypeBinding> for ast::TypeBinding {\n+    fn clean(&self, cx: &DocContext) -> TypeBinding {\n+        TypeBinding {\n+            name: self.ident.clean(cx),\n+            ty: self.ty.clean(cx)\n+        }\n+    }\n+}"}, {"sha": "244f5926a123db5d94a29886f56849359743cc88", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb344be99d6b491017558ffbd015b9a0b86e8558/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb344be99d6b491017558ffbd015b9a0b86e8558/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cb344be99d6b491017558ffbd015b9a0b86e8558", "patch": "@@ -206,8 +206,10 @@ impl fmt::String for clean::TyParamBound {\n impl fmt::String for clean::PathParameters {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::PathParameters::AngleBracketed { ref lifetimes, ref types } => {\n-                if lifetimes.len() > 0 || types.len() > 0 {\n+            clean::PathParameters::AngleBracketed {\n+                ref lifetimes, ref types, ref bindings\n+            } => {\n+                if lifetimes.len() > 0 || types.len() > 0 || bindings.len() > 0 {\n                     try!(f.write_str(\"&lt;\"));\n                     let mut comma = false;\n                     for lifetime in lifetimes.iter() {\n@@ -224,6 +226,13 @@ impl fmt::String for clean::PathParameters {\n                         comma = true;\n                         try!(write!(f, \"{}\", *ty));\n                     }\n+                    for binding in bindings.iter() {\n+                        if comma {\n+                            try!(f.write_str(\", \"));\n+                        }\n+                        comma = true;\n+                        try!(write!(f, \"{}\", *binding));\n+                    }\n                     try!(f.write_str(\"&gt;\"));\n                 }\n             }\n@@ -717,6 +726,7 @@ impl fmt::String for clean::ViewListIdent {\n                         params: clean::PathParameters::AngleBracketed {\n                             lifetimes: Vec::new(),\n                             types: Vec::new(),\n+                            bindings: Vec::new()\n                         }\n                     })\n                 };\n@@ -727,6 +737,12 @@ impl fmt::String for clean::ViewListIdent {\n     }\n }\n \n+impl fmt::String for clean::TypeBinding {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}={}\", self.name, self.ty)\n+    }\n+}\n+\n impl fmt::String for MutableSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}