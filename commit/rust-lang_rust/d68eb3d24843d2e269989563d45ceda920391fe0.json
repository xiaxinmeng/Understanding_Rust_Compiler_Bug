{"sha": "d68eb3d24843d2e269989563d45ceda920391fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGViM2QyNDg0M2QyZTI2OTk4OTU2M2Q0NWNlZGE5MjAzOTFmZTA=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-01-28T01:19:40Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-19T23:32:59Z"}, "message": "Added benchmarks for string pattern matching functions", "tree": {"sha": "8f48784bb74bde353e85fb6ad29ef94ce1f47bd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f48784bb74bde353e85fb6ad29ef94ce1f47bd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68eb3d24843d2e269989563d45ceda920391fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68eb3d24843d2e269989563d45ceda920391fe0", "html_url": "https://github.com/rust-lang/rust/commit/d68eb3d24843d2e269989563d45ceda920391fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68eb3d24843d2e269989563d45ceda920391fe0/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "308c5282a92a3e75f712c2338a0085a094f44bae", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/d68eb3d24843d2e269989563d45ceda920391fe0/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68eb3d24843d2e269989563d45ceda920391fe0/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=d68eb3d24843d2e269989563d45ceda920391fe0", "patch": "@@ -121,3 +121,110 @@ fn test_utf16_code_units() {\n     assert_eq!(Utf16Encoder::new(vec!['\u00e9', '\\u{1F4A9}'].into_iter()).collect::<Vec<u16>>(),\n                vec![0xE9, 0xD83D, 0xDCA9])\n }\n+\n+\n+// rm x86_64-unknown-linux-gnu/stage1/test/coretesttest-x86_64-unknown-linux-gnu; env PLEASE_BENCH=1 make check-stage1-coretest TESTNAME=str::bench\n+\n+mod bench {\n+    macro_rules! make_test_inner {\n+        ($s:ident, $code:expr, $name:ident, $str:expr) => {\n+            #[bench]\n+            fn $name(bencher: &mut Bencher) {\n+                let mut $s = $str;\n+                black_box(&mut $s);\n+                bencher.iter(|| $code);\n+            }\n+        }\n+    }\n+\n+    macro_rules! make_test {\n+        ($name:ident, $s:ident, $code:expr) => {\n+            mod $name {\n+                use test::Bencher;\n+                use test::black_box;\n+\n+                // Short strings: 65 bytes each\n+                make_test_inner!($s, $code, short_ascii,\n+                    \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n+                make_test_inner!($s, $code, short_mixed,\n+                    \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n+                make_test_inner!($s, $code, short_pile_of_poo,\n+                    \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n+                make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n+ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n+eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n+sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n+tempus vel, gravida nec quam.\n+\n+In est dui, tincidunt sed tempus interdum, adipiscing laoreet ante. Etiam tempor, tellus quis \\\n+sagittis interdum, nulla purus mattis sem, quis auctor erat odio ac tellus. In nec nunc sit amet \\\n+diam volutpat molestie at sed ipsum. Vestibulum laoreet consequat vulputate. Integer accumsan \\\n+lorem ac dignissim placerat. Suspendisse convallis faucibus lorem. Aliquam erat volutpat. In vel \\\n+eleifend felis. Sed suscipit nulla lorem, sed mollis est sollicitudin et. Nam fermentum egestas \\\n+interdum. Curabitur ut nisi justo.\n+\n+Sed sollicitudin ipsum tellus, ut condimentum leo eleifend nec. Cras ut velit ante. Phasellus nec \\\n+mollis odio. Mauris molestie erat in arcu mattis, at aliquet dolor vehicula. Quisque malesuada \\\n+lectus sit amet nisi pretium, a condimentum ipsum porta. Morbi at dapibus diam. Praesent egestas \\\n+est sed risus elementum, eu rutrum metus ultrices. Etiam fermentum consectetur magna, id rutrum \\\n+felis accumsan a. Aliquam ut pellentesque libero. Sed mi nulla, lobortis eu tortor id, suscipit \\\n+ultricies neque. Morbi iaculis sit amet risus at iaculis. Praesent eget ligula quis turpis \\\n+feugiat suscipit vel non arcu. Interdum et malesuada fames ac ante ipsum primis in faucibus. \\\n+Aliquam sit amet placerat lorem.\n+\n+Cras a lacus vel ante posuere elementum. Nunc est leo, bibendum ut facilisis vel, bibendum at \\\n+mauris. Nullam adipiscing diam vel odio ornare, luctus adipiscing mi luctus. Nulla facilisi. \\\n+Mauris adipiscing bibendum neque, quis adipiscing lectus tempus et. Sed feugiat erat et nisl \\\n+lobortis pharetra. Donec vitae erat enim. Nullam sit amet felis et quam lacinia tincidunt. Aliquam \\\n+suscipit dapibus urna. Sed volutpat urna in magna pulvinar volutpat. Phasellus nec tellus ac diam \\\n+cursus accumsan.\n+\n+Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas eleifend dictum \\\n+feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n+vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n+leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n+malesuada sollicitudin quam eu fermentum!\");\n+            }\n+        }\n+    }\n+\n+    make_test!(chars_count, s, s.chars().count());\n+\n+    make_test!(contains_bang_str, s, s.contains(\"!\"));\n+    make_test!(contains_bang_char, s, s.contains_char('!'));\n+\n+    make_test!(match_indices_a_str, s, s.match_indices(\"a\").count());\n+\n+    make_test!(split_str_a_str, s, s.split_str(\"a\").count());\n+\n+    make_test!(trim_ascii_char, s, {\n+        use std::ascii::AsciiExt;\n+        s.trim_matches(|&mut: c: char| c.is_ascii())\n+    });\n+    make_test!(trim_left_ascii_char, s, {\n+        use std::ascii::AsciiExt;\n+        s.trim_left_matches(|&mut: c: char| c.is_ascii())\n+    });\n+    make_test!(trim_right_ascii_char, s, {\n+        use std::ascii::AsciiExt;\n+        s.trim_right_matches(|&mut: c: char| c.is_ascii())\n+    });\n+\n+    make_test!(find_underscore_char, s, s.find('_'));\n+    make_test!(rfind_underscore_char, s, s.rfind('_'));\n+    make_test!(find_underscore_str, s, s.find_str(\"_\"));\n+\n+    make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n+    make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n+    make_test!(find_zzz_str, s, s.find_str(\"\\u{1F4A4}\"));\n+\n+    make_test!(split_space_char, s, s.split(' ').count());\n+    make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n+\n+    make_test!(splitn_space_char, s, s.splitn(10, ' ').count());\n+    make_test!(rsplitn_space_char, s, s.rsplitn(10, ' ').count());\n+\n+    make_test!(split_str_space_str, s, s.split_str(\" \").count());\n+    make_test!(split_str_ad_str, s, s.split_str(\"ad\").count());\n+}"}]}