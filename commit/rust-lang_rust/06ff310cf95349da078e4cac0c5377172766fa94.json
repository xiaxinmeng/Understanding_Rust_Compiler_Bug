{"sha": "06ff310cf95349da078e4cac0c5377172766fa94", "node_id": "C_kwDOAAsO6NoAKDA2ZmYzMTBjZjk1MzQ5ZGEwNzhlNGNhYzBjNTM3NzE3Mjc2NmZhOTQ", "commit": {"author": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2023-04-14T15:02:41Z"}, "committer": {"name": "Obei Sideg", "email": "obei.sideg@gmail.com", "date": "2023-04-21T20:50:03Z"}, "message": "Migrate `rustc_hir_analysis` to session diagnostic\n\nPart 4: Finishing `check/mod.rs` file", "tree": {"sha": "103d8d8d9cf34df335f6cf080e2afbe093f2e0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103d8d8d9cf34df335f6cf080e2afbe093f2e0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ff310cf95349da078e4cac0c5377172766fa94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ff310cf95349da078e4cac0c5377172766fa94", "html_url": "https://github.com/rust-lang/rust/commit/06ff310cf95349da078e4cac0c5377172766fa94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ff310cf95349da078e4cac0c5377172766fa94/comments", "author": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "obeis", "id": 54103142, "node_id": "MDQ6VXNlcjU0MTAzMTQy", "avatar_url": "https://avatars.githubusercontent.com/u/54103142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeis", "html_url": "https://github.com/obeis", "followers_url": "https://api.github.com/users/obeis/followers", "following_url": "https://api.github.com/users/obeis/following{/other_user}", "gists_url": "https://api.github.com/users/obeis/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeis/subscriptions", "organizations_url": "https://api.github.com/users/obeis/orgs", "repos_url": "https://api.github.com/users/obeis/repos", "events_url": "https://api.github.com/users/obeis/events{/privacy}", "received_events_url": "https://api.github.com/users/obeis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "html_url": "https://github.com/rust-lang/rust/commit/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4"}], "stats": {"total": 339, "additions": 254, "deletions": 85}, "files": [{"sha": "f32ae509e335a010a71b8a60d590c71e4688dfe5", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/06ff310cf95349da078e4cac0c5377172766fa94/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/06ff310cf95349da078e4cac0c5377172766fa94/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=06ff310cf95349da078e4cac0c5377172766fa94", "patch": "@@ -225,3 +225,40 @@ hir_analysis_functions_names_duplicated = functions names are duplicated\n \n hir_analysis_simd_ffi_highly_experimental = use of SIMD type{$snip} in FFI is highly experimental and may result in invalid code\n     .help = add `#![feature(simd_ffi)]` to the crate attributes to enable\n+\n+hir_analysis_impl_not_marked_default = `{$ident}` specializes an item from a parent `impl`, but that item is not marked `default`\n+    .label = cannot specialize default item `{$ident}`\n+    .ok_label = parent `impl` is here\n+    .note = to specialize, `{$ident}` in the parent `impl` must be marked `default`\n+\n+hir_analysis_impl_not_marked_default_err = `{$ident}` specializes an item from a parent `impl`, but that item is not marked `default`\n+    .note = parent implementation is in crate `{$cname}`\n+\n+hir_analysis_missing_trait_item = not all trait items implemented, missing: `{$missing_items_msg}`\n+    .label = missing `{$missing_items_msg}` in implementation\n+\n+hir_analysis_missing_trait_item_suggestion = implement the missing item: `{$snippet}`\n+\n+hir_analysis_missing_trait_item_label = `{$item}` from trait\n+\n+hir_analysis_missing_one_of_trait_item = not all trait items implemented, missing one of: `{$missing_items_msg}`\n+    .label = missing one of `{$missing_items_msg}` in implementation\n+    .note = required because of this annotation\n+\n+hir_analysis_missing_trait_item_unstable = not all trait items implemented, missing: `{$missing_item_name}`\n+    .note = default implementation of `{$missing_item_name}` is unstable\n+    .some_note = use of unstable library feature '{$feature}': {$r}\n+    .none_note = use of unstable library feature '{$feature}'\n+\n+hir_analysis_transparent_enum_variant = transparent enum needs exactly one variant, but has {$number}\n+    .label = needs exactly one variant, but has {$number}\n+    .many_label = too many variants in `{$path}`\n+    .multi_label = variant here\n+\n+hir_analysis_transparent_non_zero_sized_enum = the variant of a transparent {$desc} needs at most one non-zero-sized field, but has {$field_count}\n+    .label = needs at most one non-zero-sized field, but has {$field_count}\n+    .labels = this field is non-zero-sized\n+\n+hir_analysis_transparent_non_zero_sized = transparent {$desc} needs at most one non-zero-sized field, but has {$field_count}\n+    .label = needs at most one non-zero-sized field, but has {$field_count}\n+    .labels = this field is non-zero-sized"}, {"sha": "08154cdae47843ce71c3ce4d0c10266d2f5bf19a", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 76, "deletions": 84, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/06ff310cf95349da078e4cac0c5377172766fa94/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ff310cf95349da078e4cac0c5377172766fa94/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=06ff310cf95349da078e4cac0c5377172766fa94", "patch": "@@ -74,7 +74,7 @@ pub use check::check_abi;\n \n use check::check_mod_item_types;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, DiagnosticBuilder};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_index::bit_set::BitSet;\n@@ -90,6 +90,7 @@ use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n use std::num::NonZeroU32;\n \n+use crate::errors;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n \n@@ -171,29 +172,13 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId) {\n fn report_forbidden_specialization(tcx: TyCtxt<'_>, impl_item: DefId, parent_impl: DefId) {\n     let span = tcx.def_span(impl_item);\n     let ident = tcx.item_name(impl_item);\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        span,\n-        E0520,\n-        \"`{}` specializes an item from a parent `impl`, but that item is not marked `default`\",\n-        ident,\n-    );\n-    err.span_label(span, format!(\"cannot specialize default item `{}`\", ident));\n-\n-    match tcx.span_of_impl(parent_impl) {\n-        Ok(span) => {\n-            err.span_label(span, \"parent `impl` is here\");\n-            err.note(&format!(\n-                \"to specialize, `{}` in the parent `impl` must be marked `default`\",\n-                ident\n-            ));\n-        }\n-        Err(cname) => {\n-            err.note(&format!(\"parent implementation is in crate `{cname}`\"));\n-        }\n-    }\n \n-    err.emit();\n+    let err = match tcx.span_of_impl(parent_impl) {\n+        Ok(sp) => errors::ImplNotMarkedDefault::Ok { span, ident, ok_label: sp },\n+        Err(cname) => errors::ImplNotMarkedDefault::Err { span, ident, cname },\n+    };\n+\n+    tcx.sess.emit_err(err);\n }\n \n fn missing_items_err(\n@@ -211,15 +196,6 @@ fn missing_items_err(\n         .collect::<Vec<_>>()\n         .join(\"`, `\");\n \n-    let impl_span = tcx.def_span(impl_def_id);\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        impl_span,\n-        E0046,\n-        \"not all trait items implemented, missing: `{missing_items_msg}`\",\n-    );\n-    err.span_label(impl_span, format!(\"missing `{missing_items_msg}` in implementation\"));\n-\n     // `Span` before impl block closing brace.\n     let hi = full_impl_span.hi() - BytePos(1);\n     // Point at the place right before the closing brace of the relevant `impl` to suggest\n@@ -228,6 +204,8 @@ fn missing_items_err(\n     // Obtain the level of indentation ending in `sugg_sp`.\n     let padding =\n         tcx.sess.source_map().indentation_before(sugg_sp).unwrap_or_else(|| String::new());\n+    let (mut missing_trait_item, mut missing_trait_item_none, mut missing_trait_item_label) =\n+        (Vec::new(), Vec::new(), Vec::new());\n \n     for &trait_item in missing_items {\n         let snippet = suggestion_signature(\n@@ -236,16 +214,30 @@ fn missing_items_err(\n             tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity(),\n         );\n         let code = format!(\"{}{}\\n{}\", padding, snippet, padding);\n-        let msg = format!(\"implement the missing item: `{snippet}`\");\n-        let appl = Applicability::HasPlaceholders;\n         if let Some(span) = tcx.hir().span_if_local(trait_item.def_id) {\n-            err.span_label(span, format!(\"`{}` from trait\", trait_item.name));\n-            err.tool_only_span_suggestion(sugg_sp, &msg, code, appl);\n+            missing_trait_item_label\n+                .push(errors::MissingTraitItemLabel { span, item: trait_item.name });\n+            missing_trait_item.push(errors::MissingTraitItemSuggestion {\n+                span: sugg_sp,\n+                code,\n+                snippet,\n+            });\n         } else {\n-            err.span_suggestion_hidden(sugg_sp, &msg, code, appl);\n+            missing_trait_item_none.push(errors::MissingTraitItemSuggestionNone {\n+                span: sugg_sp,\n+                code,\n+                snippet,\n+            })\n         }\n     }\n-    err.emit();\n+\n+    tcx.sess.emit_err(errors::MissingTraitItem {\n+        span: tcx.span_of_impl(impl_def_id.to_def_id()).unwrap(),\n+        missing_items_msg,\n+        missing_trait_item_label,\n+        missing_trait_item,\n+        missing_trait_item_none,\n+    });\n }\n \n fn missing_items_must_implement_one_of_err(\n@@ -257,19 +249,11 @@ fn missing_items_must_implement_one_of_err(\n     let missing_items_msg =\n         missing_items.iter().map(Ident::to_string).collect::<Vec<_>>().join(\"`, `\");\n \n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        impl_span,\n-        E0046,\n-        \"not all trait items implemented, missing one of: `{missing_items_msg}`\",\n-    );\n-    err.span_label(impl_span, format!(\"missing one of `{missing_items_msg}` in implementation\"));\n-\n-    if let Some(annotation_span) = annotation_span {\n-        err.span_note(annotation_span, \"required because of this annotation\");\n-    }\n-\n-    err.emit();\n+    tcx.sess.emit_err(errors::MissingOneOfTraitItem {\n+        span: impl_span,\n+        note: annotation_span,\n+        missing_items_msg,\n+    });\n }\n \n fn default_body_is_unstable(\n@@ -281,25 +265,31 @@ fn default_body_is_unstable(\n     issue: Option<NonZeroU32>,\n ) {\n     let missing_item_name = tcx.associated_item(item_did).name;\n-    let use_of_unstable_library_feature_note = match reason {\n-        Some(r) => format!(\"use of unstable library feature '{feature}': {r}\"),\n-        None => format!(\"use of unstable library feature '{feature}'\"),\n+    let (mut some_note, mut none_note, mut reason_str) = (false, false, String::new());\n+    match reason {\n+        Some(r) => {\n+            some_note = true;\n+            reason_str = r.to_string();\n+        }\n+        None => none_note = true,\n     };\n \n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        impl_span,\n-        E0046,\n-        \"not all trait items implemented, missing: `{missing_item_name}`\",\n-    );\n-    err.note(format!(\"default implementation of `{missing_item_name}` is unstable\"));\n-    err.note(use_of_unstable_library_feature_note);\n+    let mut err = tcx.sess.create_err(errors::MissingTraitItemUnstable {\n+        span: impl_span,\n+        some_note,\n+        none_note,\n+        missing_item_name,\n+        feature,\n+        reason: reason_str,\n+    });\n+\n     rustc_session::parse::add_feature_diagnostics_for_issue(\n         &mut err,\n         &tcx.sess.parse_sess,\n         feature,\n         rustc_feature::GateIssue::Library(issue),\n     );\n+\n     err.emit();\n }\n \n@@ -488,16 +478,18 @@ fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: ty::AdtDef<'tcx>, sp: Span, d\n         .iter()\n         .map(|variant| tcx.hir().span_if_local(variant.def_id).unwrap())\n         .collect();\n-    let msg = format!(\"needs exactly one variant, but has {}\", adt.variants().len(),);\n-    let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {msg}\");\n-    err.span_label(sp, &msg);\n+    let (mut spans, mut many) = (Vec::new(), None);\n     if let [start @ .., end] = &*variant_spans {\n-        for variant_span in start {\n-            err.span_label(*variant_span, \"\");\n-        }\n-        err.span_label(*end, &format!(\"too many variants in `{}`\", tcx.def_path_str(did)));\n+        spans = start.to_vec();\n+        many = Some(*end);\n     }\n-    err.emit();\n+    tcx.sess.emit_err(errors::TransparentEnumVariant {\n+        span: sp,\n+        spans,\n+        many,\n+        number: adt.variants().len(),\n+        path: tcx.def_path_str(did),\n+    });\n }\n \n /// Emit an error when encountering two or more non-zero-sized fields in a transparent\n@@ -509,21 +501,21 @@ fn bad_non_zero_sized_fields<'tcx>(\n     field_spans: impl Iterator<Item = Span>,\n     sp: Span,\n ) {\n-    let msg = format!(\"needs at most one non-zero-sized field, but has {field_count}\");\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        sp,\n-        E0690,\n-        \"{}transparent {} {}\",\n-        if adt.is_enum() { \"the variant of a \" } else { \"\" },\n-        adt.descr(),\n-        msg,\n-    );\n-    err.span_label(sp, &msg);\n-    for sp in field_spans {\n-        err.span_label(sp, \"this field is non-zero-sized\");\n+    if adt.is_enum() {\n+        tcx.sess.emit_err(errors::TransparentNonZeroSizedEnum {\n+            span: sp,\n+            spans: field_spans.collect(),\n+            field_count,\n+            desc: adt.descr(),\n+        });\n+    } else {\n+        tcx.sess.emit_err(errors::TransparentNonZeroSized {\n+            span: sp,\n+            spans: field_spans.collect(),\n+            field_count,\n+            desc: adt.descr(),\n+        });\n     }\n-    err.emit();\n }\n \n // FIXME: Consider moving this method to a more fitting place."}, {"sha": "cfce2463b187291af23f9613b1ea83a0e8ce136f", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/06ff310cf95349da078e4cac0c5377172766fa94/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ff310cf95349da078e4cac0c5377172766fa94/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=06ff310cf95349da078e4cac0c5377172766fa94", "patch": "@@ -631,3 +631,141 @@ pub(crate) struct SIMDFFIHighlyExperimental {\n     pub span: Span,\n     pub snip: String,\n }\n+\n+#[derive(Diagnostic)]\n+pub enum ImplNotMarkedDefault {\n+    #[diag(hir_analysis_impl_not_marked_default, code = \"E0520\")]\n+    #[note]\n+    Ok {\n+        #[primary_span]\n+        #[label]\n+        span: Span,\n+        #[label(hir_analysis_ok_label)]\n+        ok_label: Span,\n+        ident: Symbol,\n+    },\n+    #[diag(hir_analysis_impl_not_marked_default_err, code = \"E0520\")]\n+    #[note]\n+    Err {\n+        #[primary_span]\n+        #[label]\n+        span: Span,\n+        cname: Symbol,\n+        ident: Symbol,\n+    },\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_missing_trait_item, code = \"E0046\")]\n+pub(crate) struct MissingTraitItem {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub missing_trait_item_label: Vec<MissingTraitItemLabel>,\n+    #[subdiagnostic]\n+    pub missing_trait_item: Vec<MissingTraitItemSuggestion>,\n+    #[subdiagnostic]\n+    pub missing_trait_item_none: Vec<MissingTraitItemSuggestionNone>,\n+    pub missing_items_msg: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(hir_analysis_missing_trait_item_label)]\n+pub(crate) struct MissingTraitItemLabel {\n+    #[primary_span]\n+    pub span: Span,\n+    pub item: Symbol,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    hir_analysis_missing_trait_item_suggestion,\n+    style = \"tool-only\",\n+    applicability = \"has-placeholders\",\n+    code = \"{code}\"\n+)]\n+pub(crate) struct MissingTraitItemSuggestion {\n+    #[primary_span]\n+    pub span: Span,\n+    pub code: String,\n+    pub snippet: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    hir_analysis_missing_trait_item_suggestion,\n+    style = \"hidden\",\n+    applicability = \"has-placeholders\",\n+    code = \"{code}\"\n+)]\n+pub(crate) struct MissingTraitItemSuggestionNone {\n+    #[primary_span]\n+    pub span: Span,\n+    pub code: String,\n+    pub snippet: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_missing_one_of_trait_item, code = \"E0046\")]\n+pub(crate) struct MissingOneOfTraitItem {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[note]\n+    pub note: Option<Span>,\n+    pub missing_items_msg: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_missing_trait_item_unstable, code = \"E0046\")]\n+#[note]\n+pub(crate) struct MissingTraitItemUnstable {\n+    #[primary_span]\n+    pub span: Span,\n+    #[note(hir_analysis_some_note)]\n+    pub some_note: bool,\n+    #[note(hir_analysis_none_note)]\n+    pub none_note: bool,\n+    pub missing_item_name: Symbol,\n+    pub feature: Symbol,\n+    pub reason: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_transparent_enum_variant, code = \"E0731\")]\n+pub(crate) struct TransparentEnumVariant {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[label(hir_analysis_multi_label)]\n+    pub spans: Vec<Span>,\n+    #[label(hir_analysis_many_label)]\n+    pub many: Option<Span>,\n+    pub number: usize,\n+    pub path: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_transparent_non_zero_sized_enum, code = \"E0690\")]\n+pub(crate) struct TransparentNonZeroSizedEnum<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[label(hir_analysis_labels)]\n+    pub spans: Vec<Span>,\n+    pub field_count: usize,\n+    pub desc: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_transparent_non_zero_sized, code = \"E0690\")]\n+pub(crate) struct TransparentNonZeroSized<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[label(hir_analysis_labels)]\n+    pub spans: Vec<Span>,\n+    pub field_count: usize,\n+    pub desc: &'a str,\n+}"}, {"sha": "cb1e2337776568f0a1669f6a8a9f590153ecb221", "filename": "tests/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ff310cf95349da078e4cac0c5377172766fa94/tests%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06ff310cf95349da078e4cac0c5377172766fa94/tests%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepr%2Frepr-transparent.stderr?ref=06ff310cf95349da078e4cac0c5377172766fa94", "patch": "@@ -58,7 +58,7 @@ error[E0731]: transparent enum needs exactly one variant, but has 2\n LL | enum MultipleVariants {\n    | ^^^^^^^^^^^^^^^^^^^^^ needs exactly one variant, but has 2\n LL |     Foo(String),\n-   |     ---\n+   |     --- variant here\n LL |     Bar,\n    |     --- too many variants in `MultipleVariants`\n "}, {"sha": "1a500257f48c522ea478d23f9c13990e1c27c70d", "filename": "tests/ui/repr/transparent-enum-too-many-variants.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ff310cf95349da078e4cac0c5377172766fa94/tests%2Fui%2Frepr%2Ftransparent-enum-too-many-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06ff310cf95349da078e4cac0c5377172766fa94/tests%2Fui%2Frepr%2Ftransparent-enum-too-many-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepr%2Ftransparent-enum-too-many-variants.stderr?ref=06ff310cf95349da078e4cac0c5377172766fa94", "patch": "@@ -5,6 +5,8 @@ LL | enum Foo {\n    | ^^^^^^^^ needs exactly one variant, but has 2\n LL |     A(u8), B(u8),\n    |     -      - too many variants in `Foo`\n+   |     |\n+   |     variant here\n \n error: aborting due to previous error\n "}]}