{"sha": "cc4e3443ecf96f395e598b14af208d36a11ffb9f", "node_id": "C_kwDOAAsO6NoAKGNjNGUzNDQzZWNmOTZmMzk1ZTU5OGIxNGFmMjA4ZDM2YTExZmZiOWY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-21T02:26:58Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-21T02:34:38Z"}, "message": "Produce `CloseDelim` and pop the stack at the same time.\n\nThis makes `CloseDelim` handling more like `OpenDelim` handling, which\nproduces `OpenDelim` and pushes the stack at the same time. It requires\nsome adjustment to `parse_token_tree` now that we don't remain within\nthe frame after getting the `CloseDelim`.", "tree": {"sha": "ab6584a8420bfd39835a4090b00fd484cca67335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab6584a8420bfd39835a4090b00fd484cca67335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4e3443ecf96f395e598b14af208d36a11ffb9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e3443ecf96f395e598b14af208d36a11ffb9f", "html_url": "https://github.com/rust-lang/rust/commit/cc4e3443ecf96f395e598b14af208d36a11ffb9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e3443ecf96f395e598b14af208d36a11ffb9f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a89255b20d6fcbaf96ceeddcf6de119ee4ae0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a89255b20d6fcbaf96ceeddcf6de119ee4ae0a5", "html_url": "https://github.com/rust-lang/rust/commit/7a89255b20d6fcbaf96ceeddcf6de119ee4ae0a5"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "a620266247a88573622603ec93a176ee7fa3738e", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cc4e3443ecf96f395e598b14af208d36a11ffb9f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4e3443ecf96f395e598b14af208d36a11ffb9f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=cc4e3443ecf96f395e598b14af208d36a11ffb9f", "patch": "@@ -208,7 +208,12 @@ impl<'a> Drop for Parser<'a> {\n \n #[derive(Clone)]\n struct TokenCursor {\n+    // The current (innermost) frame. `frame` and `stack` could be combined,\n+    // but it's faster to have them separately to access `frame` directly\n+    // rather than via something like `stack.last().unwrap()` or\n+    // `stack[stack.len() - 1]`.\n     frame: TokenCursorFrame,\n+    // Additional frames that enclose `frame`.\n     stack: Vec<TokenCursorFrame>,\n     desugar_doc_comments: bool,\n     // Counts the number of calls to `{,inlined_}next`.\n@@ -242,17 +247,11 @@ struct TokenCursorFrame {\n     delim: token::DelimToken,\n     span: DelimSpan,\n     tree_cursor: tokenstream::Cursor,\n-    need_to_produce_close_delim: bool,\n }\n \n impl TokenCursorFrame {\n     fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {\n-        TokenCursorFrame {\n-            delim,\n-            span,\n-            tree_cursor: tts.into_trees(),\n-            need_to_produce_close_delim: delim != DelimToken::NoDelim,\n-        }\n+        TokenCursorFrame { delim, span, tree_cursor: tts.into_trees() }\n     }\n }\n \n@@ -265,6 +264,9 @@ impl TokenCursor {\n     #[inline(always)]\n     fn inlined_next(&mut self, desugar_doc_comments: bool) -> (Token, Spacing) {\n         loop {\n+            // FIXME: we currently don't return `NoDelim` open/close delims. To fix #67062 we will\n+            // need to, whereupon the `delim != DelimToken::NoDelim` conditions below can be\n+            // removed, as well as the loop.\n             if let Some((tree, spacing)) = self.frame.tree_cursor.next_with_spacing() {\n                 match tree {\n                     TokenTree::Token(token) => match (desugar_doc_comments, &token) {\n@@ -283,15 +285,14 @@ impl TokenCursor {\n                         // No open delimeter to return; continue on to the next iteration.\n                     }\n                 };\n-            } else if self.frame.need_to_produce_close_delim {\n-                self.frame.need_to_produce_close_delim = false;\n-                return (\n-                    Token::new(token::CloseDelim(self.frame.delim), self.frame.span.close),\n-                    Spacing::Alone,\n-                );\n             } else if let Some(frame) = self.stack.pop() {\n+                let delim = self.frame.delim;\n+                let span = self.frame.span;\n                 self.frame = frame;\n-                // Back to the parent frame; continue on to the next iteration.\n+                if delim != DelimToken::NoDelim {\n+                    return (Token::new(token::CloseDelim(delim), span.close), Spacing::Alone);\n+                }\n+                // No close delimiter to return; continue on to the next iteration.\n             } else {\n                 return (Token::new(token::Eof, DUMMY_SP), Spacing::Alone);\n             }\n@@ -430,6 +431,8 @@ impl<'a> Parser<'a> {\n         desugar_doc_comments: bool,\n         subparser_name: Option<&'static str>,\n     ) -> Self {\n+        // Note: because of the way `TokenCursor::inlined_next` is structured, the `span` and\n+        // `delim` arguments here are never used.\n         let start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);\n \n         let mut parser = Parser {\n@@ -1192,24 +1195,28 @@ impl<'a> Parser<'a> {\n     pub(crate) fn parse_token_tree(&mut self) -> TokenTree {\n         match self.token.kind {\n             token::OpenDelim(..) => {\n-                let depth = self.token_cursor.stack.len();\n+                // Grab the tokens from this frame.\n+                let frame = &self.token_cursor.frame;\n+                let stream = frame.tree_cursor.stream.clone();\n+                let span = frame.span;\n+                let delim = frame.delim;\n \n-                // We keep advancing the token cursor until we hit\n-                // the matching `CloseDelim` token.\n-                while !(depth == self.token_cursor.stack.len()\n-                    && matches!(self.token.kind, token::CloseDelim(_)))\n-                {\n+                // Advance the token cursor through the entire delimited\n+                // sequence. After getting the `OpenDelim` we are *within* the\n+                // delimited sequence, i.e. at depth `d`. After getting the\n+                // matching `CloseDelim` we are *after* the delimited sequence,\n+                // i.e. at depth `d - 1`.\n+                let target_depth = self.token_cursor.stack.len() - 1;\n+                loop {\n                     // Advance one token at a time, so `TokenCursor::next()`\n                     // can capture these tokens if necessary.\n                     self.bump();\n+                    if self.token_cursor.stack.len() == target_depth {\n+                        debug_assert!(matches!(self.token.kind, token::CloseDelim(_)));\n+                        break;\n+                    }\n                 }\n-                // We are still inside the frame corresponding\n-                // to the delimited stream we captured, so grab\n-                // the tokens from this frame.\n-                let frame = &self.token_cursor.frame;\n-                let stream = frame.tree_cursor.stream.clone();\n-                let span = frame.span;\n-                let delim = frame.delim;\n+\n                 // Consume close delimiter\n                 self.bump();\n                 TokenTree::Delimited(span, delim, stream)"}]}