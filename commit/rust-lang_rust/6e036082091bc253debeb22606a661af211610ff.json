{"sha": "6e036082091bc253debeb22606a661af211610ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMDM2MDgyMDkxYmMyNTNkZWJlYjIyNjA2YTY2MWFmMjExNjEwZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-21T04:25:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-21T04:25:26Z"}, "message": "Auto merge of #33030 - nagisa:mir-unrequire-end-block, r=nikomatsakis\n\nMIR: Do not require END_BLOCK to always exist\n\nBasically, all this does, is removing restriction for END_BLOCK to exist past the first invocation of RemoveDeadBlocks pass. This way for functions whose CFG does not reach the `END_BLOCK` end up not containing the block.\n\nAs far as the implementation goes, I\u2019m not entirely satisfied with the `BasicBlock::end_block`. I had hoped to make `new` a `const fn` and then just have a `const END_BLOCK` private to mir::build, but it turns out that constant functions don\u2019t yet support conditionals nor a way to assert.", "tree": {"sha": "81ecef8d15aa1b65669915b82d65b14f80cff4d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ecef8d15aa1b65669915b82d65b14f80cff4d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e036082091bc253debeb22606a661af211610ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e036082091bc253debeb22606a661af211610ff", "html_url": "https://github.com/rust-lang/rust/commit/6e036082091bc253debeb22606a661af211610ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e036082091bc253debeb22606a661af211610ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95545e7adcf1715eff2a31a53fe25ce2b012e62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95545e7adcf1715eff2a31a53fe25ce2b012e62b", "html_url": "https://github.com/rust-lang/rust/commit/95545e7adcf1715eff2a31a53fe25ce2b012e62b"}, {"sha": "d1180afbd99d533802f57f8c1fbf8c2723831ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1180afbd99d533802f57f8c1fbf8c2723831ef2", "html_url": "https://github.com/rust-lang/rust/commit/d1180afbd99d533802f57f8c1fbf8c2723831ef2"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "09383e69553beae1fc5d8fbe2d92ead358352451", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=6e036082091bc253debeb22606a661af211610ff", "patch": "@@ -63,9 +63,6 @@ pub struct Mir<'tcx> {\n /// where execution begins\n pub const START_BLOCK: BasicBlock = BasicBlock(0);\n \n-/// where execution ends, on normal return\n-pub const END_BLOCK: BasicBlock = BasicBlock(1);\n-\n impl<'tcx> Mir<'tcx> {\n     pub fn all_basic_blocks(&self) -> Vec<BasicBlock> {\n         (0..self.basic_blocks.len())\n@@ -322,8 +319,7 @@ pub enum TerminatorKind<'tcx> {\n     Resume,\n \n     /// Indicates a normal return. The ReturnPointer lvalue should\n-    /// have been filled in by now. This should only occur in the\n-    /// `END_BLOCK`.\n+    /// have been filled in by now. This should occur at most once.\n     Return,\n \n     /// Drop the Lvalue"}, {"sha": "fe32f1de0c52053306ee6286d2b188a1432f7adc", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6e036082091bc253debeb22606a661af211610ff", "patch": "@@ -262,7 +262,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     }\n                 };\n                 let extent = this.extent_of_return_scope();\n-                this.exit_scope(expr_span, extent, block, END_BLOCK);\n+                let return_block = this.return_block();\n+                this.exit_scope(expr_span, extent, block, return_block);\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Call { ty, fun, args } => {"}, {"sha": "b1f35541134f051b50b528ff66e6b65871352977", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6e036082091bc253debeb22606a661af211610ff", "patch": "@@ -26,33 +26,35 @@ pub struct Builder<'a, 'tcx: 'a> {\n \n     fn_span: Span,\n \n-    // the current set of scopes, updated as we traverse;\n-    // see the `scope` module for more details\n+    /// the current set of scopes, updated as we traverse;\n+    /// see the `scope` module for more details\n     scopes: Vec<scope::Scope<'tcx>>,\n \n-    // for each scope, a span of blocks that defines it;\n-    // we track these for use in region and borrow checking,\n-    // but these are liable to get out of date once optimization\n-    // begins. They are also hopefully temporary, and will be\n-    // no longer needed when we adopt graph-based regions.\n+    ///  for each scope, a span of blocks that defines it;\n+    ///  we track these for use in region and borrow checking,\n+    ///  but these are liable to get out of date once optimization\n+    ///  begins. They are also hopefully temporary, and will be\n+    ///  no longer needed when we adopt graph-based regions.\n     scope_auxiliary: ScopeAuxiliaryVec,\n \n-    // the current set of loops; see the `scope` module for more\n-    // details\n+    /// the current set of loops; see the `scope` module for more\n+    /// details\n     loop_scopes: Vec<scope::LoopScope>,\n \n-    // the vector of all scopes that we have created thus far;\n-    // we track this for debuginfo later\n+    /// the vector of all scopes that we have created thus far;\n+    /// we track this for debuginfo later\n     scope_datas: Vec<ScopeData>,\n \n     var_decls: Vec<VarDecl<'tcx>>,\n     var_indices: FnvHashMap<ast::NodeId, u32>,\n     temp_decls: Vec<TempDecl<'tcx>>,\n     unit_temp: Option<Lvalue<'tcx>>,\n \n-    // cached block with a RESUME terminator; we create this at the\n-    // first panic\n+    /// cached block with the RESUME terminator; this is created\n+    /// when first set of cleanups are built.\n     cached_resume_block: Option<BasicBlock>,\n+    /// cached block with the RETURN terminator\n+    cached_return_block: Option<BasicBlock>,\n }\n \n struct CFG<'tcx> {\n@@ -182,11 +184,10 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n         var_indices: FnvHashMap(),\n         unit_temp: None,\n         cached_resume_block: None,\n+        cached_return_block: None\n     };\n \n     assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n-    assert_eq!(builder.cfg.start_new_block(), END_BLOCK);\n-\n \n     let mut arg_decls = None; // assigned to `Some` in closures below\n     let call_site_extent =\n@@ -206,12 +207,12 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n             block.unit()\n         }));\n \n+        let return_block = builder.return_block();\n         builder.cfg.terminate(block, call_site_scope_id, span,\n-                              TerminatorKind::Goto { target: END_BLOCK });\n-        builder.cfg.terminate(END_BLOCK, call_site_scope_id, span,\n+                              TerminatorKind::Goto { target: return_block });\n+        builder.cfg.terminate(return_block, call_site_scope_id, span,\n                               TerminatorKind::Return);\n-\n-        END_BLOCK.unit()\n+        return_block.unit()\n     });\n \n     assert!(\n@@ -329,6 +330,17 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n         }\n     }\n+\n+    fn return_block(&mut self) -> BasicBlock {\n+        match self.cached_return_block {\n+            Some(rb) => rb,\n+            None => {\n+                let rb = self.cfg.start_new_block();\n+                self.cached_return_block = Some(rb);\n+                rb\n+            }\n+        }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "2099e9a435a0f607112fc1396bc162b92a491ec5", "filename": "src/librustc_mir/transform/remove_dead_blocks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_dead_blocks.rs?ref=6e036082091bc253debeb22606a661af211610ff", "patch": "@@ -43,9 +43,8 @@ pub struct RemoveDeadBlocks;\n impl<'tcx> MirPass<'tcx> for RemoveDeadBlocks {\n     fn run_pass(&mut self, _: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n         let mut seen = BitVector::new(mir.basic_blocks.len());\n-        // These blocks are always required.\n+        // This block is always required.\n         seen.insert(START_BLOCK.index());\n-        seen.insert(END_BLOCK.index());\n \n         let mut worklist = Vec::with_capacity(4);\n         worklist.push(START_BLOCK);"}, {"sha": "3874ebc91307bd8a0f0957b59dc030a83af28edc", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e036082091bc253debeb22606a661af211610ff/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=6e036082091bc253debeb22606a661af211610ff", "patch": "@@ -164,8 +164,6 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n                   .map(|&bb|{\n                       if bb == mir::START_BLOCK {\n                           fcx.new_block(\"start\", None)\n-                      } else if bb == mir::END_BLOCK {\n-                          fcx.new_block(\"end\", None)\n                       } else {\n                           fcx.new_block(&format!(\"{:?}\", bb), None)\n                       }"}]}