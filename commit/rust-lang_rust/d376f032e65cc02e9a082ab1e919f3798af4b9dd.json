{"sha": "d376f032e65cc02e9a082ab1e919f3798af4b9dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNzZmMDMyZTY1Y2MwMmU5YTA4MmFiMWU5MTlmMzc5OGFmNGI5ZGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-31T17:48:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:16Z"}, "message": "Let several methods take &Resolver instead of a BoxedResolver wrapper", "tree": {"sha": "c050ae424f24137151cd8ee987a802ca76eddc98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c050ae424f24137151cd8ee987a802ca76eddc98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d376f032e65cc02e9a082ab1e919f3798af4b9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d376f032e65cc02e9a082ab1e919f3798af4b9dd", "html_url": "https://github.com/rust-lang/rust/commit/d376f032e65cc02e9a082ab1e919f3798af4b9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d376f032e65cc02e9a082ab1e919f3798af4b9dd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4d8e2cabe646bc5cfa89bb58804c47f8d6d3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4d8e2cabe646bc5cfa89bb58804c47f8d6d3af", "html_url": "https://github.com/rust-lang/rust/commit/db4d8e2cabe646bc5cfa89bb58804c47f8d6d3af"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "79b318a4d34df50f44fdeaa6ab8e4f1a33de2e1b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d376f032e65cc02e9a082ab1e919f3798af4b9dd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d376f032e65cc02e9a082ab1e919f3798af4b9dd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=d376f032e65cc02e9a082ab1e919f3798af4b9dd", "patch": "@@ -7,7 +7,6 @@ use rustc_ast::{self as ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n-use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{par_iter, Lrc, OnceCell, ParallelIterator, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorReported, PResult};\n@@ -346,7 +345,7 @@ fn pre_expansion_lint(\n \n fn configure_and_expand_inner<'a>(\n     sess: &'a Session,\n-    lint_store: &'a LintStore,\n+    lint_store: &LintStore,\n     mut krate: ast::Crate,\n     crate_name: &str,\n     resolver_arenas: &'a ResolverArenas<'a>,\n@@ -669,7 +668,7 @@ fn escape_dep_env(symbol: Symbol) -> String {\n \n fn write_out_deps(\n     sess: &Session,\n-    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n+    resolver: &Resolver<'_>,\n     outputs: &OutputFilenames,\n     out_filenames: &[PathBuf],\n ) {\n@@ -696,20 +695,18 @@ fn write_out_deps(\n         }\n \n         if sess.binary_dep_depinfo() {\n-            boxed_resolver.borrow().borrow_mut().access(|resolver| {\n-                for cnum in resolver.cstore().crates_untracked() {\n-                    let source = resolver.cstore().crate_source_untracked(cnum);\n-                    if let Some((path, _)) = source.dylib {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n-                    if let Some((path, _)) = source.rlib {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n-                    if let Some((path, _)) = source.rmeta {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n+            for cnum in resolver.cstore().crates_untracked() {\n+                let source = resolver.cstore().crate_source_untracked(cnum);\n+                if let Some((path, _)) = source.dylib {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n                 }\n-            });\n+                if let Some((path, _)) = source.rlib {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n+                }\n+                if let Some((path, _)) = source.rmeta {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n+                }\n+            }\n         }\n \n         let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n@@ -765,7 +762,7 @@ pub fn prepare_outputs(\n     sess: &Session,\n     compiler: &Compiler,\n     krate: &ast::Crate,\n-    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n+    resolver: &Resolver<'_>,\n     crate_name: &str,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n@@ -805,7 +802,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    write_out_deps(sess, boxed_resolver, &outputs, &output_paths);\n+    write_out_deps(sess, resolver, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}, {"sha": "cc9c30986e91739e900c27fc21a227c30149cb68", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d376f032e65cc02e9a082ab1e919f3798af4b9dd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d376f032e65cc02e9a082ab1e919f3798af4b9dd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=d376f032e65cc02e9a082ab1e919f3798af4b9dd", "patch": "@@ -246,13 +246,20 @@ impl<'tcx> Queries<'tcx> {\n             let expansion_result = self.expansion()?;\n             let (krate, boxed_resolver, _) = &*expansion_result.peek();\n             let crate_name = self.crate_name()?.peek();\n-            passes::prepare_outputs(\n-                self.session(),\n-                self.compiler,\n-                &krate,\n-                &boxed_resolver,\n-                &crate_name,\n-            )\n+\n+            // These borrow(), borrow_mut() and access() calls are separate statements to prevent a\n+            // \"temporary value dropped while borrowed\" error.\n+            let boxed_resolver = boxed_resolver.borrow();\n+            let mut boxed_resolver = boxed_resolver.borrow_mut();\n+            boxed_resolver.access(|resolver| {\n+                passes::prepare_outputs(\n+                    self.session(),\n+                    self.compiler,\n+                    &krate,\n+                    resolver,\n+                    &crate_name,\n+                )\n+            })\n         })\n     }\n "}]}