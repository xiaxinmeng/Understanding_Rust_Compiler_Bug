{"sha": "95f35fe443afd8a0437390973fbd206db9fd7fd4", "node_id": "C_kwDOAAsO6NoAKDk1ZjM1ZmU0NDNhZmQ4YTA0MzczOTA5NzNmYmQyMDZkYjlmZDdmZDQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-06T23:53:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-16T03:39:59Z"}, "message": "Deny some late-bound ty/ct in some positions, add tests", "tree": {"sha": "c54c7184cbc6faf039fb0f28a13509a6addbb1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c54c7184cbc6faf039fb0f28a13509a6addbb1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f35fe443afd8a0437390973fbd206db9fd7fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f35fe443afd8a0437390973fbd206db9fd7fd4", "html_url": "https://github.com/rust-lang/rust/commit/95f35fe443afd8a0437390973fbd206db9fd7fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f35fe443afd8a0437390973fbd206db9fd7fd4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915703ca7a98439061f8e1514c3c4d026a15ad98", "url": "https://api.github.com/repos/rust-lang/rust/commits/915703ca7a98439061f8e1514c3c4d026a15ad98", "html_url": "https://github.com/rust-lang/rust/commit/915703ca7a98439061f8e1514c3c4d026a15ad98"}], "stats": {"total": 209, "additions": 205, "deletions": 4}, "files": [{"sha": "b3f6649a5ae5199d3292efe2382d2950f4f1b85a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -2883,22 +2883,45 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::BareFn(bf) => {\n                 require_c_abi_if_c_variadic(tcx, bf.decl, bf.abi, ast_ty.span);\n \n-                tcx.mk_fn_ptr(self.ty_of_fn(\n+                let fn_ptr_ty = tcx.mk_fn_ptr(self.ty_of_fn(\n                     ast_ty.hir_id,\n                     bf.unsafety,\n                     bf.abi,\n                     bf.decl,\n                     None,\n                     Some(ast_ty),\n-                ))\n+                ));\n+\n+                if let Some(guar) =\n+                    deny_non_region_late_bound(tcx, bf.generic_params, \"function pointer\")\n+                {\n+                    tcx.ty_error_with_guaranteed(guar)\n+                } else {\n+                    fn_ptr_ty\n+                }\n             }\n             hir::TyKind::TraitObject(bounds, lifetime, repr) => {\n                 self.maybe_lint_bare_trait(ast_ty, in_path);\n                 let repr = match repr {\n                     TraitObjectSyntax::Dyn | TraitObjectSyntax::None => ty::Dyn,\n                     TraitObjectSyntax::DynStar => ty::DynStar,\n                 };\n-                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed, repr)\n+\n+                let object_ty = self.conv_object_ty_poly_trait_ref(\n+                    ast_ty.span,\n+                    bounds,\n+                    lifetime,\n+                    borrowed,\n+                    repr,\n+                );\n+\n+                if let Some(guar) = bounds.iter().find_map(|trait_ref| {\n+                    deny_non_region_late_bound(tcx, trait_ref.bound_generic_params, \"trait object\")\n+                }) {\n+                    tcx.ty_error_with_guaranteed(guar)\n+                } else {\n+                    object_ty\n+                }\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(maybe_qself, path)) => {\n                 debug!(?maybe_qself, ?path);\n@@ -3359,3 +3382,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n }\n+\n+fn deny_non_region_late_bound(\n+    tcx: TyCtxt<'_>,\n+    params: &[hir::GenericParam<'_>],\n+    where_: &str,\n+) -> Option<ErrorGuaranteed> {\n+    params.iter().find_map(|bad_param| {\n+        let what = match bad_param.kind {\n+            hir::GenericParamKind::Type { .. } => \"type\",\n+            hir::GenericParamKind::Const { .. } => \"const\",\n+            hir::GenericParamKind::Lifetime { .. } => return None,\n+        };\n+\n+        let mut diag = tcx.sess.struct_span_err(\n+            bad_param.span,\n+            format!(\"late-bound {what} parameter not allowed on {where_} types\"),\n+        );\n+\n+        Some(if tcx.features().non_lifetime_binders { diag.emit() } else { diag.delay_as_bug() })\n+    })\n+}"}, {"sha": "0a0c94e1dfb6a132f68e4691e4b688c783103d73", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -270,10 +270,11 @@ where\n             | ty::Ref(..)\n             | ty::FnPtr(..)\n             | ty::Param(..)\n+            | ty::Bound(..)\n             | ty::Error(_)\n             | ty::GeneratorWitness(..)\n             | ty::GeneratorWitnessMIR(..) => {}\n-            ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {\n+            ty::Placeholder(..) | ty::Infer(..) => {\n                 bug!(\"unexpected type: {:?}\", ty)\n             }\n         }"}, {"sha": "a797aae65dba24335d5f7bd406f0cd0ead76d049", "filename": "tests/ui/traits/non_lifetime_binders/basic.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.rs?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// Basic test that show's we can succesfully typeck a `for<T>` where clause.\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Trait {}\n+\n+impl<T: ?Sized> Trait for T {}\n+\n+fn foo()\n+where\n+    for<T> T: Trait,\n+{\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "fddc5d9fc2548bd2306849b43a6ee7e8b1bbdfa8", "filename": "tests/ui/traits/non_lifetime_binders/basic.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbasic.stderr?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:4:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "460f68907e889c344f6d463bd67c8a3365f9208a", "filename": "tests/ui/traits/non_lifetime_binders/fail.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.rs?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,23 @@\n+// Error reporting for where `for<T> T: Trait` doesn't hold\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Trait {}\n+\n+fn fail()\n+where\n+    for<T> T: Trait,\n+{}\n+\n+fn auto_trait()\n+where\n+    for<T> T: Send,\n+{}\n+\n+fn main() {\n+    fail();\n+    //~^ ERROR the trait bound `T: Trait` is not satisfied\n+    auto_trait();\n+    //~^ ERROR `T` cannot be sent between threads safely\n+}"}, {"sha": "ba5953193a47bed948a457aa897ba7a135f89daf", "filename": "tests/ui/traits/non_lifetime_binders/fail.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,43 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/fail.rs:3:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/fail.rs:19:5\n+   |\n+LL |     fail();\n+   |     ^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+note: required by a bound in `fail`\n+  --> $DIR/fail.rs:10:15\n+   |\n+LL | fn fail()\n+   |    ---- required by a bound in this\n+LL | where\n+LL |     for<T> T: Trait,\n+   |               ^^^^^ required by this bound in `fail`\n+\n+error[E0277]: `T` cannot be sent between threads safely\n+  --> $DIR/fail.rs:21:5\n+   |\n+LL |     auto_trait();\n+   |     ^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |\n+   = help: the trait `Send` is not implemented for `T`\n+note: required by a bound in `auto_trait`\n+  --> $DIR/fail.rs:15:15\n+   |\n+LL | fn auto_trait()\n+   |    ---------- required by a bound in this\n+LL | where\n+LL |     for<T> T: Send,\n+   |               ^^^^ required by this bound in `auto_trait`\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8fb7dd27605f931492beff78ec15f9fdf3d01a8f", "filename": "tests/ui/traits/non_lifetime_binders/on-dyn.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.rs?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,13 @@\n+// Tests to make sure that we reject polymorphic dyn trait.\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Test<T> {}\n+\n+fn foo() -> &'static dyn for<T> Test<T> {\n+    //~^ ERROR late-bound type parameter not allowed on trait object types\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "44071107de4119aa2f5115a4e9589b4af1faa7b2", "filename": "tests/ui/traits/non_lifetime_binders/on-dyn.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-dyn.stderr?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/on-dyn.rs:3:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound type parameter not allowed on trait object types\n+  --> $DIR/on-dyn.rs:8:30\n+   |\n+LL | fn foo() -> &'static dyn for<T> Test<T> {\n+   |                              ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "0aaff52b6d8cda6eb4af0905844401c848da21b0", "filename": "tests/ui/traits/non_lifetime_binders/on-ptr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.rs?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,13 @@\n+// Tests to make sure that we reject polymorphic fn ptrs.\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn foo() -> for<T> fn(T) {\n+    //~^ ERROR late-bound type parameter not allowed on function pointer types\n+    todo!()\n+}\n+\n+fn main() {\n+    foo()(1i32);\n+}"}, {"sha": "bb7dccaf07d5f0f001deebc3440f8d9a1be6cd6d", "filename": "tests/ui/traits/non_lifetime_binders/on-ptr.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95f35fe443afd8a0437390973fbd206db9fd7fd4/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fon-ptr.stderr?ref=95f35fe443afd8a0437390973fbd206db9fd7fd4", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/on-ptr.rs:3:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound type parameter not allowed on function pointer types\n+  --> $DIR/on-ptr.rs:6:17\n+   |\n+LL | fn foo() -> for<T> fn(T) {\n+   |                 ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}