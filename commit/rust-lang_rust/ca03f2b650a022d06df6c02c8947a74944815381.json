{"sha": "ca03f2b650a022d06df6c02c8947a74944815381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMDNmMmI2NTBhMDIyZDA2ZGY2YzAyYzg5NDdhNzQ5NDQ4MTUzODE=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-07-27T06:21:11Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-07-27T06:21:11Z"}, "message": "s/pord/partial_ord/ to fix dogfood failure", "tree": {"sha": "8e2f3ce314524273e4f8d4b51819f5fdba513478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2f3ce314524273e4f8d4b51819f5fdba513478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca03f2b650a022d06df6c02c8947a74944815381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca03f2b650a022d06df6c02c8947a74944815381", "html_url": "https://github.com/rust-lang/rust/commit/ca03f2b650a022d06df6c02c8947a74944815381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca03f2b650a022d06df6c02c8947a74944815381/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668b7474b47791c8c9af10130356b681b3bf3a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/668b7474b47791c8c9af10130356b681b3bf3a84", "html_url": "https://github.com/rust-lang/rust/commit/668b7474b47791c8c9af10130356b681b3bf3a84"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "820ce85cff2874c920e7d46c0a86dc5673668d71", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca03f2b650a022d06df6c02c8947a74944815381/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca03f2b650a022d06df6c02c8947a74944815381/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=ca03f2b650a022d06df6c02c8947a74944815381", "patch": "@@ -173,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n-            check_ord_pord(cx, item.span, trait_ref, ty, is_automatically_derived);\n+            check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);\n \n             if is_automatically_derived {\n                 check_unsafe_derive_deserialize(cx, item, trait_ref, ty);\n@@ -239,7 +239,7 @@ fn check_hash_peq<'tcx>(\n }\n \n /// Implementation of the `DERIVE_ORD_XOR_PARTIAL_ORD` lint.\n-fn check_ord_pord<'tcx>(\n+fn check_ord_partial_ord<'tcx>(\n     cx: &LateContext<'tcx>,\n     span: Span,\n     trait_ref: &TraitRef<'_>,\n@@ -248,15 +248,15 @@ fn check_ord_pord<'tcx>(\n ) {\n     if_chain! {\n         if let Some(ord_trait_def_id) = get_trait_def_id(cx, &paths::ORD);\n-        if let Some(pord_trait_def_id) = cx.tcx.lang_items().partial_ord_trait();\n+        if let Some(partial_ord_trait_def_id) = cx.tcx.lang_items().partial_ord_trait();\n         if let Some(def_id) = &trait_ref.trait_def_id();\n         if *def_id == ord_trait_def_id;\n         then {\n             // Look for the PartialOrd implementations for `ty`\n-            cx.tcx.for_each_relevant_impl(pord_trait_def_id, ty, |impl_id| {\n-                let pord_is_automatically_derived = is_automatically_derived(&cx.tcx.get_attrs(impl_id));\n+            cx.tcx.for_each_relevant_impl(partial_ord_trait_def_id, ty, |impl_id| {\n+                let partial_ord_is_automatically_derived = is_automatically_derived(&cx.tcx.get_attrs(impl_id));\n \n-                if pord_is_automatically_derived == ord_is_automatically_derived {\n+                if partial_ord_is_automatically_derived == ord_is_automatically_derived {\n                     return;\n                 }\n \n@@ -265,7 +265,7 @@ fn check_ord_pord<'tcx>(\n                 // Only care about `impl PartialOrd<Foo> for Foo`\n                 // For `impl PartialOrd<B> for A, input_types is [A, B]\n                 if trait_ref.substs.type_at(1) == ty {\n-                    let mess = if pord_is_automatically_derived {\n+                    let mess = if partial_ord_is_automatically_derived {\n                         \"you are implementing `Ord` explicitly but have derived `PartialOrd`\"\n                     } else {\n                         \"you are deriving `Ord` but have implemented `PartialOrd` explicitly\""}]}