{"sha": "a709cc1f3254d5f23613b436544dc22fb927a081", "node_id": "C_kwDOAAsO6NoAKGE3MDljYzFmMzI1NGQ1ZjIzNjEzYjQzNjU0NGRjMjJmYjkyN2EwODE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-09T20:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T20:39:06Z"}, "message": "Rollup merge of #104156 - oli-obk:autoderef, r=estebank\n\nCleanups in autoderef impl\n\nJust something I noticed. Turns out the `overloaded_span` is not actually used separately from the main span, so I merged them.", "tree": {"sha": "d60a9996d76f5c434dc1603ab249c38196cea9e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d60a9996d76f5c434dc1603ab249c38196cea9e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a709cc1f3254d5f23613b436544dc22fb927a081", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbA/qCRBK7hj4Ov3rIwAATfYIAD1GuXnYuddrM/nJgSWIPRJU\noOiYpvR3iH5ZVVoDyEqs+ke08Mug1fLp/4zvmAslXt7Om0qelwhdPIer8amFYTYf\nWx/fWimEd2qhW9/8Y+hALtIsYUzeXJiyDW1iqJlyYFvmdBGLvojWgaiMw67Vxn0H\ndfYSJYOx6MQ4kXmqEJjLiLmiBX8D0p4lrsho66JG6cZBVwLi9zSxbA81SU0Yrzp3\nNoMUyREeURyc5e0TIstBdPvz5xURorv7I6yBGbIEL0lPPp5TNC85KkflsUe9KfPz\n1g586nWauwIcWi7yw6djOgWNDXzUy4TmuwzYMLEr1yCjkdLwpB/KvAdFBFM1hcM=\n=oUh+\n-----END PGP SIGNATURE-----\n", "payload": "tree d60a9996d76f5c434dc1603ab249c38196cea9e0\nparent bfd637a3cf85b80453db4a6e39802163b07319f7\nparent b745a29fa51b59642f3883bc80ca1d502532757e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668026346 -0500\ncommitter GitHub <noreply@github.com> 1668026346 -0500\n\nRollup merge of #104156 - oli-obk:autoderef, r=estebank\n\nCleanups in autoderef impl\n\nJust something I noticed. Turns out the `overloaded_span` is not actually used separately from the main span, so I merged them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a709cc1f3254d5f23613b436544dc22fb927a081", "html_url": "https://github.com/rust-lang/rust/commit/a709cc1f3254d5f23613b436544dc22fb927a081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a709cc1f3254d5f23613b436544dc22fb927a081/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd637a3cf85b80453db4a6e39802163b07319f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd637a3cf85b80453db4a6e39802163b07319f7", "html_url": "https://github.com/rust-lang/rust/commit/bfd637a3cf85b80453db4a6e39802163b07319f7"}, {"sha": "b745a29fa51b59642f3883bc80ca1d502532757e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b745a29fa51b59642f3883bc80ca1d502532757e", "html_url": "https://github.com/rust-lang/rust/commit/b745a29fa51b59642f3883bc80ca1d502532757e"}], "stats": {"total": 43, "additions": 8, "deletions": 35}, "files": [{"sha": "8a70f41c8a840e0576a9e35232fa0a1511fccf84", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -1708,8 +1708,7 @@ fn receiver_is_valid<'tcx>(\n         return true;\n     }\n \n-    let mut autoderef =\n-        Autoderef::new(infcx, wfcx.param_env, wfcx.body_id, span, receiver_ty, span);\n+    let mut autoderef = Autoderef::new(infcx, wfcx.param_env, wfcx.body_id, span, receiver_ty);\n \n     // The `arbitrary_self_types` feature allows raw pointer receivers like `self: *const Self`.\n     if arbitrary_self_types_enabled {"}, {"sha": "41b52a4c4a9fcb2901c2f26a1562e65faae1a7b3", "filename": "compiler/rustc_hir_typeck/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -12,18 +12,7 @@ use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn autoderef(&'a self, span: Span, base_ty: Ty<'tcx>) -> Autoderef<'a, 'tcx> {\n-        Autoderef::new(self, self.param_env, self.body_id, span, base_ty, span)\n-    }\n-\n-    /// Like `autoderef`, but provides a custom `Span` to use for calls to\n-    /// an overloaded `Deref` operator\n-    pub fn autoderef_overloaded_span(\n-        &'a self,\n-        span: Span,\n-        base_ty: Ty<'tcx>,\n-        overloaded_span: Span,\n-    ) -> Autoderef<'a, 'tcx> {\n-        Autoderef::new(self, self.param_env, self.body_id, span, base_ty, overloaded_span)\n+        Autoderef::new(self, self.param_env, self.body_id, span, base_ty)\n     }\n \n     pub fn try_overloaded_deref(\n@@ -55,11 +44,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         |InferOk { value: method, obligations: o }| {\n                             obligations.extend(o);\n                             if let ty::Ref(region, _, mutbl) = *method.sig.output().kind() {\n-                                Some(OverloadedDeref {\n-                                    region,\n-                                    mutbl,\n-                                    span: autoderef.overloaded_span(),\n-                                })\n+                                Some(OverloadedDeref { region, mutbl, span: autoderef.span() })\n                             } else {\n                                 None\n                             }"}, {"sha": "d996d6ec610bae81c64789c6f9d8d676f1c309ed", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -151,8 +151,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         // Commit the autoderefs by calling `autoderef` again, but this\n         // time writing the results into the various typeck results.\n-        let mut autoderef =\n-            self.autoderef_overloaded_span(self.span, unadjusted_self_ty, self.call_expr.span);\n+        let mut autoderef = self.autoderef(self.call_expr.span, unadjusted_self_ty);\n         let Some((ty, n)) = autoderef.nth(pick.autoderefs) else {\n             return self.tcx.ty_error_with_message(\n                 rustc_span::DUMMY_SP,"}, {"sha": "3fcd073f5979300fd1d50713b2f196c4c5c797ad", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -475,10 +475,9 @@ fn method_autoderef_steps<'tcx>(\n     let (ref infcx, goal, inference_vars) = tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &goal);\n     let ParamEnvAnd { param_env, value: self_ty } = goal;\n \n-    let mut autoderef =\n-        Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty, DUMMY_SP)\n-            .include_raw_pointers()\n-            .silence_errors();\n+    let mut autoderef = Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty)\n+        .include_raw_pointers()\n+        .silence_errors();\n     let mut reached_raw_pointer = false;\n     let mut steps: Vec<_> = autoderef\n         .by_ref()"}, {"sha": "eb10f3e2c107f8f943b9d17c30cd8238b5fc9d8f", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -19,7 +19,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, DUMMY_SP};\n-use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;\n \n@@ -2132,7 +2131,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let ty::Array(..) | ty::Slice(..) = ty.kind()\n         {\n             err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n-        } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n+        } else if self.autoderef(span, expected_ty)\n             .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n             && let (Some(span), true) = (ti.span, ti.origin_expr)\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)"}, {"sha": "46ee2f35976a7be6dedee04590aa4fd7e4325d89", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -27,7 +27,6 @@ pub struct Autoderef<'a, 'tcx> {\n     // Meta infos:\n     infcx: &'a InferCtxt<'tcx>,\n     span: Span,\n-    overloaded_span: Span,\n     body_id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n \n@@ -99,12 +98,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         body_id: hir::HirId,\n         span: Span,\n         base_ty: Ty<'tcx>,\n-        overloaded_span: Span,\n     ) -> Autoderef<'a, 'tcx> {\n         Autoderef {\n             infcx,\n             span,\n-            overloaded_span,\n             body_id,\n             param_env,\n             state: AutoderefSnapshot {\n@@ -193,10 +190,6 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         self.span\n     }\n \n-    pub fn overloaded_span(&self) -> Span {\n-        self.overloaded_span\n-    }\n-\n     pub fn reached_recursion_limit(&self) -> bool {\n         self.state.reached_recursion_limit\n     }"}, {"sha": "aece4ab7922851adfab1fec2fe7f40fb61374421", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709cc1f3254d5f23613b436544dc22fb927a081/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a709cc1f3254d5f23613b436544dc22fb927a081", "patch": "@@ -714,7 +714,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     obligation.cause.body_id,\n                     span,\n                     base_ty,\n-                    span,\n                 );\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`"}]}