{"sha": "88be6f32172813f53dae60d73c9f5deb0c3fb29f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YmU2ZjMyMTcyODEzZjUzZGFlNjBkNzNjOWY1ZGViMGMzZmIyOWY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-14T17:26:07Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-14T17:26:07Z"}, "message": "Merge #1137\n\n1137: Adds support for multiple editor workspaces on initialization r=matklad a=jrvidal\n\nOK, so this \"simple hack\" turned out to be way more contrived than I expected :joy:\r\n\r\n### What works\r\nThis patch only handles multi-folder editor workspaces _on initialization_.\r\n  * I've found that modifying the layout of a workspace in VSCode just reloads the extension, so this hack should be enough for now.\r\n  * Not sure about how emacs-lsp behaves, but we fallback gracefully to the mono-folder workspace, so it should be fine.\r\n\r\n### What doesn't work\r\n* [x] `cargo watch` can only watch a single root folder with a `Cargo.toml`. I've left this part untouched but we could either warn that it's not supported or launch _multiple_ `cargo-watch` processes.\r\n* [x] The `rust-analyzer/runnables` command is not functional, since we don't send the correct `cwd`.\r\n* [x] Should we add some happy path test to `heavy_tests`?\r\n* [ ] Going from a single `root` to multiple `roots` leaves us with a couple of `n * m` loops that smell a bit. The number of folders in the editor workspace is probably low though.\n\nCo-authored-by: Roberto Vidal <vidal.roberto.j@gmail.com>", "tree": {"sha": "0b5f8f793929f651dfe332e0f5545b938ff5189f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b5f8f793929f651dfe332e0f5545b938ff5189f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88be6f32172813f53dae60d73c9f5deb0c3fb29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88be6f32172813f53dae60d73c9f5deb0c3fb29f", "html_url": "https://github.com/rust-lang/rust/commit/88be6f32172813f53dae60d73c9f5deb0c3fb29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88be6f32172813f53dae60d73c9f5deb0c3fb29f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5d35f284f5ac70cde5d758e7c63a38eae0fb0b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d35f284f5ac70cde5d758e7c63a38eae0fb0b55", "html_url": "https://github.com/rust-lang/rust/commit/5d35f284f5ac70cde5d758e7c63a38eae0fb0b55"}, {"sha": "c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5", "html_url": "https://github.com/rust-lang/rust/commit/c2dfc8a229c0a18dff08d5ce7e6836c91648eee5"}], "stats": {"total": 207, "additions": 144, "deletions": 63}, "files": [{"sha": "82f52a6e8b06a9f0bc1ea47779ee5eb44d301052", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -40,12 +40,23 @@ fn main_inner() -> Result<()> {\n     run_server(ra_lsp_server::server_capabilities(), receiver, sender, |params, r, s| {\n         let root = params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n \n+        let workspace_roots = params\n+            .workspace_folders\n+            .map(|workspaces| {\n+                workspaces\n+                    .into_iter()\n+                    .filter_map(|it| it.uri.to_file_path().ok())\n+                    .collect::<Vec<_>>()\n+            })\n+            .filter(|workspaces| !workspaces.is_empty())\n+            .unwrap_or_else(|| vec![root]);\n+\n         let opts = params\n             .initialization_options\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n             .unwrap_or(InitializationOptions::default());\n \n-        ra_lsp_server::main_loop(root, opts, r, s)\n+        ra_lsp_server::main_loop(workspace_roots, opts, r, s)\n     })?;\n     log::info!(\"shutting down IO...\");\n     threads.join()?;"}, {"sha": "07ac4917a292ae92a682a4eabeef43ab30f15262", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -48,7 +48,7 @@ enum Task {\n const THREADPOOL_SIZE: usize = 8;\n \n pub fn main_loop(\n-    ws_root: PathBuf,\n+    ws_roots: Vec<PathBuf>,\n     options: InitializationOptions,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n@@ -59,23 +59,26 @@ pub fn main_loop(\n     // FIXME: support dynamic workspace loading.\n     let workspaces = {\n         let ws_worker = workspace_loader();\n-        ws_worker.sender().send(ws_root.clone()).unwrap();\n-        match ws_worker.receiver().recv().unwrap() {\n-            Ok(ws) => vec![ws],\n-            Err(e) => {\n-                log::error!(\"loading workspace failed: {}\", e);\n-\n-                show_message(\n-                    req::MessageType::Error,\n-                    format!(\"rust-analyzer failed to load workspace: {}\", e),\n-                    msg_sender,\n-                );\n-                Vec::new()\n+        let mut loaded_workspaces = Vec::new();\n+        for ws_root in &ws_roots {\n+            ws_worker.sender().send(ws_root.clone()).unwrap();\n+            match ws_worker.receiver().recv().unwrap() {\n+                Ok(ws) => loaded_workspaces.push(ws),\n+                Err(e) => {\n+                    log::error!(\"loading workspace failed: {}\", e);\n+\n+                    show_message(\n+                        req::MessageType::Error,\n+                        format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                        msg_sender,\n+                    );\n+                }\n             }\n         }\n+        loaded_workspaces\n     };\n \n-    let mut state = ServerWorldState::new(ws_root.clone(), workspaces);\n+    let mut state = ServerWorldState::new(ws_roots, workspaces);\n \n     log::info!(\"server initialized, serving requests\");\n "}, {"sha": "41d1f759f5ec66afd3a0e12d59e391b73adbad3b", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -263,6 +263,7 @@ pub fn handle_runnables(\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.map(|it| it.conv_with(&line_index));\n     let mut res = Vec::new();\n+    let workspace_root = world.workspace_root_for(file_id);\n     for runnable in world.analysis().runnables(file_id)? {\n         if let Some(offset) = offset {\n             if !runnable.range.contains_inclusive(offset) {\n@@ -287,6 +288,7 @@ pub fn handle_runnables(\n                 m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n                 m\n             },\n+            cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n         };\n         res.push(r);\n     }\n@@ -309,6 +311,7 @@ pub fn handle_runnables(\n         bin: \"cargo\".to_string(),\n         args: check_args,\n         env: FxHashMap::default(),\n+        cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n     });\n     Ok(res)\n }\n@@ -627,6 +630,7 @@ pub fn handle_code_lens(\n     let line_index = world.analysis().file_line_index(file_id);\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n+    let workspace_root = world.workspace_root_for(file_id);\n \n     // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n@@ -647,6 +651,7 @@ pub fn handle_code_lens(\n                 bin: \"cargo\".into(),\n                 args,\n                 env: Default::default(),\n+                cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n             };\n \n             let lens = CodeLens {"}, {"sha": "4f35ab9b5a10af5a7ae06ad2cbcb6b321065e26f", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -163,6 +163,7 @@ pub struct Runnable {\n     pub bin: String,\n     pub args: Vec<String>,\n     pub env: FxHashMap<String, String>,\n+    pub cwd: Option<String>,\n }\n \n #[derive(Serialize, Debug)]"}, {"sha": "b2808b8175bd4a3cfe0b90ed9918a86b68105b98", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -1,5 +1,5 @@\n use std::{\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n     sync::Arc,\n };\n \n@@ -24,7 +24,7 @@ use crate::{\n #[derive(Debug)]\n pub struct ServerWorldState {\n     pub roots_to_scan: usize,\n-    pub root: PathBuf,\n+    pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n@@ -37,19 +37,20 @@ pub struct ServerWorld {\n }\n \n impl ServerWorldState {\n-    pub fn new(root: PathBuf, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n+    pub fn new(folder_roots: Vec<PathBuf>, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n-        roots.push(IncludeRustFiles::member(root.clone()));\n+        roots.extend(folder_roots.iter().cloned().map(IncludeRustFiles::member));\n         for ws in workspaces.iter() {\n             roots.extend(IncludeRustFiles::from_roots(ws.to_roots()));\n         }\n \n-        let (mut vfs, roots) = Vfs::new(roots);\n-        let roots_to_scan = roots.len();\n-        for r in roots {\n-            let is_local = vfs.root2path(r).starts_with(&root);\n+        let (mut vfs, vfs_roots) = Vfs::new(roots);\n+        let roots_to_scan = vfs_roots.len();\n+        for r in vfs_roots {\n+            let vfs_root_path = vfs.root2path(r);\n+            let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0.into()), is_local);\n         }\n \n@@ -68,7 +69,7 @@ impl ServerWorldState {\n         analysis_host.apply_change(change);\n         ServerWorldState {\n             roots_to_scan,\n-            root,\n+            roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n             vfs: Arc::new(RwLock::new(vfs)),\n@@ -90,7 +91,8 @@ impl ServerWorldState {\n             match c {\n                 VfsChange::AddRoot { root, files } => {\n                     let root_path = self.vfs.read().root2path(root);\n-                    if root_path.starts_with(&self.root) {\n+                    let is_local = self.roots.iter().any(|r| root_path.starts_with(r));\n+                    if is_local {\n                         self.roots_to_scan -= 1;\n                         for (file, path, text) in files {\n                             change.add_file(\n@@ -193,4 +195,9 @@ impl ServerWorld {\n         res.push_str(&self.analysis.status());\n         res\n     }\n+\n+    pub fn workspace_root_for(&self, file_id: FileId) -> Option<&Path> {\n+        let path = self.vfs.read().file2path(VfsFile(file_id.0.into()));\n+        self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n+    }\n }"}, {"sha": "6f37a980db673b53e404c2c6aaba68442b9216ad", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -14,7 +14,7 @@ use ra_lsp_server::req::{\n use serde_json::json;\n use tempfile::TempDir;\n \n-use crate::support::{project, project_with_tmpdir};\n+use crate::support::{project, Project};\n \n const LOG: &'static str = \"\";\n \n@@ -62,6 +62,7 @@ fn foo() {\n             \"args\": [ \"test\", \"--\", \"foo\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n+            \"cwd\": null,\n             \"label\": \"test foo\",\n             \"range\": {\n               \"end\": { \"character\": 1, \"line\": 2 },\n@@ -75,6 +76,7 @@ fn foo() {\n             ],\n             \"bin\": \"cargo\",\n             \"env\": {},\n+            \"cwd\": null,\n             \"label\": \"cargo check --all\",\n             \"range\": {\n               \"end\": {\n@@ -93,25 +95,34 @@ fn foo() {\n \n #[test]\n fn test_runnables_project() {\n-    let server = project(\n-        r#\"\n-//- Cargo.toml\n+    let code = r#\"\n+//- foo/Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- src/lib.rs\n+//- foo/src/lib.rs\n pub fn foo() {}\n \n-//- tests/spam.rs\n+//- foo/tests/spam.rs\n #[test]\n fn test_eggs() {}\n-\"#,\n-    );\n+\n+//- bar/Cargo.toml\n+[package]\n+name = \"bar\"\n+version = \"0.0.0\"\n+\n+//- bar/src/main.rs\n+fn main() {}\n+\"#;\n+\n+    let server = Project::with_fixture(code).root(\"foo\").root(\"bar\").server();\n+\n     server.wait_until_workspace_is_loaded();\n     server.request::<Runnables>(\n         RunnablesParams {\n-            text_document: server.doc_id(\"tests/spam.rs\"),\n+            text_document: server.doc_id(\"foo/tests/spam.rs\"),\n             position: None,\n         },\n         json!([\n@@ -123,7 +134,8 @@ fn test_eggs() {}\n             \"range\": {\n               \"end\": { \"character\": 17, \"line\": 1 },\n               \"start\": { \"character\": 0, \"line\": 0 }\n-            }\n+            },\n+            \"cwd\": server.path().join(\"foo\")\n           },\n           {\n             \"args\": [\n@@ -135,6 +147,7 @@ fn test_eggs() {}\n             ],\n             \"bin\": \"cargo\",\n             \"env\": {},\n+            \"cwd\": server.path().join(\"foo\"),\n             \"label\": \"cargo check -p foo\",\n             \"range\": {\n               \"end\": {\n@@ -283,7 +296,9 @@ fn main() {{}}\n \"#,\n         PROJECT = project.to_string(),\n     );\n-    let server = project_with_tmpdir(tmp_dir, &code);\n+\n+    let server = Project::with_fixture(&code).tmp_dir(tmp_dir).server();\n+\n     server.wait_until_workspace_is_loaded();\n     let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>("}, {"sha": "b0788270026334e750859468256607295f7ff430", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -1,7 +1,7 @@\n use std::{\n     cell::{Cell, RefCell},\n     fs,\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n     sync::Once,\n     time::Duration,\n };\n@@ -26,26 +26,51 @@ use ra_lsp_server::{\n     InitializationOptions,\n };\n \n-pub fn project(fixture: &str) -> Server {\n-    let tmp_dir = TempDir::new().unwrap();\n-    project_with_tmpdir(tmp_dir, fixture)\n+pub struct Project<'a> {\n+    fixture: &'a str,\n+    tmp_dir: Option<TempDir>,\n+    roots: Vec<PathBuf>,\n }\n \n-pub fn project_with_tmpdir(tmp_dir: TempDir, fixture: &str) -> Server {\n-    static INIT: Once = Once::new();\n-    INIT.call_once(|| {\n-        let _ = Logger::with_env_or_str(crate::LOG).start().unwrap();\n-    });\n+impl<'a> Project<'a> {\n+    pub fn with_fixture(fixture: &str) -> Project {\n+        Project { fixture, tmp_dir: None, roots: vec![] }\n+    }\n \n-    let mut paths = vec![];\n+    pub fn tmp_dir(mut self, tmp_dir: TempDir) -> Project<'a> {\n+        self.tmp_dir = Some(tmp_dir);\n+        self\n+    }\n \n-    for entry in parse_fixture(fixture) {\n-        let path = tmp_dir.path().join(entry.meta);\n-        fs::create_dir_all(path.parent().unwrap()).unwrap();\n-        fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n-        paths.push((path, entry.text));\n+    pub fn root(mut self, path: &str) -> Project<'a> {\n+        self.roots.push(path.into());\n+        self\n     }\n-    Server::new(tmp_dir, paths)\n+\n+    pub fn server(self) -> Server {\n+        let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n+        static INIT: Once = Once::new();\n+        INIT.call_once(|| {\n+            let _ = Logger::with_env_or_str(crate::LOG).start().unwrap();\n+        });\n+\n+        let mut paths = vec![];\n+\n+        for entry in parse_fixture(self.fixture) {\n+            let path = tmp_dir.path().join(entry.meta);\n+            fs::create_dir_all(path.parent().unwrap()).unwrap();\n+            fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n+            paths.push((path, entry.text));\n+        }\n+\n+        let roots = self.roots.into_iter().map(|root| tmp_dir.path().join(root)).collect();\n+\n+        Server::new(tmp_dir, roots, paths)\n+    }\n+}\n+\n+pub fn project(fixture: &str) -> Server {\n+    Project::with_fixture(fixture).server()\n }\n \n pub struct Server {\n@@ -56,14 +81,17 @@ pub struct Server {\n }\n \n impl Server {\n-    fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n+    fn new(dir: TempDir, roots: Vec<PathBuf>, files: Vec<(PathBuf, String)>) -> Server {\n         let path = dir.path().to_path_buf();\n+\n+        let roots = if roots.is_empty() { vec![path] } else { roots };\n+\n         let worker = Worker::<RawMessage, RawMessage>::spawn(\n             \"test server\",\n             128,\n             move |mut msg_receiver, mut msg_sender| {\n                 main_loop(\n-                    path,\n+                    roots,\n                     InitializationOptions::default(),\n                     &mut msg_receiver,\n                     &mut msg_sender,\n@@ -177,6 +205,10 @@ impl Server {\n     fn send_notification(&self, not: RawNotification) {\n         self.worker.as_ref().unwrap().sender().send(RawMessage::Notification(not)).unwrap();\n     }\n+\n+    pub fn path(&self) -> &Path {\n+        self.dir.path()\n+    }\n }\n \n impl Drop for Server {"}, {"sha": "71976071fe5a50088e611423e317ddcf9b51ae19", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -19,6 +19,7 @@ use crate::Result;\n pub struct CargoWorkspace {\n     packages: Arena<Package, PackageData>,\n     targets: Arena<Target, TargetData>,\n+    pub(crate) workspace_root: PathBuf,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -165,7 +166,7 @@ impl CargoWorkspace {\n             }\n         }\n \n-        Ok(CargoWorkspace { packages, targets })\n+        Ok(CargoWorkspace { packages, targets, workspace_root: meta.workspace_root })\n     }\n \n     pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + 'a {"}, {"sha": "63eb7041e18ac1b16e5c8c990df70642844d3644", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -255,6 +255,18 @@ impl ProjectWorkspace {\n         }\n         crate_graph\n     }\n+\n+    pub fn workspace_root_for(&self, path: &Path) -> Option<&Path> {\n+        match self {\n+            ProjectWorkspace::Cargo { cargo, .. } => {\n+                Some(cargo.workspace_root.as_ref()).filter(|root| path.starts_with(root))\n+            }\n+            ProjectWorkspace::Json { project: JsonProject { roots, .. } } => roots\n+                .iter()\n+                .find(|root| path.starts_with(&root.path))\n+                .map(|root| root.path.as_ref()),\n+        }\n+    }\n }\n \n fn find_rust_project_json(path: &Path) -> Option<PathBuf> {"}, {"sha": "c4df24c79f673098a2a4a9a5f2335114beee662f", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -17,6 +17,7 @@ interface Runnable {\n     bin: string;\n     args: string[];\n     env: { [index: string]: string };\n+    cwd?: string;\n }\n \n class RunnableQuickPick implements vscode.QuickPickItem {\n@@ -49,7 +50,7 @@ function createTask(spec: Runnable): vscode.Task {\n     };\n \n     const execOption: vscode.ShellExecutionOptions = {\n-        cwd: '.',\n+        cwd: spec.cwd || '.',\n         env: definition.env\n     };\n     const exec = new vscode.ShellExecution("}, {"sha": "5e9a1934037ad014cf0429030b9da836fa28bf7d", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88be6f32172813f53dae60d73c9f5deb0c3fb29f/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/88be6f32172813f53dae60d73c9f5deb0c3fb29f/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=88be6f32172813f53dae60d73c9f5deb0c3fb29f", "patch": "@@ -17,13 +17,6 @@ export class Server {\n         let folder: string = '.';\n         if (workspace.workspaceFolders !== undefined) {\n             folder = workspace.workspaceFolders[0].uri.fsPath.toString();\n-\n-            if (workspace.workspaceFolders.length > 1) {\n-                // Tell the user that we do not support multi-root workspaces yet\n-                window.showWarningMessage(\n-                    'Multi-root workspaces are not currently supported'\n-                );\n-            }\n         }\n \n         const run: lc.Executable = {"}]}