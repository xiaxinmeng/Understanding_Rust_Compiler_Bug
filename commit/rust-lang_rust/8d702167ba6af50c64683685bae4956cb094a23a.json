{"sha": "8d702167ba6af50c64683685bae4956cb094a23a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzAyMTY3YmE2YWY1MGM2NDY4MzY4NWJhZTQ5NTZjYjA5NGEyM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-07T03:27:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-07T03:27:12Z"}, "message": "auto merge of #17745 : aturon/rust/revert-any-private, r=alexcrichton\n\n[Previously](https://github.com/rust-lang/rust/commit/e5da6a71a6a0b46dd3630fc8326e6d5906a1fde6), the `Any` trait was split into a private portion and an (empty) public portion, in order to hide the implementation strategy used for downcasting. However, the [new rules](https://github.com/rust-lang/rust/commit/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2) for privacy forbid `AnyPrivate` from actually being private.\r\n\r\nThis patch thus reverts the introduction of `AnyPrivate`.\r\n\r\nAlthough this is unlikely to break any real code, it removes a public trait and is therefore a:\r\n\r\n[breaking-change]", "tree": {"sha": "e9eab7a42630939fd6640bad41b0ecded7076d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9eab7a42630939fd6640bad41b0ecded7076d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d702167ba6af50c64683685bae4956cb094a23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d702167ba6af50c64683685bae4956cb094a23a", "html_url": "https://github.com/rust-lang/rust/commit/8d702167ba6af50c64683685bae4956cb094a23a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d702167ba6af50c64683685bae4956cb094a23a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ba2f5517b1f90d07969ca3facdf5132e42436c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba2f5517b1f90d07969ca3facdf5132e42436c", "html_url": "https://github.com/rust-lang/rust/commit/b5ba2f5517b1f90d07969ca3facdf5132e42436c"}, {"sha": "d007d44dad08aa4239a2e85ce00a0466f32a4440", "url": "https://api.github.com/repos/rust-lang/rust/commits/d007d44dad08aa4239a2e85ce00a0466f32a4440", "html_url": "https://github.com/rust-lang/rust/commit/d007d44dad08aa4239a2e85ce00a0466f32a4440"}], "stats": {"total": 11, "additions": 2, "deletions": 9}, "files": [{"sha": "c4b07d42e693afbf953a85c2c55ae0cc0113e883", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d702167ba6af50c64683685bae4956cb094a23a/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d702167ba6af50c64683685bae4956cb094a23a/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=8d702167ba6af50c64683685bae4956cb094a23a", "patch": "@@ -91,20 +91,15 @@ pub enum Void { }\n /// Every type with no non-`'static` references implements `Any`, so `Any` can\n /// be used as a trait object to emulate the effects dynamic typing.\n #[stable]\n-pub trait Any: AnyPrivate + 'static {}\n-\n-/// An inner trait to ensure that only this module can call `get_type_id()`.\n-pub trait AnyPrivate {\n+pub trait Any: 'static {\n     /// Get the `TypeId` of `self`\n     fn get_type_id(&self) -> TypeId;\n }\n \n-impl<T: 'static> AnyPrivate for T {\n+impl<T: 'static> Any for T {\n     fn get_type_id(&self) -> TypeId { TypeId::of::<T>() }\n }\n \n-impl<T: 'static + AnyPrivate> Any for T {}\n-\n ///////////////////////////////////////////////////////////////////////////////\n // Extension methods for Any trait objects.\n // Implemented as three extension traits so that the methods can be generic."}, {"sha": "a0eca1d49dcc9604808aae12ea7f9ffa78a77bb7", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d702167ba6af50c64683685bae4956cb094a23a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d702167ba6af50c64683685bae4956cb094a23a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=8d702167ba6af50c64683685bae4956cb094a23a", "patch": "@@ -12,6 +12,4 @@ fn main() {\n     let _x = \"test\" as &::std::any::Any;\n //~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n //~^^ NOTE the trait `core::kinds::Sized` must be implemented for the cast to the object type\n-//~^^^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n-//~^^^^ NOTE the trait `core::kinds::Sized` must be implemented for the cast to the object type\n }"}]}