{"sha": "ea8feca31ade2b23d1e1b4cb7b0ad816de792acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOGZlY2EzMWFkZTJiMjNkMWUxYjRjYjdiMGFkODE2ZGU3OTJhY2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-01T21:22:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-01T21:22:11Z"}, "message": "Merge #8265\n\n8265: Improve rustc diagnostic mapping r=jonas-schievink a=jonas-schievink\n\nTry to mirror rustc diagnostics more closely by:\r\n\r\n* Emitting hint-level diagnostics at *all* macro invocation sites that caused the diagnostic\r\n  * Previously we emitted a copy of the diagnostic (not at hint level) at the last macro invocation site only\r\n* Emitting the original diagnostic inside the macro, if it was caused by a macro\r\n* Always including related information pointing to the invocation site or the macro, respectively (the old code contained a bug that would sometimes omit it)\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8260\r\n\r\n\r\n![screenshot-2021-03-30-19:34:56](https://user-images.githubusercontent.com/1786438/113031484-1266a600-918f-11eb-9164-fed01c8ba37e.png)\r\n![screenshot-2021-03-30-19:35:10](https://user-images.githubusercontent.com/1786438/113031486-12ff3c80-918f-11eb-8f15-9d7f23b69653.png)\r\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "0d385d5153ff36d9e19244fb9ad978b217004a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d385d5153ff36d9e19244fb9ad978b217004a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZjmDCRBK7hj4Ov3rIwAAdHIIACjcvROkMATTbhXiF82zdoMV\nvW4ry9wW2xt52oVk3CqrgmVgu9iv3B/AJVQyi39wQbaDrdyzzzv1ugK5vNeCto8R\n1sQw59X+XQVe5bWTStCT4zUthvMfmkiiHg4RXAg4cTL7js0sj5DQLgQsCrSE7svM\n0Z3wM4JvqWokzWLNNY3m7ArRFUNcMuKaIoYVKPZy0t0P0TmZE9fniPdw4fAwkCOK\nyvJAMSj+miSZGdGJWaZfPDwhkBa3gcRIhkwa7KfTg1Wj3MOYTtYUOR9R9SspzV2a\nmC/G0TNKHTOVpIv3xyF7LpOFVUwqjpcCDNvW8ekXSOV6nftzuHGZDtgF13YCmgA=\n=ai3P\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d385d5153ff36d9e19244fb9ad978b217004a45\nparent 5ef0c7a21387c219478754393bf9ac1b1cebf0d4\nparent 608a4653a3be3a35afce900e13d8b001fe4c5356\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617312131 +0000\ncommitter GitHub <noreply@github.com> 1617312131 +0000\n\nMerge #8265\n\n8265: Improve rustc diagnostic mapping r=jonas-schievink a=jonas-schievink\n\nTry to mirror rustc diagnostics more closely by:\r\n\r\n* Emitting hint-level diagnostics at *all* macro invocation sites that caused the diagnostic\r\n  * Previously we emitted a copy of the diagnostic (not at hint level) at the last macro invocation site only\r\n* Emitting the original diagnostic inside the macro, if it was caused by a macro\r\n* Always including related information pointing to the invocation site or the macro, respectively (the old code contained a bug that would sometimes omit it)\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8260\r\n\r\n\r\n![screenshot-2021-03-30-19:34:56](https://user-images.githubusercontent.com/1786438/113031484-1266a600-918f-11eb-9164-fed01c8ba37e.png)\r\n![screenshot-2021-03-30-19:35:10](https://user-images.githubusercontent.com/1786438/113031486-12ff3c80-918f-11eb-8f15-9d7f23b69653.png)\r\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd", "html_url": "https://github.com/rust-lang/rust/commit/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef0c7a21387c219478754393bf9ac1b1cebf0d4", "html_url": "https://github.com/rust-lang/rust/commit/5ef0c7a21387c219478754393bf9ac1b1cebf0d4"}, {"sha": "608a4653a3be3a35afce900e13d8b001fe4c5356", "url": "https://api.github.com/repos/rust-lang/rust/commits/608a4653a3be3a35afce900e13d8b001fe4c5356", "html_url": "https://github.com/rust-lang/rust/commit/608a4653a3be3a35afce900e13d8b001fe4c5356"}], "stats": {"total": 239, "additions": 192, "deletions": 47}, "files": [{"sha": "c847bbb356238fcdf8a18feae1136aa7616b7087", "filename": "crates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt", "status": "modified", "additions": 128, "deletions": 10, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt?ref=ea8feca31ade2b23d1e1b4cb7b0ad816de792acd", "patch": "@@ -13,16 +13,16 @@\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {\n-                    line: 264,\n+                    line: 271,\n                     character: 8,\n                 },\n                 end: Position {\n-                    line: 264,\n-                    character: 76,\n+                    line: 271,\n+                    character: 50,\n                 },\n             },\n             severity: Some(\n-                Error,\n+                Hint,\n             ),\n             code: None,\n             code_description: None,\n@@ -40,18 +40,18 @@\n                                 password: None,\n                                 host: None,\n                                 port: None,\n-                                path: \"/test/crates/hir_def/src/data.rs\",\n+                                path: \"/test/crates/hir_def/src/path.rs\",\n                                 query: None,\n                                 fragment: None,\n                             },\n                             range: Range {\n                                 start: Position {\n-                                    line: 79,\n-                                    character: 15,\n+                                    line: 264,\n+                                    character: 8,\n                                 },\n                                 end: Position {\n-                                    line: 79,\n-                                    character: 41,\n+                                    line: 264,\n+                                    character: 76,\n                                 },\n                             },\n                         },\n@@ -86,6 +86,71 @@\n                     character: 41,\n                 },\n             },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: None,\n+            code_description: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"Please register your known path in the path module\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/hir_def/src/path.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 264,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 264,\n+                                    character: 76,\n+                                },\n+                            },\n+                        },\n+                        message: \"Exact error occurred here\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [],\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            username: \"\",\n+            password: None,\n+            host: None,\n+            port: None,\n+            path: \"/test/crates/hir_def/src/path.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 264,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 264,\n+                    character: 76,\n+                },\n+            },\n             severity: Some(\n                 Error,\n             ),\n@@ -95,7 +160,60 @@\n                 \"rustc\",\n             ),\n             message: \"Please register your known path in the path module\",\n-            related_information: None,\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/hir_def/src/path.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 271,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 271,\n+                                    character: 50,\n+                                },\n+                            },\n+                        },\n+                        message: \"Error originated from macro call here\",\n+                    },\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/hir_def/src/data.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 79,\n+                                    character: 15,\n+                                },\n+                                end: Position {\n+                                    line: 79,\n+                                    character: 41,\n+                                },\n+                            },\n+                        },\n+                        message: \"Error originated from macro call here\",\n+                    },\n+                ],\n+            ),\n             tags: None,\n             data: None,\n         },"}, {"sha": "e2f319f6b0fd2941057b6fd0efea33f7ba176b6a", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8feca31ade2b23d1e1b4cb7b0ad816de792acd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=ea8feca31ade2b23d1e1b4cb7b0ad816de792acd", "patch": "@@ -34,22 +34,14 @@ fn diagnostic_severity(\n     Some(res)\n }\n \n-/// Check whether a file name is from macro invocation\n-fn is_from_macro(file_name: &str) -> bool {\n+/// Checks whether a file name is from macro invocation and does not refer to an actual file.\n+fn is_dummy_macro_file(file_name: &str) -> bool {\n+    // FIXME: current rustc does not seem to emit `<macro file>` files anymore?\n     file_name.starts_with('<') && file_name.ends_with('>')\n }\n \n-/// Converts a Rust span to a LSP location, resolving macro expansion site if neccesary\n-fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n-    let mut span = span.clone();\n-    while let Some(expansion) = span.expansion {\n-        span = expansion.span;\n-    }\n-    return location_naive(workspace_root, &span);\n-}\n-\n /// Converts a Rust span to a LSP location\n-fn location_naive(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n     let file_name = workspace_root.join(&span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n@@ -62,7 +54,25 @@ fn location_naive(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Lo\n     lsp_types::Location { uri, range }\n }\n \n-/// Converts a secondary Rust span to a LSP related inflocation(ormation\n+/// Extracts a suitable \"primary\" location from a rustc diagnostic.\n+///\n+/// This takes locations pointing into the standard library, or generally outside the current\n+/// workspace into account and tries to avoid those, in case macros are involved.\n+fn primary_location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+    let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n+    for span in span_stack.clone() {\n+        let abs_path = workspace_root.join(&span.file_name);\n+        if !is_dummy_macro_file(&span.file_name) && abs_path.starts_with(workspace_root) {\n+            return location(workspace_root, span);\n+        }\n+    }\n+\n+    // Fall back to the outermost macro invocation if no suitable span comes up.\n+    let last_span = span_stack.last().unwrap();\n+    location(workspace_root, last_span)\n+}\n+\n+/// Converts a secondary Rust span to a LSP related information\n ///\n /// If the span is unlabelled this will return `None`.\n fn diagnostic_related_information(\n@@ -231,7 +241,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let location = location(workspace_root, &primary_span);\n+            let primary_location = primary_location(workspace_root, &primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -243,31 +253,47 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n             // Each primary diagnostic span may result in multiple LSP diagnostics.\n             let mut diagnostics = Vec::new();\n \n-            let mut related_macro_info = None;\n+            let mut related_info_macro_calls = vec![];\n \n             // If error occurs from macro expansion, add related info pointing to\n             // where the error originated\n             // Also, we would generate an additional diagnostic, so that exact place of macro\n             // will be highlighted in the error origin place.\n-            if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-                let in_macro_location = location_naive(workspace_root, &primary_span);\n+            let span_stack = std::iter::successors(Some(*primary_span), |span| {\n+                Some(&span.expansion.as_ref()?.span)\n+            });\n+            for (i, span) in span_stack.enumerate() {\n+                if is_dummy_macro_file(&span.file_name) {\n+                    continue;\n+                }\n \n-                // Add related information for the main disagnostic.\n-                related_macro_info = Some(lsp_types::DiagnosticRelatedInformation {\n-                    location: in_macro_location.clone(),\n-                    message: \"Error originated from macro here\".to_string(),\n-                });\n+                // First span is the original diagnostic, others are macro call locations that\n+                // generated that code.\n+                let is_in_macro_call = i != 0;\n \n+                let secondary_location = location(workspace_root, &span);\n+                if secondary_location == primary_location {\n+                    continue;\n+                }\n+                related_info_macro_calls.push(lsp_types::DiagnosticRelatedInformation {\n+                    location: secondary_location.clone(),\n+                    message: if is_in_macro_call {\n+                        \"Error originated from macro call here\".to_string()\n+                    } else {\n+                        \"Actual error occurred here\".to_string()\n+                    },\n+                });\n                 // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n                 let information_for_additional_diagnostic =\n                     vec![lsp_types::DiagnosticRelatedInformation {\n-                        location: location.clone(),\n+                        location: primary_location.clone(),\n                         message: \"Exact error occurred here\".to_string(),\n                     }];\n \n                 let diagnostic = lsp_types::Diagnostic {\n-                    range: in_macro_location.range,\n-                    severity,\n+                    range: secondary_location.range,\n+                    // downgrade to hint if we're pointing at the macro\n+                    severity: Some(lsp_types::DiagnosticSeverity::Hint),\n                     code: code.clone().map(lsp_types::NumberOrString::String),\n                     code_description: code_description.clone(),\n                     source: Some(source.clone()),\n@@ -276,33 +302,34 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n                     data: None,\n                 };\n-\n                 diagnostics.push(MappedRustDiagnostic {\n-                    url: in_macro_location.uri,\n+                    url: secondary_location.uri,\n                     diagnostic,\n                     fixes: Vec::new(),\n                 });\n             }\n \n             // Emit the primary diagnostic.\n             diagnostics.push(MappedRustDiagnostic {\n-                url: location.uri.clone(),\n+                url: primary_location.uri.clone(),\n                 diagnostic: lsp_types::Diagnostic {\n-                    range: location.range,\n+                    range: primary_location.range,\n                     severity,\n                     code: code.clone().map(lsp_types::NumberOrString::String),\n                     code_description: code_description.clone(),\n                     source: Some(source.clone()),\n                     message,\n-                    related_information: if subdiagnostics.is_empty() {\n-                        None\n-                    } else {\n-                        let mut related = subdiagnostics\n+                    related_information: {\n+                        let info = related_info_macro_calls\n                             .iter()\n-                            .map(|sub| sub.related.clone())\n+                            .cloned()\n+                            .chain(subdiagnostics.iter().map(|sub| sub.related.clone()))\n                             .collect::<Vec<_>>();\n-                        related.extend(related_macro_info);\n-                        Some(related)\n+                        if info.is_empty() {\n+                            None\n+                        } else {\n+                            Some(info)\n+                        }\n                     },\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n                     data: None,\n@@ -314,7 +341,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n             // This is useful because they will show up in the user's editor, unlike\n             // `related_information`, which just produces hard-to-read links, at least in VS Code.\n             let back_ref = lsp_types::DiagnosticRelatedInformation {\n-                location,\n+                location: primary_location,\n                 message: \"original diagnostic\".to_string(),\n             };\n             for sub in &subdiagnostics {"}]}