{"sha": "0142781ad1639ca8c12809a677117dede0f5a9e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDI3ODFhZDE2MzljYThjMTI4MDlhNjc3MTE3ZGVkZTBmNWE5ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-13T23:43:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-13T23:43:56Z"}, "message": "Auto merge of #46708 - pnkfelix:fix-issue-46112, r=arielb1\n\nFix visible_parent_map to choose globally minimal paths\n\nFix #46112: visible_parent_map construction needs a BFS over whole crate forest to get globally minimal paths.\n\n(There are other latent bugs that were e.g. causing this test case to have weirdness like `<unnamed>` in the diagnostic output. Those bugs are not fixed here, since they are issues long-standing in the stable channel.)", "tree": {"sha": "deca0dbae920aa06ece62a13c65b00c7ea1f6b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deca0dbae920aa06ece62a13c65b00c7ea1f6b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0142781ad1639ca8c12809a677117dede0f5a9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0142781ad1639ca8c12809a677117dede0f5a9e6", "html_url": "https://github.com/rust-lang/rust/commit/0142781ad1639ca8c12809a677117dede0f5a9e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0142781ad1639ca8c12809a677117dede0f5a9e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8af59d95225d122e38bb5dceb1027844d4ce170", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8af59d95225d122e38bb5dceb1027844d4ce170", "html_url": "https://github.com/rust-lang/rust/commit/f8af59d95225d122e38bb5dceb1027844d4ce170"}, {"sha": "35bcd9913ed89275d86b25058b11b400702fc201", "url": "https://api.github.com/repos/rust-lang/rust/commits/35bcd9913ed89275d86b25058b11b400702fc201", "html_url": "https://github.com/rust-lang/rust/commit/35bcd9913ed89275d86b25058b11b400702fc201"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "870e9643ef72584f3bcbc67b6aca544084ae588a", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=0142781ad1639ca8c12809a677117dede0f5a9e6", "patch": "@@ -294,13 +294,31 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             let mut visible_parent_map: DefIdMap<DefId> = DefIdMap();\n \n+            // Issue 46112: We want the map to prefer the shortest\n+            // paths when reporting the path to an item. Therefore we\n+            // build up the map via a breadth-first search (BFS),\n+            // which naturally yields minimal-length paths.\n+            //\n+            // Note that it needs to be a BFS over the whole forest of\n+            // crates, not just each individual crate; otherwise you\n+            // only get paths that are locally minimal with respect to\n+            // whatever crate we happened to encounter first in this\n+            // traversal, but not globally minimal across all crates.\n+            let bfs_queue = &mut VecDeque::new();\n             for &cnum in tcx.crates().iter() {\n                 // Ignore crates without a corresponding local `extern crate` item.\n                 if tcx.missing_extern_crate_item(cnum) {\n                     continue\n                 }\n \n-                let bfs_queue = &mut VecDeque::new();\n+                bfs_queue.push_back(DefId {\n+                    krate: cnum,\n+                    index: CRATE_DEF_INDEX\n+                });\n+            }\n+\n+            // (restrict scope of mutable-borrow of `visible_parent_map`)\n+            {\n                 let visible_parent_map = &mut visible_parent_map;\n                 let mut add_child = |bfs_queue: &mut VecDeque<_>,\n                                      child: &def::Export,\n@@ -326,10 +344,6 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n                     }\n                 };\n \n-                bfs_queue.push_back(DefId {\n-                    krate: cnum,\n-                    index: CRATE_DEF_INDEX\n-                });\n                 while let Some(def) = bfs_queue.pop_front() {\n                     for child in tcx.item_children(def).iter() {\n                         add_child(bfs_queue, child, def);"}, {"sha": "80f877f834d8babc4a30a158b007a658bfad2939", "filename": "src/test/ui/auxiliary/xcrate_issue_46112_rexport_core.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Ftest%2Fui%2Fauxiliary%2Fxcrate_issue_46112_rexport_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Ftest%2Fui%2Fauxiliary%2Fxcrate_issue_46112_rexport_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fxcrate_issue_46112_rexport_core.rs?ref=0142781ad1639ca8c12809a677117dede0f5a9e6", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub extern crate core;"}, {"sha": "c292f73bf0b239e0fcba14387842075532e4314d", "filename": "src/test/ui/issue-46112.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Ftest%2Fui%2Fissue-46112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Ftest%2Fui%2Fissue-46112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46112.rs?ref=0142781ad1639ca8c12809a677117dede0f5a9e6", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 46112: An extern crate pub reexporting libcore was causing\n+// paths rooted from `std` to be misrendered in the diagnostic output.\n+\n+// ignore-windows\n+// aux-build:xcrate_issue_46112_rexport_core.rs\n+\n+extern crate xcrate_issue_46112_rexport_core;\n+fn test(r: Result<Option<()>, &'static str>) { }\n+fn main() { test(Ok(())); }\n+//~^ mismatched types"}, {"sha": "b9b87a941fd27118c75ad43af7deff26cbfb0e8d", "filename": "src/test/ui/issue-46112.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Ftest%2Fui%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0142781ad1639ca8c12809a677117dede0f5a9e6/src%2Ftest%2Fui%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46112.stderr?ref=0142781ad1639ca8c12809a677117dede0f5a9e6", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-46112.rs:19:21\n+   |\n+19 | fn main() { test(Ok(())); }\n+   |                     ^^\n+   |                     |\n+   |                     expected enum `std::option::Option`, found ()\n+   |                     help: try using a variant of the expected type: `Some(())`\n+   |\n+   = note: expected type `std::option::Option<()>`\n+              found type `()`\n+\n+error: aborting due to previous error\n+"}]}