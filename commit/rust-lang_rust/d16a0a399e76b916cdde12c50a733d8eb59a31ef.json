{"sha": "d16a0a399e76b916cdde12c50a733d8eb59a31ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNmEwYTM5OWU3NmI5MTZjZGRlMTJjNTBhNzMzZDhlYjU5YTMxZWY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-19T10:25:53Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T02:32:09Z"}, "message": "Implement 'vec![expr; expr]'", "tree": {"sha": "54a21960aef2f30ce43a0323afe99bf2b3225b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a21960aef2f30ce43a0323afe99bf2b3225b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16a0a399e76b916cdde12c50a733d8eb59a31ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16a0a399e76b916cdde12c50a733d8eb59a31ef", "html_url": "https://github.com/rust-lang/rust/commit/d16a0a399e76b916cdde12c50a733d8eb59a31ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16a0a399e76b916cdde12c50a733d8eb59a31ef/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068b8b3b5c92c20d5347a30a221e53d9f63a8704", "url": "https://api.github.com/repos/rust-lang/rust/commits/068b8b3b5c92c20d5347a30a221e53d9f63a8704", "html_url": "https://github.com/rust-lang/rust/commit/068b8b3b5c92c20d5347a30a221e53d9f63a8704"}], "stats": {"total": 97, "additions": 76, "deletions": 21}, "files": [{"sha": "352c39f317c1fe0dfd374f1dbd83eb517f7253bb", "filename": "src/macros.rs", "status": "modified", "additions": 54, "deletions": 13, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d16a0a399e76b916cdde12c50a733d8eb59a31ef/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16a0a399e76b916cdde12c50a733d8eb59a31ef/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=d16a0a399e76b916cdde12c50a733d8eb59a31ef", "patch": "@@ -29,7 +29,7 @@ use syntax::util::ThinVec;\n use Shape;\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n-use expr::{rewrite_call, rewrite_array};\n+use expr::{rewrite_call, rewrite_array, rewrite_pair};\n use comment::{FindUncommented, contains_comment};\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n@@ -105,6 +105,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n \n     let mut parser = tts_to_parser(context.parse_session, mac.node.tts.clone());\n     let mut expr_vec = Vec::new();\n+    let mut vec_with_semi = false;\n \n     if MacroStyle::Braces != style {\n         loop {\n@@ -128,6 +129,29 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             match parser.token {\n                 Token::Eof => break,\n                 Token::Comma => (),\n+                Token::Semi => {\n+                    // Try to parse `vec![expr; expr]`\n+                    if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {\n+                        parser.bump();\n+                        if parser.token != Token::Eof {\n+                            match parser.parse_expr() {\n+                                Ok(expr) => {\n+                                    if context.parse_session.span_diagnostic.has_errors() {\n+                                        return None;\n+                                    }\n+                                    expr_vec.push(expr);\n+                                    parser.bump();\n+                                    if parser.token == Token::Eof && expr_vec.len() == 2 {\n+                                        vec_with_semi = true;\n+                                        break;\n+                                    }\n+                                }\n+                                Err(mut e) => e.cancel(),\n+                            }\n+                        }\n+                    }\n+                    return None;\n+                }\n                 _ => return None,\n             }\n \n@@ -156,18 +180,35 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             })\n         }\n         MacroStyle::Brackets => {\n-            // Format macro invocation as array literal.\n-            let extra_offset = macro_name.len();\n-            let shape = try_opt!(shape.shrink_left(extra_offset));\n-            let rewrite =\n-                try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n-                                       mk_sp(context.codemap.span_after(mac.span,\n-                                                                        original_style.opener()),\n-                                             mac.span.hi - BytePos(1)),\n-                                       context,\n-                                       shape));\n-\n-            Some(format!(\"{}{}\", macro_name, rewrite))\n+            let mac_shape = try_opt!(shape.shrink_left(macro_name.len()));\n+            // Handle special case: `vec![expr; expr]`\n+            if vec_with_semi {\n+                let (lbr, rbr) = if context.config.spaces_within_square_brackets {\n+                    (\"[ \", \" ]\")\n+                } else {\n+                    (\"[\", \"]\")\n+                };\n+                rewrite_pair(&*expr_vec[0],\n+                             &*expr_vec[1],\n+                             lbr,\n+                             \"; \",\n+                             rbr,\n+                             context,\n+                             mac_shape)\n+                    .map(|s| format!(\"{}{}\", macro_name, s))\n+            } else {\n+                // Format macro invocation as array literal.\n+                let rewrite =\n+                    try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n+                                           mk_sp(context.codemap.span_after(mac.span,\n+                                                                            original_style\n+                                                                                .opener()),\n+                                                 mac.span.hi - BytePos(1)),\n+                                           context,\n+                                           mac_shape));\n+\n+                Some(format!(\"{}{}\", macro_name, rewrite))\n+            }\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now."}, {"sha": "afaf67359ed375b910c5965f00d1a6c96f46cc94", "filename": "tests/source/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d16a0a399e76b916cdde12c50a733d8eb59a31ef/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16a0a399e76b916cdde12c50a733d8eb59a31ef/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=d16a0a399e76b916cdde12c50a733d8eb59a31ef", "patch": "@@ -34,6 +34,13 @@ fn main() {\n     a,   \n     ];\n     \n+    vec![a; b];\n+    vec!(a; b);\n+    vec!{a; b};\n+\n+    vec![a, b; c];\n+    vec![a; b, c];\n+\n     unknown_bracket_macro__comma_should_not_be_stripped![\n     a,\n     ];"}, {"sha": "2f65b4e4f6e4f77ef34617a9287a14e360968443", "filename": "tests/target/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d16a0a399e76b916cdde12c50a733d8eb59a31ef/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16a0a399e76b916cdde12c50a733d8eb59a31ef/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=d16a0a399e76b916cdde12c50a733d8eb59a31ef", "patch": "@@ -38,6 +38,13 @@ fn main() {\n     // Trailing spaces after a comma\n     vec![a];\n \n+    vec![a; b];\n+    vec![a; b];\n+    vec![a; b];\n+\n+    vec![a, b; c];\n+    vec![a; b, c];\n+\n     unknown_bracket_macro__comma_should_not_be_stripped![\n     a,\n     ];"}, {"sha": "09df7ebd55fdf7e997e5008bca1cc464ed4db5b5", "filename": "tests/target/match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d16a0a399e76b916cdde12c50a733d8eb59a31ef/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16a0a399e76b916cdde12c50a733d8eb59a31ef/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=d16a0a399e76b916cdde12c50a733d8eb59a31ef", "patch": "@@ -158,19 +158,19 @@ fn issue355() {\n     match mac {\n         a => println!(\"a\", b),\n         b => vec![1, 2],\n-        c => vec!(3; 4),\n+        c => vec![3; 4],\n         d => println!(\"a\", b),\n         e => vec![1, 2],\n-        f => vec!(3; 4),\n+        f => vec![3; 4],\n         h => println!(\"a\", b), // h comment\n         i => vec![1, 2], // i comment\n-        j => vec!(3; 4), // j comment\n+        j => vec![3; 4], // j comment\n         // k comment\n         k => println!(\"a\", b),\n         // l comment\n         l => vec![1, 2],\n         // m comment\n-        m => vec!(3; 4),\n+        m => vec![3; 4],\n         // Rewrite splits macro\n         nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => {\n             println!(\"a\", b)\n@@ -182,7 +182,7 @@ fn issue355() {\n         // Macro support fails to recognise this macro as splitable\n         // We push the whole expr to a new line, TODO split this macro as well\n         pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp => {\n-            vec!(3; 4)\n+            vec![3; 4]\n         }\n         // q, r and s: Rewrite splits match arm\n         qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq => {\n@@ -192,19 +192,19 @@ fn issue355() {\n             vec![1, 2]\n         }\n         ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss => {\n-            vec!(3; 4)\n+            vec![3; 4]\n         }\n         // Funky bracketing styles\n         t => println!{\"a\", b},\n         u => vec![1, 2],\n-        v => vec!{3; 4},\n+        v => vec![3; 4],\n         w => println![\"a\", b],\n         x => vec![1, 2],\n         y => vec![3; 4],\n         // Brackets with comments\n         tc => println!{\"a\", b}, // comment\n         uc => vec![1, 2], // comment\n-        vc => vec!{3; 4}, // comment\n+        vc => vec![3; 4], // comment\n         wc => println![\"a\", b], // comment\n         xc => vec![1, 2], // comment\n         yc => vec![3; 4], // comment"}]}