{"sha": "c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YmI2NmMyODQyY2RkNDMzYWQ2ZGJlMTE2ODcyNmZmMWNhMTQ4ZDM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-21T22:25:21Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-06T02:08:01Z"}, "message": "rustdoc: Replace `Arc` around `SharedContext` with `Rc`\n\nIt doesn't look like it's shared across threads, so it doesn't need to\nbe thread-safe. Of course, since we're using Rust, we'll get an error if\nwe try to share it across threads, so this should be safe :)", "tree": {"sha": "d11934421449ce94ca10d9e0f143729a359a3f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11934421449ce94ca10d9e0f143729a359a3f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "html_url": "https://github.com/rust-lang/rust/commit/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9763eb87a3a389b90c6540f56194d2f7f78d62be", "url": "https://api.github.com/repos/rust-lang/rust/commits/9763eb87a3a389b90c6540f56194d2f7f78d62be", "html_url": "https://github.com/rust-lang/rust/commit/9763eb87a3a389b90c6540f56194d2f7f78d62be"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "064c9759b5861d62d75a5bbe466bf2e6d3f46529", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "patch": "@@ -4,7 +4,6 @@ use std::io;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::mpsc::channel;\n-use std::sync::Arc;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -53,7 +52,7 @@ crate struct Context<'tcx> {\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n     crate render_redirect_pages: bool,\n-    crate shared: Arc<SharedContext<'tcx>>,\n+    crate shared: Rc<SharedContext<'tcx>>,\n     /// The [`Cache`] used during rendering.\n     ///\n     /// Ideally the cache would be in [`SharedContext`], but it's mutated\n@@ -410,16 +409,16 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: Vec::new(),\n             dst,\n             render_redirect_pages: false,\n-            shared: Arc::new(scx),\n+            shared: Rc::new(scx),\n             cache: Rc::new(cache),\n         };\n \n         CURRENT_DEPTH.with(|s| s.set(0));\n \n         // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n-        Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n+        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n         write_shared(&cx, &krate, index, &md_opts)?;\n-        Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n+        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n         Ok((cx, krate))\n     }\n \n@@ -501,7 +500,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         }\n \n         // Flush pending errors.\n-        Arc::get_mut(&mut self.shared).unwrap().fs.close();\n+        Rc::get_mut(&mut self.shared).unwrap().fs.close();\n         let nb_errors = self.shared.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n         if nb_errors > 0 {\n             Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))"}]}