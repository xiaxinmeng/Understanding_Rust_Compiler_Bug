{"sha": "ddb616df907acfcd6ff3339738f9f5d072967490", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjYxNmRmOTA3YWNmY2Q2ZmYzMzM5NzM4ZjlmNWQwNzI5Njc0OTA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-27T21:28:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T21:28:39Z"}, "message": "Rollup merge of #66704 - GuillaumeGomez:intra-doc-enum-variant-field, r=kinnison\n\nIntra doc enum variant field\n\nPart of #43466.\n\nAdd intra-doc link support for this:\n\n```rust\nenum Foo {\n    X {\n        y: u8, // can be found with Foo::X::y\n    }\n}\n```\n\nr? @kinnison", "tree": {"sha": "36d7293d3f24e012584e928d87277ca9287102d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36d7293d3f24e012584e928d87277ca9287102d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb616df907acfcd6ff3339738f9f5d072967490", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3uqHCRBK7hj4Ov3rIwAAdHIIAArL+qD3qjjB2lWDca7h4qFu\nY+kxWbeArgDSG+f070/l4dWmFcowHdF+X+L0QJY9UNtKl3aMUCuwYHBaPlAbAiNF\nU8wSZp6sO3OMMP7bRjZxDeJfk/1beauR/kmKcnZ7jDP7123OrVHUa8uqtIfNRx2R\nPZWcDkLw+BXVTtax5v6Ag+OzEh7PxkoQvox1hpAgi7vInBVtKJ/btZVArUJlk5U/\nzVd9w78nrdTC2vT33SoYO9as2necmBS5Xkmly0RYFkdiOB+oewwXYiTYBuSaqfzL\nzSmdcVwWDF5ygTakerkIV15yGQjNtTn0McGpdEuZwAwD5Nf9WPgKizR6jAG6yzY=\n=naFa\n-----END PGP SIGNATURE-----\n", "payload": "tree 36d7293d3f24e012584e928d87277ca9287102d2\nparent 48b0fd2060614fc917616e5023a2b1af3158308a\nparent 97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2\nauthor Tyler Mandry <tmandry@gmail.com> 1574890119 -0600\ncommitter GitHub <noreply@github.com> 1574890119 -0600\n\nRollup merge of #66704 - GuillaumeGomez:intra-doc-enum-variant-field, r=kinnison\n\nIntra doc enum variant field\n\nPart of #43466.\n\nAdd intra-doc link support for this:\n\n```rust\nenum Foo {\n    X {\n        y: u8, // can be found with Foo::X::y\n    }\n}\n```\n\nr? @kinnison\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb616df907acfcd6ff3339738f9f5d072967490", "html_url": "https://github.com/rust-lang/rust/commit/ddb616df907acfcd6ff3339738f9f5d072967490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb616df907acfcd6ff3339738f9f5d072967490/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b0fd2060614fc917616e5023a2b1af3158308a", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b0fd2060614fc917616e5023a2b1af3158308a", "html_url": "https://github.com/rust-lang/rust/commit/48b0fd2060614fc917616e5023a2b1af3158308a"}, {"sha": "97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2", "html_url": "https://github.com/rust-lang/rust/commit/97c427cc5ee8d1748ff3a3547bd22cd64d23a6e2"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "d8f2dbca835d85a7f937865fc662446175dd709a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 76, "deletions": 23, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ddb616df907acfcd6ff3339738f9f5d072967490/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb616df907acfcd6ff3339738f9f5d072967490/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ddb616df907acfcd6ff3339738f9f5d072967490", "patch": "@@ -56,6 +56,64 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         }\n     }\n \n+    fn variant_field(\n+        &self,\n+        path_str: &str,\n+        current_item: &Option<String>,\n+        module_id: syntax::ast::NodeId,\n+    ) -> Result<(Res, Option<String>), ErrorKind> {\n+        let cx = self.cx;\n+\n+        let mut split = path_str.rsplitn(3, \"::\");\n+        let variant_field_name = split\n+            .next()\n+            .map(|f| Symbol::intern(f))\n+            .ok_or(ErrorKind::ResolutionFailure)?;\n+        let variant_name = split\n+            .next()\n+            .map(|f| Symbol::intern(f))\n+            .ok_or(ErrorKind::ResolutionFailure)?;\n+        let path = split.next().map(|f| {\n+            if f == \"self\" || f == \"Self\" {\n+                if let Some(name) = current_item.as_ref() {\n+                    return name.clone();\n+                }\n+            }\n+            f.to_owned()\n+        }).ok_or(ErrorKind::ResolutionFailure)?;\n+        let (_, ty_res) = cx.enter_resolver(|resolver| {\n+            resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n+        }).map_err(|_| ErrorKind::ResolutionFailure)?;\n+        if let Res::Err = ty_res {\n+            return Err(ErrorKind::ResolutionFailure);\n+        }\n+        let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n+        match ty_res {\n+            Res::Def(DefKind::Enum, did) => {\n+                if cx.tcx.inherent_impls(did)\n+                         .iter()\n+                         .flat_map(|imp| cx.tcx.associated_items(*imp))\n+                         .any(|item| item.ident.name == variant_name) {\n+                    return Err(ErrorKind::ResolutionFailure);\n+                }\n+                match cx.tcx.type_of(did).kind {\n+                    ty::Adt(def, _) if def.is_enum() => {\n+                        if def.all_fields()\n+                              .any(|item| item.ident.name == variant_field_name) {\n+                            Ok((ty_res,\n+                                Some(format!(\"variant.{}.field.{}\",\n+                                             variant_name, variant_field_name))))\n+                        } else {\n+                            Err(ErrorKind::ResolutionFailure)\n+                        }\n+                    }\n+                    _ => Err(ErrorKind::ResolutionFailure),\n+                }\n+            }\n+            _ => Err(ErrorKind::ResolutionFailure)\n+        }\n+    }\n+\n     /// Resolves a string as a path within a particular namespace. Also returns an optional\n     /// URL fragment in the case of variants and methods.\n     fn resolve(\n@@ -121,23 +179,18 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n             // Try looking for methods and associated items.\n             let mut split = path_str.rsplitn(2, \"::\");\n-            let item_name = if let Some(first) = split.next() {\n-                Symbol::intern(first)\n-            } else {\n-                return Err(ErrorKind::ResolutionFailure)\n-            };\n-\n-            let mut path = if let Some(second) = split.next() {\n-                second.to_owned()\n-            } else {\n-                return Err(ErrorKind::ResolutionFailure)\n-            };\n-\n-            if path == \"self\" || path == \"Self\" {\n-                if let Some(name) = current_item.as_ref() {\n-                    path = name.clone();\n+            let item_name = split.next()\n+                .map(|f| Symbol::intern(f))\n+                .ok_or(ErrorKind::ResolutionFailure)?;\n+            let path = split.next().map(|f| {\n+                if f == \"self\" || f == \"Self\" {\n+                    if let Some(name) = current_item.as_ref() {\n+                        return name.clone();\n+                    }\n                 }\n-            }\n+                f.to_owned()\n+            }).ok_or(ErrorKind::ResolutionFailure)?;\n+\n             if let Some(prim) = is_primitive(&path, TypeNS) {\n                 let did = primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)?;\n                 return cx.tcx.associated_items(did)\n@@ -154,7 +207,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n             }).map_err(|_| ErrorKind::ResolutionFailure)?;\n             if let Res::Err = ty_res {\n-                return Err(ErrorKind::ResolutionFailure);\n+                return self.variant_field(path_str, current_item, module_id);\n             }\n             let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n             match ty_res {\n@@ -170,7 +223,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         let out = match item.kind {\n                             ty::AssocKind::Method if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n-                            _ => return Err(ErrorKind::ResolutionFailure)\n+                            _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(\n@@ -211,10 +264,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                                          item.ident))))\n                                     }\n                                 } else {\n-                                    Err(ErrorKind::ResolutionFailure)\n+                                    self.variant_field(path_str, current_item, module_id)\n                                 }\n                             }\n-                            _ => Err(ErrorKind::ResolutionFailure),\n+                            _ => self.variant_field(path_str, current_item, module_id),\n                         }\n                     }\n                 }\n@@ -233,7 +286,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                     \"tymethod\"\n                                 }\n                             }\n-                            _ => return Err(ErrorKind::ResolutionFailure)\n+                            _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n \n                         if extra_fragment.is_some() {\n@@ -249,10 +302,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             Ok((ty_res, Some(format!(\"{}.{}\", kind, item_name))))\n                         }\n                     } else {\n-                        Err(ErrorKind::ResolutionFailure)\n+                        self.variant_field(path_str, current_item, module_id)\n                     }\n                 }\n-                _ => Err(ErrorKind::ResolutionFailure)\n+                _ => self.variant_field(path_str, current_item, module_id),\n             }\n         } else {\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);"}, {"sha": "70bf343a9a5e5a144950de51f51e3767bce088ff", "filename": "src/test/rustdoc/intra-doc-link-enum-struct-field.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddb616df907acfcd6ff3339738f9f5d072967490/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb616df907acfcd6ff3339738f9f5d072967490/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs?ref=ddb616df907acfcd6ff3339738f9f5d072967490", "patch": "@@ -0,0 +1,14 @@\n+#![crate_name = \"foo\"]\n+\n+pub enum Foo {\n+    X {\n+        y: u8,\n+    }\n+}\n+\n+/// Hello\n+///\n+/// I want [Foo::X::y].\n+pub fn foo() {}\n+\n+// @has foo/fn.foo.html '//a/@href' '../foo/enum.Foo.html#variant.X.field.y'"}]}