{"sha": "123a83326fb95366e94a3be1a74775df4db97739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyM2E4MzMyNmZiOTUzNjZlOTRhM2JlMWE3NDc3NWRmNGRiOTc3Mzk=", "commit": {"author": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2015-10-03T15:35:35Z"}, "committer": {"name": "arthurprs", "email": "arthurprs@gmail.com", "date": "2015-10-03T15:56:38Z"}, "message": "integer parsing should accept leading plus", "tree": {"sha": "46fcb8dd9986b6fd08f901e302d7de46f46c77d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46fcb8dd9986b6fd08f901e302d7de46f46c77d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/123a83326fb95366e94a3be1a74775df4db97739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/123a83326fb95366e94a3be1a74775df4db97739", "html_url": "https://github.com/rust-lang/rust/commit/123a83326fb95366e94a3be1a74775df4db97739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/123a83326fb95366e94a3be1a74775df4db97739/comments", "author": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arthurprs", "id": 715958, "node_id": "MDQ6VXNlcjcxNTk1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/715958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurprs", "html_url": "https://github.com/arthurprs", "followers_url": "https://api.github.com/users/arthurprs/followers", "following_url": "https://api.github.com/users/arthurprs/following{/other_user}", "gists_url": "https://api.github.com/users/arthurprs/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurprs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurprs/subscriptions", "organizations_url": "https://api.github.com/users/arthurprs/orgs", "repos_url": "https://api.github.com/users/arthurprs/repos", "events_url": "https://api.github.com/users/arthurprs/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurprs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0369304feb732f0bc89e19e9f09cb3ec9d94fe9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0369304feb732f0bc89e19e9f09cb3ec9d94fe9a", "html_url": "https://github.com/rust-lang/rust/commit/0369304feb732f0bc89e19e9f09cb3ec9d94fe9a"}], "stats": {"total": 89, "additions": 49, "deletions": 40}, "files": [{"sha": "56120cdab475fef6d05cbd3af37a312cd2f5858b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/123a83326fb95366e94a3be1a74775df4db97739/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a83326fb95366e94a3be1a74775df4db97739/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=123a83326fb95366e94a3be1a74775df4db97739", "patch": "@@ -1387,50 +1387,51 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n     // of multi-byte sequences\n     let src = src.as_bytes();\n \n-    match (src[0], &src[1..])  {\n-        (b'-', digits) if digits.is_empty() => Err(PIE { kind: Empty }),\n-        (b'-', digits) if is_signed_ty => {\n-            // The number is negative\n-            let mut result = T::from_u32(0);\n-            for &c in digits {\n-                let x = match (c as char).to_digit(radix) {\n-                    Some(x) => x,\n-                    None => return Err(PIE { kind: InvalidDigit }),\n-                };\n-                result = match result.checked_mul(radix) {\n-                    Some(result) => result,\n-                    None => return Err(PIE { kind: Underflow }),\n-                };\n-                result = match result.checked_sub(x) {\n-                    Some(result) => result,\n-                    None => return Err(PIE { kind: Underflow }),\n-                };\n-            }\n-            Ok(result)\n-        },\n-        (c, digits) => {\n-            // The number is signed\n-            let mut result = match (c as char).to_digit(radix) {\n-                Some(x) => T::from_u32(x),\n+    let (is_positive, digits) = match src[0] {\n+        b'+' => (true, &src[1..]),\n+        b'-' if is_signed_ty => (false, &src[1..]),\n+        _ => (true, src)\n+    };\n+\n+    if digits.is_empty() {\n+        return Err(PIE { kind: Empty });\n+    }\n+\n+    let mut result = T::from_u32(0);\n+    if is_positive {\n+        // The number is positive\n+        for &c in digits {\n+            let x = match (c as char).to_digit(radix) {\n+                Some(x) => x,\n                 None => return Err(PIE { kind: InvalidDigit }),\n             };\n-            for &c in digits {\n-                let x = match (c as char).to_digit(radix) {\n-                    Some(x) => x,\n-                    None => return Err(PIE { kind: InvalidDigit }),\n-                };\n-                result = match result.checked_mul(radix) {\n-                    Some(result) => result,\n-                    None => return Err(PIE { kind: Overflow }),\n-                };\n-                result = match result.checked_add(x) {\n-                    Some(result) => result,\n-                    None => return Err(PIE { kind: Overflow }),\n-                };\n-            }\n-            Ok(result)\n+            result = match result.checked_mul(radix) {\n+                Some(result) => result,\n+                None => return Err(PIE { kind: Overflow }),\n+            };\n+            result = match result.checked_add(x) {\n+                Some(result) => result,\n+                None => return Err(PIE { kind: Overflow }),\n+            };\n+        }\n+    } else {\n+        // The number is negative\n+        for &c in digits {\n+            let x = match (c as char).to_digit(radix) {\n+                Some(x) => x,\n+                None => return Err(PIE { kind: InvalidDigit }),\n+            };\n+            result = match result.checked_mul(radix) {\n+                Some(result) => result,\n+                None => return Err(PIE { kind: Underflow }),\n+            };\n+            result = match result.checked_sub(x) {\n+                Some(result) => result,\n+                None => return Err(PIE { kind: Underflow }),\n+            };\n         }\n     }\n+    Ok(result)\n }\n \n /// An error which can be returned when parsing an integer."}, {"sha": "2a3ff88fe6da2b7a8993e1633a0054075a0afb69", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/123a83326fb95366e94a3be1a74775df4db97739/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a83326fb95366e94a3be1a74775df4db97739/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=123a83326fb95366e94a3be1a74775df4db97739", "patch": "@@ -118,15 +118,23 @@ mod tests {\n         assert_eq!(\"-9223372036854775809\".parse::<i64>().ok(), None);\n     }\n \n+    #[test]\n+    fn test_leading_plus() {\n+        assert_eq!(\"+127\".parse::<u8>().ok(), Some(127u8));\n+        assert_eq!(\"+9223372036854775807\".parse::<i64>().ok(), Some(9223372036854775807i64));\n+    }\n+\n     #[test]\n     fn test_invalid() {\n         assert_eq!(\"--129\".parse::<i8>().ok(), None);\n+        assert_eq!(\"++129\".parse::<i8>().ok(), None);\n         assert_eq!(\"\u0421\u044a\u0435\u0448\u044c\".parse::<u8>().ok(), None);\n     }\n \n     #[test]\n     fn test_empty() {\n         assert_eq!(\"-\".parse::<i8>().ok(), None);\n+        assert_eq!(\"+\".parse::<i8>().ok(), None);\n         assert_eq!(\"\".parse::<u8>().ok(), None);\n     }\n }"}]}