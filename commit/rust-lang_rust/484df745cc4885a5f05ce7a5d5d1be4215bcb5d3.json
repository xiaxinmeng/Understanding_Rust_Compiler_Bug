{"sha": "484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NGRmNzQ1Y2M0ODg1YTVmMDVjZTdhNWQ1ZDFiZTQyMTViY2I1ZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-04T14:47:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-04T14:47:16Z"}, "message": "Merge #7153\n\n7153: rename exrtract_assignment -> pull r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "53b7010c37ba4e6ec5332e345bef170533099c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53b7010c37ba4e6ec5332e345bef170533099c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8yp0CRBK7hj4Ov3rIwAAdHIIAKKfjfV2/ZZBIq8BJgbAmk0e\nrrlOV+IcXs2hGNRLQAUFuoJej5gqzICoR87mrQVdBhgLcDXawDsX+LaNauxDHNEI\nELXEyXvKDxb8ZqsoQKFWr+QfLKz/XUQmAMvdvPtFk1rd/vDbnS1UsOnbyX+ROh0B\nx+qjK5SGUMZ51LfF2qbGgaCDi5o/OKf4gol4m8X6JTojX9i/fV9h2uOge6CdVXpe\nBOOTZ8bQTQmzEXmDZ0KG/VqedvTd9sf2ivXkNB9t7AEYIGrZt61+vsAYRKDuAQXb\naTr6Rr1KoOCE5Zj7ud12zXTCakA1d079xqRLJsgBHR1Y4VfEb8tDM4CtPDV0r5g=\n=mLkp\n-----END PGP SIGNATURE-----\n", "payload": "tree 53b7010c37ba4e6ec5332e345bef170533099c2f\nparent dcb5387b420456d6cb827a90756931ada70f4e6a\nparent 46afdb6e9b50f1493ca92905fa4ae858fb496c7a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609771636 +0000\ncommitter GitHub <noreply@github.com> 1609771636 +0000\n\nMerge #7153\n\n7153: rename exrtract_assignment -> pull r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "html_url": "https://github.com/rust-lang/rust/commit/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb5387b420456d6cb827a90756931ada70f4e6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb5387b420456d6cb827a90756931ada70f4e6a", "html_url": "https://github.com/rust-lang/rust/commit/dcb5387b420456d6cb827a90756931ada70f4e6a"}, {"sha": "46afdb6e9b50f1493ca92905fa4ae858fb496c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/46afdb6e9b50f1493ca92905fa4ae858fb496c7a", "html_url": "https://github.com/rust-lang/rust/commit/46afdb6e9b50f1493ca92905fa4ae858fb496c7a"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "560d93e101e18b56d889b2089b105ef6713d291b", "filename": "crates/assists/src/handlers/pull_assignment_up.rs", "status": "renamed", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "patch": "@@ -9,9 +9,9 @@ use crate::{\n     AssistId, AssistKind,\n };\n \n-// Assist: extract_assignment\n+// Assist: pull_assignment_up\n //\n-// Extracts variable assigment to outside an if or match statement.\n+// Extracts variable assignment to outside an if or match statement.\n //\n // ```\n // fn main() {\n@@ -36,7 +36,7 @@ use crate::{\n //     };\n // }\n // ```\n-pub(crate) fn extract_assigment(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let assign_expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n     let name_expr = if assign_expr.op_kind()? == ast::BinOp::Assignment {\n         assign_expr.lhs()?\n@@ -61,8 +61,8 @@ pub(crate) fn extract_assigment(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     let expr_stmt = make::expr_stmt(new_stmt);\n \n     acc.add(\n-        AssistId(\"extract_assignment\", AssistKind::RefactorExtract),\n-        \"Extract assignment\",\n+        AssistId(\"pull_assignment_up\", AssistKind::RefactorExtract),\n+        \"Pull assignment up\",\n         old_stmt.syntax().text_range(),\n         move |edit| {\n             edit.replace(old_stmt.syntax().text_range(), format!(\"{} = {};\", name_expr, expr_stmt));\n@@ -104,7 +104,7 @@ fn exprify_if(\n             ast::ElseBranch::Block(exprify_block(block, sema, name)?)\n         }\n         ast::ElseBranch::IfExpr(expr) => {\n-            mark::hit!(test_extract_assigment_chained_if);\n+            mark::hit!(test_pull_assignment_up_chained_if);\n             ast::ElseBranch::IfExpr(ast::IfExpr::cast(\n                 exprify_if(&expr, sema, name)?.syntax().to_owned(),\n             )?)\n@@ -144,7 +144,7 @@ fn is_equivalent(\n ) -> bool {\n     match (expr0, expr1) {\n         (ast::Expr::FieldExpr(field_expr0), ast::Expr::FieldExpr(field_expr1)) => {\n-            mark::hit!(test_extract_assignment_field_assignment);\n+            mark::hit!(test_pull_assignment_up_field_assignment);\n             sema.resolve_field(field_expr0) == sema.resolve_field(field_expr1)\n         }\n         (ast::Expr::PathExpr(path0), ast::Expr::PathExpr(path1)) => {\n@@ -167,9 +167,9 @@ mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n-    fn test_extract_assignment_if() {\n+    fn test_pull_assignment_up_if() {\n         check_assist(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -194,9 +194,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_extract_assignment_match() {\n+    fn test_pull_assignment_up_match() {\n         check_assist(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -233,9 +233,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_extract_assignment_not_last_not_applicable() {\n+    fn test_pull_assignment_up_not_last_not_applicable() {\n         check_assist_not_applicable(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -251,10 +251,10 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_extract_assignment_chained_if() {\n-        mark::check!(test_extract_assigment_chained_if);\n+    fn test_pull_assignment_up_chained_if() {\n+        mark::check!(test_pull_assignment_up_chained_if);\n         check_assist(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -283,9 +283,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_extract_assigment_retains_stmts() {\n+    fn test_pull_assignment_up_retains_stmts() {\n         check_assist(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -314,9 +314,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn extract_assignment_let_stmt_not_applicable() {\n+    fn pull_assignment_up_let_stmt_not_applicable() {\n         check_assist_not_applicable(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -331,9 +331,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn extract_assignment_if_missing_assigment_not_applicable() {\n+    fn pull_assignment_up_if_missing_assigment_not_applicable() {\n         check_assist_not_applicable(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -346,9 +346,9 @@ fn foo() {\n     }\n \n     #[test]\n-    fn extract_assignment_match_missing_assigment_not_applicable() {\n+    fn pull_assignment_up_match_missing_assigment_not_applicable() {\n         check_assist_not_applicable(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n fn foo() {\n     let mut a = 1;\n@@ -367,10 +367,10 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_extract_assignment_field_assignment() {\n-        mark::check!(test_extract_assignment_field_assignment);\n+    fn test_pull_assignment_up_field_assignment() {\n+        mark::check!(test_pull_assignment_up_field_assignment);\n         check_assist(\n-            extract_assigment,\n+            pull_assignment_up,\n             r#\"\n struct A(usize);\n ", "previous_filename": "crates/assists/src/handlers/extract_assignment.rs"}, {"sha": "01baa65fe02daf4785c78343471ba1a8c1bf7b95", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "patch": "@@ -116,7 +116,6 @@ mod handlers {\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n-    mod extract_assignment;\n     mod extract_module_to_file;\n     mod extract_struct_from_enum_variant;\n     mod extract_variable;\n@@ -125,8 +124,8 @@ mod handlers {\n     mod flip_binexpr;\n     mod flip_comma;\n     mod flip_trait_bound;\n-    mod generate_derive;\n     mod generate_default_from_enum_variant;\n+    mod generate_derive;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n     mod generate_impl;\n@@ -139,6 +138,7 @@ mod handlers {\n     mod merge_match_arms;\n     mod move_bounds;\n     mod move_guard;\n+    mod pull_assignment_up;\n     mod qualify_path;\n     mod raw_string;\n     mod remove_dbg;\n@@ -168,7 +168,6 @@ mod handlers {\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n-            extract_assignment::extract_assigment,\n             extract_module_to_file::extract_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_variable::extract_variable,\n@@ -177,8 +176,8 @@ mod handlers {\n             flip_binexpr::flip_binexpr,\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n-            generate_derive::generate_derive,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n+            generate_derive::generate_derive,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n@@ -192,6 +191,7 @@ mod handlers {\n             move_bounds::move_bounds_to_where_clause,\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n+            pull_assignment_up::pull_assignment_up,\n             qualify_path::qualify_path,\n             raw_string::add_hash,\n             raw_string::make_usual_string,"}, {"sha": "85e3c6742974aeb6e9c8d1e348f468d6e31b7844", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484df745cc4885a5f05ce7a5d5d1be4215bcb5d3/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=484df745cc4885a5f05ce7a5d5d1be4215bcb5d3", "patch": "@@ -237,35 +237,6 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n-#[test]\n-fn doctest_extract_assignment() {\n-    check_doc_test(\n-        \"extract_assignment\",\n-        r#####\"\n-fn main() {\n-    let mut foo = 6;\n-\n-    if true {\n-        <|>foo = 5;\n-    } else {\n-        foo = 4;\n-    }\n-}\n-\"#####,\n-        r#####\"\n-fn main() {\n-    let mut foo = 6;\n-\n-    foo = if true {\n-        5\n-    } else {\n-        4\n-    };\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_extract_module_to_file() {\n     check_doc_test(\n@@ -766,6 +737,35 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_pull_assignment_up() {\n+    check_doc_test(\n+        \"pull_assignment_up\",\n+        r#####\"\n+fn main() {\n+    let mut foo = 6;\n+\n+    if true {\n+        <|>foo = 5;\n+    } else {\n+        foo = 4;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let mut foo = 6;\n+\n+    foo = if true {\n+        5\n+    } else {\n+        4\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_qualify_path() {\n     check_doc_test("}]}